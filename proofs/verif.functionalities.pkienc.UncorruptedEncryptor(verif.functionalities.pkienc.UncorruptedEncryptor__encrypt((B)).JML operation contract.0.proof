\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Jul 18 00:06:35 CEST 2017
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=\\#begexpand_inByte\\#end,\\#begexpand_inChar\\#end,\\#begexpand_inShort\\#end,\\#begexpand_inInt\\#end,\\#begexpand_inLong\\#end
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=5000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Tue Jul 18 00:06:35 CEST 2017
name=verif.functionalities.pkienc.UncorruptedEncryptor[verif.functionalities.pkienc.UncorruptedEncryptor\\:\\:encrypt([B)].JML operation contract.0
contract=verif.functionalities.pkienc.UncorruptedEncryptor[verif.functionalities.pkienc.UncorruptedEncryptor\\:\\:encrypt([B)].JML operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mihai" ) (keyVersion "0814267c8a184b1e7da1309b7a9875095ca72975"))
(keyLog "1" (keyUser "mihai" ) (keyVersion "0814267c8a184b1e7da1309b7a9875095ca72975"))

(autoModeTime "4847")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "message,self,result,exc,heapAtPre,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "5"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "assignment" (formula "9") (term "1") (userinteraction))
(builtin "One Step Simplification" (formula "9"))
(rule "methodBodyExpand" (formula "9") (term "1") (newnames "heapBefore_encrypt,savedHeapBefore_encrypt") (userinteraction))
(builtin "One Step Simplification" (formula "9"))
(rule "variableDeclarationAssign" (formula "9") (term "1") (userinteraction))
(rule "variableDeclaration" (formula "9") (term "1") (newnames "randomCipher") (userinteraction))
(rule "assignment" (formula "9") (term "1") (userinteraction))
(builtin "One Step Simplification" (formula "9"))
(rule "methodCallWithAssignmentUnfoldArguments" (formula "9") (term "1") (userinteraction))
(rule "variableDeclarationAssign" (formula "9") (term "1") (userinteraction))
(rule "variableDeclaration" (formula "9") (term "1") (newnames "var") (userinteraction))
(rule "methodCallWithAssignmentUnfoldArguments" (formula "9") (term "1") (userinteraction))
(rule "variableDeclarationAssign" (formula "9") (term "1") (userinteraction))
(rule "variableDeclaration" (formula "9") (term "1") (newnames "var_1") (userinteraction))
(rule "methodCallWithAssignmentUnfoldArguments" (formula "9") (term "1") (userinteraction))
(rule "variableDeclarationAssign" (formula "9") (term "1") (userinteraction))
(rule "variableDeclaration" (formula "9") (term "1") (newnames "var_2") (userinteraction))
(rule "assignment_read_length" (formula "9") (term "1") (userinteraction))
(branch "Normal Execution (_message != null)"
   (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "8")))
   (builtin "One Step Simplification" (formula "10"))
   (builtin "Use Operation Contract" (formula "10") (newnames "heapBefore_getZeroMessage,result_0,exc_0,heapAfter_getZeroMessage,anon_heap_getZeroMessage") (contract "verif.utils.MessageTools[verif.utils.MessageTools::getZeroMessage(int)].JML normal_behavior operation contract.0"))
   (branch "Post (getZeroMessage)"
      (builtin "One Step Simplification" (formula "8"))
      (rule "false_right" (formula "11"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "11"))
      (rule "notLeft" (formula "12"))
      (rule "notLeft" (formula "11"))
      (rule "assignment" (formula "16") (term "1,1") (userinteraction))
      (rule "blockEmpty" (formula "16") (term "1,1,1") (userinteraction))
      (rule "variableDeclarationAssign" (formula "16") (term "1,1,1") (userinteraction))
      (rule "variableDeclaration" (formula "16") (term "1,1,1") (newnames "var_3") (userinteraction))
      (rule "methodCallWithAssignmentUnfoldArguments" (formula "16") (term "1,1,1") (userinteraction))
      (rule "variableDeclarationAssign" (formula "16") (term "1,1,1") (userinteraction))
      (rule "variableDeclaration" (formula "16") (term "1,1,1") (newnames "var_4") (userinteraction))
      (rule "assignment_read_attribute_this" (formula "16") (term "1,1,1") (userinteraction))
      (builtin "One Step Simplification" (formula "16"))
      (builtin "Use Operation Contract" (formula "16") (newnames "heapBefore_copyOf,result_1,exc_1") (contract "verif.utils.MessageTools[verif.utils.MessageTools::copyOf([B)].JML normal_behavior operation contract.0#verif.utils.MessageTools[verif.utils.MessageTools::copyOf([B)].JML normal_behavior operation contract.1"))
      (branch "Post (copyOf)"
         (builtin "One Step Simplification" (formula "12"))
         (rule "andLeft" (formula "12"))
         (rule "andLeft" (formula "13"))
         (rule "andLeft" (formula "12"))
         (rule "assignment" (formula "20") (term "1") (userinteraction))
         (rule "blockEmpty" (formula "20") (term "1,1") (userinteraction))
         (builtin "One Step Simplification" (formula "20"))
         (builtin "Use Operation Contract" (formula "20") (newnames "heapBefore_pke_encrypt,result_2,exc_2,heapAfter_pke_encrypt,anon_heap_pke_encrypt") (contract "verif.lib.crypto.CryptoLib[verif.lib.crypto.CryptoLib::pke_encrypt([B,[B)].JML behavior operation contract.0"))
         (branch "Post (pke_encrypt)"
            (builtin "One Step Simplification" (formula "17"))
            (rule "andLeft" (formula "17"))
            (rule "andLeft" (formula "18"))
            (rule "andLeft" (formula "18"))
            (builtin "One Step Simplification" (formula "25"))
            (rule "assignment" (formula "25") (term "1") (userinteraction))
            (rule "blockEmpty" (formula "25") (term "1,1") (userinteraction))
            (builtin "One Step Simplification" (formula "25"))
            (builtin "Use Operation Contract" (formula "25") (newnames "heapBefore_copyOf_0,result_3,exc_3") (contract "verif.utils.MessageTools[verif.utils.MessageTools::copyOf([B)].JML normal_behavior operation contract.0#verif.utils.MessageTools[verif.utils.MessageTools::copyOf([B)].JML normal_behavior operation contract.1"))
            (branch "Post (copyOf)"
               (builtin "One Step Simplification" (formula "21"))
               (rule "assignment" (formula "26") (term "1") (userinteraction))
               (rule "blockEmpty" (formula "26") (term "1,1") (userinteraction))
               (rule "ifUnfold" (formula "26") (term "1,1") (inst "#boolv=x") (userinteraction))
               (rule "variableDeclaration" (formula "26") (term "1,1") (newnames "x_1") (userinteraction))
               (rule "equality_comparison_simple" (formula "26") (term "1,1") (userinteraction))
               (rule "if" (formula "26") (term "1,1,1") (userinteraction))
               (builtin "One Step Simplification" (formula "26"))
               (rule "ifthenelse_split_for" (formula "26") (userinteraction))
               (branch "result_3 = null TRUE"
                  (rule "typeEqDerived" (formula "21") (term "0,1,1") (ifseqformula "19"))
                  (rule "typeEqDerived" (formula "21") (term "0,0,1") (ifseqformula "19"))
                  (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "19")))
                  (rule "true_left" (formula "21"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "10") (term "1") (ifseqformula "9"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1") (ifseqformula "18"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "1") (ifseqformula "9"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,1") (ifseqformula "9"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "1,1,0") (ifseqformula "18"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "0,1,1,0") (ifseqformula "9"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "0,0,0,0,1") (ifseqformula "9"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "0,0,0,0,1,0,1") (ifseqformula "18"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "0,0,0,0,0,1,0,1") (ifseqformula "9"))
                  (rule "translateJavaSubInt" (formula "26") (term "0,2,1,0,0,1,1,1,1,0,0,0,1"))
                  (rule "andLeft" (formula "21"))
                  (rule "andLeft" (formula "22"))
                  (rule "andLeft" (formula "21"))
                  (rule "eqSymm" (formula "29") (term "1,0,0,1,0,1"))
                  (rule "eqSymm" (formula "7"))
                  (rule "eqSymm" (formula "29") (term "0,1,1,0,0,0,1"))
                  (rule "eqSymm" (formula "15") (term "1,0,1"))
                  (rule "eqSymm" (formula "29") (term "0,1,1,1,0,0,0,1"))
                  (rule "replace_known_left" (formula "24") (term "0,1") (ifseqformula "1"))
                  (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "21")))
                  (rule "true_left" (formula "24"))
                  (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "27"))
                  (builtin "One Step Simplification" (formula "5"))
                  (rule "replace_known_left" (formula "16") (term "1,1") (ifseqformula "13"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "replace_known_left" (formula "23") (term "1,1") (ifseqformula "21"))
                  (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "1")))
                  (rule "replace_known_left" (formula "15") (term "1,1") (ifseqformula "13"))
                  (builtin "One Step Simplification" (formula "15"))
                  (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "25"))
                  (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "24")))
                  (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "1"))
                  (builtin "One Step Simplification" (formula "22"))
                  (rule "true_left" (formula "22"))
                  (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "22"))
                  (builtin "One Step Simplification" (formula "20"))
                  (rule "true_left" (formula "20"))
                  (rule "polySimp_elimSub" (formula "26") (term "0,2,1,0,0,1,1,1,1,0,0,0,1"))
                  (rule "mul_literals" (formula "26") (term "1,0,2,1,0,0,1,1,1,1,0,0,0,1"))
                  (rule "polySimp_addComm0" (formula "26") (term "0,2,1,0,0,1,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,0,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,0,1,0,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,0,1,0,0,0,1"))
                  (rule "blockThrow" (formula "26") (term "1"))
                  (rule "applyEq" (formula "26") (term "0,1,0") (ifseqformula "1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,0,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,0,1,0,0,0,1"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,0,1,0,0,0,1"))
                  (rule "mul_literals" (formula "26") (term "0,1,1,0,0,0,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,0,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,0,1,0,0,0,1"))
                  (rule "array2seqDef" (formula "26") (term "1,0,1,0,0,1,0,0,0,1") (inst "u=u"))
                  (rule "eqSymm" (formula "26") (term "0,1,0,0,1,0,0,0,1"))
                  (rule "array2seqDef" (formula "26") (term "1,0,1,1,1,1,0,0,0,1") (inst "u=u"))
                  (rule "eqSymm" (formula "26") (term "0,1,1,1,1,0,0,0,1"))
                  (rule "elementOfUnion" (formula "26") (term "0,0,0,0,1,0,1"))
                  (rule "elementOfSingleton" (formula "26") (term "0,0,0,0,0,1,0,1"))
                  (rule "elementOfSingleton" (formula "26") (term "1,0,0,0,0,1,0,1"))
                  (rule "array2seqDef" (formula "26") (term "0,0,0,1,1,0,0,0,1") (inst "u=u"))
                  (rule "array2seqDef" (formula "26") (term "1,0,1,1,0,0,0,1") (inst "u=u"))
                  (rule "array2seqDef" (formula "26") (term "0,0,0,1,1,1,0,0,0,1") (inst "u=u"))
                  (rule "array2seqDef" (formula "26") (term "1,0,1,1,1,0,0,0,1") (inst "u=u"))
                  (rule "array2seqDef" (formula "15") (term "1,1,1") (inst "u=u"))
                  (rule "eqSymm" (formula "15") (term "1,1"))
                  (rule "array2seqDef" (formula "26") (term "1,0,1,0,0,1,0,0,0,1") (inst "u=u"))
                  (rule "eqSymm" (formula "26") (term "0,1,0,0,1,0,0,0,1"))
                  (rule "array2seqDef" (formula "26") (term "1,0,1,1,1,1,0,0,0,1") (inst "u=u"))
                  (rule "eqSymm" (formula "26") (term "0,1,1,1,1,0,0,0,1"))
                  (rule "eqSeqDef" (formula "26") (term "0,1,1,0,0,0,1") (inst "iv=iv"))
                  (rule "lenOfSeqDef" (formula "26") (term "1,0,0,1,1,0,0,0,1"))
                  (rule "polySimp_elimSub" (formula "26") (term "1,1,0,0,1,1,0,0,0,1"))
                  (rule "mul_literals" (formula "26") (term "1,1,1,0,0,1,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "1,1,0,0,1,1,0,0,0,1"))
                  (rule "lenOfSeqConcat" (formula "26") (term "1,1,0,0,1,0,1,1,0,0,0,1"))
                  (builtin "One Step Simplification" (formula "26"))
                  (rule "polySimp_addComm0" (formula "26") (term "1,1,0,0,1,0,1,1,0,0,0,1"))
                  (rule "getOfSeqDef" (formula "26") (term "1,1,0,1,0,1,1,0,0,0,1"))
                  (rule "castDel" (formula "26") (term "1,1,1,0,1,0,1,1,0,0,0,1"))
                  (rule "castDel" (formula "26") (term "2,1,1,0,1,0,1,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "0,2,1,1,1,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_elimSub" (formula "26") (term "1,1,0,1,1,0,1,0,1,1,0,0,0,1"))
                  (rule "mul_literals" (formula "26") (term "1,1,1,0,1,1,0,1,0,1,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "1,1,0,1,1,0,1,0,1,1,0,0,0,1"))
                  (rule "lenOfSeqConcat" (formula "26") (term "0,0,0,1,1,0,0,0,1"))
                  (builtin "One Step Simplification" (formula "26"))
                  (rule "polySimp_homoEq" (formula "26") (term "0,0,1,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,1,1,0,0,0,1"))
                  (rule "polySimp_addComm0" (formula "26") (term "1,1,0,0,0,1,1,0,0,0,1"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0,1,1,0,0,0,1"))
                  (rule "mul_literals" (formula "26") (term "0,1,0,0,0,1,1,0,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,1,1,0,0,0,1"))
                  (rule "polySimp_addComm0" (formula "26") (term "0,0,0,0,1,1,0,0,0,1"))
                  (rule "lenOfSeqDef" (formula "26") (term "1,1,1,0,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_elimSub" (formula "26") (term "1,1,1,1,0,0,1,0,1,1,0,0,0,1"))
                  (rule "mul_literals" (formula "26") (term "1,1,1,1,1,0,0,1,0,1,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "1,1,1,1,0,0,1,0,1,1,0,0,0,1"))
                  (rule "lenOfSeqDef" (formula "26") (term "0,1,0,0,0,1,1,0,0,0,1"))
                  (rule "polySimp_elimSub" (formula "26") (term "1,0,1,0,0,0,1,1,0,0,0,1"))
                  (rule "mul_literals" (formula "26") (term "1,1,0,1,0,0,0,1,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "1,0,1,0,0,0,1,1,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,1,1,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,1,1,0,1,0,1,1,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "26") (term "0,1,0,0,0,0,1,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "0,0,1,0,0,0,0,1,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,0,0,1,1,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "26") (term "0,1,1,1,0,0,1,0,1,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "0,0,1,1,1,0,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,1,1,0,0,1,0,1,1,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "26") (term "0,0,1,0,0,0,1,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "0,0,0,1,0,0,0,1,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,1,0,0,0,1,1,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,1,0,1,1,0,0,0,1"))
                  (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,1,0,1,1,0,0,0,1"))
                  (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,1,0,1,1,0,0,0,1"))
                  (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,1,0,1,1,0,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1,0,1,1,0,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,1,1,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_sepNegMonomial" (formula "26") (term "0,0,1,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "0,0,0,1,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "0,0,0,1,1,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,1,1,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,1,1,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,1,0,1,1,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,1,1,0,1,0,1,1,0,0,0,1"))
                  (rule "mul_literals" (formula "26") (term "0,1,1,0,1,1,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,1,1,0,1,0,1,1,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,1,0,1,1,0,0,0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,1,1,0,0,1,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "0,0,1,1,0,0,1,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "0,0,1,1,0,0,1,1,0,0,0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,0,0,0,1,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "0,0,0,0,0,1,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "0,0,0,0,0,1,1,0,0,0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,1,1,0,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "0,0,1,1,0,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "0,0,1,1,0,0,1,0,1,1,0,0,0,1"))
                  (rule "array2seqDef" (formula "15") (term "1,1,1") (inst "u=u"))
                  (rule "eqSymm" (formula "15") (term "1,1"))
                  (rule "eqSeqDef" (formula "26") (term "0,1,1,1,1,0,0,0,1") (inst "iv=iv"))
                  (rule "lenOfSeqDef" (formula "26") (term "1,1,0,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "polySimp_elimSub" (formula "26") (term "1,1,1,0,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "times_zero_2" (formula "26") (term "1,1,1,1,0,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "1,1,1,0,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "lenOfSeqDef" (formula "26") (term "0,0,0,1,1,1,1,0,0,0,1"))
                  (rule "eqSymm" (formula "26") (term "0,0,1,1,1,1,0,0,0,1"))
                  (rule "polySimp_elimSub" (formula "26") (term "1,1,0,0,1,1,1,1,0,0,0,1"))
                  (rule "times_zero_2" (formula "26") (term "1,1,1,0,0,1,1,1,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "1,1,0,0,1,1,1,1,0,0,0,1"))
                  (rule "getOfSeqDef" (formula "26") (term "0,1,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "castDel" (formula "26") (term "2,0,1,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "castDel" (formula "26") (term "1,0,1,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "0,2,1,0,1,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "eqSymm" (formula "26") (term "1,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "polySimp_elimSub" (formula "26") (term "1,1,0,1,1,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "times_zero_2" (formula "26") (term "1,1,1,0,1,1,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "1,1,0,1,1,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "lenOfSeqDef" (formula "26") (term "0,0,0,1,1,1,1,0,0,0,1"))
                  (rule "eqSymm" (formula "26") (term "0,0,1,1,1,1,0,0,0,1"))
                  (rule "polySimp_elimSub" (formula "26") (term "1,1,0,0,1,1,1,1,0,0,0,1"))
                  (rule "times_zero_2" (formula "26") (term "1,1,1,0,0,1,1,1,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "1,1,0,0,1,1,1,1,0,0,0,1"))
                  (rule "getOfSeqDef" (formula "26") (term "0,1,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "castDel" (formula "26") (term "1,0,1,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "castDel" (formula "26") (term "2,0,1,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "0,2,1,0,1,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "eqSymm" (formula "26") (term "1,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "polySimp_elimSub" (formula "26") (term "1,1,0,1,1,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "times_zero_2" (formula "26") (term "1,1,1,0,1,1,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "1,1,0,1,1,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "26") (term "0,1,1,0,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "0,0,1,1,0,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,1,0,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "26") (term "0,1,0,0,1,1,1,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "0,0,1,0,0,1,1,1,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,1,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "26") (term "0,0,0,0,1,1,1,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "0,0,0,0,0,1,1,1,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,0,0,1,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "eqSymm" (formula "26") (term "1,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,1,1,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "eqSymm" (formula "26") (term "1,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,1,1,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,1,1,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,1,0,0,1,1,1,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "0,0,1,0,0,1,1,1,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "0,0,1,0,0,1,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,0,0,0,1,1,1,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "0,0,0,0,0,1,1,1,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "0,0,0,0,0,1,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,0,1,0,0,1,0,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "0,0,0,1,0,0,1,0,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "0,0,0,1,0,0,1,0,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,1,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "eqSymm" (formula "26") (term "1,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,1,1,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,1,0,1,1,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,1,1,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "mul_literals" (formula "26") (term "0,1,1,0,1,1,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,1,1,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "mul_literals" (formula "26") (term "0,1,1,0,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,1,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "eqSymm" (formula "26") (term "1,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,1,1,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,1,0,1,1,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,1,1,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "mul_literals" (formula "26") (term "0,1,1,0,1,1,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,1,1,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "eqSeqDef" (formula "26") (term "0,1,1,1,0,0,0,1") (inst "iv=iv"))
                  (rule "lenOfSeqConcat" (formula "26") (term "0,0,0,1,1,1,0,0,0,1"))
                  (builtin "One Step Simplification" (formula "26"))
                  (rule "polySimp_homoEq" (formula "26") (term "0,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_addComm0" (formula "26") (term "1,1,0,0,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0,1,1,1,0,0,0,1"))
                  (rule "mul_literals" (formula "26") (term "0,1,0,0,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_addComm0" (formula "26") (term "0,0,0,0,1,1,1,0,0,0,1"))
                  (rule "getOfSeqDef" (formula "26") (term "1,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "castDel" (formula "26") (term "1,1,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "castDel" (formula "26") (term "2,1,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "0,2,1,1,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_elimSub" (formula "26") (term "1,1,0,1,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "times_zero_2" (formula "26") (term "1,1,1,0,1,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "1,1,0,1,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "lenOfSeqConcat" (formula "26") (term "1,1,0,0,1,0,1,1,1,0,0,0,1"))
                  (builtin "One Step Simplification" (formula "26"))
                  (rule "polySimp_addComm0" (formula "26") (term "1,1,0,0,1,0,1,1,1,0,0,0,1"))
                  (rule "lenOfSeqDef" (formula "26") (term "1,0,0,0,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_elimSub" (formula "26") (term "1,1,0,0,0,0,1,1,1,0,0,0,1"))
                  (rule "times_zero_2" (formula "26") (term "1,1,1,0,0,0,0,1,1,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "1,1,0,0,0,0,1,1,1,0,0,0,1"))
                  (rule "lenOfSeqDef" (formula "26") (term "0,1,0,0,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_elimSub" (formula "26") (term "1,0,1,0,0,0,1,1,1,0,0,0,1"))
                  (rule "times_zero_2" (formula "26") (term "1,1,0,1,0,0,0,1,1,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "1,0,1,0,0,0,1,1,1,0,0,0,1"))
                  (rule "lenOfSeqDef" (formula "26") (term "1,1,1,0,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_elimSub" (formula "26") (term "1,1,1,1,0,0,1,0,1,1,1,0,0,0,1"))
                  (rule "times_zero_2" (formula "26") (term "1,1,1,1,1,0,0,1,0,1,1,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "1,1,1,1,0,0,1,0,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,1,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,1,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "26") (term "0,1,0,0,0,0,1,1,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "0,0,1,0,0,0,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,0,0,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "26") (term "0,0,1,0,0,0,1,1,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "0,0,0,1,0,0,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,1,0,0,0,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "26") (term "0,1,1,1,0,0,1,0,1,1,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "0,0,1,1,1,0,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,1,1,0,0,1,0,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,1,0,1,1,1,0,0,0,1"))
                  (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,1,0,1,1,1,0,0,0,1"))
                  (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,1,0,1,1,1,0,0,0,1"))
                  (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,1,0,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1,0,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,1,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_sepNegMonomial" (formula "26") (term "0,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "0,0,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "0,0,0,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,1,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,1,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,1,0,1,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,1,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "mul_literals" (formula "26") (term "0,1,1,0,1,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,1,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,0,0,0,1,0,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "0,0,0,0,0,1,0,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "0,0,0,0,0,1,0,0,1,0,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,1,1,0,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "0,0,1,1,0,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "0,0,1,1,0,0,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,0,0,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "0,0,0,0,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "0,0,0,0,0,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,1,0,1,1,1,0,0,0,1"))
                  (rule "pullOutSelect" (formula "16") (term "0,0") (inst "selectSK=verif_functionalities_pkienc_Encryptor_publicKey_2"))
                  (rule "applyEq" (formula "15") (term "0,1,0,1,1") (ifseqformula "16"))
                  (rule "applyEq" (formula "15") (term "1,2,0,1,1") (ifseqformula "16"))
                  (rule "applyEq" (formula "15") (term "0,0,0") (ifseqformula "16"))
                  (rule "simplifySelectOfAnonEQ" (formula "16") (ifseqformula "9"))
                  (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "25")) (ifInst ""  (formula "3")))
                  (rule "applyEqReverse" (formula "17") (term "0,0") (ifseqformula "16"))
                  (rule "applyEqReverse" (formula "15") (term "0,1,0,1,1") (ifseqformula "16"))
                  (rule "applyEqReverse" (formula "15") (term "1,2,0,1,1") (ifseqformula "16"))
                  (rule "applyEqReverse" (formula "15") (term "0,0,0") (ifseqformula "16"))
                  (rule "hideAuxiliaryEq" (formula "16"))
                  (rule "getOfSeqConcat" (formula "26") (term "0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_elimSub" (formula "26") (term "1,2,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "lenOfSeqDef" (formula "26") (term "1,0,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_elimSub" (formula "26") (term "1,1,0,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "times_zero_2" (formula "26") (term "1,1,1,0,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "1,1,0,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "getOfSeqDef" (formula "26") (term "1,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "castDel" (formula "26") (term "2,1,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "castDel" (formula "26") (term "1,1,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "0,2,1,1,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_elimSub" (formula "26") (term "1,1,0,1,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "times_zero_2" (formula "26") (term "1,1,1,0,1,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "1,1,0,1,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "lenOfSeqDef" (formula "26") (term "0,1,1,2,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_elimSub" (formula "26") (term "1,0,1,1,2,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "times_zero_2" (formula "26") (term "1,1,0,1,1,2,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "1,0,1,1,2,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_addComm0" (formula "26") (term "1,2,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "getOfSeqSingleton" (formula "26") (term "2,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "castDel" (formula "26") (term "2,2,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "castDel" (formula "26") (term "1,2,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "26") (term "0,1,0,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "0,0,1,0,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,1,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,1,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "26") (term "0,0,0,0,0,2,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "0,0,0,0,0,0,2,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,0,0,0,2,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "26") (term "0,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,1,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_sepPosMonomial" (formula "26") (term "0,2,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,0,2,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,0,2,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,1,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,1,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,1,0,1,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "mul_literals" (formula "26") (term "0,1,1,0,1,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,1,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,1,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,0,1,0,0,0,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "0,0,0,1,0,0,0,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "0,0,0,1,0,0,0,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,1,0,2,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "0,0,1,0,2,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "0,0,1,0,2,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,1,0,1,0,1,1,0,0,0,1"))
                  (rule "eqSeqDef" (formula "26") (term "0,1,0,0,1,0,0,0,1") (inst "iv=iv"))
                  (rule "getOfSeqDef" (formula "26") (term "0,1,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "castDel" (formula "26") (term "1,0,1,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "castDel" (formula "26") (term "2,0,1,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "0,2,1,0,1,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "eqSymm" (formula "26") (term "1,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "polySimp_elimSub" (formula "26") (term "1,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "mul_literals" (formula "26") (term "1,1,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "1,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "lenOfSeqDef" (formula "26") (term "0,0,0,1,0,0,1,0,0,0,1"))
                  (rule "eqSymm" (formula "26") (term "0,0,1,0,0,1,0,0,0,1"))
                  (rule "polySimp_elimSub" (formula "26") (term "1,1,0,0,1,0,0,1,0,0,0,1"))
                  (rule "mul_literals" (formula "26") (term "1,1,1,0,0,1,0,0,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "1,1,0,0,1,0,0,1,0,0,0,1"))
                  (rule "lenOfSeqDef" (formula "26") (term "1,1,0,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "polySimp_elimSub" (formula "26") (term "1,1,1,0,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "times_zero_2" (formula "26") (term "1,1,1,1,0,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "1,1,1,0,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "getOfSeqDef" (formula "26") (term "0,1,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "castDel" (formula "26") (term "1,0,1,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "castDel" (formula "26") (term "2,0,1,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "0,2,1,0,1,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "eqSymm" (formula "26") (term "1,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "polySimp_elimSub" (formula "26") (term "1,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "mul_literals" (formula "26") (term "1,1,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "1,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "lenOfSeqDef" (formula "26") (term "0,0,0,1,0,0,1,0,0,0,1"))
                  (rule "eqSymm" (formula "26") (term "0,0,1,0,0,1,0,0,0,1"))
                  (rule "polySimp_elimSub" (formula "26") (term "1,1,0,0,1,0,0,1,0,0,0,1"))
                  (rule "times_zero_2" (formula "26") (term "1,1,1,0,0,1,0,0,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "1,1,0,0,1,0,0,1,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "26") (term "0,1,1,0,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "0,0,1,1,0,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,1,0,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "eqSymm" (formula "26") (term "1,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "26") (term "0,1,0,0,1,0,0,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "0,0,1,0,0,1,0,0,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,1,0,0,1,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "26") (term "0,0,0,0,1,0,0,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "0,0,0,0,0,1,0,0,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,0,0,1,0,0,1,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "eqSymm" (formula "26") (term "1,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,1,1,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,1,0,0,1,0,0,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "0,0,1,0,0,1,0,0,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "0,0,1,0,0,1,0,0,1,0,0,0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,0,0,0,1,0,0,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "0,0,0,0,0,1,0,0,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "0,0,0,0,0,1,0,0,1,0,0,0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,0,1,0,0,1,0,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "0,0,0,1,0,0,1,0,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "0,0,0,1,0,0,1,0,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,1,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "eqSymm" (formula "26") (term "1,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "mul_literals" (formula "26") (term "0,1,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "mul_literals" (formula "26") (term "0,1,1,0,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,1,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "eqSymm" (formula "26") (term "1,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "mul_literals" (formula "26") (term "0,1,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1"))
                  (rule "getOfSeqConcat" (formula "26") (term "0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_elimSub" (formula "26") (term "1,2,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "lenOfSeqDef" (formula "26") (term "1,0,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_elimSub" (formula "26") (term "1,1,0,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "times_zero_2" (formula "26") (term "1,1,1,0,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "1,1,0,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "getOfSeqDef" (formula "26") (term "1,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "castDel" (formula "26") (term "2,1,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "castDel" (formula "26") (term "1,1,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "0,2,1,1,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_elimSub" (formula "26") (term "1,1,0,1,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "times_zero_2" (formula "26") (term "1,1,1,0,1,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "1,1,0,1,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "lenOfSeqDef" (formula "26") (term "0,1,1,2,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_elimSub" (formula "26") (term "1,0,1,1,2,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "times_zero_2" (formula "26") (term "1,1,0,1,1,2,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "1,0,1,1,2,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_addComm0" (formula "26") (term "1,2,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "getOfSeqSingleton" (formula "26") (term "2,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "castDel" (formula "26") (term "1,2,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "castDel" (formula "26") (term "2,2,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "26") (term "0,1,0,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "0,0,1,0,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,1,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,1,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "26") (term "0,0,0,0,0,2,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "0,0,0,0,0,0,2,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,0,0,0,2,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "26") (term "0,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,1,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_sepPosMonomial" (formula "26") (term "0,2,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,0,2,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,0,2,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,1,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,1,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,1,0,1,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "mul_literals" (formula "26") (term "0,1,1,0,1,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,1,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,1,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,1,0,2,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "0,0,1,0,2,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "0,0,1,0,2,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,1,1,0,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "0,0,1,1,0,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "0,0,1,1,0,0,1,0,1,0,1,1,1,0,0,0,1"))
                  (rule "eqSeqDef" (formula "15") (term "1,1") (inst "iv=iv"))
                  (rule "lenOfSeqDef" (formula "15") (term "0,0,1,1"))
                  (rule "eqSymm" (formula "15") (term "0,1,1"))
                  (rule "polySimp_elimSub" (formula "15") (term "1,1,0,1,1"))
                  (rule "mul_literals" (formula "15") (term "1,1,1,0,1,1"))
                  (rule "add_zero_right" (formula "15") (term "1,1,0,1,1"))
                  (rule "lenOfSeqDef" (formula "15") (term "1,1,0,0,1,1,1"))
                  (rule "polySimp_elimSub" (formula "15") (term "1,1,1,0,0,1,1,1"))
                  (rule "times_zero_2" (formula "15") (term "1,1,1,1,0,0,1,1,1"))
                  (rule "add_zero_right" (formula "15") (term "1,1,1,0,0,1,1,1"))
                  (rule "getOfSeqDef" (formula "15") (term "1,1,0,1,1,1"))
                  (rule "castDel" (formula "15") (term "1,1,1,0,1,1,1"))
                  (rule "castDel" (formula "15") (term "2,1,1,0,1,1,1"))
                  (rule "add_zero_right" (formula "15") (term "0,2,1,1,1,0,1,1,1"))
                  (rule "polySimp_elimSub" (formula "15") (term "1,1,0,1,1,0,1,1,1"))
                  (rule "mul_literals" (formula "15") (term "1,1,1,0,1,1,0,1,1,1"))
                  (rule "add_zero_right" (formula "15") (term "1,1,0,1,1,0,1,1,1"))
                  (rule "getOfSeqDef" (formula "15") (term "0,1,0,1,1,1"))
                  (rule "castDel" (formula "15") (term "1,0,1,0,1,1,1"))
                  (rule "castDel" (formula "15") (term "2,0,1,0,1,1,1"))
                  (rule "add_zero_right" (formula "15") (term "0,2,1,0,1,0,1,1,1"))
                  (rule "polySimp_elimSub" (formula "15") (term "1,1,0,0,1,0,1,1,1"))
                  (rule "times_zero_2" (formula "15") (term "1,1,1,0,0,1,0,1,1,1"))
                  (rule "add_zero_right" (formula "15") (term "1,1,0,0,1,0,1,1,1"))
                  (rule "lenOfSeqDef" (formula "15") (term "0,0,1,1"))
                  (rule "eqSymm" (formula "15") (term "0,1,1"))
                  (rule "polySimp_elimSub" (formula "15") (term "1,1,0,1,1"))
                  (rule "times_zero_2" (formula "15") (term "1,1,1,0,1,1"))
                  (rule "add_zero_right" (formula "15") (term "1,1,0,1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "15") (term "0,1,1,0,0,1,1,1"))
                  (rule "add_zero_right" (formula "15") (term "0,0,1,1,0,0,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,1,0,0,1,1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,1,1,0,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,1,1,0,1,1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,0,1,1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "15") (term "0,1,0,1,1"))
                  (rule "add_zero_right" (formula "15") (term "0,0,1,0,1,1"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0,1,1"))
                  (rule "add_zero_right" (formula "15") (term "0,0,0,0,1,1"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,1,1"))
                  (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,1,1"))
                  (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,1,1,0,1,1,1"))
                  (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,0,1,1,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,1,1,0,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,1,1,0,1,1,1"))
                  (rule "polySimp_rightDist" (formula "15") (term "1,1,0,1,1,0,1,1,1"))
                  (rule "mul_literals" (formula "15") (term "0,1,1,0,1,1,0,1,1,1"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,1,1,0,1,1,1"))
                  (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,1,1,0,1,1,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,0,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,0,1,1,1"))
                  (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,0,1,1,1"))
                  (rule "mul_literals" (formula "15") (term "0,1,1,0,0,1,0,1,1,1"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,0,1,1,1"))
                  (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,0,1,1,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,1,0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "0,0,1,0,1,1"))
                  (rule "polySimp_elimOne" (formula "15") (term "0,0,1,0,1,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,0,1,1"))
                  (rule "polySimp_elimOne" (formula "15") (term "0,0,0,0,1,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,1,1"))
                  (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,1,1"))
                  (rule "mul_literals" (formula "15") (term "0,1,1,0,0,1,1,1"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,1,1"))
                  (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,1,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,1,1,1,0,0,1,1,1"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "0,0,1,1,1,0,0,1,1,1"))
                  (rule "polySimp_elimOne" (formula "15") (term "0,0,1,1,1,0,0,1,1,1"))
                  (rule "commuteUnion" (formula "18") (term "1,0"))
                  (rule "shift_paren_or" (formula "14"))
                  (rule "nnf_imp2or" (formula "26") (term "0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "nnf_imp2or" (formula "26") (term "0,1,0,1,1,0,0,0,1"))
                  (rule "nnf_imp2or" (formula "26") (term "0,0,1,0,0,0,1"))
                  (rule "nnf_imp2or" (formula "26") (term "0,1,0,1,1,1,0,0,0,1"))
                  (rule "arrayLengthIsAShort" (formula "11") (term "0"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "true_left" (formula "11"))
                  (rule "arrayLengthNotNegative" (formula "11") (term "0"))
                  (rule "applyEq" (formula "11") (term "0") (ifseqformula "12"))
                  (rule "arrayLengthIsAShort" (formula "12") (term "1"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "true_left" (formula "12"))
                  (rule "arrayLengthNotNegative" (formula "12") (term "1"))
                  (rule "nnf_imp2or" (formula "16") (term "0,1,1,1"))
                  (rule "arrayLengthIsAShort" (formula "7") (term "1"))
                  (builtin "One Step Simplification" (formula "7"))
                  (rule "true_left" (formula "7"))
                  (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                  (rule "applyEq" (formula "7") (term "0") (ifseqformula "8"))
                  (rule "arrayLengthNotNegative" (formula "8") (term "1"))
                  (rule "arrayLengthIsAShort" (formula "8") (term "0"))
                  (builtin "One Step Simplification" (formula "8"))
                  (rule "true_left" (formula "8"))
                  (rule "nnf_notAnd" (formula "17") (term "0,0,1,1,1"))
                  (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0,1,1,1"))
                  (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0,1,1,1"))
                  (rule "add_zero_right" (formula "17") (term "0,0,0,0,0,1,1,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,1,1,1"))
                  (rule "mul_literals" (formula "17") (term "1,0,0,0,1,1,1"))
                  (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0,1,1,1"))
                  (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,1,1,1"))
                  (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,1,1,1"))
                  (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,1,1,1"))
                  (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,1,1,1"))
                  (rule "add_zero_left" (formula "17") (term "0,0,1,0,0,1,1,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0,1,1,1"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,1,1,1"))
                  (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,1,1,1"))
                  (rule "nnf_notAnd" (formula "28") (term "0,0,0,1,0,0,0,1"))
                  (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0,0,1,0,0,0,1"))
                  (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0,0,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "28") (term "0,0,0,0,0,0,1,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0,0,1,0,0,0,1"))
                  (rule "mul_literals" (formula "28") (term "1,0,0,0,0,1,0,0,0,1"))
                  (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0,0,1,0,0,0,1"))
                  (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,0,1,0,0,0,1"))
                  (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0,0,1,0,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,0,1,0,0,0,1"))
                  (rule "add_literals" (formula "28") (term "0,0,0,1,0,0,0,1,0,0,0,1"))
                  (rule "add_zero_left" (formula "28") (term "0,0,1,0,0,0,1,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0,0,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,0,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0,0,1,0,0,0,1"))
                  (rule "nnf_notAnd" (formula "28") (term "1,0,0,1,0,0,0,1"))
                  (rule "nnf_notAnd" (formula "28") (term "0,0,1,0,1,1,0,0,0,1"))
                  (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0,1,0,1,1,0,0,0,1"))
                  (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0,1,0,1,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "28") (term "0,0,0,0,0,1,0,1,1,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0,1,0,1,1,0,0,0,1"))
                  (rule "mul_literals" (formula "28") (term "1,0,0,0,1,0,1,1,0,0,0,1"))
                  (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,1,0,1,1,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,1,0,1,1,0,0,0,1"))
                  (rule "mul_literals" (formula "28") (term "0,1,1,0,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,1,0,1,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,1,0,1,1,0,0,0,1"))
                  (rule "nnf_notAnd" (formula "28") (term "0,0,1,0,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0,1,0,1,1,1,0,0,0,1"))
                  (rule "mul_literals" (formula "28") (term "1,0,0,0,0,0,1,0,1,1,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "28") (term "0,0,0,0,0,1,0,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0,1,0,1,1,1,0,0,0,1"))
                  (rule "mul_literals" (formula "28") (term "1,0,0,0,1,0,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,1,0,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,1,0,1,1,1,0,0,0,1"))
                  (rule "mul_literals" (formula "28") (term "0,1,1,0,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,1,0,1,1,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,1,0,1,1,1,0,0,0,1"))
                  (rule "nnf_notAnd" (formula "28") (term "0,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "add_literals" (formula "28") (term "0,0,0,1,0,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "add_zero_left" (formula "28") (term "0,0,1,0,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "mul_literals" (formula "28") (term "1,0,0,0,0,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "add_zero_right" (formula "28") (term "0,0,0,0,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "mul_literals" (formula "28") (term "1,0,0,0,1,0,1,1,1,1,0,0,0,1"))
                  (rule "nnf_notAll" (formula "28") (term "1,1,0,0,1,0,0,0,1"))
                  (rule "nnf_imp2or" (formula "28") (term "0,0,1,1,0,0,1,0,0,0,1"))
                  (rule "nnf_notOr" (formula "28") (term "0,1,1,0,0,1,0,0,0,1"))
                  (builtin "One Step Simplification" (formula "28"))
                  (rule "commute_or_2" (formula "17") (term "0,1,1,1"))
                  (rule "commute_or" (formula "17") (term "0,0,1,1,1"))
                  (rule "throwUnfold" (formula "28") (term "1") (inst "#v0=r"))
                  (rule "variableDeclarationAssign" (formula "28") (term "1"))
                  (rule "variableDeclaration" (formula "28") (term "1") (newnames "r"))
                  (rule "arrayLengthNotNegative" (formula "17") (term "1,0,0,1,1"))
                  (rule "arrayLengthIsAShort" (formula "18") (term "1,0,0,1,1"))
                  (builtin "One Step Simplification" (formula "18"))
                  (rule "true_left" (formula "18"))
                  (rule "arrayLengthIsAShort" (formula "18") (term "1,1,0,1,1"))
                  (builtin "One Step Simplification" (formula "18"))
                  (rule "true_left" (formula "18"))
                  (rule "arrayLengthNotNegative" (formula "18") (term "1,1,0,1,1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "8") (term "0,0") (ifseqformula "2"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "9") (term "1,0,0") (ifseqformula "2"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "0,1") (ifseqformula "2"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0,0,0") (ifseqformula "2"))
                  (rule "instanceCreationAssignment" (formula "34") (term "1") (inst "#v0=r_1"))
                  (rule "variableDeclarationAssign" (formula "34") (term "1"))
                  (rule "variableDeclaration" (formula "34") (term "1") (newnames "r_1"))
                  (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "34") (term "1") (inst "#v0=r_2"))
                  (rule "variableDeclaration" (formula "34") (term "1") (newnames "r_2"))
                  (rule "methodBodyExpand" (formula "34") (term "1") (newnames "heapBefore_<createObject>,savedHeapBefore_<createObject>"))
                  (builtin "One Step Simplification" (formula "34"))
                  (rule "variableDeclaration" (formula "34") (term "1") (newnames "__NEW__"))
                  (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "34") (term "1") (inst "#v0=r_3"))
                  (rule "variableDeclaration" (formula "34") (term "1") (newnames "r_3"))
                  (rule "allocateInstance" (formula "34"))
                  (builtin "One Step Simplification" (formula "35"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "wellFormedAnonEQ" (formula "1") (term "0,1,0") (ifseqformula "27"))
                  (rule "wellFormedAnonEQ" (formula "1") (term "0,0,1,0") (ifseqformula "14"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0") (ifseqformula "27"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,1,0") (ifseqformula "14"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "replace_known_left" (formula "1") (term "1,0,0") (ifseqformula "14"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")) (ifInst ""  (formula "27")))
                  (rule "notLeft" (formula "1"))
                  (rule "orRight" (formula "31"))
                  (rule "orRight" (formula "31"))
                  (rule "blockEmpty" (formula "39") (term "1"))
                  (rule "assignment" (formula "39") (term "1"))
                  (builtin "One Step Simplification" (formula "39"))
                  (rule "methodBodyExpand" (formula "39") (term "1") (newnames "heapBefore_<create>,savedHeapBefore_<create>"))
                  (builtin "One Step Simplification" (formula "39"))
                  (rule "assignment_write_attribute_this" (formula "39") (term "1"))
                  (builtin "One Step Simplification" (formula "39"))
                  (rule "methodCallWithinClass" (formula "39") (term "1"))
                  (rule "methodBodyExpand" (formula "39") (term "1") (newnames "heapBefore_<prepareEnter>,savedHeapBefore_<prepareEnter>"))
                  (builtin "One Step Simplification" (formula "39"))
                  (rule "methodCallSuper" (formula "39") (term "1"))
                  (rule "methodBodyExpand" (formula "39") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
                  (builtin "One Step Simplification" (formula "39"))
                  (rule "methodCallSuper" (formula "39") (term "1"))
                  (rule "methodBodyExpand" (formula "39") (term "1") (newnames "heapBefore_<prepare>_0,savedHeapBefore_<prepare>_0"))
                  (builtin "One Step Simplification" (formula "39"))
                  (rule "methodCallSuper" (formula "39") (term "1"))
                  (rule "methodBodyExpand" (formula "39") (term "1") (newnames "heapBefore_<prepare>_1,savedHeapBefore_<prepare>_1"))
                  (builtin "One Step Simplification" (formula "39"))
                  (rule "methodCallEmpty" (formula "39") (term "1"))
                  (rule "blockEmpty" (formula "39") (term "1"))
                  (rule "assignment_write_attribute_this" (formula "39") (term "1"))
                  (builtin "One Step Simplification" (formula "39"))
                  (rule "castDel" (formula "39") (term "1,0,1,0"))
                  (rule "assignment_write_attribute_this" (formula "39") (term "1"))
                  (builtin "One Step Simplification" (formula "39"))
                  (rule "castDel" (formula "39") (term "1,0,1,0"))
                  (rule "methodCallEmpty" (formula "39") (term "1"))
                  (rule "methodCallEmpty" (formula "39") (term "1"))
                  (rule "methodCallEmpty" (formula "39") (term "1"))
                  (rule "blockEmpty" (formula "39") (term "1"))
                  (rule "methodCallReturnIgnoreResult" (formula "39") (term "1"))
                  (rule "methodCallReturn" (formula "39") (term "1"))
                  (rule "assignment" (formula "39") (term "1"))
                  (builtin "One Step Simplification" (formula "39"))
                  (rule "methodCallEmpty" (formula "39") (term "1"))
                  (rule "blockEmpty" (formula "39") (term "1"))
                  (rule "assignment" (formula "39") (term "1"))
                  (builtin "One Step Simplification" (formula "39"))
                  (rule "methodBodyExpand" (formula "39") (term "1") (newnames "heapBefore_<init>,savedHeapBefore_<init>"))
                  (builtin "One Step Simplification" (formula "39"))
                  (rule "methodCallSuper" (formula "39") (term "1"))
                  (rule "methodBodyExpand" (formula "39") (term "1") (newnames "heapBefore_<init>_0,savedHeapBefore_<init>_0"))
                  (builtin "One Step Simplification" (formula "39"))
                  (rule "methodCallSuper" (formula "39") (term "1"))
                  (rule "methodBodyExpand" (formula "39") (term "1") (newnames "heapBefore_<init>_1,savedHeapBefore_<init>_1"))
                  (builtin "One Step Simplification" (formula "39"))
                  (rule "methodCallSuper" (formula "39") (term "1"))
                  (rule "methodBodyExpand" (formula "39") (term "1") (newnames "heapBefore_<init>_2,savedHeapBefore_<init>_2"))
                  (builtin "One Step Simplification" (formula "39"))
                  (rule "methodCallEmpty" (formula "39") (term "1"))
                  (rule "blockEmpty" (formula "39") (term "1"))
                  (rule "assignment_write_attribute_this" (formula "39") (term "1"))
                  (builtin "One Step Simplification" (formula "39"))
                  (rule "castDel" (formula "39") (term "1,0,1,0"))
                  (builtin "One Step Simplification" (formula "39"))
                  (rule "assignment_write_attribute_this" (formula "39") (term "1"))
                  (builtin "One Step Simplification" (formula "39"))
                  (rule "castDel" (formula "39") (term "1,0,1,0"))
                  (builtin "One Step Simplification" (formula "39"))
                  (rule "methodCallEmpty" (formula "39") (term "1"))
                  (rule "methodCallEmpty" (formula "39") (term "1"))
                  (rule "methodCallEmpty" (formula "39") (term "1"))
                  (rule "blockEmpty" (formula "39") (term "1"))
                  (rule "assignment_write_attribute" (formula "39") (term "1"))
                  (branch "Normal Execution (r_1 != null)"
                     (builtin "One Step Simplification" (formula "40"))
                     (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "34")))
                     (rule "false_right" (formula "39"))
                     (rule "assignment" (formula "39") (term "1"))
                     (builtin "One Step Simplification" (formula "39"))
                     (rule "methodCallParamThrow" (formula "39") (term "1"))
                     (builtin "One Step Simplification" (formula "39"))
                     (rule "tryCatchThrow" (formula "39") (term "1"))
                     (rule "ifElseUnfold" (formula "39") (term "1") (inst "#boolv=x"))
                     (rule "variableDeclaration" (formula "39") (term "1") (newnames "x_2"))
                     (rule "equality_comparison_simple" (formula "39") (term "1"))
                     (builtin "One Step Simplification" (formula "39"))
                     (rule "replace_known_right" (formula "39") (term "0,0,1,0") (ifseqformula "34"))
                     (builtin "One Step Simplification" (formula "39"))
                     (rule "ifElseSplit" (formula "39"))
                     (branch "if x_2 true"
                        (builtin "One Step Simplification" (formula "40"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "if x_2 false"
                        (builtin "One Step Simplification" (formula "40"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "ifElseSplit" (formula "39"))
                        (branch "if r instanceof java.lang.Throwable true"
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "35")))
                           (rule "true_left" (formula "1"))
                           (rule "variableDeclaration" (formula "39") (term "1") (newnames "e_1"))
                           (rule "reference_type_cast" (formula "39") (term "1"))
                           (branch "Normal Execution (r instanceof java.lang.Throwable)"
                              (builtin "One Step Simplification" (formula "40"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "assignment" (formula "39") (term "1"))
                              (builtin "One Step Simplification" (formula "39"))
                              (rule "emptyModality" (formula "39") (term "1"))
                              (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "34")) (ifInst ""  (formula "34")) (ifInst ""  (formula "34")))
                              (rule "allRight" (formula "39") (inst "sk=f_1"))
                              (rule "allRight" (formula "39") (inst "sk=o_1"))
                              (rule "orRight" (formula "39"))
                              (rule "orRight" (formula "39"))
                              (rule "orRight" (formula "39"))
                              (rule "eqSymm" (formula "42"))
                              (rule "pullOutSelect" (formula "42") (term "0") (inst "selectSK=f_1_0"))
                              (rule "simplifySelectOfStore" (formula "1"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "castDel" (formula "1") (term "1,0"))
                              (rule "eqSymm" (formula "43"))
                              (rule "eqSymm" (formula "1") (term "1,0,0"))
                              (rule "eqSymm" (formula "1") (term "0,0,0"))
                              (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_1_1"))
                              (rule "simplifySelectOfStore" (formula "1"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "castDel" (formula "1") (term "1,0"))
                              (rule "eqSymm" (formula "1") (term "1,0,0"))
                              (rule "eqSymm" (formula "1") (term "0,0,0"))
                              (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_1_2"))
                              (rule "simplifySelectOfStore" (formula "1"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "castDel" (formula "1") (term "1,0"))
                              (rule "eqSymm" (formula "1") (term "0,0,0"))
                              (rule "eqSymm" (formula "1") (term "1,0,0"))
                              (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_1_3"))
                              (rule "simplifySelectOfCreate" (formula "1"))
                              (rule "castDel" (formula "1") (term "1,0"))
                              (rule "eqSymm" (formula "1") (term "0,0,0,0"))
                              (rule "replace_known_right" (formula "1") (term "0,1,0,0,0") (ifseqformula "38"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_1_4"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "32"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "19"))
                              (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
                              (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0"))
                              (rule "replace_known_right" (formula "1") (term "1,0,0,0,0") (ifseqformula "44"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
                              (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "45"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_1_5"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")))
                              (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "commute_and" (formula "45"))
                              (rule "commute_and" (formula "44"))
                              (rule "commute_and" (formula "5") (term "0,0"))
                              (rule "commute_and" (formula "4") (term "0,0"))
                              (rule "commute_and" (formula "3") (term "0,0"))
                              (rule "commute_and" (formula "2") (term "0,0"))
                              (rule "ifthenelse_split" (formula "29") (term "0,0,1,1"))
                              (branch "self.publicKey.length >= 1 TRUE"
                                 (rule "eqSymm" (formula "30") (term "0,1,1"))
                                 (rule "replace_known_left" (formula "30") (term "0,1,1,0,1,1,1") (ifseqformula "29"))
                                 (builtin "One Step Simplification" (formula "30"))
                                 (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "29"))
                                 (rule "leq_literals" (formula "26") (term "0"))
                                 (builtin "One Step Simplification" (formula "26"))
                                 (rule "true_left" (formula "26"))
                                 (rule "cut_direct" (formula "27") (term "0"))
                                 (branch "CUT: self.publicKey = null TRUE"
                                    (builtin "One Step Simplification" (formula "28"))
                                    (rule "true_left" (formula "28"))
                                    (rule "replace_known_left" (formula "29") (term "0,0") (ifseqformula "27"))
                                    (builtin "One Step Simplification" (formula "29"))
                                    (rule "true_left" (formula "29"))
                                    (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "27"))
                                    (builtin "One Step Simplification" (formula "29"))
                                    (rule "replace_known_left" (formula "25") (term "0,0") (ifseqformula "29"))
                                    (builtin "One Step Simplification" (formula "25"))
                                    (rule "true_left" (formula "25"))
                                    (rule "applyEq" (formula "27") (term "0,0") (ifseqformula "26"))
                                    (rule "applyEq" (formula "25") (term "0,0") (ifseqformula "28"))
                                    (rule "inEqSimp_subsumption1" (formula "25") (ifseqformula "27"))
                                    (rule "leq_literals" (formula "25") (term "0"))
                                    (builtin "One Step Simplification" (formula "25"))
                                    (rule "true_left" (formula "25"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " !o_1 = null & !( o_1.<created> = TRUE | o_1.<created>@anon_heap_getZeroMessage<<anonHeapFunction>> = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "34"))
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "replace_known_right" (formula "45") (term "0,1") (ifseqformula "33"))
                                       (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "32")))
                                       (rule "closeTrue" (formula "45"))
                                    )
                                    (branch " !o_1 = null & !( o_1.<created> = TRUE | o_1.<created>@anon_heap_getZeroMessage<<anonHeapFunction>> = TRUE) FALSE"
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "cut_direct" (formula "14") (term "0"))
                                       (branch "CUT: self.log = null TRUE"
                                          (builtin "One Step Simplification" (formula "15"))
                                          (rule "true_left" (formula "15"))
                                          (rule "applyEq" (formula "16") (term "1,0,0") (ifseqformula "14"))
                                          (rule "eqSymm" (formula "16"))
                                          (rule "applyEq" (formula "15") (term "1,0,0") (ifseqformula "14"))
                                          (rule "applyEq" (formula "15") (term "1,1,0,1") (ifseqformula "14"))
                                          (rule "applyEq" (formula "13") (term "1,1,0,1") (ifseqformula "14"))
                                          (rule "applyEq" (formula "13") (term "1,0,0") (ifseqformula "14"))
                                          (rule "applyEq" (formula "12") (term "1,0,0") (ifseqformula "14"))
                                          (rule "applyEq" (formula "16") (term "1,0,0") (ifseqformula "14"))
                                          (rule "eqSymm" (formula "16"))
                                          (rule "cut_direct" (formula "43") (term "0,0"))
                                          (branch "CUT: o_1 = null TRUE"
                                             (builtin "One Step Simplification" (formula "44"))
                                             (rule "false_right" (formula "44"))
                                             (rule "replace_known_left" (formula "43") (term "1") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "43"))
                                             (rule "replace_known_left" (formula "42") (term "1") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "42"))
                                             (rule "replace_known_left" (formula "33") (term "0,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "33"))
                                             (rule "false_right" (formula "33"))
                                             (rule "applyEqRigid" (formula "4") (term "0,1,0,0") (ifseqformula "1"))
                                             (rule "eqSymm" (formula "4") (term "1,0,0"))
                                             (rule "replace_known_right" (formula "4") (term "1,0,0") (ifseqformula "36"))
                                             (builtin "One Step Simplification" (formula "4"))
                                             (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                             (rule "hideAuxiliaryEq" (formula "4"))
                                             (rule "applyEqRigid" (formula "42") (term "1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "2") (term "1,2,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                                             (rule "eqSymm" (formula "2") (term "1,0,0"))
                                             (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "35"))
                                             (builtin "One Step Simplification" (formula "2"))
                                             (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "applyEq" (formula "3") (term "0,1,0,0") (ifseqformula "1"))
                                             (rule "eqSymm" (formula "3") (term "1,0,0"))
                                             (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "34"))
                                             (builtin "One Step Simplification" (formula "3"))
                                             (rule "applyEqReverse" (formula "41") (term "1") (ifseqformula "3"))
                                             (rule "hideAuxiliaryEq" (formula "3"))
                                             (rule "applyEq" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                                             (rule "eqSymm" (formula "2") (term "1,0,0"))
                                             (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "33"))
                                             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "40")))
                                             (rule "closeFalse" (formula "2"))
                                          )
                                          (branch "CUT: o_1 = null FALSE"
                                             (builtin "One Step Simplification" (formula "44"))
                                             (rule "notRight" (formula "44"))
                                             (rule "replace_known_right" (formula "42") (term "1") (ifseqformula "44"))
                                             (builtin "One Step Simplification" (formula "42"))
                                             (rule "false_right" (formula "42"))
                                             (rule "replace_known_right" (formula "42") (term "1") (ifseqformula "43"))
                                             (builtin "One Step Simplification" (formula "42"))
                                             (rule "false_right" (formula "42"))
                                             (rule "replace_known_right" (formula "33") (term "0,0") (ifseqformula "42"))
                                             (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "1")))
                                             (rule "false_right" (formula "33"))
                                             (rule "ifthenelse_split" (formula "2") (term "0"))
                                             (branch "f_1 = java.lang.Object::<created> & o_1 = r_3 TRUE"
                                                (rule "andLeft" (formula "2"))
                                                (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                (rule "hideAuxiliaryEq" (formula "4"))
                                                (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "4"))
                                                (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "5"))
                                                (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "6"))
                                                (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                                (builtin "One Step Simplification" (formula "4"))
                                                (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                (rule "hideAuxiliaryEq" (formula "4"))
                                                (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                (rule "close" (formula "33") (ifseqformula "1"))
                                             )
                                             (branch "f_1 = java.lang.Object::<created> & o_1 = r_3 FALSE"
                                                (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                (rule "hideAuxiliaryEq" (formula "2"))
                                                (rule "ifthenelse_split" (formula "2") (term "0"))
                                                (branch "f_1 = java.lang.Throwable::$cause & o_1 = r_3 TRUE"
                                                   (rule "andLeft" (formula "2"))
                                                   (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                   (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "3")))
                                                   (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                   (builtin "One Step Simplification" (formula "4"))
                                                   (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "3"))
                                                   (builtin "One Step Simplification" (formula "32"))
                                                   (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                   (rule "close" (formula "33") (ifseqformula "1"))
                                                )
                                                (branch "f_1 = java.lang.Throwable::$cause & o_1 = r_3 FALSE"
                                                   (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                   (rule "hideAuxiliaryEq" (formula "2"))
                                                   (rule "ifthenelse_split" (formula "2") (term "0"))
                                                   (branch "f_1 = java.lang.Throwable::$message & o_1 = r_3 TRUE"
                                                      (rule "andLeft" (formula "2"))
                                                      (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                      (rule "hideAuxiliaryEq" (formula "4"))
                                                      (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "4"))
                                                      (rule "replace_known_left" (formula "33") (term "1") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "33"))
                                                      (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "32"))
                                                      (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                                      (builtin "One Step Simplification" (formula "4"))
                                                      (rule "applyEqReverse" (formula "43") (term "1") (ifseqformula "4"))
                                                      (rule "hideAuxiliaryEq" (formula "4"))
                                                      (rule "applyEq" (formula "31") (term "0") (ifseqformula "2"))
                                                      (builtin "One Step Simplification" (formula "31"))
                                                      (rule "false_right" (formula "31"))
                                                      (rule "applyEq" (formula "31") (term "0") (ifseqformula "2"))
                                                      (builtin "One Step Simplification" (formula "31"))
                                                      (rule "false_right" (formula "31"))
                                                      (rule "applyEq" (formula "39") (term "0") (ifseqformula "3"))
                                                      (rule "applyEq" (formula "39") (term "1,0") (ifseqformula "3"))
                                                      (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                      (rule "close" (formula "31") (ifseqformula "1"))
                                                   )
                                                   (branch "f_1 = java.lang.Throwable::$message & o_1 = r_3 FALSE"
                                                      (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                      (rule "hideAuxiliaryEq" (formula "2"))
                                                      (rule "ifthenelse_split" (formula "2") (term "0"))
                                                      (branch "f_1 = java.lang.Object::<initialized> & o_1 = r_3 TRUE"
                                                         (rule "andLeft" (formula "2"))
                                                         (rule "applyEqReverse" (formula "44") (term "1") (ifseqformula "4"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "3"))
                                                         (builtin "One Step Simplification" (formula "32"))
                                                         (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "3"))
                                                         (builtin "One Step Simplification" (formula "31"))
                                                         (rule "replace_known_left" (formula "33") (term "1") (ifseqformula "3"))
                                                         (builtin "One Step Simplification" (formula "33"))
                                                         (rule "applyEqRigid" (formula "43") (term "2,0") (ifseqformula "2"))
                                                         (rule "narrowSelectType" (formula "43") (term "0") (ifseqformula "6"))
                                                         (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                         (rule "close" (formula "34") (ifseqformula "1"))
                                                      )
                                                      (branch "f_1 = java.lang.Object::<initialized> & o_1 = r_3 FALSE"
                                                         (rule "close" (formula "43") (ifseqformula "2"))
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                       )
                                       (branch "CUT: self.log = null FALSE"
                                          (builtin "One Step Simplification" (formula "14"))
                                          (rule "cut_direct" (formula "15") (term "0"))
                                          (branch "CUT: self.log.ciphertext = null TRUE"
                                             (builtin "One Step Simplification" (formula "16"))
                                             (rule "true_left" (formula "16"))
                                             (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "15"))
                                             (rule "applyEq" (formula "16") (term "0,1") (ifseqformula "15"))
                                             (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "25"))
                                             (rule "leq_literals" (formula "12") (term "0"))
                                             (builtin "One Step Simplification" (formula "12"))
                                             (rule "true_left" (formula "12"))
                                             (rule "cut_direct" (formula "12") (term "0"))
                                             (branch "CUT: self.log.plaintext = null TRUE"
                                                (builtin "One Step Simplification" (formula "13"))
                                                (rule "true_left" (formula "13"))
                                                (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "12"))
                                                (builtin "One Step Simplification" (formula "15"))
                                                (rule "true_left" (formula "15"))
                                                (rule "cut_direct" (formula "42") (term "0,0"))
                                                (branch "CUT: o_1 = null TRUE"
                                                   (builtin "One Step Simplification" (formula "43"))
                                                   (rule "false_right" (formula "43"))
                                                   (rule "replace_known_left" (formula "42") (term "1") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "42"))
                                                   (rule "replace_known_left" (formula "41") (term "1") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "41"))
                                                   (rule "replace_known_left" (formula "32") (term "0,0") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "32"))
                                                   (rule "false_right" (formula "32"))
                                                   (rule "applyEqRigid" (formula "4") (term "0,1,0,0") (ifseqformula "1"))
                                                   (rule "eqSymm" (formula "4") (term "1,0,0"))
                                                   (rule "replace_known_right" (formula "4") (term "1,0,0") (ifseqformula "35"))
                                                   (builtin "One Step Simplification" (formula "4"))
                                                   (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "applyEqRigid" (formula "3") (term "0,1,0,0") (ifseqformula "1"))
                                                   (rule "eqSymm" (formula "3") (term "1,0,0"))
                                                   (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "34"))
                                                   (builtin "One Step Simplification" (formula "3"))
                                                   (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                                   (rule "hideAuxiliaryEq" (formula "3"))
                                                   (rule "applyEq" (formula "40") (term "1,0") (ifseqformula "1"))
                                                   (rule "applyEqRigid" (formula "2") (term "1,2,0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "3") (term "0,1,0,0") (ifseqformula "1"))
                                                   (rule "eqSymm" (formula "3") (term "1,0,0"))
                                                   (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "33"))
                                                   (builtin "One Step Simplification" (formula "3"))
                                                   (rule "applyEqReverse" (formula "40") (term "1") (ifseqformula "3"))
                                                   (rule "hideAuxiliaryEq" (formula "3"))
                                                   (rule "applyEqRigid" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                                                   (rule "eqSymm" (formula "2") (term "1,0,0"))
                                                   (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "32"))
                                                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "39")))
                                                   (rule "closeFalse" (formula "2"))
                                                )
                                                (branch "CUT: o_1 = null FALSE"
                                                   (builtin "One Step Simplification" (formula "43"))
                                                   (rule "notRight" (formula "43"))
                                                   (rule "replace_known_right" (formula "41") (term "1") (ifseqformula "43"))
                                                   (builtin "One Step Simplification" (formula "41"))
                                                   (rule "false_right" (formula "41"))
                                                   (rule "replace_known_right" (formula "41") (term "1") (ifseqformula "42"))
                                                   (builtin "One Step Simplification" (formula "41"))
                                                   (rule "false_right" (formula "41"))
                                                   (rule "replace_known_left" (formula "32") (term "0,0,1") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "41")))
                                                   (rule "false_right" (formula "32"))
                                                   (rule "ifthenelse_split" (formula "2") (term "0"))
                                                   (branch "f_1 = java.lang.Object::<created> & o_1 = r_3 TRUE"
                                                      (rule "andLeft" (formula "2"))
                                                      (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                      (rule "hideAuxiliaryEq" (formula "4"))
                                                      (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "4"))
                                                      (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "6"))
                                                      (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "5"))
                                                      (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                                      (builtin "One Step Simplification" (formula "4"))
                                                      (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                      (rule "hideAuxiliaryEq" (formula "4"))
                                                      (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "2"))
                                                      (builtin "One Step Simplification" (formula "5"))
                                                      (rule "applyEqReverse" (formula "41") (term "1") (ifseqformula "5"))
                                                      (rule "hideAuxiliaryEq" (formula "5"))
                                                      (rule "applyEq" (formula "40") (term "2,0") (ifseqformula "2"))
                                                      (rule "narrowSelectType" (formula "40") (term "0") (ifseqformula "7"))
                                                      (rule "eqSymm" (formula "40"))
                                                      (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                                      (builtin "One Step Simplification" (formula "4"))
                                                      (rule "applyEqReverse" (formula "40") (term "0") (ifseqformula "4"))
                                                      (rule "hideAuxiliaryEq" (formula "4"))
                                                      (rule "eqSymm" (formula "39"))
                                                      (rule "close" (formula "39") (ifseqformula "1"))
                                                   )
                                                   (branch "f_1 = java.lang.Object::<created> & o_1 = r_3 FALSE"
                                                      (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                      (rule "hideAuxiliaryEq" (formula "2"))
                                                      (rule "ifthenelse_split" (formula "2") (term "0"))
                                                      (branch "f_1 = java.lang.Throwable::$cause & o_1 = r_3 TRUE"
                                                         (rule "andLeft" (formula "2"))
                                                         (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                         (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "3")))
                                                         (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                         (builtin "One Step Simplification" (formula "4"))
                                                         (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "3"))
                                                         (builtin "One Step Simplification" (formula "30"))
                                                         (rule "applyEq" (formula "30") (term "0") (ifseqformula "2"))
                                                         (builtin "One Step Simplification" (formula "30"))
                                                         (rule "false_right" (formula "30"))
                                                         (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                                         (builtin "One Step Simplification" (formula "4"))
                                                         (rule "applyEqReverse" (formula "40") (term "1") (ifseqformula "4"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                         (rule "close" (formula "30") (ifseqformula "1"))
                                                      )
                                                      (branch "f_1 = java.lang.Throwable::$cause & o_1 = r_3 FALSE"
                                                         (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                         (rule "hideAuxiliaryEq" (formula "2"))
                                                         (rule "ifthenelse_split" (formula "2") (term "0"))
                                                         (branch "f_1 = java.lang.Throwable::$message & o_1 = r_3 TRUE"
                                                            (rule "andLeft" (formula "2"))
                                                            (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                            (rule "hideAuxiliaryEq" (formula "4"))
                                                            (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                            (builtin "One Step Simplification" (formula "4"))
                                                            (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "3"))
                                                            (builtin "One Step Simplification" (formula "30"))
                                                            (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "3"))
                                                            (builtin "One Step Simplification" (formula "31"))
                                                            (rule "applyEqRigid" (formula "30") (term "0") (ifseqformula "2"))
                                                            (builtin "One Step Simplification" (formula "30"))
                                                            (rule "false_right" (formula "30"))
                                                            (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                                            (builtin "One Step Simplification" (formula "4"))
                                                            (rule "applyEqReverse" (formula "41") (term "1") (ifseqformula "4"))
                                                            (rule "hideAuxiliaryEq" (formula "4"))
                                                            (rule "applyEq" (formula "40") (term "1,0") (ifseqformula "3"))
                                                            (rule "applyEq" (formula "29") (term "0") (ifseqformula "2"))
                                                            (builtin "One Step Simplification" (formula "29"))
                                                            (rule "false_right" (formula "29"))
                                                            (rule "applyEqRigid" (formula "39") (term "2,0") (ifseqformula "2"))
                                                            (rule "narrowSelectType" (formula "39") (term "0") (ifseqformula "6"))
                                                            (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                            (rule "close" (formula "30") (ifseqformula "1"))
                                                         )
                                                         (branch "f_1 = java.lang.Throwable::$message & o_1 = r_3 FALSE"
                                                            (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                            (rule "hideAuxiliaryEq" (formula "2"))
                                                            (rule "ifthenelse_split" (formula "2") (term "0"))
                                                            (branch "f_1 = java.lang.Object::<initialized> & o_1 = r_3 TRUE"
                                                               (rule "andLeft" (formula "2"))
                                                               (rule "applyEqReverse" (formula "43") (term "1") (ifseqformula "4"))
                                                               (rule "hideAuxiliaryEq" (formula "4"))
                                                               (rule "replace_known_left" (formula "29") (term "1") (ifseqformula "3"))
                                                               (builtin "One Step Simplification" (formula "29"))
                                                               (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "3"))
                                                               (builtin "One Step Simplification" (formula "31"))
                                                               (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "3"))
                                                               (builtin "One Step Simplification" (formula "30"))
                                                               (rule "applyEq" (formula "29") (term "0") (ifseqformula "2"))
                                                               (builtin "One Step Simplification" (formula "29"))
                                                               (rule "false_right" (formula "29"))
                                                               (rule "applyEq" (formula "30") (term "0") (ifseqformula "2"))
                                                               (builtin "One Step Simplification" (formula "30"))
                                                               (rule "false_right" (formula "30"))
                                                               (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                               (rule "close" (formula "31") (ifseqformula "1"))
                                                            )
                                                            (branch "f_1 = java.lang.Object::<initialized> & o_1 = r_3 FALSE"
                                                               (rule "close" (formula "42") (ifseqformula "2"))
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                             (branch "CUT: self.log.plaintext = null FALSE"
                                                (builtin "One Step Simplification" (formula "12"))
                                                (rule "cut_direct" (formula "44") (term "0,0"))
                                                (branch "CUT: o_1 = null TRUE"
                                                   (builtin "One Step Simplification" (formula "45"))
                                                   (rule "false_right" (formula "45"))
                                                   (rule "replace_known_left" (formula "44") (term "1") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "44"))
                                                   (rule "replace_known_left" (formula "43") (term "1") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "43"))
                                                   (rule "replace_known_left" (formula "34") (term "0,0") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "34"))
                                                   (rule "false_right" (formula "34"))
                                                   (rule "applyEq" (formula "5") (term "0,1,0,0") (ifseqformula "1"))
                                                   (rule "eqSymm" (formula "5") (term "1,0,0"))
                                                   (rule "replace_known_right" (formula "5") (term "1,0,0") (ifseqformula "37"))
                                                   (builtin "One Step Simplification" (formula "5"))
                                                   (rule "applyEqReverse" (formula "44") (term "1") (ifseqformula "5"))
                                                   (rule "hideAuxiliaryEq" (formula "5"))
                                                   (rule "applyEqRigid" (formula "43") (term "1,0") (ifseqformula "1"))
                                                   (rule "applyEqRigid" (formula "2") (term "1,2,0") (ifseqformula "1"))
                                                   (rule "applyEqRigid" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                                                   (rule "eqSymm" (formula "2") (term "1,0,0"))
                                                   (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "36"))
                                                   (builtin "One Step Simplification" (formula "2"))
                                                   (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                   (rule "hideAuxiliaryEq" (formula "2"))
                                                   (rule "applyEqRigid" (formula "3") (term "0,1,0,0") (ifseqformula "1"))
                                                   (rule "eqSymm" (formula "3") (term "1,0,0"))
                                                   (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "35"))
                                                   (builtin "One Step Simplification" (formula "3"))
                                                   (rule "applyEqReverse" (formula "42") (term "1") (ifseqformula "3"))
                                                   (rule "hideAuxiliaryEq" (formula "3"))
                                                   (rule "applyEqRigid" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                                                   (rule "eqSymm" (formula "2") (term "1,0,0"))
                                                   (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "34"))
                                                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "41")))
                                                   (rule "closeFalse" (formula "2"))
                                                )
                                                (branch "CUT: o_1 = null FALSE"
                                                   (builtin "One Step Simplification" (formula "45"))
                                                   (rule "notRight" (formula "45"))
                                                   (rule "replace_known_right" (formula "43") (term "1") (ifseqformula "45"))
                                                   (builtin "One Step Simplification" (formula "43"))
                                                   (rule "false_right" (formula "43"))
                                                   (rule "replace_known_right" (formula "43") (term "1") (ifseqformula "44"))
                                                   (builtin "One Step Simplification" (formula "43"))
                                                   (rule "false_right" (formula "43"))
                                                   (rule "replace_known_right" (formula "34") (term "0,0") (ifseqformula "43"))
                                                   (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "1")))
                                                   (rule "false_right" (formula "34"))
                                                   (rule "ifthenelse_split" (formula "2") (term "0"))
                                                   (branch "f_1 = java.lang.Object::<created> & o_1 = r_3 TRUE"
                                                      (rule "andLeft" (formula "2"))
                                                      (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                      (rule "hideAuxiliaryEq" (formula "4"))
                                                      (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "5"))
                                                      (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "4"))
                                                      (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "6"))
                                                      (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                                      (builtin "One Step Simplification" (formula "4"))
                                                      (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                      (rule "hideAuxiliaryEq" (formula "4"))
                                                      (rule "applyEqRigid" (formula "5") (term "0,0,0") (ifseqformula "2"))
                                                      (builtin "One Step Simplification" (formula "5"))
                                                      (rule "applyEqReverse" (formula "43") (term "1") (ifseqformula "5"))
                                                      (rule "hideAuxiliaryEq" (formula "5"))
                                                      (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                                      (builtin "One Step Simplification" (formula "4"))
                                                      (rule "applyEqReverse" (formula "42") (term "1") (ifseqformula "4"))
                                                      (rule "hideAuxiliaryEq" (formula "4"))
                                                      (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                      (rule "close" (formula "32") (ifseqformula "1"))
                                                   )
                                                   (branch "f_1 = java.lang.Object::<created> & o_1 = r_3 FALSE"
                                                      (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                      (rule "hideAuxiliaryEq" (formula "2"))
                                                      (rule "ifthenelse_split" (formula "2") (term "0"))
                                                      (branch "f_1 = java.lang.Throwable::$cause & o_1 = r_3 TRUE"
                                                         (rule "andLeft" (formula "2"))
                                                         (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                         (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "3")))
                                                         (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                         (builtin "One Step Simplification" (formula "4"))
                                                         (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "3"))
                                                         (builtin "One Step Simplification" (formula "31"))
                                                         (rule "applyEq" (formula "42") (term "0") (ifseqformula "3"))
                                                         (rule "applyEqRigid" (formula "42") (term "2,0") (ifseqformula "2"))
                                                         (rule "narrowSelectType" (formula "42") (term "0") (ifseqformula "7"))
                                                         (rule "eqSymm" (formula "42"))
                                                         (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                         (rule "close" (formula "34") (ifseqformula "1"))
                                                      )
                                                      (branch "f_1 = java.lang.Throwable::$cause & o_1 = r_3 FALSE"
                                                         (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                         (rule "hideAuxiliaryEq" (formula "2"))
                                                         (rule "ifthenelse_split" (formula "2") (term "0"))
                                                         (branch "f_1 = java.lang.Throwable::$message & o_1 = r_3 TRUE"
                                                            (rule "andLeft" (formula "2"))
                                                            (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                            (rule "hideAuxiliaryEq" (formula "4"))
                                                            (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                            (builtin "One Step Simplification" (formula "4"))
                                                            (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "3"))
                                                            (builtin "One Step Simplification" (formula "32"))
                                                            (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "3"))
                                                            (builtin "One Step Simplification" (formula "31"))
                                                            (rule "applyEqRigid" (formula "32") (term "0") (ifseqformula "2"))
                                                            (builtin "One Step Simplification" (formula "32"))
                                                            (rule "false_right" (formula "32"))
                                                            (rule "applyEqRigid" (formula "31") (term "0") (ifseqformula "2"))
                                                            (builtin "One Step Simplification" (formula "31"))
                                                            (rule "false_right" (formula "31"))
                                                            (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                            (rule "close" (formula "33") (ifseqformula "1"))
                                                         )
                                                         (branch "f_1 = java.lang.Throwable::$message & o_1 = r_3 FALSE"
                                                            (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                            (rule "hideAuxiliaryEq" (formula "2"))
                                                            (rule "ifthenelse_split" (formula "2") (term "0"))
                                                            (branch "f_1 = java.lang.Object::<initialized> & o_1 = r_3 TRUE"
                                                               (rule "andLeft" (formula "2"))
                                                               (rule "applyEqReverse" (formula "45") (term "1") (ifseqformula "4"))
                                                               (rule "hideAuxiliaryEq" (formula "4"))
                                                               (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "3"))
                                                               (builtin "One Step Simplification" (formula "30"))
                                                               (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "3"))
                                                               (builtin "One Step Simplification" (formula "31"))
                                                               (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "3"))
                                                               (builtin "One Step Simplification" (formula "32"))
                                                               (rule "applyEq" (formula "44") (term "1,0") (ifseqformula "3"))
                                                               (rule "applyEqRigid" (formula "32") (term "0") (ifseqformula "2"))
                                                               (builtin "One Step Simplification" (formula "32"))
                                                               (rule "false_right" (formula "32"))
                                                               (rule "applyEq" (formula "43") (term "2,0") (ifseqformula "2"))
                                                               (rule "narrowSelectType" (formula "43") (term "0") (ifseqformula "6"))
                                                               (rule "applyEq" (formula "42") (term "0") (ifseqformula "3"))
                                                               (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                               (rule "close" (formula "34") (ifseqformula "1"))
                                                            )
                                                            (branch "f_1 = java.lang.Object::<initialized> & o_1 = r_3 FALSE"
                                                               (rule "close" (formula "44") (ifseqformula "2"))
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                          (branch "CUT: self.log.ciphertext = null FALSE"
                                             (builtin "One Step Simplification" (formula "15"))
                                             (rule "cut_direct" (formula "13") (term "0"))
                                             (branch "CUT: self.log.plaintext = null TRUE"
                                                (builtin "One Step Simplification" (formula "14"))
                                                (rule "true_left" (formula "14"))
                                                (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "13"))
                                                (rule "eqSymm" (formula "16"))
                                                (rule "applyEq" (formula "12") (term "0") (ifseqformula "16"))
                                                (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "25"))
                                                (rule "leq_literals" (formula "12") (term "0"))
                                                (builtin "One Step Simplification" (formula "12"))
                                                (rule "true_left" (formula "12"))
                                                (rule "cut_direct" (formula "44") (term "0,0"))
                                                (branch "CUT: o_1 = null TRUE"
                                                   (builtin "One Step Simplification" (formula "45"))
                                                   (rule "false_right" (formula "45"))
                                                   (rule "replace_known_left" (formula "43") (term "1") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "43"))
                                                   (rule "replace_known_left" (formula "44") (term "1") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "44"))
                                                   (rule "replace_known_left" (formula "34") (term "0,0") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "34"))
                                                   (rule "false_right" (formula "34"))
                                                   (rule "applyEq" (formula "5") (term "0,1,0,0") (ifseqformula "1"))
                                                   (rule "eqSymm" (formula "5") (term "1,0,0"))
                                                   (rule "replace_known_right" (formula "5") (term "1,0,0") (ifseqformula "37"))
                                                   (builtin "One Step Simplification" (formula "5"))
                                                   (rule "applyEqReverse" (formula "44") (term "1") (ifseqformula "5"))
                                                   (rule "hideAuxiliaryEq" (formula "5"))
                                                   (rule "applyEq" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                                                   (rule "eqSymm" (formula "2") (term "1,0,0"))
                                                   (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "36"))
                                                   (builtin "One Step Simplification" (formula "2"))
                                                   (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                   (rule "hideAuxiliaryEq" (formula "2"))
                                                   (rule "applyEqRigid" (formula "3") (term "0,1,0,0") (ifseqformula "1"))
                                                   (rule "eqSymm" (formula "3") (term "1,0,0"))
                                                   (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "35"))
                                                   (builtin "One Step Simplification" (formula "3"))
                                                   (rule "applyEqReverse" (formula "42") (term "1") (ifseqformula "3"))
                                                   (rule "hideAuxiliaryEq" (formula "3"))
                                                   (rule "applyEq" (formula "41") (term "1,0") (ifseqformula "1"))
                                                   (rule "applyEqRigid" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                                                   (rule "eqSymm" (formula "2") (term "1,0,0"))
                                                   (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "34"))
                                                   (builtin "One Step Simplification" (formula "2"))
                                                   (rule "applyEqReverse" (formula "41") (term "1") (ifseqformula "2"))
                                                   (rule "hideAuxiliaryEq" (formula "2"))
                                                   (rule "eqSymm" (formula "40"))
                                                   (rule "applyEq" (formula "40") (term "1,0") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "40"))
                                                   (rule "closeTrue" (formula "40"))
                                                )
                                                (branch "CUT: o_1 = null FALSE"
                                                   (builtin "One Step Simplification" (formula "45"))
                                                   (rule "notRight" (formula "45"))
                                                   (rule "replace_known_right" (formula "43") (term "1") (ifseqformula "45"))
                                                   (builtin "One Step Simplification" (formula "43"))
                                                   (rule "false_right" (formula "43"))
                                                   (rule "replace_known_right" (formula "43") (term "1") (ifseqformula "44"))
                                                   (builtin "One Step Simplification" (formula "43"))
                                                   (rule "false_right" (formula "43"))
                                                   (rule "replace_known_right" (formula "34") (term "0,0") (ifseqformula "43"))
                                                   (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "1")))
                                                   (rule "false_right" (formula "34"))
                                                   (rule "ifthenelse_split" (formula "2") (term "0"))
                                                   (branch "f_1 = java.lang.Object::<created> & o_1 = r_3 TRUE"
                                                      (rule "andLeft" (formula "2"))
                                                      (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                      (rule "hideAuxiliaryEq" (formula "4"))
                                                      (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "6"))
                                                      (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "4"))
                                                      (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "5"))
                                                      (rule "applyEqRigid" (formula "6") (term "0,0,0") (ifseqformula "2"))
                                                      (builtin "One Step Simplification" (formula "6"))
                                                      (rule "applyEqReverse" (formula "44") (term "1") (ifseqformula "6"))
                                                      (rule "hideAuxiliaryEq" (formula "6"))
                                                      (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                                      (builtin "One Step Simplification" (formula "4"))
                                                      (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                      (rule "hideAuxiliaryEq" (formula "4"))
                                                      (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                                      (builtin "One Step Simplification" (formula "4"))
                                                      (rule "applyEqReverse" (formula "42") (term "1") (ifseqformula "4"))
                                                      (rule "hideAuxiliaryEq" (formula "4"))
                                                      (rule "applyEq" (formula "41") (term "2,0") (ifseqformula "2"))
                                                      (rule "castTrueImpliesOriginalTrue" (formula "41") (ifseqformula "1"))
                                                      (rule "closeTrue" (formula "41"))
                                                   )
                                                   (branch "f_1 = java.lang.Object::<created> & o_1 = r_3 FALSE"
                                                      (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                      (rule "hideAuxiliaryEq" (formula "2"))
                                                      (rule "ifthenelse_split" (formula "2") (term "0"))
                                                      (branch "f_1 = java.lang.Throwable::$cause & o_1 = r_3 TRUE"
                                                         (rule "andLeft" (formula "2"))
                                                         (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                         (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "3")))
                                                         (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                         (builtin "One Step Simplification" (formula "4"))
                                                         (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "3"))
                                                         (builtin "One Step Simplification" (formula "31"))
                                                         (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                                         (builtin "One Step Simplification" (formula "4"))
                                                         (rule "applyEqReverse" (formula "43") (term "1") (ifseqformula "4"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "applyEq" (formula "30") (term "0") (ifseqformula "2"))
                                                         (builtin "One Step Simplification" (formula "30"))
                                                         (rule "false_right" (formula "30"))
                                                         (rule "applyEq" (formula "41") (term "2,0") (ifseqformula "2"))
                                                         (rule "narrowSelectType" (formula "41") (term "0") (ifseqformula "6"))
                                                         (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                         (rule "close" (formula "32") (ifseqformula "1"))
                                                      )
                                                      (branch "f_1 = java.lang.Throwable::$cause & o_1 = r_3 FALSE"
                                                         (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                         (rule "hideAuxiliaryEq" (formula "2"))
                                                         (rule "ifthenelse_split" (formula "2") (term "0"))
                                                         (branch "f_1 = java.lang.Throwable::$message & o_1 = r_3 TRUE"
                                                            (rule "andLeft" (formula "2"))
                                                            (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                            (rule "hideAuxiliaryEq" (formula "4"))
                                                            (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                            (builtin "One Step Simplification" (formula "4"))
                                                            (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "3"))
                                                            (builtin "One Step Simplification" (formula "31"))
                                                            (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "3"))
                                                            (builtin "One Step Simplification" (formula "32"))
                                                            (rule "applyEqRigid" (formula "31") (term "0") (ifseqformula "2"))
                                                            (builtin "One Step Simplification" (formula "31"))
                                                            (rule "false_right" (formula "31"))
                                                            (rule "applyEqRigid" (formula "43") (term "2,0") (ifseqformula "2"))
                                                            (rule "narrowSelectType" (formula "43") (term "0") (ifseqformula "7"))
                                                            (rule "eqSymm" (formula "43"))
                                                            (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                            (rule "close" (formula "34") (ifseqformula "1"))
                                                         )
                                                         (branch "f_1 = java.lang.Throwable::$message & o_1 = r_3 FALSE"
                                                            (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                            (rule "hideAuxiliaryEq" (formula "2"))
                                                            (rule "ifthenelse_split" (formula "2") (term "0"))
                                                            (branch "f_1 = java.lang.Object::<initialized> & o_1 = r_3 TRUE"
                                                               (rule "andLeft" (formula "2"))
                                                               (rule "applyEqReverse" (formula "45") (term "1") (ifseqformula "4"))
                                                               (rule "hideAuxiliaryEq" (formula "4"))
                                                               (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "3"))
                                                               (builtin "One Step Simplification" (formula "30"))
                                                               (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "3"))
                                                               (builtin "One Step Simplification" (formula "31"))
                                                               (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "3"))
                                                               (builtin "One Step Simplification" (formula "32"))
                                                               (rule "applyEq" (formula "44") (term "2,0") (ifseqformula "2"))
                                                               (rule "narrowSelectType" (formula "44") (term "0") (ifseqformula "6"))
                                                               (rule "applyEqRigid" (formula "30") (term "0") (ifseqformula "2"))
                                                               (builtin "One Step Simplification" (formula "30"))
                                                               (rule "false_right" (formula "30"))
                                                               (rule "applyEqRigid" (formula "31") (term "0") (ifseqformula "2"))
                                                               (builtin "One Step Simplification" (formula "31"))
                                                               (rule "false_right" (formula "31"))
                                                               (rule "applyEq" (formula "30") (term "0") (ifseqformula "2"))
                                                               (builtin "One Step Simplification" (formula "30"))
                                                               (rule "false_right" (formula "30"))
                                                               (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                               (rule "close" (formula "32") (ifseqformula "1"))
                                                            )
                                                            (branch "f_1 = java.lang.Object::<initialized> & o_1 = r_3 FALSE"
                                                               (rule "close" (formula "44") (ifseqformula "2"))
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                             (branch "CUT: self.log.plaintext = null FALSE"
                                                (builtin "One Step Simplification" (formula "13"))
                                                (rule "cut_direct" (formula "46") (term "0,0"))
                                                (branch "CUT: o_1 = null TRUE"
                                                   (builtin "One Step Simplification" (formula "47"))
                                                   (rule "false_right" (formula "47"))
                                                   (rule "replace_known_left" (formula "45") (term "1") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "45"))
                                                   (rule "replace_known_left" (formula "46") (term "1") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "46"))
                                                   (rule "replace_known_left" (formula "36") (term "0,0") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "36"))
                                                   (rule "false_right" (formula "36"))
                                                   (rule "applyEqRigid" (formula "46") (term "1,0") (ifseqformula "1"))
                                                   (rule "applyEqRigid" (formula "2") (term "1,2,0") (ifseqformula "1"))
                                                   (rule "applyEqRigid" (formula "4") (term "0,1,0,0") (ifseqformula "1"))
                                                   (rule "eqSymm" (formula "4") (term "1,0,0"))
                                                   (rule "replace_known_right" (formula "4") (term "1,0,0") (ifseqformula "39"))
                                                   (builtin "One Step Simplification" (formula "4"))
                                                   (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "applyEq" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                                                   (rule "eqSymm" (formula "2") (term "1,0,0"))
                                                   (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "38"))
                                                   (builtin "One Step Simplification" (formula "2"))
                                                   (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                   (rule "hideAuxiliaryEq" (formula "2"))
                                                   (rule "applyEq" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                                                   (rule "eqSymm" (formula "2") (term "1,0,0"))
                                                   (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "37"))
                                                   (builtin "One Step Simplification" (formula "2"))
                                                   (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                   (rule "hideAuxiliaryEq" (formula "2"))
                                                   (rule "applyEqRigid" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                                                   (rule "eqSymm" (formula "2") (term "1,0,0"))
                                                   (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "36"))
                                                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "43")))
                                                   (rule "closeFalse" (formula "2"))
                                                )
                                                (branch "CUT: o_1 = null FALSE"
                                                   (builtin "One Step Simplification" (formula "47"))
                                                   (rule "notRight" (formula "47"))
                                                   (rule "replace_known_right" (formula "46") (term "1") (ifseqformula "47"))
                                                   (builtin "One Step Simplification" (formula "46"))
                                                   (rule "false_right" (formula "46"))
                                                   (rule "replace_known_right" (formula "45") (term "1") (ifseqformula "46"))
                                                   (builtin "One Step Simplification" (formula "45"))
                                                   (rule "false_right" (formula "45"))
                                                   (rule "replace_known_right" (formula "36") (term "0,0") (ifseqformula "45"))
                                                   (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "1")))
                                                   (rule "false_right" (formula "36"))
                                                   (rule "ifthenelse_split" (formula "2") (term "0"))
                                                   (branch "f_1 = java.lang.Object::<created> & o_1 = r_3 TRUE"
                                                      (rule "andLeft" (formula "2"))
                                                      (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                      (rule "hideAuxiliaryEq" (formula "4"))
                                                      (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "5"))
                                                      (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "4"))
                                                      (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "6"))
                                                      (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                                      (builtin "One Step Simplification" (formula "4"))
                                                      (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                      (rule "hideAuxiliaryEq" (formula "4"))
                                                      (rule "applyEqRigid" (formula "5") (term "0,0,0") (ifseqformula "2"))
                                                      (builtin "One Step Simplification" (formula "5"))
                                                      (rule "applyEqReverse" (formula "45") (term "1") (ifseqformula "5"))
                                                      (rule "hideAuxiliaryEq" (formula "5"))
                                                      (rule "applyEqRigid" (formula "44") (term "2,0") (ifseqformula "2"))
                                                      (rule "narrowSelectType" (formula "44") (term "0") (ifseqformula "7"))
                                                      (rule "eqSymm" (formula "44"))
                                                      (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                                      (builtin "One Step Simplification" (formula "4"))
                                                      (rule "applyEqReverse" (formula "44") (term "0") (ifseqformula "4"))
                                                      (rule "hideAuxiliaryEq" (formula "4"))
                                                      (rule "eqSymm" (formula "43"))
                                                      (rule "close" (formula "43") (ifseqformula "1"))
                                                   )
                                                   (branch "f_1 = java.lang.Object::<created> & o_1 = r_3 FALSE"
                                                      (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                      (rule "hideAuxiliaryEq" (formula "2"))
                                                      (rule "ifthenelse_split" (formula "2") (term "0"))
                                                      (branch "f_1 = java.lang.Throwable::$cause & o_1 = r_3 TRUE"
                                                         (rule "andLeft" (formula "2"))
                                                         (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                         (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "3")))
                                                         (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                         (builtin "One Step Simplification" (formula "4"))
                                                         (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "3"))
                                                         (builtin "One Step Simplification" (formula "32"))
                                                         (rule "applyEqRigid" (formula "32") (term "0") (ifseqformula "2"))
                                                         (builtin "One Step Simplification" (formula "32"))
                                                         (rule "false_right" (formula "32"))
                                                         (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                                         (builtin "One Step Simplification" (formula "4"))
                                                         (rule "applyEqReverse" (formula "44") (term "1") (ifseqformula "4"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "applyEq" (formula "43") (term "1,0") (ifseqformula "3"))
                                                         (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                         (rule "close" (formula "34") (ifseqformula "1"))
                                                      )
                                                      (branch "f_1 = java.lang.Throwable::$cause & o_1 = r_3 FALSE"
                                                         (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                         (rule "hideAuxiliaryEq" (formula "2"))
                                                         (rule "ifthenelse_split" (formula "2") (term "0"))
                                                         (branch "f_1 = java.lang.Throwable::$message & o_1 = r_3 TRUE"
                                                            (rule "andLeft" (formula "2"))
                                                            (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                            (rule "hideAuxiliaryEq" (formula "4"))
                                                            (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                            (builtin "One Step Simplification" (formula "4"))
                                                            (rule "replace_known_left" (formula "33") (term "1") (ifseqformula "3"))
                                                            (builtin "One Step Simplification" (formula "33"))
                                                            (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "3"))
                                                            (builtin "One Step Simplification" (formula "32"))
                                                            (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                                            (builtin "One Step Simplification" (formula "4"))
                                                            (rule "applyEqReverse" (formula "46") (term "1") (ifseqformula "4"))
                                                            (rule "hideAuxiliaryEq" (formula "4"))
                                                            (rule "applyEqRigid" (formula "31") (term "0") (ifseqformula "2"))
                                                            (builtin "One Step Simplification" (formula "31"))
                                                            (rule "false_right" (formula "31"))
                                                            (rule "applyEqRigid" (formula "31") (term "0") (ifseqformula "2"))
                                                            (builtin "One Step Simplification" (formula "31"))
                                                            (rule "false_right" (formula "31"))
                                                            (rule "applyEq" (formula "43") (term "1,0") (ifseqformula "3"))
                                                            (rule "applyEq" (formula "43") (term "2,0") (ifseqformula "2"))
                                                            (rule "narrowSelectType" (formula "43") (term "0") (ifseqformula "6"))
                                                            (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                            (rule "close" (formula "34") (ifseqformula "1"))
                                                         )
                                                         (branch "f_1 = java.lang.Throwable::$message & o_1 = r_3 FALSE"
                                                            (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                            (rule "hideAuxiliaryEq" (formula "2"))
                                                            (rule "ifthenelse_split" (formula "2") (term "0"))
                                                            (branch "f_1 = java.lang.Object::<initialized> & o_1 = r_3 TRUE"
                                                               (rule "andLeft" (formula "2"))
                                                               (rule "applyEqReverse" (formula "47") (term "1") (ifseqformula "4"))
                                                               (rule "hideAuxiliaryEq" (formula "4"))
                                                               (rule "replace_known_left" (formula "33") (term "1") (ifseqformula "3"))
                                                               (builtin "One Step Simplification" (formula "33"))
                                                               (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "3"))
                                                               (builtin "One Step Simplification" (formula "31"))
                                                               (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "3"))
                                                               (builtin "One Step Simplification" (formula "32"))
                                                               (rule "applyEqRigid" (formula "46") (term "2,0") (ifseqformula "2"))
                                                               (rule "narrowSelectType" (formula "46") (term "0") (ifseqformula "6"))
                                                               (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                               (rule "close" (formula "37") (ifseqformula "1"))
                                                            )
                                                            (branch "f_1 = java.lang.Object::<initialized> & o_1 = r_3 FALSE"
                                                               (rule "close" (formula "46") (ifseqformula "2"))
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                       )
                                    )
                                 )
                                 (branch "CUT: self.publicKey = null FALSE"
                                    (builtin "One Step Simplification" (formula "27"))
                                    (rule "replace_known_right" (formula "29") (term "0,0") (ifseqformula "36"))
                                    (builtin "One Step Simplification" (formula "29"))
                                    (rule "andLeft" (formula "29"))
                                    (rule "andLeft" (formula "30"))
                                    (rule "andLeft" (formula "29"))
                                    (rule "notLeft" (formula "30"))
                                    (rule "notLeft" (formula "29"))
                                    (rule "orRight" (formula "37"))
                                    (rule "replace_known_right" (formula "31") (term "0") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "39")))
                                    (rule "true_left" (formula "31"))
                                    (rule "replace_known_right" (formula "25") (term "1,0") (ifseqformula "36"))
                                    (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "38")) (ifInst ""  (formula "37")))
                                    (rule "closeFalse" (formula "25"))
                                 )
                              )
                              (branch "self.publicKey.length >= 1 FALSE"
                                 (rule "eqSymm" (formula "29") (term "0,1,1"))
                                 (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "36")))
                                 (rule "inEqSimp_geqRight" (formula "36"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_antiSymm" (formula "27") (ifseqformula "1"))
                                 (rule "applyEq" (formula "1") (term "0") (ifseqformula "27"))
                                 (rule "leq_literals" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "applyEq" (formula "27") (term "0") (ifseqformula "26"))
                                 (rule "qeq_literals" (formula "27"))
                                 (rule "true_left" (formula "27"))
                                 (rule "applyEq" (formula "29") (term "1,1,1,0,0,0,0,0,1,1,1") (ifseqformula "26"))
                                 (rule "add_zero_right" (formula "29") (term "1,1,0,0,0,0,0,1,1,1"))
                                 (rule "eqSymm" (formula "29") (term "0,0,0,1,1,1"))
                                 (rule "inEqSimp_notGeq" (formula "29") (term "0,0,1,1"))
                                 (rule "mul_literals" (formula "29") (term "1,0,0,0,0,1,1"))
                                 (rule "add_literals" (formula "29") (term "0,0,0,0,1,1"))
                                 (rule "add_zero_left" (formula "29") (term "0,0,0,1,1"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "29") (term "0,1,1,1"))
                                 (rule "add_zero_right" (formula "29") (term "1,1,0,1,1,1"))
                                 (rule "qeq_literals" (formula "29") (term "1,0,1,1,1"))
                                 (builtin "One Step Simplification" (formula "29"))
                                 (rule "cut_direct" (formula "28") (term "0"))
                                 (branch "CUT: self.publicKey = null TRUE"
                                    (builtin "One Step Simplification" (formula "29"))
                                    (rule "true_left" (formula "29"))
                                    (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "28"))
                                    (builtin "One Step Simplification" (formula "30"))
                                    (rule "replace_known_left" (formula "29") (term "0,0") (ifseqformula "28"))
                                    (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "30")))
                                    (rule "true_left" (formula "29"))
                                    (rule "replace_known_left" (formula "25") (term "0,0") (ifseqformula "29"))
                                    (builtin "One Step Simplification" (formula "25"))
                                    (rule "true_left" (formula "25"))
                                    (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "28"))
                                    (rule "applyEq" (formula "25") (term "0,0") (ifseqformula "27"))
                                    (rule "applyEqRigid" (formula "26") (term "0") (ifseqformula "25"))
                                    (rule "qeq_literals" (formula "26"))
                                    (rule "true_left" (formula "26"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " !o_1 = null & !( o_1.<created> = TRUE | o_1.<created>@anon_heap_getZeroMessage<<anonHeapFunction>> = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "34"))
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "replace_known_right" (formula "44") (term "1") (ifseqformula "32"))
                                       (builtin "One Step Simplification" (formula "44"))
                                       (rule "false_right" (formula "44"))
                                       (rule "replace_known_right" (formula "44") (term "0,1") (ifseqformula "33"))
                                       (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "32")))
                                       (rule "closeTrue" (formula "44"))
                                    )
                                    (branch " !o_1 = null & !( o_1.<created> = TRUE | o_1.<created>@anon_heap_getZeroMessage<<anonHeapFunction>> = TRUE) FALSE"
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "cut_direct" (formula "43") (term "0,0"))
                                       (branch "CUT: o_1 = null TRUE"
                                          (builtin "One Step Simplification" (formula "44"))
                                          (rule "false_right" (formula "44"))
                                          (rule "replace_known_left" (formula "42") (term "1") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "42"))
                                          (rule "replace_known_left" (formula "43") (term "1") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "43"))
                                          (rule "replace_known_left" (formula "33") (term "0,0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "false_right" (formula "33"))
                                          (rule "applyEq" (formula "2") (term "1,2,0") (ifseqformula "1"))
                                          (rule "applyEqRigid" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                                          (rule "eqSymm" (formula "2") (term "1,0,0"))
                                          (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "36"))
                                          (builtin "One Step Simplification" (formula "2"))
                                          (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                          (rule "hideAuxiliaryEq" (formula "2"))
                                          (rule "applyEqRigid" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                                          (rule "eqSymm" (formula "2") (term "1,0,0"))
                                          (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "35"))
                                          (builtin "One Step Simplification" (formula "2"))
                                          (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                          (rule "hideAuxiliaryEq" (formula "2"))
                                          (rule "applyEq" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                                          (rule "eqSymm" (formula "2") (term "1,0,0"))
                                          (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "34"))
                                          (builtin "One Step Simplification" (formula "2"))
                                          (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                          (rule "hideAuxiliaryEq" (formula "2"))
                                          (rule "applyEqRigid" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                                          (rule "eqSymm" (formula "2") (term "1,0,0"))
                                          (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "33"))
                                          (builtin "One Step Simplification" (formula "2"))
                                          (rule "applyEqReverse" (formula "40") (term "1") (ifseqformula "2"))
                                          (rule "hideAuxiliaryEq" (formula "2"))
                                          (rule "applyEqRigid" (formula "39") (term "1,0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "39"))
                                          (rule "closeTrue" (formula "39"))
                                       )
                                       (branch "CUT: o_1 = null FALSE"
                                          (builtin "One Step Simplification" (formula "44"))
                                          (rule "notRight" (formula "44"))
                                          (rule "replace_known_right" (formula "43") (term "1") (ifseqformula "44"))
                                          (builtin "One Step Simplification" (formula "43"))
                                          (rule "false_right" (formula "43"))
                                          (rule "replace_known_right" (formula "42") (term "1") (ifseqformula "43"))
                                          (builtin "One Step Simplification" (formula "42"))
                                          (rule "false_right" (formula "42"))
                                          (rule "replace_known_left" (formula "33") (term "0,0,1") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "42")))
                                          (rule "false_right" (formula "33"))
                                          (rule "cut_direct" (formula "15") (term "0"))
                                          (branch "CUT: self.log = null TRUE"
                                             (builtin "One Step Simplification" (formula "16"))
                                             (rule "true_left" (formula "16"))
                                             (rule "applyEq" (formula "16") (term "1,1,0,1") (ifseqformula "15"))
                                             (rule "applyEq" (formula "17") (term "1,0,0") (ifseqformula "15"))
                                             (rule "eqSymm" (formula "17"))
                                             (rule "applyEq" (formula "13") (term "1,0,0") (ifseqformula "15"))
                                             (rule "applyEq" (formula "14") (term "1,1,0,1") (ifseqformula "15"))
                                             (rule "applyEq" (formula "14") (term "1,0,0") (ifseqformula "15"))
                                             (rule "applyEq" (formula "16") (term "1,0,0") (ifseqformula "15"))
                                             (rule "applyEq" (formula "17") (term "1,0,0") (ifseqformula "15"))
                                             (rule "eqSymm" (formula "17"))
                                             (rule "ifthenelse_split" (formula "2") (term "0"))
                                             (branch "f_1 = java.lang.Object::<created> & o_1 = r_3 TRUE"
                                                (rule "andLeft" (formula "2"))
                                                (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                (rule "hideAuxiliaryEq" (formula "4"))
                                                (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "5"))
                                                (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "4"))
                                                (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "6"))
                                                (rule "applyEqRigid" (formula "43") (term "2,0") (ifseqformula "2"))
                                                (rule "narrowSelectType" (formula "43") (term "0") (ifseqformula "9"))
                                                (rule "eqSymm" (formula "43"))
                                                (rule "applyEqRigid" (formula "5") (term "0,0,0") (ifseqformula "2"))
                                                (builtin "One Step Simplification" (formula "5"))
                                                (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                                                (rule "hideAuxiliaryEq" (formula "5"))
                                                (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "2"))
                                                (builtin "One Step Simplification" (formula "5"))
                                                (rule "applyEqReverse" (formula "42") (term "0") (ifseqformula "5"))
                                                (rule "hideAuxiliaryEq" (formula "5"))
                                                (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                                (builtin "One Step Simplification" (formula "4"))
                                                (rule "applyEqReverse" (formula "41") (term "0") (ifseqformula "4"))
                                                (rule "hideAuxiliaryEq" (formula "4"))
                                                (rule "eqSymm" (formula "40"))
                                                (rule "close" (formula "40") (ifseqformula "1"))
                                             )
                                             (branch "f_1 = java.lang.Object::<created> & o_1 = r_3 FALSE"
                                                (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                (rule "hideAuxiliaryEq" (formula "2"))
                                                (rule "ifthenelse_split" (formula "2") (term "0"))
                                                (branch "f_1 = java.lang.Throwable::$cause & o_1 = r_3 TRUE"
                                                   (rule "andLeft" (formula "2"))
                                                   (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                   (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "3")))
                                                   (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                   (builtin "One Step Simplification" (formula "4"))
                                                   (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "3"))
                                                   (builtin "One Step Simplification" (formula "32"))
                                                   (rule "applyEq" (formula "42") (term "2,0") (ifseqformula "2"))
                                                   (rule "narrowSelectType" (formula "42") (term "0") (ifseqformula "7"))
                                                   (rule "eqSymm" (formula "42"))
                                                   (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                                   (builtin "One Step Simplification" (formula "4"))
                                                   (rule "applyEqReverse" (formula "42") (term "0") (ifseqformula "4"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "eqSymm" (formula "41"))
                                                   (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                   (rule "close" (formula "32") (ifseqformula "1"))
                                                )
                                                (branch "f_1 = java.lang.Throwable::$cause & o_1 = r_3 FALSE"
                                                   (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                   (rule "hideAuxiliaryEq" (formula "2"))
                                                   (rule "ifthenelse_split" (formula "2") (term "0"))
                                                   (branch "f_1 = java.lang.Throwable::$message & o_1 = r_3 TRUE"
                                                      (rule "andLeft" (formula "2"))
                                                      (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                      (rule "hideAuxiliaryEq" (formula "4"))
                                                      (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "4"))
                                                      (rule "replace_known_left" (formula "33") (term "1") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "33"))
                                                      (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "32"))
                                                      (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                                      (builtin "One Step Simplification" (formula "4"))
                                                      (rule "applyEqReverse" (formula "43") (term "1") (ifseqformula "4"))
                                                      (rule "hideAuxiliaryEq" (formula "4"))
                                                      (rule "applyEqRigid" (formula "31") (term "0") (ifseqformula "2"))
                                                      (builtin "One Step Simplification" (formula "31"))
                                                      (rule "false_right" (formula "31"))
                                                      (rule "applyEqRigid" (formula "31") (term "0") (ifseqformula "2"))
                                                      (builtin "One Step Simplification" (formula "31"))
                                                      (rule "false_right" (formula "31"))
                                                      (rule "applyEqRigid" (formula "40") (term "2,0") (ifseqformula "2"))
                                                      (rule "narrowSelectType" (formula "40") (term "0") (ifseqformula "6"))
                                                      (rule "applyEq" (formula "39") (term "0") (ifseqformula "3"))
                                                      (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                      (rule "close" (formula "31") (ifseqformula "1"))
                                                   )
                                                   (branch "f_1 = java.lang.Throwable::$message & o_1 = r_3 FALSE"
                                                      (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                      (rule "hideAuxiliaryEq" (formula "2"))
                                                      (rule "ifthenelse_split" (formula "2") (term "0"))
                                                      (branch "f_1 = java.lang.Object::<initialized> & o_1 = r_3 TRUE"
                                                         (rule "andLeft" (formula "2"))
                                                         (rule "applyEqReverse" (formula "44") (term "1") (ifseqformula "4"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "3"))
                                                         (builtin "One Step Simplification" (formula "31"))
                                                         (rule "replace_known_left" (formula "33") (term "1") (ifseqformula "3"))
                                                         (builtin "One Step Simplification" (formula "33"))
                                                         (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "3"))
                                                         (builtin "One Step Simplification" (formula "32"))
                                                         (rule "applyEqRigid" (formula "31") (term "0") (ifseqformula "2"))
                                                         (builtin "One Step Simplification" (formula "31"))
                                                         (rule "false_right" (formula "31"))
                                                         (rule "applyEqRigid" (formula "32") (term "0") (ifseqformula "2"))
                                                         (builtin "One Step Simplification" (formula "32"))
                                                         (rule "false_right" (formula "32"))
                                                         (rule "applyEq" (formula "31") (term "0") (ifseqformula "2"))
                                                         (builtin "One Step Simplification" (formula "31"))
                                                         (rule "false_right" (formula "31"))
                                                         (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                         (rule "close" (formula "31") (ifseqformula "1"))
                                                      )
                                                      (branch "f_1 = java.lang.Object::<initialized> & o_1 = r_3 FALSE"
                                                         (rule "close" (formula "43") (ifseqformula "2"))
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                          (branch "CUT: self.log = null FALSE"
                                             (builtin "One Step Simplification" (formula "15"))
                                             (rule "cut_direct" (formula "14") (term "0"))
                                             (branch "CUT: self.log.plaintext = null TRUE"
                                                (builtin "One Step Simplification" (formula "15"))
                                                (rule "true_left" (formula "15"))
                                                (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "14"))
                                                (rule "eqSymm" (formula "17"))
                                                (rule "applyEq" (formula "13") (term "0") (ifseqformula "17"))
                                                (rule "applyEq" (formula "13") (term "0") (ifseqformula "25"))
                                                (rule "qeq_literals" (formula "13"))
                                                (rule "true_left" (formula "13"))
                                                (rule "applyEq" (formula "16") (term "1") (ifseqformula "24"))
                                                (rule "cut_direct" (formula "15") (term "0"))
                                                (branch "CUT: self.log.ciphertext = null TRUE"
                                                   (builtin "One Step Simplification" (formula "16"))
                                                   (rule "true_left" (formula "16"))
                                                   (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "15"))
                                                   (rule "ifthenelse_split" (formula "2") (term "0"))
                                                   (branch "f_1 = java.lang.Object::<created> & o_1 = r_3 TRUE"
                                                      (rule "andLeft" (formula "2"))
                                                      (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                      (rule "hideAuxiliaryEq" (formula "4"))
                                                      (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "4"))
                                                      (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "5"))
                                                      (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "6"))
                                                      (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                                      (builtin "One Step Simplification" (formula "4"))
                                                      (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                      (rule "hideAuxiliaryEq" (formula "4"))
                                                      (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                                      (builtin "One Step Simplification" (formula "4"))
                                                      (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                      (builtin "One Step Simplification" (formula "5"))
                                                      (rule "applyEqReverse" (formula "41") (term "1") (ifseqformula "5"))
                                                      (rule "hideAuxiliaryEq" (formula "4"))
                                                      (rule "hideAuxiliaryEq" (formula "4"))
                                                      (rule "applyEq" (formula "38") (term "0") (ifseqformula "3"))
                                                      (rule "applyEq" (formula "38") (term "2,0") (ifseqformula "2"))
                                                      (rule "castTrueImpliesOriginalTrue" (formula "38") (ifseqformula "1"))
                                                      (rule "closeTrue" (formula "38"))
                                                   )
                                                   (branch "f_1 = java.lang.Object::<created> & o_1 = r_3 FALSE"
                                                      (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                      (rule "hideAuxiliaryEq" (formula "2"))
                                                      (rule "ifthenelse_split" (formula "2") (term "0"))
                                                      (branch "f_1 = java.lang.Throwable::$cause & o_1 = r_3 TRUE"
                                                         (rule "andLeft" (formula "2"))
                                                         (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                         (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "3")))
                                                         (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                         (builtin "One Step Simplification" (formula "4"))
                                                         (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "3"))
                                                         (builtin "One Step Simplification" (formula "30"))
                                                         (rule "applyEq" (formula "40") (term "0") (ifseqformula "3"))
                                                         (rule "applyEq" (formula "40") (term "1,0") (ifseqformula "3"))
                                                         (rule "applyEq" (formula "40") (term "2,0") (ifseqformula "2"))
                                                         (rule "narrowSelectType" (formula "40") (term "0") (ifseqformula "7"))
                                                         (rule "eqSymm" (formula "40"))
                                                         (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                                         (builtin "One Step Simplification" (formula "4"))
                                                         (rule "applyEqReverse" (formula "40") (term "0") (ifseqformula "4"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "eqSymm" (formula "39"))
                                                         (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                         (rule "close" (formula "31") (ifseqformula "1"))
                                                      )
                                                      (branch "f_1 = java.lang.Throwable::$cause & o_1 = r_3 FALSE"
                                                         (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                         (rule "hideAuxiliaryEq" (formula "2"))
                                                         (rule "ifthenelse_split" (formula "2") (term "0"))
                                                         (branch "f_1 = java.lang.Throwable::$message & o_1 = r_3 TRUE"
                                                            (rule "andLeft" (formula "2"))
                                                            (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                            (rule "hideAuxiliaryEq" (formula "4"))
                                                            (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                            (builtin "One Step Simplification" (formula "4"))
                                                            (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "3"))
                                                            (builtin "One Step Simplification" (formula "30"))
                                                            (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "3"))
                                                            (builtin "One Step Simplification" (formula "31"))
                                                            (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                            (rule "close" (formula "33") (ifseqformula "1"))
                                                         )
                                                         (branch "f_1 = java.lang.Throwable::$message & o_1 = r_3 FALSE"
                                                            (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                            (rule "hideAuxiliaryEq" (formula "2"))
                                                            (rule "ifthenelse_split" (formula "2") (term "0"))
                                                            (branch "f_1 = java.lang.Object::<initialized> & o_1 = r_3 TRUE"
                                                               (rule "andLeft" (formula "2"))
                                                               (rule "applyEqReverse" (formula "43") (term "1") (ifseqformula "4"))
                                                               (rule "hideAuxiliaryEq" (formula "4"))
                                                               (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "3"))
                                                               (builtin "One Step Simplification" (formula "30"))
                                                               (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "3"))
                                                               (builtin "One Step Simplification" (formula "31"))
                                                               (rule "replace_known_left" (formula "29") (term "1") (ifseqformula "3"))
                                                               (builtin "One Step Simplification" (formula "29"))
                                                               (rule "applyEq" (formula "31") (term "0") (ifseqformula "2"))
                                                               (builtin "One Step Simplification" (formula "31"))
                                                               (rule "false_right" (formula "31"))
                                                               (rule "applyEqRigid" (formula "30") (term "0") (ifseqformula "2"))
                                                               (builtin "One Step Simplification" (formula "30"))
                                                               (rule "false_right" (formula "30"))
                                                               (rule "applyEq" (formula "39") (term "0") (ifseqformula "3"))
                                                               (rule "applyEq" (formula "39") (term "2,0") (ifseqformula "2"))
                                                               (rule "narrowSelectType" (formula "39") (term "0") (ifseqformula "6"))
                                                               (rule "applyEqRigid" (formula "29") (term "0") (ifseqformula "2"))
                                                               (builtin "One Step Simplification" (formula "29"))
                                                               (rule "false_right" (formula "29"))
                                                               (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                               (rule "close" (formula "30") (ifseqformula "1"))
                                                            )
                                                            (branch "f_1 = java.lang.Object::<initialized> & o_1 = r_3 FALSE"
                                                               (rule "close" (formula "42") (ifseqformula "2"))
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                                (branch "CUT: self.log.ciphertext = null FALSE"
                                                   (builtin "One Step Simplification" (formula "15"))
                                                   (rule "ifthenelse_split" (formula "2") (term "0"))
                                                   (branch "f_1 = java.lang.Object::<created> & o_1 = r_3 TRUE"
                                                      (rule "andLeft" (formula "2"))
                                                      (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                      (rule "hideAuxiliaryEq" (formula "4"))
                                                      (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "5"))
                                                      (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "4"))
                                                      (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "6"))
                                                      (rule "applyEq" (formula "44") (term "1,0") (ifseqformula "3"))
                                                      (rule "applyEqRigid" (formula "44") (term "2,0") (ifseqformula "2"))
                                                      (rule "narrowSelectType" (formula "44") (term "0") (ifseqformula "9"))
                                                      (rule "eqSymm" (formula "44"))
                                                      (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                      (rule "close" (formula "35") (ifseqformula "1"))
                                                   )
                                                   (branch "f_1 = java.lang.Object::<created> & o_1 = r_3 FALSE"
                                                      (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                      (rule "hideAuxiliaryEq" (formula "2"))
                                                      (rule "ifthenelse_split" (formula "2") (term "0"))
                                                      (branch "f_1 = java.lang.Throwable::$cause & o_1 = r_3 TRUE"
                                                         (rule "andLeft" (formula "2"))
                                                         (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                         (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "3")))
                                                         (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                         (builtin "One Step Simplification" (formula "4"))
                                                         (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "3"))
                                                         (builtin "One Step Simplification" (formula "31"))
                                                         (rule "applyEqRigid" (formula "31") (term "0") (ifseqformula "2"))
                                                         (builtin "One Step Simplification" (formula "31"))
                                                         (rule "false_right" (formula "31"))
                                                         (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                                         (builtin "One Step Simplification" (formula "4"))
                                                         (rule "applyEqReverse" (formula "42") (term "1") (ifseqformula "4"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "applyEq" (formula "40") (term "0") (ifseqformula "3"))
                                                         (rule "applyEqRigid" (formula "40") (term "2,0") (ifseqformula "2"))
                                                         (rule "narrowSelectType" (formula "40") (term "0") (ifseqformula "6"))
                                                         (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                         (rule "close" (formula "32") (ifseqformula "1"))
                                                      )
                                                      (branch "f_1 = java.lang.Throwable::$cause & o_1 = r_3 FALSE"
                                                         (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                         (rule "hideAuxiliaryEq" (formula "2"))
                                                         (rule "ifthenelse_split" (formula "2") (term "0"))
                                                         (branch "f_1 = java.lang.Throwable::$message & o_1 = r_3 TRUE"
                                                            (rule "andLeft" (formula "2"))
                                                            (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                            (rule "hideAuxiliaryEq" (formula "4"))
                                                            (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                            (builtin "One Step Simplification" (formula "4"))
                                                            (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "3"))
                                                            (builtin "One Step Simplification" (formula "31"))
                                                            (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "3"))
                                                            (builtin "One Step Simplification" (formula "32"))
                                                            (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                                            (builtin "One Step Simplification" (formula "4"))
                                                            (rule "applyEqReverse" (formula "44") (term "1") (ifseqformula "4"))
                                                            (rule "hideAuxiliaryEq" (formula "4"))
                                                            (rule "applyEq" (formula "43") (term "2,0") (ifseqformula "2"))
                                                            (rule "narrowSelectType" (formula "43") (term "0") (ifseqformula "6"))
                                                            (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                            (rule "close" (formula "34") (ifseqformula "1"))
                                                         )
                                                         (branch "f_1 = java.lang.Throwable::$message & o_1 = r_3 FALSE"
                                                            (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                            (rule "hideAuxiliaryEq" (formula "2"))
                                                            (rule "ifthenelse_split" (formula "2") (term "0"))
                                                            (branch "f_1 = java.lang.Object::<initialized> & o_1 = r_3 TRUE"
                                                               (rule "andLeft" (formula "2"))
                                                               (rule "applyEqReverse" (formula "45") (term "1") (ifseqformula "4"))
                                                               (rule "hideAuxiliaryEq" (formula "4"))
                                                               (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "3"))
                                                               (builtin "One Step Simplification" (formula "31"))
                                                               (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "3"))
                                                               (builtin "One Step Simplification" (formula "32"))
                                                               (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "3"))
                                                               (builtin "One Step Simplification" (formula "30"))
                                                               (rule "applyEq" (formula "43") (term "0") (ifseqformula "3"))
                                                               (rule "applyEq" (formula "43") (term "2,0") (ifseqformula "2"))
                                                               (rule "narrowSelectType" (formula "43") (term "0") (ifseqformula "6"))
                                                               (rule "applyEqRigid" (formula "31") (term "0") (ifseqformula "2"))
                                                               (builtin "One Step Simplification" (formula "31"))
                                                               (rule "false_right" (formula "31"))
                                                               (rule "applyEqRigid" (formula "30") (term "0") (ifseqformula "2"))
                                                               (builtin "One Step Simplification" (formula "30"))
                                                               (rule "false_right" (formula "30"))
                                                               (rule "applyEq" (formula "30") (term "0") (ifseqformula "2"))
                                                               (builtin "One Step Simplification" (formula "30"))
                                                               (rule "false_right" (formula "30"))
                                                               (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                               (rule "close" (formula "32") (ifseqformula "1"))
                                                            )
                                                            (branch "f_1 = java.lang.Object::<initialized> & o_1 = r_3 FALSE"
                                                               (rule "close" (formula "44") (ifseqformula "2"))
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                             (branch "CUT: self.log.plaintext = null FALSE"
                                                (builtin "One Step Simplification" (formula "14"))
                                                (rule "cut_direct" (formula "16") (term "0"))
                                                (branch "CUT: self.log.ciphertext = null TRUE"
                                                   (builtin "One Step Simplification" (formula "17"))
                                                   (rule "true_left" (formula "17"))
                                                   (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "16"))
                                                   (rule "applyEq" (formula "17") (term "0,1") (ifseqformula "16"))
                                                   (rule "applyEq" (formula "13") (term "0") (ifseqformula "25"))
                                                   (rule "qeq_literals" (formula "13"))
                                                   (rule "true_left" (formula "13"))
                                                   (rule "applyEqRigid" (formula "16") (term "1") (ifseqformula "24"))
                                                   (rule "ifthenelse_split" (formula "2") (term "0"))
                                                   (branch "f_1 = java.lang.Object::<created> & o_1 = r_3 TRUE"
                                                      (rule "andLeft" (formula "2"))
                                                      (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                      (rule "hideAuxiliaryEq" (formula "4"))
                                                      (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "4"))
                                                      (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "5"))
                                                      (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "6"))
                                                      (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                                      (builtin "One Step Simplification" (formula "4"))
                                                      (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                      (rule "hideAuxiliaryEq" (formula "4"))
                                                      (rule "applyEq" (formula "43") (term "2,0") (ifseqformula "2"))
                                                      (rule "narrowSelectType" (formula "43") (term "0") (ifseqformula "8"))
                                                      (rule "eqSymm" (formula "43"))
                                                      (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                      (rule "close" (formula "34") (ifseqformula "1"))
                                                   )
                                                   (branch "f_1 = java.lang.Object::<created> & o_1 = r_3 FALSE"
                                                      (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                      (rule "hideAuxiliaryEq" (formula "2"))
                                                      (rule "ifthenelse_split" (formula "2") (term "0"))
                                                      (branch "f_1 = java.lang.Throwable::$cause & o_1 = r_3 TRUE"
                                                         (rule "andLeft" (formula "2"))
                                                         (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                         (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "3")))
                                                         (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                         (builtin "One Step Simplification" (formula "4"))
                                                         (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "3"))
                                                         (builtin "One Step Simplification" (formula "31"))
                                                         (rule "applyEq" (formula "43") (term "1,0") (ifseqformula "3"))
                                                         (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                         (rule "close" (formula "34") (ifseqformula "1"))
                                                      )
                                                      (branch "f_1 = java.lang.Throwable::$cause & o_1 = r_3 FALSE"
                                                         (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                         (rule "hideAuxiliaryEq" (formula "2"))
                                                         (rule "ifthenelse_split" (formula "2") (term "0"))
                                                         (branch "f_1 = java.lang.Throwable::$message & o_1 = r_3 TRUE"
                                                            (rule "andLeft" (formula "2"))
                                                            (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                            (rule "hideAuxiliaryEq" (formula "4"))
                                                            (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                            (builtin "One Step Simplification" (formula "4"))
                                                            (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "3"))
                                                            (builtin "One Step Simplification" (formula "32"))
                                                            (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "3"))
                                                            (builtin "One Step Simplification" (formula "31"))
                                                            (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                                            (builtin "One Step Simplification" (formula "4"))
                                                            (rule "applyEqReverse" (formula "44") (term "1") (ifseqformula "4"))
                                                            (rule "hideAuxiliaryEq" (formula "4"))
                                                            (rule "applyEq" (formula "42") (term "0") (ifseqformula "3"))
                                                            (rule "applyEq" (formula "42") (term "2,0") (ifseqformula "2"))
                                                            (rule "narrowSelectType" (formula "42") (term "0") (ifseqformula "6"))
                                                            (rule "applyEqRigid" (formula "31") (term "0") (ifseqformula "2"))
                                                            (builtin "One Step Simplification" (formula "31"))
                                                            (rule "false_right" (formula "31"))
                                                            (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                            (rule "close" (formula "33") (ifseqformula "1"))
                                                         )
                                                         (branch "f_1 = java.lang.Throwable::$message & o_1 = r_3 FALSE"
                                                            (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                            (rule "hideAuxiliaryEq" (formula "2"))
                                                            (rule "ifthenelse_split" (formula "2") (term "0"))
                                                            (branch "f_1 = java.lang.Object::<initialized> & o_1 = r_3 TRUE"
                                                               (rule "andLeft" (formula "2"))
                                                               (rule "applyEqReverse" (formula "45") (term "1") (ifseqformula "4"))
                                                               (rule "hideAuxiliaryEq" (formula "4"))
                                                               (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "3"))
                                                               (builtin "One Step Simplification" (formula "31"))
                                                               (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "3"))
                                                               (builtin "One Step Simplification" (formula "32"))
                                                               (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "3"))
                                                               (builtin "One Step Simplification" (formula "30"))
                                                               (rule "applyEq" (formula "43") (term "0") (ifseqformula "3"))
                                                               (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                               (rule "close" (formula "35") (ifseqformula "1"))
                                                            )
                                                            (branch "f_1 = java.lang.Object::<initialized> & o_1 = r_3 FALSE"
                                                               (rule "close" (formula "44") (ifseqformula "2"))
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                                (branch "CUT: self.log.ciphertext = null FALSE"
                                                   (builtin "One Step Simplification" (formula "16"))
                                                   (rule "ifthenelse_split" (formula "2") (term "0"))
                                                   (branch "f_1 = java.lang.Object::<created> & o_1 = r_3 TRUE"
                                                      (rule "andLeft" (formula "2"))
                                                      (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                      (rule "hideAuxiliaryEq" (formula "4"))
                                                      (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "6"))
                                                      (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "4"))
                                                      (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "5"))
                                                      (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                                      (builtin "One Step Simplification" (formula "4"))
                                                      (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                      (rule "hideAuxiliaryEq" (formula "4"))
                                                      (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "2"))
                                                      (builtin "One Step Simplification" (formula "5"))
                                                      (rule "applyEqReverse" (formula "45") (term "1") (ifseqformula "5"))
                                                      (rule "hideAuxiliaryEq" (formula "5"))
                                                      (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                      (rule "close" (formula "35") (ifseqformula "1"))
                                                   )
                                                   (branch "f_1 = java.lang.Object::<created> & o_1 = r_3 FALSE"
                                                      (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                      (rule "hideAuxiliaryEq" (formula "2"))
                                                      (rule "ifthenelse_split" (formula "2") (term "0"))
                                                      (branch "f_1 = java.lang.Throwable::$cause & o_1 = r_3 TRUE"
                                                         (rule "andLeft" (formula "2"))
                                                         (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                         (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "3")))
                                                         (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                         (builtin "One Step Simplification" (formula "4"))
                                                         (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "3"))
                                                         (builtin "One Step Simplification" (formula "32"))
                                                         (rule "applyEq" (formula "45") (term "1,0") (ifseqformula "3"))
                                                         (rule "applyEqRigid" (formula "45") (term "2,0") (ifseqformula "2"))
                                                         (rule "narrowSelectType" (formula "45") (term "0") (ifseqformula "7"))
                                                         (rule "eqSymm" (formula "45"))
                                                         (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                         (rule "close" (formula "36") (ifseqformula "1"))
                                                      )
                                                      (branch "f_1 = java.lang.Throwable::$cause & o_1 = r_3 FALSE"
                                                         (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                         (rule "hideAuxiliaryEq" (formula "2"))
                                                         (rule "ifthenelse_split" (formula "2") (term "0"))
                                                         (branch "f_1 = java.lang.Throwable::$message & o_1 = r_3 TRUE"
                                                            (rule "andLeft" (formula "2"))
                                                            (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                            (rule "hideAuxiliaryEq" (formula "4"))
                                                            (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                            (builtin "One Step Simplification" (formula "4"))
                                                            (rule "replace_known_left" (formula "33") (term "1") (ifseqformula "3"))
                                                            (builtin "One Step Simplification" (formula "33"))
                                                            (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "3"))
                                                            (builtin "One Step Simplification" (formula "32"))
                                                            (rule "applyEqRigid" (formula "33") (term "0") (ifseqformula "2"))
                                                            (builtin "One Step Simplification" (formula "33"))
                                                            (rule "false_right" (formula "33"))
                                                            (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                                            (builtin "One Step Simplification" (formula "4"))
                                                            (rule "applyEqReverse" (formula "45") (term "1") (ifseqformula "4"))
                                                            (rule "hideAuxiliaryEq" (formula "4"))
                                                            (rule "applyEq" (formula "44") (term "2,0") (ifseqformula "2"))
                                                            (rule "narrowSelectType" (formula "44") (term "0") (ifseqformula "6"))
                                                            (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                            (rule "close" (formula "35") (ifseqformula "1"))
                                                         )
                                                         (branch "f_1 = java.lang.Throwable::$message & o_1 = r_3 FALSE"
                                                            (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                            (rule "hideAuxiliaryEq" (formula "2"))
                                                            (rule "ifthenelse_split" (formula "2") (term "0"))
                                                            (branch "f_1 = java.lang.Object::<initialized> & o_1 = r_3 TRUE"
                                                               (rule "andLeft" (formula "2"))
                                                               (rule "applyEqReverse" (formula "47") (term "1") (ifseqformula "4"))
                                                               (rule "hideAuxiliaryEq" (formula "4"))
                                                               (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "3"))
                                                               (builtin "One Step Simplification" (formula "32"))
                                                               (rule "replace_known_left" (formula "33") (term "1") (ifseqformula "3"))
                                                               (builtin "One Step Simplification" (formula "33"))
                                                               (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "3"))
                                                               (builtin "One Step Simplification" (formula "31"))
                                                               (rule "applyEq" (formula "31") (term "0") (ifseqformula "2"))
                                                               (builtin "One Step Simplification" (formula "31"))
                                                               (rule "false_right" (formula "31"))
                                                               (rule "applyEq" (formula "32") (term "0") (ifseqformula "2"))
                                                               (builtin "One Step Simplification" (formula "32"))
                                                               (rule "false_right" (formula "32"))
                                                               (rule "applyEq" (formula "43") (term "0") (ifseqformula "3"))
                                                               (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                               (rule "close" (formula "35") (ifseqformula "1"))
                                                            )
                                                            (branch "f_1 = java.lang.Object::<initialized> & o_1 = r_3 FALSE"
                                                               (rule "close" (formula "46") (ifseqformula "2"))
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                       )
                                    )
                                 )
                                 (branch "CUT: self.publicKey = null FALSE"
                                    (builtin "One Step Simplification" (formula "28"))
                                    (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "36"))
                                    (builtin "One Step Simplification" (formula "30"))
                                    (rule "true_left" (formula "30"))
                                    (rule "replace_known_right" (formula "29") (term "0,0") (ifseqformula "35"))
                                    (builtin "One Step Simplification" (formula "29"))
                                    (rule "andLeft" (formula "29"))
                                    (rule "andLeft" (formula "29"))
                                    (rule "notLeft" (formula "30"))
                                    (rule "notLeft" (formula "29"))
                                    (rule "orRight" (formula "35"))
                                    (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "36"))
                                    (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "37")) (ifInst ""  (formula "35")))
                                    (rule "closeFalse" (formula "25"))
                                 )
                              )
                           )
                           (branch "ClassCastException (!(r instanceof java.lang.Throwable))"
                              (builtin "One Step Simplification" (formula "40"))
                              (builtin "One Step Simplification" (formula "39"))
                              (rule "closeTrue" (formula "39"))
                           )
                        )
                        (branch "if r instanceof java.lang.Throwable false"
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "35")))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                  )
                  (branch "Null Reference (r_1 = null)"
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "35")))
                     (rule "closeFalse" (formula "1"))
                  )
               )
               (branch "result_3 = null FALSE"
                  (rule "ifUnfold" (formula "27") (term "1") (inst "#boolv=x") (userinteraction))
                  (rule "variableDeclaration" (formula "27") (term "1") (newnames "x_3") (userinteraction))
                  (rule "methodCallWithAssignmentUnfoldTarget" (formula "27") (term "1") (inst "#v0=e") (userinteraction))
                  (rule "variableDeclaration" (formula "27") (term "1") (newnames "e_2") (userinteraction))
                  (rule "assignment_read_attribute_this" (formula "27") (term "1") (userinteraction))
                  (builtin "One Step Simplification" (formula "27"))
                  (rule "methodCallWithAssignment" (formula "27") (term "1") (inst "#v0=x_4") (userinteraction))
                  (branch
                     (rule "variableDeclaration" (formula "28") (term "1") (newnames "x_5") (userinteraction))
                     (rule "variableDeclarationAssign" (formula "28") (term "1") (userinteraction))
                     (rule "variableDeclaration" (formula "28") (term "1") (newnames "cipher_1") (userinteraction))
                     (rule "assignment" (formula "28") (term "1") (userinteraction))
                     (rule "andLeft" (formula "21"))
                     (rule "andLeft" (formula "22"))
                     (rule "andLeft" (formula "21"))
                     (builtin "One Step Simplification" (formula "30"))
                     (builtin "One Step Simplification" (formula "31"))
                     (rule "methodBodyExpand" (formula "31") (term "1") (newnames "heapBefore_containsCiphertext,savedHeapBefore_containsCiphertext") (userinteraction))
                     (rule "returnUnfold" (formula "31") (term "1,1") (inst "#v0=x_6") (userinteraction))
                     (rule "variableDeclarationAssign" (formula "31") (term "1,1") (userinteraction))
                     (rule "variableDeclaration" (formula "31") (term "1,1") (newnames "x_6") (userinteraction))
                     (rule "compound_inequality_comparison_1" (formula "31") (term "1,1") (inst "#v0=x_arr") (userinteraction))
                     (rule "variableDeclarationAssign" (formula "31") (term "1,1") (userinteraction))
                     (rule "variableDeclaration" (formula "31") (term "1,1") (newnames "x_arr") (userinteraction))
                     (builtin "One Step Simplification" (formula "31"))
                     (builtin "Use Operation Contract" (formula "31") (newnames "heapBefore_lookup,result_4,exc_4") (contract "verif.functionalities.pkienc.Decryptor.EncryptionLog[verif.functionalities.pkienc.Decryptor.EncryptionLog::lookup([B)].JML normal_behavior operation contract.0"))
                     (branch "Post (lookup)"
                        (builtin "One Step Simplification" (formula "25"))
                        (rule "assignment" (formula "32") (term "1") (userinteraction))
                        (rule "inequality_comparison_simple" (formula "32") (term "1,1") (userinteraction))
                        (rule "methodCallReturn" (formula "32") (term "1,1,1") (userinteraction))
                        (rule "assignment" (formula "32") (term "1,1,1") (userinteraction))
                        (rule "methodCallEmpty" (formula "32") (term "1,1,1,1") (userinteraction))
                        (rule "blockEmpty" (formula "32") (term "1,1,1,1") (userinteraction))
                        (rule "assignment" (formula "32") (term "1,1,1,1") (userinteraction))
                        (rule "if" (formula "32") (term "1,1,1,1,1") (userinteraction))
                        (builtin "One Step Simplification" (formula "32"))
                        (rule "ifthenelse_negated_for" (formula "32") (userinteraction))
                        (rule "ifthenelse_split_for" (formula "32") (userinteraction))
                        (branch "result_4 = null TRUE"
                           (rule "methodCallUnfoldTarget" (formula "33") (term "1") (inst "#v0=e") (userinteraction))
                           (rule "variableDeclaration" (formula "33") (term "1") (newnames "e_3") (userinteraction))
                           (rule "assignment_read_attribute_this" (formula "33") (term "1") (userinteraction))
                           (builtin "One Step Simplification" (formula "33"))
                           (builtin "Use Operation Contract" (formula "33") (newnames "heapBefore_add,exc_5,heapAfter_add,anon_heap_add") (contract "verif.functionalities.pkienc.Decryptor.EncryptionLog[verif.functionalities.pkienc.Decryptor.EncryptionLog::add([B,[B)].JML normal_behavior operation contract.0"))
                           (branch "Post (add)"
                              (builtin "One Step Simplification" (formula "28"))
                              (rule "returnUnfold" (formula "35") (term "1,1") (inst "#v0=x_arr") (userinteraction))
                              (rule "variableDeclarationAssign" (formula "35") (term "1,1") (userinteraction))
                              (rule "variableDeclaration" (formula "35") (term "1,1") (newnames "x_arr_1") (userinteraction))
                              (builtin "One Step Simplification" (formula "35"))
                              (builtin "Use Operation Contract" (formula "35") (newnames "heapBefore_copyOf_1,result_5,exc_6") (contract "verif.utils.MessageTools[verif.utils.MessageTools::copyOf([B)].JML normal_behavior operation contract.0#verif.utils.MessageTools[verif.utils.MessageTools::copyOf([B)].JML normal_behavior operation contract.1"))
                              (branch "Post (copyOf)"
                                 (rule "assignment" (formula "36") (term "1") (userinteraction))
                                 (rule "methodCallReturn" (formula "36") (term "1,1") (userinteraction))
                                 (rule "assignment" (formula "36") (term "1,1") (userinteraction))
                                 (rule "methodCallEmpty" (formula "36") (term "1,1,1") (userinteraction))
                                 (rule "tryEmpty" (formula "36") (term "1,1,1") (userinteraction))
                                 (rule "emptyModality" (formula "36") (term "1,1,1") (userinteraction))
                                 (builtin "One Step Simplification" (formula "36"))
                                 (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "34")) (ifInst ""  (formula "34")))
                                 (rule "andLeft" (formula "26"))
                                 (rule "andLeft" (formula "29"))
                                 (rule "andLeft" (formula "31"))
                                 (rule "andLeft" (formula "27"))
                                 (rule "andLeft" (formula "26"))
                                 (rule "andLeft" (formula "31"))
                                 (rule "andLeft" (formula "34"))
                                 (rule "andLeft" (formula "33"))
                                 (rule "andLeft" (formula "27"))
                                 (rule "andLeft" (formula "33"))
                                 (rule "andLeft" (formula "35"))
                                 (rule "andLeft" (formula "28"))
                                 (rule "andLeft" (formula "34"))
                                 (rule "andLeft" (formula "37"))
                                 (rule "andLeft" (formula "35"))
                                 (rule "notLeft" (formula "38"))
                                 (rule "notLeft" (formula "38"))
                                 (rule "andLeft" (formula "36"))
                                 (rule "andLeft" (formula "36"))
                                 (rule "andLeft" (formula "37"))
                                 (rule "andLeft" (formula "36"))
                                 (rule "notLeft" (formula "38"))
                                 (rule "notLeft" (formula "38"))
                                 (rule "notLeft" (formula "37"))
                                 (rule "notLeft" (formula "36"))
                                 (rule "andRight" (formula "52"))
                                 (branch "Case 1"
                                    (rule "andRight" (formula "52"))
                                    (branch "Case 1"
                                       (rule "typeEqDerived" (formula "21") (term "0,1,1") (ifseqformula "19"))
                                       (rule "typeEqDerived" (formula "21") (term "0,0,1") (ifseqformula "19"))
                                       (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "19")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "43") (ifseqformula "18"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "45") (ifseqformula "32"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (ifseqformula "18"))
                                       (rule "true_left" (formula "21"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "0") (ifseqformula "18"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "39") (term "0") (ifseqformula "9"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "1") (ifseqformula "31"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "1") (ifseqformula "18"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "42") (term "0") (ifseqformula "9"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "1") (ifseqformula "9"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "1") (ifseqformula "18"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1") (ifseqformula "18"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "10") (term "1") (ifseqformula "9"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "0,0") (ifseqformula "9"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "0,1") (ifseqformula "9"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "0,1") (ifseqformula "9"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,1") (ifseqformula "9"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,1") (ifseqformula "18"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,0,1") (ifseqformula "9"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "0,0,0,0,1") (ifseqformula "18"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "0,0,0,0,1") (ifseqformula "9"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "0,0,0,0,0,1") (ifseqformula "9"))
                                       (rule "orRight" (formula "39"))
                                       (rule "orRight" (formula "43"))
                                       (rule "orRight" (formula "46"))
                                       (rule "orRight" (formula "39"))
                                       (rule "orRight" (formula "44"))
                                       (rule "orRight" (formula "48"))
                                       (rule "orRight" (formula "48"))
                                       (rule "allRight" (formula "58") (inst "sk=i_1"))
                                       (rule "impRight" (formula "58"))
                                       (rule "notRight" (formula "59"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "eqSymm" (formula "30") (term "1,1,0,1"))
                                       (rule "eqSymm" (formula "30") (term "0,1,0,1"))
                                       (rule "eqSymm" (formula "29") (term "0,1,0,1"))
                                       (rule "eqSymm" (formula "18") (term "1,0,1"))
                                       (rule "eqSymm" (formula "10"))
                                       (rule "eqSymm" (formula "36"))
                                       (rule "eqSymm" (formula "37"))
                                       (rule "replace_known_left" (formula "18") (term "1,1") (ifseqformula "16"))
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "replace_known_left" (formula "27") (term "1,1") (ifseqformula "24"))
                                       (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "59")))
                                       (rule "notLeft" (formula "27"))
                                       (rule "replace_known_left" (formula "19") (term "1,1") (ifseqformula "16"))
                                       (builtin "One Step Simplification" (formula "19"))
                                       (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "4"))
                                       (builtin "One Step Simplification" (formula "28"))
                                       (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "58"))
                                       (builtin "One Step Simplification" (formula "8"))
                                       (rule "replace_known_left" (formula "26") (term "1,1") (ifseqformula "24"))
                                       (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "41")) (ifInst ""  (formula "59")))
                                       (rule "andLeft" (formula "26"))
                                       (rule "notLeft" (formula "26"))
                                       (rule "orRight" (formula "41"))
                                       (rule "orRight" (formula "41"))
                                       (rule "replace_known_left" (formula "29") (term "0,0") (ifseqformula "4"))
                                       (builtin "One Step Simplification" (formula "29"))
                                       (rule "true_left" (formula "29"))
                                       (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "58"))
                                       (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "57")))
                                       (rule "replace_known_left" (formula "27") (term "0") (ifseqformula "4"))
                                       (builtin "One Step Simplification" (formula "27"))
                                       (rule "true_left" (formula "27"))
                                       (rule "replace_known_right" (formula "25") (term "0") (ifseqformula "60"))
                                       (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "39")) (ifInst ""  (formula "40")) (ifInst ""  (formula "41")))
                                       (rule "closeFalse" (formula "25"))
                                    )
                                    (branch "Case 2"
                                       (rule "andRight" (formula "52"))
                                       (branch "Case 1"
                                          (rule "typeEqDerived" (formula "21") (term "0,1,1") (ifseqformula "19"))
                                          (rule "typeEqDerived" (formula "21") (term "0,0,1") (ifseqformula "19"))
                                          (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "19")))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "45") (ifseqformula "32"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "43") (ifseqformula "18"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (ifseqformula "18"))
                                          (rule "true_left" (formula "21"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1") (ifseqformula "18"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "1") (ifseqformula "18"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "1") (ifseqformula "9"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "10") (term "1") (ifseqformula "9"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "39") (term "0") (ifseqformula "9"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "0") (ifseqformula "18"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "1") (ifseqformula "18"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "42") (term "0") (ifseqformula "9"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "1") (ifseqformula "31"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,1") (ifseqformula "9"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "0,1") (ifseqformula "9"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "0,0") (ifseqformula "9"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,1") (ifseqformula "18"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "0,1") (ifseqformula "9"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,0,1") (ifseqformula "9"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "0,0,0,0,1") (ifseqformula "9"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "0,0,0,0,1") (ifseqformula "18"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "0,0,0,0,0,1") (ifseqformula "9"))
                                          (rule "orRight" (formula "39"))
                                          (rule "orRight" (formula "43"))
                                          (rule "orRight" (formula "46"))
                                          (rule "orRight" (formula "39"))
                                          (rule "orRight" (formula "44"))
                                          (rule "orRight" (formula "48"))
                                          (rule "orRight" (formula "48"))
                                          (rule "eqSymm" (formula "27") (term "0,1,0,1"))
                                          (rule "eqSymm" (formula "7"))
                                          (rule "eqSymm" (formula "27") (term "1,1,0,1"))
                                          (rule "eqSymm" (formula "58"))
                                          (rule "eqSymm" (formula "34"))
                                          (rule "eqSymm" (formula "15") (term "1,0,1"))
                                          (rule "eqSymm" (formula "33"))
                                          (rule "eqSymm" (formula "26") (term "0,1,0,1"))
                                          (rule "replace_known_left" (formula "23") (term "1,1") (ifseqformula "21"))
                                          (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "56")))
                                          (rule "replace_known_left" (formula "16") (term "1,1") (ifseqformula "13"))
                                          (builtin "One Step Simplification" (formula "16"))
                                          (rule "replace_known_left" (formula "24") (term "1,1") (ifseqformula "21"))
                                          (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "56")))
                                          (rule "notLeft" (formula "24"))
                                          (rule "replace_known_left" (formula "25") (term "0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "25"))
                                          (rule "replace_known_left" (formula "15") (term "1,1") (ifseqformula "13"))
                                          (builtin "One Step Simplification" (formula "15"))
                                          (rule "replace_known_left" (formula "26") (term "0,0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "26"))
                                          (rule "true_left" (formula "26"))
                                          (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "54"))
                                          (builtin "One Step Simplification" (formula "5"))
                                          (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "52"))
                                          (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "51")))
                                          (rule "replace_known_right" (formula "23") (term "0,0") (ifseqformula "37"))
                                          (builtin "One Step Simplification" (formula "23"))
                                          (rule "andLeft" (formula "23"))
                                          (rule "notLeft" (formula "23"))
                                          (rule "orRight" (formula "37"))
                                          (rule "orRight" (formula "37"))
                                          (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "58"))
                                          (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "37")) (ifInst ""  (formula "38")) (ifInst ""  (formula "39")))
                                          (rule "closeFalse" (formula "22"))
                                       )
                                       (branch "Case 2"
                                          (rule "andRight" (formula "52"))
                                          (branch "Case 1"
                                             (rule "typeEqDerived" (formula "21") (term "0,1,1") (ifseqformula "19"))
                                             (rule "typeEqDerived" (formula "21") (term "0,0,1") (ifseqformula "19"))
                                             (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "19")))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "45") (ifseqformula "32"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "43") (ifseqformula "18"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (ifseqformula "18"))
                                             (rule "true_left" (formula "21"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1") (ifseqformula "18"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "1") (ifseqformula "18"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "1") (ifseqformula "9"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "10") (term "1") (ifseqformula "9"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "39") (term "0") (ifseqformula "9"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "0") (ifseqformula "18"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "1") (ifseqformula "18"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "42") (term "0") (ifseqformula "9"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "1") (ifseqformula "31"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,1") (ifseqformula "9"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "0,1") (ifseqformula "9"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "0,0") (ifseqformula "9"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,1") (ifseqformula "18"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "0,1") (ifseqformula "9"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,0,1") (ifseqformula "9"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "0,0,0,0,1") (ifseqformula "9"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "0,0,0,0,1") (ifseqformula "18"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "0,0,0,0,0,1") (ifseqformula "9"))
                                             (rule "orRight" (formula "39"))
                                             (rule "orRight" (formula "43"))
                                             (rule "orRight" (formula "46"))
                                             (rule "orRight" (formula "39"))
                                             (rule "orRight" (formula "44"))
                                             (rule "orRight" (formula "48"))
                                             (rule "orRight" (formula "48"))
                                             (rule "eqSymm" (formula "27") (term "0,1,0,1"))
                                             (rule "eqSymm" (formula "7"))
                                             (rule "eqSymm" (formula "27") (term "1,1,0,1"))
                                             (rule "eqSymm" (formula "58"))
                                             (rule "eqSymm" (formula "34"))
                                             (rule "eqSymm" (formula "15") (term "1,0,1"))
                                             (rule "eqSymm" (formula "33"))
                                             (rule "eqSymm" (formula "26") (term "0,1,0,1"))
                                             (rule "replace_known_left" (formula "23") (term "1,1") (ifseqformula "21"))
                                             (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "56")))
                                             (rule "replace_known_left" (formula "16") (term "1,1") (ifseqformula "13"))
                                             (builtin "One Step Simplification" (formula "16"))
                                             (rule "replace_known_left" (formula "24") (term "1,1") (ifseqformula "21"))
                                             (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "56")))
                                             (rule "notLeft" (formula "24"))
                                             (rule "replace_known_left" (formula "25") (term "0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "25"))
                                             (rule "replace_known_left" (formula "15") (term "1,1") (ifseqformula "13"))
                                             (builtin "One Step Simplification" (formula "15"))
                                             (rule "replace_known_left" (formula "26") (term "0,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "26"))
                                             (rule "true_left" (formula "26"))
                                             (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "54"))
                                             (builtin "One Step Simplification" (formula "5"))
                                             (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "52"))
                                             (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "51")))
                                             (rule "replace_known_right" (formula "23") (term "0,0") (ifseqformula "37"))
                                             (builtin "One Step Simplification" (formula "23"))
                                             (rule "andLeft" (formula "23"))
                                             (rule "notLeft" (formula "23"))
                                             (rule "orRight" (formula "37"))
                                             (rule "orRight" (formula "37"))
                                             (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "58"))
                                             (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "37")) (ifInst ""  (formula "38")) (ifInst ""  (formula "39")))
                                             (rule "closeFalse" (formula "22"))
                                          )
                                          (branch "Case 2"
                                             (rule "andRight" (formula "52"))
                                             (branch "Case 1"
                                                (rule "typeEqDerived" (formula "21") (term "0,1,1") (ifseqformula "19"))
                                                (rule "typeEqDerived" (formula "21") (term "0,0,1") (ifseqformula "19"))
                                                (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "19")))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (ifseqformula "18"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "43") (ifseqformula "18"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "45") (ifseqformula "32"))
                                                (rule "true_left" (formula "21"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "39") (term "0") (ifseqformula "9"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "1") (ifseqformula "9"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "10") (term "1") (ifseqformula "9"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "1") (ifseqformula "18"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "1") (ifseqformula "18"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "42") (term "0") (ifseqformula "9"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "1") (ifseqformula "31"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "0") (ifseqformula "18"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1") (ifseqformula "18"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "0,1") (ifseqformula "9"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,1") (ifseqformula "9"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,1") (ifseqformula "18"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "0,0") (ifseqformula "9"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "0,1") (ifseqformula "9"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,0,1") (ifseqformula "9"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "0,0,0,0,1") (ifseqformula "9"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "0,0,0,0,1") (ifseqformula "18"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "0,0,0,0,0,1") (ifseqformula "9"))
                                                (rule "translateJavaSubInt" (formula "51") (term "0,2,1,0"))
                                                (rule "orRight" (formula "39"))
                                                (rule "orRight" (formula "43"))
                                                (rule "orRight" (formula "46"))
                                                (rule "orRight" (formula "39"))
                                                (rule "orRight" (formula "44"))
                                                (rule "orRight" (formula "48"))
                                                (rule "orRight" (formula "48"))
                                                (rule "eqSymm" (formula "26") (term "0,1,0,1"))
                                                (rule "eqSymm" (formula "15") (term "1,0,1"))
                                                (rule "eqSymm" (formula "7"))
                                                (rule "eqSymm" (formula "27") (term "0,1,0,1"))
                                                (rule "eqSymm" (formula "34"))
                                                (rule "eqSymm" (formula "27") (term "1,1,0,1"))
                                                (rule "eqSymm" (formula "33"))
                                                (rule "replace_known_left" (formula "27") (term "0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "27"))
                                                (rule "true_left" (formula "27"))
                                                (rule "replace_known_left" (formula "16") (term "1,1") (ifseqformula "13"))
                                                (builtin "One Step Simplification" (formula "16"))
                                                (rule "replace_known_left" (formula "15") (term "1,1") (ifseqformula "13"))
                                                (builtin "One Step Simplification" (formula "15"))
                                                (rule "replace_known_right" (formula "23") (term "0,1,0,0,1") (ifseqformula "55"))
                                                (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "21")))
                                                (rule "replace_known_left" (formula "24") (term "1,1") (ifseqformula "21"))
                                                (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "55")))
                                                (rule "notLeft" (formula "24"))
                                                (rule "replace_known_left" (formula "25") (term "0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "25"))
                                                (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "54"))
                                                (builtin "One Step Simplification" (formula "5"))
                                                (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "52"))
                                                (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "51")))
                                                (rule "replace_known_right" (formula "23") (term "0,0") (ifseqformula "37"))
                                                (builtin "One Step Simplification" (formula "23"))
                                                (rule "andLeft" (formula "23"))
                                                (rule "notLeft" (formula "23"))
                                                (rule "orRight" (formula "37"))
                                                (rule "orRight" (formula "37"))
                                                (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "58"))
                                                (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "37")) (ifInst ""  (formula "38")) (ifInst ""  (formula "39")))
                                                (rule "closeFalse" (formula "22"))
                                             )
                                             (branch "Case 2"
                                                (rule "notRight" (formula "52"))
                                                (rule "typeEqDerived" (formula "22") (term "0,1,1") (ifseqformula "20"))
                                                (rule "typeEqDerived" (formula "22") (term "0,0,1") (ifseqformula "20"))
                                                (rule "close" (formula "45") (ifseqformula "1"))
                                             )
                                          )
                                       )
                                    )
                                 )
                                 (branch "Case 2"
                                    (rule "typeEqDerived" (formula "21") (term "0,1,1") (ifseqformula "19"))
                                    (rule "typeEqDerived" (formula "21") (term "0,0,1") (ifseqformula "19"))
                                    (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "19")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "43") (ifseqformula "18"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "45") (ifseqformula "32"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (ifseqformula "18"))
                                    (rule "true_left" (formula "21"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "1") (ifseqformula "9"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1") (ifseqformula "18"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "1") (ifseqformula "31"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "39") (term "0") (ifseqformula "9"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "0") (ifseqformula "18"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "1") (ifseqformula "18"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "42") (term "0") (ifseqformula "9"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "10") (term "1") (ifseqformula "9"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "1") (ifseqformula "18"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "0,0") (ifseqformula "9"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "0,1") (ifseqformula "9"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "0,1") (ifseqformula "9"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,1") (ifseqformula "18"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,1") (ifseqformula "9"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,0,1") (ifseqformula "9"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "0,0,0,0,1") (ifseqformula "18"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "0,0,0,0,1") (ifseqformula "9"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "0,0,0,0,0,1") (ifseqformula "9"))
                                    (rule "orRight" (formula "39"))
                                    (rule "orRight" (formula "43"))
                                    (rule "orRight" (formula "46"))
                                    (rule "orRight" (formula "39"))
                                    (rule "orRight" (formula "44"))
                                    (rule "orRight" (formula "48"))
                                    (rule "orRight" (formula "48"))
                                    (rule "allRight" (formula "58") (inst "sk=f_2"))
                                    (rule "allRight" (formula "58") (inst "sk=o_2"))
                                    (rule "orRight" (formula "58"))
                                    (rule "orRight" (formula "58"))
                                    (rule "eqSymm" (formula "7"))
                                    (rule "eqSymm" (formula "33"))
                                    (rule "eqSymm" (formula "34"))
                                    (rule "eqSymm" (formula "27") (term "1,1,0,1"))
                                    (rule "eqSymm" (formula "15") (term "1,0,1"))
                                    (rule "eqSymm" (formula "27") (term "0,1,0,1"))
                                    (rule "eqSymm" (formula "26") (term "0,1,0,1"))
                                    (rule "replace_known_left" (formula "15") (term "1,1") (ifseqformula "13"))
                                    (builtin "One Step Simplification" (formula "15"))
                                    (rule "replace_known_left" (formula "16") (term "1,1") (ifseqformula "13"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "replace_known_left" (formula "24") (term "1,1") (ifseqformula "21"))
                                    (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "56")))
                                    (rule "notLeft" (formula "24"))
                                    (rule "replace_known_left" (formula "23") (term "1,1") (ifseqformula "21"))
                                    (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "38")) (ifInst ""  (formula "56")))
                                    (rule "andLeft" (formula "23"))
                                    (rule "notLeft" (formula "23"))
                                    (rule "orRight" (formula "38"))
                                    (rule "orRight" (formula "38"))
                                    (rule "replace_known_left" (formula "25") (term "0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "25"))
                                    (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "58"))
                                    (builtin "One Step Simplification" (formula "5"))
                                    (rule "replace_known_left" (formula "26") (term "0,0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "true_left" (formula "26"))
                                    (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "55"))
                                    (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "54")))
                                    (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "24"))
                                    (rule "true_left" (formula "24"))
                                    (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "57"))
                                    (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "36")) (ifInst ""  (formula "37")) (ifInst ""  (formula "38")))
                                    (rule "closeFalse" (formula "22"))
                                 )
                              )
                              (branch "Exceptional Post (copyOf)"
                                 (rule "typeEqDerived" (formula "21") (term "0,1,1") (ifseqformula "19"))
                                 (rule "typeEqDerived" (formula "21") (term "0,0,1") (ifseqformula "19"))
                                 (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "34")) (ifInst ""  (formula "34")))
                                 (builtin "One Step Simplification" (formula "36"))
                                 (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "19")))
                                 (rule "true_left" (formula "21"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1") (ifseqformula "18"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "1") (ifseqformula "18"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "10") (term "1") (ifseqformula "9"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "1") (ifseqformula "9"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,1") (ifseqformula "9"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "0,1") (ifseqformula "9"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "1,1,0") (ifseqformula "18"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "0,1,1,0") (ifseqformula "9"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "0,0,0,0,1") (ifseqformula "18"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "0,0,0,0,1") (ifseqformula "9"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "0,0,0,0,0,1") (ifseqformula "9"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "0,0,0,0,1,1,0,1,1") (ifseqformula "18"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "0,0,1,0,1,1,0,1,1") (ifseqformula "18"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "0,0,0,1,0,1,1,0,1,1") (ifseqformula "9"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "0,0,0,0,0,1,1,0,1,1") (ifseqformula "9"))
                                 (rule "translateJavaSubInt" (formula "35") (term "0,2,1,0,0,1,1,1,1,0,0,0,1"))
                                 (rule "andLeft" (formula "28"))
                                 (rule "andLeft" (formula "25"))
                                 (rule "andLeft" (formula "28"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "30") (term "1") (ifseqformula "28"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "30") (term "0,1") (ifseqformula "18"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "30") (term "0,0,1") (ifseqformula "9"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "31") (term "0,0,0,0") (ifseqformula "28"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "31") (term "0,0,0,0,0") (ifseqformula "18"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "31") (term "0,0,0,0,0,0") (ifseqformula "9"))
                                 (rule "andLeft" (formula "25"))
                                 (rule "andLeft" (formula "27"))
                                 (rule "andLeft" (formula "30"))
                                 (rule "andLeft" (formula "32"))
                                 (rule "andLeft" (formula "34"))
                                 (rule "andLeft" (formula "27"))
                                 (rule "andLeft" (formula "32"))
                                 (rule "notLeft" (formula "33"))
                                 (rule "close" (formula "36") (ifseqformula "35"))
                              )
                              (branch "Pre (copyOf)"
                                 (rule "typeEqDerived" (formula "21") (term "0,1,1") (ifseqformula "19"))
                                 (rule "typeEqDerived" (formula "21") (term "0,0,1") (ifseqformula "19"))
                                 (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "33")))
                                 (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "19")))
                                 (rule "true_left" (formula "21"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1") (ifseqformula "18"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "1") (ifseqformula "18"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "1") (ifseqformula "9"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "10") (term "1") (ifseqformula "9"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "0,1") (ifseqformula "9"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,1") (ifseqformula "9"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "1,1,0") (ifseqformula "18"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "0,1,1,0") (ifseqformula "9"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "0,0,0,0,1") (ifseqformula "9"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "0,0,0,0,1") (ifseqformula "18"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "0,0,0,0,0,1") (ifseqformula "9"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "0,0,1,0,1,1,0,1,1") (ifseqformula "18"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "0,0,0,0,1,1,0,1,1") (ifseqformula "18"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "0,0,0,0,0,1,1,0,1,1") (ifseqformula "9"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "0,0,0,1,0,1,1,0,1,1") (ifseqformula "9"))
                                 (rule "andLeft" (formula "25"))
                                 (rule "andLeft" (formula "28"))
                                 (rule "wellFormedAnonEQ" (formula "36") (term "0") (ifseqformula "28"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "1") (ifseqformula "28"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,1") (ifseqformula "18"))
                                 (rule "wellFormedAnonEQ" (formula "36") (term "0,0") (ifseqformula "18"))
                                 (rule "wellFormedAnonEQ" (formula "36") (term "0,0,0") (ifseqformula "9"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,0,1") (ifseqformula "9"))
                                 (rule "andLeft" (formula "26"))
                                 (rule "andLeft" (formula "25"))
                                 (rule "andLeft" (formula "30"))
                                 (rule "andLeft" (formula "26"))
                                 (rule "andLeft" (formula "32"))
                                 (rule "andLeft" (formula "27"))
                                 (rule "andLeft" (formula "33"))
                                 (rule "andLeft" (formula "34"))
                                 (rule "andLeft" (formula "35"))
                                 (rule "andLeft" (formula "35"))
                                 (rule "andLeft" (formula "35"))
                                 (rule "andLeft" (formula "37"))
                                 (rule "notLeft" (formula "35"))
                                 (rule "notLeft" (formula "35"))
                                 (rule "notLeft" (formula "36"))
                                 (rule "notLeft" (formula "35"))
                                 (rule "orRight" (formula "39"))
                                 (rule "orRight" (formula "36"))
                                 (rule "orRight" (formula "40"))
                                 (rule "orRight" (formula "36"))
                                 (rule "eqSymm" (formula "7"))
                                 (rule "eqSymm" (formula "15") (term "1,0,1"))
                                 (rule "eqSymm" (formula "26") (term "0,1,0,1"))
                                 (rule "eqSymm" (formula "27") (term "0,1,0,1"))
                                 (rule "eqSymm" (formula "27") (term "1,1,0,1"))
                                 (rule "eqSymm" (formula "33"))
                                 (rule "eqSymm" (formula "34"))
                                 (rule "replace_known_left" (formula "23") (term "1,1") (ifseqformula "21"))
                                 (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "48")))
                                 (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "47"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "replace_known_right" (formula "24") (term "0,1") (ifseqformula "48"))
                                 (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "21")))
                                 (rule "notLeft" (formula "24"))
                                 (rule "replace_known_left" (formula "15") (term "1,1") (ifseqformula "13"))
                                 (builtin "One Step Simplification" (formula "15"))
                                 (rule "replace_known_left" (formula "16") (term "1,1") (ifseqformula "13"))
                                 (builtin "One Step Simplification" (formula "16"))
                                 (rule "replace_known_left" (formula "26") (term "0,0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "26"))
                                 (rule "true_left" (formula "26"))
                                 (rule "replace_known_left" (formula "25") (term "0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "25"))
                                 (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "44"))
                                 (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "43")))
                                 (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "47"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "replace_known_right" (formula "23") (term "0,0") (ifseqformula "34"))
                                 (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "22")))
                                 (rule "closeFalse" (formula "23"))
                              )
                           )
                           (branch "Exceptional Post (add)"
                              (rule "typeEqDerived" (formula "21") (term "0,1,1") (ifseqformula "19"))
                              (rule "typeEqDerived" (formula "21") (term "0,0,1") (ifseqformula "19"))
                              (builtin "One Step Simplification" (formula "28"))
                              (builtin "One Step Simplification" (formula "35"))
                              (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "19")))
                              (rule "true_left" (formula "21"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "1") (ifseqformula "18"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "10") (term "1") (ifseqformula "9"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "1") (ifseqformula "9"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1") (ifseqformula "18"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "0,1") (ifseqformula "9"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,1") (ifseqformula "9"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "1,1,0") (ifseqformula "18"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "0,1,1,0") (ifseqformula "9"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "0,0,0,0,1") (ifseqformula "9"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "0,0,0,0,1") (ifseqformula "18"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "0,0,0,0,0,1") (ifseqformula "9"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "0,0,1,0,1,1,0,1,1") (ifseqformula "18"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "0,0,0,0,1,1,0,1,1") (ifseqformula "18"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "0,0,0,0,0,1,1,0,1,1") (ifseqformula "9"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "0,0,0,1,0,1,1,0,1,1") (ifseqformula "9"))
                              (rule "translateJavaSubInt" (formula "34") (term "0,2,1,0,0,1,1,1,1,0,0,0,1"))
                              (rule "andLeft" (formula "25"))
                              (rule "andLeft" (formula "28"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "29") (term "1,0") (ifseqformula "28"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "29") (term "0,1,0") (ifseqformula "18"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "29") (term "0,0,1,0") (ifseqformula "9"))
                              (rule "andLeft" (formula "25"))
                              (rule "andLeft" (formula "27"))
                              (rule "andLeft" (formula "30"))
                              (rule "andLeft" (formula "27"))
                              (rule "andLeft" (formula "31"))
                              (rule "andLeft" (formula "33"))
                              (rule "andLeft" (formula "28"))
                              (rule "notLeft" (formula "32"))
                              (rule "close" (formula "35") (ifseqformula "34"))
                           )
                           (branch "Pre (add)"
                              (rule "typeEqDerived" (formula "21") (term "0,1,1") (ifseqformula "19"))
                              (rule "typeEqDerived" (formula "21") (term "0,0,1") (ifseqformula "19"))
                              (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "30")) (ifInst ""  (formula "31")) (ifInst ""  (formula "30")) (ifInst ""  (formula "31")))
                              (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "19")))
                              (rule "true_left" (formula "21"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1") (ifseqformula "18"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "1") (ifseqformula "9"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "10") (term "1") (ifseqformula "9"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "1") (ifseqformula "18"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "32") (term "1,1") (ifseqformula "18"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "0,1") (ifseqformula "9"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,1") (ifseqformula "9"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "1,1,0") (ifseqformula "18"))
                              (rule "wellFormedAnonEQ" (formula "32") (term "0,0,1") (ifseqformula "18"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "32") (term "0,1,1") (ifseqformula "9"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "32") (term "1,0,1") (ifseqformula "18"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "0,1,1,0") (ifseqformula "9"))
                              (rule "wellFormedAnonEQ" (formula "32") (term "0,0,0,1") (ifseqformula "9"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "32") (term "0,1,0,1") (ifseqformula "9"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "0,0,0,0,1") (ifseqformula "9"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "0,0,0,0,1") (ifseqformula "18"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "0,0,0,0,0,1") (ifseqformula "9"))
                              (rule "andLeft" (formula "25"))
                              (rule "andLeft" (formula "26"))
                              (rule "andLeft" (formula "25"))
                              (rule "andLeft" (formula "26"))
                              (rule "andLeft" (formula "27"))
                              (rule "eqSymm" (formula "7"))
                              (rule "eqSymm" (formula "15") (term "1,0,1"))
                              (rule "eqSymm" (formula "36") (term "0,0"))
                              (rule "eqSymm" (formula "26") (term "0,1,0,1"))
                              (rule "eqSymm" (formula "27") (term "1,1,0,1"))
                              (rule "eqSymm" (formula "27") (term "0,1,0,1"))
                              (rule "replace_known_left" (formula "16") (term "1,1") (ifseqformula "13"))
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "replace_known_left" (formula "24") (term "1,1") (ifseqformula "21"))
                              (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "34")))
                              (rule "notLeft" (formula "24"))
                              (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "33"))
                              (builtin "One Step Simplification" (formula "5"))
                              (rule "replace_known_left" (formula "23") (term "1,1") (ifseqformula "21"))
                              (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "29")) (ifInst ""  (formula "34")))
                              (rule "andLeft" (formula "23"))
                              (rule "notLeft" (formula "23"))
                              (rule "orRight" (formula "29"))
                              (rule "orRight" (formula "29"))
                              (rule "replace_known_left" (formula "15") (term "1,1") (ifseqformula "13"))
                              (builtin "One Step Simplification" (formula "15"))
                              (rule "replace_known_left" (formula "26") (term "0,0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "true_left" (formula "26"))
                              (rule "replace_known_left" (formula "25") (term "0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "33"))
                              (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "32")))
                              (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "36"))
                              (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "28")) (ifInst ""  (formula "29")) (ifInst ""  (formula "30")))
                              (rule "closeFalse" (formula "22"))
                           )
                           (branch "Null reference (e_3 = null)"
                              (rule "typeEqDerived" (formula "21") (term "0,1,1") (ifseqformula "19"))
                              (rule "typeEqDerived" (formula "21") (term "0,0,1") (ifseqformula "19"))
                              (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "32")))
                              (rule "closeTrue" (formula "33"))
                           )
                        )
                        (branch "result_4 = null FALSE"
                           (rule "typeEqDerived" (formula "20") (term "0,1,1") (ifseqformula "18"))
                           (rule "typeEqDerived" (formula "20") (term "0,0,1") (ifseqformula "18"))
                           (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "18")))
                           (rule "true_left" (formula "20"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "9") (term "1") (ifseqformula "8"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "1") (ifseqformula "8"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1") (ifseqformula "17"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "1") (ifseqformula "17"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "0,1") (ifseqformula "8"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "0,1") (ifseqformula "8"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "24") (term "1,1,0") (ifseqformula "17"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "24") (term "0,1,1,0") (ifseqformula "8"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "0,0,0,0,1") (ifseqformula "8"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "0,0,0,0,1") (ifseqformula "17"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "0,0,0,0,0,1") (ifseqformula "8"))
                           (rule "translateJavaSubInt" (formula "32") (term "0,2,1,0,0,1,1,1,1,0,0,0,1"))
                           (rule "andLeft" (formula "24"))
                           (rule "andLeft" (formula "25"))
                           (rule "andLeft" (formula "24"))
                           (rule "andLeft" (formula "25"))
                           (rule "andLeft" (formula "26"))
                           (rule "eqSymm" (formula "36") (term "0,1,1,0,0,0,1"))
                           (rule "eqSymm" (formula "36") (term "0,1,1,1,0,0,0,1"))
                           (rule "eqSymm" (formula "14") (term "1,0,1"))
                           (rule "eqSymm" (formula "6"))
                           (rule "eqSymm" (formula "36") (term "1,0,0,1,0,1"))
                           (rule "eqSymm" (formula "25") (term "0,1,0,1"))
                           (rule "eqSymm" (formula "26") (term "0,1,0,1"))
                           (rule "eqSymm" (formula "26") (term "1,1,0,1"))
                           (rule "replace_known_left" (formula "22") (term "1,1") (ifseqformula "20"))
                           (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "33")))
                           (rule "replace_known_left" (formula "23") (term "1,1") (ifseqformula "20"))
                           (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "33")))
                           (rule "notLeft" (formula "23"))
                           (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "32"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "replace_known_left" (formula "15") (term "1,1") (ifseqformula "12"))
                           (builtin "One Step Simplification" (formula "15"))
                           (rule "replace_known_left" (formula "14") (term "1,1") (ifseqformula "12"))
                           (builtin "One Step Simplification" (formula "14"))
                           (rule "replace_known_right" (formula "25") (term "0,0") (ifseqformula "35"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "exLeft" (formula "25") (inst "sk=i_0"))
                           (rule "andLeft" (formula "25"))
                           (rule "andLeft" (formula "26"))
                           (rule "andLeft" (formula "25"))
                           (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "38"))
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "true_left" (formula "24"))
                           (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "32"))
                           (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "31")))
                           (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "35"))
                           (builtin "One Step Simplification" (formula "21"))
                           (rule "replace_known_right" (formula "22") (term "0,0") (ifseqformula "30"))
                           (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "21")))
                           (rule "closeFalse" (formula "22"))
                        )
                     )
                     (branch "Exceptional Post (lookup)"
                        (rule "typeEqDerived" (formula "20") (term "0,1,1") (ifseqformula "18"))
                        (rule "typeEqDerived" (formula "20") (term "0,0,1") (ifseqformula "18"))
                        (builtin "One Step Simplification" (formula "25"))
                        (builtin "One Step Simplification" (formula "32"))
                        (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "18")))
                        (rule "true_left" (formula "20"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "1") (ifseqformula "17"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "9") (term "1") (ifseqformula "8"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "1") (ifseqformula "8"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1") (ifseqformula "17"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "24") (term "1,0") (ifseqformula "17"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "0,1") (ifseqformula "8"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "0,1") (ifseqformula "8"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "24") (term "0,1,0") (ifseqformula "8"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "0,0,0,0,1") (ifseqformula "17"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "0,0,0,0,1") (ifseqformula "8"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "0,0,0,0,0,1") (ifseqformula "8"))
                        (rule "translateJavaSubInt" (formula "31") (term "0,2,1,0,0,1,1,1,1,0,0,0,1"))
                        (rule "andLeft" (formula "24"))
                        (rule "andLeft" (formula "24"))
                        (rule "andLeft" (formula "26"))
                        (rule "notLeft" (formula "24"))
                        (rule "close" (formula "27") (ifseqformula "26"))
                     )
                     (branch "Pre (lookup)"
                        (rule "typeEqDerived" (formula "20") (term "0,1,1") (ifseqformula "18"))
                        (rule "typeEqDerived" (formula "20") (term "0,0,1") (ifseqformula "18"))
                        (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "29")) (ifInst ""  (formula "29")))
                        (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "18")))
                        (rule "true_left" (formula "20"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "9") (term "1") (ifseqformula "8"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "1") (ifseqformula "17"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1") (ifseqformula "17"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "1") (ifseqformula "8"))
                        (rule "wellFormedAnonEQ" (formula "30") (term "0,1") (ifseqformula "17"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "30") (term "1,1") (ifseqformula "17"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "0,1") (ifseqformula "8"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "0,1") (ifseqformula "8"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "30") (term "0,1,1") (ifseqformula "8"))
                        (rule "wellFormedAnonEQ" (formula "30") (term "0,0,1") (ifseqformula "8"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "0,0,0,0,1") (ifseqformula "8"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "0,0,0,0,1") (ifseqformula "17"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "0,0,0,0,0,1") (ifseqformula "8"))
                        (rule "eqSymm" (formula "6"))
                        (rule "eqSymm" (formula "14") (term "1,0,1"))
                        (rule "eqSymm" (formula "30") (term "0,0"))
                        (rule "replace_known_left" (formula "22") (term "1,1") (ifseqformula "20"))
                        (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "28")))
                        (rule "replace_known_left" (formula "14") (term "1,1") (ifseqformula "12"))
                        (builtin "One Step Simplification" (formula "14"))
                        (rule "replace_known_left" (formula "23") (term "1,1") (ifseqformula "20"))
                        (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "28")))
                        (rule "notLeft" (formula "23"))
                        (rule "replace_known_left" (formula "15") (term "1,1") (ifseqformula "12"))
                        (builtin "One Step Simplification" (formula "15"))
                        (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "27"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "replace_known_right" (formula "9") (term "0,1") (ifseqformula "24"))
                        (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "25")))
                        (rule "replace_known_right" (formula "22") (term "0,0") (ifseqformula "23"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "andLeft" (formula "22"))
                        (rule "notLeft" (formula "22"))
                        (rule "orRight" (formula "23"))
                        (rule "orRight" (formula "23"))
                        (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "31"))
                        (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "23")) (ifInst ""  (formula "24")) (ifInst ""  (formula "25")))
                        (rule "closeFalse" (formula "21"))
                     )
                  )
                  (branch "Null Reference (e_2 = null)"
                     (rule "typeEqDerived" (formula "21") (term "0,1,1") (ifseqformula "19"))
                     (rule "typeEqDerived" (formula "21") (term "0,0,1") (ifseqformula "19"))
                     (builtin "One Step Simplification" (formula "1"))
                     (builtin "One Step Simplification" (formula "28"))
                     (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "19")))
                     (rule "true_left" (formula "21"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "10") (term "1") (ifseqformula "9"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "1") (ifseqformula "9"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1") (ifseqformula "18"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,1") (ifseqformula "9"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "1,1,0") (ifseqformula "18"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "0,1,1,0") (ifseqformula "9"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "0,0,0,0,1") (ifseqformula "9"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "0,0,0,0,1,0,1") (ifseqformula "18"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "0,0,0,0,0,1,0,1") (ifseqformula "9"))
                     (rule "translateJavaSubInt" (formula "27") (term "0,2,1,0,0,1,1,1,1,0,0,0,1"))
                     (rule "andLeft" (formula "21"))
                     (rule "andLeft" (formula "22"))
                     (rule "andLeft" (formula "21"))
                     (rule "eqSymm" (formula "7"))
                     (rule "eqSymm" (formula "15") (term "1,0,1"))
                     (rule "eqSymm" (formula "30") (term "0,1,1,1,0,0,0,1"))
                     (rule "eqSymm" (formula "30") (term "0,1,1,0,0,0,1"))
                     (rule "eqSymm" (formula "30") (term "1,0,0,1,0,1"))
                     (rule "replace_known_left" (formula "16") (term "1,1") (ifseqformula "13"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "28"))
                     (builtin "One Step Simplification" (formula "5"))
                     (rule "replace_known_left" (formula "15") (term "1,1") (ifseqformula "13"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "replace_known_right" (formula "24") (term "0,1") (ifseqformula "29"))
                     (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "21")))
                     (rule "notLeft" (formula "24"))
                     (rule "replace_known_right" (formula "23") (term "0,1,0,0,1") (ifseqformula "29"))
                     (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "24")) (ifInst ""  (formula "21")))
                     (rule "andLeft" (formula "23"))
                     (rule "notLeft" (formula "23"))
                     (rule "orRight" (formula "24"))
                     (rule "orRight" (formula "24"))
                     (rule "replace_known_right" (formula "10") (term "0,1") (ifseqformula "28"))
                     (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "29")))
                     (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "27"))
                     (builtin "One Step Simplification" (formula "20"))
                     (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "32"))
                     (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "24")) (ifInst ""  (formula "25")) (ifInst ""  (formula "26")))
                     (rule "closeFalse" (formula "22"))
                  )
               )
            )
            (branch "Exceptional Post (copyOf)"
               (rule "typeEqDerived" (formula "20") (term "0,1,1") (ifseqformula "18"))
               (rule "typeEqDerived" (formula "20") (term "0,0,1") (ifseqformula "18"))
               (builtin "One Step Simplification" (formula "21"))
               (builtin "One Step Simplification" (formula "26"))
               (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "18")))
               (rule "true_left" (formula "20"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "1") (ifseqformula "8"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1") (ifseqformula "17"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "9") (term "1") (ifseqformula "8"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "0,1") (ifseqformula "8"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1,0") (ifseqformula "17"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,1,0") (ifseqformula "8"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "0,0,0,0,1") (ifseqformula "8"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,0,0,0,1,0,1") (ifseqformula "17"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,0,0,0,0,1,0,1") (ifseqformula "8"))
               (rule "translateJavaSubInt" (formula "25") (term "0,2,1,0,0,1,1,1,1,0,0,0,1"))
               (rule "andLeft" (formula "20"))
               (rule "andLeft" (formula "21"))
               (rule "andLeft" (formula "20"))
               (rule "notLeft" (formula "20"))
               (rule "eqSymm" (formula "14") (term "1,0,1"))
               (rule "eqSymm" (formula "6"))
               (rule "eqSymm" (formula "28") (term "1,0,0,1,0,1"))
               (rule "eqSymm" (formula "28") (term "0,1,1,0,0,0,1"))
               (rule "eqSymm" (formula "28") (term "0,1,1,1,0,0,0,1"))
               (rule "replace_known_left" (formula "14") (term "1,1") (ifseqformula "12"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "replace_known_left" (formula "15") (term "1,1") (ifseqformula "12"))
               (builtin "One Step Simplification" (formula "15"))
               (rule "replace_known_right" (formula "21") (term "1,1") (ifseqformula "23"))
               (builtin "One Step Simplification" (formula "21"))
               (rule "replace_known_right" (formula "22") (term "1,1") (ifseqformula "23"))
               (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "21")))
               (rule "closeFalse" (formula "22"))
            )
            (branch "Pre (copyOf)"
               (rule "typeEqDerived" (formula "20") (term "0,1,1") (ifseqformula "18"))
               (rule "typeEqDerived" (formula "20") (term "0,0,1") (ifseqformula "18"))
               (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "19")))
               (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "18")))
               (rule "true_left" (formula "20"))
               (rule "wellFormedAnonEQ" (formula "24") (ifseqformula "17"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "9") (term "1") (ifseqformula "8"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1") (ifseqformula "17"))
               (rule "wellFormedAnonEQ" (formula "24") (term "0") (ifseqformula "8"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "1") (ifseqformula "8"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "0,1") (ifseqformula "8"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "0,0,0,0,1") (ifseqformula "8"))
               (rule "eqSymm" (formula "6"))
               (rule "eqSymm" (formula "14") (term "1,0,1"))
               (rule "replace_known_left" (formula "15") (term "1,1") (ifseqformula "12"))
               (builtin "One Step Simplification" (formula "15"))
               (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "23"))
               (builtin "One Step Simplification" (formula "4"))
               (rule "replace_known_left" (formula "14") (term "1,1") (ifseqformula "12"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "21"))
               (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "20")))
               (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "16"))
               (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "1")) (ifInst ""  (formula "7")))
               (rule "closeTrue" (formula "24"))
            )
         )
         (branch "Exceptional Post (pke_encrypt)"
            (builtin "One Step Simplification" (formula "17"))
            (builtin "One Step Simplification" (formula "22"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "9") (term "1") (ifseqformula "8"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "1") (ifseqformula "8"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "0,0,0,0,1") (ifseqformula "8"))
            (rule "translateJavaSubInt" (formula "22") (term "0,2,1,0,0,1,1,1,1,0,0,0,1"))
            (rule "andLeft" (formula "17"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "1,0") (ifseqformula "17"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "0,1,0") (ifseqformula "8"))
            (rule "andLeft" (formula "18"))
            (rule "andLeft" (formula "18"))
            (rule "notLeft" (formula "18"))
            (rule "eqSymm" (formula "14") (term "1,0,1"))
            (rule "eqSymm" (formula "6"))
            (rule "eqSymm" (formula "25") (term "1,0,0,1,0,1"))
            (rule "eqSymm" (formula "25") (term "0,1,1,0,0,0,1"))
            (rule "eqSymm" (formula "25") (term "0,1,1,1,0,0,0,1"))
            (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "24"))
            (builtin "One Step Simplification" (formula "4"))
            (rule "replace_known_left" (formula "15") (term "1,1") (ifseqformula "12"))
            (builtin "One Step Simplification" (formula "15"))
            (rule "replace_known_left" (formula "14") (term "1,1") (ifseqformula "12"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "22"))
            (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "21")))
            (rule "replace_known_right" (formula "19") (term "0,0") (ifseqformula "20"))
            (builtin "One Step Simplification" (formula "19"))
            (rule "polySimp_elimSub" (formula "25") (term "0,2,1,0,0,1,1,1,1,0,0,0,1"))
            (rule "mul_literals" (formula "25") (term "1,0,2,1,0,0,1,1,1,1,0,0,0,1"))
            (rule "polySimp_addComm0" (formula "25") (term "0,2,1,0,0,1,1,1,1,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,0,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,0,1,0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,0,1,0,0,0,1"))
            (rule "blockThrow" (formula "25") (term "1"))
            (rule "blockThrow" (formula "25") (term "1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,0,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,0,1,0,0,0,1"))
            (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,0,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,0,1,0,0,0,1"))
            (rule "mul_literals" (formula "25") (term "0,1,1,0,0,0,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,0,1,0,0,0,1"))
            (rule "elementOfUnion" (formula "25") (term "0,0,0,0,1,0,1"))
            (rule "elementOfSingleton" (formula "25") (term "1,0,0,0,0,1,0,1"))
            (rule "elementOfSingleton" (formula "25") (term "0,0,0,0,0,1,0,1"))
            (rule "array2seqDef" (formula "25") (term "0,0,1,0,0,1,0,0,0,1") (inst "u=u"))
            (rule "array2seqDef" (formula "25") (term "1,0,1,0,0,1,0,0,0,1") (inst "u=u"))
            (rule "array2seqDef" (formula "25") (term "1,0,1,1,1,1,0,0,0,1") (inst "u=u"))
            (rule "eqSymm" (formula "25") (term "0,1,1,1,1,0,0,0,1"))
            (rule "array2seqDef" (formula "25") (term "1,0,1,1,0,0,0,1") (inst "u=u"))
            (rule "eqSymm" (formula "25") (term "0,1,1,0,0,0,1"))
            (rule "array2seqDef" (formula "25") (term "0,0,0,1,1,1,0,0,0,1") (inst "u=u"))
            (rule "array2seqDef" (formula "25") (term "1,0,1,1,1,0,0,0,1") (inst "u=u"))
            (rule "array2seqDef" (formula "14") (term "0,1,1") (inst "u=u"))
            (rule "array2seqDef" (formula "14") (term "1,1,1") (inst "u=u"))
            (rule "eqSeqDef" (formula "25") (term "0,1,0,0,1,0,0,0,1") (inst "iv=iv"))
            (rule "lenOfSeqDef" (formula "25") (term "1,1,0,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "polySimp_elimSub" (formula "25") (term "1,1,1,0,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "times_zero_2" (formula "25") (term "1,1,1,1,0,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "1,1,1,0,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "lenOfSeqDef" (formula "25") (term "1,0,0,1,0,0,1,0,0,0,1"))
            (rule "polySimp_elimSub" (formula "25") (term "1,1,0,0,1,0,0,1,0,0,0,1"))
            (rule "times_zero_2" (formula "25") (term "1,1,1,0,0,1,0,0,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "1,1,0,0,1,0,0,1,0,0,0,1"))
            (rule "getOfSeqDef" (formula "25") (term "0,1,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "castDel" (formula "25") (term "1,0,1,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "castDel" (formula "25") (term "2,0,1,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "0,2,1,0,1,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "eqSymm" (formula "25") (term "1,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "polySimp_elimSub" (formula "25") (term "1,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "mul_literals" (formula "25") (term "1,1,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "1,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "lenOfSeqDef" (formula "25") (term "0,0,0,1,0,0,1,0,0,0,1"))
            (rule "polySimp_elimSub" (formula "25") (term "1,0,0,0,1,0,0,1,0,0,0,1"))
            (rule "mul_literals" (formula "25") (term "1,1,0,0,0,1,0,0,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "1,0,0,0,1,0,0,1,0,0,0,1"))
            (rule "getOfSeqDef" (formula "25") (term "0,1,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "castDel" (formula "25") (term "2,0,1,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "castDel" (formula "25") (term "1,0,1,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "0,2,1,0,1,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "eqSymm" (formula "25") (term "1,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "polySimp_elimSub" (formula "25") (term "1,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "times_zero_2" (formula "25") (term "1,1,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "1,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "0,1,1,0,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "0,0,1,1,0,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,1,0,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "0,1,0,0,1,0,0,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "0,0,1,0,0,1,0,0,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,1,0,0,1,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,0,0,1,0,0,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "0,0,0,0,0,1,0,0,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0,0,1,0,0,1,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "eqSymm" (formula "25") (term "1,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "eqSymm" (formula "25") (term "1,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,1,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,1,1,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,1,0,0,1,0,0,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "25") (term "0,0,1,0,0,1,0,0,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "25") (term "0,0,1,0,0,1,0,0,1,0,0,0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,0,0,0,1,0,0,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0,0,0,1,0,0,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "25") (term "0,0,0,0,0,1,0,0,1,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "mul_literals" (formula "25") (term "0,1,1,0,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "eqSymm" (formula "25") (term "1,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "polySimp_rightDist" (formula "25") (term "1,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "mul_literals" (formula "25") (term "0,1,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,1,1,1,0,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "25") (term "0,0,1,1,1,0,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "25") (term "0,0,1,1,1,0,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "eqSymm" (formula "25") (term "1,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "polySimp_rightDist" (formula "25") (term "1,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "mul_literals" (formula "25") (term "0,1,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1"))
            (rule "array2seqDef" (formula "25") (term "1,0,1,1,1,1,0,0,0,1") (inst "u=u"))
            (rule "eqSymm" (formula "25") (term "0,1,1,1,1,0,0,0,1"))
            (rule "array2seqDef" (formula "25") (term "0,1,0,1,1,0,0,0,1") (inst "u=u"))
            (rule "eqSymm" (formula "25") (term "0,1,1,0,0,0,1"))
            (rule "eqSeqDef" (formula "25") (term "0,1,1,1,0,0,0,1") (inst "iv=iv"))
            (rule "lenOfSeqConcat" (formula "25") (term "1,1,0,0,1,0,1,1,1,0,0,0,1"))
            (builtin "One Step Simplification" (formula "25"))
            (rule "polySimp_addComm0" (formula "25") (term "1,1,0,0,1,0,1,1,1,0,0,0,1"))
            (rule "getOfSeqDef" (formula "25") (term "1,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "castDel" (formula "25") (term "2,1,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "castDel" (formula "25") (term "1,1,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "0,2,1,1,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_elimSub" (formula "25") (term "1,1,0,1,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "times_zero_2" (formula "25") (term "1,1,1,0,1,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "1,1,0,1,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "lenOfSeqDef" (formula "25") (term "1,0,0,1,1,1,0,0,0,1"))
            (rule "polySimp_elimSub" (formula "25") (term "1,1,0,0,1,1,1,0,0,0,1"))
            (rule "mul_literals" (formula "25") (term "1,1,1,0,0,1,1,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "1,1,0,0,1,1,1,0,0,0,1"))
            (rule "lenOfSeqConcat" (formula "25") (term "0,0,0,1,1,1,0,0,0,1"))
            (builtin "One Step Simplification" (formula "25"))
            (rule "polySimp_homoEq" (formula "25") (term "0,0,1,1,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1,1,1,0,0,0,1"))
            (rule "polySimp_addComm0" (formula "25") (term "1,1,0,0,0,1,1,1,0,0,0,1"))
            (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,1,1,1,0,0,0,1"))
            (rule "mul_literals" (formula "25") (term "0,1,0,0,0,1,1,1,0,0,0,1"))
            (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1,1,1,0,0,0,1"))
            (rule "polySimp_addComm0" (formula "25") (term "0,0,0,0,1,1,1,0,0,0,1"))
            (rule "lenOfSeqDef" (formula "25") (term "1,1,1,0,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_elimSub" (formula "25") (term "1,1,1,1,0,0,1,0,1,1,1,0,0,0,1"))
            (rule "times_zero_2" (formula "25") (term "1,1,1,1,1,0,0,1,0,1,1,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "1,1,1,1,0,0,1,0,1,1,1,0,0,0,1"))
            (rule "lenOfSeqDef" (formula "25") (term "0,1,0,0,0,1,1,1,0,0,0,1"))
            (rule "polySimp_elimSub" (formula "25") (term "1,0,1,0,0,0,1,1,1,0,0,0,1"))
            (rule "times_zero_2" (formula "25") (term "1,1,0,1,0,0,0,1,1,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "1,0,1,0,0,0,1,1,1,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,1,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,1,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "0,1,0,0,0,0,1,1,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "0,0,1,0,0,0,0,1,1,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,0,0,1,1,1,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "0,1,1,1,0,0,1,0,1,1,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "0,0,1,1,1,0,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,1,1,0,0,1,0,1,1,1,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,1,0,0,0,1,1,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "0,0,0,1,0,0,0,1,1,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1,0,0,0,1,1,1,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,1,0,1,1,1,0,0,0,1"))
            (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,1,0,1,1,1,0,0,0,1"))
            (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,1,0,1,1,1,0,0,0,1"))
            (rule "add_zero_left" (formula "25") (term "0,0,1,0,0,1,0,1,1,1,0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,1,0,1,1,1,0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,1,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_sepNegMonomial" (formula "25") (term "0,0,1,1,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0,1,1,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "25") (term "0,0,0,1,1,1,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,1,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,1,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_rightDist" (formula "25") (term "1,1,0,1,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "mul_literals" (formula "25") (term "0,1,1,0,1,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,1,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,1,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,1,0,1,1,1,0,0,0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,1,1,0,0,1,1,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "25") (term "0,0,1,1,0,0,1,1,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "25") (term "0,0,1,1,0,0,1,1,1,0,0,0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,0,0,0,1,1,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0,0,0,1,1,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "25") (term "0,0,0,0,0,1,1,1,0,0,0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,1,1,0,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "25") (term "0,0,1,1,0,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "25") (term "0,0,1,1,0,0,1,0,1,1,1,0,0,0,1"))
            (rule "eqSeqDef" (formula "14") (term "1,1") (inst "iv=iv"))
            (rule "getOfSeqDef" (formula "14") (term "1,1,0,1,1,1"))
            (rule "castDel" (formula "14") (term "2,1,1,0,1,1,1"))
            (rule "castDel" (formula "14") (term "1,1,1,0,1,1,1"))
            (rule "add_zero_right" (formula "14") (term "0,2,1,1,1,0,1,1,1"))
            (rule "polySimp_elimSub" (formula "14") (term "1,1,0,1,1,0,1,1,1"))
            (rule "times_zero_2" (formula "14") (term "1,1,1,0,1,1,0,1,1,1"))
            (rule "add_zero_right" (formula "14") (term "1,1,0,1,1,0,1,1,1"))
            (rule "lenOfSeqDef" (formula "14") (term "1,0,1,1"))
            (rule "polySimp_elimSub" (formula "14") (term "1,1,0,1,1"))
            (rule "mul_literals" (formula "14") (term "1,1,1,0,1,1"))
            (rule "add_zero_right" (formula "14") (term "1,1,0,1,1"))
            (rule "getOfSeqDef" (formula "14") (term "0,1,0,1,1,1"))
            (rule "castDel" (formula "14") (term "1,0,1,0,1,1,1"))
            (rule "castDel" (formula "14") (term "2,0,1,0,1,1,1"))
            (rule "add_zero_right" (formula "14") (term "0,2,1,0,1,0,1,1,1"))
            (rule "polySimp_elimSub" (formula "14") (term "1,1,0,0,1,0,1,1,1"))
            (rule "times_zero_2" (formula "14") (term "1,1,1,0,0,1,0,1,1,1"))
            (rule "add_zero_right" (formula "14") (term "1,1,0,0,1,0,1,1,1"))
            (rule "lenOfSeqDef" (formula "14") (term "1,1,0,0,1,1,1"))
            (rule "polySimp_elimSub" (formula "14") (term "1,1,1,0,0,1,1,1"))
            (rule "times_zero_2" (formula "14") (term "1,1,1,1,0,0,1,1,1"))
            (rule "add_zero_right" (formula "14") (term "1,1,1,0,0,1,1,1"))
            (rule "lenOfSeqDef" (formula "14") (term "0,0,1,1"))
            (rule "polySimp_elimSub" (formula "14") (term "1,0,0,1,1"))
            (rule "times_zero_2" (formula "14") (term "1,1,0,0,1,1"))
            (rule "add_zero_right" (formula "14") (term "1,0,0,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,1,1,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,1,1,0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "14") (term "0,1,0,1,1"))
            (rule "add_zero_right" (formula "14") (term "0,0,1,0,1,1"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "14") (term "0,1,1,0,0,1,1,1"))
            (rule "add_zero_right" (formula "14") (term "0,0,1,1,0,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,1,0,0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,1,1"))
            (rule "add_zero_right" (formula "14") (term "0,0,0,0,1,1"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,1,1,0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,0,1,1,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,1,1,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,1,1,0,1,1,1"))
            (rule "polySimp_rightDist" (formula "14") (term "1,1,0,1,1,0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,1,1,0,1,1,1"))
            (rule "mul_literals" (formula "14") (term "0,1,1,0,1,1,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,1,1,0,1,1,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,1,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "14") (term "0,0,1,0,1,1"))
            (rule "polySimp_elimOne" (formula "14") (term "0,0,1,0,1,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,0,1,1,1"))
            (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,0,1,1,1"))
            (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,0,1,1,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,0,1,1"))
            (rule "polySimp_elimOne" (formula "14") (term "0,0,0,0,1,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,1,1"))
            (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,1,1"))
            (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,1,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,1,1,1,0,0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "14") (term "0,0,1,1,1,0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "14") (term "0,0,1,1,1,0,0,1,1,1"))
            (rule "pullOutSelect" (formula "15") (term "0,0") (inst "selectSK=verif_functionalities_pkienc_Encryptor_publicKey_1"))
            (rule "applyEq" (formula "14") (term "0,0,0,1,1,1,0,0,1,1,1") (ifseqformula "15"))
            (rule "applyEq" (formula "14") (term "0,1,0,0,1,1") (ifseqformula "15"))
            (rule "applyEq" (formula "14") (term "1,1,0,1,0,1,1,1") (ifseqformula "15"))
            (rule "applyEq" (formula "14") (term "0,1,1,1,1,0,0,1,1,1") (ifseqformula "15"))
            (rule "applyEq" (formula "14") (term "0,1,1,1,0,0,1,0,1,1,1") (ifseqformula "15"))
            (rule "applyEq" (formula "14") (term "0,0,0,0,0,1,1") (ifseqformula "15"))
            (rule "applyEq" (formula "14") (term "0,0,0") (ifseqformula "15"))
            (rule "simplifySelectOfAnonEQ" (formula "15") (ifseqformula "8"))
            (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "24")) (ifInst ""  (formula "2")))
            (rule "applyEqReverse" (formula "16") (term "0,0") (ifseqformula "15"))
            (rule "applyEqReverse" (formula "14") (term "0,0,0,1,1,1,0,0,1,1,1") (ifseqformula "15"))
            (rule "applyEqReverse" (formula "14") (term "0,1,0,0,1,1") (ifseqformula "15"))
            (rule "applyEqReverse" (formula "14") (term "1,1,0,1,0,1,1,1") (ifseqformula "15"))
            (rule "applyEqReverse" (formula "14") (term "0,1,1,1,1,0,0,1,1,1") (ifseqformula "15"))
            (rule "applyEqReverse" (formula "14") (term "0,1,1,1,0,0,1,0,1,1,1") (ifseqformula "15"))
            (rule "applyEqReverse" (formula "14") (term "0,0,0,0,0,1,1") (ifseqformula "15"))
            (rule "applyEqReverse" (formula "14") (term "0,0,0") (ifseqformula "15"))
            (rule "hideAuxiliaryEq" (formula "15"))
            (rule "eqSeqDef" (formula "25") (term "0,1,1,1,1,0,0,0,1") (inst "iv=iv"))
            (rule "lenOfSeqDef" (formula "25") (term "0,0,0,1,1,1,1,0,0,0,1"))
            (rule "eqSymm" (formula "25") (term "0,0,1,1,1,1,0,0,0,1"))
            (rule "polySimp_elimSub" (formula "25") (term "1,1,0,0,1,1,1,1,0,0,0,1"))
            (rule "times_zero_2" (formula "25") (term "1,1,1,0,0,1,1,1,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "1,1,0,0,1,1,1,1,0,0,0,1"))
            (rule "lenOfSeqDef" (formula "25") (term "1,1,0,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "polySimp_elimSub" (formula "25") (term "1,1,1,0,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "times_zero_2" (formula "25") (term "1,1,1,1,0,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "1,1,1,0,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "getOfSeqDef" (formula "25") (term "1,1,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "castDel" (formula "25") (term "1,1,1,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "castDel" (formula "25") (term "2,1,1,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "0,2,1,1,1,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "polySimp_elimSub" (formula "25") (term "1,1,0,1,1,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "times_zero_2" (formula "25") (term "1,1,1,0,1,1,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "1,1,0,1,1,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "getOfSeqDef" (formula "25") (term "0,1,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "castDel" (formula "25") (term "2,0,1,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "castDel" (formula "25") (term "1,0,1,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "0,2,1,0,1,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "polySimp_elimSub" (formula "25") (term "1,1,0,0,1,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "times_zero_2" (formula "25") (term "1,1,1,0,0,1,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "1,1,0,0,1,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "lenOfSeqDef" (formula "25") (term "0,0,0,1,1,1,1,0,0,0,1"))
            (rule "eqSymm" (formula "25") (term "0,0,1,1,1,1,0,0,0,1"))
            (rule "polySimp_elimSub" (formula "25") (term "1,1,0,0,1,1,1,1,0,0,0,1"))
            (rule "times_zero_2" (formula "25") (term "1,1,1,0,0,1,1,1,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "1,1,0,0,1,1,1,1,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "0,1,1,0,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "0,0,1,1,0,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,1,0,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,1,1,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,1,1,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,1,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,0,0,1,1,1,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "0,0,0,0,0,1,1,1,1,0,0,0,1"))
            (rule "eqSymm" (formula "25") (term "0,0,1,1,1,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,1,1,1,1,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,0,0,1,1,1,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "0,0,0,0,0,1,1,1,1,0,0,0,1"))
            (rule "eqSymm" (formula "25") (term "0,0,1,1,1,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,1,1,1,1,0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,1,1,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,1,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,1,1,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,1,1,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "polySimp_rightDist" (formula "25") (term "1,1,0,1,1,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,1,1,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "mul_literals" (formula "25") (term "0,1,1,0,1,1,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,1,1,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "mul_literals" (formula "25") (term "0,1,1,0,0,1,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "mul_literals" (formula "25") (term "0,1,1,0,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,0,0,0,1,1,1,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0,0,0,1,1,1,1,0,0,0,1"))
            (rule "eqSymm" (formula "25") (term "0,0,1,1,1,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "25") (term "0,0,1,0,0,1,1,1,1,0,0,0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,1,1,1,0,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "25") (term "0,0,1,1,1,0,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "25") (term "0,0,1,1,1,0,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,0,0,0,1,1,1,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0,0,0,1,1,1,1,0,0,0,1"))
            (rule "eqSymm" (formula "25") (term "0,0,1,1,1,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "25") (term "0,0,1,0,0,1,1,1,1,0,0,0,1"))
            (rule "eqSeqDef" (formula "25") (term "0,1,1,0,0,0,1") (inst "iv=iv"))
            (rule "lenOfSeqConcat" (formula "25") (term "0,0,0,1,1,0,0,0,1"))
            (builtin "One Step Simplification" (formula "25"))
            (rule "polySimp_homoEq" (formula "25") (term "0,0,1,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1,1,0,0,0,1"))
            (rule "polySimp_addComm0" (formula "25") (term "1,1,0,0,0,1,1,0,0,0,1"))
            (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,1,1,0,0,0,1"))
            (rule "mul_literals" (formula "25") (term "0,1,0,0,0,1,1,0,0,0,1"))
            (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1,1,0,0,0,1"))
            (rule "polySimp_addComm0" (formula "25") (term "0,0,0,0,1,1,0,0,0,1"))
            (rule "getOfSeqDef" (formula "25") (term "1,1,0,1,0,1,1,0,0,0,1"))
            (rule "castDel" (formula "25") (term "1,1,1,0,1,0,1,1,0,0,0,1"))
            (rule "castDel" (formula "25") (term "2,1,1,0,1,0,1,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "0,2,1,1,1,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_elimSub" (formula "25") (term "1,1,0,1,1,0,1,0,1,1,0,0,0,1"))
            (rule "times_zero_2" (formula "25") (term "1,1,1,0,1,1,0,1,0,1,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "1,1,0,1,1,0,1,0,1,1,0,0,0,1"))
            (rule "lenOfSeqConcat" (formula "25") (term "1,1,0,0,1,0,1,1,0,0,0,1"))
            (builtin "One Step Simplification" (formula "25"))
            (rule "polySimp_addComm0" (formula "25") (term "1,1,0,0,1,0,1,1,0,0,0,1"))
            (rule "lenOfSeqDef" (formula "25") (term "1,0,0,0,0,1,1,0,0,0,1"))
            (rule "polySimp_elimSub" (formula "25") (term "1,1,0,0,0,0,1,1,0,0,0,1"))
            (rule "times_zero_2" (formula "25") (term "1,1,1,0,0,0,0,1,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "1,1,0,0,0,0,1,1,0,0,0,1"))
            (rule "lenOfSeqDef" (formula "25") (term "0,1,0,0,0,1,1,0,0,0,1"))
            (rule "polySimp_elimSub" (formula "25") (term "1,0,1,0,0,0,1,1,0,0,0,1"))
            (rule "times_zero_2" (formula "25") (term "1,1,0,1,0,0,0,1,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "1,0,1,0,0,0,1,1,0,0,0,1"))
            (rule "lenOfSeqDef" (formula "25") (term "1,1,1,0,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_elimSub" (formula "25") (term "1,1,1,1,0,0,1,0,1,1,0,0,0,1"))
            (rule "times_zero_2" (formula "25") (term "1,1,1,1,1,0,0,1,0,1,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "1,1,1,1,0,0,1,0,1,1,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,1,1,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,1,1,0,1,0,1,1,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "0,1,0,0,0,0,1,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "0,0,1,0,0,0,0,1,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,0,0,1,1,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,1,0,0,0,1,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "0,0,0,1,0,0,0,1,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1,0,0,0,1,1,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "0,1,1,1,0,0,1,0,1,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "0,0,1,1,1,0,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,1,1,0,0,1,0,1,1,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,1,0,1,1,0,0,0,1"))
            (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,1,0,1,1,0,0,0,1"))
            (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,1,0,1,1,0,0,0,1"))
            (rule "add_zero_left" (formula "25") (term "0,0,1,0,0,1,0,1,1,0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,1,0,1,1,0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,1,1,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_sepNegMonomial" (formula "25") (term "0,0,1,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0,1,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "25") (term "0,0,0,1,1,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,1,1,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,1,1,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_rightDist" (formula "25") (term "1,1,0,1,1,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,1,1,0,1,0,1,1,0,0,0,1"))
            (rule "mul_literals" (formula "25") (term "0,1,1,0,1,1,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,1,1,0,1,0,1,1,0,0,0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,0,0,0,1,0,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0,0,0,1,0,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "25") (term "0,0,0,0,0,1,0,0,1,0,1,1,0,0,0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,1,1,0,0,1,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "25") (term "0,0,1,1,0,0,1,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "25") (term "0,0,1,1,0,0,1,1,0,0,0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,0,0,0,1,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0,0,0,1,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "25") (term "0,0,0,0,0,1,1,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,1,0,1,1,0,0,0,1"))
            (rule "getOfSeqConcat" (formula "25") (term "0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_elimSub" (formula "25") (term "1,2,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "getOfSeqDef" (formula "25") (term "1,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "castDel" (formula "25") (term "2,1,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "castDel" (formula "25") (term "1,1,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "0,2,1,1,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_elimSub" (formula "25") (term "1,1,0,1,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "times_zero_2" (formula "25") (term "1,1,1,0,1,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "1,1,0,1,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "lenOfSeqDef" (formula "25") (term "1,0,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_elimSub" (formula "25") (term "1,1,0,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "times_zero_2" (formula "25") (term "1,1,1,0,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "1,1,0,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "lenOfSeqDef" (formula "25") (term "0,1,1,2,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_elimSub" (formula "25") (term "1,0,1,1,2,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "times_zero_2" (formula "25") (term "1,1,0,1,1,2,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "1,0,1,1,2,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_addComm0" (formula "25") (term "1,2,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "getOfSeqSingleton" (formula "25") (term "2,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "castDel" (formula "25") (term "1,2,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "castDel" (formula "25") (term "2,2,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,1,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,1,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "0,1,0,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "0,0,1,0,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,0,0,0,2,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "0,0,0,0,0,0,2,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0,0,0,2,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,1,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_sepPosMonomial" (formula "25") (term "0,2,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,0,2,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "25") (term "1,0,2,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,1,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,1,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_rightDist" (formula "25") (term "1,1,0,1,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "mul_literals" (formula "25") (term "0,1,1,0,1,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,1,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,1,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,0,1,0,0,0,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0,1,0,0,0,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "25") (term "0,0,0,1,0,0,0,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,1,0,2,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "25") (term "0,0,1,0,2,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "25") (term "0,0,1,0,2,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,1,0,1,0,1,1,1,0,0,0,1"))
            (rule "getOfSeqConcat" (formula "25") (term "0,1,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_elimSub" (formula "25") (term "1,2,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "lenOfSeqDef" (formula "25") (term "1,0,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_elimSub" (formula "25") (term "1,1,0,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "times_zero_2" (formula "25") (term "1,1,1,0,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "1,1,0,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "getOfSeqDef" (formula "25") (term "1,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "castDel" (formula "25") (term "1,1,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "castDel" (formula "25") (term "2,1,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "0,2,1,1,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_elimSub" (formula "25") (term "1,1,0,1,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "times_zero_2" (formula "25") (term "1,1,1,0,1,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "1,1,0,1,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "getOfSeqSingleton" (formula "25") (term "2,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "castDel" (formula "25") (term "1,2,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "castDel" (formula "25") (term "2,2,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "lenOfSeqDef" (formula "25") (term "0,1,0,0,2,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_elimSub" (formula "25") (term "1,0,1,0,0,2,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "times_zero_2" (formula "25") (term "1,1,0,1,0,0,2,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "1,0,1,0,0,2,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_addComm0" (formula "25") (term "0,0,2,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "0,1,0,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "0,0,1,0,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,1,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,1,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,0,0,0,2,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "add_zero_right" (formula "25") (term "0,0,0,0,0,0,2,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0,0,0,2,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,1,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_sepPosMonomial" (formula "25") (term "0,2,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,0,2,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "25") (term "1,0,2,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,1,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,1,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_rightDist" (formula "25") (term "1,1,0,1,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "mul_literals" (formula "25") (term "0,1,1,0,1,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,1,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,1,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,1,0,2,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "25") (term "0,0,1,0,2,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "25") (term "0,0,1,0,2,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,1,1,0,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "25") (term "0,0,1,1,0,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "25") (term "0,0,1,1,0,0,1,0,1,0,1,1,0,0,0,1"))
            (rule "commuteUnion" (formula "17") (term "1,0"))
            (rule "shift_paren_or" (formula "13"))
            (rule "nnf_imp2or" (formula "14") (term "0,1,1,1"))
            (rule "nnf_imp2or" (formula "25") (term "0,0,1,0,0,0,1"))
            (rule "nnf_imp2or" (formula "25") (term "0,1,0,1,1,1,1,0,0,0,1"))
            (rule "arrayLengthNotNegative" (formula "10") (term "0"))
            (rule "applyEq" (formula "10") (term "0") (ifseqformula "11"))
            (rule "arrayLengthIsAShort" (formula "11") (term "0"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "arrayLengthNotNegative" (formula "11") (term "1"))
            (rule "arrayLengthIsAShort" (formula "11") (term "1"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "nnf_imp2or" (formula "26") (term "0,1,0,1,1,1,0,0,0,1"))
            (rule "nnf_notAnd" (formula "15") (term "0,0,1,1,1"))
            (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,1,1,1"))
            (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0,1,1,1"))
            (rule "add_zero_right" (formula "15") (term "0,0,0,0,0,1,1,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,1,1,1"))
            (rule "mul_literals" (formula "15") (term "1,0,0,0,1,1,1"))
            (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,1,1,1"))
            (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,1,1,1"))
            (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,1,1,1"))
            (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,1,1,1"))
            (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,1,1,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,1,1,1"))
            (rule "arrayLengthIsAShort" (formula "6") (term "0"))
            (builtin "One Step Simplification" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "arrayLengthNotNegative" (formula "6") (term "0"))
            (rule "applyEq" (formula "6") (term "0") (ifseqformula "7"))
            (rule "arrayLengthNotNegative" (formula "7") (term "1"))
            (rule "arrayLengthIsAShort" (formula "7") (term "1"))
            (builtin "One Step Simplification" (formula "7"))
            (rule "true_left" (formula "7"))
            (rule "nnf_notAnd" (formula "27") (term "1,0,0,1,0,0,0,1"))
            (rule "nnf_notAnd" (formula "27") (term "0,0,0,1,0,0,0,1"))
            (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0,0,1,0,0,0,1"))
            (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,0,1,0,0,0,1"))
            (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,0,1,0,0,0,1"))
            (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,0,1,0,0,0,1"))
            (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,0,1,0,0,0,1"))
            (rule "add_zero_left" (formula "27") (term "0,0,1,0,0,0,1,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,0,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0,1,0,0,0,1"))
            (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,0,1,0,0,0,1"))
            (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0,0,1,0,0,0,1"))
            (rule "add_literals" (formula "27") (term "0,0,0,0,0,0,1,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,0,1,0,0,0,1"))
            (rule "mul_literals" (formula "27") (term "1,0,0,0,0,1,0,0,0,1"))
            (rule "nnf_imp2or" (formula "27") (term "0,1,0,1,1,0,0,0,1"))
            (rule "nnf_notAnd" (formula "27") (term "0,0,1,0,1,1,1,0,0,0,1"))
            (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0,1,0,1,1,1,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1,0,1,1,1,0,0,0,1"))
            (rule "mul_literals" (formula "27") (term "0,1,1,0,0,1,0,1,1,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1,0,1,1,1,0,0,0,1"))
            (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,1,0,1,1,1,0,0,0,1"))
            (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0,1,0,1,1,1,0,0,0,1"))
            (rule "add_literals" (formula "27") (term "0,0,0,0,0,1,0,1,1,1,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,1,0,1,1,1,0,0,0,1"))
            (rule "mul_literals" (formula "27") (term "1,0,0,0,1,0,1,1,1,0,0,0,1"))
            (rule "nnf_notAnd" (formula "27") (term "0,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "add_literals" (formula "27") (term "0,0,0,0,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "mul_literals" (formula "27") (term "1,0,0,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "add_zero_left" (formula "27") (term "0,0,1,0,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,1,0,1,1,1,1,0,0,0,1"))
            (rule "nnf_notAll" (formula "27") (term "1,1,0,0,1,0,0,0,1"))
            (rule "nnf_notAnd" (formula "27") (term "0,0,1,0,1,1,0,0,0,1"))
            (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,1,0,1,1,0,0,0,1"))
            (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0,1,0,1,1,0,0,0,1"))
            (rule "add_zero_right" (formula "27") (term "0,0,0,0,0,1,0,1,1,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,1,0,1,1,0,0,0,1"))
            (rule "mul_literals" (formula "27") (term "1,0,0,0,1,0,1,1,0,0,0,1"))
            (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0,1,0,1,1,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1,0,1,1,0,0,0,1"))
            (rule "mul_literals" (formula "27") (term "0,1,1,0,0,1,0,1,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1,0,1,1,0,0,0,1"))
            (rule "nnf_imp2or" (formula "27") (term "0,0,1,1,0,0,1,0,0,0,1"))
            (rule "nnf_notOr" (formula "27") (term "0,1,1,0,0,1,0,0,0,1"))
            (builtin "One Step Simplification" (formula "27"))
            (rule "arrayLengthNotNegative" (formula "16") (term "1,1,0,1,1"))
            (rule "arrayLengthIsAShort" (formula "17") (term "1,1,0,1,1"))
            (builtin "One Step Simplification" (formula "17"))
            (rule "true_left" (formula "17"))
            (rule "arrayLengthIsAShort" (formula "17") (term "1,0,0,1,1"))
            (builtin "One Step Simplification" (formula "17"))
            (rule "true_left" (formula "17"))
            (rule "arrayLengthNotNegative" (formula "17") (term "1,0,0,1,1"))
            (rule "commute_or_2" (formula "18") (term "0,1,1,1"))
            (rule "commute_or" (formula "18") (term "0,0,1,1,1"))
            (rule "methodCallParamThrow" (formula "29") (term "1"))
            (builtin "One Step Simplification" (formula "29"))
            (rule "tryCatchThrow" (formula "29") (term "1"))
            (rule "ifElseUnfold" (formula "29") (term "1") (inst "#boolv=x"))
            (rule "variableDeclaration" (formula "29") (term "1") (newnames "x"))
            (rule "equality_comparison_simple" (formula "29") (term "1"))
            (builtin "One Step Simplification" (formula "29"))
            (rule "replace_known_right" (formula "29") (term "0,0,1,0") (ifseqformula "24"))
            (builtin "One Step Simplification" (formula "29"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "7") (term "1,0,1") (ifseqformula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "8") (term "0,0") (ifseqformula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "9") (term "0,1") (ifseqformula "1"))
            (rule "ifElseSplit" (formula "32"))
            (branch "if x true"
               (builtin "One Step Simplification" (formula "33"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "if x false"
               (builtin "One Step Simplification" (formula "33"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "ifElseSplit" (formula "32"))
               (branch "if exc_2 instanceof java.lang.Throwable true"
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "28")))
                  (rule "true_left" (formula "1"))
                  (rule "variableDeclaration" (formula "32") (term "1") (newnames "e"))
                  (rule "reference_type_cast" (formula "32") (term "1"))
                  (branch "Normal Execution (exc_2 instanceof java.lang.Throwable)"
                     (builtin "One Step Simplification" (formula "33"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "assignment" (formula "32") (term "1"))
                     (builtin "One Step Simplification" (formula "32"))
                     (rule "emptyModality" (formula "32") (term "1"))
                     (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "27")) (ifInst ""  (formula "27")) (ifInst ""  (formula "26")))
                     (rule "allRight" (formula "32") (inst "sk=f_0"))
                     (rule "allRight" (formula "32") (inst "sk=o_0"))
                     (rule "orRight" (formula "32"))
                     (rule "orRight" (formula "32"))
                     (rule "orRight" (formula "32"))
                     (rule "eqSymm" (formula "35"))
                     (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=f_0_0"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "13"))
                     (rule "eqSymm" (formula "36"))
                     (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
                     (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0"))
                     (rule "replace_known_right" (formula "1") (term "1,0,0,0,0") (ifseqformula "33"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
                     (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "34"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "36")))
                     (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "commute_and" (formula "34"))
                     (rule "commute_and" (formula "33"))
                     (rule "ifthenelse_split" (formula "22") (term "0,0,1,1"))
                     (branch "self.publicKey.length >= 1 TRUE"
                        (rule "eqSymm" (formula "23") (term "0,1,1"))
                        (rule "replace_known_left" (formula "23") (term "0,1,1,0,1,1,1") (ifseqformula "22"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "inEqSimp_subsumption1" (formula "21") (ifseqformula "22"))
                        (rule "leq_literals" (formula "21") (term "0"))
                        (builtin "One Step Simplification" (formula "21"))
                        (rule "true_left" (formula "21"))
                        (rule "ifthenelse_split" (formula "1") (term "0"))
                        (branch " !o_0 = null & !( o_0.<created> = TRUE | o_0.<created>@anon_heap_getZeroMessage<<anonHeapFunction>> = TRUE) TRUE"
                           (rule "andLeft" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "orRight" (formula "28"))
                           (rule "applyEqReverse" (formula "39") (term "1") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "eqSymm" (formula "38"))
                           (rule "replace_known_right" (formula "37") (term "0,1") (ifseqformula "27"))
                           (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "29")))
                           (rule "closeTrue" (formula "37"))
                        )
                        (branch " !o_0 = null & !( o_0.<created> = TRUE | o_0.<created>@anon_heap_getZeroMessage<<anonHeapFunction>> = TRUE) FALSE"
                           (rule "close" (formula "37") (ifseqformula "1"))
                        )
                     )
                     (branch "self.publicKey.length >= 1 FALSE"
                        (rule "eqSymm" (formula "22") (term "0,1,1"))
                        (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "28")))
                        (rule "inEqSimp_geqRight" (formula "28"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_antiSymm" (formula "22") (ifseqformula "1"))
                        (rule "applyEq" (formula "1") (term "0") (ifseqformula "22"))
                        (rule "leq_literals" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "applyEq" (formula "23") (term "1,1,1,0,0,0,0,0,1,1,1") (ifseqformula "21"))
                        (rule "add_zero_right" (formula "23") (term "1,1,0,0,0,0,0,1,1,1"))
                        (rule "eqSymm" (formula "23") (term "0,0,0,1,1,1"))
                        (rule "applyEq" (formula "22") (term "0") (ifseqformula "21"))
                        (rule "qeq_literals" (formula "22"))
                        (rule "true_left" (formula "22"))
                        (rule "inEqSimp_notGeq" (formula "22") (term "0,0,1,1"))
                        (rule "mul_literals" (formula "22") (term "1,0,0,0,0,1,1"))
                        (rule "add_literals" (formula "22") (term "0,0,0,0,1,1"))
                        (rule "add_zero_left" (formula "22") (term "0,0,0,1,1"))
                        (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0,1,1,1"))
                        (rule "add_zero_right" (formula "22") (term "1,1,0,1,1,1"))
                        (rule "qeq_literals" (formula "22") (term "1,0,1,1,1"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "ifthenelse_split" (formula "1") (term "0"))
                        (branch " !o_0 = null & !( o_0.<created> = TRUE | o_0.<created>@anon_heap_getZeroMessage<<anonHeapFunction>> = TRUE) TRUE"
                           (rule "andLeft" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "orRight" (formula "28"))
                           (rule "applyEqReverse" (formula "39") (term "1") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "eqSymm" (formula "38"))
                           (rule "replace_known_right" (formula "36") (term "1") (ifseqformula "29"))
                           (builtin "One Step Simplification" (formula "36"))
                           (rule "false_right" (formula "36"))
                           (rule "replace_known_right" (formula "36") (term "0,0") (ifseqformula "29"))
                           (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "27")))
                           (rule "closeTrue" (formula "36"))
                        )
                        (branch " !o_0 = null & !( o_0.<created> = TRUE | o_0.<created>@anon_heap_getZeroMessage<<anonHeapFunction>> = TRUE) FALSE"
                           (rule "close" (formula "37") (ifseqformula "1"))
                        )
                     )
                  )
                  (branch "ClassCastException (!(exc_2 instanceof java.lang.Throwable))"
                     (builtin "One Step Simplification" (formula "32"))
                     (rule "closeTrue" (formula "32"))
                  )
               )
               (branch "if exc_2 instanceof java.lang.Throwable false"
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "28")))
                  (rule "closeFalse" (formula "1"))
               )
            )
         )
         (branch "Pre (pke_encrypt)"
            (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "17")) (ifInst ""  (formula "13")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "9") (term "1") (ifseqformula "8"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "1") (ifseqformula "8"))
            (rule "wellFormedAnonEQ" (formula "20") (term "0") (ifseqformula "8"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1") (ifseqformula "8"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "0,0,0,0,1") (ifseqformula "8"))
            (rule "eqSymm" (formula "6"))
            (rule "eqSymm" (formula "14") (term "1,0,1"))
            (rule "replace_known_left" (formula "15") (term "1,1") (ifseqformula "12"))
            (builtin "One Step Simplification" (formula "15"))
            (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "19"))
            (builtin "One Step Simplification" (formula "4"))
            (rule "replace_known_left" (formula "14") (term "1,1") (ifseqformula "12"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "17"))
            (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "16")))
            (rule "replace_known_right" (formula "20") (term "0,1") (ifseqformula "16"))
            (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "1")) (ifInst ""  (formula "7")) (ifInst ""  (formula "9")))
            (rule "closeTrue" (formula "20"))
         )
      )
      (branch "Exceptional Post (copyOf)"
         (builtin "One Step Simplification" (formula "12"))
         (builtin "One Step Simplification" (formula "17"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "9") (term "1") (ifseqformula "8"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "12") (term "1,0") (ifseqformula "8"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "12") (term "0,0,0,0,1,0,1") (ifseqformula "8"))
         (rule "translateJavaSubInt" (formula "17") (term "0,2,1,0,0,1,1,1,1,0,0,0,1"))
         (rule "andLeft" (formula "12"))
         (rule "andLeft" (formula "12"))
         (rule "andLeft" (formula "14"))
         (rule "notLeft" (formula "12"))
         (rule "eqSymm" (formula "6"))
         (rule "eqSymm" (formula "20") (term "0,1,1,0,0,0,1"))
         (rule "eqSymm" (formula "20") (term "1,0,0,1,0,1"))
         (rule "eqSymm" (formula "20") (term "0,1,1,1,0,0,0,1"))
         (rule "eqSymm" (formula "13") (term "1,0,1"))
         (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "19"))
         (builtin "One Step Simplification" (formula "4"))
         (rule "replace_known_right" (formula "14") (term "1,1") (ifseqformula "15"))
         (builtin "One Step Simplification" (formula "14"))
         (rule "notLeft" (formula "14"))
         (rule "replace_known_right" (formula "13") (term "1,1") (ifseqformula "15"))
         (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "14")))
         (rule "closeFalse" (formula "13"))
      )
      (branch "Pre (copyOf)"
         (builtin "One Step Simplification" (formula "16"))
         (rule "wellFormedAnonEQ" (formula "16") (term "0") (ifseqformula "8"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "9") (term "1") (ifseqformula "8"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "16") (term "1,1") (ifseqformula "8"))
         (rule "eqSymm" (formula "6"))
         (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "15"))
         (builtin "One Step Simplification" (formula "4"))
         (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "13"))
         (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "12")))
         (rule "replace_known_left" (formula "16") (term "1,0") (ifseqformula "7"))
         (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "1")))
         (rule "orRight" (formula "16"))
         (rule "orRight" (formula "17"))
         (rule "pullOutSelect" (formula "16") (term "0") (inst "selectSK=verif_functionalities_pkienc_Encryptor_publicKey_0"))
         (rule "applyEq" (formula "18") (term "1,0") (ifseqformula "1"))
         (rule "applyEq" (formula "19") (term "1,0") (ifseqformula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")) (ifInst ""  (formula "3")))
         (rule "referencedObjectIsCreatedRightEQ" (formula "18") (ifseqformula "1") (ifseqformula "17"))
         (rule "close" (formula "18") (ifseqformula "2"))
      )
   )
   (branch "Exceptional Post (getZeroMessage)"
      (builtin "One Step Simplification" (formula "8"))
      (rule "false_right" (formula "11"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "translateJavaSubInt" (formula "11") (term "0,2,1,0,0,1,1,1,1,0,0,0,1"))
      (rule "andLeft" (formula "8"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "9") (term "1,0") (ifseqformula "8"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "11"))
      (rule "notLeft" (formula "9"))
      (rule "close" (formula "13") (ifseqformula "12"))
   )
   (branch "Pre (getZeroMessage)"
      (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "1")))
      (rule "false_right" (formula "9"))
      (rule "eqSymm" (formula "6"))
      (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "8"))
      (builtin "One Step Simplification" (formula "4"))
      (rule "inEqSimp_geqRight" (formula "9"))
      (rule "times_zero_1" (formula "1") (term "1,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1"))
      (rule "arrayLengthNotNegative" (formula "7") (term "1"))
      (rule "arrayLengthIsAShort" (formula "8") (term "1"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "true_left" (formula "8"))
      (rule "arrayLengthIsAShort" (formula "8") (term "0"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "true_left" (formula "8"))
      (rule "arrayLengthNotNegative" (formula "8") (term "0"))
      (rule "applyEq" (formula "8") (term "0") (ifseqformula "9"))
      (rule "arrayLengthIsAShort" (formula "1") (term "0"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "arrayLengthNotNegative" (formula "1") (term "0"))
      (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
      (rule "qeq_literals" (formula "1") (term "0"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Null Reference (_message = null)"
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
   (rule "closeFalse" (formula "1"))
)
)

}
