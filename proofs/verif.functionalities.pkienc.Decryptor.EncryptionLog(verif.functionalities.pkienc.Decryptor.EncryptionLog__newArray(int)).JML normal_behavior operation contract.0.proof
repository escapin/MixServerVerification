\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sun Jul 23 10:36:23 CEST 2017
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=\\#begexpand_inByte\\#end,\\#begexpand_inChar\\#end,\\#begexpand_inShort\\#end,\\#begexpand_inInt\\#end,\\#begexpand_inLong\\#end
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=5000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Sun Jul 23 10:36:23 CEST 2017
name=verif.functionalities.pkienc.Decryptor.EncryptionLog[verif.functionalities.pkienc.Decryptor.EncryptionLog\\:\\:newArray(int)].JML normal_behavior operation contract.0
contract=verif.functionalities.pkienc.Decryptor.EncryptionLog[verif.functionalities.pkienc.Decryptor.EncryptionLog\\:\\:newArray(int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mihai" ) (keyVersion "924a6463d9b6b49b603963549cb7cbec2fa8185a"))

(autoModeTime "167")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1") (newnames "n,self,result,exc,heapAtPre,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "7") (term "1,0,0,1,0,1"))
(rule "assignment" (formula "7") (term "1"))
(builtin "One Step Simplification" (formula "7"))
(rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_newArray,savedHeapBefore_newArray"))
(builtin "One Step Simplification" (formula "7"))
(rule "returnUnfold" (formula "7") (term "1") (inst "#v0=x_arr_arr"))
(rule "variableDeclarationAssign" (formula "7") (term "1"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "x_arr_arr"))
(rule "arrayCreation" (formula "7") (term "1") (inst "#v0=x_arr_arr_1"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "x_arr_arr_1"))
(rule "variableDeclarationAssign" (formula "7") (term "1"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "dim0"))
(rule "assignment" (formula "7") (term "1"))
(builtin "One Step Simplification" (formula "7"))
(rule "ifUnfold" (formula "7") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "x"))
(rule "less_than_comparison_simple" (formula "7") (term "1"))
(builtin "One Step Simplification" (formula "7"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,1,0"))
(rule "times_zero_1" (formula "7") (term "1,0,0,0,0,1,0"))
(rule "add_zero_right" (formula "7") (term "0,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,1,0"))
(rule "mul_literals" (formula "7") (term "1,0,0,1,0"))
(rule "inEqSimp_contradInEq1" (formula "7") (term "0,0,1,0") (ifseqformula "5"))
(rule "qeq_literals" (formula "7") (term "0,0,0,1,0"))
(builtin "One Step Simplification" (formula "7"))
(rule "ifSplit" (formula "7"))
(branch "if x true"
   (builtin "One Step Simplification" (formula "8"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
(branch "if x false"
   (builtin "One Step Simplification" (formula "8"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "7") (term "1") (inst "#v0=x_arr_arr_2"))
   (rule "variableDeclaration" (formula "7") (term "1") (newnames "x_arr_arr_2"))
   (rule "variableDeclarationAssign" (formula "7") (term "1"))
   (rule "variableDeclaration" (formula "7") (term "1") (newnames "length_1"))
   (rule "assignment" (formula "7") (term "1"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_<createArray>,savedHeapBefore_<createArray>"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "variableDeclaration" (formula "7") (term "1") (newnames "newObject"))
   (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "7") (term "1") (inst "#v0=x_arr_arr_3"))
   (rule "variableDeclaration" (formula "7") (term "1") (newnames "x_arr_arr_3"))
   (rule "variableDeclarationAssign" (formula "7") (term "1"))
   (rule "variableDeclaration" (formula "7") (term "1") (newnames "length_2"))
   (rule "assignment" (formula "7") (term "1"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "allocateInstanceWithLength" (formula "7"))
   (builtin "One Step Simplification" (formula "8"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "2"))
   (rule "notLeft" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "blockEmpty" (formula "11") (term "1"))
   (rule "assignment" (formula "11") (term "1"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "arrayLengthNotNegative" (formula "1") (term "0"))
   (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
   (rule "arrayLengthIsAShort" (formula "1") (term "0"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "methodCall" (formula "11") (term "1"))
   (branch "Normal Execution (newObject != null )"
      (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "9")))
      (rule "false_right" (formula "11"))
      (rule "methodBodyExpand" (formula "11") (term "1") (newnames "heapBefore_<createArrayHelper>,savedHeapBefore_<createArrayHelper>"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "assignment_write_attribute_this" (formula "11") (term "1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "methodCallWithinClass" (formula "11") (term "1"))
      (rule "methodBodyExpand" (formula "11") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "arrayInitialisation" (formula "11") (term "1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "polySimp_elimSub" (formula "11") (term "2,1,0,1,0"))
      (rule "mul_literals" (formula "11") (term "1,2,1,0,1,0"))
      (rule "polySimp_addComm0" (formula "11") (term "2,1,0,1,0"))
      (rule "applyEq" (formula "11") (term "1,2,1,0,1,0") (ifseqformula "1"))
      (rule "methodCallEmpty" (formula "11") (term "1"))
      (rule "blockEmpty" (formula "11") (term "1"))
      (rule "assignment_write_attribute_this" (formula "11") (term "1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "methodCallReturnIgnoreResult" (formula "11") (term "1"))
      (rule "blockEmpty" (formula "11") (term "1"))
      (rule "methodCallReturn" (formula "11") (term "1"))
      (rule "assignment" (formula "11") (term "1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "methodCallEmpty" (formula "11") (term "1"))
      (rule "blockEmpty" (formula "11") (term "1"))
      (rule "assignment" (formula "11") (term "1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "blockEmpty" (formula "11") (term "1"))
      (rule "assignment" (formula "11") (term "1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "methodCallReturn" (formula "11") (term "1"))
      (rule "assignment" (formula "11") (term "1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "methodCallEmpty" (formula "11") (term "1"))
      (rule "tryEmpty" (formula "11") (term "1"))
      (rule "emptyModality" (formula "11") (term "1"))
      (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "1")) (ifInst ""  (formula "2")) (ifInst ""  (formula "8")) (ifInst ""  (formula "9")))
      (rule "allRight" (formula "11") (inst "sk=f_0"))
      (rule "allRight" (formula "11") (inst "sk=o_0"))
      (rule "orRight" (formula "11"))
      (rule "eqSymm" (formula "12"))
      (rule "pullOutSelect" (formula "12") (term "0") (inst "selectSK=f_0_0"))
      (rule "simplifySelectOfStore" (formula "1"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "castDel" (formula "1") (term "1,0"))
      (rule "eqSymm" (formula "13"))
      (rule "eqSymm" (formula "1") (term "1,0,0"))
      (rule "eqSymm" (formula "1") (term "0,0,0"))
      (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
      (rule "simplifySelectOfMemset" (formula "1"))
      (rule "elementOfArrayRange" (formula "1") (term "0,0,0") (inst "iv=iv"))
      (rule "eqSymm" (formula "1") (term "0,0,0,1,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1,0,0,0"))
      (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_2"))
      (rule "simplifySelectOfStore" (formula "1"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "castDel" (formula "1") (term "1,0"))
      (rule "eqSymm" (formula "1") (term "1,0,0"))
      (rule "eqSymm" (formula "1") (term "0,0,0"))
      (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_3"))
      (rule "simplifySelectOfStore" (formula "1"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "castDel" (formula "1") (term "1,0"))
      (rule "eqSymm" (formula "1") (term "1,0,0"))
      (rule "eqSymm" (formula "1") (term "0,0,0"))
      (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_4"))
      (rule "simplifySelectOfStore" (formula "1"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "castDel" (formula "1") (term "1,0"))
      (rule "eqSymm" (formula "1") (term "0,0,0"))
      (rule "eqSymm" (formula "1") (term "1,0,0"))
      (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_5"))
      (rule "simplifySelectOfCreate" (formula "1"))
      (rule "castDel" (formula "1") (term "1,0"))
      (rule "eqSymm" (formula "1") (term "0,0,0,0"))
      (rule "replace_known_right" (formula "1") (term "0,1,0,0,0") (ifseqformula "15"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "commute_and" (formula "6") (term "0,0"))
      (rule "commute_and" (formula "4") (term "0,0"))
      (rule "commute_and" (formula "3") (term "0,0"))
      (rule "commute_and" (formula "2") (term "0,0"))
      (rule "commute_and" (formula "1") (term "0,0"))
      (rule "ifthenelse_split" (formula "1") (term "0"))
      (branch "f_0 = java.lang.Object::<created> ∧ o_0 = x_arr_arr_3 TRUE"
         (rule "andLeft" (formula "1"))
         (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
         (rule "hideAuxiliaryEq" (formula "3"))
         (rule "replace_known_left" (formula "7") (term "1,0,0") (ifseqformula "2"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "2"))
         (builtin "One Step Simplification" (formula "4"))
         (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
         (builtin "One Step Simplification" (formula "3"))
         (rule "replace_known_left" (formula "6") (term "0,1,0,0") (ifseqformula "1"))
         (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "2")))
         (rule "applyEqReverse" (formula "7") (term "2,0") (ifseqformula "6"))
         (rule "hideAuxiliaryEq" (formula "6"))
         (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "2"))
         (builtin "One Step Simplification" (formula "5"))
         (rule "applyEq" (formula "17") (term "0,0,0") (ifseqformula "2"))
         (rule "replace_known_right" (formula "17") (term "0,0") (ifseqformula "15"))
         (builtin "One Step Simplification" (formula "17"))
         (rule "notRight" (formula "17"))
         (rule "applyEq" (formula "7") (term "0,0,0") (ifseqformula "2"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "applyEqReverse" (formula "18") (term "1") (ifseqformula "7"))
         (rule "hideAuxiliaryEq" (formula "7"))
         (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
         (builtin "One Step Simplification" (formula "4"))
         (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
         (rule "hideAuxiliaryEq" (formula "4"))
         (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
         (builtin "One Step Simplification" (formula "4"))
         (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
         (rule "hideAuxiliaryEq" (formula "4"))
         (rule "applyEqRigid" (formula "15") (term "2,0") (ifseqformula "2"))
         (rule "narrowSelectType" (formula "15") (term "0") (ifseqformula "7"))
         (rule "eqSymm" (formula "15"))
         (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
         (builtin "One Step Simplification" (formula "4"))
         (rule "applyEqReverse" (formula "15") (term "0") (ifseqformula "4"))
         (rule "hideAuxiliaryEq" (formula "4"))
         (rule "eqSymm" (formula "14"))
         (rule "close" (formula "14") (ifseqformula "1"))
      )
      (branch "f_0 = java.lang.Object::<created> ∧ o_0 = x_arr_arr_3 FALSE"
         (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "ifthenelse_split" (formula "1") (term "0"))
         (branch "f_0 = java.lang.Object::<transient> ∧ o_0 = x_arr_arr_3 TRUE"
            (rule "andLeft" (formula "1"))
            (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
            (rule "hideAuxiliaryEq" (formula "3"))
            (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "2"))
            (builtin "One Step Simplification" (formula "6"))
            (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
            (builtin "One Step Simplification" (formula "3"))
            (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "2"))
            (builtin "One Step Simplification" (formula "4"))
            (rule "replace_known_left" (formula "5") (term "0,0,0,0") (ifseqformula "2"))
            (builtin "One Step Simplification" (formula "5"))
            (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "2"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "replace_known_right" (formula "5") (term "0,1,0,0") (ifseqformula "14"))
            (builtin "One Step Simplification" (formula "5"))
            (rule "applyEq" (formula "14") (term "0") (ifseqformula "1"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "false_right" (formula "14"))
            (rule "applyEq" (formula "5") (term "1,0,0,0,0,0") (ifseqformula "1"))
            (builtin "One Step Simplification" (formula "5"))
            (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
            (rule "hideAuxiliaryEq" (formula "5"))
            (rule "applyEqRigid" (formula "17") (term "2,0") (ifseqformula "1"))
            (rule "narrowSelectType" (formula "17") (term "0") (ifseqformula "8"))
            (rule "eqSymm" (formula "17"))
            (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "1"))
            (builtin "One Step Simplification" (formula "5"))
            (rule "applyEqReverse" (formula "17") (term "0") (ifseqformula "5"))
            (rule "hideAuxiliaryEq" (formula "5"))
            (rule "applyEqRigid" (formula "3") (term "0,0,0") (ifseqformula "1"))
            (builtin "One Step Simplification" (formula "3"))
            (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
            (rule "hideAuxiliaryEq" (formula "3"))
            (rule "applyEqRigid" (formula "3") (term "0,0,0") (ifseqformula "1"))
            (builtin "One Step Simplification" (formula "3"))
            (rule "applyEqReverse" (formula "15") (term "0") (ifseqformula "3"))
            (rule "hideAuxiliaryEq" (formula "3"))
            (rule "eqSymm" (formula "14"))
            (rule "applyEq" (formula "13") (term "1,0,0,1") (ifseqformula "2"))
            (rule "replace_known_right" (formula "13") (term "0,1") (ifseqformula "10"))
            (builtin "One Step Simplification" (formula "13"))
            (rule "notRight" (formula "13"))
            (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "1"))
            (rule "eqSymm" (formula "3"))
            (rule "close" (formula "12") (ifseqformula "3"))
         )
         (branch "f_0 = java.lang.Object::<transient> ∧ o_0 = x_arr_arr_3 FALSE"
            (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "ifthenelse_split" (formula "1") (term "0"))
            (branch " f_0 = java.lang.Object::<transactionConditionallyUpdated> ∧ o_0 = x_arr_arr_3 TRUE"
               (rule "andLeft" (formula "1"))
               (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
               (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "2")))
               (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
               (rule "hideAuxiliaryEq" (formula "3"))
               (rule "hideAuxiliaryEq" (formula "3"))
               (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "2"))
               (builtin "One Step Simplification" (formula "4"))
               (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "2"))
               (builtin "One Step Simplification" (formula "3"))
               (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "2"))
               (builtin "One Step Simplification" (formula "13"))
               (rule "replace_known_right" (formula "3") (term "0,1,0,0") (ifseqformula "13"))
               (builtin "One Step Simplification" (formula "3"))
               (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "2"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "applyEq" (formula "3") (term "1,0,0,0,0,0") (ifseqformula "1"))
               (builtin "One Step Simplification" (formula "3"))
               (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
               (rule "hideAuxiliaryEq" (formula "3"))
               (rule "applyEq" (formula "11") (term "0") (ifseqformula "1"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "false_right" (formula "11"))
               (rule "applyEq" (formula "16") (term "2,0") (ifseqformula "1"))
               (rule "narrowSelectType" (formula "16") (term "0") (ifseqformula "6"))
               (rule "eqSymm" (formula "16"))
               (rule "applyEq" (formula "3") (term "0,0,0") (ifseqformula "1"))
               (builtin "One Step Simplification" (formula "3"))
               (rule "applyEqReverse" (formula "16") (term "0") (ifseqformula "3"))
               (rule "hideAuxiliaryEq" (formula "3"))
               (rule "eqSymm" (formula "15"))
               (builtin "One Step Simplification" (formula "15"))
               (rule "notRight" (formula "15"))
               (rule "applyEq" (formula "11") (term "0") (ifseqformula "2"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "false_right" (formula "11"))
               (rule "applyEq" (formula "14") (term "1,0,0,1") (ifseqformula "3"))
               (rule "replace_known_right" (formula "14") (term "0,1") (ifseqformula "11"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "notRight" (formula "14"))
               (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "1"))
               (rule "eqSymm" (formula "4"))
               (rule "close" (formula "13") (ifseqformula "4"))
            )
            (branch " f_0 = java.lang.Object::<transactionConditionallyUpdated> ∧ o_0 = x_arr_arr_3 FALSE"
               (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "ifthenelse_split" (formula "1") (term "0"))
               (branch " f_0 = java.lang.Object::<initialized> ∧ o_0 = x_arr_arr_3 TRUE"
                  (rule "andLeft" (formula "1"))
                  (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "1"))
                  (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "2")))
                  (rule "applyEqReverse" (formula "19") (term "1") (ifseqformula "4"))
                  (rule "hideAuxiliaryEq" (formula "4"))
                  (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "2"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "2"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "2"))
                  (builtin "One Step Simplification" (formula "13"))
                  (rule "replace_known_right" (formula "3") (term "0,1,0,0") (ifseqformula "13"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "2"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "applyEq" (formula "12") (term "0") (ifseqformula "1"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "false_right" (formula "12"))
                  (rule "applyEqRigid" (formula "11") (term "0") (ifseqformula "1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "false_right" (formula "11"))
                  (rule "applyEq" (formula "3") (term "1,0,0,0,0,0") (ifseqformula "1"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "applyEq" (formula "14") (term "1,0,0,1") (ifseqformula "2"))
                  (rule "replace_known_right" (formula "14") (term "0,1") (ifseqformula "11"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "notRight" (formula "14"))
                  (rule "applyEq" (formula "11") (term "0") (ifseqformula "2"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "false_right" (formula "11"))
                  (rule "applyEqRigid" (formula "14") (term "2,0") (ifseqformula "2"))
                  (rule "narrowSelectType" (formula "14") (term "0") (ifseqformula "6"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
                  (rule "close" (formula "12") (ifseqformula "1"))
               )
               (branch " f_0 = java.lang.Object::<initialized> ∧ o_0 = x_arr_arr_3 FALSE"
                  (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "10"))
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "applyEqReverse" (formula "18") (term "1") (ifseqformula "2"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "ifthenelse_split" (formula "1") (term "0"))
                  (branch " o_0 = x_arr_arr_3 ∧ ∃ int iv; (arr(iv) = f_0 ∧ iv ≥ 0 ∧ iv ≤ -1 + n) ∧ ¬f_0 = java.lang.Object::<created> TRUE"
                     (rule "andLeft" (formula "1"))
                     (rule "notLeft" (formula "2"))
                     (rule "andLeft" (formula "1"))
                     (rule "exLeft" (formula "2") (inst "sk=iv_0"))
                     (rule "andLeft" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "applyEqReverse" (formula "22") (term "1") (ifseqformula "5"))
                     (rule "hideAuxiliaryEq" (formula "5"))
                     (rule "eqSymm" (formula "2"))
                     (rule "replace_known_left" (formula "15") (term "1") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "12"))
                     (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "1")))
                     (rule "false_right" (formula "16"))
                     (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "inEqSimp_homoInEq0" (formula "4"))
                     (rule "polySimp_addComm1" (formula "4") (term "0"))
                     (rule "applyEq" (formula "15") (term "0") (ifseqformula "2"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "false_right" (formula "15"))
                     (rule "applyEq" (formula "18") (term "0,0,0") (ifseqformula "1"))
                     (rule "replace_known_right" (formula "18") (term "0,0") (ifseqformula "16"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "notRight" (formula "18"))
                     (rule "applyEqRigid" (formula "19") (term "2,0") (ifseqformula "3"))
                     (rule "applyEqRigid" (formula "15") (term "0") (ifseqformula "3"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "false_right" (formula "15"))
                     (rule "applyEq" (formula "14") (term "0") (ifseqformula "3"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "false_right" (formula "14"))
                     (rule "applyEq" (formula "17") (term "1,0") (ifseqformula "2"))
                     (rule "narrowSelectArrayType" (formula "17") (term "0") (ifseqformula "8") (ifseqformula "15"))
                     (rule "applyEqRigid" (formula "13") (term "0") (ifseqformula "3"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "false_right" (formula "13"))
                     (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "2"))
                     (rule "close" (formula "13") (ifseqformula "1"))
                  )
                  (branch " o_0 = x_arr_arr_3 ∧ ∃ int iv; (arr(iv) = f_0 ∧ iv ≥ 0 ∧ iv ≤ -1 + n) ∧ ¬f_0 = java.lang.Object::<created> FALSE"
                     (rule "close" (formula "18") (ifseqformula "1"))
                  )
               )
            )
         )
      )
   )
   (branch "Null Reference (newObject = null)"
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
      (rule "closeFalse" (formula "1"))
   )
)
)

}
