\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Mar 07 16:04:50 CET 2016
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=3000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\proofObligation "#Proof Obligation Settings
#Mon Mar 07 16:04:50 CET 2016
name=seqSubTwoSteps
class=de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput
";

\proof {
(keyLog "0" (keyUser "mihai" ) (keyVersion "47d7cf277e2239d48a63a69617e607a111ce3a75"))

(autoModeTime "1010")

(branch "dummy ID"
(rule "polySimp_addComm0" (formula "1") (term "1,1") (newnames "f_s,f_x"))
(rule "lenOfSeqSub" (formula "1") (term "2,0"))
(rule "polySimp_elimSub" (formula "1") (term "1,2,0"))
(rule "polySimp_addComm0" (formula "1") (term "1,2,0"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "0,2,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,2,0"))
(rule "polySimp_addComm1" (formula "1") (term "0,0,2,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,2,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "0,0,2,0"))
(rule "polySimp_elimOne" (formula "1") (term "0,0,2,0"))
(rule "equalityToSeqGetAndSeqLenRight" (formula "1") (inst "iv=iv"))
(rule "lenOfSeqSub" (formula "1") (term "0,0"))
(rule "polySimp_elimSub" (formula "1") (term "1,0,0"))
(rule "mul_literals" (formula "1") (term "1,1,0,0"))
(rule "polySimp_addComm0" (formula "1") (term "1,0,0"))
(rule "lenOfSeqSub" (formula "1") (term "1,0"))
(rule "eqSymm" (formula "1") (term "0"))
(rule "polySimp_elimSub" (formula "1") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
(rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
(rule "polySimp_addComm0" (formula "1") (term "1,0,0"))
(rule "lenOfSeqSub" (formula "1") (term "1,1,0,0,1"))
(rule "polySimp_elimSub" (formula "1") (term "1,1,1,0,0,1"))
(rule "mul_literals" (formula "1") (term "1,1,1,1,0,0,1"))
(rule "polySimp_addComm0" (formula "1") (term "1,1,1,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "0,1,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1,0"))
(rule "polySimp_addComm1" (formula "1") (term "0,0,1,0"))
(rule "add_literals" (formula "1") (term "0,0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,0"))
(rule "eqSymm" (formula "1") (term "0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1,0"))
(rule "polySimp_addComm1" (formula "1") (term "0,0,1,0"))
(rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0"))
(rule "add_literals" (formula "1") (term "0,0,0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "0,1,1,0,0,1"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1,1,0,0,1"))
(rule "polySimp_addComm1" (formula "1") (term "0,0,1,1,0,0,1"))
(rule "add_literals" (formula "1") (term "0,0,0,1,1,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,1"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,0"))
(rule "eqSymm" (formula "1") (term "0"))
(rule "polySimp_elimOne" (formula "1") (term "0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1"))
(rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1"))
(rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1"))
(rule "mul_literals" (formula "1") (term "0,1,1,0,0,1"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,0"))
(rule "eqSymm" (formula "1") (term "0"))
(rule "polySimp_elimOne" (formula "1") (term "0,0,1,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,1,1,1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,1,1,0,0,1"))
(rule "polySimp_elimOne" (formula "1") (term "0,0,1,1,1,0,0,1"))
(rule "getOfSeqSub" (formula "1") (term "1,1,0,1"))
(rule "castDel" (formula "1") (term "2,1,1,0,1"))
(rule "eqSymm" (formula "1") (term "1,0,1"))
(rule "polySimp_elimSub" (formula "1") (term "1,1,0,0,1,0,1"))
(rule "polySimp_mulComm0" (formula "1") (term "1,1,1,0,0,1,0,1"))
(rule "polySimp_addComm0" (formula "1") (term "1,1,0,1,0,1"))
(rule "polySimp_rightDist" (formula "1") (term "1,1,1,0,0,1,0,1"))
(rule "mul_literals" (formula "1") (term "0,1,1,1,0,0,1,0,1"))
(rule "polySimp_addComm0" (formula "1") (term "1,1,0,0,1,0,1"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,1,0,1"))
(rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,1,0,1"))
(rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,1,0,0,1,0,1"))
(rule "mul_literals" (formula "1") (term "0,0,1,0,0,1,0,0,1,0,1"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0,1,0,0,1,0,1"))
(rule "polySimp_elimOne" (formula "1") (term "1,0,1,0,0,1,0,0,1,0,1"))
(rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,1,0,1"))
(rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0,0,1,0,1"))
(rule "add_literals" (formula "1") (term "0,0,0,0,1,0,0,1,0,1"))
(rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1,0,1"))
(rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,0,1"))
(rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,0,1"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,0,1"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,0,1"))
(rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0,1,0,1"))
(rule "mul_literals" (formula "1") (term "0,0,1,1,0,0,1,0,1"))
(rule "getOfSeqSub" (formula "1") (term "1,1,0,1"))
(rule "castDel" (formula "1") (term "2,1,1,0,1"))
(rule "eqSymm" (formula "1") (term "1,0,1"))
(rule "polySimp_elimSub" (formula "1") (term "1,1,0,0,1,0,1"))
(rule "mul_literals" (formula "1") (term "1,1,1,0,0,1,0,1"))
(rule "polySimp_addComm0" (formula "1") (term "1,1,0,1,0,1"))
(rule "polySimp_addComm0" (formula "1") (term "1,1,0,0,1,0,1"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,1,0,1"))
(rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,1,0,1"))
(rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,1,0,1"))
(rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,1,0,1"))
(rule "add_literals" (formula "1") (term "0,0,0,1,0,0,1,0,1"))
(rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1,0,1"))
(rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,0,1"))
(rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,0,1"))
(rule "mul_literals" (formula "1") (term "0,1,1,0,0,1,0,1"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,0,1"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,0,1"))
(rule "getOfSeqSub" (formula "1") (term "1,0,1,0,1"))
(rule "castDel" (formula "1") (term "2,1,0,1,0,1"))
(rule "polySimp_elimSub" (formula "1") (term "1,1,0,1,0,1,0,1"))
(rule "polySimp_addComm1" (formula "1") (term "1,1,1,0,1,0,1"))
(rule "polySimp_addComm0" (formula "1") (term "1,1,0,1,0,1,0,1"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,1,0,1,0,1"))
(rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,1,0,1,0,1"))
(rule "polySimp_mulAssoc" (formula "1") (term "0,1,0,0,1,0,1,0,1,0,1"))
(rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0,0,1,0,1,0,1,0,1"))
(rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0,1,0,1,0,1,0,1"))
(rule "polySimp_elimOne" (formula "1") (term "0,1,0,0,1,0,1,0,1,0,1"))
(rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,1,0,1,0,1"))
(rule "polySimp_addAssoc" (formula "1") (term "0,1,0,1,0,1,0,1"))
(rule "polySimp_addComm1" (formula "1") (term "0,0,1,0,1,0,1,0,1"))
(rule "polySimp_addComm1" (formula "1") (term "0,0,0,1,0,1,0,1,0,1"))
(rule "add_literals" (formula "1") (term "0,0,0,0,1,0,1,0,1,0,1"))
(rule "inEqSimp_homoInEq0" (formula "1") (term "0,0,1,0,1,0,1"))
(rule "mul_literals" (formula "1") (term "1,0,0,0,1,0,1,0,1"))
(rule "add_zero_right" (formula "1") (term "0,0,0,1,0,1,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,1,0,1,0,1"))
(rule "polySimp_mulComm0" (formula "1") (term "1,1,0,1,0,1,0,1"))
(rule "polySimp_rightDist" (formula "1") (term "1,1,0,1,0,1,0,1"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,1,0,1,0,1"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,1,0,1,0,1"))
(rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,1,0,1,0,1"))
(rule "mul_literals" (formula "1") (term "0,0,1,1,0,1,0,1,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,0,1,0,1,0,1"))
(rule "mul_literals" (formula "1") (term "1,0,0,1,0,1,0,1"))
(rule "nnf_imp2or" (formula "1") (term "0,1"))
(rule "nnf_notAnd" (formula "1") (term "0,0,1"))
(rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,1"))
(rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,1"))
(rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,1"))
(rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,1"))
(rule "add_literals" (formula "1") (term "0,0,0,1,0,0,1"))
(rule "add_zero_left" (formula "1") (term "0,0,1,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,1"))
(rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,1"))
(rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0,1"))
(rule "add_zero_right" (formula "1") (term "0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,1"))
(rule "mul_literals" (formula "1") (term "1,0,0,0,1"))
(rule "ifthenelse_split" (formula "1") (term "1,1,0,0"))
(branch "f_s.length >= 1 + f_x TRUE"
   (rule "replace_known_left" (formula "2") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
   (rule "polySimp_addAssoc" (formula "2") (term "1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "1,1,1,0,0,1"))
   (rule "polySimp_addAssoc" (formula "2") (term "1,1,0,0,1,0,1"))
   (rule "inEqSimp_homoInEq1" (formula "2") (term "0,1,1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,1,0,0,1"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,1,0,0,1"))
   (rule "polySimp_mulAssoc" (formula "2") (term "0,1,0,0,1,1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "2") (term "0,0,1,0,0,1,1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0,0,1,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "2") (term "0,1,0,0,1,1,0,0,1"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,1,0,0,1"))
   (rule "inEqSimp_homoInEq1" (formula "2") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,0"))
   (rule "polySimp_mulAssoc" (formula "2") (term "0,1,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "0,0,1,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "2") (term "0,1,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,1,1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "2") (term "0,0,1,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "2") (term "0,0,1,1,0,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,0"))
   (rule "polySimp_elimOne" (formula "2") (term "0,0,0,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "allRight" (formula "2") (inst "sk=iv_1"))
   (rule "orRight" (formula "2"))
   (rule "orRight" (formula "2"))
   (rule "inEqSimp_geqRight" (formula "3"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "1") (term "0"))
   (rule "inEqSimp_leqRight" (formula "3"))
   (rule "mul_literals" (formula "1") (term "1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "add_zero_left" (formula "1") (term "0"))
   (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "1"))
   (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "1")))
   (rule "inEqSimp_homoInEq0" (formula "4") (term "0,0"))
   (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
   (rule "inEqSimp_homoInEq0" (formula "4") (term "1,0,1,0"))
   (rule "eqSymm" (formula "4"))
   (rule "polySimp_addComm1" (formula "4") (term "0,1,0,1,1"))
   (rule "inEqSimp_homoInEq0" (formula "4") (term "0,0"))
   (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
   (rule "eqSymm" (formula "4"))
   (rule "inEqSimp_sepNegMonomial0" (formula "2"))
   (rule "polySimp_mulLiterals" (formula "2") (term "0"))
   (rule "polySimp_elimOne" (formula "2") (term "0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "0,0"))
   (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "4") (term "0,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0,0"))
   (rule "mul_literals" (formula "4") (term "0,0,1,0,0"))
   (rule "polySimp_elimOne" (formula "4") (term "1,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "0,1"))
   (rule "polySimp_mulComm0" (formula "4") (term "1,0,1"))
   (rule "polySimp_rightDist" (formula "4") (term "1,0,1"))
   (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,1"))
   (rule "polySimp_elimOne" (formula "4") (term "1,1,0,1"))
   (rule "polySimp_rightDist" (formula "4") (term "0,1,0,1"))
   (rule "mul_literals" (formula "4") (term "0,0,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0,1"))
   (rule "polySimp_elimOne" (formula "4") (term "1,0,1,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,1,0"))
   (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,1,0"))
   (rule "polySimp_rightDist" (formula "4") (term "1,1,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,1,0"))
   (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,1,0"))
   (rule "polySimp_rightDist" (formula "4") (term "0,1,1,0,1,0"))
   (rule "mul_literals" (formula "4") (term "0,0,1,1,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,1,0,1,0"))
   (rule "polySimp_elimOne" (formula "4") (term "1,0,1,1,0,1,0"))
   (rule "inEqSimp_subsumption1" (formula "4") (term "0,0,1,0") (ifseqformula "1"))
   (rule "leq_literals" (formula "4") (term "0,0,0,1,0"))
   (builtin "One Step Simplification" (formula "4"))
   (rule "orRight" (formula "4"))
   (rule "eqSymm" (formula "5"))
   (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "4")))
   (rule "closeTrue" (formula "5"))
)
(branch "f_s.length >= 1 + f_x FALSE"
   (rule "add_literals" (formula "2") (term "1,0,0"))
   (rule "replace_known_right" (formula "2") (term "0,0,0,1,1,0,0,1") (ifseqformula "1"))
   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
   (rule "add_literals" (formula "2") (term "1,1,0,0,1,0,1"))
   (rule "qeq_literals" (formula "2") (term "0,0,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "qeq_literals" (formula "2") (term "0,1,1,0,0,1"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "eqSymm" (formula "2") (term "0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "inEqSimp_geqRight" (formula "1"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0"))
   (rule "add_zero_left" (formula "1") (term "0,0"))
   (rule "polySimp_sepPosMonomial" (formula "2") (term "1,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,1,0"))
   (rule "mul_literals" (formula "2") (term "0,1,1,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0"))
   (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1"))
   (rule "polySimp_elimOne" (formula "1") (term "1"))
   (rule "inEqSimp_contradEq3" (formula "2") (term "1,0") (ifseqformula "1"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0"))
   (rule "polySimp_addComm0" (formula "2") (term "0,0,0,1,0"))
   (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,1,0"))
   (rule "add_literals" (formula "2") (term "1,1,0,0,1,0"))
   (rule "times_zero_1" (formula "2") (term "1,0,0,1,0"))
   (rule "add_literals" (formula "2") (term "0,0,1,0"))
   (rule "qeq_literals" (formula "2") (term "0,1,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "inEqSimp_contradInEq0" (formula "2") (term "0,0") (ifseqformula "1"))
   (rule "inEqSimp_homoInEq1" (formula "2") (term "0,0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,0,0"))
   (rule "add_literals" (formula "2") (term "1,1,0,0,0,0"))
   (rule "times_zero_1" (formula "2") (term "1,0,0,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0"))
   (rule "leq_literals" (formula "2") (term "0,0,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "allRight" (formula "2") (inst "sk=iv_0"))
   (rule "orRight" (formula "2"))
   (rule "orRight" (formula "2"))
   (rule "replace_known_right" (formula "4") (term "0,0,1") (ifseqformula "3"))
   (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "3")))
   (rule "closeTrue" (formula "4"))
)
)

}
