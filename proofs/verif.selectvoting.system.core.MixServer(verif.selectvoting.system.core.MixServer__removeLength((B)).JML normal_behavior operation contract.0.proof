\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sun Dec 18 11:27:57 CET 2016
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=\\#begexpand_inByte\\#end,\\#begexpand_inChar\\#end,\\#begexpand_inShort\\#end,\\#begexpand_inInt\\#end,\\#begexpand_inLong\\#end
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=6000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Sun Dec 18 11:27:57 CET 2016
name=verif.selectvoting.system.core.MixServer[verif.selectvoting.system.core.MixServer\\:\\:removeLength([B)].JML normal_behavior operation contract.0
contract=verif.selectvoting.system.core.MixServer[verif.selectvoting.system.core.MixServer\\:\\:removeLength([B)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mihai" ) (keyVersion "f08755657231e066f34a6d2cf1fc92a2d49850a9"))

(autoModeTime "1530")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "msg,self,result,exc,heapAtPre,o,f") (userinteraction))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "assignment" (formula "10") (term "1") (userinteraction))
(rule "methodBodyExpand" (formula "10") (term "1,1") (newnames "heapBefore_removeLength,savedHeapBefore_removeLength") (userinteraction))
(rule "returnUnfold" (formula "10") (term "1,1,1") (inst "#v0=x_arr") (userinteraction))
(builtin "One Step Simplification" (formula "10"))
(rule "variableDeclarationAssign" (formula "10") (term "1") (userinteraction))
(rule "variableDeclaration" (formula "10") (term "1") (newnames "x_arr") (userinteraction))
(builtin "Use Operation Contract" (formula "10") (newnames "heapBefore_second,result_0,exc_0,heapAfter_second,anon_heap_second") (contract "verif.utils.MessageTools[verif.utils.MessageTools::second([B)].JML normal_behavior operation contract.0"))
(branch "Post (second)"
   (rule "assignment" (formula "12") (term "1,1") (userinteraction))
   (rule "methodCallReturn" (formula "12") (term "1,1,1") (userinteraction))
   (rule "assignment" (formula "12") (term "1,1,1") (userinteraction))
   (rule "methodCallEmpty" (formula "12") (term "1,1,1,1") (userinteraction))
   (rule "tryEmpty" (formula "12") (term "1,1,1,1") (userinteraction))
   (rule "emptyModality" (formula "12") (term "1,1,1,1") (userinteraction))
   (builtin "One Step Simplification" (formula "12"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "12"))
   (rule "notLeft" (formula "13"))
   (rule "notLeft" (formula "12"))
   (rule "andRight" (formula "17") (userinteraction))
   (branch "Case 1"
      (rule "andRight" (formula "17") (userinteraction))
      (branch "Case 1"
         (rule "applyEq" (formula "17") (term "0") (ifseqformula "11") (userinteraction))
         (rule "cut" (inst "cutFormula=array2seq(heapAfter_second, msg) = array2seq(heap, msg)") (userinteraction))
         (branch "CUT: array2seq(heapAfter_second, msg) = array2seq(heap, msg) TRUE"
            (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "1") (userinteraction))
            (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "7") (userinteraction))
            (rule "mSecondofmConcat" (formula "18") (term "0") (userinteraction))
            (rule "cut" (inst "cutFormula=  array2seq2d(heap,
              byte[][]::select(heap,
                               self,
                               verif.selectvoting.system.core.MixServer::$sorted))
= array2seq2d(heapAfter_second,
              byte[][]::select(heapAfter_second,
                               self,
                               verif.selectvoting.system.core.MixServer::$sorted))") (userinteraction))
            (branch "CUT: array2seq2d(heap, self.sorted) = array2seq2d(heapAfter_second, self.sorted@heapAfter_second) TRUE"
               (rule "applyEq" (formula "19") (term "1,0") (ifseqformula "1") (userinteraction))
               (builtin "One Step Simplification" (formula "19"))
               (rule "closeTrue" (formula "19") (userinteraction))
            )
            (branch "CUT: array2seq2d(heap, self.sorted) = array2seq2d(heapAfter_second, self.sorted@heapAfter_second) FALSE"
               (rule "hide_right" (formula "19") (userinteraction))
               (rule "array2seq2dDef" (formula "14") (term "1") (inst "u=u") (userinteraction))
               (rule "array2seq2dDef" (formula "14") (term "0") (inst "u=u") (userinteraction))
               (rule "equalityToSeqGetAndSeqLenRight" (formula "14") (inst "iv=iv") (userinteraction))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "11") (term "1") (ifseqformula "10"))
               (rule "eqSymm" (formula "14") (term "1,0,1"))
               (rule "eqSymm" (formula "14") (term "0"))
               (rule "eqSymm" (formula "7"))
               (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "18"))
               (builtin "One Step Simplification" (formula "5"))
               (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "16"))
               (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "15")))
               (rule "lenOfSeqDef" (formula "14") (term "1,1,0,0,1"))
               (rule "polySimp_elimSub" (formula "14") (term "1,1,1,0,0,1"))
               (rule "times_zero_2" (formula "14") (term "1,1,1,1,0,0,1"))
               (rule "add_zero_right" (formula "14") (term "1,1,1,0,0,1"))
               (rule "getOfSeqDef" (formula "14") (term "0,1,0,1"))
               (rule "castDel" (formula "14") (term "2,0,1,0,1"))
               (rule "castDel" (formula "14") (term "1,0,1,0,1"))
               (rule "add_zero_right" (formula "14") (term "0,2,1,1,0,1,0,1"))
               (rule "eqSymm" (formula "14") (term "1,0,1"))
               (rule "polySimp_elimSub" (formula "14") (term "1,1,0,1,1,0,1"))
               (rule "times_zero_2" (formula "14") (term "1,1,1,0,1,1,0,1"))
               (rule "add_zero_right" (formula "14") (term "1,1,0,1,1,0,1"))
               (rule "lenOfSeqDef" (formula "14") (term "1,0"))
               (rule "polySimp_elimSub" (formula "14") (term "1,1,0"))
               (rule "mul_literals" (formula "14") (term "1,1,1,0"))
               (rule "add_zero_right" (formula "14") (term "1,1,0"))
               (rule "lenOfSeqDef" (formula "14") (term "0,0"))
               (rule "polySimp_elimSub" (formula "14") (term "1,0,0"))
               (rule "times_zero_2" (formula "14") (term "1,1,0,0"))
               (rule "add_zero_right" (formula "14") (term "1,0,0"))
               (rule "getOfSeqDef" (formula "14") (term "0,1,0,1"))
               (rule "castDel" (formula "14") (term "2,0,1,0,1"))
               (rule "castDel" (formula "14") (term "1,0,1,0,1"))
               (rule "add_zero_right" (formula "14") (term "0,2,1,1,0,1,0,1"))
               (rule "eqSymm" (formula "14") (term "1,0,1"))
               (rule "polySimp_elimSub" (formula "14") (term "1,1,0,1,1,0,1"))
               (rule "times_zero_2" (formula "14") (term "1,1,1,0,1,1,0,1"))
               (rule "add_zero_right" (formula "14") (term "1,1,0,1,1,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "14") (term "0,1,1,0,0,1"))
               (rule "add_zero_right" (formula "14") (term "0,0,1,1,0,0,1"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,1,0,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "14") (term "0,1,0"))
               (rule "add_zero_right" (formula "14") (term "0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0"))
               (rule "add_zero_right" (formula "14") (term "0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0,1"))
               (rule "eqSymm" (formula "14") (term "1,0,1"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,1,1,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0,1"))
               (rule "eqSymm" (formula "14") (term "1,0,1"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,1,1,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,1,1,0,1"))
               (rule "applyEq" (formula "12") (term "0,1") (ifseqformula "1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,1,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "0,0,1,0"))
               (rule "polySimp_elimOne" (formula "14") (term "0,0,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,0"))
               (rule "polySimp_elimOne" (formula "14") (term "0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1"))
               (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1"))
               (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1"))
               (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0,1"))
               (rule "eqSymm" (formula "14") (term "1,0,1"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,1,1,0,1"))
               (rule "polySimp_rightDist" (formula "14") (term "1,1,0,1,1,0,1"))
               (rule "mul_literals" (formula "14") (term "0,1,1,0,1,1,0,1"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,1,1,0,1"))
               (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,1,1,0,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,1,1,1,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "14") (term "0,0,1,1,1,0,0,1"))
               (rule "polySimp_elimOne" (formula "14") (term "0,0,1,1,1,0,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0,1"))
               (rule "eqSymm" (formula "14") (term "1,0,1"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,1,1,0,1"))
               (rule "polySimp_rightDist" (formula "14") (term "1,1,0,1,1,0,1"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,1,1,0,1"))
               (rule "mul_literals" (formula "14") (term "0,1,1,0,1,1,0,1"))
               (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,1,1,0,1"))
               (rule "array2seqDef" (formula "12") (term "0") (inst "u=u"))
               (rule "array2seqDef" (formula "1") (term "0") (inst "u=u"))
               (rule "array2seqDef" (formula "1") (term "1") (inst "u=u"))
               (rule "narrowSelectArrayType" (formula "1") (term "2,1") (ifseqformula "2") (ifseqformula "18"))
               (rule "array2seqDef" (formula "7") (term "1") (inst "u=u"))
               (rule "eqSymm" (formula "7"))
               (rule "narrowSelectArrayType" (formula "7") (term "2,0") (ifseqformula "2") (ifseqformula "18"))
               (rule "applyEq" (formula "1") (term "1") (ifseqformula "7"))
               (rule "array2seqDef" (formula "12") (term "0,1") (inst "u=u"))
               (rule "narrowSelectArrayType" (formula "12") (term "2,0,1") (ifseqformula "2") (ifseqformula "18"))
               (rule "applyEq" (formula "12") (term "0,1") (ifseqformula "7"))
               (rule "mSecondofmConcat" (formula "12") (term "1"))
               (rule "array2seqDef" (formula "14") (term "1,1,1,0,1") (inst "u=u"))
               (rule "eqSymm" (formula "14") (term "1,0,1"))
               (rule "array2seqDef" (formula "14") (term "1,1,1,0,1") (inst "u=u"))
               (rule "eqSymm" (formula "14") (term "1,0,1"))
               (rule "eqSeqDef2" (formula "1") (inst "iv=iv") (ifseqformula "1"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "eqSeqDef2" (formula "6") (inst "iv=iv") (ifseqformula "6"))
               (builtin "One Step Simplification" (formula "6"))
               (rule "true_left" (formula "6"))
               (rule "eqSeqDef2" (formula "10") (inst "iv=iv") (ifseqformula "10"))
               (builtin "One Step Simplification" (formula "10"))
               (rule "true_left" (formula "10"))
               (rule "pullOutSelect" (formula "11") (term "0,1,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_1"))
               (rule "applyEq" (formula "12") (term "0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "12") (term "1,0,1,1,0,1,0,1") (ifseqformula "1"))
               (rule "applyEq" (formula "12") (term "1,1,2,1,0,1,0,1") (ifseqformula "1"))
               (rule "applyEq" (formula "12") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")) (ifInst ""  (formula "3")))
               (rule "applyEqReverse" (formula "12") (term "0,1,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "12") (term "0,0,0,0,0") (ifseqformula "1"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "allRight" (formula "12") (inst "sk=iv_1"))
               (rule "impRight" (formula "12"))
               (rule "andLeft" (formula "1"))
               (rule "applyEqReverse" (formula "14") (term "1,0,1,1,0") (ifseqformula "3"))
               (rule "applyEqReverse" (formula "14") (term "1,1,2,1,0") (ifseqformula "3"))
               (rule "applyEqReverse" (formula "14") (term "0,1,1,1,0,0") (ifseqformula "3"))
               (rule "hideAuxiliaryEq" (formula "3"))
               (rule "replace_known_left" (formula "13") (term "0,0,0") (ifseqformula "1"))
               (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "1")))
               (rule "inEqSimp_homoInEq0" (formula "2"))
               (rule "polySimp_addComm1" (formula "2") (term "0"))
               (rule "inEqSimp_homoInEq0" (formula "13") (term "0,1"))
               (rule "polySimp_addComm1" (formula "13") (term "0,0,1"))
               (rule "inEqSimp_homoInEq0" (formula "13") (term "0,0"))
               (rule "polySimp_addComm1" (formula "13") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1"))
               (rule "polySimp_rightDist" (formula "2") (term "1"))
               (rule "mul_literals" (formula "2") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
               (rule "polySimp_elimOne" (formula "2") (term "1,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,1"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,1"))
               (rule "polySimp_rightDist" (formula "13") (term "1,0,1"))
               (rule "mul_literals" (formula "13") (term "0,1,0,1"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,1"))
               (rule "polySimp_elimOne" (formula "13") (term "1,1,0,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "13") (term "1,0,0"))
               (rule "mul_literals" (formula "13") (term "0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
               (rule "pullOutSelect" (formula "13") (term "1,2,1,0") (inst "selectSK=arr_5"))
               (rule "applyEq" (formula "14") (term "0,1,1,0") (ifseqformula "1"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "11"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "9") (ifseqformula "6"))
               (rule "andLeft" (formula "9"))
               (rule "notLeft" (formula "10"))
               (rule "andLeft" (formula "9"))
               (rule "notLeft" (formula "10"))
               (rule "andLeft" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "notLeft" (formula "11"))
               (rule "andLeft" (formula "9"))
               (rule "notLeft" (formula "11"))
               (rule "andLeft" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "notLeft" (formula "9"))
               (rule "nonNull" (formula "12") (inst "i=i"))
               (rule "greater_literals" (formula "12") (term "0,1"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "sub_literals" (formula "12") (term "2,1,0,1"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "andLeft" (formula "12"))
               (rule "notLeft" (formula "12"))
               (rule "narrowSelectArrayType" (formula "12") (term "0,0,1,0") (ifseqformula "4") (ifseqformula "17"))
               (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
               (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
               (rule "nonNull" (formula "11") (inst "i=i"))
               (rule "greater_literals" (formula "11") (term "0,1"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "sub_literals" (formula "11") (term "2,1,0,1"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "andLeft" (formula "11"))
               (rule "notLeft" (formula "11"))
               (rule "narrowSelectArrayType" (formula "11") (term "0,0,1,0") (ifseqformula "4") (ifseqformula "17"))
               (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
               (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
               (rule "nonNull" (formula "10") (inst "i=i"))
               (rule "greater_literals" (formula "10") (term "0,1"))
               (builtin "One Step Simplification" (formula "10"))
               (rule "sub_literals" (formula "10") (term "2,1,0,1"))
               (builtin "One Step Simplification" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "notLeft" (formula "10"))
               (rule "narrowSelectArrayType" (formula "10") (term "0,0,1,0") (ifseqformula "4") (ifseqformula "17"))
               (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
               (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
               (rule "nonNull" (formula "9") (inst "i=i"))
               (rule "greater_literals" (formula "9") (term "0,1"))
               (builtin "One Step Simplification" (formula "9"))
               (rule "sub_literals" (formula "9") (term "2,1,0,1"))
               (builtin "One Step Simplification" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "notLeft" (formula "9"))
               (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "17"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "ifthenelse_negated" (formula "1") (term "0"))
               (rule "narrowSelectArrayType" (formula "9") (term "0,0,1,0") (ifseqformula "4") (ifseqformula "17"))
               (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
               (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
               (rule "nnf_imp2or" (formula "12") (term "0"))
               (rule "nnf_imp2or" (formula "11") (term "0"))
               (rule "nnf_imp2or" (formula "10") (term "0"))
               (rule "nnf_imp2or" (formula "9") (term "0"))
               (rule "nnf_notAnd" (formula "12") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
               (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
               (rule "mul_literals" (formula "12") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
               (rule "nnf_notAnd" (formula "11") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
               (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
               (rule "mul_literals" (formula "11") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
               (rule "nnf_notAnd" (formula "10") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
               (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
               (rule "mul_literals" (formula "10") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
               (rule "nnf_notAnd" (formula "9") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
               (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
               (rule "mul_literals" (formula "9") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
               (rule "commute_or_2" (formula "12") (term "0"))
               (rule "commute_or_2" (formula "11") (term "0"))
               (rule "commute_or_2" (formula "10") (term "0"))
               (rule "commute_or_2" (formula "9") (term "0"))
               (rule "commute_or" (formula "12") (term "0,0"))
               (rule "commute_or" (formula "11") (term "0,0"))
               (rule "commute_or" (formula "10") (term "0,0"))
               (rule "commute_or" (formula "9") (term "0,0"))
               (rule "ifthenelse_split" (formula "3") (term "0"))
               (branch "self.sorted.length ≥ 1 TRUE"
                  (rule "replace_known_left" (formula "27") (term "0,1") (ifseqformula "4"))
                  (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "4")))
                  (rule "equalityToSeqGetAndSeqLenRight" (formula "27") (inst "iv=iv"))
                  (rule "lenOfSeqDef" (formula "27") (term "1,1,0,0,1"))
                  (rule "polySimp_elimSub" (formula "27") (term "1,1,1,0,0,1"))
                  (rule "mul_literals" (formula "27") (term "1,1,1,1,0,0,1"))
                  (rule "add_zero_right" (formula "27") (term "1,1,1,0,0,1"))
                  (rule "lenOfSeqDef" (formula "27") (term "0,0"))
                  (rule "eqSymm" (formula "27") (term "0"))
                  (rule "polySimp_elimSub" (formula "27") (term "1,1,0"))
                  (rule "mul_literals" (formula "27") (term "1,1,1,0"))
                  (rule "add_zero_right" (formula "27") (term "1,1,0"))
                  (rule "getOfSeqDef" (formula "27") (term "0,1,0,1"))
                  (rule "castDel" (formula "27") (term "2,0,1,0,1"))
                  (rule "castDel" (formula "27") (term "1,0,1,0,1"))
                  (rule "add_zero_right" (formula "27") (term "0,2,1,0,1,0,1"))
                  (rule "eqSymm" (formula "27") (term "1,0,1"))
                  (rule "polySimp_elimSub" (formula "27") (term "1,1,0,1,1,0,1"))
                  (rule "mul_literals" (formula "27") (term "1,1,1,0,1,1,0,1"))
                  (rule "add_zero_right" (formula "27") (term "1,1,0,1,1,0,1"))
                  (rule "lenOfSeqDef" (formula "27") (term "0,0"))
                  (rule "polySimp_elimSub" (formula "27") (term "1,0,0"))
                  (rule "mul_literals" (formula "27") (term "1,1,0,0"))
                  (rule "add_zero_right" (formula "27") (term "1,0,0"))
                  (rule "getOfSeqDef" (formula "27") (term "0,1,0,1"))
                  (rule "castDel" (formula "27") (term "1,0,1,0,1"))
                  (rule "castDel" (formula "27") (term "2,0,1,0,1"))
                  (rule "add_zero_right" (formula "27") (term "0,2,1,0,1,0,1"))
                  (rule "polySimp_elimSub" (formula "27") (term "1,1,0,0,1,0,1"))
                  (rule "times_zero_2" (formula "27") (term "1,1,1,0,0,1,0,1"))
                  (rule "add_zero_right" (formula "27") (term "1,1,0,0,1,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "27") (term "0,1,1,0,0,1"))
                  (rule "add_zero_right" (formula "27") (term "0,0,1,1,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,1,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "27") (term "0,1,0"))
                  (rule "add_zero_right" (formula "27") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,1,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,1,1,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "27") (term "0,0,0"))
                  (rule "add_zero_right" (formula "27") (term "0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0,1,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,1,1,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,1,0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "27") (term "0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "27") (term "0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,1,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,1,1,0,1"))
                  (rule "polySimp_rightDist" (formula "27") (term "1,1,0,1,1,0,1"))
                  (rule "mul_literals" (formula "27") (term "0,1,1,0,1,1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,1,1,0,1"))
                  (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,1,1,0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "27") (term "0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "27") (term "0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1,0,1"))
                  (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1,0,1"))
                  (rule "mul_literals" (formula "27") (term "0,1,1,0,0,1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1,0,1"))
                  (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1"))
                  (rule "mul_literals" (formula "27") (term "0,1,1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,1,1,1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "27") (term "0,0,1,1,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "27") (term "0,0,1,1,1,0,0,1"))
                  (rule "nnf_imp2or" (formula "27") (term "0,1"))
                  (rule "nnf_notAnd" (formula "27") (term "0,0,1"))
                  (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,1"))
                  (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0,1"))
                  (rule "add_zero_right" (formula "27") (term "0,0,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,1"))
                  (rule "mul_literals" (formula "27") (term "1,0,0,0,1"))
                  (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,1"))
                  (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,1"))
                  (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,1"))
                  (rule "add_zero_left" (formula "27") (term "0,0,1,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,1"))
                  (rule "ifthenelse_split" (formula "1") (term "0"))
                  (branch "self.sorted.<created> = TRUE TRUE"
                     (rule "applyEqReverse" (formula "28") (term "0,0,0,1,1,0,0,1") (ifseqformula "2"))
                     (rule "applyEqReverse" (formula "28") (term "0,0,0,1,0") (ifseqformula "2"))
                     (rule "applyEqReverse" (formula "28") (term "1,1,1,1,0,1") (ifseqformula "2"))
                     (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "2"))
                     (builtin "One Step Simplification" (formula "28"))
                     (rule "allRight" (formula "28") (inst "sk=iv_2"))
                     (rule "orRight" (formula "28"))
                     (rule "orRight" (formula "28"))
                     (rule "applyEqReverse" (formula "30") (term "0,1,1,1,0,1") (ifseqformula "2"))
                     (rule "applyEqReverse" (formula "29") (term "0,1,1") (ifseqformula "2"))
                     (rule "hideAuxiliaryEq" (formula "2"))
                     (rule "eqSymm" (formula "29"))
                     (rule "inEqSimp_leqRight" (formula "27"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "1")))
                     (rule "inEqSimp_geqRight" (formula "28"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_homoInEq0" (formula "29") (term "0,1"))
                     (rule "polySimp_addComm1" (formula "29") (term "0,0,1"))
                     (rule "inEqSimp_homoInEq0" (formula "29") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "29") (term "0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "29") (term "1,0,1"))
                     (rule "polySimp_rightDist" (formula "29") (term "1,0,1"))
                     (rule "mul_literals" (formula "29") (term "0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,1"))
                     (rule "polySimp_elimOne" (formula "29") (term "1,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "29") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "29") (term "1,0,0"))
                     (rule "mul_literals" (formula "29") (term "0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0"))
                     (rule "pullOutSelect" (formula "29") (term "1,0") (inst "selectSK=arr_6"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "eqSymm" (formula "30"))
                     (rule "arrayLengthIsAShort" (formula "16") (term "1,1,0"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "true_left" (formula "16"))
                     (rule "arrayLengthNotNegative" (formula "16") (term "1,1,0"))
                     (rule "arrayLengthIsAShort" (formula "15") (term "1,1,0"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "true_left" (formula "15"))
                     (rule "arrayLengthNotNegative" (formula "15") (term "1,1,0"))
                     (rule "arrayLengthNotNegative" (formula "14") (term "1,1,0"))
                     (rule "arrayLengthIsAShort" (formula "15") (term "1,1,0"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "true_left" (formula "15"))
                     (rule "arrayLengthNotNegative" (formula "13") (term "1,1,0"))
                     (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "6"))
                     (rule "leq_literals" (formula "13") (term "0"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "true_left" (formula "13"))
                     (rule "arrayLengthIsAShort" (formula "13") (term "1,1,0"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "true_left" (formula "13"))
                     (rule "ifthenelse_split" (formula "2") (term "0"))
                     (branch "self.sorted[iv_1].length ≥ 1 TRUE"
                        (rule "replace_known_left" (formula "34") (term "0,0") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "3")))
                        (rule "allLeft" (formula "14") (inst "t=iv_1"))
                        (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "14") (term "1,0") (ifseqformula "6"))
                        (rule "qeq_literals" (formula "14") (term "0,1,0"))
                        (builtin "One Step Simplification" (formula "14"))
                        (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "8"))
                        (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1"))
                        (rule "add_literals" (formula "14") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "14") (term "0,0,1"))
                        (rule "leq_literals" (formula "14") (term "0,1"))
                        (builtin "One Step Simplification" (formula "14"))
                        (rule "notLeft" (formula "14"))
                        (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "25"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "ifthenelse_negated" (formula "1") (term "0"))
                        (rule "narrowSelectArrayType" (formula "35") (term "0") (ifseqformula "9") (ifseqformula "25"))
                        (rule "eqSymm" (formula "35"))
                        (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "21") (ifseqformula "25"))
                        (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "9") (ifseqformula "25"))
                        (rule "ifthenelse_split" (formula "1") (term "0"))
                        (branch "self.sorted[iv_1].<created> = TRUE TRUE"
                           (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "2"))
                           (builtin "One Step Simplification" (formula "36"))
                           (rule "closeTrue" (formula "36"))
                        )
                        (branch "self.sorted[iv_1].<created> = TRUE FALSE"
                           (rule "referencedObjectIsCreatedRight" (formula "25") (ifseqformula "26"))
                           (rule "close" (formula "25") (ifseqformula "9"))
                        )
                     )
                     (branch "self.sorted[iv_1].length ≥ 1 FALSE"
                        (rule "inEqSimp_geqRight" (formula "24"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "3"))
                        (rule "times_zero_2" (formula "3") (term "1,0"))
                        (rule "add_zero_right" (formula "3") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                        (rule "mul_literals" (formula "3") (term "1"))
                        (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "4") (term "0"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "closeFalse" (formula "4"))
                     )
                  )
                  (branch "self.sorted.<created> = TRUE FALSE"
                     (rule "referencedObjectIsCreatedRight" (formula "18") (ifseqformula "19"))
                     (rule "close" (formula "18") (ifseqformula "5"))
                  )
               )
               (branch "self.sorted.length ≥ 1 FALSE"
                  (rule "inEqSimp_geqRight" (formula "17"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_homoInEq1" (formula "4"))
                  (rule "mul_literals" (formula "4") (term "1,0"))
                  (rule "add_zero_right" (formula "4") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                  (rule "mul_literals" (formula "4") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "4") (term "0"))
                  (builtin "One Step Simplification" (formula "4"))
                  (rule "closeFalse" (formula "4"))
               )
            )
         )
         (branch "CUT: array2seq(heapAfter_second, msg) = array2seq(heap, msg) FALSE"
            (rule "equalityToSeqGetAndSeqLenRight" (formula "13") (inst "iv=iv") (userinteraction))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "10") (term "1") (ifseqformula "9"))
            (rule "eqSymm" (formula "18"))
            (rule "eqSymm" (formula "6"))
            (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "17"))
            (builtin "One Step Simplification" (formula "4"))
            (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "15"))
            (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "14")))
            (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,1"))
            (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,1"))
            (rule "mul_literals" (formula "13") (term "0,1,1,0,0,1"))
            (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,1"))
            (rule "array2seqDef" (formula "13") (term "0,0,0") (inst "u=u"))
            (rule "lenOfSeqDef" (formula "13") (term "0,0"))
            (rule "polySimp_elimSub" (formula "13") (term "1,0,0"))
            (rule "mul_literals" (formula "13") (term "1,1,0,0"))
            (rule "add_zero_right" (formula "13") (term "1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0"))
            (rule "add_zero_right" (formula "13") (term "0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,0"))
            (rule "polySimp_elimOne" (formula "13") (term "0,0,0,0"))
            (rule "array2seqDef" (formula "13") (term "0,0,1,0,1") (inst "u=u"))
            (rule "getOfSeqDef" (formula "13") (term "0,1,0,1"))
            (rule "castDel" (formula "13") (term "2,0,1,0,1"))
            (rule "castDel" (formula "13") (term "1,0,1,0,1"))
            (rule "add_zero_right" (formula "13") (term "0,2,1,0,1,0,1"))
            (rule "polySimp_elimSub" (formula "13") (term "1,1,0,0,1,0,1"))
            (rule "times_zero_2" (formula "13") (term "1,1,1,0,0,1,0,1"))
            (rule "add_zero_right" (formula "13") (term "1,1,0,0,1,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,0,1"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,1,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1,0,1"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,1,0,1"))
            (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,1,0,1"))
            (rule "mul_literals" (formula "13") (term "0,1,1,0,0,1,0,1"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,1,0,1"))
            (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,1,0,1"))
            (rule "array2seqDef" (formula "11") (term "0,1") (inst "u=u"))
            (rule "eqSymm" (formula "11"))
            (rule "array2seqDef" (formula "13") (term "0,1,1,0,1") (inst "u=u"))
            (rule "eqSymm" (formula "13") (term "1,0,1"))
            (rule "getOfSeqDef" (formula "13") (term "0,1,0,1"))
            (rule "castDel" (formula "13") (term "1,0,1,0,1"))
            (rule "castDel" (formula "13") (term "2,0,1,0,1"))
            (rule "add_zero_right" (formula "13") (term "0,2,1,0,1,0,1"))
            (rule "polySimp_elimSub" (formula "13") (term "1,1,0,0,1,0,1"))
            (rule "times_zero_2" (formula "13") (term "1,1,1,0,0,1,0,1"))
            (rule "add_zero_right" (formula "13") (term "1,1,0,0,1,0,1"))
            (rule "narrowSelectArrayType" (formula "13") (term "1,0,1,0,1") (ifseqformula "1") (ifseqformula "17"))
            (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,0,1"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,1,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1,0,1"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,1,0,1"))
            (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,1,0,1"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,1,0,1"))
            (rule "mul_literals" (formula "13") (term "0,1,1,0,0,1,0,1"))
            (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,1,0,1"))
            (rule "eqSymm" (formula "13") (term "1,0,1"))
            (rule "array2seqDef" (formula "13") (term "0,1,0") (inst "u=u"))
            (rule "eqSymm" (formula "13") (term "0"))
            (rule "lenOfSeqDef" (formula "13") (term "0,0"))
            (rule "polySimp_elimSub" (formula "13") (term "1,0,0"))
            (rule "times_zero_2" (formula "13") (term "1,1,0,0"))
            (rule "add_zero_right" (formula "13") (term "1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0"))
            (rule "add_zero_right" (formula "13") (term "0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,0"))
            (rule "polySimp_elimOne" (formula "13") (term "0,0,0,0"))
            (builtin "One Step Simplification" (formula "13"))
            (rule "allRight" (formula "13") (inst "sk=iv_0"))
            (rule "impRight" (formula "13"))
            (rule "andLeft" (formula "1"))
            (rule "replace_known_left" (formula "15") (term "0,0,1") (ifseqformula "1"))
            (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "1")))
            (rule "inEqSimp_homoInEq0" (formula "2"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "inEqSimp_homoInEq0" (formula "15") (term "0,0"))
            (rule "eqSymm" (formula "15"))
            (rule "polySimp_addComm1" (formula "15") (term "0,0,1"))
            (rule "inEqSimp_homoInEq0" (formula "15") (term "0,0"))
            (rule "polySimp_addComm1" (formula "15") (term "0,0,0"))
            (rule "eqSymm" (formula "15"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1"))
            (rule "polySimp_rightDist" (formula "2") (term "1"))
            (rule "mul_literals" (formula "2") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
            (rule "polySimp_elimOne" (formula "2") (term "1,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,1"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,0,1"))
            (rule "polySimp_rightDist" (formula "15") (term "1,0,1"))
            (rule "mul_literals" (formula "15") (term "0,1,0,1"))
            (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,1"))
            (rule "polySimp_elimOne" (formula "15") (term "1,1,0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "15") (term "1,0,0"))
            (rule "mul_literals" (formula "15") (term "0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
            (rule "equalityToSeqGetAndSeqLenRight" (formula "20") (inst "iv=iv"))
            (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,1"))
            (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,1"))
            (rule "mul_literals" (formula "20") (term "0,1,1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,1"))
            (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,1"))
            (rule "array2seqDef" (formula "8") (term "1") (inst "u=u"))
            (rule "eqSymm" (formula "8"))
            (rule "narrowSelectArrayType" (formula "8") (term "2,0") (ifseqformula "3") (ifseqformula "19"))
            (rule "array2seqDef" (formula "13") (term "1") (inst "u=u"))
            (rule "eqSymm" (formula "13"))
            (rule "array2seqDef" (formula "2") (term "0,0") (inst "u=u"))
            (rule "lenOfSeqDef" (formula "2") (term "0"))
            (rule "polySimp_elimSub" (formula "2") (term "1,0"))
            (rule "times_zero_2" (formula "2") (term "1,1,0"))
            (rule "add_zero_right" (formula "2") (term "1,0"))
            (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0"))
            (rule "add_zero_right" (formula "2") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
            (rule "polySimp_elimOne" (formula "2") (term "0,0,0"))
            (rule "array2seqDef" (formula "20") (term "0,0,1,0") (inst "u=u"))
            (rule "eqSymm" (formula "20") (term "0"))
            (rule "lenOfSeqDefEQ" (formula "20") (term "0,0") (ifseqformula "13"))
            (rule "polySimp_elimSub" (formula "20") (term "1,0,0"))
            (rule "mul_literals" (formula "20") (term "1,1,0,0"))
            (rule "add_zero_right" (formula "20") (term "1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
            (rule "array2seqDef" (formula "20") (term "0,0,1,1,0,1") (inst "u=u"))
            (rule "eqSymm" (formula "20") (term "1,0,1"))
            (rule "eqSeqDef2" (formula "13") (inst "iv=iv") (ifseqformula "13"))
            (builtin "One Step Simplification" (formula "13"))
            (rule "true_left" (formula "13"))
            (rule "eqSeqDef2" (formula "8") (inst "iv=iv") (ifseqformula "8"))
            (builtin "One Step Simplification" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "pullOutSelect" (formula "13") (term "1,0") (inst "selectSK=arr_4"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "11"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")) (ifInst ""  (formula "7")))
            (rule "applyEqReverse" (formula "14") (term "1,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "narrowSelectArrayType" (formula "13") (term "1,0") (ifseqformula "3") (ifseqformula "17"))
            (builtin "One Step Simplification" (formula "13"))
            (rule "closeTrue" (formula "13"))
         )
      )
      (branch "Case 2"
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "10") (term "1") (ifseqformula "9"))
         (rule "eqSymm" (formula "6"))
         (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "16"))
         (builtin "One Step Simplification" (formula "4"))
         (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "14"))
         (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "13")))
         (rule "replace_known_right" (formula "17") (term "0,1,0") (ifseqformula "14"))
         (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "13")) (ifInst ""  (formula "14")))
         (rule "array2seqDef" (formula "11") (term "0") (inst "u=u"))
         (rule "array2seqDef" (formula "11") (term "0,1") (inst "u=u"))
         (rule "array2seqDef" (formula "6") (term "1") (inst "u=u"))
         (rule "eqSymm" (formula "6"))
         (rule "narrowSelectArrayType" (formula "6") (term "2,0") (ifseqformula "1") (ifseqformula "16"))
         (rule "eqSeqDef2" (formula "6") (inst "iv=iv") (ifseqformula "6"))
         (builtin "One Step Simplification" (formula "6"))
         (rule "true_left" (formula "6"))
         (rule "eqSeqDef2" (formula "10") (inst "iv=iv") (ifseqformula "10"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "true_left" (formula "10"))
         (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "15") (ifseqformula "3"))
         (rule "nonNull" (formula "15") (term "1,0,0,0,0,0") (inst "i=i"))
         (rule "greater_literals" (formula "15") (term "0,1,1,0,0,0,0,0"))
         (builtin "One Step Simplification" (formula "15"))
         (rule "sub_literals" (formula "15") (term "2,1,0,1,1,0,0,0,0,0"))
         (builtin "One Step Simplification" (formula "15"))
         (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,1,0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,1,0,0,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,1,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,1,0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,1,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,1,0,0,0,0,0"))
         (rule "mul_literals" (formula "15") (term "0,1,1,0,0,1,1,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,1,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,1,0,0,0,0,0"))
         (rule "nonNull" (formula "15") (term "1,0,0,0,0,0,0") (inst "i=i"))
         (rule "greater_literals" (formula "15") (term "0,1,1,0,0,0,0,0,0"))
         (builtin "One Step Simplification" (formula "15"))
         (rule "sub_literals" (formula "15") (term "2,1,0,1,1,0,0,0,0,0,0"))
         (builtin "One Step Simplification" (formula "15"))
         (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,1,0,0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,1,0,0,0,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,1,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,1,0,0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,1,0,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,1,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "15") (term "0,1,1,0,0,1,1,0,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,1,0,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,1,0,0,0,0,0,0"))
         (rule "nonNull" (formula "15") (term "1,0,0,0,0,0,0,0") (inst "i=i"))
         (rule "sub_literals" (formula "15") (term "2,1,0,1,1,1,0,0,0,0,0,0,0"))
         (builtin "One Step Simplification" (formula "15"))
         (rule "greater_literals" (formula "15") (term "0,1,1,0,0,0,0,0,0,0"))
         (builtin "One Step Simplification" (formula "15"))
         (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,1,0,0,0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,1,0,0,0,0,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,1,0,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,1,0,0,0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,1,0,0,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,1,0,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "15") (term "0,1,1,0,0,1,1,0,0,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,1,0,0,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,1,0,0,0,0,0,0,0"))
         (rule "nonNull" (formula "15") (term "1,0,0,0,0") (inst "i=i"))
         (rule "sub_literals" (formula "15") (term "2,1,0,1,1,1,0,0,0,0"))
         (builtin "One Step Simplification" (formula "15"))
         (rule "greater_literals" (formula "15") (term "0,1,1,0,0,0,0"))
         (builtin "One Step Simplification" (formula "15"))
         (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,1,0,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,1,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,1,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,1,0,0,0,0"))
         (rule "mul_literals" (formula "15") (term "0,1,1,0,0,1,1,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,1,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,1,0,0,0,0"))
         (rule "pullOutSelect" (formula "15") (term "0,0,1,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_0"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")) (ifInst ""  (formula "3")))
         (rule "applyEqReverse" (formula "16") (term "0,0,1,0,0,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "15") (term "0,0,1") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_0"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")) (ifInst ""  (formula "3")))
         (rule "applyEqReverse" (formula "16") (term "0,0,1") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "15") (term "0,0,0,1,0,0,0,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_b_0"))
         (rule "applyEq" (formula "16") (term "0,1,1,1,0,0,1,1,0,0,0,0,0,0") (ifseqformula "1"))
         (rule "applyEq" (formula "16") (term "1,0,0,1,0,1,1,0,0,0,0,0,0") (ifseqformula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")) (ifInst ""  (formula "3")))
         (rule "applyEqReverse" (formula "16") (term "0,0,0,1,0,0,0,0,0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "16") (term "0,1,1,1,0,0,1,1,0,0,0,0,0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "16") (term "1,0,0,1,0,1,1,0,0,0,0,0,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "15") (term "1,0,0,1,0,1,1,0,0,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_a_0"))
         (rule "applyEq" (formula "16") (term "0,0,0,1,0,0,0,0,0") (ifseqformula "1"))
         (rule "applyEq" (formula "16") (term "0,1,1,1,0,0,1,1,0,0,0,0,0") (ifseqformula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")) (ifInst ""  (formula "3")))
         (rule "applyEqReverse" (formula "16") (term "1,0,0,1,0,1,1,0,0,0,0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "16") (term "0,0,0,1,0,0,0,0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "16") (term "0,1,1,1,0,0,1,1,0,0,0,0,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "15") (term "0,0,1,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_0"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")) (ifInst ""  (formula "3")))
         (rule "applyEqReverse" (formula "16") (term "0,0,1,0,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "15") (term "1,0,0,1,0,1,1,0,0,0,0,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_0"))
         (rule "applyEq" (formula "16") (term "0,0,0,1,0,0,0,0,0,0,0") (ifseqformula "1"))
         (rule "applyEq" (formula "16") (term "0,1,1,1,0,0,1,1,0,0,0,0,0,0,0") (ifseqformula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")) (ifInst ""  (formula "3")))
         (rule "applyEqReverse" (formula "16") (term "1,0,0,1,0,1,1,0,0,0,0,0,0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "16") (term "0,0,0,1,0,0,0,0,0,0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "16") (term "0,1,1,1,0,0,1,1,0,0,0,0,0,0,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "15") (term "0,0,0,1,0,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_msg_0"))
         (rule "applyEq" (formula "16") (term "1,0,0,1,0,1,1,0,0,0,0") (ifseqformula "1"))
         (rule "applyEq" (formula "16") (term "0,1,1,1,0,0,1,1,0,0,0,0") (ifseqformula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")) (ifInst ""  (formula "3")))
         (rule "applyEqReverse" (formula "16") (term "0,0,0,1,0,0,0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "16") (term "1,0,0,1,0,1,1,0,0,0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "16") (term "0,1,1,1,0,0,1,1,0,0,0,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "15") (term "0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_0"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")) (ifInst ""  (formula "3")))
         (rule "applyEqReverse" (formula "16") (term "0,0,1,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "15") (term "0,0,0,0,0,0,0,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_0"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")) (ifInst ""  (formula "3")))
         (rule "applyEqReverse" (formula "16") (term "0,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "nnf_imp2or" (formula "15") (term "0,1,1,0,0,0,0,0"))
         (rule "nnf_imp2or" (formula "15") (term "0,1,1,0,0,0,0,0,0"))
         (rule "nnf_imp2or" (formula "15") (term "0,1,1,0,0,0,0"))
         (rule "nnf_imp2or" (formula "15") (term "0,1,1,0,0,0,0,0,0,0"))
         (rule "nnf_notAnd" (formula "15") (term "0,0,1,1,0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,1,1,0,0,0,0"))
         (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0,1,1,0,0,0,0"))
         (rule "add_zero_right" (formula "15") (term "0,0,0,0,0,1,1,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,1,1,0,0,0,0"))
         (rule "mul_literals" (formula "15") (term "1,0,0,0,1,1,0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,1,1,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,1,1,0,0,0,0"))
         (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,1,1,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,1,1,0,0,0,0"))
         (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,1,1,0,0,0,0"))
         (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,1,1,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,1,1,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,1,1,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,1,1,0,0,0,0"))
         (rule "nnf_notAnd" (formula "15") (term "0,0,1,1,0,0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,1,1,0,0,0,0,0"))
         (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0,1,1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "15") (term "0,0,0,0,0,1,1,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,1,1,0,0,0,0,0"))
         (rule "mul_literals" (formula "15") (term "1,0,0,0,1,1,0,0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,1,1,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,1,1,0,0,0,0,0"))
         (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,1,1,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,1,1,0,0,0,0,0"))
         (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,1,1,0,0,0,0,0"))
         (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,1,1,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,1,1,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,1,1,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,1,1,0,0,0,0,0"))
         (rule "nnf_notAnd" (formula "15") (term "0,0,1,1,0,0,0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,1,1,0,0,0,0,0,0"))
         (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0,1,1,0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "15") (term "0,0,0,0,0,1,1,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,1,1,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "15") (term "1,0,0,0,1,1,0,0,0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,1,1,0,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,1,1,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,1,1,0,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,1,1,0,0,0,0,0,0"))
         (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,1,1,0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,1,1,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,1,1,0,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,1,1,0,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,1,1,0,0,0,0,0,0"))
         (rule "nnf_notAnd" (formula "15") (term "0,0,1,1,0,0,0,0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,1,1,0,0,0,0,0,0,0"))
         (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0,1,1,0,0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "15") (term "0,0,0,0,0,1,1,0,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,1,1,0,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "15") (term "1,0,0,0,1,1,0,0,0,0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,1,1,0,0,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,1,1,0,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,1,1,0,0,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,1,1,0,0,0,0,0,0,0"))
         (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,1,1,0,0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,1,1,0,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,1,1,0,0,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,1,1,0,0,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,1,1,0,0,0,0,0,0,0"))
         (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "6") (ifseqformula "3"))
         (rule "andLeft" (formula "6"))
         (rule "notLeft" (formula "7"))
         (rule "andLeft" (formula "6"))
         (rule "notLeft" (formula "7"))
         (rule "andLeft" (formula "6"))
         (rule "notLeft" (formula "7"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "notLeft" (formula "8"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "notLeft" (formula "6"))
         (rule "replace_known_right" (formula "23") (term "0,0,0,0,0,0,0,0,0") (ifseqformula "14"))
         (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "15")) (ifInst ""  (formula "16")) (ifInst ""  (formula "17")) (ifInst ""  (formula "18")))
         (rule "nonNull" (formula "9") (inst "i=i"))
         (rule "sub_literals" (formula "9") (term "2,1,0,1,1"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "greater_literals" (formula "9") (term "0,1"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "notLeft" (formula "9"))
         (rule "replace_known_right" (formula "24") (term "0,0,1") (ifseqformula "14"))
         (builtin "One Step Simplification" (formula "24"))
         (rule "narrowSelectArrayType" (formula "9") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "14"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
         (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "8") (inst "i=i"))
         (rule "greater_literals" (formula "8") (term "0,1"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "sub_literals" (formula "8") (term "2,1,0,1"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "andLeft" (formula "8"))
         (rule "notLeft" (formula "8"))
         (rule "replace_known_right" (formula "25") (term "0,0,1,0") (ifseqformula "14"))
         (builtin "One Step Simplification" (formula "25"))
         (rule "narrowSelectArrayType" (formula "8") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "14"))
         (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
         (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "7") (inst "i=i"))
         (rule "greater_literals" (formula "7") (term "0,1"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "sub_literals" (formula "7") (term "2,1,0,1"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "andLeft" (formula "7"))
         (rule "notLeft" (formula "7"))
         (rule "replace_known_right" (formula "26") (term "0,0,1,0,0") (ifseqformula "14"))
         (builtin "One Step Simplification" (formula "26"))
         (rule "narrowSelectArrayType" (formula "7") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "14"))
         (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "6") (inst "i=i"))
         (rule "greater_literals" (formula "6") (term "0,1"))
         (builtin "One Step Simplification" (formula "6"))
         (rule "sub_literals" (formula "6") (term "2,1,0,1"))
         (builtin "One Step Simplification" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "notLeft" (formula "6"))
         (rule "replace_known_right" (formula "27") (term "0,0,0,0,0") (ifseqformula "14"))
         (builtin "One Step Simplification" (formula "27"))
         (rule "narrowSelectArrayType" (formula "6") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "14"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
         (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
         (rule "nnf_imp2or" (formula "9") (term "0"))
         (rule "nnf_imp2or" (formula "8") (term "0"))
         (rule "nnf_imp2or" (formula "7") (term "0"))
         (rule "nnf_imp2or" (formula "6") (term "0"))
         (rule "nnf_notAnd" (formula "9") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
         (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
         (rule "mul_literals" (formula "9") (term "1,0,0,0"))
         (rule "nnf_notAnd" (formula "8") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
         (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
         (rule "mul_literals" (formula "8") (term "1,0,0,0"))
         (rule "nnf_notAnd" (formula "7") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
         (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
         (rule "mul_literals" (formula "7") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "6") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
         (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "6") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
         (rule "mul_literals" (formula "6") (term "1,0,0,0"))
         (rule "commute_or_2" (formula "9") (term "0"))
         (rule "commute_or_2" (formula "8") (term "0"))
         (rule "commute_or_2" (formula "7") (term "0"))
         (rule "commute_or_2" (formula "6") (term "0"))
         (rule "andRight" (formula "27"))
         (branch
            (rule "commute_or" (formula "9") (term "0,0"))
            (rule "commute_or" (formula "8") (term "0,0"))
            (rule "commute_or" (formula "7") (term "0,0"))
            (rule "commute_or" (formula "6") (term "0,0"))
            (rule "andRight" (formula "27"))
            (branch
               (rule "andRight" (formula "27"))
               (branch
                  (rule "allRight" (formula "27") (inst "sk=i_3"))
                  (rule "orRight" (formula "27"))
                  (rule "orRight" (formula "27"))
                  (rule "notRight" (formula "29"))
                  (rule "inEqSimp_leqRight" (formula "28"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_geqRight" (formula "29"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_3"))
                  (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "15"))
                  (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "18")))
                  (rule "ifthenelse_negated" (formula "3") (term "0"))
                  (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "14") (ifseqformula "18"))
                  (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "5") (ifseqformula "18"))
                  (rule "applyEqRigid" (formula "3") (term "1") (ifseqformula "4"))
                  (rule "ifEqualsNull" (formula "3"))
                  (rule "cnf_rightDist" (formula "3"))
                  (rule "andLeft" (formula "3"))
                  (rule "commute_or" (formula "3"))
                  (rule "cnf_rightDist" (formula "4"))
                  (rule "andLeft" (formula "4"))
                  (rule "commute_or" (formula "4"))
                  (rule "cnf_rightDist" (formula "3"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "commute_or" (formula "3"))
                  (rule "allLeft" (formula "12") (inst "t=i_3"))
                  (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "12") (term "1,0") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "12") (term "0,1,0"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
                  (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "12") (term "0,0,1"))
                  (rule "leq_literals" (formula "12") (term "0,1"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "notLeft" (formula "12"))
                  (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "20"))
                  (builtin "One Step Simplification" (formula "5"))
                  (rule "replace_known_right" (formula "3") (term "1") (ifseqformula "20"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "notLeft" (formula "3"))
                  (rule "referencedObjectIsCreatedRight" (formula "19") (ifseqformula "21"))
                  (rule "close" (formula "19") (ifseqformula "6"))
               )
               (branch
                  (rule "allRight" (formula "27") (inst "sk=i_2"))
                  (rule "orRight" (formula "27"))
                  (rule "orRight" (formula "27"))
                  (rule "notRight" (formula "29"))
                  (rule "inEqSimp_leqRight" (formula "28"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_geqRight" (formula "29"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_2"))
                  (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "15"))
                  (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "19")))
                  (rule "ifthenelse_negated" (formula "3") (term "0"))
                  (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "14") (ifseqformula "19"))
                  (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "5") (ifseqformula "19"))
                  (rule "applyEqRigid" (formula "3") (term "1") (ifseqformula "4"))
                  (rule "ifEqualsNull" (formula "3"))
                  (rule "cnf_rightDist" (formula "3"))
                  (rule "andLeft" (formula "3"))
                  (rule "commute_or" (formula "3"))
                  (rule "cnf_rightDist" (formula "4"))
                  (rule "andLeft" (formula "4"))
                  (rule "commute_or" (formula "4"))
                  (rule "cnf_rightDist" (formula "3"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "commute_or" (formula "3"))
                  (rule "allLeft" (formula "13") (inst "t=i_2"))
                  (rule "inEqSimp_commuteGeq" (formula "13") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "13") (term "1,0") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "13") (term "0,1,0"))
                  (builtin "One Step Simplification" (formula "13"))
                  (rule "inEqSimp_contradInEq1" (formula "13") (term "1") (ifseqformula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "13") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1"))
                  (rule "add_literals" (formula "13") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "13") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "13") (term "0,0,1"))
                  (rule "leq_literals" (formula "13") (term "0,1"))
                  (builtin "One Step Simplification" (formula "13"))
                  (rule "notLeft" (formula "13"))
                  (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "20"))
                  (builtin "One Step Simplification" (formula "5"))
                  (rule "replace_known_right" (formula "3") (term "1") (ifseqformula "20"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "notLeft" (formula "3"))
                  (rule "referencedObjectIsCreatedRight" (formula "19") (ifseqformula "22"))
                  (rule "close" (formula "19") (ifseqformula "6"))
               )
            )
            (branch
               (rule "allRight" (formula "27") (inst "sk=i_1"))
               (rule "orRight" (formula "27"))
               (rule "orRight" (formula "27"))
               (rule "notRight" (formula "29"))
               (rule "inEqSimp_geqRight" (formula "29"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_leqRight" (formula "29"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
               (rule "polySimp_elimOne" (formula "2") (term "0"))
               (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_1"))
               (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "15"))
               (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "20")))
               (rule "ifthenelse_negated" (formula "3") (term "0"))
               (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "14") (ifseqformula "20"))
               (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "5") (ifseqformula "20"))
               (rule "applyEqRigid" (formula "3") (term "1") (ifseqformula "4"))
               (rule "ifEqualsNull" (formula "3"))
               (rule "cnf_rightDist" (formula "3"))
               (rule "andLeft" (formula "3"))
               (rule "commute_or" (formula "3"))
               (rule "cnf_rightDist" (formula "4"))
               (rule "andLeft" (formula "4"))
               (rule "commute_or" (formula "4"))
               (rule "cnf_rightDist" (formula "3"))
               (builtin "One Step Simplification" (formula "3"))
               (rule "commute_or" (formula "3"))
               (rule "allLeft" (formula "14") (inst "t=i_1"))
               (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "14") (term "1,0") (ifseqformula "1"))
               (rule "qeq_literals" (formula "14") (term "0,1,0"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "2"))
               (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1"))
               (rule "add_literals" (formula "14") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "14") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "14") (term "0,0,1"))
               (rule "leq_literals" (formula "14") (term "0,1"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "notLeft" (formula "14"))
               (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "20"))
               (builtin "One Step Simplification" (formula "5"))
               (rule "replace_known_right" (formula "3") (term "1") (ifseqformula "20"))
               (builtin "One Step Simplification" (formula "3"))
               (rule "notLeft" (formula "3"))
               (rule "referencedObjectIsCreatedRight" (formula "19") (ifseqformula "23"))
               (rule "close" (formula "19") (ifseqformula "6"))
            )
         )
         (branch
            (rule "allRight" (formula "27") (inst "sk=i_0"))
            (rule "orRight" (formula "27"))
            (rule "orRight" (formula "27"))
            (rule "notRight" (formula "29"))
            (rule "inEqSimp_leqRight" (formula "28"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_geqRight" (formula "29"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_0"))
            (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "15"))
            (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "21")))
            (rule "ifthenelse_negated" (formula "3") (term "0"))
            (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "14") (ifseqformula "21"))
            (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "5") (ifseqformula "21"))
            (rule "applyEqRigid" (formula "3") (term "1") (ifseqformula "4"))
            (rule "ifEqualsNull" (formula "3"))
            (rule "commute_or" (formula "13") (term "0,0"))
            (rule "commute_or" (formula "12") (term "0,0"))
            (rule "commute_or" (formula "11") (term "0,0"))
            (rule "commute_or" (formula "10") (term "0,0"))
            (rule "cnf_rightDist" (formula "3"))
            (rule "andLeft" (formula "3"))
            (rule "commute_or" (formula "3"))
            (rule "cnf_rightDist" (formula "4"))
            (rule "andLeft" (formula "4"))
            (rule "commute_or" (formula "4"))
            (rule "cnf_rightDist" (formula "3"))
            (builtin "One Step Simplification" (formula "3"))
            (rule "commute_or" (formula "3"))
            (rule "allLeft" (formula "15") (inst "t=i_0"))
            (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "1"))
            (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
            (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "15") (term "0,0,1"))
            (rule "leq_literals" (formula "15") (term "0,1"))
            (builtin "One Step Simplification" (formula "15"))
            (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "2"))
            (rule "qeq_literals" (formula "15") (term "0,1"))
            (builtin "One Step Simplification" (formula "15"))
            (rule "notLeft" (formula "15"))
            (rule "replace_known_right" (formula "3") (term "1") (ifseqformula "20"))
            (builtin "One Step Simplification" (formula "3"))
            (rule "notLeft" (formula "3"))
            (rule "referencedObjectIsCreatedRight" (formula "19") (ifseqformula "24"))
            (rule "close" (formula "19") (ifseqformula "6"))
         )
      )
   )
   (branch "Case 2"
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "10") (term "1") (ifseqformula "9"))
      (rule "allRight" (formula "17") (inst "sk=f_0"))
      (rule "allRight" (formula "17") (inst "sk=o_0"))
      (rule "orRight" (formula "17"))
      (rule "eqSymm" (formula "6"))
      (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "16"))
      (builtin "One Step Simplification" (formula "4"))
      (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "14"))
      (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "13")))
      (rule "array2seqDef" (formula "11") (term "0") (inst "u=u"))
      (rule "array2seqDef" (formula "11") (term "0,1") (inst "u=u"))
      (rule "array2seqDef" (formula "6") (term "1") (inst "u=u"))
      (rule "eqSymm" (formula "6"))
      (rule "narrowSelectArrayType" (formula "6") (term "2,0") (ifseqformula "1") (ifseqformula "16"))
      (rule "eqSeqDef2" (formula "6") (inst "iv=iv") (ifseqformula "6"))
      (builtin "One Step Simplification" (formula "6"))
      (rule "true_left" (formula "6"))
      (rule "eqSeqDef2" (formula "10") (inst "iv=iv") (ifseqformula "10"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "true_left" (formula "10"))
      (rule "pullOutSelect" (formula "16") (term "0") (inst "selectSK=f_0_0"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
      (rule "applyEqReverse" (formula "17") (term "0") (ifseqformula "1"))
      (builtin "One Step Simplification" (formula "17"))
      (rule "closeTrue" (formula "17"))
   )
)
(branch "Exceptional Post (second)"
   (builtin "One Step Simplification" (formula "9"))
   (builtin "One Step Simplification" (formula "12"))
   (rule "andLeft" (formula "9"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "10") (term "1,0") (ifseqformula "9"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "12"))
   (rule "notLeft" (formula "10"))
   (rule "close" (formula "14") (ifseqformula "13"))
)
(branch "Pre (second)"
   (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "9")) (ifInst ""  (formula "1")) (ifInst ""  (formula "9")))
   (rule "translateJavaAddInt" (formula "10") (term "1,0,0") (userinteraction))
   (builtin "Evaluate Query" (formula "10") (term "1,1,0,0") (newnames "b,callee,queryResult,res_byteArrayToInt"))
   (rule "replaceKnownQuery_verif_utils_MessageTools_byteArrayToInt(heap,msg)_2_0" (formula "11") (term "1,1,0,0") (userinteraction))
   (rule "replaceKnownQuery_verif_utils_MessageTools_byteArrayToInt(heap,msg)_2_0" (formula "11") (term "0,1,0") (userinteraction))
   (rule "notLeft" (formula "1") (userinteraction))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "queryResult") (userinteraction))
   (builtin "Use Operation Contract" (formula "8") (newnames "heapBefore_byteArrayToInt,result_1,exc_1") (contract "verif.utils.MessageTools[verif.utils.MessageTools::byteArrayToInt([B)].JML normal_behavior operation contract.0"))
   (branch "Case 1"
      (builtin "One Step Simplification" (formula "8"))
      (rule "assignment" (formula "9") (term "1") (userinteraction))
      (rule "methodCallEmpty" (formula "9") (term "1,1") (userinteraction))
      (rule "emptyModality" (formula "9") (term "1,1") (userinteraction))
      (builtin "One Step Simplification" (formula "9"))
      (rule "notRight" (formula "9") (userinteraction))
      (rule "applyEqReverse" (formula "12") (term "1,1,0,0") (ifseqformula "1") (userinteraction))
      (rule "applyEqReverse" (formula "12") (term "0,1,0") (ifseqformula "1") (userinteraction))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "10"))
      (rule "applyEq" (formula "10") (term "0,1") (ifseqformula "7") (userinteraction))
      (rule "defOfmConcat" (formula "10") (term "0,1") (userinteraction))
      (rule "cut" (inst "cutFormula=inInt(seqLen(int2seq(length(byte[][]::select(heap,
                                             self,
                                             verif.selectvoting.system.core.MixServer::$sorted)))))") (userinteraction))
      (branch "CUT: inInt(int2seq(self.sorted.length).length) TRUE"
         (rule "lenNonNegative" (formula "11") (term "0,0,0,1") (userinteraction))
         (rule "leq_to_geq" (formula "11") (userinteraction))
         (rule "lenInverse2" (formula "12") (term "1") (ifseqformula "11") (ifseqformula "1") (userinteraction))
         (rule "equalityToSeqGetAndSeqLenLeft" (formula "8") (inst "iv=iv") (userinteraction))
         (rule "andLeft" (formula "8") (userinteraction))
         (rule "lenOfArray2seq" (formula "8") (term "0") (userinteraction))
         (rule "defOfmConcat" (formula "8") (term "0,1") (userinteraction))
         (rule "lenOfSeqConcat" (formula "8") (term "1") (userinteraction))
         (rule "lenOfSeqConcat" (formula "8") (term "1,1") (userinteraction))
         (rule "polySimp_addAssoc" (formula "8") (term "1") (userinteraction))
         (rule "defOfint2seq" (formula "8") (term "0,0,0,1") (userinteraction))
         (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "translateJavaMod" (formula "7") (term "0,0,0,1,1,0,0,0,1"))
         (rule "translateJavaMod" (formula "7") (term "0,0,1,1,1,0,0,0,1"))
         (rule "translateJavaCastByte" (formula "7") (term "0,0,1,0,0,0,1"))
         (rule "translateJavaCastByte" (formula "7") (term "0,0,0,0,0,1"))
         (rule "translateJavaDivInt" (formula "7") (term "0,0,0,0,1,1,0,0,0,1"))
         (rule "translateJavaCastByte" (formula "7") (term "0,1,1,1,0,0,0,1"))
         (rule "translateJavaDivInt" (formula "7") (term "0,0,0,1,0,0,0,1"))
         (rule "translateJavaMod" (formula "7") (term "0,0,0,0,0,1"))
         (rule "translateJavaCastByte" (formula "7") (term "0,0,1,1,0,0,0,1"))
         (rule "translateJavaDivInt" (formula "7") (term "0,0,0,0,1,0,0,0,1"))
         (rule "translateJavaDivInt" (formula "7") (term "0,0,0,0,0,0,1"))
         (rule "translateJavaMod" (formula "7") (term "0,0,1,0,0,0,1"))
         (rule "translateJavaDivInt" (formula "7") (term "0,0,0,0,0,0,0,1"))
         (rule "translateJavaDivInt" (formula "7") (term "0,0,0,0,0,0,0,0,1"))
         (rule "eqSymm" (formula "9"))
         (rule "eqSymm" (formula "13"))
         (rule "eqSymm" (formula "8") (term "1,0"))
         (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "15"))
         (builtin "One Step Simplification" (formula "5"))
         (rule "replace_known_left" (formula "16") (term "1") (ifseqformula "5"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "polySimp_homoEq" (formula "7"))
         (rule "polySimp_addComm1" (formula "7") (term "0"))
         (rule "polySimp_addComm1" (formula "7") (term "0,0"))
         (rule "polySimp_addComm0" (formula "7") (term "0,0,0"))
         (rule "polySimp_addComm1" (formula "7") (term "0,0"))
         (rule "polySimp_addComm1" (formula "7") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
         (rule "lenOfSeqConcat" (formula "7") (term "1,0"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "polySimp_addAssoc" (formula "7") (term "0"))
         (rule "polySimp_addComm1" (formula "7") (term "0,0"))
         (rule "polySimp_addComm1" (formula "7") (term "0,0,0"))
         (rule "polySimp_addComm0" (formula "7") (term "0,0,0,0"))
         (rule "lenOfSeqConcat" (formula "7") (term "1,0"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "polySimp_addAssoc" (formula "7") (term "0"))
         (rule "polySimp_addComm1" (formula "7") (term "0,0"))
         (rule "polySimp_addComm1" (formula "7") (term "0,0,0"))
         (rule "polySimp_addComm1" (formula "7") (term "0,0,0,0"))
         (rule "add_literals" (formula "7") (term "0,0,0,0,0"))
         (rule "lenOfSeqConcat" (formula "7") (term "1,0"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "add_literals" (formula "7") (term "1,0"))
         (rule "polySimp_addComm1" (formula "7") (term "0"))
         (rule "polySimp_addComm1" (formula "7") (term "0,0"))
         (rule "polySimp_addComm1" (formula "7") (term "0,0,0"))
         (rule "add_literals" (formula "7") (term "0,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
         (rule "applyEq" (formula "12") (term "0") (ifseqformula "13"))
         (rule "replace_known_left" (formula "16") (term "1") (ifseqformula "12"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "inEqSimp_geqRight" (formula "16"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0"))
         (rule "applyEq" (formula "9") (term "0,0,1,0") (ifseqformula "10"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "true_left" (formula "9"))
         (rule "applyEq" (formula "13") (term "1") (ifseqformula "2"))
         (rule "applyEq" (formula "12") (term "0") (ifseqformula "2"))
         (rule "applyEq" (formula "1") (term "0,1,0,0") (ifseqformula "2"))
         (rule "applyEq" (formula "8") (term "1,0,0") (ifseqformula "13"))
         (rule "polySimp_addComm1" (formula "8") (term "0,0"))
         (rule "polySimp_sepPosMonomial" (formula "8"))
         (rule "polySimp_mulComm0" (formula "8") (term "1"))
         (rule "polySimp_rightDist" (formula "8") (term "1"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
         (rule "polySimp_elimOne" (formula "8") (term "1,1"))
         (rule "polySimp_rightDist" (formula "8") (term "0,1"))
         (rule "mul_literals" (formula "8") (term "0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1"))
         (rule "polySimp_rightDist" (formula "1") (term "1"))
         (rule "mul_literals" (formula "1") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1"))
         (rule "array2seqDef" (formula "9") (term "1") (inst "u=u"))
         (rule "eqSymm" (formula "9"))
         (rule "narrowSelectArrayType" (formula "9") (term "2,0") (ifseqformula "3") (ifseqformula "15"))
         (rule "eqSeqDef2" (formula "9") (inst "iv=iv") (ifseqformula "9"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "true_left" (formula "9"))
         (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "9") (ifseqformula "5"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "notLeft" (formula "11"))
         (rule "andLeft" (formula "9"))
         (rule "notLeft" (formula "11"))
         (rule "andLeft" (formula "9"))
         (rule "notLeft" (formula "11"))
         (rule "notLeft" (formula "10"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "notLeft" (formula "9"))
         (rule "nonNull" (formula "12") (inst "i=i"))
         (rule "greater_literals" (formula "12") (term "0,1"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "sub_literals" (formula "12") (term "2,1,0,1"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "andLeft" (formula "12"))
         (rule "notLeft" (formula "12"))
         (rule "narrowSelectArrayType" (formula "12") (term "0,0,1,0") (ifseqformula "3") (ifseqformula "16"))
         (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
         (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "11") (inst "i=i"))
         (rule "sub_literals" (formula "11") (term "2,1,0,1,1"))
         (builtin "One Step Simplification" (formula "11"))
         (rule "greater_literals" (formula "11") (term "0,1"))
         (builtin "One Step Simplification" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "notLeft" (formula "11"))
         (rule "narrowSelectArrayType" (formula "11") (term "0,0,1,0") (ifseqformula "3") (ifseqformula "16"))
         (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "10") (inst "i=i"))
         (rule "greater_literals" (formula "10") (term "0,1"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "sub_literals" (formula "10") (term "2,1,0,1"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "andLeft" (formula "10"))
         (rule "notLeft" (formula "10"))
         (rule "narrowSelectArrayType" (formula "10") (term "0,0,1,0") (ifseqformula "3") (ifseqformula "16"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "9") (inst "i=i"))
         (rule "sub_literals" (formula "9") (term "2,1,0,1,1"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "greater_literals" (formula "9") (term "0,1"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "notLeft" (formula "9"))
         (rule "narrowSelectArrayType" (formula "9") (term "0,0,1,0") (ifseqformula "3") (ifseqformula "16"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
         (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
         (rule "nnf_imp2or" (formula "12") (term "0"))
         (rule "nnf_imp2or" (formula "11") (term "0"))
         (rule "nnf_imp2or" (formula "10") (term "0"))
         (rule "nnf_imp2or" (formula "9") (term "0"))
         (rule "nnf_notAnd" (formula "12") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
         (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
         (rule "mul_literals" (formula "12") (term "1,0,0,0"))
         (rule "nnf_notAnd" (formula "11") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
         (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
         (rule "mul_literals" (formula "11") (term "1,0,0,0"))
         (rule "nnf_notAnd" (formula "10") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
         (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
         (rule "mul_literals" (formula "10") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "9") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
         (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
         (rule "mul_literals" (formula "9") (term "1,0,0,0"))
         (rule "commute_or_2" (formula "12") (term "0"))
         (rule "commute_or_2" (formula "11") (term "0"))
         (rule "commute_or_2" (formula "10") (term "0"))
         (rule "commute_or_2" (formula "9") (term "0"))
         (rule "commute_or" (formula "12") (term "0,0"))
         (rule "commute_or" (formula "11") (term "0,0"))
         (rule "commute_or" (formula "10") (term "0,0"))
         (rule "commute_or" (formula "9") (term "0,0"))
         (rule "arrayLengthIsAShort" (formula "15") (term "0,0,0"))
         (builtin "One Step Simplification" (formula "15"))
         (rule "true_left" (formula "15"))
         (rule "arrayLengthNotNegative" (formula "15") (term "0,0,0"))
         (rule "lenNonNegative" (formula "8") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "8"))
         (rule "applyEq" (formula "8") (term "0") (ifseqformula "9"))
         (rule "inEqSimp_sepPosMonomial1" (formula "8"))
         (rule "polySimp_mulComm0" (formula "8") (term "1"))
         (rule "polySimp_rightDist" (formula "8") (term "1"))
         (rule "mul_literals" (formula "8") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
         (rule "polySimp_elimOne" (formula "8") (term "1,1"))
         (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "8"))
         (rule "andLeft" (formula "1"))
         (rule "inEqSimp_homoInEq1" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0"))
         (rule "polySimp_addComm1" (formula "1") (term "0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
         (rule "add_literals" (formula "1") (term "1,1,0"))
         (rule "times_zero_1" (formula "1") (term "1,0"))
         (rule "add_zero_right" (formula "1") (term "0"))
         (rule "leq_literals" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "CUT: inInt(int2seq(self.sorted.length).length) FALSE"
         (builtin "One Step Simplification" (formula "11"))
         (rule "closeTrue" (formula "11"))
      )
   )
   (branch "Exceptional Post (byteArrayToInt)"
      (builtin "One Step Simplification" (formula "8"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "10"))
      (rule "notLeft" (formula "8"))
      (rule "close" (formula "11") (ifseqformula "10"))
   )
   (branch "Case 3"
      (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "10")) (ifInst ""  (formula "1")) (ifInst ""  (formula "10")))
      (rule "andRight" (formula "8") (userinteraction))
      (branch "Case 1"
         (rule "equalityToSeqGetAndSeqLenLeft" (formula "6") (inst "iv=iv") (userinteraction))
         (rule "andLeft" (formula "6") (userinteraction))
         (rule "defOfmConcat" (formula "6") (term "0,1") (userinteraction))
         (rule "lenOfSeqConcat" (formula "6") (term "1") (userinteraction))
         (rule "lenOfSeqConcat" (formula "6") (term "1,1") (userinteraction))
         (rule "lenOfArray2seq" (formula "6") (term "0") (userinteraction))
         (rule "defOfint2seq" (formula "6") (term "0,0,1") (userinteraction))
         (rule "translateJavaCastByte" (formula "6") (term "0,0,1,0,0,1"))
         (rule "translateJavaMod" (formula "6") (term "0,0,1,1,1,0,0,1"))
         (rule "translateJavaDivInt" (formula "6") (term "0,0,0,0,1,1,0,0,1"))
         (rule "translateJavaCastByte" (formula "6") (term "0,0,0,0,1"))
         (rule "translateJavaDivInt" (formula "6") (term "0,0,0,0,1,0,0,1"))
         (rule "translateJavaCastByte" (formula "6") (term "0,1,1,1,0,0,1"))
         (rule "translateJavaCastByte" (formula "6") (term "0,0,1,1,0,0,1"))
         (rule "translateJavaMod" (formula "6") (term "0,0,0,0,1"))
         (rule "translateJavaMod" (formula "6") (term "0,0,1,0,0,1"))
         (rule "translateJavaMod" (formula "6") (term "0,0,1,1,0,0,1"))
         (rule "translateJavaDivInt" (formula "6") (term "0,0,0,0,0,0,0,1"))
         (rule "translateJavaDivInt" (formula "6") (term "0,0,0,1,0,0,1"))
         (rule "translateJavaDivInt" (formula "6") (term "0,0,0,0,0,1"))
         (rule "translateJavaDivInt" (formula "6") (term "0,0,0,0,0,0,1"))
         (rule "eqSymm" (formula "8"))
         (rule "eqSymm" (formula "7") (term "1,0"))
         (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "12"))
         (builtin "One Step Simplification" (formula "4"))
         (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "4"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "polySimp_addComm0" (formula "6") (term "1"))
         (rule "polySimp_homoEq" (formula "6"))
         (rule "polySimp_addComm1" (formula "6") (term "0"))
         (rule "polySimp_addComm1" (formula "6") (term "0,0"))
         (rule "polySimp_addComm0" (formula "6") (term "0,0,0"))
         (rule "inEqSimp_geqRight" (formula "10"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
         (rule "lenOfSeqConcat" (formula "7") (term "1,0"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "polySimp_addAssoc" (formula "7") (term "0"))
         (rule "polySimp_addComm1" (formula "7") (term "0,0"))
         (rule "polySimp_addComm1" (formula "7") (term "0,0,0"))
         (rule "polySimp_addComm0" (formula "7") (term "0,0,0,0"))
         (rule "lenOfSeqConcat" (formula "7") (term "1,0"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "polySimp_addAssoc" (formula "7") (term "0"))
         (rule "polySimp_addComm1" (formula "7") (term "0,0"))
         (rule "polySimp_addComm1" (formula "7") (term "0,0,0"))
         (rule "polySimp_addComm1" (formula "7") (term "0,0,0,0"))
         (rule "add_literals" (formula "7") (term "0,0,0,0,0"))
         (rule "lenOfSeqConcat" (formula "7") (term "1,0"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "add_literals" (formula "7") (term "1,0"))
         (rule "polySimp_addComm1" (formula "7") (term "0"))
         (rule "polySimp_addComm1" (formula "7") (term "0,0"))
         (rule "polySimp_addComm1" (formula "7") (term "0,0,0"))
         (rule "add_literals" (formula "7") (term "0,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
         (rule "applyEq" (formula "8") (term "0,0,1,0") (ifseqformula "9"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "true_left" (formula "8"))
         (rule "polySimp_sepPosMonomial" (formula "7"))
         (rule "polySimp_mulComm0" (formula "7") (term "1"))
         (rule "polySimp_rightDist" (formula "7") (term "1"))
         (rule "polySimp_rightDist" (formula "7") (term "0,1"))
         (rule "mul_literals" (formula "7") (term "0,0,1"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1"))
         (rule "polySimp_elimOne" (formula "7") (term "1,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "array2seqDef" (formula "8") (term "1") (inst "u=u"))
         (rule "eqSymm" (formula "8"))
         (rule "narrowSelectArrayType" (formula "8") (term "2,0") (ifseqformula "2") (ifseqformula "11"))
         (rule "eqSeqDef2" (formula "8") (inst "iv=iv") (ifseqformula "8"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "true_left" (formula "8"))
         (rule "commute_and" (formula "11"))
         (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "8") (ifseqformula "4"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "8"))
         (rule "notLeft" (formula "10"))
         (rule "andLeft" (formula "8"))
         (rule "notLeft" (formula "10"))
         (rule "andLeft" (formula "8"))
         (rule "notLeft" (formula "10"))
         (rule "notLeft" (formula "9"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "8"))
         (rule "notLeft" (formula "8"))
         (rule "nonNull" (formula "11") (inst "i=i"))
         (rule "greater_literals" (formula "11") (term "0,1"))
         (builtin "One Step Simplification" (formula "11"))
         (rule "sub_literals" (formula "11") (term "2,1,0,1"))
         (builtin "One Step Simplification" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "notLeft" (formula "11"))
         (rule "narrowSelectArrayType" (formula "11") (term "0,0,1,0") (ifseqformula "2") (ifseqformula "12"))
         (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "10") (inst "i=i"))
         (rule "greater_literals" (formula "10") (term "0,1"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "sub_literals" (formula "10") (term "2,1,0,1"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "andLeft" (formula "10"))
         (rule "notLeft" (formula "10"))
         (rule "narrowSelectArrayType" (formula "10") (term "0,0,1,0") (ifseqformula "2") (ifseqformula "12"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "9") (inst "i=i"))
         (rule "greater_literals" (formula "9") (term "0,1"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "sub_literals" (formula "9") (term "2,1,0,1"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "notLeft" (formula "9"))
         (rule "narrowSelectArrayType" (formula "9") (term "0,0,1,0") (ifseqformula "2") (ifseqformula "12"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
         (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "8") (inst "i=i"))
         (rule "greater_literals" (formula "8") (term "0,1"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "sub_literals" (formula "8") (term "2,1,0,1"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "andLeft" (formula "8"))
         (rule "notLeft" (formula "8"))
         (rule "narrowSelectArrayType" (formula "8") (term "0,0,1,0") (ifseqformula "2") (ifseqformula "12"))
         (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
         (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
         (rule "nnf_imp2or" (formula "11") (term "0"))
         (rule "nnf_imp2or" (formula "10") (term "0"))
         (rule "nnf_imp2or" (formula "9") (term "0"))
         (rule "nnf_imp2or" (formula "8") (term "0"))
         (rule "nnf_notAnd" (formula "11") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
         (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
         (rule "mul_literals" (formula "11") (term "1,0,0,0"))
         (rule "nnf_notAnd" (formula "10") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
         (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
         (rule "mul_literals" (formula "10") (term "1,0,0,0"))
         (rule "nnf_notAnd" (formula "9") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
         (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
         (rule "mul_literals" (formula "9") (term "1,0,0,0"))
         (rule "nnf_notAnd" (formula "8") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
         (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
         (rule "mul_literals" (formula "8") (term "1,0,0,0"))
         (rule "commute_or_2" (formula "11") (term "0"))
         (rule "commute_or_2" (formula "10") (term "0"))
         (rule "commute_or_2" (formula "9") (term "0"))
         (rule "commute_or_2" (formula "8") (term "0"))
         (rule "commute_or" (formula "11") (term "0,0"))
         (rule "commute_or" (formula "10") (term "0,0"))
         (rule "commute_or" (formula "9") (term "0,0"))
         (rule "commute_or" (formula "8") (term "0,0"))
         (rule "lenNonNegative" (formula "7") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "7"))
         (rule "applyEq" (formula "7") (term "0") (ifseqformula "8"))
         (rule "inEqSimp_sepNegMonomial1" (formula "7"))
         (rule "polySimp_mulLiterals" (formula "7") (term "0"))
         (rule "polySimp_elimOne" (formula "7") (term "0"))
         (rule "lenNonNegative" (formula "8") (term "0,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "8"))
         (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "7"))
         (rule "times_zero_1" (formula "8") (term "0,0"))
         (rule "add_zero_left" (formula "8") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "8"))
         (rule "mul_literals" (formula "8") (term "1"))
         (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "1"))
         (rule "qeq_literals" (formula "8") (term "0"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "closeFalse" (formula "8"))
      )
      (branch "Case 2"
         (rule "eqSymm" (formula "6"))
         (rule "replace_known_right" (formula "4") (term "1") (ifseqformula "8"))
         (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "10")))
         (rule "closeFalse" (formula "4"))
      )
   )
)
)

}
