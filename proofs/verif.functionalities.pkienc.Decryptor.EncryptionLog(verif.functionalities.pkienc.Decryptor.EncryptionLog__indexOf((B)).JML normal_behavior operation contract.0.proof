\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sat Jul 15 08:56:45 CEST 2017
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=\\#begexpand_inByte\\#end,\\#begexpand_inChar\\#end,\\#begexpand_inShort\\#end,\\#begexpand_inInt\\#end,\\#begexpand_inLong\\#end
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=5000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Sat Jul 15 08:56:45 CEST 2017
name=verif.functionalities.pkienc.Decryptor.EncryptionLog[verif.functionalities.pkienc.Decryptor.EncryptionLog\\:\\:indexOf([B)].JML normal_behavior operation contract.0
contract=verif.functionalities.pkienc.Decryptor.EncryptionLog[verif.functionalities.pkienc.Decryptor.EncryptionLog\\:\\:indexOf([B)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mihai" ) (keyVersion "0814267c8a184b1e7da1309b7a9875095ca72975"))
(keyLog "1" (keyUser "mihai" ) (keyVersion "0814267c8a184b1e7da1309b7a9875095ca72975"))
(keyLog "2" (keyUser "mihai" ) (keyVersion "0814267c8a184b1e7da1309b7a9875095ca72975"))
(keyLog "3" (keyUser "mihai" ) (keyVersion "0814267c8a184b1e7da1309b7a9875095ca72975"))
(keyLog "4" (keyUser "mihai" ) (keyVersion "0814267c8a184b1e7da1309b7a9875095ca72975"))
(keyLog "5" (keyUser "mihai" ) (keyVersion "0814267c8a184b1e7da1309b7a9875095ca72975"))

(autoModeTime "134772")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "cipher,self,result,exc,heapAtPre,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "5"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "assignment" (formula "9") (term "1") (userinteraction))
(rule "methodBodyExpand" (formula "9") (term "1,1") (newnames "heapBefore_indexOf,savedHeapBefore_indexOf,_cipherBefore_indexOf") (userinteraction))
(rule "for_to_while" (formula "9") (term "1,1,1") (inst "#outerLabel=_label1") (inst "#innerLabel=_label0") (userinteraction))
(rule "variableDeclarationAssign" (formula "9") (term "1,1,1") (userinteraction))
(builtin "One Step Simplification" (formula "9"))
(rule "variableDeclaration" (formula "9") (term "1") (newnames "i") (userinteraction))
(rule "assignment" (formula "9") (term "1") (userinteraction))
(rule "elim_double_block_3" (formula "9") (term "1,1") (userinteraction))
(builtin "One Step Simplification" (formula "9"))
(builtin "Loop Invariant" (formula "9") (newnames "variant,b,heapBefore_LOOP,iBefore_LOOP,i_0,heap_After_LOOP,anon_heap_LOOP,o,f"))
(branch "Invariant Initially Valid"
   (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "1")))
   (rule "leq_literals" (formula "9") (term "0,0"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "eqSymm" (formula "9") (term "0,1,0,1"))
   (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "8"))
   (builtin "One Step Simplification" (formula "4"))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1"))
   (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0,1"))
   (rule "add_zero_right" (formula "9") (term "0,0,1,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "9") (term "0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,1"))
   (rule "mul_literals" (formula "9") (term "1,1,0,0,1"))
   (rule "array2seqDef" (formula "9") (term "0,0,1,0,1") (inst "u=u"))
   (rule "array2seqDef" (formula "9") (term "1,0,1,0,1") (inst "u=u"))
   (rule "narrowSelectArrayType" (formula "9") (term "2,1,0,1,0,1") (ifseqformula "1") (ifseqformula "8"))
   (rule "eqSeqDef" (formula "9") (term "0,1,0,1") (inst "iv=iv"))
   (rule "lenOfSeqDef" (formula "9") (term "0,0,0,1,0,1"))
   (rule "eqSymm" (formula "9") (term "0,0,1,0,1"))
   (rule "polySimp_elimSub" (formula "9") (term "1,1,0,0,1,0,1"))
   (rule "times_zero_2" (formula "9") (term "1,1,1,0,0,1,0,1"))
   (rule "add_zero_right" (formula "9") (term "1,1,0,0,1,0,1"))
   (rule "getOfSeqDef" (formula "9") (term "1,1,0,1,0,1,0,1"))
   (rule "castDel" (formula "9") (term "1,1,1,0,1,0,1,0,1"))
   (rule "castDel" (formula "9") (term "2,1,1,0,1,0,1,0,1"))
   (rule "add_zero_right" (formula "9") (term "0,2,1,1,1,0,1,0,1,0,1"))
   (rule "polySimp_elimSub" (formula "9") (term "1,1,0,1,1,0,1,0,1,0,1"))
   (rule "times_zero_2" (formula "9") (term "1,1,1,0,1,1,0,1,0,1,0,1"))
   (rule "add_zero_right" (formula "9") (term "1,1,0,1,1,0,1,0,1,0,1"))
   (rule "lenOfSeqDef" (formula "9") (term "1,1,0,0,1,0,1,0,1"))
   (rule "polySimp_elimSub" (formula "9") (term "1,1,1,0,0,1,0,1,0,1"))
   (rule "times_zero_2" (formula "9") (term "1,1,1,1,0,0,1,0,1,0,1"))
   (rule "add_zero_right" (formula "9") (term "1,1,1,0,0,1,0,1,0,1"))
   (rule "getOfSeqDef" (formula "9") (term "0,1,0,1,0,1,0,1"))
   (rule "castDel" (formula "9") (term "1,0,1,0,1,0,1,0,1"))
   (rule "castDel" (formula "9") (term "2,0,1,0,1,0,1,0,1"))
   (rule "add_zero_right" (formula "9") (term "0,2,1,0,1,0,1,0,1,0,1"))
   (rule "polySimp_elimSub" (formula "9") (term "1,1,0,0,1,0,1,0,1,0,1"))
   (rule "times_zero_2" (formula "9") (term "1,1,1,0,0,1,0,1,0,1,0,1"))
   (rule "add_zero_right" (formula "9") (term "1,1,0,0,1,0,1,0,1,0,1"))
   (rule "lenOfSeqDef" (formula "9") (term "0,0,0,1,0,1"))
   (rule "eqSymm" (formula "9") (term "0,0,1,0,1"))
   (rule "polySimp_elimSub" (formula "9") (term "1,1,0,0,1,0,1"))
   (rule "times_zero_2" (formula "9") (term "1,1,1,0,0,1,0,1"))
   (rule "add_zero_right" (formula "9") (term "1,1,0,0,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,1,1,0,1,0,1,0,1"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,1,1,0,1,0,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "0,1,1,0,0,1,0,1,0,1"))
   (rule "add_zero_right" (formula "9") (term "0,0,1,1,0,0,1,0,1,0,1"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,1,0,0,1,0,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,0,1,0,1,0,1"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1,0,1,0,1,0,1"))
   (rule "polySimp_addComm1" (formula "9") (term "0,1,0,0,1,0,1,0,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "0,1,0,0,1,0,1"))
   (rule "add_zero_right" (formula "9") (term "0,0,1,0,0,1,0,1"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0,0,1,0,1"))
   (rule "add_zero_right" (formula "9") (term "0,0,0,0,0,1,0,1"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,0,1,0,1"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1,0,1,0,1"))
   (rule "polySimp_addComm1" (formula "9") (term "0,1,0,0,1,0,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1,0,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,1,1,0,1,0,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1,0,1,0,1,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,1,1,0,1,0,1,0,1"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,1,1,0,1,0,1,0,1"))
   (rule "polySimp_rightDist" (formula "9") (term "1,1,0,1,1,0,1,0,1,0,1"))
   (rule "mul_literals" (formula "9") (term "0,1,1,0,1,1,0,1,0,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,1,1,0,1,0,1,0,1"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,1,1,0,1,0,1,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "1,0,0,1,0,1,0,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,0,1,0,1,0,1,0,1"))
   (rule "polySimp_elimOne" (formula "9") (term "0,1,0,0,1,0,1,0,1,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,1,0,0,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "9") (term "0,0,1,0,0,1,0,1"))
   (rule "polySimp_elimOne" (formula "9") (term "0,0,1,0,0,1,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0,0,0,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0,0,0,1,0,1"))
   (rule "polySimp_elimOne" (formula "9") (term "0,0,0,0,0,1,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "1,0,0,1,0,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,0,1,0,1,0,1"))
   (rule "polySimp_elimOne" (formula "9") (term "0,1,0,0,1,0,1,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0,1,0,0,1,0,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0,1,0,0,1,0,1,0,1"))
   (rule "polySimp_elimOne" (formula "9") (term "0,0,0,1,0,0,1,0,1,0,1"))
   (rule "nnf_imp2or" (formula "9") (term "0,1"))
   (rule "nnf_notAnd" (formula "9") (term "1,0,1"))
   (rule "nnf_notAnd" (formula "9") (term "0,0,1"))
   (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,1"))
   (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0,1"))
   (rule "add_zero_right" (formula "9") (term "0,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,1"))
   (rule "mul_literals" (formula "9") (term "1,0,0,0,1"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "inEqSimp_geqRight" (formula "9"))
   (rule "times_zero_1" (formula "1") (term "1,0,0"))
   (rule "add_zero_right" (formula "1") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
   (rule "mul_literals" (formula "1") (term "1"))
   (rule "Class_invariant_axiom_for_verif_functionalities_pkienc_Decryptor_EncryptionLog" (formula "7") (ifseqformula "4"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "eqSymm" (formula "9"))
   (rule "nonNull" (formula "8") (inst "i=i_1"))
   (rule "sub_literals" (formula "8") (term "2,1,0,1,1"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "greater_literals" (formula "8") (term "0,1"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "notLeft" (formula "8"))
   (rule "narrowSelectArrayType" (formula "8") (term "0,0,1,0") (ifseqformula "2") (ifseqformula "10"))
   (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
   (rule "applyEq" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "9"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
   (rule "nonNull" (formula "7") (inst "i=i_1"))
   (rule "sub_literals" (formula "7") (term "2,1,0,1,1"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "greater_literals" (formula "7") (term "0,1"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "notLeft" (formula "7"))
   (rule "narrowSelectArrayType" (formula "7") (term "0,0,1,0") (ifseqformula "2") (ifseqformula "10"))
   (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
   (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
   (rule "nnf_imp2or" (formula "8") (term "0"))
   (rule "nnf_imp2or" (formula "7") (term "0"))
   (rule "nnf_notAnd" (formula "8") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
   (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
   (rule "mul_literals" (formula "8") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "7") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
   (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
   (rule "mul_literals" (formula "7") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
   (rule "commute_or_2" (formula "8") (term "0"))
   (rule "commute_or_2" (formula "7") (term "0"))
   (rule "commute_or" (formula "8") (term "0,0"))
   (rule "commute_or" (formula "7") (term "0,0"))
   (rule "arrayLengthNotNegative" (formula "1") (term "0"))
   (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
   (rule "qeq_literals" (formula "1") (term "0"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
(branch "Body Preserves Invariant"
   (builtin "One Step Simplification" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "variableDeclarationAssign" (formula "13") (term "0,1,1,1,1") (userinteraction))
   (rule "variableDeclaration" (formula "13") (term "0,1,1,1,1") (newnames "b_1") (userinteraction))
   (rule "compound_less_than_comparison_2" (formula "13") (term "0,1,1,1,1") (inst "#v1=x_1") (inst "#v0=x") (userinteraction))
   (rule "variableDeclarationAssign" (formula "13") (term "0,1,1,1,1") (userinteraction))
   (rule "variableDeclaration" (formula "13") (term "0,1,1,1,1") (newnames "x") (userinteraction))
   (rule "assignment" (formula "13") (term "0,1,1,1,1") (userinteraction))
   (rule "variableDeclarationAssign" (formula "13") (term "1,0,1,1,1,1") (userinteraction))
   (rule "variableDeclaration" (formula "13") (term "1,0,1,1,1,1") (newnames "x_1") (userinteraction))
   (rule "eval_order_access2" (formula "13") (term "1,0,1,1,1,1") (inst "#v0=x_arr_arr") (userinteraction))
   (rule "variableDeclarationAssign" (formula "13") (term "1,0,1,1,1,1") (userinteraction))
   (rule "variableDeclaration" (formula "13") (term "1,0,1,1,1,1") (newnames "x_arr_arr") (userinteraction))
   (rule "assignment_read_attribute_this" (formula "13") (term "1,0,1,1,1,1") (userinteraction))
   (rule "assignment_read_length" (formula "13") (term "1,1,0,1,1,1,1") (userinteraction))
   (branch "Normal Execution (x_arr_arr != null)"
      (builtin "One Step Simplification" (formula "13"))
      (builtin "One Step Simplification" (formula "14"))
      (rule "less_than_comparison_simple" (formula "14") (term "1,0") (userinteraction))
      (rule "methodCallEmpty" (formula "14") (term "1,1,0") (userinteraction))
      (rule "impRight" (formula "14") (userinteraction))
      (rule "emptyModality" (formula "1") (term "1,1") (userinteraction))
      (builtin "One Step Simplification" (formula "1"))
      (rule "variableDeclarationAssign" (formula "15") (term "1") (userinteraction))
      (rule "variableDeclaration" (formula "15") (term "1") (newnames "rtrn_1") (userinteraction))
      (rule "assignment" (formula "15") (term "1") (userinteraction))
      (rule "variableDeclaration" (formula "15") (term "1,1") (newnames "returnExpr_1") (userinteraction))
      (rule "variableDeclarationAssign" (formula "15") (term "1,1") (userinteraction))
      (rule "variableDeclaration" (formula "15") (term "1,1") (newnames "exc_2") (userinteraction))
      (rule "assignment" (formula "15") (term "1,1") (userinteraction))
      (rule "variableDeclaration" (formula "15") (term "1,1,1") (newnames "thrownExc_1") (userinteraction))
      (rule "ifUnfold" (formula "15") (term "1,1,1") (inst "#boolv=x") (userinteraction))
      (rule "variableDeclaration" (formula "15") (term "1,1,1") (newnames "x_7") (userinteraction))
      (rule "compound_less_than_comparison_2" (formula "15") (term "1,1,1") (inst "#v1=x_9") (inst "#v0=x_8") (userinteraction))
      (rule "variableDeclarationAssign" (formula "15") (term "1,1,1") (userinteraction))
      (rule "variableDeclaration" (formula "15") (term "1,1,1") (newnames "x_8") (userinteraction))
      (rule "assignment" (formula "15") (term "1,1,1") (userinteraction))
      (rule "variableDeclarationAssign" (formula "15") (term "1,1,1,1") (userinteraction))
      (rule "variableDeclaration" (formula "15") (term "1,1,1,1") (newnames "x_9") (userinteraction))
      (rule "eval_order_access2" (formula "15") (term "1,1,1,1") (inst "#v0=x_arr_arr") (userinteraction))
      (rule "variableDeclarationAssign" (formula "15") (term "1,1,1,1") (userinteraction))
      (rule "variableDeclaration" (formula "15") (term "1,1,1,1") (newnames "x_arr_arr_3") (userinteraction))
      (rule "assignment_read_attribute_this" (formula "15") (term "1,1,1,1") (userinteraction))
      (rule "assignment_read_length" (formula "15") (term "1,1,1,1,1") (userinteraction))
      (branch "Normal Execution (x_arr_arr_3 != null)"
         (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "14")))
         (builtin "One Step Simplification" (formula "16"))
         (rule "less_than_comparison_simple" (formula "16") (term "1") (userinteraction))
         (rule "if" (formula "16") (term "1,1") (userinteraction))
         (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "1")))
         (rule "false_right" (formula "15") (userinteraction))
         (rule "ifUnfold" (formula "15") (term "1") (inst "#boolv=x") (userinteraction))
         (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_10") (userinteraction))
         (rule "methodCallWithAssignmentUnfoldArguments" (formula "15") (term "1") (userinteraction))
         (rule "variableDeclarationAssign" (formula "15") (term "1") (userinteraction))
         (rule "variableDeclaration" (formula "15") (term "1") (newnames "var_2") (userinteraction))
         (rule "assignment" (formula "15") (term "1") (userinteraction))
         (rule "variableDeclarationAssign" (formula "15") (term "1,1") (userinteraction))
         (rule "variableDeclaration" (formula "15") (term "1,1") (newnames "var_3") (userinteraction))
         (rule "eval_order_array_access4" (formula "15") (term "1,1") (inst "#v0=x_arr_arr") (userinteraction))
         (rule "variableDeclarationAssign" (formula "15") (term "1,1") (userinteraction))
         (rule "variableDeclaration" (formula "15") (term "1,1") (newnames "x_arr_arr_4") (userinteraction))
         (rule "assignment_read_attribute_this" (formula "15") (term "1,1") (userinteraction))
         (rule "assignment_array2" (formula "15") (term "1,1,1") (userinteraction))
         (branch "Normal Execution (x_arr_arr_4 != null)"
            (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "14")))
            (builtin "One Step Simplification" (formula "16"))
            (builtin "Use Operation Contract" (formula "16") (newnames "heapBefore_equal_0,result_1,exc_3") (contract "verif.utils.MessageTools[verif.utils.MessageTools::equal([B,[B)].JML normal_behavior operation contract.0"))
            (branch "Post (equal)"
               (builtin "One Step Simplification" (formula "12"))
               (rule "orRight" (formula "16"))
               (rule "andLeft" (formula "12"))
               (rule "andLeft" (formula "13"))
               (rule "eqSymm" (formula "13") (userinteraction))
               (builtin "One Step Simplification" (formula "19"))
               (rule "assignment" (formula "19") (term "1") (userinteraction))
               (rule "blockEmpty" (formula "19") (term "1,1") (userinteraction))
               (rule "if" (formula "19") (term "1,1") (userinteraction))
               (builtin "One Step Simplification" (formula "19"))
               (rule "ifthenelse_split_for" (formula "19") (userinteraction))
               (branch "result_1 = TRUE TRUE"
                  (rule "elim_double_block_2" (formula "20") (term "1") (userinteraction))
                  (rule "elim_double_block_2" (formula "20") (term "1") (userinteraction))
                  (rule "assignment" (formula "20") (term "1") (userinteraction))
                  (rule "assignment" (formula "20") (term "1,1") (userinteraction))
                  (rule "blockBreakNoLabel" (formula "20") (term "1,1,1") (userinteraction))
                  (rule "blockBreakLabel" (formula "20") (term "1,1,1") (userinteraction))
                  (rule "blockEmpty" (formula "20") (term "1,1,1") (userinteraction))
                  (rule "tryEmpty" (formula "20") (term "1,1,1") (userinteraction))
                  (rule "methodCallEmpty" (formula "20") (term "1,1,1") (userinteraction))
                  (rule "emptyModality" (formula "20") (term "1,1,1") (userinteraction))
                  (builtin "One Step Simplification" (formula "20"))
                  (rule "blockReturn" (formula "20") (term "1") (userinteraction))
                  (rule "methodCallReturn" (formula "20") (term "1") (userinteraction))
                  (rule "assignment" (formula "20") (term "1") (userinteraction))
                  (rule "methodCallEmpty" (formula "20") (term "1,1") (userinteraction))
                  (rule "tryEmpty" (formula "20") (term "1,1") (userinteraction))
                  (rule "emptyModality" (formula "20") (term "1,1") (userinteraction))
                  (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "10")) (ifInst ""  (formula "2")) (ifInst ""  (formula "8")))
                  (rule "andRight" (formula "20") (userinteraction))
                  (branch "Case 1"
                     (rule "translateJavaUnaryMinusInt" (formula "20") (term "1,0,0") (userinteraction))
                     (rule "impRight" (formula "20") (userinteraction))
                     (rule "notLeft" (formula "1") (userinteraction))
                     (rule "applyEq" (formula "14") (term "1") (ifseqformula "1") (userinteraction))
                     (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "21")))
                     (rule "closeFalse" (formula "14") (userinteraction))
                  )
                  (branch "Case 2"
                     (rule "translateJavaUnaryMinusInt" (formula "20") (term "1,0"))
                     (rule "neg_literal" (formula "20") (term "1,0"))
                     (rule "impRight" (formula "20"))
                     (rule "allRight" (formula "21") (inst "sk=i_1"))
                     (rule "impRight" (formula "21"))
                     (rule "notRight" (formula "22"))
                     (rule "andLeft" (formula "2"))
                     (rule "eqSymm" (formula "16") (term "0,1,0"))
                     (rule "eqSymm" (formula "18") (term "0,0"))
                     (rule "eqSymm" (formula "1"))
                     (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "20"))
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "inEqSimp_ltRight" (formula "23"))
                     (rule "mul_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_leqRight" (formula "23"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "8"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "8") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "5"))
                     (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "5") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "16"))
                     (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "16"))
                     (rule "inEqSimp_commuteLeq" (formula "4"))
                     (rule "applyEq" (formula "16") (term "1") (ifseqformula "6"))
                     (rule "applyEq" (formula "19") (term "1") (ifseqformula "7"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "6"))
                     (rule "qeq_literals" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
               )
               (branch "result_1 = TRUE FALSE"
                  (rule "apply_eq_boolean" (formula "13") (term "1") (ifseqformula "19") (userinteraction))
                  (builtin "One Step Simplification" (formula "13"))
                  (rule "notLeft" (formula "13") (userinteraction))
                  (rule "blockEmpty" (formula "20") (term "1") (userinteraction))
                  (rule "unusedLabel" (formula "20") (term "1") (userinteraction))
                  (rule "postincrement" (formula "20") (term "1") (userinteraction))
                  (rule "compound_int_cast_expression" (formula "20") (term "1") (inst "#v=x") (userinteraction))
                  (rule "variableDeclarationAssign" (formula "20") (term "1") (userinteraction))
                  (rule "variableDeclaration" (formula "20") (term "1") (newnames "x_11") (userinteraction))
                  (rule "remove_parentheses_right" (formula "20") (term "1") (userinteraction))
                  (rule "assignmentAdditionInt" (formula "20") (term "1") (userinteraction))
                  (rule "widening_identity_cast_5" (formula "20") (term "1,1") (userinteraction))
                  (rule "assignment" (formula "20") (term "1,1") (userinteraction))
                  (rule "tryEmpty" (formula "20") (term "1,1,1") (userinteraction))
                  (rule "methodCallEmpty" (formula "20") (term "1,1,1") (userinteraction))
                  (rule "emptyModality" (formula "20") (term "1,1,1") (userinteraction))
                  (rule "blockThrow" (formula "20") (term "1,0,1,1,1") (userinteraction))
                  (builtin "One Step Simplification" (formula "20"))
                  (rule "andRight" (formula "20") (userinteraction))
                  (branch "Case 1"
                     (rule "andRight" (formula "20") (userinteraction))
                     (branch "Case 1"
                        (rule "translateJavaAddInt" (formula "20") (term "1,0"))
                        (rule "translateJavaAddInt" (formula "20") (term "0,1"))
                        (rule "eqSymm" (formula "11") (term "0,1,0"))
                        (rule "eqSymm" (formula "13"))
                        (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "15"))
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "polySimp_addComm0" (formula "20") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "20") (term "0,1"))
                        (rule "inEqSimp_leqRight" (formula "17"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "inEqSimp_ltRight" (formula "18"))
                        (rule "times_zero_1" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "11"))
                        (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "11"))
                        (rule "inEqSimp_commuteLeq" (formula "19") (term "1"))
                        (rule "inEqSimp_homoInEq0" (formula "19") (term "0"))
                        (rule "times_zero_2" (formula "19") (term "1,0,0"))
                        (rule "add_zero_right" (formula "19") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "mul_literals" (formula "2") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                        (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "2"))
                        (builtin "One Step Simplification" (formula "19"))
                        (rule "inEqSimp_geqRight" (formula "19"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                        (rule "polySimp_elimOne" (formula "4") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "2") (term "0"))
                        (builtin "One Step Simplification" (formula "2"))
                        (rule "closeFalse" (formula "2"))
                     )
                     (branch "Case 2"
                        (rule "allRight" (formula "20") (inst "sk=j_1") (userinteraction))
                        (rule "impRight" (formula "20") (userinteraction))
                        (rule "notRight" (formula "21") (userinteraction))
                        (rule "andLeft" (formula "2") (userinteraction))
                        (rule "instAll" (formula "2") (term "1") (ifseqformula "14") (userinteraction))
                        (rule "impLeft" (formula "2") (userinteraction))
                        (branch "Case 1"
                           (rule "translateJavaAddInt" (formula "3") (term "1"))
                           (rule "eqSymm" (formula "17"))
                           (rule "eqSymm" (formula "14") (term "0,1,0"))
                           (rule "eqSymm" (formula "1"))
                           (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "19"))
                           (builtin "One Step Simplification" (formula "8"))
                           (rule "replace_known_left" (formula "16") (term "0") (ifseqformula "2"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "polySimp_addComm0" (formula "3") (term "1"))
                           (rule "inEqSimp_leqRight" (formula "21"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_ltRight" (formula "22"))
                           (rule "times_zero_1" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_ltRight" (formula "18"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "7"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "7") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "6"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,0,0"))
                           (rule "mul_literals" (formula "6") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "6") (term "0,0"))
                           (rule "add_literals" (formula "6") (term "0,0,0"))
                           (rule "add_zero_left" (formula "6") (term "0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "15"))
                           (rule "inEqSimp_commuteLeq" (formula "15"))
                           (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "5"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "mul_literals" (formula "3") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                           (rule "polySimp_elimOne" (formula "7") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1"))
                           (rule "polySimp_elimOne" (formula "6") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "3"))
                           (rule "inEqSimp_homoInEq0" (formula "14") (term "0"))
                           (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0"))
                           (rule "add_literals" (formula "14") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "14") (term "1,0,0"))
                           (rule "add_literals" (formula "14") (term "0,0"))
                           (rule "qeq_literals" (formula "14") (term "0"))
                           (builtin "One Step Simplification" (formula "14"))
                           (rule "true_left" (formula "14"))
                           (rule "array2seqDef" (formula "16") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "16"))
                           (rule "narrowSelectArrayType" (formula "16") (term "2,0") (ifseqformula "7") (ifseqformula "18"))
                           (rule "array2seqDef" (formula "14") (term "0,0,1,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "14") (term "1,0,1,0") (inst "u=u"))
                           (rule "narrowSelectArrayType" (formula "14") (term "2,1,0,1,0") (ifseqformula "7") (ifseqformula "18"))
                           (rule "array2seqDef" (formula "4") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "4"))
                           (rule "narrowSelectArrayType" (formula "4") (term "2,0") (ifseqformula "7") (ifseqformula "18"))
                           (rule "applyEq" (formula "14") (term "1,0,1,0") (ifseqformula "4"))
                           (rule "applyEq" (formula "16") (term "0") (ifseqformula "4"))
                           (rule "array2seqDef" (formula "16") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "16"))
                           (rule "array2seqDef" (formula "4") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "4"))
                           (rule "array2seqDef" (formula "14") (term "1,0,1,0") (inst "u=u"))
                           (rule "applyEq" (formula "14") (term "1,0,1,0") (ifseqformula "4"))
                           (rule "equalityToSeqGetAndSeqLenRight" (formula "16") (inst "iv=iv"))
                           (rule "getOfSeqDef" (formula "16") (term "0,1,0,1"))
                           (rule "castDel" (formula "16") (term "1,0,1,0,1"))
                           (rule "castDel" (formula "16") (term "2,0,1,0,1"))
                           (rule "add_zero_right" (formula "16") (term "0,2,1,0,1,0,1"))
                           (rule "polySimp_elimSub" (formula "16") (term "1,1,0,0,1,0,1"))
                           (rule "times_zero_2" (formula "16") (term "1,1,1,0,0,1,0,1"))
                           (rule "add_zero_right" (formula "16") (term "1,1,0,0,1,0,1"))
                           (rule "lenOfSeqDef" (formula "16") (term "1,1,0,0,1"))
                           (rule "polySimp_elimSub" (formula "16") (term "1,1,1,0,0,1"))
                           (rule "times_zero_2" (formula "16") (term "1,1,1,1,0,0,1"))
                           (rule "add_zero_right" (formula "16") (term "1,1,1,0,0,1"))
                           (rule "lenOfSeqDef" (formula "16") (term "0,0"))
                           (rule "polySimp_elimSub" (formula "16") (term "1,0,0"))
                           (rule "times_zero_2" (formula "16") (term "1,1,0,0"))
                           (rule "add_zero_right" (formula "16") (term "1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,1,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "16") (term "0,1,1,0,0,1"))
                           (rule "add_zero_right" (formula "16") (term "0,0,1,1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0"))
                           (rule "add_zero_right" (formula "16") (term "0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,1,0,1"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,1,0,1"))
                           (rule "mul_literals" (formula "16") (term "0,1,1,0,0,1,0,1"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,1,0,1"))
                           (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,1,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "16") (term "0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,1"))
                           (rule "mul_literals" (formula "16") (term "0,1,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,1,1,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "0,0,1,1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "16") (term "0,0,1,1,1,0,0,1"))
                           (rule "eqSeqDef" (formula "4") (inst "iv=iv"))
                           (rule "andLeft" (formula "4"))
                           (rule "getOfSeqDef" (formula "5") (term "1,1,0"))
                           (rule "castDel" (formula "5") (term "1,1,1,0"))
                           (rule "castDel" (formula "5") (term "2,1,1,0"))
                           (rule "add_zero_right" (formula "5") (term "0,2,1,1,1,0"))
                           (rule "polySimp_elimSub" (formula "5") (term "1,1,0,1,1,0"))
                           (rule "times_zero_2" (formula "5") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "5") (term "1,1,0,1,1,0"))
                           (rule "getOfSeqDef" (formula "5") (term "0,1,0"))
                           (rule "castDel" (formula "5") (term "1,0,1,0"))
                           (rule "castDel" (formula "5") (term "2,0,1,0"))
                           (rule "add_zero_right" (formula "5") (term "0,2,1,0,1,0"))
                           (rule "polySimp_elimSub" (formula "5") (term "1,1,0,0,1,0"))
                           (rule "times_zero_2" (formula "5") (term "1,1,1,0,0,1,0"))
                           (rule "add_zero_right" (formula "5") (term "1,1,0,0,1,0"))
                           (rule "lenOfSeqDef" (formula "4") (term "0"))
                           (rule "eqSymm" (formula "4"))
                           (rule "polySimp_elimSub" (formula "4") (term "1,1"))
                           (rule "times_zero_2" (formula "4") (term "1,1,1"))
                           (rule "add_zero_right" (formula "4") (term "1,1"))
                           (rule "lenOfSeqDef" (formula "5") (term "1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "5") (term "1,1,1,0,0"))
                           (rule "times_zero_2" (formula "5") (term "1,1,1,1,0,0"))
                           (rule "add_zero_right" (formula "5") (term "1,1,1,0,0"))
                           (rule "lenOfSeqDef" (formula "4") (term "0"))
                           (rule "eqSymm" (formula "4"))
                           (rule "polySimp_elimSub" (formula "4") (term "1,1"))
                           (rule "times_zero_2" (formula "4") (term "1,1,1"))
                           (rule "add_zero_right" (formula "4") (term "1,1"))
                           (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "5") (term "0,1,1,0,0"))
                           (rule "add_zero_right" (formula "5") (term "0,0,1,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0"))
                           (rule "add_zero_right" (formula "4") (term "0,0,0"))
                           (rule "eqSymm" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0"))
                           (rule "add_zero_right" (formula "4") (term "0,0,0"))
                           (rule "eqSymm" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0,1,0"))
                           (rule "applyEq" (formula "5") (term "0,1,0,0,1,0,0") (ifseqformula "4"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "5") (term "1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "5") (term "0,1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0,1,0"))
                           (rule "mul_literals" (formula "5") (term "0,1,1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0"))
                           (rule "eqSymm" (formula "4"))
                           (rule "polySimp_elimOne" (formula "4") (term "0,0,1"))
                           (rule "applyEq" (formula "5") (term "0,1,0,0,1,0,0") (ifseqformula "4"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0"))
                           (rule "eqSymm" (formula "4"))
                           (rule "polySimp_elimOne" (formula "4") (term "0,0,1"))
                           (rule "applyEq" (formula "5") (term "0,1,0,0,1,0,0") (ifseqformula "4"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "5") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0"))
                           (rule "eqSeqDef" (formula "15") (term "0,1,0") (inst "iv=iv"))
                           (rule "lenOfSeqDef" (formula "15") (term "1,1,0,0,1,0,1,0"))
                           (rule "polySimp_elimSub" (formula "15") (term "1,1,1,0,0,1,0,1,0"))
                           (rule "times_zero_2" (formula "15") (term "1,1,1,1,0,0,1,0,1,0"))
                           (rule "add_zero_right" (formula "15") (term "1,1,1,0,0,1,0,1,0"))
                           (rule "getOfSeqDef" (formula "15") (term "0,1,0,1,0,1,0"))
                           (rule "castDel" (formula "15") (term "2,0,1,0,1,0,1,0"))
                           (rule "castDel" (formula "15") (term "1,0,1,0,1,0,1,0"))
                           (rule "add_zero_right" (formula "15") (term "0,2,1,0,1,0,1,0,1,0"))
                           (rule "eqSymm" (formula "15") (term "1,0,1,0,1,0"))
                           (rule "polySimp_elimSub" (formula "15") (term "1,1,0,1,1,0,1,0,1,0"))
                           (rule "times_zero_2" (formula "15") (term "1,1,1,0,1,1,0,1,0,1,0"))
                           (rule "add_zero_right" (formula "15") (term "1,1,0,1,1,0,1,0,1,0"))
                           (rule "lenOfSeqDef" (formula "15") (term "0,0,0,1,0"))
                           (rule "eqSymm" (formula "15") (term "0,0,1,0"))
                           (rule "polySimp_elimSub" (formula "15") (term "1,1,0,0,1,0"))
                           (rule "times_zero_2" (formula "15") (term "1,1,1,0,0,1,0"))
                           (rule "add_zero_right" (formula "15") (term "1,1,0,0,1,0"))
                           (rule "getOfSeqDef" (formula "15") (term "0,1,0,1,0,1,0"))
                           (rule "castDel" (formula "15") (term "2,0,1,0,1,0,1,0"))
                           (rule "castDel" (formula "15") (term "1,0,1,0,1,0,1,0"))
                           (rule "add_zero_right" (formula "15") (term "0,2,1,0,1,0,1,0,1,0"))
                           (rule "eqSymm" (formula "15") (term "1,0,1,0,1,0"))
                           (rule "polySimp_elimSub" (formula "15") (term "1,1,0,1,1,0,1,0,1,0"))
                           (rule "times_zero_2" (formula "15") (term "1,1,1,0,1,1,0,1,0,1,0"))
                           (rule "add_zero_right" (formula "15") (term "1,1,0,1,1,0,1,0,1,0"))
                           (rule "lenOfSeqDef" (formula "15") (term "0,0,0,1,0"))
                           (rule "eqSymm" (formula "15") (term "0,0,1,0"))
                           (rule "polySimp_elimSub" (formula "15") (term "1,1,0,0,1,0"))
                           (rule "times_zero_2" (formula "15") (term "1,1,1,0,0,1,0"))
                           (rule "add_zero_right" (formula "15") (term "1,1,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "15") (term "0,1,1,0,0,1,0,1,0"))
                           (rule "add_zero_right" (formula "15") (term "0,0,1,1,0,0,1,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,1,0,0,1,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0,1,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,0,1,0,1,0"))
                           (rule "polySimp_addComm1" (formula "15") (term "0,1,0,0,1,0,1,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,1,1,0,1,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,1,1,0,1,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0,0,1,0"))
                           (rule "add_zero_right" (formula "15") (term "0,0,0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "15") (term "0,1,0,0,1,0"))
                           (rule "add_zero_right" (formula "15") (term "0,0,1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,0,1,0"))
                           (rule "polySimp_addComm1" (formula "15") (term "0,1,0,0,1,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,0,1,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,1,1,0,1,0,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,0,0,1,0,1,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0,1,0,1,0,1,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "0,1,0,0,1,0,1,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,1,1,0,1,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,1,1,0,1,0,1,0"))
                           (rule "polySimp_rightDist" (formula "15") (term "1,1,0,1,1,0,1,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,1,1,0,1,0,1,0"))
                           (rule "mul_literals" (formula "15") (term "0,1,1,0,1,1,0,1,0,1,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,1,1,0,1,0,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "0,0,0,0,0,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "0,0,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "0,0,1,0,0,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,0,0,1,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0,1,0,1,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "0,1,0,0,1,0,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,1,0,0,1,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1,0,0,1,0,1,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1,0,0,1,0,1,0"))
                           (rule "array2seqDef" (formula "17") (term "0,1,1,0,1") (inst "u=u"))
                           (rule "eqSymm" (formula "17") (term "1,0,1"))
                           (rule "getOfSeqDef" (formula "17") (term "0,1,0,1"))
                           (rule "castDel" (formula "17") (term "2,0,1,0,1"))
                           (rule "castDel" (formula "17") (term "1,0,1,0,1"))
                           (rule "add_zero_right" (formula "17") (term "0,2,1,0,1,0,1"))
                           (rule "polySimp_elimSub" (formula "17") (term "1,1,0,0,1,0,1"))
                           (rule "times_zero_2" (formula "17") (term "1,1,1,0,0,1,0,1"))
                           (rule "add_zero_right" (formula "17") (term "1,1,0,0,1,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,1,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,1,0,1"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,1,0,1"))
                           (rule "mul_literals" (formula "17") (term "0,1,1,0,0,1,0,1"))
                           (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,1,0,1"))
                           (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,1,0,1"))
                           (rule "array2seqDef" (formula "17") (term "0,1,0") (inst "u=u"))
                           (rule "eqSymm" (formula "17") (term "0"))
                           (rule "lenOfSeqDef" (formula "17") (term "0,0"))
                           (rule "polySimp_elimSub" (formula "17") (term "1,0,0"))
                           (rule "times_zero_2" (formula "17") (term "1,1,0,0"))
                           (rule "add_zero_right" (formula "17") (term "1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0"))
                           (rule "add_zero_right" (formula "17") (term "0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "17") (term "0,0,0,0"))
                           (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "4"))
                           (rule "eqSymm" (formula "17") (term "0"))
                           (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "7"))
                           (rule "applyEqRigid" (formula "6") (term "0,2,0,1,1,1,0,0,1,0") (ifseqformula "1"))
                           (rule "applyEqRigid" (formula "18") (term "0,2,0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEqRigid" (formula "6") (term "0,2,1,1,0,1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "18") (term "0,2,1,1,0,1,0,1") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "applyEq" (formula "8") (term "0") (ifseqformula "1"))
                           (rule "inEqSimp_homoInEq0" (formula "8"))
                           (rule "polySimp_pullOutFactor1" (formula "8") (term "0"))
                           (rule "add_literals" (formula "8") (term "1,0"))
                           (rule "times_zero_1" (formula "8") (term "0"))
                           (rule "qeq_literals" (formula "8"))
                           (rule "true_left" (formula "8"))
                           (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "2"))
                           (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
                           (rule "add_literals" (formula "2") (term "1,0"))
                           (rule "times_zero_1" (formula "2") (term "0"))
                           (rule "leq_literals" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "applyEqRigid" (formula "4") (term "0,2,0,1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "4") (term "0,2,0,0,0,0") (ifseqformula "1"))
                           (rule "close" (formula "16") (ifseqformula "4"))
                        )
                        (branch "Case 2"
                           (rule "translateJavaAddInt" (formula "4") (term "1"))
                           (rule "notLeft" (formula "2"))
                           (rule "close" (formula "16") (ifseqformula "1"))
                        )
                     )
                  )
                  (branch "Case 2"
                     (rule "translateJavaSubInt" (formula "20") (term "0"))
                     (rule "translateJavaSubInt" (formula "20") (term "1"))
                     (rule "translateJavaAddInt" (formula "20") (term "1,0"))
                     (rule "eqSymm" (formula "13"))
                     (rule "eqSymm" (formula "11") (term "0,1,0"))
                     (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "15"))
                     (builtin "One Step Simplification" (formula "5"))
                     (rule "polySimp_elimSub" (formula "20") (term "1"))
                     (rule "polySimp_elimSub" (formula "20") (term "0"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "20") (term "1"))
                     (rule "polySimp_addComm0" (formula "20") (term "1,1,0"))
                     (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                     (rule "mul_literals" (formula "20") (term "0,1,0"))
                     (rule "polySimp_addComm0" (formula "20") (term "0"))
                     (rule "inEqSimp_leqRight" (formula "17"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "inEqSimp_ltRight" (formula "18"))
                     (rule "mul_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "precOfInt" (formula "20"))
                     (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "3"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "20") (term "1"))
                     (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1"))
                     (rule "polySimp_mulAssoc" (formula "20") (term "0,1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "20") (term "0,0,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "20") (term "0,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "20") (term "0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "20") (term "0,0,1"))
                     (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                     (rule "polySimp_addComm1" (formula "20") (term "0,0,1"))
                     (rule "polySimp_pullOutFactor2b" (formula "20") (term "0,1"))
                     (rule "add_literals" (formula "20") (term "1,1,0,1"))
                     (rule "times_zero_1" (formula "20") (term "1,0,1"))
                     (rule "add_zero_right" (formula "20") (term "0,1"))
                     (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                     (rule "polySimp_addComm1" (formula "20") (term "0,0,1"))
                     (rule "add_literals" (formula "20") (term "0,0,0,1"))
                     (rule "add_zero_left" (formula "20") (term "0,0,1"))
                     (rule "polySimp_pullOutFactor1" (formula "20") (term "0,1"))
                     (rule "add_literals" (formula "20") (term "1,0,1"))
                     (rule "times_zero_1" (formula "20") (term "0,1"))
                     (rule "leq_literals" (formula "20") (term "1"))
                     (builtin "One Step Simplification" (formula "20"))
                     (rule "inEqSimp_leqRight" (formula "20"))
                     (rule "add_zero_right" (formula "1") (term "0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,1,0"))
                     (rule "mul_literals" (formula "1") (term "0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "12"))
                     (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "12"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1"))
                     (rule "polySimp_rightDist" (formula "3") (term "1"))
                     (rule "mul_literals" (formula "3") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                     (rule "polySimp_elimOne" (formula "4") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "3"))
                     (rule "inEqSimp_homoInEq0" (formula "11") (term "0"))
                     (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0"))
                     (rule "add_literals" (formula "11") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "11") (term "1,0,0"))
                     (rule "add_literals" (formula "11") (term "0,0"))
                     (rule "qeq_literals" (formula "11") (term "0"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "true_left" (formula "11"))
                     (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "1"))
                     (rule "andLeft" (formula "3"))
                     (rule "inEqSimp_homoInEq1" (formula "3"))
                     (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                     (rule "add_literals" (formula "3") (term "1,1,0"))
                     (rule "times_zero_1" (formula "3") (term "1,0"))
                     (rule "add_zero_right" (formula "3") (term "0"))
                     (rule "leq_literals" (formula "3"))
                     (rule "closeFalse" (formula "3"))
                  )
               )
            )
            (branch "Exceptional Post (equal)"
               (builtin "One Step Simplification" (formula "12"))
               (builtin "One Step Simplification" (formula "17"))
               (rule "translateJavaSubInt" (formula "17") (term "0,1,1,1,0,0"))
               (rule "translateJavaSubInt" (formula "17") (term "0,1,1,1,1,0,1"))
               (rule "translateJavaUnaryMinusInt" (formula "17") (term "1,0,0,0,0,0,0,1,0,0,1"))
               (rule "translateJavaUnaryMinusInt" (formula "17") (term "1,0,0,0,0,0,0,1,0,1,0,1"))
               (rule "translateJavaUnaryMinusInt" (formula "17") (term "1,0,0,1,0,0,0,1,0,0,1"))
               (rule "translateJavaUnaryMinusInt" (formula "17") (term "1,0,0,1,0,0,0,1,0,1,0,1"))
               (rule "neg_literal" (formula "17") (term "1,0,0,0,0,0,0,1,0,0,1"))
               (rule "neg_literal" (formula "17") (term "1,0,0,0,0,0,0,1,0,1,0,1"))
               (rule "neg_literal" (formula "17") (term "1,0,0,1,0,0,0,1,0,0,1"))
               (rule "neg_literal" (formula "17") (term "1,0,0,1,0,0,0,1,0,1,0,1"))
               (rule "orRight" (formula "16"))
               (rule "andLeft" (formula "12"))
               (rule "andLeft" (formula "13"))
               (rule "andLeft" (formula "12"))
               (rule "notLeft" (formula "12"))
               (rule "close" (formula "15") (ifseqformula "14"))
            )
            (branch "Pre (equal)"
               (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "13")) (ifInst ""  (formula "2")) (ifInst ""  (formula "13")))
               (rule "orRight" (formula "15"))
               (rule "eqSymm" (formula "11") (term "0,1,0"))
               (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "13"))
               (builtin "One Step Simplification" (formula "5"))
               (rule "replace_known_left" (formula "17") (term "0,1") (ifseqformula "5"))
               (builtin "One Step Simplification" (formula "17"))
               (rule "inEqSimp_ltRight" (formula "16"))
               (rule "times_zero_1" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_leqRight" (formula "16"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "3") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "12"))
               (rule "inEqSimp_commuteLeq" (formula "11"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "mul_literals" (formula "1") (term "0,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "3"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
               (rule "polySimp_elimOne" (formula "3") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
               (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "1"))
               (rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
               (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
               (rule "add_literals" (formula "10") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "10") (term "1,0,0"))
               (rule "add_zero_right" (formula "10") (term "0,0"))
               (rule "qeq_literals" (formula "10") (term "0"))
               (builtin "One Step Simplification" (formula "10"))
               (rule "true_left" (formula "10"))
               (rule "array2seqDef" (formula "10") (term "0,0,1,0") (inst "u=u"))
               (rule "array2seqDef" (formula "10") (term "1,0,1,0") (inst "u=u"))
               (rule "narrowSelectArrayType" (formula "10") (term "2,1,0,1,0") (ifseqformula "3") (ifseqformula "12"))
               (rule "eqSeqDef" (formula "10") (term "0,1,0") (inst "iv=iv"))
               (rule "getOfSeqDef" (formula "10") (term "1,1,0,1,0,1,0"))
               (rule "castDel" (formula "10") (term "1,1,1,0,1,0,1,0"))
               (rule "castDel" (formula "10") (term "2,1,1,0,1,0,1,0"))
               (rule "add_zero_right" (formula "10") (term "0,2,1,1,1,0,1,0,1,0"))
               (rule "polySimp_elimSub" (formula "10") (term "1,1,0,1,1,0,1,0,1,0"))
               (rule "mul_literals" (formula "10") (term "1,1,1,0,1,1,0,1,0,1,0"))
               (rule "add_zero_right" (formula "10") (term "1,1,0,1,1,0,1,0,1,0"))
               (rule "lenOfSeqDef" (formula "10") (term "1,0,0,1,0"))
               (rule "polySimp_elimSub" (formula "10") (term "1,1,0,0,1,0"))
               (rule "times_zero_2" (formula "10") (term "1,1,1,0,0,1,0"))
               (rule "add_zero_right" (formula "10") (term "1,1,0,0,1,0"))
               (rule "lenOfSeqDef" (formula "10") (term "0,0,0,1,0"))
               (rule "polySimp_elimSub" (formula "10") (term "1,0,0,0,1,0"))
               (rule "times_zero_2" (formula "10") (term "1,1,0,0,0,1,0"))
               (rule "add_zero_right" (formula "10") (term "1,0,0,0,1,0"))
               (rule "getOfSeqDef" (formula "10") (term "0,1,0,1,0,1,0"))
               (rule "castDel" (formula "10") (term "2,0,1,0,1,0,1,0"))
               (rule "castDel" (formula "10") (term "1,0,1,0,1,0,1,0"))
               (rule "add_zero_right" (formula "10") (term "0,2,1,0,1,0,1,0,1,0"))
               (rule "polySimp_elimSub" (formula "10") (term "1,1,0,0,1,0,1,0,1,0"))
               (rule "times_zero_2" (formula "10") (term "1,1,1,0,0,1,0,1,0,1,0"))
               (rule "add_zero_right" (formula "10") (term "1,1,0,0,1,0,1,0,1,0"))
               (rule "lenOfSeqDef" (formula "10") (term "1,1,0,0,1,0,1,0"))
               (rule "polySimp_elimSub" (formula "10") (term "1,1,1,0,0,1,0,1,0"))
               (rule "times_zero_2" (formula "10") (term "1,1,1,1,0,0,1,0,1,0"))
               (rule "add_zero_right" (formula "10") (term "1,1,1,0,0,1,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,1,1,0,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,1,1,0,1,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1,0,0,1,0"))
               (rule "add_zero_right" (formula "10") (term "0,0,1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0,0,1,0"))
               (rule "add_zero_right" (formula "10") (term "0,0,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1,0,1,0,1,0"))
               (rule "polySimp_addComm1" (formula "10") (term "0,1,0,0,1,0,1,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1,1,0,0,1,0,1,0"))
               (rule "add_zero_right" (formula "10") (term "0,0,1,1,0,0,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,1,0,0,1,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1,0,1,0"))
               (rule "polySimp_addComm1" (formula "10") (term "0,1,0,0,1,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,1,1,0,1,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,0,1,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,1,1,0,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,1,1,0,1,0,1,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,1,0,1,1,0,1,0,1,0"))
               (rule "mul_literals" (formula "10") (term "0,1,1,0,1,1,0,1,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,1,1,0,1,0,1,0"))
               (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,1,1,0,1,0,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "0,0,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "10") (term "0,0,1,0,0,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "10") (term "0,0,0,0,0,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "1,0,0,1,0,1,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,0,1,0,1,0,1,0"))
               (rule "polySimp_elimOne" (formula "10") (term "0,1,0,0,1,0,1,0,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0,1,0,1,0,0,1,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,1,0,1,0,0,1,0,1,0"))
               (rule "polySimp_elimOne" (formula "10") (term "0,0,0,1,0,1,0,0,1,0,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "1,0,0,1,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,0,1,0,1,0"))
               (rule "polySimp_elimOne" (formula "10") (term "0,1,0,0,1,0,1,0"))
               (rule "nnf_imp2or" (formula "10") (term "0"))
               (rule "nnf_notAnd" (formula "10") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
               (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "10") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
               (rule "mul_literals" (formula "10") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
               (rule "nnf_notAnd" (formula "10") (term "1,0"))
               (rule "nnf_notAll" (formula "10") (term "1,1,0"))
               (rule "nnf_imp2or" (formula "10") (term "0,0,1,1,0"))
               (rule "nnf_notOr" (formula "10") (term "0,1,1,0"))
               (builtin "One Step Simplification" (formula "10"))
               (rule "Class_invariant_axiom_for_verif_functionalities_pkienc_Decryptor_EncryptionLog" (formula "8") (ifseqformula "5"))
               (rule "andLeft" (formula "8"))
               (rule "andLeft" (formula "8"))
               (rule "eqSymm" (formula "10"))
               (rule "nonNull" (formula "9") (inst "i=i_1"))
               (rule "greater_literals" (formula "9") (term "0,1"))
               (builtin "One Step Simplification" (formula "9"))
               (rule "sub_literals" (formula "9") (term "2,1,0,1"))
               (builtin "One Step Simplification" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "notLeft" (formula "9"))
               (rule "narrowSelectArrayType" (formula "9") (term "0,0,1,0") (ifseqformula "3") (ifseqformula "13"))
               (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
               (rule "applyEq" (formula "9") (term "0,1,0,0,1,0,0") (ifseqformula "10"))
               (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
               (rule "nonNull" (formula "8") (inst "i=i_1"))
               (rule "sub_literals" (formula "8") (term "2,1,0,1,1"))
               (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "16")))
               (rule "greater_literals" (formula "8") (term "0"))
               (builtin "One Step Simplification" (formula "8"))
               (rule "narrowSelectArrayType" (formula "8") (term "0,0,1,0") (ifseqformula "3") (ifseqformula "16"))
               (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
               (rule "nnf_imp2or" (formula "9") (term "0"))
               (rule "nnf_imp2or" (formula "8") (term "0"))
               (rule "nnf_notAnd" (formula "9") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
               (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
               (rule "mul_literals" (formula "9") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
               (rule "nnf_notAnd" (formula "8") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
               (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
               (rule "mul_literals" (formula "8") (term "1,0,0,0"))
               (rule "commute_or_2" (formula "9") (term "0"))
               (rule "commute_or_2" (formula "8") (term "0"))
               (rule "commute_or" (formula "9") (term "0,0"))
               (rule "commute_or" (formula "8") (term "0,0"))
               (rule "commute_and_2" (formula "12") (term "0,1,1,0"))
               (rule "ifthenelse_to_or_left2" (formula "12") (term "0,1,0"))
               (rule "eqSymm" (formula "12") (term "0,1,1,0,1,0"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "inEqSimp_notGeq" (formula "12") (term "0,0,1,1,0,1,0"))
               (rule "mul_literals" (formula "12") (term "1,0,0,0,0,1,1,0,1,0"))
               (rule "add_literals" (formula "12") (term "0,0,0,0,1,1,0,1,0"))
               (rule "add_zero_left" (formula "12") (term "0,0,0,1,1,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,1,0"))
               (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0,1,0"))
               (rule "add_literals" (formula "12") (term "0,0,0,0,0,1,0"))
               (rule "add_zero_left" (formula "12") (term "0,0,0,0,1,0"))
               (rule "nnf_notOr" (formula "12") (term "1,1,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "12") (term "0,1,1,0,1,0"))
               (rule "mul_literals" (formula "12") (term "1,0,0,0,1,1,0,1,0"))
               (rule "add_zero_right" (formula "12") (term "0,0,0,1,1,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,1,1,0,1,0"))
               (rule "mul_literals" (formula "12") (term "1,0,1,1,0,1,0"))
               (rule "inEqSimp_and_subsumption6" (formula "12") (term "1,1,0,1,0"))
               (rule "less_literals" (formula "12") (term "0,1,1,1,0,1,0"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "applyEq_or_int2" (formula "12") (term "0,0,1,0"))
               (rule "commute_or" (formula "12") (term "0,0,1,0"))
               (rule "commute_and" (formula "12") (term "0,0,1,1,0"))
               (rule "ifthenelse_to_or_right2" (formula "12") (term "0,0,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,0,0,1,0"))
               (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0,0,0,1,0"))
               (rule "add_literals" (formula "12") (term "0,0,0,0,0,0,0,1,0"))
               (rule "add_zero_left" (formula "12") (term "0,0,0,0,0,0,1,0"))
               (rule "commute_or" (formula "12") (term "0,0,1,0"))
               (rule "commute_or" (formula "12") (term "1,1,0,0,1,0"))
               (rule "commute_or" (formula "12") (term "0,1,0,0,1,0"))
               (rule "cnf_rightDist" (formula "12") (term "0,0,1,0"))
               (rule "commute_or" (formula "12") (term "0,0,0,1,0"))
               (rule "ifthenelse_to_or_left2" (formula "12") (term "0,0,0,1,1,0"))
               (rule "eqSymm" (formula "12") (term "0,1,1,0,0,0,1,1,0"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "nnf_notOr" (formula "12") (term "1,1,0,0,0,1,1,0"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "nnf_notAnd" (formula "12") (term "0,0,0,0,0,1,1,0"))
               (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,0,0,0,1,1,0"))
               (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
               (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,0,0,0,1,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0,0,1,1,0"))
               (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0,0,1,1,0"))
               (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0,0,0,0,1,1,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
               (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0,0,0,1,1,0"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0,0,0,1,1,0"))
               (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,0,0,1,1,0"))
               (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0,0,0,1,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0,0,0,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0,1,1,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0,1,1,0"))
               (rule "commute_or_2" (formula "12") (term "0,0,0,0,1,1,0"))
               (rule "commute_or" (formula "12") (term "0,0,0,0,0,1,1,0"))
               (rule "commute_and_2" (formula "12") (term "1,1,0,0,0,1,1,0"))
               (rule "cnf_rightDist" (formula "12") (term "1,0,0,0,1,1,0"))
               (rule "cut_direct" (formula "17") (term "0,0"))
               (branch "CUT: self.ciphertext[i_0] = null TRUE"
                  (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "1")))
                  (rule "false_right" (formula "18"))
                  (rule "cnf_rightDist" (formula "13") (term "1,1,0,0,0,1,1,0"))
                  (rule "commute_or" (formula "13") (term "1,1,1,0,0,0,1,1,0"))
                  (rule "commute_or" (formula "13") (term "0,1,1,0,0,0,1,1,0"))
                  (rule "commute_and" (formula "13") (term "1,0,1,0,0,0,1,1,0"))
                  (rule "arrayLengthNotNegative" (formula "2") (term "0"))
                  (rule "arrayLengthIsAShort" (formula "3") (term "0"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "arrayLengthNotNegative" (formula "12") (term "0"))
                  (rule "applyEq" (formula "12") (term "0") (ifseqformula "13"))
                  (rule "arrayLengthIsAShort" (formula "12") (term "0"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "true_left" (formula "12"))
                  (rule "cnf_rightDist" (formula "14") (term "0,1,0,0,0,1,1,0"))
                  (rule "commute_or" (formula "14") (term "0,0,1,0,0,0,1,1,0"))
                  (rule "ifthenelse_split" (formula "14") (term "0,1,1,0,0,1,0"))
                  (branch "cipher.length ≥ 1 TRUE"
                     (rule "replace_known_left" (formula "15") (term "1,0,1,0,0,1,0") (ifseqformula "14"))
                     (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "14")) (ifInst ""  (formula "14")))
                     (rule "inEqSimp_contradInEq1" (formula "15") (term "1,0,1,0") (ifseqformula "14"))
                     (rule "qeq_literals" (formula "15") (term "0,1,0,1,0"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "allLeft" (formula "10") (inst "t=i_0"))
                     (rule "replace_known_left" (formula "10") (term "0,0,0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "inEqSimp_commuteGeq" (formula "10") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "4"))
                     (rule "qeq_literals" (formula "10") (term "0,0"))
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "10"))
                     (rule "andLeft" (formula "3"))
                     (rule "inEqSimp_homoInEq1" (formula "3"))
                     (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                     (rule "add_literals" (formula "3") (term "1,1,0"))
                     (rule "times_zero_1" (formula "3") (term "1,0"))
                     (rule "add_zero_right" (formula "3") (term "0"))
                     (rule "leq_literals" (formula "3"))
                     (rule "closeFalse" (formula "3"))
                  )
                  (branch "cipher.length ≥ 1 FALSE"
                     (rule "leq_literals" (formula "14") (term "1,1,0,0,1,0"))
                     (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "15")) (ifInst ""  (formula "15")) (ifInst ""  (formula "15")))
                     (rule "leq_literals" (formula "14") (term "1,0,0,1,0"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "inEqSimp_geqRight" (formula "15"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "allLeft" (formula "11") (inst "t=i_0"))
                     (rule "replace_known_left" (formula "11") (term "0,0,0") (ifseqformula "2"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "inEqSimp_commuteGeq" (formula "11") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "11") (term "0") (ifseqformula "5"))
                     (rule "qeq_literals" (formula "11") (term "0,0"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "inEqSimp_contradInEq1" (formula "11") (ifseqformula "4"))
                     (rule "andLeft" (formula "11"))
                     (rule "inEqSimp_homoInEq1" (formula "11"))
                     (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
                     (rule "add_literals" (formula "11") (term "1,1,0"))
                     (rule "times_zero_1" (formula "11") (term "1,0"))
                     (rule "add_zero_right" (formula "11") (term "0"))
                     (rule "leq_literals" (formula "11"))
                     (rule "closeFalse" (formula "11"))
                  )
               )
               (branch "CUT: self.ciphertext[i_0] = null FALSE"
                  (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "17")))
                  (rule "referencedObjectIsCreatedRight" (formula "18") (ifseqformula "17"))
                  (rule "close" (formula "18") (ifseqformula "3"))
               )
            )
         )
         (branch "Null Reference (x_arr_arr_4 = null)"
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
            (rule "closeFalse" (formula "1"))
         )
         (branch "Index Out of Bounds (x_arr_arr_4 != null, but i Out of Bounds!)"
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
            (builtin "One Step Simplification" (formula "16"))
            (rule "translateJavaUnaryMinusInt" (formula "16") (term "1,0,0,1,0,0,0,1,0,0,1"))
            (rule "translateJavaUnaryMinusInt" (formula "16") (term "1,0,0,0,0,0,0,1,0,1,0,1"))
            (rule "translateJavaUnaryMinusInt" (formula "16") (term "1,0,0,0,0,0,0,1,0,0,1"))
            (rule "translateJavaSubInt" (formula "16") (term "0,1,1,1,1,0,1"))
            (rule "translateJavaSubInt" (formula "16") (term "0,1,1,1,0,0,0"))
            (rule "translateJavaUnaryMinusInt" (formula "16") (term "1,0,0,1,0,0,0,1,0,1,0,1"))
            (rule "neg_literal" (formula "16") (term "1,0,0,1,0,0,0,1,0,0,1"))
            (rule "neg_literal" (formula "16") (term "1,0,0,0,0,0,0,1,0,1,0,1"))
            (rule "neg_literal" (formula "16") (term "1,0,0,0,0,0,0,1,0,0,1"))
            (rule "neg_literal" (formula "16") (term "1,0,0,1,0,0,0,1,0,1,0,1"))
            (rule "eqSymm" (formula "12") (term "0,1,0"))
            (rule "eqSymm" (formula "16") (term "0,1,0,1,0,1,0,0,0,1,0,1,0,1"))
            (rule "eqSymm" (formula "16") (term "0,1,0,1,0,0,1,1,1,0,1"))
            (rule "eqSymm" (formula "16") (term "0,1,0,1,0,1,0,0,0,1,0,0,1"))
            (rule "eqSymm" (formula "16") (term "0,0,1,0,1,0,0,1"))
            (rule "eqSymm" (formula "16") (term "0,0,1,0,1,0,1,0,1"))
            (rule "eqSymm" (formula "16") (term "0,0,1,0,1,1,1,0,1"))
            (rule "eqSymm" (formula "16") (term "1,1,0,0,0,0,1,0,0,1"))
            (rule "eqSymm" (formula "16") (term "1,1,0,0,0,0,1,0,1,0,1"))
            (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "14"))
            (builtin "One Step Simplification" (formula "6"))
            (rule "polySimp_elimSub" (formula "16") (term "0,1,1,1,1,0,1"))
            (rule "polySimp_elimSub" (formula "16") (term "0,1,1,1,0,0,0"))
            (rule "polySimp_addComm0" (formula "16") (term "0,1,1,1,1,0,1"))
            (rule "polySimp_addComm0" (formula "16") (term "0,1,1,1,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,1,0,1,0,0,0,1,0,1,0,1"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,1,0,1,0,0,0,1,0,1,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
            (rule "add_literals" (formula "1") (term "0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,1,0,0,1,1,1,0,1"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,1,0,0,1,1,1,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,1,0,1,0,0,0,1,0,0,1"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,1,0,1,0,0,0,1,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,1,0,0,0,0,1,0,0,1"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,1,0,0,0,0,1,0,0,1"))
            (rule "polySimp_addComm1" (formula "16") (term "0,1,0,1,0,0,0,0,1,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,1,0,0,0,0,1,0,1,0,1"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,1,0,0,0,0,1,0,1,0,1"))
            (rule "polySimp_addComm1" (formula "16") (term "0,1,0,1,0,0,0,0,1,0,1,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "11"))
            (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,0,1,1,1,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1,0,1,0,0,0,1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "10"))
            (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,0,0,1,1,1,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,1,0,0,0,0,1,0,1,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,1,0,0,0,0,1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1,0,1,0,0,0,1,0,1,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1,0,0,1,1,1,0,1"))
            (rule "blockThrow" (formula "16") (term "1,0,0,1"))
            (rule "blockReturn" (formula "16") (term "1,0,1,0,1"))
            (rule "blockThrow" (formula "16") (term "1"))
            (builtin "One Step Simplification" (formula "16"))
            (rule "blockThrow" (formula "16") (term "1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "polySimp_elimOne" (formula "2") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
            (rule "mul_literals" (formula "1") (term "1,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "1,0,1,0,0,0,0,1,0,1,0,1"))
            (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,1,0,0,0,0,1,0,1,0,1"))
            (rule "polySimp_elimOne" (formula "16") (term "0,1,0,1,0,0,0,0,1,0,1,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1,0,1,0,0,0,1,0,0,1"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,1,0,1,0,0,0,1,0,0,1"))
            (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,1,0,1,0,0,0,1,0,0,1"))
            (rule "mul_literals" (formula "16") (term "0,1,1,0,0,1,0,1,0,0,0,1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,1,0,1,0,0,0,1,0,0,1"))
            (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,1,0,1,0,0,0,1,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1,0,0,1,1,1,0,1"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,1,0,0,1,1,1,0,1"))
            (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,1,0,0,1,1,1,0,1"))
            (rule "mul_literals" (formula "16") (term "0,1,1,0,0,1,0,0,1,1,1,0,1"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,1,0,0,1,1,1,0,1"))
            (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,1,0,0,1,1,1,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1,0,1,0,0,0,1,0,1,0,1"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,1,0,1,0,0,0,1,0,1,0,1"))
            (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,1,0,1,0,0,0,1,0,1,0,1"))
            (rule "mul_literals" (formula "16") (term "0,1,1,0,0,1,0,1,0,0,0,1,0,1,0,1"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,1,0,1,0,0,0,1,0,1,0,1"))
            (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,1,0,1,0,0,0,1,0,1,0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "1,0,1,0,0,0,0,1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,1,0,0,0,0,1,0,0,1"))
            (rule "polySimp_elimOne" (formula "16") (term "0,1,0,1,0,0,0,0,1,0,0,1"))
            (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq0" (formula "11") (term "0"))
            (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0"))
            (rule "add_literals" (formula "11") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "11") (term "1,0,0"))
            (rule "add_literals" (formula "11") (term "0,0"))
            (rule "qeq_literals" (formula "11") (term "0"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
            (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0,0"))
            (rule "leq_literals" (formula "1") (term "0,0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "10"))
            (rule "qeq_literals" (formula "1") (term "0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "Null Reference (x_arr_arr_3 = null)"
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Null Reference (x_arr_arr = null)"
      (rule "Class_invariant_axiom_for_verif_functionalities_pkienc_Decryptor_EncryptionLog" (formula "7") (ifseqformula "4") (userinteraction))
      (builtin "One Step Simplification" (formula "1"))
      (rule "nonNull" (formula "7") (term "0,0") (inst "i=i_1") (userinteraction))
      (rule "replace_known_left" (formula "7") (term "0,0,0,0") (ifseqformula "1") (userinteraction))
      (builtin "One Step Simplification" (formula "7"))
      (rule "closeFalse" (formula "7") (userinteraction))
   )
)
(branch "Use Case"
   (rule "variableDeclarationAssign" (formula "11") (term "1,1") (userinteraction))
   (rule "variableDeclaration" (formula "11") (term "1,1") (newnames "b_2") (userinteraction))
   (rule "compound_less_than_comparison_2" (formula "11") (term "1,1") (inst "#v0=x") (inst "#v1=x_1") (userinteraction))
   (rule "variableDeclarationAssign" (formula "11") (term "1,1") (userinteraction))
   (rule "variableDeclaration" (formula "11") (term "1,1") (newnames "x_2") (userinteraction))
   (rule "assignment" (formula "11") (term "1,1") (userinteraction))
   (rule "variableDeclarationAssign" (formula "11") (term "1,1,1") (userinteraction))
   (rule "variableDeclaration" (formula "11") (term "1,1,1") (newnames "x_3") (userinteraction))
   (rule "eval_order_access2" (formula "11") (term "1,1,1") (inst "#v0=x_arr_arr") (userinteraction))
   (rule "variableDeclarationAssign" (formula "11") (term "1,1,1") (userinteraction))
   (rule "variableDeclaration" (formula "11") (term "1,1,1") (newnames "x_arr_arr_1") (userinteraction))
   (rule "assignment_read_attribute_this" (formula "11") (term "1,1,1") (userinteraction))
   (rule "assignment_read_length" (formula "11") (term "1,1,1,1") (userinteraction))
   (branch "Normal Execution (x_arr_arr_1 != null)"
      (builtin "One Step Simplification" (formula "11"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "less_than_comparison_simple" (formula "12") (term "1,1,1,1,1") (userinteraction))
      (rule "methodCallEmpty" (formula "12") (term "1,1,1,1,1,1") (userinteraction))
      (rule "emptyModality" (formula "12") (term "1,1,1,1,1,1") (userinteraction))
      (builtin "One Step Simplification" (formula "12"))
      (rule "methodCallReturn" (formula "12") (term "1,1") (userinteraction))
      (rule "unaryMinusInt" (formula "12") (term "1,1") (userinteraction))
      (rule "methodCallEmpty" (formula "12") (term "1,1,1") (userinteraction))
      (rule "tryEmpty" (formula "12") (term "1,1,1") (userinteraction))
      (rule "emptyModality" (formula "12") (term "1,1,1") (userinteraction))
      (rule "impRight" (formula "12") (userinteraction))
      (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "7")))
      (rule "andLeft" (formula "9"))
      (rule "notLeft" (formula "1"))
      (rule "andLeft" (formula "8"))
      (rule "allRight" (formula "15") (inst "sk=i_2") (userinteraction))
      (rule "instAll" (formula "15") (term "1,0,0") (ifseqformula "10") (userinteraction))
      (rule "impLeft" (formula "1") (userinteraction))
      (branch "Case 1"
         (rule "impRight" (formula "16"))
         (rule "notRight" (formula "17"))
         (rule "andLeft" (formula "2"))
         (rule "eqSymm" (formula "13") (term "0,1,0"))
         (rule "eqSymm" (formula "1"))
         (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "17"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "replace_known_left" (formula "14") (term "0") (ifseqformula "2"))
         (builtin "One Step Simplification" (formula "14"))
         (rule "inEqSimp_ltRight" (formula "15"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
         (rule "polySimp_addComm0" (formula "1") (term "0"))
         (rule "inEqSimp_ltRight" (formula "15"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
         (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "5"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "5") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "14"))
         (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "13"))
         (rule "inEqSimp_commuteLeq" (formula "4"))
         (rule "inEqSimp_sepNegMonomial1" (formula "2"))
         (rule "polySimp_mulLiterals" (formula "2") (term "0"))
         (rule "polySimp_elimOne" (formula "2") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1"))
         (rule "polySimp_elimOne" (formula "1") (term "1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
         (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "5"))
         (rule "polySimp_mulLiterals" (formula "5") (term "0"))
         (rule "polySimp_elimOne" (formula "5") (term "0"))
         (rule "array2seqDef" (formula "15") (term "1,0,1,0") (inst "u=u"))
         (rule "eqSymm" (formula "15") (term "0,1,0"))
         (rule "narrowSelectArrayType" (formula "15") (term "2,0,0,1,0") (ifseqformula "6") (ifseqformula "17"))
         (rule "array2seqDef" (formula "3") (term "0") (inst "u=u"))
         (rule "array2seqDef" (formula "3") (term "1") (inst "u=u"))
         (rule "narrowSelectArrayType" (formula "3") (term "2,1") (ifseqformula "6") (ifseqformula "17"))
         (rule "array2seqDef" (formula "15") (term "1,0,1,0") (inst "u=u"))
         (rule "eqSymm" (formula "15") (term "0,1,0"))
         (rule "eqSeqDef" (formula "3") (inst "iv=iv"))
         (rule "andLeft" (formula "3"))
         (rule "lenOfSeqDef" (formula "3") (term "1"))
         (rule "polySimp_elimSub" (formula "3") (term "1,1"))
         (rule "times_zero_2" (formula "3") (term "1,1,1"))
         (rule "add_zero_right" (formula "3") (term "1,1"))
         (rule "getOfSeqDef" (formula "4") (term "0,1,0"))
         (rule "castDel" (formula "4") (term "2,0,1,0"))
         (rule "castDel" (formula "4") (term "1,0,1,0"))
         (rule "add_zero_right" (formula "4") (term "0,2,1,0,1,0"))
         (rule "eqSymm" (formula "4") (term "1,0"))
         (rule "polySimp_elimSub" (formula "4") (term "1,1,0,1,1,0"))
         (rule "times_zero_2" (formula "4") (term "1,1,1,0,1,1,0"))
         (rule "add_zero_right" (formula "4") (term "1,1,0,1,1,0"))
         (rule "lenOfSeqDef" (formula "3") (term "0"))
         (rule "polySimp_elimSub" (formula "3") (term "1,0"))
         (rule "times_zero_2" (formula "3") (term "1,1,0"))
         (rule "add_zero_right" (formula "3") (term "1,0"))
         (rule "lenOfSeqDef" (formula "4") (term "1,1,0,0"))
         (rule "polySimp_elimSub" (formula "4") (term "1,1,1,0,0"))
         (rule "times_zero_2" (formula "4") (term "1,1,1,1,0,0"))
         (rule "add_zero_right" (formula "4") (term "1,1,1,0,0"))
         (rule "getOfSeqDef" (formula "4") (term "0,1,0"))
         (rule "castDel" (formula "4") (term "1,0,1,0"))
         (rule "castDel" (formula "4") (term "2,0,1,0"))
         (rule "add_zero_right" (formula "4") (term "0,2,1,0,1,0"))
         (rule "eqSymm" (formula "4") (term "1,0"))
         (rule "polySimp_elimSub" (formula "4") (term "1,1,0,1,1,0"))
         (rule "times_zero_2" (formula "4") (term "1,1,1,0,1,1,0"))
         (rule "add_zero_right" (formula "4") (term "1,1,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "3") (term "0,1"))
         (rule "add_zero_right" (formula "3") (term "0,0,1"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0"))
         (rule "add_zero_right" (formula "3") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "4") (term "0,1,1,0,0"))
         (rule "add_zero_right" (formula "4") (term "0,0,1,1,0,0"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0,1,0"))
         (rule "eqSymm" (formula "4") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0,1,0"))
         (rule "eqSymm" (formula "4") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,1,1,0"))
         (rule "applyEq" (formula "4") (term "0,1,0,0,1,0,0") (ifseqformula "3"))
         (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "3") (term "0,0,1"))
         (rule "polySimp_elimOne" (formula "3") (term "0,0,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0"))
         (rule "polySimp_elimOne" (formula "3") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0,1,0"))
         (rule "eqSymm" (formula "4") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,1,1,0"))
         (rule "polySimp_rightDist" (formula "4") (term "1,1,0,1,1,0"))
         (rule "mul_literals" (formula "4") (term "0,1,1,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,1,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0"))
         (rule "mul_literals" (formula "4") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0,1,0"))
         (rule "eqSymm" (formula "4") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,1,1,0"))
         (rule "polySimp_rightDist" (formula "4") (term "1,1,0,1,1,0"))
         (rule "mul_literals" (formula "4") (term "0,1,1,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,1,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,1,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "4") (term "0,0,1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "4") (term "0,0,1,1,1,0,0"))
         (rule "eqSeqDef" (formula "16") (term "0,1,0") (inst "iv=iv"))
         (rule "lenOfSeqDef" (formula "16") (term "1,0,0,1,0"))
         (rule "polySimp_elimSub" (formula "16") (term "1,1,0,0,1,0"))
         (rule "times_zero_2" (formula "16") (term "1,1,1,0,0,1,0"))
         (rule "add_zero_right" (formula "16") (term "1,1,0,0,1,0"))
         (rule "lenOfSeqDef" (formula "16") (term "0,0,0,1,0"))
         (rule "polySimp_elimSub" (formula "16") (term "1,0,0,0,1,0"))
         (rule "mul_literals" (formula "16") (term "1,1,0,0,0,1,0"))
         (rule "add_zero_right" (formula "16") (term "1,0,0,0,1,0"))
         (rule "lenOfSeqDef" (formula "16") (term "1,1,0,0,1,0,1,0"))
         (rule "polySimp_elimSub" (formula "16") (term "1,1,1,0,0,1,0,1,0"))
         (rule "times_zero_2" (formula "16") (term "1,1,1,1,0,0,1,0,1,0"))
         (rule "add_zero_right" (formula "16") (term "1,1,1,0,0,1,0,1,0"))
         (rule "getOfSeqDef" (formula "16") (term "0,1,0,1,0,1,0"))
         (rule "castDel" (formula "16") (term "2,0,1,0,1,0,1,0"))
         (rule "castDel" (formula "16") (term "1,0,1,0,1,0,1,0"))
         (rule "add_zero_right" (formula "16") (term "0,2,1,0,1,0,1,0,1,0"))
         (rule "eqSymm" (formula "16") (term "1,0,1,0,1,0"))
         (rule "polySimp_elimSub" (formula "16") (term "1,1,0,1,1,0,1,0,1,0"))
         (rule "times_zero_2" (formula "16") (term "1,1,1,0,1,1,0,1,0,1,0"))
         (rule "add_zero_right" (formula "16") (term "1,1,0,1,1,0,1,0,1,0"))
         (rule "getOfSeqDef" (formula "16") (term "0,1,0,1,0,1,0"))
         (rule "castDel" (formula "16") (term "1,0,1,0,1,0,1,0"))
         (rule "castDel" (formula "16") (term "2,0,1,0,1,0,1,0"))
         (rule "add_zero_right" (formula "16") (term "0,2,1,0,1,0,1,0,1,0"))
         (rule "eqSymm" (formula "16") (term "1,0,1,0,1,0"))
         (rule "polySimp_elimSub" (formula "16") (term "1,1,0,1,1,0,1,0,1,0"))
         (rule "times_zero_2" (formula "16") (term "1,1,1,0,1,1,0,1,0,1,0"))
         (rule "add_zero_right" (formula "16") (term "1,1,0,1,1,0,1,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "16") (term "0,1,0,0,1,0"))
         (rule "add_zero_right" (formula "16") (term "0,0,1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0,0,1,0"))
         (rule "add_zero_right" (formula "16") (term "0,0,0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "16") (term "0,1,1,0,0,1,0,1,0"))
         (rule "add_zero_right" (formula "16") (term "0,0,1,1,0,0,1,0,1,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,1,0,0,1,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,1,0,1,0,1,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,1,0,1,0,1,0"))
         (rule "polySimp_addComm1" (formula "16") (term "0,1,0,0,1,0,1,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,1,1,0,1,0,1,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,1,1,0,1,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,1,0,1,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,1,0,1,0"))
         (rule "polySimp_addComm1" (formula "16") (term "0,1,0,0,1,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1,0,1,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,1,1,0,1,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "16") (term "0,0,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "16") (term "0,0,1,0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "16") (term "0,0,0,0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "1,0,0,1,0,1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,0,1,0,1,0,1,0"))
         (rule "polySimp_elimOne" (formula "16") (term "0,1,0,0,1,0,1,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,1,1,0,1,0,1,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,1,1,0,1,0,1,0"))
         (rule "polySimp_rightDist" (formula "16") (term "1,1,0,1,1,0,1,0,1,0"))
         (rule "mul_literals" (formula "16") (term "0,1,1,0,1,1,0,1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,1,1,0,1,0,1,0"))
         (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,1,1,0,1,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0,1,0,1,0,0,1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,1,0,1,0,0,1,0,1,0"))
         (rule "polySimp_elimOne" (formula "16") (term "0,0,0,1,0,1,0,0,1,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "1,0,0,1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,0,1,0,1,0"))
         (rule "polySimp_elimOne" (formula "16") (term "0,1,0,0,1,0,1,0"))
         (rule "inEqSimp_antiSymm" (formula "15") (ifseqformula "2"))
         (rule "applyEq" (formula "16") (term "0") (ifseqformula "15"))
         (rule "inEqSimp_homoInEq1" (formula "16"))
         (rule "polySimp_pullOutFactor1" (formula "16") (term "0"))
         (rule "add_literals" (formula "16") (term "1,0"))
         (rule "times_zero_1" (formula "16") (term "0"))
         (rule "leq_literals" (formula "16"))
         (rule "true_left" (formula "16"))
         (rule "applyEq" (formula "6") (term "0") (ifseqformula "15"))
         (rule "inEqSimp_homoInEq1" (formula "6"))
         (rule "polySimp_addComm1" (formula "6") (term "0"))
         (rule "applyEq" (formula "2") (term "0") (ifseqformula "15"))
         (rule "inEqSimp_homoInEq0" (formula "2"))
         (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
         (rule "add_literals" (formula "2") (term "1,0"))
         (rule "times_zero_1" (formula "2") (term "0"))
         (rule "qeq_literals" (formula "2"))
         (rule "true_left" (formula "2"))
         (rule "inEqSimp_sepPosMonomial0" (formula "5"))
         (rule "polySimp_mulComm0" (formula "5") (term "1"))
         (rule "polySimp_rightDist" (formula "5") (term "1"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
         (rule "mul_literals" (formula "5") (term "0,1"))
         (rule "polySimp_elimOne" (formula "5") (term "1,1"))
         (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "5"))
         (rule "andLeft" (formula "1"))
         (rule "inEqSimp_homoInEq1" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0"))
         (rule "polySimp_addComm0" (formula "1") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
         (rule "add_literals" (formula "1") (term "1,1,0"))
         (rule "times_zero_1" (formula "1") (term "1,0"))
         (rule "add_literals" (formula "1") (term "0"))
         (rule "leq_literals" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "Case 2"
         (rule "notLeft" (formula "1"))
         (rule "impRight" (formula "16"))
         (rule "notRight" (formula "17"))
         (rule "close" (formula "13") (ifseqformula "1"))
      )
   )
   (branch "Null Reference (x_arr_arr_1 = null)"
      (builtin "One Step Simplification" (formula "1"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "Class_invariant_axiom_for_verif_functionalities_pkienc_Decryptor_EncryptionLog" (formula "7") (ifseqformula "4") (userinteraction))
      (builtin "One Step Simplification" (formula "12"))
      (rule "translateJavaUnaryMinusInt" (formula "12") (term "1,0,0,0,0,0,0,1,0,1"))
      (rule "translateJavaUnaryMinusInt" (formula "12") (term "1,0,0,1,0,0,0,1,0,1"))
      (rule "neg_literal" (formula "12") (term "1,0,0,0,0,0,0,1,0,1"))
      (rule "neg_literal" (formula "12") (term "1,0,0,1,0,0,0,1,0,1"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "11"))
      (rule "eqSymm" (formula "16") (term "1,1,0,0,0,0,1,0,1"))
      (rule "eqSymm" (formula "16") (term "0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "eqSymm" (formula "16") (term "0,0,1,0,1,0,1"))
      (rule "eqSymm" (formula "9"))
      (rule "eqSymm" (formula "13") (term "0,1,0"))
      (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "15"))
      (builtin "One Step Simplification" (formula "5"))
      (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,1,0,1,0,0,0,1,0,1"))
      (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,1,0,1,0,0,0,1,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,1,0,0,0,0,1,0,1"))
      (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,1,0,0,0,0,1,0,1"))
      (rule "polySimp_addComm1" (formula "16") (term "0,1,0,1,0,0,0,0,1,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1,0,1,0,0,0,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,1,0,0,0,0,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "11"))
      (rule "inEqSimp_commuteLeq" (formula "12"))
      (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "9") (term "0,1") (ifseqformula "1"))
      (rule "applyEq" (formula "13") (term "1,1,0,0,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "7") (term "1") (ifseqformula "1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1,0,1,0,0,0,1,0,1"))
      (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,1,0,1,0,0,0,1,0,1"))
      (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,1,0,1,0,0,0,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,1,0,1,0,0,0,1,0,1"))
      (rule "mul_literals" (formula "16") (term "0,1,1,0,0,1,0,1,0,0,0,1,0,1"))
      (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,1,0,1,0,0,0,1,0,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "1,0,1,0,0,0,0,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,1,0,0,0,0,1,0,1"))
      (rule "polySimp_elimOne" (formula "16") (term "0,1,0,1,0,0,0,0,1,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
      (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
      (rule "nonNull" (formula "8") (inst "i=i_1"))
      (rule "greater_literals" (formula "8") (term "0,1"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "sub_literals" (formula "8") (term "2,1,0,1"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "notLeft" (formula "8"))
      (rule "narrowSelectArrayType" (formula "8") (term "0,0,1,0") (ifseqformula "2") (ifseqformula "14"))
      (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
      (rule "applyEq" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "9"))
      (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
      (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
      (rule "array2seqDef" (formula "17") (term "0,1,1,0,0,0,0,1,0,1") (inst "u=u"))
      (rule "array2seqDef" (formula "17") (term "1,1,1,0,0,0,0,1,0,1") (inst "u=u"))
      (rule "array2seqDef" (formula "17") (term "1,0,1,0,1,0,1,0,0,0,1,0,1") (inst "u=u"))
      (rule "eqSymm" (formula "17") (term "0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "array2seqDef" (formula "13") (term "1,0,1,0") (inst "u=u"))
      (rule "eqSymm" (formula "13") (term "0,1,0"))
      (rule "narrowSelectArrayType" (formula "13") (term "2,0,0,1,0") (ifseqformula "2") (ifseqformula "16"))
      (rule "eqSeqDef" (formula "17") (term "1,1,0,0,0,0,1,0,1") (inst "iv=iv"))
      (rule "lenOfSeqDef" (formula "17") (term "0,0,1,1,0,0,0,0,1,0,1"))
      (rule "eqSymm" (formula "17") (term "0,1,1,0,0,0,0,1,0,1"))
      (rule "polySimp_elimSub" (formula "17") (term "1,1,0,1,1,0,0,0,0,1,0,1"))
      (rule "times_zero_2" (formula "17") (term "1,1,1,0,1,1,0,0,0,0,1,0,1"))
      (rule "add_zero_right" (formula "17") (term "1,1,0,1,1,0,0,0,0,1,0,1"))
      (rule "getOfSeqDef" (formula "17") (term "0,1,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "castDel" (formula "17") (term "1,0,1,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "castDel" (formula "17") (term "2,0,1,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "add_zero_right" (formula "17") (term "0,2,1,0,1,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "eqSymm" (formula "17") (term "1,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "polySimp_elimSub" (formula "17") (term "1,1,0,1,1,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "times_zero_2" (formula "17") (term "1,1,1,0,1,1,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "add_zero_right" (formula "17") (term "1,1,0,1,1,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "lenOfSeqDef" (formula "17") (term "1,1,0,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "polySimp_elimSub" (formula "17") (term "1,1,1,0,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "mul_literals" (formula "17") (term "1,1,1,1,0,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "add_zero_right" (formula "17") (term "1,1,1,0,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "lenOfSeqDef" (formula "17") (term "0,0,1,1,0,0,0,0,1,0,1"))
      (rule "eqSymm" (formula "17") (term "0,1,1,0,0,0,0,1,0,1"))
      (rule "polySimp_elimSub" (formula "17") (term "1,1,0,1,1,0,0,0,0,1,0,1"))
      (rule "mul_literals" (formula "17") (term "1,1,1,0,1,1,0,0,0,0,1,0,1"))
      (rule "add_zero_right" (formula "17") (term "1,1,0,1,1,0,0,0,0,1,0,1"))
      (rule "getOfSeqDef" (formula "17") (term "0,1,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "castDel" (formula "17") (term "2,0,1,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "castDel" (formula "17") (term "1,0,1,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "add_zero_right" (formula "17") (term "0,2,1,0,1,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "eqSymm" (formula "17") (term "1,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "polySimp_elimSub" (formula "17") (term "1,1,0,1,1,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "times_zero_2" (formula "17") (term "1,1,1,0,1,1,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "add_zero_right" (formula "17") (term "1,1,0,1,1,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "17") (term "0,1,1,0,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "add_zero_right" (formula "17") (term "0,0,1,1,0,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,1,0,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0,1,1,0,0,0,0,1,0,1"))
      (rule "add_zero_right" (formula "17") (term "0,0,0,0,1,1,0,0,0,0,1,0,1"))
      (rule "eqSymm" (formula "17") (term "0,1,1,0,0,0,0,1,0,1"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,1,1,0,0,0,0,1,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "eqSymm" (formula "17") (term "1,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,1,1,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0,1,1,0,0,0,0,1,0,1"))
      (rule "add_zero_right" (formula "17") (term "0,0,0,0,1,1,0,0,0,0,1,0,1"))
      (rule "eqSymm" (formula "17") (term "0,1,1,0,0,0,0,1,0,1"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,1,1,0,0,0,0,1,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "eqSymm" (formula "17") (term "1,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,1,1,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,1,1,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "mul_literals" (formula "17") (term "0,1,1,0,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,0,0,1,1,0,0,0,0,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0,0,1,1,0,0,0,0,1,0,1"))
      (rule "eqSymm" (formula "17") (term "0,1,1,0,0,0,0,1,0,1"))
      (rule "polySimp_elimOne" (formula "17") (term "0,0,1,0,1,1,0,0,0,0,1,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "eqSymm" (formula "17") (term "1,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,1,1,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "polySimp_rightDist" (formula "17") (term "1,1,0,1,1,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "mul_literals" (formula "17") (term "0,1,1,0,1,1,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,1,1,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,1,1,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,1,1,1,0,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "17") (term "0,0,1,1,1,0,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "polySimp_elimOne" (formula "17") (term "0,0,1,1,1,0,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,0,0,1,1,0,0,0,0,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0,0,1,1,0,0,0,0,1,0,1"))
      (rule "eqSymm" (formula "17") (term "0,1,1,0,0,0,0,1,0,1"))
      (rule "polySimp_elimOne" (formula "17") (term "0,0,1,0,1,1,0,0,0,0,1,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "eqSymm" (formula "17") (term "1,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,1,1,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "polySimp_rightDist" (formula "17") (term "1,1,0,1,1,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "mul_literals" (formula "17") (term "0,1,1,0,1,1,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,1,1,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,1,1,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "array2seqDef" (formula "17") (term "1,0,1,0,1,0,1,0,0,0,1,0,1") (inst "u=u"))
      (rule "eqSymm" (formula "17") (term "0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "array2seqDef" (formula "13") (term "1,0,1,0") (inst "u=u"))
      (rule "eqSymm" (formula "13") (term "0,1,0"))
      (rule "eqSeqDef" (formula "17") (term "0,1,0,1,0,1,0,0,0,1,0,1") (inst "iv=iv"))
      (rule "lenOfSeqDef" (formula "17") (term "1,0,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "polySimp_elimSub" (formula "17") (term "1,1,0,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "times_zero_2" (formula "17") (term "1,1,1,0,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "add_zero_right" (formula "17") (term "1,1,0,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "lenOfSeqDef" (formula "17") (term "1,1,0,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "polySimp_elimSub" (formula "17") (term "1,1,1,0,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "mul_literals" (formula "17") (term "1,1,1,1,0,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "add_zero_right" (formula "17") (term "1,1,1,0,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "getOfSeqDef" (formula "17") (term "1,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "castDel" (formula "17") (term "2,1,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "castDel" (formula "17") (term "1,1,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "add_zero_right" (formula "17") (term "0,2,1,1,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "polySimp_elimSub" (formula "17") (term "1,1,0,1,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "times_zero_2" (formula "17") (term "1,1,1,0,1,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "add_zero_right" (formula "17") (term "1,1,0,1,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "lenOfSeqDef" (formula "17") (term "0,0,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "polySimp_elimSub" (formula "17") (term "1,0,0,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "mul_literals" (formula "17") (term "1,1,0,0,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "add_zero_right" (formula "17") (term "1,0,0,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "getOfSeqDef" (formula "17") (term "0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "castDel" (formula "17") (term "1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "castDel" (formula "17") (term "2,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "add_zero_right" (formula "17") (term "0,2,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "polySimp_elimSub" (formula "17") (term "1,1,0,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "mul_literals" (formula "17") (term "1,1,1,0,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "add_zero_right" (formula "17") (term "1,1,0,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "17") (term "0,1,0,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "add_zero_right" (formula "17") (term "0,0,1,0,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "17") (term "0,1,1,0,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "add_zero_right" (formula "17") (term "0,0,1,1,0,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,1,0,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,1,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,1,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "add_zero_right" (formula "17") (term "0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,1,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,1,0,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "17") (term "0,0,1,0,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "polySimp_elimOne" (formula "17") (term "0,0,1,0,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,1,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,1,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "polySimp_rightDist" (formula "17") (term "1,1,0,1,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,1,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "mul_literals" (formula "17") (term "0,1,1,0,1,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,1,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,0,0,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "polySimp_elimOne" (formula "17") (term "0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "mul_literals" (formula "17") (term "0,1,1,0,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,0,1,0,0,1,0,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0,1,0,0,1,0,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "polySimp_elimOne" (formula "17") (term "0,0,0,1,0,0,1,0,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "mul_literals" (formula "17") (term "0,1,1,0,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,1,0,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "eqSeqDef" (formula "13") (term "0,1,0") (inst "iv=iv"))
      (rule "lenOfSeqDef" (formula "13") (term "1,1,0,0,1,0,1,0"))
      (rule "polySimp_elimSub" (formula "13") (term "1,1,1,0,0,1,0,1,0"))
      (rule "times_zero_2" (formula "13") (term "1,1,1,1,0,0,1,0,1,0"))
      (rule "add_zero_right" (formula "13") (term "1,1,1,0,0,1,0,1,0"))
      (rule "getOfSeqDef" (formula "13") (term "1,1,0,1,0,1,0"))
      (rule "castDel" (formula "13") (term "2,1,1,0,1,0,1,0"))
      (rule "castDel" (formula "13") (term "1,1,1,0,1,0,1,0"))
      (rule "add_zero_right" (formula "13") (term "0,2,1,1,1,0,1,0,1,0"))
      (rule "polySimp_elimSub" (formula "13") (term "1,1,0,1,1,0,1,0,1,0"))
      (rule "times_zero_2" (formula "13") (term "1,1,1,0,1,1,0,1,0,1,0"))
      (rule "add_zero_right" (formula "13") (term "1,1,0,1,1,0,1,0,1,0"))
      (rule "getOfSeqDef" (formula "13") (term "0,1,0,1,0,1,0"))
      (rule "castDel" (formula "13") (term "2,0,1,0,1,0,1,0"))
      (rule "castDel" (formula "13") (term "1,0,1,0,1,0,1,0"))
      (rule "add_zero_right" (formula "13") (term "0,2,1,0,1,0,1,0,1,0"))
      (rule "polySimp_elimSub" (formula "13") (term "1,1,0,0,1,0,1,0,1,0"))
      (rule "times_zero_2" (formula "13") (term "1,1,1,0,0,1,0,1,0,1,0"))
      (rule "add_zero_right" (formula "13") (term "1,1,0,0,1,0,1,0,1,0"))
      (rule "lenOfSeqDef" (formula "13") (term "1,0,0,1,0"))
      (rule "polySimp_elimSub" (formula "13") (term "1,1,0,0,1,0"))
      (rule "mul_literals" (formula "13") (term "1,1,1,0,0,1,0"))
      (rule "add_zero_right" (formula "13") (term "1,1,0,0,1,0"))
      (rule "lenOfSeqDef" (formula "13") (term "0,0,0,1,0"))
      (rule "polySimp_elimSub" (formula "13") (term "1,0,0,0,1,0"))
      (rule "times_zero_2" (formula "13") (term "1,1,0,0,0,1,0"))
      (rule "add_zero_right" (formula "13") (term "1,0,0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1,1,0,0,1,0,1,0"))
      (rule "add_zero_right" (formula "13") (term "0,0,1,1,0,0,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,1,0,0,1,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,1,1,0,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,1,1,0,1,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,0,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,1,0,1,0,1,0"))
      (rule "polySimp_addComm1" (formula "13") (term "0,1,0,0,1,0,1,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1,0,0,1,0"))
      (rule "add_zero_right" (formula "13") (term "0,0,1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0,1,0"))
      (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,1,0,1,0"))
      (rule "polySimp_addComm1" (formula "13") (term "0,1,0,0,1,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,1,1,0,1,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,0,1,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,1,1,0,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,1,1,0,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,1,0,1,1,0,1,0,1,0"))
      (rule "mul_literals" (formula "13") (term "0,1,1,0,1,1,0,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,1,1,0,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,1,1,0,1,0,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "1,0,0,1,0,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,0,1,0,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "13") (term "0,1,0,0,1,0,1,0,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "0,0,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "13") (term "0,0,1,0,0,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "13") (term "0,0,0,0,0,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,1,0,1,0,0,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,1,0,1,0,0,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "13") (term "0,0,0,1,0,1,0,0,1,0,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "1,0,0,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,0,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "13") (term "0,1,0,0,1,0,1,0"))
      (rule "nnf_imp2or" (formula "8") (term "0"))
      (rule "nnf_imp2or" (formula "17") (term "0,1,1,1,0,0,0,0,1,0,1"))
      (rule "nnf_imp2or" (formula "13") (term "0"))
      (rule "nnf_notAnd" (formula "8") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
      (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
      (rule "mul_literals" (formula "8") (term "1,0,0,0"))
      (rule "nnf_notAnd" (formula "13") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
      (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
      (rule "mul_literals" (formula "13") (term "1,0,0,0"))
      (rule "nnf_notAnd" (formula "13") (term "1,0"))
      (rule "nnf_imp2or" (formula "17") (term "0,1,0,1,0,0,0,1,0,1"))
      (rule "nnf_notAll" (formula "13") (term "1,1,0"))
      (rule "nnf_imp2or" (formula "13") (term "0,0,1,1,0"))
      (rule "nnf_notOr" (formula "13") (term "0,1,1,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "nnf_notAnd" (formula "17") (term "0,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "add_zero_left" (formula "17") (term "0,0,1,0,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "add_zero_right" (formula "17") (term "0,0,0,0,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "mul_literals" (formula "17") (term "1,0,0,0,1,1,1,0,0,0,0,1,0,1"))
      (rule "nnf_notAnd" (formula "17") (term "1,0,1,0,1,0,0,0,1,0,1"))
      (rule "nnf_notAnd" (formula "17") (term "0,0,1,0,1,0,0,0,1,0,1"))
      (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0,1,0,1,0,0,0,1,0,1"))
      (rule "mul_literals" (formula "17") (term "1,0,0,0,0,0,1,0,1,0,0,0,1,0,1"))
      (rule "add_zero_right" (formula "17") (term "0,0,0,0,0,1,0,1,0,0,0,1,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,1,0,1,0,0,0,1,0,1"))
      (rule "mul_literals" (formula "17") (term "1,0,0,0,1,0,1,0,0,0,1,0,1"))
      (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0,1,0,1,0,0,0,1,0,1"))
      (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,1,0,1,0,0,0,1,0,1"))
      (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,1,0,1,0,0,0,1,0,1"))
      (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,1,0,1,0,0,0,1,0,1"))
      (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,1,0,1,0,0,0,1,0,1"))
      (rule "add_zero_left" (formula "17") (term "0,0,1,0,0,1,0,1,0,0,0,1,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0,1,0,1,0,0,0,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,1,0,1,0,0,0,1,0,1"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,1,0,1,0,0,0,1,0,1"))
      (rule "nnf_notAll" (formula "17") (term "1,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "nnf_imp2or" (formula "17") (term "0,0,1,1,0,1,0,1,0,0,0,1,0,1"))
      (rule "nnf_notOr" (formula "17") (term "0,1,1,0,1,0,1,0,0,0,1,0,1"))
      (builtin "One Step Simplification" (formula "17"))
      (rule "commute_or_2" (formula "8") (term "0"))
      (rule "arrayLengthNotNegative" (formula "9") (term "0"))
      (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
      (rule "arrayLengthIsAShort" (formula "10") (term "0"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "true_left" (formula "10"))
      (rule "arrayLengthIsAShort" (formula "13") (term "0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "true_left" (formula "13"))
      (rule "arrayLengthNotNegative" (formula "13") (term "0"))
      (rule "commute_or" (formula "8") (term "0,0"))
      (rule "commute_and_2" (formula "14") (term "0,1,1,0"))
      (rule "ifthenelse_to_or_left2" (formula "14") (term "0,1,0"))
      (rule "eqSymm" (formula "14") (term "0,1,1,0,1,0"))
      (builtin "One Step Simplification" (formula "14"))
      (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,1,0"))
      (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0,1,0"))
      (rule "add_literals" (formula "14") (term "0,0,0,0,0,1,0"))
      (rule "add_zero_left" (formula "14") (term "0,0,0,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "14") (term "0,0,1,1,0,1,0"))
      (rule "mul_literals" (formula "14") (term "1,0,0,0,0,1,1,0,1,0"))
      (rule "add_literals" (formula "14") (term "0,0,0,0,1,1,0,1,0"))
      (rule "add_zero_left" (formula "14") (term "0,0,0,1,1,0,1,0"))
      (rule "nnf_notOr" (formula "14") (term "1,1,0,1,0"))
      (rule "inEqSimp_notLeq" (formula "14") (term "0,1,1,0,1,0"))
      (rule "times_zero_1" (formula "14") (term "1,0,0,0,1,1,0,1,0"))
      (rule "add_zero_right" (formula "14") (term "0,0,0,1,1,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,1,1,0,1,0"))
      (rule "mul_literals" (formula "14") (term "1,0,1,1,0,1,0"))
      (rule "inEqSimp_and_subsumption6" (formula "14") (term "1,1,0,1,0"))
      (rule "less_literals" (formula "14") (term "0,1,1,1,0,1,0"))
      (builtin "One Step Simplification" (formula "14"))
      (rule "applyEq_or_int2" (formula "14") (term "0,0,1,0"))
      (rule "commute_or" (formula "14") (term "0,0,1,0"))
      (rule "commute_and" (formula "14") (term "0,0,1,1,0"))
      (rule "ifthenelse_to_or_right2" (formula "14") (term "0,0,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,0,0,1,0"))
      (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0,0,0,1,0"))
      (rule "add_literals" (formula "14") (term "0,0,0,0,0,0,0,1,0"))
      (rule "add_zero_left" (formula "14") (term "0,0,0,0,0,0,1,0"))
      (rule "commute_or" (formula "14") (term "0,0,1,0"))
      (rule "commute_or" (formula "14") (term "0,1,0,0,1,0"))
      (rule "commute_or" (formula "14") (term "1,1,0,0,1,0"))
      (rule "cnf_rightDist" (formula "14") (term "0,0,1,0"))
      (rule "commute_or" (formula "14") (term "0,0,0,1,0"))
      (rule "ex_pull_out3" (formula "14") (term "1,0"))
      (rule "cnf_rightDist" (formula "14") (term "0,1,0"))
      (rule "cnf_rightDist" (formula "14") (term "1,0,1,0"))
      (rule "commute_or_2" (formula "14") (term "1,1,0,1,0"))
      (rule "cnf_rightDist" (formula "14") (term "0,0,1,0"))
      (rule "commute_or" (formula "14") (term "0,0,0,1,0"))
      (rule "cnf_rightDist" (formula "14") (term "0,1,0,1,0"))
      (rule "commute_or_2" (formula "14") (term "1,0,1,0,1,0"))
      (rule "shift_paren_or" (formula "14") (term "0,0,1,0,1,0"))
      (rule "commute_or_2" (formula "14") (term "0,1,0,1,0,1,0"))
      (rule "cnf_rightDist" (formula "14") (term "1,0,0,1,0"))
      (rule "commute_or_2" (formula "14") (term "1,1,0,0,1,0"))
      (rule "commute_or" (formula "14") (term "0,1,1,0,0,1,0"))
      (rule "cnf_rightDist" (formula "14") (term "0,0,0,1,0"))
      (rule "commute_or_2" (formula "14") (term "1,0,0,0,1,0"))
      (rule "commute_or" (formula "14") (term "0,1,0,0,0,1,0"))
      (rule "shift_paren_or" (formula "14") (term "0,0,0,1,0,1,0"))
      (rule "commute_or" (formula "14") (term "0,0,0,0,1,0,1,0"))
      (rule "cnf_rightDist" (formula "14") (term "0,1,0,0,1,0"))
      (rule "commute_or_2" (formula "14") (term "1,0,1,0,0,1,0"))
      (rule "shift_paren_or" (formula "14") (term "0,0,1,0,0,1,0"))
      (rule "commute_or_2" (formula "14") (term "0,1,0,1,0,0,1,0"))
      (rule "cnf_rightDist" (formula "14") (term "0,0,0,0,1,0"))
      (rule "commute_or_2" (formula "14") (term "1,0,0,0,0,1,0"))
      (rule "shift_paren_or" (formula "14") (term "0,0,0,0,0,1,0"))
      (rule "commute_or_2" (formula "14") (term "0,1,0,0,0,0,1,0"))
      (rule "shift_paren_or" (formula "14") (term "0,0,0,1,0,0,1,0"))
      (rule "commute_or" (formula "14") (term "0,0,1,0,1,0,0,1,0"))
      (rule "shift_paren_or" (formula "14") (term "0,0,0,0,0,0,1,0"))
      (rule "shift_paren_and" (formula "14") (term "0,0,1,0"))
      (rule "shift_paren_and" (formula "14") (term "0,0,0,1,0"))
      (rule "shift_paren_and" (formula "14") (term "0,1,0"))
      (rule "shift_paren_and" (formula "14") (term "0,0,1,0"))
      (rule "ex_pull_out3" (formula "14") (term "0"))
      (rule "cnf_rightDist" (formula "14") (term "0,0"))
      (rule "commute_or_2" (formula "14") (term "1,0,0"))
      (rule "commute_or_2" (formula "14") (term "0,1,0,0"))
      (rule "commute_or" (formula "14") (term "0,0,1,0,0"))
      (rule "cnf_rightDist" (formula "14") (term "0,0,0"))
      (rule "commute_or_2" (formula "14") (term "1,0,0,0"))
      (rule "commute_or_2" (formula "14") (term "0,1,0,0,0"))
      (rule "commute_or_2" (formula "14") (term "0,0,1,0,0,0"))
      (rule "cnf_rightDist" (formula "14") (term "0,0,0,0"))
      (rule "commute_or_2" (formula "14") (term "1,0,0,0,0"))
      (rule "commute_or_2" (formula "14") (term "0,1,0,0,0,0"))
      (rule "commute_or" (formula "14") (term "0,0,0,1,0,0,0"))
      (rule "commute_or_2" (formula "14") (term "0,0,1,0,0,0,0"))
      (rule "cnf_rightDist" (formula "14") (term "0,0,0,0,0"))
      (rule "commute_or_2" (formula "14") (term "1,0,0,0,0,0"))
      (rule "commute_or_2" (formula "14") (term "0,1,0,0,0,0,0"))
      (rule "commute_or" (formula "14") (term "0,0,0,1,0,0,0,0"))
      (rule "cnf_rightDist" (formula "14") (term "0,0,0,0,0,0"))
      (rule "commute_or_2" (formula "14") (term "1,0,0,0,0,0,0"))
      (rule "commute_or_2" (formula "14") (term "0,1,0,0,0,0,0,0"))
      (rule "shift_paren_or" (formula "14") (term "0,0,1,0,0,0,0,0"))
      (rule "commute_or_2" (formula "14") (term "0,0,1,0,0,0,0,0,0"))
      (rule "cnf_rightDist" (formula "14") (term "0,0,0,0,0,0,0"))
      (rule "commute_or_2" (formula "14") (term "1,0,0,0,0,0,0,0"))
      (rule "commute_or_2" (formula "14") (term "0,1,0,0,0,0,0,0,0"))
      (rule "commute_or_2" (formula "14") (term "0,0,1,0,0,0,0,0,0,0"))
      (rule "cnf_rightDist" (formula "14") (term "0,0,0,0,0,0,0,0"))
      (rule "commute_or_2" (formula "14") (term "1,0,0,0,0,0,0,0,0"))
      (rule "commute_or_2" (formula "14") (term "0,1,0,0,0,0,0,0,0,0"))
      (rule "shift_paren_or" (formula "14") (term "0,0,0,1,0,0,0,0,0,0"))
      (rule "cnf_rightDist" (formula "14") (term "0,0,0,0,0,0,0,0,0"))
      (rule "commute_or_2" (formula "14") (term "1,0,0,0,0,0,0,0,0,0"))
      (rule "shift_paren_or" (formula "14") (term "0,0,0,0,0,0,0,0,0,0"))
      (rule "commute_or_2" (formula "14") (term "0,1,0,0,0,0,0,0,0,0,0"))
      (rule "shift_paren_or" (formula "14") (term "0,0,0,1,0,0,0,0,0,0,0"))
      (rule "shift_paren_or" (formula "14") (term "0,0,1,0,0,0,0,0,0,0,0"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "1") (term "0") (ifseqformula "2"))
      (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "2"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "0,0") (ifseqformula "2"))
      (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "16"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "shift_paren_or" (formula "15") (term "0,0,0,0,0,0,0,0,0,0,0"))
      (rule "shift_paren_or" (formula "15") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
      (rule "shift_paren_or" (formula "15") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "15") (term "0,0"))
      (rule "commute_or_2" (formula "15") (term "0,0,0,0,0,0,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "15") (term "0,0,0"))
      (rule "commute_and_2" (formula "15") (term "0,0"))
      (rule "commute_or" (formula "15") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
      (rule "commute_or" (formula "15") (term "0,0,0,0,1,0,0,0,0,0,0,0,0,0"))
      (rule "commute_or_2" (formula "15") (term "0,0,0,1,0,0,0,0,0,0,0,0,0"))
      (rule "commute_or_2" (formula "15") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "15") (term "0,0,0,0,0"))
      (rule "commute_and_2" (formula "15") (term "0,0,0,0"))
      (rule "methodCallReturn" (formula "19") (term "1,0,1"))
      (rule "assignment" (formula "19") (term "1,0,1"))
      (rule "commute_and_2" (formula "15") (term "0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "15") (term "0,0,0,0,0"))
      (rule "commute_and_2" (formula "15") (term "0,0,0,0"))
      (rule "arrayLengthNotNegative" (formula "15") (term "0,0,0,1,1,0,0"))
      (rule "arrayLengthIsAShort" (formula "16") (term "0,1,0,1,0,0"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "true_left" (formula "16"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0"))
      (rule "ifthenelse_to_or_right2" (formula "16") (term "0,0,0,0,1,0,0"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "nnf_notAnd" (formula "16") (term "0,0,0,0,0,0,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0,0,0,0,0,1,0,0"))
      (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0,0,0,0,0,1,0,0"))
      (rule "add_zero_right" (formula "16") (term "0,0,0,0,0,0,0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,0,0,0,1,0,0"))
      (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0,0,0,1,0,0"))
      (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0,0,0,0,0,1,0,0"))
      (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0,0,0,0,0,1,0,0"))
      (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0,0,0,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,0,0,0,0,1,0,0"))
      (rule "add_literals" (formula "16") (term "0,0,0,1,0,0,0,0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "16") (term "0,0,1,0,0,0,0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0,0,0,0,0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0,0,0,1,0,0"))
      (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0,0,0,1,0,0"))
      (rule "nnf_notOr" (formula "16") (term "1,1,0,0,0,0,1,0,0"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "commute_or" (formula "16") (term "0,0,0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,1,1,0,0"))
      (rule "commute_or" (formula "16") (term "0,0,1,1,0,0"))
      (rule "commute_and_2" (formula "16") (term "1,1,1,1,0,0"))
      (rule "cnf_rightDist" (formula "16") (term "1,1,1,0,0"))
      (rule "cnf_rightDist" (formula "16") (term "1,1,1,1,0,0"))
      (rule "commute_or" (formula "16") (term "0,1,1,1,1,0,0"))
      (rule "commute_and" (formula "16") (term "1,0,1,1,1,0,0"))
      (rule "cnf_rightDist" (formula "16") (term "0,1,1,1,0,0"))
      (rule "commute_or" (formula "16") (term "0,0,1,1,1,0,0"))
      (rule "cnf_rightDist" (formula "16") (term "1,0,1,1,1,0,0"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "commute_or" (formula "16") (term "1,1,0,1,1,1,0,0"))
      (rule "cnf_rightDist" (formula "16") (term "0,0,1,1,1,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,1,1,1,0,0"))
      (rule "commute_or" (formula "16") (term "1,0,1,1,1,0,0"))
      (rule "commute_and" (formula "16") (term "0,0,1,1,1,0,0"))
      (rule "shift_paren_and" (formula "16") (term "1,1,1,0,0"))
      (rule "cnf_rightDist" (formula "16") (term "1,0,0"))
      (rule "commute_or" (formula "16") (term "1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,1,0,0"))
      (rule "cnf_rightDist" (formula "16") (term "1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "1,1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,1,1,1,0,0"))
      (rule "commute_or" (formula "16") (term "0,0,0,0,1,0,0"))
      (rule "cnf_rightDist" (formula "16") (term "0,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "1,0,1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,1,0,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,0,1,1,1,0,0"))
      (rule "cnf_rightDist" (formula "16") (term "0,0,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "1,0,0,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,0,1,0,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,0,0,1,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,1,0,0,1,1,0,0"))
      (rule "cnf_rightDist" (formula "16") (term "0,0,0,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "1,0,0,0,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,0,0,1,0,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,0,1,0,0,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,1,0,0,0,1,1,0,0"))
      (rule "cnf_rightDist" (formula "16") (term "0,0,0,0,1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,0,0,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "1,0,0,0,0,1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,0,0,0,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,0,1,0,0,0,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,1,0,0,0,0,1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,0,0,0,0,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,0,1,0,0,0,0,1,1,0,0"))
      (rule "shift_paren_and" (formula "16") (term "1,0,0"))
      (rule "shift_paren_and" (formula "16") (term "0,1,0,0"))
      (rule "shift_paren_and" (formula "16") (term "0,0,1,0,0"))
      (rule "shift_paren_and" (formula "16") (term "0,0,0,1,0,0"))
      (rule "shift_paren_and" (formula "16") (term "0,0,0,0,1,0,0"))
      (rule "shift_paren_and" (formula "16") (term "0,0"))
      (rule "shift_paren_and" (formula "16") (term "0,0,0"))
      (rule "shift_paren_and" (formula "16") (term "0,0,0,0"))
      (rule "shift_paren_and" (formula "16") (term "0,0,0,0,0"))
      (rule "shift_paren_and" (formula "16") (term "0,0,0,0,0,0"))
      (rule "shift_paren_and" (formula "16") (term "0,0,0,0,0,0,0"))
      (rule "commute_or" (formula "16") (term "0,0,0,1,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0"))
      (rule "ifthenelse_to_or_left2" (formula "16") (term "0,0,0,0,0,0,1,0,0"))
      (rule "eqSymm" (formula "16") (term "0,1,1,0,0,0,0,0,0,1,0,0"))
      (rule "nnf_notAnd" (formula "16") (term "0,0,0,0,0,0,0,0,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "16") (term "1,0,0,0,0,0,0,0,0,1,0,0"))
      (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0,0,0,0,0,0,0,1,0,0"))
      (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,0,0,0,0,0,0,1,0,0"))
      (rule "add_literals" (formula "16") (term "0,0,0,1,0,0,0,0,0,0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "16") (term "0,0,1,0,0,0,0,0,0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,0,0,0,0,0,0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0,0,0,0,0,1,0,0"))
      (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0,0,0,0,0,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0,0,0,0,0,0,0,1,0,0"))
      (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0,0,0,0,0,0,0,1,0,0"))
      (rule "add_zero_right" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,0,0,0,0,0,1,0,0"))
      (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0,0,0,0,0,1,0,0"))
      (rule "commute_or" (formula "16") (term "0,0,0,0,0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,1,1,0,0"))
      (rule "commute_or" (formula "16") (term "1,1,1,0,0"))
      (rule "commute_or" (formula "16") (term "0,0,1,1,0,0"))
      (rule "cnf_rightDist" (formula "16") (term "1,1,1,0,0"))
      (rule "cnf_rightDist" (formula "16") (term "1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,1,0,0"))
      (rule "commute_or" (formula "16") (term "1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,0,1,0,0"))
      (rule "commute_or" (formula "16") (term "1,1,1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,1,0,0"))
      (rule "cnf_rightDist" (formula "16") (term "1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "1,1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,1,1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,0,1,1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,0,0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,0,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,0,0,1,1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,0,0,0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,0,0,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,0,0,0,1,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,0,0,0,0,0,0,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,0,0,0,0,0,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,0,0,0,0,1,1,1,0,0"))
      (rule "shift_paren_and" (formula "16") (term "1,0,0"))
      (rule "shift_paren_and" (formula "16") (term "0,0"))
      (rule "shift_paren_and" (formula "16") (term "0,0,0"))
      (rule "commute_or" (formula "16") (term "0,0,0,0,0,0,1,0,0,0"))
      (rule "inEqSimp_or_tautInEq1" (formula "16") (term "0,0,0,0,0,1,0,0,0"))
      (rule "add_zero_right" (formula "16") (term "1,1,0,0,0,0,0,1,0,0,0"))
      (rule "qeq_literals" (formula "16") (term "1,0,0,0,0,0,1,0,0,0"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "commute_or" (formula "16") (term "0,0,0,0,0,0,0,1,0,0,0"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "commute_and_2" (formula "16") (term "0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0"))
      (rule "methodCallEmpty" (formula "20") (term "1,1,0,1"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0"))
      (rule "tryEmpty" (formula "20") (term "1,1,0,1"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,0"))
      (rule "emptyModality" (formula "20") (term "1,1,0,1"))
      (builtin "One Step Simplification" (formula "20"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,0,0,0"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0"))
      (rule "ifthenelse_to_or_left2" (formula "16") (term "0,0,0,0,0,1,0,0"))
      (rule "eqSymm" (formula "16") (term "0,1,1,0,0,0,0,0,1,0,0"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "nnf_notAnd" (formula "16") (term "0,0,0,0,0,0,0,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "16") (term "1,0,0,0,0,0,0,0,1,0,0"))
      (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0,0,0,0,0,0,1,0,0"))
      (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0,0,0,0,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,0,0,0,0,0,1,0,0"))
      (rule "add_literals" (formula "16") (term "0,0,0,1,0,0,0,0,0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "16") (term "0,0,1,0,0,0,0,0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,0,0,0,0,0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0,0,0,0,1,0,0"))
      (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0,0,0,0,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0,0,0,0,0,0,1,0,0"))
      (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0,0,0,0,0,0,1,0,0"))
      (rule "add_zero_right" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,0,0,0,0,1,0,0"))
      (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0,0,0,0,1,0,0"))
      (rule "nnf_notOr" (formula "16") (term "1,1,0,0,0,0,0,1,0,0"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "commute_or" (formula "16") (term "0,0,0,0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,1,1,0,0"))
      (rule "commute_or" (formula "16") (term "0,0,1,1,0,0"))
      (rule "commute_and_2" (formula "16") (term "1,1,1,1,0,0"))
      (rule "cnf_rightDist" (formula "16") (term "1,1,1,0,0"))
      (rule "cnf_rightDist" (formula "16") (term "1,1,1,1,0,0"))
      (rule "commute_or" (formula "16") (term "0,1,1,1,1,0,0"))
      (rule "commute_or" (formula "16") (term "1,1,1,1,1,0,0"))
      (rule "commute_and" (formula "16") (term "1,0,1,1,1,0,0"))
      (rule "cnf_rightDist" (formula "16") (term "0,1,1,1,0,0"))
      (rule "commute_or" (formula "16") (term "0,0,1,1,1,0,0"))
      (rule "cnf_rightDist" (formula "16") (term "1,0,1,1,1,0,0"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "commute_or" (formula "16") (term "1,1,0,1,1,1,0,0"))
      (rule "cnf_rightDist" (formula "16") (term "0,0,1,1,1,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,1,1,1,0,0"))
      (rule "commute_or" (formula "16") (term "1,0,1,1,1,0,0"))
      (rule "shift_paren_and" (formula "16") (term "0,0,1,1,1,0,0"))
      (rule "shift_paren_and" (formula "16") (term "1,1,1,0,0"))
      (rule "cnf_rightDist" (formula "16") (term "1,0,0"))
      (rule "commute_or" (formula "16") (term "1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,1,0,0"))
      (rule "cnf_rightDist" (formula "16") (term "1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "1,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,0,0,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,1,1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,0,1,0,0"))
      (rule "applyEq_or_int7" (formula "16") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,0,0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,1,1,1,0,0"))
      (rule "cnf_rightDist" (formula "16") (term "0,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "1,0,1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,0,0,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,1,0,1,1,0,0"))
      (rule "cnf_rightDist" (formula "16") (term "0,0,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "1,0,0,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,0,0,1,1,1,0,0"))
      (rule "applyEq_or_int5" (formula "16") (term "0,0,1,1,1,0,0"))
      (rule "inEqSimp_homoInEq1" (formula "16") (term "1,0,0,1,1,1,0,0"))
      (rule "times_zero_2" (formula "16") (term "1,0,1,0,0,1,1,1,0,0"))
      (rule "add_zero_right" (formula "16") (term "0,1,0,0,1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1,1,1,0,0"))
      (rule "mul_literals" (formula "16") (term "1,1,0,0,1,1,1,0,0"))
      (rule "commute_or" (formula "16") (term "0,0,0,0,0,0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,0,0,1,0,0"))
      (rule "inEqSimp_or_tautInEq1" (formula "16") (term "0,0,0,0,0,0,1,0,0"))
      (rule "add_zero_right" (formula "16") (term "1,1,0,0,0,0,0,0,1,0,0"))
      (rule "qeq_literals" (formula "16") (term "1,0,0,0,0,0,0,1,0,0"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "shift_paren_or" (formula "16") (term "0,1,0,0,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,0,1,0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,1,0,0,1,0,0"))
      (rule "cnf_rightDist" (formula "16") (term "0,0,0,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "1,0,0,0,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,0,0,0,1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,0,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,0,0,1,0,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,1,0,0,0,1,0,0"))
      (rule "commute_or" (formula "16") (term "0,0,0,0,0,1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,1,0,0,0,1,0,0"))
      (rule "cnf_rightDist" (formula "16") (term "0,0,0,0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,0,0,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "1,0,0,0,0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,0,0,0,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,0,0,1,0,0,1,0,0"))
      (rule "applyEq_or_int5" (formula "16") (term "0,0,1,0,0,1,0,0"))
      (rule "inEqSimp_homoInEq1" (formula "16") (term "1,0,0,1,0,0,1,0,0"))
      (rule "times_zero_2" (formula "16") (term "1,0,1,0,0,1,0,0,1,0,0"))
      (rule "add_zero_right" (formula "16") (term "0,1,0,0,1,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1,0,0,1,0,0"))
      (rule "mul_literals" (formula "16") (term "1,1,0,0,1,0,0,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,1,0,0,0,0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,0,0,0,0,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,0,0,1,0,0,0,1,0,0"))
      (rule "applyEq_or_int5" (formula "16") (term "0,0,1,0,0,0,1,0,0"))
      (rule "inEqSimp_homoInEq1" (formula "16") (term "1,0,0,1,0,0,0,1,0,0"))
      (rule "mul_literals" (formula "16") (term "1,0,1,0,0,1,0,0,0,1,0,0"))
      (rule "add_zero_right" (formula "16") (term "0,1,0,0,1,0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1,0,0,0,1,0,0"))
      (rule "mul_literals" (formula "16") (term "1,1,0,0,1,0,0,0,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,0,0,0,1,0,0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,1,0,0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,1,0,0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,0,1,0,0,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,0,1,0,0,0,0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,0,0,0,0,0,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,0,0,0,1,0,0,0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,1,0,0,0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,1,0,0,0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,0,1,0,0,0,1,0,0"))
      (rule "inEqSimp_or_tautInEq2" (formula "16") (term "0,0,0,0,0,1,0,0,0,1,0,0"))
      (rule "add_zero_right" (formula "16") (term "1,1,0,0,0,0,0,1,0,0,0,1,0,0"))
      (rule "qeq_literals" (formula "16") (term "1,0,0,0,0,0,1,0,0,0,1,0,0"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "shift_paren_or" (formula "16") (term "0,0,0,1,0,0,0,1,0,0"))
      (rule "commute_or" (formula "16") (term "0,0,0,0,0,0,0,0,1,0,0"))
      (rule "shift_paren_and" (formula "16") (term "0,0"))
      (rule "shift_paren_and" (formula "16") (term "0,0,0"))
      (rule "shift_paren_and" (formula "16") (term "0,0,0,0"))
      (rule "shift_paren_and" (formula "16") (term "0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "commute_and" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0"))
      (rule "ifthenelse_to_or_right2" (formula "16") (term "0,0,0,0,0,1,0,0"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "nnf_notOr" (formula "16") (term "1,1,0,0,0,0,0,1,0,0"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "nnf_notAnd" (formula "16") (term "0,0,0,0,0,0,0,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0,0,0,0,0,0,1,0,0"))
      (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0,0,0,0,0,0,1,0,0"))
      (rule "add_zero_right" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,0,0,0,0,1,0,0"))
      (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0,0,0,0,1,0,0"))
      (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0,0,0,0,0,0,1,0,0"))
      (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0,0,0,0,0,0,1,0,0"))
      (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0,0,0,0,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,0,0,0,0,0,1,0,0"))
      (rule "add_literals" (formula "16") (term "0,0,0,1,0,0,0,0,0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "16") (term "0,0,1,0,0,0,0,0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0,0,0,0,0,0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0,0,0,0,1,0,0"))
      (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0,0,0,0,1,0,0"))
      (rule "commute_or" (formula "16") (term "0,0,0,0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,1,1,0,0"))
      (rule "commute_or" (formula "16") (term "0,0,1,1,0,0"))
      (rule "commute_and_2" (formula "16") (term "1,1,1,1,0,0"))
      (rule "cnf_rightDist" (formula "16") (term "1,1,1,0,0"))
      (rule "cnf_rightDist" (formula "16") (term "1,1,1,1,0,0"))
      (rule "commute_or" (formula "16") (term "0,1,1,1,1,0,0"))
      (rule "commute_and" (formula "16") (term "1,0,1,1,1,0,0"))
      (rule "cnf_rightDist" (formula "16") (term "0,1,1,1,0,0"))
      (rule "commute_or" (formula "16") (term "0,0,1,1,1,0,0"))
      (rule "cnf_rightDist" (formula "16") (term "1,0,1,1,1,0,0"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "commute_or" (formula "16") (term "1,1,0,1,1,1,0,0"))
      (rule "cnf_rightDist" (formula "16") (term "0,0,1,1,1,0,0"))
      (rule "commute_or" (formula "16") (term "1,0,0,1,1,1,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,1,1,1,0,0"))
      (rule "commute_and" (formula "16") (term "0,0,1,1,1,0,0"))
      (rule "shift_paren_and" (formula "16") (term "1,1,1,0,0"))
      (rule "cnf_rightDist" (formula "16") (term "1,0,0"))
      (rule "commute_or" (formula "16") (term "1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,1,0,0"))
      (rule "cnf_rightDist" (formula "16") (term "1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "1,1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,0,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,1,1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,1,1,1,0,0"))
      (rule "cnf_rightDist" (formula "16") (term "0,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "1,0,1,1,0,0"))
      (rule "commute_or" (formula "16") (term "0,0,0,0,0,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,1,0,1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,1,0,1,1,0,0"))
      (rule "cnf_rightDist" (formula "16") (term "0,0,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "1,0,0,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,0,0,1,1,1,0,0"))
      (rule "applyEq_or_int5" (formula "16") (term "0,0,1,1,1,0,0"))
      (rule "inEqSimp_homoInEq1" (formula "16") (term "1,0,0,1,1,1,0,0"))
      (rule "polySimp_addComm1" (formula "16") (term "0,1,0,0,1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1,1,1,0,0"))
      (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,1,1,1,0,0"))
      (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,1,1,1,0,0"))
      (rule "mul_literals" (formula "16") (term "0,1,1,0,0,1,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,1,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,1,0,0,1,1,0,0"))
      (rule "cnf_rightDist" (formula "16") (term "0,0,0,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "1,0,0,0,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,0,0,1,0,1,1,0,0"))
      (rule "applyEq_or_int5" (formula "16") (term "0,0,1,0,1,1,0,0"))
      (rule "inEqSimp_homoInEq1" (formula "16") (term "1,0,0,1,0,1,1,0,0"))
      (rule "polySimp_addComm1" (formula "16") (term "0,1,0,0,1,0,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1,0,1,1,0,0"))
      (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,1,0,1,1,0,0"))
      (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,1,0,1,1,0,0"))
      (rule "mul_literals" (formula "16") (term "0,1,1,0,0,1,0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,1,0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,1,0,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,0,0,0,1,1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,1,1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,1,1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,0,1,1,1,0,0"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "shift_paren_or" (formula "16") (term "0,0,1,0,0,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,1,0,0,0,1,1,0,0"))
      (rule "cnf_rightDist" (formula "16") (term "0,0,0,0,1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,0,0,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "1,0,0,0,0,1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,0,0,0,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,0,0,0,1,0,1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,1,0,1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,1,0,1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,0,1,0,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,0,0,1,0,0,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,0,1,0,0,0,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,1,0,0,0,0,1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,0,0,0,0,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,0,0,1,0,0,0,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,0,1,0,0,0,0,1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,0,0,0,0,0,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,0,0,1,0,0,0,0,1,1,0,0"))
      (rule "shift_paren_and" (formula "16") (term "1,0,0"))
      (rule "shift_paren_and" (formula "16") (term "0,1,0,0"))
      (rule "shift_paren_and" (formula "16") (term "0,0,1,0,0"))
      (rule "shift_paren_and" (formula "16") (term "0,0,0,1,0,0"))
      (rule "shift_paren_and" (formula "16") (term "0,0,0,0,1,0,0"))
      (rule "shift_paren_and" (formula "16") (term "0,0"))
      (rule "shift_paren_and" (formula "16") (term "0,0,0"))
      (rule "shift_paren_and" (formula "16") (term "0,0,0,0"))
      (rule "shift_paren_and" (formula "16") (term "0,0,0,0,0"))
      (rule "shift_paren_and" (formula "16") (term "0,0,0,0,0,0"))
      (rule "shift_paren_and" (formula "16") (term "0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0"))
      (rule "commute_or" (formula "16") (term "0,0,0,0,1,0,0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0,0"))
      (rule "commute_and_2" (formula "16") (term "0,0"))
      (rule "ifthenelse_to_or_left2" (formula "16") (term "0,0,0,0,0,0,0,1,0,0"))
      (rule "eqSymm" (formula "16") (term "0,1,1,0,0,0,0,0,0,0,1,0,0"))
      (rule "nnf_notAnd" (formula "16") (term "0,0,0,0,0,0,0,0,0,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,1,0,0"))
      (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0"))
      (rule "add_zero_right" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,1,0,0"))
      (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0,0,0,0,0,0,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "16") (term "1,0,0,0,0,0,0,0,0,0,1,0,0"))
      (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0"))
      (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,0,0,0,0,0,0,0,1,0,0"))
      (rule "add_literals" (formula "16") (term "0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "16") (term "0,0,1,0,0,0,0,0,0,0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,0,0,0,0,0,0,0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0,0,0,0,0,0,1,0,0"))
      (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0,0,0,0,0,0,1,0,0"))
      (rule "commute_or" (formula "16") (term "0,0,0,0,0,0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,0,0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,1,1,0,0"))
      (rule "commute_or" (formula "16") (term "1,1,1,0,0"))
      (rule "commute_or" (formula "16") (term "0,0,1,1,0,0"))
      (rule "cnf_rightDist" (formula "16") (term "1,1,1,0,0"))
      (rule "cnf_rightDist" (formula "16") (term "1,0,0"))
      (rule "commute_or" (formula "16") (term "1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,1,0,0"))
      (rule "commute_or" (formula "16") (term "1,1,1,1,0,0"))
      (rule "cnf_rightDist" (formula "16") (term "1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "1,1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,0,0,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,1,1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,0,1,0,0"))
      (rule "applyEq_or_int7" (formula "16") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,0,0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,1,1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,0,1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,0,0,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,0,0,1,1,1,0,0"))
      (rule "applyEq_or_int5" (formula "16") (term "0,0,1,1,1,0,0"))
      (rule "inEqSimp_homoInEq1" (formula "16") (term "1,0,0,1,1,1,0,0"))
      (rule "polySimp_addComm1" (formula "16") (term "0,1,0,0,1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1,1,1,0,0"))
      (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,1,1,1,0,0"))
      (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,1,1,1,0,0"))
      (rule "mul_literals" (formula "16") (term "0,1,1,0,0,1,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,1,1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,0,0,1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,0,0,0,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,0,0,0,1,1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,0,0,0,1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,0,0,0,0,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,0,0,0,0,1,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,0,0,0,0,0,0,1,1,0,0"))
      (rule "shift_paren_or" (formula "16") (term "0,0,0,0,0,0,0,0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,0,0,1,0,0"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "commute_or" (formula "16") (term "0,0,0,0,0,0,0,0,1,0,0"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "commute_or" (formula "16") (term "0,0,0,0,0,0,0,0,1,1,0,0"))
      (rule "inEqSimp_or_tautInEq1" (formula "16") (term "0,0,0,0,0,0,0,1,1,0,0"))
      (rule "add_zero_right" (formula "16") (term "1,1,0,0,0,0,0,0,0,1,1,0,0"))
      (rule "qeq_literals" (formula "16") (term "1,0,0,0,0,0,0,0,1,1,0,0"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "shift_paren_or" (formula "16") (term "0,0,0,0,0,0,1,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,1,1,0,0"))
      (rule "shift_paren_and" (formula "16") (term "0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,1,0,0"))
      (rule "commute_or_2" (formula "16") (term "0,0,0,0,1,0,0"))
      (rule "inEqSimp_or_tautInEq3" (formula "16") (term "0,0,0,0,0,1,0,0"))
      (rule "inEqSimp_homoInEq1" (formula "16") (term "1,0,0,0,0,0,1,0,0"))
      (rule "polySimp_pullOutFactor1" (formula "16") (term "0,1,0,0,0,0,0,1,0,0"))
      (rule "add_literals" (formula "16") (term "1,0,1,0,0,0,0,0,1,0,0"))
      (rule "times_zero_1" (formula "16") (term "0,1,0,0,0,0,0,1,0,0"))
      (rule "leq_literals" (formula "16") (term "1,0,0,0,0,0,1,0,0"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "throwUnfold" (formula "20") (term "1") (inst "#v0=n"))
      (rule "variableDeclarationAssign" (formula "20") (term "1"))
      (rule "variableDeclaration" (formula "20") (term "1") (newnames "n"))
      (builtin "Use Operation Contract" (formula "20") (newnames "heapBefore_NullPointerException,self_0,exc_0,heapAfter_NullPointerException,anon_heap_NullPointerException") (contract "java.lang.NullPointerException[java.lang.NullPointerException::NullPointerException()].JML normal_behavior operation contract.0"))
      (branch "Post (NullPointerException)"
         (builtin "One Step Simplification" (formula "18"))
         (builtin "One Step Simplification" (formula "22"))
         (rule "andLeft" (formula "18"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1,1,0,1,0") (ifseqformula "18"))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "20"))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "20"))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "21"))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "20"))
         (rule "notLeft" (formula "19"))
         (rule "notLeft" (formula "19"))
         (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "25"))
         (builtin "One Step Simplification" (formula "19"))
         (rule "assignment" (formula "30") (term "1"))
         (builtin "One Step Simplification" (formula "30"))
         (rule "pullOutSelect" (formula "22") (term "0") (inst "selectSK=java_lang_Throwable_cause_0"))
         (rule "simplifySelectOfAnonEQ" (formula "22") (ifseqformula "18"))
         (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "27")) (ifInst ""  (formula "26")))
         (rule "applyEqReverse" (formula "23") (term "0") (ifseqformula "22"))
         (rule "hideAuxiliaryEq" (formula "22"))
         (rule "pullOutSelect" (formula "21") (term "0") (inst "selectSK=java_lang_Throwable_message_0"))
         (rule "simplifySelectOfAnonEQ" (formula "21") (ifseqformula "18"))
         (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "27")) (ifInst ""  (formula "26")))
         (rule "applyEqReverse" (formula "22") (term "0") (ifseqformula "21"))
         (rule "hideAuxiliaryEq" (formula "21"))
         (rule "commuteUnion" (formula "18") (term "1,0"))
         (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0"))
         (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0"))
         (rule "commute_and_2" (formula "16") (term "0,0,0,0,0"))
         (rule "commute_and_2" (formula "16") (term "0,0,0,0"))
         (rule "commute_and_2" (formula "16") (term "0,0,0"))
         (rule "commute_and_2" (formula "16") (term "0,0"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0") (ifseqformula "17"))
         (rule "replace_known_left" (formula "21") (term "0") (ifseqformula "22"))
         (builtin "One Step Simplification" (formula "21"))
         (rule "true_left" (formula "21"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0") (ifseqformula "17"))
         (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "23"))
         (builtin "One Step Simplification" (formula "22"))
         (rule "true_left" (formula "22"))
         (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0"))
         (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0"))
         (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0"))
         (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0"))
         (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0"))
         (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0"))
         (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0"))
         (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0"))
         (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0"))
         (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,0"))
         (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0"))
         (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0"))
         (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,0"))
         (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0"))
         (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,0"))
         (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "commute_and_2" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "methodCallThrow" (formula "30") (term "1"))
         (builtin "One Step Simplification" (formula "30"))
         (rule "throwBox" (formula "30") (term "1"))
         (rule "closeTrue" (formula "30"))
      )
      (branch "Exceptional Post (NullPointerException)"
         (builtin "One Step Simplification" (formula "18"))
         (builtin "One Step Simplification" (formula "22"))
         (rule "andLeft" (formula "18"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1,0,0") (ifseqformula "18"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1,1,0,1,0") (ifseqformula "18"))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "20"))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "21"))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "21"))
         (rule "andLeft" (formula "23"))
         (rule "notLeft" (formula "19"))
         (rule "close" (formula "26") (ifseqformula "25"))
      )
      (branch "Pre (NullPointerException)"
         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "2")))
         (rule "closeTrue" (formula "20"))
      )
   )
)
)

}
