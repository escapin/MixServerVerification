\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Jul 17 23:32:04 CEST 2017
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=\\#begexpand_inByte\\#end,\\#begexpand_inChar\\#end,\\#begexpand_inShort\\#end,\\#begexpand_inInt\\#end,\\#begexpand_inLong\\#end
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=5000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Mon Jul 17 23:32:04 CEST 2017
name=verif.functionalities.pkienc.Decryptor[verif.functionalities.pkienc.Decryptor\\:\\:decrypt([B)].JML behavior operation contract.0
contract=verif.functionalities.pkienc.Decryptor[verif.functionalities.pkienc.Decryptor\\:\\:decrypt([B)].JML behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mihai" ) (keyVersion "0814267c8a184b1e7da1309b7a9875095ca72975"))

(autoModeTime "322")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "message,self,result,exc,heapAtPre,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "assignment" (formula "10") (term "1") (userinteraction))
(rule "methodBodyExpand" (formula "10") (term "1,1") (newnames "heapBefore_decrypt,savedHeapBefore_decrypt") (userinteraction))
(rule "variableDeclarationAssign" (formula "10") (term "1,1,1") (userinteraction))
(rule "variableDeclaration" (formula "10") (term "1,1,1") (newnames "messageCopy") (userinteraction))
(builtin "One Step Simplification" (formula "10"))
(builtin "Use Operation Contract" (formula "10") (newnames "heapBefore_copyOf,result_0,exc_0") (contract "verif.utils.MessageTools[verif.utils.MessageTools::copyOf([B)].JML normal_behavior operation contract.0#verif.utils.MessageTools[verif.utils.MessageTools::copyOf([B)].JML normal_behavior operation contract.1"))
(branch "Post (copyOf)"
   (rule "assignment" (formula "11") (term "1") (userinteraction))
   (rule "variableDeclarationAssign" (formula "11") (term "1,1") (userinteraction))
   (rule "variableDeclaration" (formula "11") (term "1,1") (newnames "plain") (userinteraction))
   (builtin "One Step Simplification" (formula "11"))
   (rule "methodCallWithAssignmentUnfoldTarget" (formula "11") (term "1") (inst "#v0=e") (userinteraction))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "e") (userinteraction))
   (rule "assignment_read_attribute_this" (formula "11") (term "1") (userinteraction))
   (builtin "One Step Simplification" (formula "11"))
   (builtin "Use Operation Contract" (formula "11") (newnames "heapBefore_lookup,result_1,exc_1") (contract "verif.functionalities.pkienc.Decryptor.EncryptionLog[verif.functionalities.pkienc.Decryptor.EncryptionLog::lookup([B)].JML normal_behavior operation contract.0"))
   (branch "Post (lookup)"
      (rule "assignment" (formula "12") (term "1") (userinteraction))
      (builtin "One Step Simplification" (formula "9"))
      (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "11")) (ifInst ""  (formula "11")))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "12"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "10"))
      (rule "notLeft" (formula "11"))
      (rule "notLeft" (formula "10"))
      (rule "cut_direct" (formula "12") (term "0") (userinteraction))
      (branch "CUT: result_1 = null TRUE"
         (builtin "One Step Simplification" (formula "13"))
         (rule "exLeft" (formula "6") (inst "sk=i_0") (userinteraction))
         (rule "instAll" (formula "6") (term "1,0,0,0") (ifseqformula "13") (userinteraction))
         (builtin "One Step Simplification" (formula "7"))
         (builtin "One Step Simplification" (formula "22"))
         (rule "andLeft" (formula "7"))
         (rule "andLeft" (formula "7"))
         (rule "eqSymm" (formula "17") (term "1,1,0,1"))
         (rule "eqSymm" (formula "17") (term "0,1,0,1"))
         (rule "eqSymm" (formula "10"))
         (rule "eqSymm" (formula "6") (term "0,1"))
         (rule "eqSymm" (formula "16") (term "0,1,0"))
         (rule "eqSymm" (formula "24") (term "1,1,0,0,1,0,0,0,1"))
         (rule "eqSymm" (formula "24") (term "1,0,0,1,0,1"))
         (rule "eqSymm" (formula "24") (term "0,1,0,0,1,0,0,0,1"))
         (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "21"))
         (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "20")))
         (rule "closeFalse" (formula "12"))
      )
      (branch "CUT: result_1 = null FALSE"
         (builtin "One Step Simplification" (formula "12"))
         (rule "true_left" (formula "12"))
         (builtin "One Step Simplification" (formula "6"))
         (builtin "One Step Simplification" (formula "20"))
         (rule "exLeft" (formula "6") (inst "sk=i_1"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "eqSymm" (formula "14") (term "1,1,0,1"))
         (rule "eqSymm" (formula "9"))
         (rule "eqSymm" (formula "14") (term "0,1,0,1"))
         (rule "eqSymm" (formula "22") (term "1,1,0,0,1,0,0,0,1"))
         (rule "eqSymm" (formula "22") (term "0,1,0,0,1,0,0,0,1"))
         (rule "eqSymm" (formula "22") (term "1,0,0,1,0,1"))
         (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "17"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "19"))
         (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "18")))
         (rule "closeFalse" (formula "11"))
      )
   )
   (branch "Exceptional Post (lookup)"
      (builtin "One Step Simplification" (formula "9"))
      (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "11")) (ifInst ""  (formula "11")))
      (builtin "One Step Simplification" (formula "6"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "13"))
      (rule "notLeft" (formula "11"))
      (rule "close" (formula "15") (ifseqformula "14"))
   )
   (branch "Pre (lookup)"
      (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "10")) (ifInst ""  (formula "10")))
      (builtin "One Step Simplification" (formula "6"))
      (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "7")) (ifInst ""  (formula "10")) (ifInst ""  (formula "1")) (ifInst ""  (formula "10")))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "9"))
      (rule "notLeft" (formula "10"))
      (rule "notLeft" (formula "9"))
      (rule "exLeft" (formula "6") (inst "sk=i_3"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "eqSymm" (formula "9"))
      (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "16"))
      (builtin "One Step Simplification" (formula "4"))
      (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "13"))
      (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "14")))
      (rule "closeFalse" (formula "10"))
   )
   (branch "Null reference (e = null)"
      (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "10")) (ifInst ""  (formula "10")))
      (builtin "One Step Simplification" (formula "6"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "andLeft" (formula "8"))
      (rule "notRight" (formula "12"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "10"))
      (rule "notLeft" (formula "11"))
      (rule "notLeft" (formula "10"))
      (rule "exLeft" (formula "7") (inst "sk=i_2"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "eqSymm" (formula "10"))
      (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "17"))
      (builtin "One Step Simplification" (formula "5"))
      (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "15"))
      (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "14")))
      (rule "closeFalse" (formula "11"))
   )
)
(branch "Exceptional Post (copyOf)"
   (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "10")) (ifInst ""  (formula "10")))
   (builtin "One Step Simplification" (formula "6"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "10"))
   (rule "notLeft" (formula "8"))
   (rule "close" (formula "12") (ifseqformula "11"))
)
(branch "Pre (copyOf)"
   (builtin "One Step Simplification" (formula "6"))
   (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "1")) (ifInst ""  (formula "9")))
   (rule "exLeft" (formula "6") (inst "sk=i_4"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "eqSymm" (formula "9"))
   (rule "replace_known_right" (formula "4") (term "1") (ifseqformula "12"))
   (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "11")))
   (rule "closeFalse" (formula "4"))
)
)

}
