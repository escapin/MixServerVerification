\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Jul 12 09:01:59 CEST 2017
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=5000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , permissions-permissions\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Wed Jul 12 09:01:59 CEST 2017
name=verif.utils.MessageTools[verif.utils.MessageTools\\:\\:equal([B,[B)].JML normal_behavior operation contract.0
contract=verif.utils.MessageTools[verif.utils.MessageTools\\:\\:equal([B,[B)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mihai" ) (keyVersion "6bc7ade97061383f11985e24decf735b7f2f0af2"))
(keyLog "1" (keyUser "mihai" ) (keyVersion "0814267c8a184b1e7da1309b7a9875095ca72975"))

(autoModeTime "2853")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "a,b,result,exc,heapAtPre,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "4"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "eqSymm" (formula "7") (term "0,0,0,1"))
(rule "eqSymm" (formula "7") (term "0,0,1,0,1"))
(rule "eqSymm" (formula "7") (term "0,0,0,0,0,1"))
(rule "replace_known_right" (formula "3") (term "0") (ifseqformula "6"))
(builtin "One Step Simplification" (formula "3"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "5"))
(builtin "One Step Simplification" (formula "2"))
(rule "assignment" (formula "7") (term "1"))
(builtin "One Step Simplification" (formula "7"))
(rule "array2seqDef" (formula "7") (term "0,0,0,0,0,0,1") (inst "u=u"))
(rule "array2seqDef" (formula "7") (term "1,0,0,0,0,0,1") (inst "u=u"))
(rule "eqSeqDef" (formula "7") (term "0,0,0,0,0,1") (inst "iv=iv"))
(rule "lenOfSeqDef" (formula "7") (term "1,1,0,0,1,0,0,0,0,0,1"))
(rule "polySimp_elimSub" (formula "7") (term "1,1,1,0,0,1,0,0,0,0,0,1"))
(rule "mul_literals" (formula "7") (term "1,1,1,1,0,0,1,0,0,0,0,0,1"))
(rule "add_zero_right" (formula "7") (term "1,1,1,0,0,1,0,0,0,0,0,1"))
(rule "getOfSeqDef" (formula "7") (term "0,1,0,1,0,0,0,0,0,1"))
(rule "castDel" (formula "7") (term "2,0,1,0,1,0,0,0,0,0,1"))
(rule "castDel" (formula "7") (term "1,0,1,0,1,0,0,0,0,0,1"))
(rule "add_zero_right" (formula "7") (term "0,2,1,0,1,0,1,0,0,0,0,0,1"))
(rule "eqSymm" (formula "7") (term "1,0,1,0,0,0,0,0,1"))
(rule "polySimp_elimSub" (formula "7") (term "1,1,0,1,1,0,1,0,0,0,0,0,1"))
(rule "mul_literals" (formula "7") (term "1,1,1,0,1,1,0,1,0,0,0,0,0,1"))
(rule "add_zero_right" (formula "7") (term "1,1,0,1,1,0,1,0,0,0,0,0,1"))
(rule "lenOfSeqDef" (formula "7") (term "1,0,0,0,0,0,0,1"))
(rule "polySimp_elimSub" (formula "7") (term "1,1,0,0,0,0,0,0,1"))
(rule "times_zero_2" (formula "7") (term "1,1,1,0,0,0,0,0,0,1"))
(rule "add_zero_right" (formula "7") (term "1,1,0,0,0,0,0,0,1"))
(rule "lenOfSeqDef" (formula "7") (term "0,0,0,0,0,0,0,1"))
(rule "polySimp_elimSub" (formula "7") (term "1,0,0,0,0,0,0,0,1"))
(rule "times_zero_2" (formula "7") (term "1,1,0,0,0,0,0,0,0,1"))
(rule "add_zero_right" (formula "7") (term "1,0,0,0,0,0,0,0,1"))
(rule "getOfSeqDef" (formula "7") (term "0,1,0,1,0,0,0,0,0,1"))
(rule "castDel" (formula "7") (term "2,0,1,0,1,0,0,0,0,0,1"))
(rule "castDel" (formula "7") (term "1,0,1,0,1,0,0,0,0,0,1"))
(rule "add_zero_right" (formula "7") (term "0,2,1,0,1,0,1,0,0,0,0,0,1"))
(rule "eqSymm" (formula "7") (term "1,0,1,0,0,0,0,0,1"))
(rule "polySimp_elimSub" (formula "7") (term "1,1,0,1,1,0,1,0,0,0,0,0,1"))
(rule "mul_literals" (formula "7") (term "1,1,1,0,1,1,0,1,0,0,0,0,0,1"))
(rule "add_zero_right" (formula "7") (term "1,1,0,1,1,0,1,0,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "0,1,1,0,0,1,0,0,0,0,0,1"))
(rule "add_zero_right" (formula "7") (term "0,0,1,1,0,0,1,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,1,0,0,1,0,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "0,1,0,0,0,0,0,0,1"))
(rule "add_zero_right" (formula "7") (term "0,0,1,0,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,0,0,0,0,0,0,1"))
(rule "add_zero_right" (formula "7") (term "0,0,0,0,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,1,0,1,0,0,0,0,0,1"))
(rule "eqSymm" (formula "7") (term "1,0,1,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,1,1,0,1,0,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,1,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0,1,0,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,1,0,1,0,0,0,0,0,1"))
(rule "eqSymm" (formula "7") (term "1,0,1,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,1,1,0,1,0,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,1,0,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,1,1,0,1,0,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,1,0,1,0,0,0,0,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,1,0,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "7") (term "0,0,1,0,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "7") (term "0,0,1,0,0,0,0,0,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,0,0,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "7") (term "0,0,0,0,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "7") (term "0,0,0,0,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,1,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0,1,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "7") (term "1,1,0,0,1,0,0,0,0,0,1"))
(rule "mul_literals" (formula "7") (term "0,1,1,0,0,1,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0,1,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0,1,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,1,0,1,0,0,0,0,0,1"))
(rule "eqSymm" (formula "7") (term "1,0,1,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "7") (term "1,1,0,1,1,0,1,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "7") (term "1,1,0,1,1,0,1,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,1,1,0,1,0,0,0,0,0,1"))
(rule "mul_literals" (formula "7") (term "0,1,1,0,1,1,0,1,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,1,1,0,1,0,0,0,0,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,1,1,1,0,0,1,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "7") (term "0,0,1,1,1,0,0,1,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "7") (term "0,0,1,1,1,0,0,1,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,1,0,1,0,0,0,0,0,1"))
(rule "eqSymm" (formula "7") (term "1,0,1,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "7") (term "1,1,0,1,1,0,1,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "7") (term "1,1,0,1,1,0,1,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,1,1,0,1,0,0,0,0,0,1"))
(rule "mul_literals" (formula "7") (term "0,1,1,0,1,1,0,1,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,1,1,0,1,0,0,0,0,0,1"))
(rule "nnf_imp2or" (formula "7") (term "0,1,0,0,0,0,0,1"))
(rule "nnf_notAnd" (formula "7") (term "0,0,1,0,0,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "7") (term "0,0,0,1,0,0,0,0,0,1"))
(rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0,1,0,0,0,0,0,1"))
(rule "add_zero_right" (formula "7") (term "0,0,0,0,0,1,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0,1,0,0,0,0,0,1"))
(rule "mul_literals" (formula "7") (term "1,0,0,0,1,0,0,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "7") (term "1,0,0,1,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0,1,0,0,0,0,0,1"))
(rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0,1,0,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0,1,0,0,0,0,0,1"))
(rule "add_literals" (formula "7") (term "0,0,0,1,0,0,1,0,0,0,0,0,1"))
(rule "add_zero_left" (formula "7") (term "0,0,1,0,0,1,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0,1,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,1,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,1,0,0,0,0,0,1"))
(rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_equal,savedHeapBefore_equal,_aBefore_equal,_bBefore_equal"))
(builtin "One Step Simplification" (formula "7"))
(rule "ifElseUnfold" (formula "7") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "x"))
(rule "compound_assignment_3_nonsimple" (formula "7") (term "1"))
(rule "ifElseUnfold" (formula "7") (term "1") (inst "#boolv=x_1"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "x_1"))
(rule "compound_assignment_2" (formula "7") (term "1") (inst "#v=x_2"))
(rule "variableDeclarationAssign" (formula "7") (term "1"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "x_2"))
(rule "inequality_comparison_simple" (formula "7") (term "1"))
(builtin "One Step Simplification" (formula "7"))
(rule "replace_known_right" (formula "7") (term "0,0,1,0") (ifseqformula "5"))
(builtin "One Step Simplification" (formula "7"))
(rule "compound_assignment_1_new" (formula "7") (term "1"))
(builtin "One Step Simplification" (formula "7"))
(rule "ifElseSplit" (formula "7"))
(branch "if x_1 true"
   (builtin "One Step Simplification" (formula "8"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
(branch "if x_1 false"
   (builtin "One Step Simplification" (formula "8"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "inequality_comparison_simple" (formula "7") (term "1"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "replace_known_right" (formula "7") (term "0,0,1,0") (ifseqformula "6"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "blockEmpty" (formula "7") (term "1"))
   (rule "ifElseSplit" (formula "7"))
   (branch "if x true"
      (builtin "One Step Simplification" (formula "8"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "ifUnfold" (formula "7") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "7") (term "1") (newnames "x_3"))
      (rule "compound_inequality_comparison_2" (formula "7") (term "1") (inst "#v1=x_5") (inst "#v0=x_4"))
      (rule "variableDeclarationAssign" (formula "7") (term "1"))
      (rule "variableDeclaration" (formula "7") (term "1") (newnames "x_4"))
      (rule "assignment_read_length" (formula "7") (term "1"))
      (branch "Normal Execution (_a != null)"
         (builtin "One Step Simplification" (formula "8"))
         (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "5")))
         (rule "false_right" (formula "7"))
         (rule "variableDeclarationAssign" (formula "7") (term "1"))
         (rule "variableDeclaration" (formula "7") (term "1") (newnames "x_5"))
         (rule "assignment_read_length" (formula "7") (term "1"))
         (branch "Normal Execution (_b != null)"
            (builtin "One Step Simplification" (formula "8"))
            (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "6")))
            (rule "false_right" (formula "7"))
            (rule "inequality_comparison_simple" (formula "7") (term "1"))
            (builtin "One Step Simplification" (formula "7"))
            (rule "eqSymm" (formula "7") (term "0,0,1,0"))
            (rule "ifSplit" (formula "7"))
            (branch "if x_3 true"
               (builtin "One Step Simplification" (formula "8"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "methodCallReturn" (formula "8") (term "1"))
               (builtin "One Step Simplification" (formula "8"))
               (rule "assignment" (formula "8") (term "1"))
               (builtin "One Step Simplification" (formula "8"))
               (rule "methodCallEmpty" (formula "8") (term "1"))
               (rule "tryEmpty" (formula "8") (term "1"))
               (rule "emptyModality" (formula "8") (term "1"))
               (builtin "One Step Simplification" (formula "8"))
               (rule "notRight" (formula "8"))
               (rule "andLeft" (formula "1"))
               (rule "narrowSelectArrayType" (formula "2") (term "1,1,1,0") (ifseqformula "3") (ifseqformula "8"))
               (rule "narrowSelectArrayType" (formula "2") (term "1,0,1,0") (ifseqformula "3") (ifseqformula "9"))
               (rule "applyEq" (formula "2") (term "1,1,0,0") (ifseqformula "1"))
               (rule "commute_or_2" (formula "2") (term "0"))
               (rule "commute_or" (formula "2") (term "0,0"))
               (rule "ifthenelse_to_or_left" (formula "2") (term "0,0,0"))
               (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
               (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "nnf_notAnd" (formula "2") (term "0,0,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,0,0,0"))
               (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,0,0,0"))
               (rule "add_literals" (formula "2") (term "0,0,0,1,0,0,0,0,0"))
               (rule "add_zero_left" (formula "2") (term "0,0,1,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0,0,0,0"))
               (rule "times_zero_1" (formula "2") (term "1,0,0,0,0,0,0,0,0"))
               (rule "add_literals" (formula "2") (term "0,0,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0,0,0,0"))
               (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0,0"))
               (rule "nnf_notAnd" (formula "2") (term "0,1,1,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "2") (term "0,0,1,1,0,0,0"))
               (rule "times_zero_1" (formula "2") (term "1,0,0,0,0,1,1,0,0,0"))
               (rule "add_literals" (formula "2") (term "0,0,0,0,1,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,1,1,0,0,0"))
               (rule "mul_literals" (formula "2") (term "1,0,0,1,1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "2") (term "1,0,1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,1,1,0,0,0"))
               (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,1,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,1,1,0,0,0"))
               (rule "add_literals" (formula "2") (term "0,0,0,1,0,1,1,0,0,0"))
               (rule "add_zero_left" (formula "2") (term "0,0,1,0,1,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "2") (term "1,1,0,1,1,0,0,0"))
               (rule "commute_or" (formula "2") (term "0,0"))
               (rule "commute_or_2" (formula "2") (term "0"))
               (rule "commute_or" (formula "2") (term "1,1,0"))
               (rule "commute_or_2" (formula "2") (term "0,1,0"))
               (rule "commute_or_2" (formula "2") (term "0,1,1,0"))
               (rule "commute_or" (formula "2") (term "0,0,1,0"))
               (rule "commute_or" (formula "2") (term "0,0,1,1,0"))
               (rule "cnf_rightDist" (formula "2") (term "1,1,0"))
               (rule "commute_or" (formula "2") (term "1,1,1,0"))
               (rule "cnf_rightDist" (formula "2") (term "0"))
               (rule "distr_forallAnd" (formula "2"))
               (rule "andLeft" (formula "2"))
               (rule "commute_or" (formula "3") (term "0"))
               (rule "commute_or_2" (formula "2") (term "0"))
               (rule "commute_or_2" (formula "3") (term "0,1,0"))
               (rule "inEqSimp_or_tautInEq1" (formula "3") (term "0,0,1,0"))
               (rule "add_zero_right" (formula "3") (term "1,1,0,0,1,0"))
               (rule "qeq_literals" (formula "3") (term "1,0,0,1,0"))
               (builtin "One Step Simplification" (formula "3"))
               (rule "commute_or_2" (formula "3") (term "0"))
               (rule "shift_paren_or" (formula "2") (term "0,0"))
               (rule "shift_paren_or" (formula "3") (term "0,0"))
               (rule "shift_paren_or" (formula "2") (term "0,0,0"))
               (rule "shift_paren_or" (formula "3") (term "0,0,0"))
               (rule "commute_or" (formula "2") (term "0,0,0,0"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
               (rule "commute_or" (formula "3") (term "0,0,0,0,0"))
               (builtin "One Step Simplification" (formula "3"))
               (rule "ifthenelse_to_or_left" (formula "2") (term "0,0,0,0"))
               (rule "eqSymm" (formula "2") (term "1,0,0,0,0,0"))
               (rule "eqSymm" (formula "2") (term "1,1,0,0,0,0"))
               (rule "nnf_notAnd" (formula "2") (term "0,0,0,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,0,0,0,0"))
               (rule "add_literals" (formula "2") (term "0,0,0,1,0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "2") (term "0,0,1,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0,0,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0,0,0,0,0"))
               (rule "times_zero_1" (formula "2") (term "1,0,0,0,0,0,0,0,0,0"))
               (rule "add_literals" (formula "2") (term "0,0,0,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0,0,0"))
               (rule "commute_or" (formula "2") (term "0,0,0"))
               (rule "commute_or_2" (formula "2") (term "0,0"))
               (rule "commute_or_2" (formula "2") (term "0"))
               (rule "commute_or" (formula "2") (term "1,1,0"))
               (rule "cnf_rightDist" (formula "2") (term "1,1,0"))
               (rule "cnf_rightDist" (formula "2") (term "0"))
               (rule "distr_forallAnd" (formula "2"))
               (rule "andLeft" (formula "2"))
               (rule "commute_or" (formula "3") (term "0"))
               (rule "shift_paren_or" (formula "2") (term "0"))
               (rule "commute_or_2" (formula "2") (term "0,0"))
               (rule "commute_or" (formula "3") (term "1,1,0"))
               (rule "commute_or_2" (formula "2") (term "0,0,0"))
               (rule "cnf_rightDist" (formula "3") (term "0"))
               (rule "distr_forallAnd" (formula "3"))
               (rule "andLeft" (formula "3"))
               (rule "commute_or_2" (formula "3") (term "0"))
               (rule "shift_paren_or" (formula "4") (term "0"))
               (rule "commute_or_2" (formula "3") (term "0,0"))
               (rule "shift_paren_or" (formula "4") (term "0,0"))
               (rule "commute_or_2" (formula "4") (term "0,0,0"))
               (rule "shift_paren_or" (formula "3") (term "0,0,0"))
               (rule "commute_or" (formula "3") (term "0,0,0,0"))
               (rule "inEqSimp_or_tautInEq1" (formula "3") (term "0,0,0"))
               (rule "add_zero_right" (formula "3") (term "1,1,0,0,0"))
               (rule "qeq_literals" (formula "3") (term "1,0,0,0"))
               (builtin "One Step Simplification" (formula "3"))
               (rule "true_left" (formula "3"))
               (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "ifthenelse_split" (formula "1") (term "0"))
               (branch "b.length ≥ 1 TRUE"
                  (rule "eqSymm" (formula "2"))
                  (rule "applyEq" (formula "4") (term "1,1,0") (ifseqformula "2"))
                  (builtin "One Step Simplification" (formula "4"))
                  (rule "applyEq" (formula "5") (term "1,1,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "3") (term "1,1,0,0") (ifseqformula "2"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "inEqSimp_or_tautInEq1" (formula "5") (term "0"))
                  (rule "inEqSimp_homoInEq1" (formula "5") (term "1,0"))
                  (rule "polySimp_pullOutFactor1" (formula "5") (term "0,1,0"))
                  (rule "add_literals" (formula "5") (term "1,0,1,0"))
                  (rule "times_zero_1" (formula "5") (term "0,1,0"))
                  (rule "leq_literals" (formula "5") (term "1,0"))
                  (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "arrayLengthIsAShort" (formula "9") (term "1"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "arrayLengthNotNegative" (formula "9") (term "0"))
                  (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "2"))
                  (rule "leq_literals" (formula "1") (term "0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "arrayLengthIsAShort" (formula "9") (term "0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "arrayLengthNotNegative" (formula "9") (term "1"))
                  (rule "ifthenelse_split" (formula "3") (term "0"))
                  (branch "a.length ≥ 1 TRUE"
                     (rule "eqSymm" (formula "4"))
                     (rule "close" (formula "11") (ifseqformula "4"))
                  )
                  (branch "a.length ≥ 1 FALSE"
                     (rule "eqSymm" (formula "3"))
                     (rule "inEqSimp_geqRight" (formula "10"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "applyEq" (formula "6") (term "1,1,0") (ifseqformula "4"))
                     (rule "applyEq" (formula "3") (term "0") (ifseqformula "4"))
                     (rule "qeq_literals" (formula "3"))
                     (rule "closeFalse" (formula "3"))
                  )
               )
               (branch "b.length ≥ 1 FALSE"
                  (rule "eqSymm" (formula "1"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_geqRight" (formula "9"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_notGeq" (formula "2") (term "0"))
                  (rule "mul_literals" (formula "2") (term "1,0,0,0"))
                  (rule "add_literals" (formula "2") (term "0,0,0"))
                  (rule "add_zero_left" (formula "2") (term "0,0"))
                  (rule "cut_direct" (formula "5") (term "0,1,1,0"))
                  (branch "CUT: a.length ≥ 1 TRUE"
                     (builtin "One Step Simplification" (formula "6"))
                     (rule "replace_known_left" (formula "3") (term "0,1,1,0,0") (ifseqformula "5"))
                     (builtin "One Step Simplification" (formula "3"))
                     (rule "replace_known_left" (formula "4") (term "0,1,1,0") (ifseqformula "5"))
                     (builtin "One Step Simplification" (formula "4"))
                     (rule "inEqSimp_contradEq7" (formula "2") (term "1") (ifseqformula "5"))
                     (rule "times_zero_1" (formula "2") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "2") (term "0,0,1"))
                     (rule "leq_literals" (formula "2") (term "0,1"))
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "5"))
                     (rule "qeq_literals" (formula "2") (term "0"))
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
                  (branch "CUT: a.length ≥ 1 FALSE"
                     (builtin "One Step Simplification" (formula "5"))
                     (rule "replace_known_right" (formula "3") (term "0,1,1,0,0") (ifseqformula "10"))
                     (builtin "One Step Simplification" (formula "3"))
                     (rule "replace_known_right" (formula "4") (term "0,1,1,0") (ifseqformula "10"))
                     (builtin "One Step Simplification" (formula "4"))
                     (rule "inEqSimp_geqRight" (formula "10"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "replace_known_left" (formula "3") (term "0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "commute_or_2" (formula "5") (term "0"))
                     (rule "commute_or_2" (formula "4") (term "0"))
                     (rule "commute_or_2" (formula "3") (term "0,0"))
                     (rule "commute_or_2" (formula "5") (term "0,0"))
                     (rule "inEqSimp_or_tautInEq1" (formula "5") (term "0,0,0"))
                     (rule "add_zero_right" (formula "5") (term "1,1,0,0,0"))
                     (rule "qeq_literals" (formula "5") (term "1,0,0,0"))
                     (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "commute_or_2" (formula "4") (term "0,0"))
                     (rule "inEqSimp_or_tautInEq1" (formula "4") (term "0,0,0"))
                     (rule "add_zero_right" (formula "4") (term "1,1,0,0,0"))
                     (rule "qeq_literals" (formula "4") (term "1,0,0,0"))
                     (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "commute_or_2" (formula "3") (term "0,0,0"))
                     (rule "inEqSimp_or_tautInEq0" (formula "3") (term "0,0,0,0"))
                     (rule "add_zero_right" (formula "3") (term "1,1,0,0,0,0"))
                     (rule "qeq_literals" (formula "3") (term "1,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                     (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "3"))
                     (rule "applyEq" (formula "9") (term "0") (ifseqformula "1"))
                     (rule "eqSymm" (formula "9"))
                     (rule "applyEq" (formula "4") (term "0") (ifseqformula "1"))
                     (rule "leq_literals" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "inEqSimp_strengthen0" (formula "2") (ifseqformula "7"))
                     (rule "add_zero_right" (formula "2") (term "1"))
                     (rule "inEqSimp_contradEq3" (formula "7") (ifseqformula "2"))
                     (rule "times_zero_1" (formula "7") (term "1,0,0"))
                     (rule "add_zero_right" (formula "7") (term "0,0"))
                     (rule "qeq_literals" (formula "7") (term "0"))
                     (builtin "One Step Simplification" (formula "7"))
                     (rule "false_right" (formula "7"))
                     (rule "arrayLengthIsAShort" (formula "1") (term "0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "arrayLengthIsAShort" (formula "2") (term "0"))
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "arrayLengthNotNegative" (formula "2") (term "0"))
                     (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "3"))
                     (rule "qeq_literals" (formula "2") (term "0"))
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
               )
            )
            (branch "if x_3 false"
               (builtin "One Step Simplification" (formula "8"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "for_to_while" (formula "8") (term "1") (inst "#outerLabel=_label1") (inst "#innerLabel=_label0"))
               (rule "variableDeclarationAssign" (formula "8") (term "1"))
               (rule "variableDeclaration" (formula "8") (term "1") (newnames "i"))
               (rule "assignment" (formula "8") (term "1"))
               (builtin "One Step Simplification" (formula "8"))
               (builtin "Loop Invariant" (formula "8") (newnames "variant,b_0,heapBefore_LOOP,iBefore_LOOP,i_0,heap_After_LOOP,anon_heap_LOOP,o,f"))
               (branch "Invariant Initially Valid"
                  (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "2")) (ifInst ""  (formula "6")) (ifInst ""  (formula "7")))
                  (rule "leq_literals" (formula "8") (term "0,0,0"))
                  (builtin "One Step Simplification" (formula "8"))
                  (rule "eqSymm" (formula "8") (term "1,0,1"))
                  (rule "eqSymm" (formula "8") (term "1,0"))
                  (rule "replace_known_left" (formula "8") (term "1,0") (ifseqformula "1"))
                  (builtin "One Step Simplification" (formula "8"))
                  (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,1"))
                  (rule "times_zero_1" (formula "8") (term "1,0,0,1,0,0,1"))
                  (rule "add_zero_right" (formula "8") (term "0,0,1,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "8") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "8") (term "1,1,0,0,1"))
                  (rule "nnf_imp2or" (formula "8") (term "0,1"))
                  (rule "nnf_notAnd" (formula "8") (term "0,0,1"))
                  (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0,1"))
                  (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0,1"))
                  (rule "add_zero_right" (formula "8") (term "0,0,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,1"))
                  (rule "mul_literals" (formula "8") (term "1,0,0,0,1"))
                  (builtin "One Step Simplification" (formula "8"))
                  (rule "inEqSimp_geqRight" (formula "8"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "arrayLengthNotNegative" (formula "2") (term "1"))
                  (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "2") (term "0"))
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "closeFalse" (formula "2"))
               )
               (branch "Body Preserves Invariant"
                  (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "8")) (ifInst ""  (formula "9")))
                  (builtin "One Step Simplification" (formula "10"))
                  (rule "translateJavaSubInt" (formula "10") (term "0,1,1,1,0,1"))
                  (rule "translateJavaSubInt" (formula "10") (term "0,1,1,1,1,0,1,1"))
                  (rule "andLeft" (formula "7"))
                  (rule "impRight" (formula "11"))
                  (rule "andLeft" (formula "8"))
                  (rule "andLeft" (formula "8"))
                  (rule "eqSymm" (formula "11") (term "1,0"))
                  (rule "eqSymm" (formula "14") (term "0,0,1,0,1,1,1,0,1"))
                  (rule "eqSymm" (formula "14") (term "1,0,0,0,1,1,1,0,1"))
                  (rule "eqSymm" (formula "14") (term "1,0,1,0,0,1,1,1,0,1"))
                  (rule "eqSymm" (formula "10"))
                  (rule "polySimp_elimSub" (formula "13") (term "0,1,1,1,0"))
                  (rule "polySimp_elimSub" (formula "13") (term "0,1,1,1,1,0,1"))
                  (rule "polySimp_addComm0" (formula "13") (term "0,1,1,1,0"))
                  (rule "polySimp_addComm0" (formula "13") (term "0,1,1,1,1,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,0,0,1,1,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,1,0,0,1,1,1,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,0,0,1,1,1,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,0,0,0,0,1,1,1,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,0,0,0,0,0,1,1,1,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "8"))
                  (rule "inEqSimp_commuteLeq" (formula "9"))
                  (rule "variableDeclarationAssign" (formula "1") (term "1"))
                  (rule "variableDeclarationAssign" (formula "13") (term "1"))
                  (rule "variableDeclaration" (formula "1") (term "1") (newnames "b_0_2"))
                  (rule "variableDeclaration" (formula "13") (term "1") (newnames "rtrn"))
                  (rule "assignment" (formula "13") (term "1"))
                  (builtin "One Step Simplification" (formula "13"))
                  (rule "variableDeclaration" (formula "13") (term "1") (newnames "returnExpr"))
                  (rule "variableDeclarationAssign" (formula "13") (term "1"))
                  (rule "variableDeclaration" (formula "13") (term "1") (newnames "exc_1"))
                  (rule "assignment" (formula "13") (term "1"))
                  (builtin "One Step Simplification" (formula "13"))
                  (rule "variableDeclaration" (formula "13") (term "1") (newnames "thrownExc"))
                  (rule "blockReturn" (formula "13") (term "1,0,1,0,1"))
                  (rule "blockThrow" (formula "13") (term "1,0,0,1"))
                  (rule "blockReturn" (formula "13") (term "1,0,1,0,1"))
                  (rule "blockThrow" (formula "13") (term "1,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1,0,0,1,1,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,1,0,0,1,1,1,0,1"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,1,0,0,1,1,1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,1,0,0,1,1,1,0,1"))
                  (rule "mul_literals" (formula "13") (term "0,1,1,0,0,1,0,0,1,1,1,0,1"))
                  (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,1,0,0,1,1,1,0,1"))
                  (rule "boxToDiamond" (formula "1") (term "1"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "nnf_imp2or" (formula "9") (term "0"))
                  (rule "nnf_notAnd" (formula "9") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
                  (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
                  (rule "add_literals" (formula "9") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                  (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                  (rule "nnf_imp2or" (formula "13") (term "0,1,0,0,1,1,1,0,1"))
                  (rule "nnf_notAnd" (formula "13") (term "0,0,1,0,0,1,1,1,0,1"))
                  (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,1,0,0,1,1,1,0,1"))
                  (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,1,0,0,1,1,1,0,1"))
                  (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,1,0,0,1,1,1,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,1,0,0,1,1,1,0,1"))
                  (rule "mul_literals" (formula "13") (term "1,0,0,0,1,0,0,1,1,1,0,1"))
                  (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,1,0,0,1,1,1,0,1"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,1,0,0,1,1,1,0,1"))
                  (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,1,0,0,1,1,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,1,0,0,1,1,1,0,1"))
                  (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,1,0,0,1,1,1,0,1"))
                  (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,1,0,0,1,1,1,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,1,0,0,1,1,1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1,0,0,1,1,1,0,1"))
                  (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,1,0,0,1,1,1,0,1"))
                  (rule "compound_less_than_comparison_2" (formula "10") (term "1") (inst "#v1=x_1") (inst "#v0=x"))
                  (rule "variableDeclarationAssign" (formula "10") (term "1"))
                  (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_8"))
                  (rule "assignment" (formula "10") (term "1"))
                  (builtin "One Step Simplification" (formula "10"))
                  (rule "variableDeclarationAssign" (formula "10") (term "1"))
                  (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_9"))
                  (rule "assignment_read_length" (formula "10") (term "1"))
                  (branch "Normal Execution (_a != null)"
                     (builtin "One Step Simplification" (formula "11"))
                     (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "12")))
                     (rule "false_right" (formula "10"))
                     (rule "less_than_comparison_simple" (formula "10") (term "1"))
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
                     (rule "polySimp_addComm1" (formula "10") (term "0,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "10") (term "0,0,0,0"))
                     (rule "methodCallEmpty" (formula "10") (term "1"))
                     (rule "emptyModality" (formula "10") (term "1"))
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "notRight" (formula "10"))
                     (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq0" (formula "9") (term "0"))
                     (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0"))
                     (rule "add_literals" (formula "9") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "9") (term "1,0,0"))
                     (rule "add_zero_right" (formula "9") (term "0,0"))
                     (rule "qeq_literals" (formula "9") (term "0"))
                     (builtin "One Step Simplification" (formula "9"))
                     (rule "true_left" (formula "9"))
                     (rule "ifUnfold" (formula "12") (term "1") (inst "#boolv=x"))
                     (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_10"))
                     (rule "compound_less_than_comparison_2" (formula "12") (term "1") (inst "#v1=x_12") (inst "#v0=x_11"))
                     (rule "variableDeclarationAssign" (formula "12") (term "1"))
                     (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_11"))
                     (rule "assignment" (formula "12") (term "1"))
                     (builtin "One Step Simplification" (formula "12"))
                     (rule "variableDeclarationAssign" (formula "12") (term "1"))
                     (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_12"))
                     (rule "assignment_read_length" (formula "12") (term "1"))
                     (branch "Normal Execution (_a != null)"
                        (builtin "One Step Simplification" (formula "13"))
                        (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "10")))
                        (rule "false_right" (formula "12"))
                        (rule "less_than_comparison_simple" (formula "12") (term "1"))
                        (builtin "One Step Simplification" (formula "12"))
                        (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,1,0"))
                        (rule "polySimp_addComm1" (formula "12") (term "0,0,0,1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "0,0,0,1,0"))
                        (rule "replace_known_left" (formula "12") (term "0,0,1,0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "12"))
                        (rule "arrayLengthNotNegative" (formula "2") (term "1"))
                        (rule "arrayLengthIsAShort" (formula "3") (term "1"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "arrayLengthIsAShort" (formula "3") (term "0"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "arrayLengthNotNegative" (formula "3") (term "0"))
                        (rule "ifSplit" (formula "14"))
                        (branch "if x_10 true"
                           (builtin "One Step Simplification" (formula "15"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "ifUnfold" (formula "14") (term "1") (inst "#boolv=x"))
                           (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_13"))
                           (rule "compound_inequality_comparison_2" (formula "14") (term "1") (inst "#v1=x_15") (inst "#v0=x_14"))
                           (rule "variableDeclarationAssign" (formula "14") (term "1"))
                           (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_14"))
                           (rule "assignment_array2" (formula "14") (term "1"))
                           (branch "Normal Execution (_a != null)"
                              (builtin "One Step Simplification" (formula "15"))
                              (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "12")))
                              (rule "orRight" (formula "14"))
                              (rule "inEqSimp_leqRight" (formula "14"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "inEqSimp_ltRight" (formula "15"))
                              (rule "times_zero_1" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "variableDeclarationAssign" (formula "15") (term "1"))
                              (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_15"))
                              (rule "assignment_array2" (formula "15") (term "1"))
                              (branch "Normal Execution (_b != null)"
                                 (builtin "One Step Simplification" (formula "16"))
                                 (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "14")))
                                 (rule "orRight" (formula "15"))
                                 (rule "inEqSimp_ltRight" (formula "16"))
                                 (rule "times_zero_1" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_leqRight" (formula "15"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1"))
                                 (rule "mul_literals" (formula "2") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1"))
                                 (rule "mul_literals" (formula "1") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                 (rule "inequality_comparison_simple" (formula "15") (term "1"))
                                 (builtin "One Step Simplification" (formula "15"))
                                 (rule "eqSymm" (formula "15") (term "0,0,1,0"))
                                 (rule "ifSplit" (formula "15"))
                                 (branch "if x_13 true"
                                    (builtin "One Step Simplification" (formula "16"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "assignment" (formula "16") (term "1"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "assignment" (formula "16") (term "1"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "tryBreakLabel" (formula "16") (term "1"))
                                    (rule "blockBreakNoLabel" (formula "16") (term "1"))
                                    (rule "blockBreakLabel" (formula "16") (term "1"))
                                    (rule "blockEmpty" (formula "16") (term "1"))
                                    (rule "tryEmpty" (formula "16") (term "1"))
                                    (rule "methodCallEmpty" (formula "16") (term "1"))
                                    (rule "emptyModality" (formula "16") (term "1"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "methodCallReturn" (formula "16") (term "1"))
                                    (rule "assignment" (formula "16") (term "1"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "methodCallEmpty" (formula "16") (term "1"))
                                    (rule "tryEmpty" (formula "16") (term "1"))
                                    (rule "emptyModality" (formula "16") (term "1"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "notRight" (formula "16"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "narrowSelectArrayType" (formula "2") (term "1,1,1,0") (ifseqformula "8") (ifseqformula "16"))
                                    (rule "narrowSelectArrayType" (formula "2") (term "1,0,1,0") (ifseqformula "8") (ifseqformula "17"))
                                    (rule "applyEq" (formula "2") (term "1,1,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "2") (term "1,1,1,0,0,1,0") (ifseqformula "7"))
                                    (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "7"))
                                    (rule "applyEq" (formula "1") (term "0,0,0") (ifseqformula "7"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "applyEq" (formula "2") (term "0") (ifseqformula "6"))
                                    (rule "applyEq" (formula "4") (term "0") (ifseqformula "5"))
                                    (rule "commute_or_2" (formula "1") (term "0"))
                                    (rule "commute_or" (formula "1") (term "0,0"))
                                    (rule "ifthenelse_to_or_right" (formula "1") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "nnf_notAnd" (formula "1") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0,0,0"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0,0,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0,0,1,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,0,0"))
                                    (rule "nnf_notAnd" (formula "1") (term "0,1,1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "1") (term "1,0,1,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,1,1,0,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,1,1,0,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0,1,0,1,1,0,0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0,0,1,0,1,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,1,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,1,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1,0,1,1,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "1") (term "0,0,1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,1,1,0,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0,0,1,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,1,1,0,0,0"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0,1,1,0,0,0"))
                                    (rule "commute_or" (formula "1") (term "0,0"))
                                    (rule "commute_or_2" (formula "1") (term "0"))
                                    (rule "commute_or" (formula "1") (term "1,1,0"))
                                    (rule "commute_or_2" (formula "1") (term "0,1,0"))
                                    (rule "commute_or_2" (formula "1") (term "0,1,1,0"))
                                    (rule "commute_or" (formula "1") (term "0,0,1,0"))
                                    (rule "commute_or" (formula "1") (term "0,0,1,1,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "1,1,0"))
                                    (rule "commute_or_2" (formula "1") (term "0,1,1,0"))
                                    (rule "inEqSimp_or_tautInEq1" (formula "1") (term "0,0,1,1,0"))
                                    (rule "add_zero_right" (formula "1") (term "1,1,0,0,1,1,0"))
                                    (rule "qeq_literals" (formula "1") (term "1,0,0,1,1,0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "shift_paren_or" (formula "1") (term "1,1,0"))
                                    (rule "commute_or" (formula "1") (term "0,1,1,0"))
                                    (rule "inEqSimp_or_tautInEq1" (formula "1") (term "1,1,0"))
                                    (rule "inEqSimp_homoInEq1" (formula "1") (term "1,1,1,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "1") (term "0,1,1,1,0"))
                                    (rule "add_literals" (formula "1") (term "1,0,1,1,1,0"))
                                    (rule "times_zero_1" (formula "1") (term "0,1,1,1,0"))
                                    (rule "leq_literals" (formula "1") (term "1,1,1,0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "commute_or_2" (formula "1") (term "0"))
                                    (rule "shift_paren_or" (formula "1") (term "0,0"))
                                    (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                                    (rule "commute_or" (formula "1") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "ifthenelse_to_or_left" (formula "1") (term "0,0,0,0"))
                                    (rule "eqSymm" (formula "1") (term "1,1,0,0,0,0"))
                                    (rule "nnf_notAnd" (formula "1") (term "0,0,0,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0,0,0,0"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0,0,0,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0,0,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0,0,1,0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,0,0,0"))
                                    (rule "commute_or" (formula "1") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "1") (term "0,0"))
                                    (rule "commute_or_2" (formula "1") (term "0"))
                                    (rule "commute_or" (formula "1") (term "1,1,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "1,1,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "0"))
                                    (rule "distr_forallAnd" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "commute_or" (formula "2") (term "0"))
                                    (rule "shift_paren_or" (formula "1") (term "0"))
                                    (rule "commute_or_2" (formula "1") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "commute_or" (formula "2") (term "1,1,0"))
                                    (rule "cnf_rightDist" (formula "2") (term "0"))
                                    (rule "distr_forallAnd" (formula "2"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "commute_or_2" (formula "2") (term "0"))
                                    (rule "shift_paren_or" (formula "3") (term "0"))
                                    (rule "commute_or_2" (formula "2") (term "0,0"))
                                    (rule "shift_paren_or" (formula "3") (term "0,0"))
                                    (rule "commute_or_2" (formula "3") (term "0,0,0"))
                                    (rule "inEqSimp_or_tautInEq1" (formula "3") (term "0,0"))
                                    (rule "inEqSimp_homoInEq1" (formula "3") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "3") (term "0,1,0,0"))
                                    (rule "add_literals" (formula "3") (term "1,0,1,0,0"))
                                    (rule "times_zero_1" (formula "3") (term "0,1,0,0"))
                                    (rule "leq_literals" (formula "3") (term "1,0,0"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "true_left" (formula "3"))
                                    (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                                    (rule "commute_or" (formula "2") (term "0,0,0,0"))
                                    (rule "inEqSimp_or_tautInEq1" (formula "2") (term "0,0,0"))
                                    (rule "add_zero_right" (formula "2") (term "1,1,0,0,0"))
                                    (rule "qeq_literals" (formula "2") (term "1,0,0,0"))
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "true_left" (formula "2"))
                                    (rule "cut_direct" (formula "1") (term "0,1,1,0,0"))
                                    (branch "CUT: a.length ≥ 1 TRUE"
                                       (builtin "One Step Simplification" (formula "2"))
                                       (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "1"))
                                       (rule "leq_literals" (formula "4") (term "0"))
                                       (builtin "One Step Simplification" (formula "4"))
                                       (rule "true_left" (formula "4"))
                                       (rule "allLeft" (formula "2") (inst "t=i_0"))
                                       (rule "replace_known_right" (formula "2") (term "1") (ifseqformula "13"))
                                       (builtin "One Step Simplification" (formula "2"))
                                       (rule "inEqSimp_commuteGeq" (formula "2") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "2") (term "1") (ifseqformula "4"))
                                       (rule "inEqSimp_homoInEq1" (formula "2") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,1"))
                                       (rule "add_literals" (formula "2") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "2") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "2") (term "0,0,1"))
                                       (rule "leq_literals" (formula "2") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "2"))
                                       (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "11"))
                                       (rule "qeq_literals" (formula "2") (term "0"))
                                       (builtin "One Step Simplification" (formula "2"))
                                       (rule "closeFalse" (formula "2"))
                                    )
                                    (branch "CUT: a.length ≥ 1 FALSE"
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "inEqSimp_geqRight" (formula "12"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_antiSymm" (formula "4") (ifseqformula "1"))
                                       (rule "applyEq" (formula "2") (term "1,1,0,0,0") (ifseqformula "4"))
                                       (builtin "One Step Simplification" (formula "2"))
                                       (rule "applyEq" (formula "1") (term "0") (ifseqformula "4"))
                                       (rule "leq_literals" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
                                       (rule "qeq_literals" (formula "4"))
                                       (rule "true_left" (formula "4"))
                                       (rule "applyEq" (formula "2") (term "0") (ifseqformula "3"))
                                       (rule "inEqSimp_homoInEq1" (formula "2"))
                                       (rule "times_zero_2" (formula "2") (term "1,0"))
                                       (rule "add_zero_right" (formula "2") (term "0"))
                                       (rule "applyEq" (formula "4") (term "1") (ifseqformula "3"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                       (rule "mul_literals" (formula "2") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "10"))
                                       (rule "qeq_literals" (formula "2") (term "0"))
                                       (builtin "One Step Simplification" (formula "2"))
                                       (rule "closeFalse" (formula "2"))
                                    )
                                 )
                                 (branch "if x_13 false"
                                    (builtin "One Step Simplification" (formula "16"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "tryEmpty" (formula "16") (term "1"))
                                    (rule "blockEmpty" (formula "16") (term "1"))
                                    (rule "unusedLabel" (formula "16") (term "1"))
                                    (rule "preincrement" (formula "16") (term "1"))
                                    (rule "compound_int_cast_expression" (formula "16") (term "1") (inst "#v=x"))
                                    (rule "variableDeclarationAssign" (formula "16") (term "1"))
                                    (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_19"))
                                    (rule "remove_parentheses_right" (formula "16") (term "1"))
                                    (rule "assignmentAdditionInt" (formula "16") (term "1"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "translateJavaAddInt" (formula "16") (term "0,1,0"))
                                    (rule "polySimp_addComm0" (formula "16") (term "0,1,0"))
                                    (rule "widening_identity_cast_5" (formula "16") (term "1"))
                                    (rule "assignment" (formula "16") (term "1"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "tryEmpty" (formula "16") (term "1"))
                                    (rule "methodCallEmpty" (formula "16") (term "1"))
                                    (rule "emptyModality" (formula "16") (term "1"))
                                    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "3")) (ifInst ""  (formula "14")) (ifInst ""  (formula "15")) (ifInst ""  (formula "6")))
                                    (rule "polySimp_mulComm0" (formula "16") (term "0,0,1"))
                                    (rule "polySimp_rightDist" (formula "16") (term "0,0,1"))
                                    (rule "mul_literals" (formula "16") (term "0,0,0,1"))
                                    (rule "precOfInt" (formula "16") (term "1"))
                                    (rule "inEqSimp_ltToLeq" (formula "16") (term "1,1"))
                                    (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,1"))
                                    (rule "polySimp_mulAssoc" (formula "16") (term "0,1,0,0,1,1"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "0,0,1,0,0,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,0,1,1"))
                                    (rule "polySimp_elimOne" (formula "16") (term "0,1,0,0,1,1"))
                                    (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,1"))
                                    (rule "polySimp_addAssoc" (formula "16") (term "0,1,1"))
                                    (rule "polySimp_addComm1" (formula "16") (term "0,0,1,1"))
                                    (rule "polySimp_pullOutFactor2b" (formula "16") (term "0,1,1"))
                                    (rule "add_literals" (formula "16") (term "1,1,0,1,1"))
                                    (rule "times_zero_1" (formula "16") (term "1,0,1,1"))
                                    (rule "add_zero_right" (formula "16") (term "0,1,1"))
                                    (rule "polySimp_addAssoc" (formula "16") (term "0,1,1"))
                                    (rule "polySimp_addComm1" (formula "16") (term "0,0,1,1"))
                                    (rule "add_literals" (formula "16") (term "0,0,0,1,1"))
                                    (rule "add_zero_left" (formula "16") (term "0,0,1,1"))
                                    (rule "polySimp_pullOutFactor1" (formula "16") (term "0,1,1"))
                                    (rule "add_literals" (formula "16") (term "1,0,1,1"))
                                    (rule "times_zero_1" (formula "16") (term "0,1,1"))
                                    (rule "leq_literals" (formula "16") (term "1,1"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "inEqSimp_homoInEq0" (formula "16") (term "1"))
                                    (rule "mul_literals" (formula "16") (term "1,0,1"))
                                    (rule "add_zero_right" (formula "16") (term "0,1"))
                                    (rule "applyEq" (formula "2") (term "0") (ifseqformula "6"))
                                    (rule "applyEq" (formula "4") (term "0") (ifseqformula "5"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0"))
                                    (rule "mul_literals" (formula "14") (term "1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,1"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,1"))
                                    (rule "mul_literals" (formula "14") (term "0,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1"))
                                    (rule "polySimp_elimOne" (formula "14") (term "1,1,1"))
                                    (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "2"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "inEqSimp_subsumption1" (formula "14") (term "0") (ifseqformula "10"))
                                    (rule "leq_literals" (formula "14") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "allRight" (formula "14") (inst "sk=j_0"))
                                    (rule "orRight" (formula "14"))
                                    (rule "orRight" (formula "14"))
                                    (rule "inEqSimp_geqRight" (formula "15"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_leqRight" (formula "15"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                                    (rule "polySimp_elimOne" (formula "2") (term "1"))
                                    (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                                    (rule "times_zero_1" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "allLeft" (formula "13") (inst "t=j_0"))
                                    (rule "replace_known_right" (formula "13") (term "1") (ifseqformula "17"))
                                    (builtin "One Step Simplification" (formula "13"))
                                    (rule "inEqSimp_contradInEq1" (formula "13") (term "0") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "13") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "13"))
                                    (rule "inEqSimp_antiSymm" (formula "13") (ifseqformula "2"))
                                    (rule "applyEqRigid" (formula "14") (term "0") (ifseqformula "13"))
                                    (rule "inEqSimp_homoInEq1" (formula "14"))
                                    (rule "polySimp_pullOutFactor1" (formula "14") (term "0"))
                                    (rule "add_literals" (formula "14") (term "1,0"))
                                    (rule "times_zero_1" (formula "14") (term "0"))
                                    (rule "leq_literals" (formula "14"))
                                    (rule "true_left" (formula "14"))
                                    (rule "applyEqRigid" (formula "17") (term "0,2,0") (ifseqformula "13"))
                                    (rule "eqSymm" (formula "17"))
                                    (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "13"))
                                    (rule "inEqSimp_homoInEq0" (formula "2"))
                                    (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
                                    (rule "add_literals" (formula "2") (term "1,0"))
                                    (rule "times_zero_1" (formula "2") (term "0"))
                                    (rule "qeq_literals" (formula "2"))
                                    (rule "true_left" (formula "2"))
                                    (rule "applyEq" (formula "1") (term "0") (ifseqformula "12"))
                                    (rule "applyEq" (formula "15") (term "0,2,0") (ifseqformula "11"))
                                    (rule "eqSymm" (formula "15"))
                                    (rule "close" (formula "15") (ifseqformula "1"))
                                 )
                              )
                              (branch "Null Reference (_b = null)"
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "Index Out of Bounds (_b != null, but i Out of Bounds!)"
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
                                 (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                 (rule "add_literals" (formula "1") (term "0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1"))
                                 (rule "mul_literals" (formula "2") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                                 (rule "mul_literals" (formula "1") (term "1,1"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "11"))
                                 (rule "qeq_literals" (formula "1") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "1"))
                                 (rule "times_zero_1" (formula "4") (term "0,0"))
                                 (rule "add_zero_left" (formula "4") (term "0"))
                                 (rule "methodCallParamThrow" (formula "15") (term "1,0,0,1"))
                                 (rule "methodCallReturn" (formula "15") (term "1,0,1,0,1"))
                                 (rule "assignment" (formula "15") (term "1,0,1,0,1"))
                                 (rule "tryCatchThrow" (formula "15") (term "1,0,0,1"))
                                 (rule "ifElseUnfold" (formula "15") (term "1,0,0,1") (inst "#boolv=x"))
                                 (rule "variableDeclaration" (formula "15") (term "1,0,0,1") (newnames "x_16"))
                                 (rule "methodCallEmpty" (formula "15") (term "1,1,0,1,0,1"))
                                 (rule "equality_comparison_simple" (formula "15") (term "1,0,0,1"))
                                 (rule "tryEmpty" (formula "15") (term "1,1,0,1,0,1"))
                                 (rule "emptyModality" (formula "15") (term "1,1,0,1,0,1"))
                                 (builtin "One Step Simplification" (formula "15"))
                                 (rule "throwUnfold" (formula "15") (term "1") (inst "#v0=a"))
                                 (rule "variableDeclarationAssign" (formula "15") (term "1"))
                                 (rule "variableDeclaration" (formula "15") (term "1") (newnames "a_1"))
                                 (rule "instanceCreationAssignment" (formula "15") (term "1") (inst "#v0=a_2"))
                                 (rule "variableDeclarationAssign" (formula "15") (term "1"))
                                 (rule "variableDeclaration" (formula "15") (term "1") (newnames "a_2"))
                                 (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "15") (term "1") (inst "#v0=a_3"))
                                 (rule "variableDeclaration" (formula "15") (term "1") (newnames "a_3"))
                                 (rule "methodBodyExpand" (formula "15") (term "1") (newnames "heapBefore_<createObject>,savedHeapBefore_<createObject>"))
                                 (builtin "One Step Simplification" (formula "15"))
                                 (rule "variableDeclaration" (formula "15") (term "1") (newnames "__NEW__"))
                                 (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "15") (term "1") (inst "#v0=a_4"))
                                 (rule "variableDeclaration" (formula "15") (term "1") (newnames "a_4"))
                                 (rule "allocateInstance" (formula "15"))
                                 (builtin "One Step Simplification" (formula "16"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                                 (rule "andLeft" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "blockEmpty" (formula "18") (term "1"))
                                 (rule "assignment" (formula "18") (term "1"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_<create>,savedHeapBefore_<create>"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "assignment_write_attribute_this" (formula "18") (term "1"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "methodCallWithinClass" (formula "18") (term "1"))
                                 (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_<prepareEnter>,savedHeapBefore_<prepareEnter>"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "methodCallSuper" (formula "18") (term "1"))
                                 (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "methodCallSuper" (formula "18") (term "1"))
                                 (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_<prepare>_0,savedHeapBefore_<prepare>_0"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "methodCallSuper" (formula "18") (term "1"))
                                 (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_<prepare>_1,savedHeapBefore_<prepare>_1"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "methodCallSuper" (formula "18") (term "1"))
                                 (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_<prepare>_2,savedHeapBefore_<prepare>_2"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "methodCallSuper" (formula "18") (term "1"))
                                 (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_<prepare>_3,savedHeapBefore_<prepare>_3"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "methodCallEmpty" (formula "18") (term "1"))
                                 (rule "blockEmpty" (formula "18") (term "1"))
                                 (rule "assignment_write_attribute_this" (formula "18") (term "1"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "castDel" (formula "18") (term "1,0,1,0"))
                                 (rule "assignment_write_attribute_this" (formula "18") (term "1"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "castDel" (formula "18") (term "1,0,1,0"))
                                 (rule "methodCallEmpty" (formula "18") (term "1"))
                                 (rule "methodCallEmpty" (formula "18") (term "1"))
                                 (rule "methodCallEmpty" (formula "18") (term "1"))
                                 (rule "methodCallEmpty" (formula "18") (term "1"))
                                 (rule "methodCallEmpty" (formula "18") (term "1"))
                                 (rule "blockEmpty" (formula "18") (term "1"))
                                 (rule "methodCallReturnIgnoreResult" (formula "18") (term "1"))
                                 (rule "methodCallReturn" (formula "18") (term "1"))
                                 (rule "assignment" (formula "18") (term "1"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "methodCallEmpty" (formula "18") (term "1"))
                                 (rule "blockEmpty" (formula "18") (term "1"))
                                 (rule "assignment" (formula "18") (term "1"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_<init>,savedHeapBefore_<init>"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "methodCallSuper" (formula "18") (term "1"))
                                 (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_<init>_0,savedHeapBefore_<init>_0"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "methodCallSuper" (formula "18") (term "1"))
                                 (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_<init>_1,savedHeapBefore_<init>_1"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "methodCallSuper" (formula "18") (term "1"))
                                 (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_<init>_2,savedHeapBefore_<init>_2"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "methodCallSuper" (formula "18") (term "1"))
                                 (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_<init>_3,savedHeapBefore_<init>_3"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "methodCallSuper" (formula "18") (term "1"))
                                 (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_<init>_4,savedHeapBefore_<init>_4"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "methodCallEmpty" (formula "18") (term "1"))
                                 (rule "blockEmpty" (formula "18") (term "1"))
                                 (rule "assignment_write_attribute_this" (formula "18") (term "1"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "castDel" (formula "18") (term "1,0,1,0"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "assignment_write_attribute_this" (formula "18") (term "1"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "castDel" (formula "18") (term "1,0,1,0"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "methodCallEmpty" (formula "18") (term "1"))
                                 (rule "methodCallEmpty" (formula "18") (term "1"))
                                 (rule "methodCallEmpty" (formula "18") (term "1"))
                                 (rule "methodCallEmpty" (formula "18") (term "1"))
                                 (rule "methodCallEmpty" (formula "18") (term "1"))
                                 (rule "blockEmpty" (formula "18") (term "1"))
                                 (rule "assignment_write_attribute" (formula "18") (term "1"))
                                 (branch "Normal Execution (a_2 != null)"
                                    (builtin "One Step Simplification" (formula "19"))
                                    (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "14")))
                                    (rule "false_right" (formula "18"))
                                    (rule "assignment" (formula "18") (term "1"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "tryCatchThrow" (formula "18") (term "1"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "ifElseUnfold" (formula "18") (term "1") (inst "#boolv=x"))
                                    (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_17"))
                                    (rule "equality_comparison_simple" (formula "18") (term "1"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "replace_known_right" (formula "18") (term "0,0,1,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "ifElseSplit" (formula "18"))
                                    (branch "if x_17 true"
                                       (builtin "One Step Simplification" (formula "19"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch "if x_17 false"
                                       (builtin "One Step Simplification" (formula "19"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "ifElseSplit" (formula "18"))
                                       (branch "if a_1 instanceof Throwable true"
                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
                                          (rule "true_left" (formula "1"))
                                          (rule "variableDeclaration" (formula "18") (term "1") (newnames "t"))
                                          (rule "reference_type_cast" (formula "18") (term "1"))
                                          (branch "Normal Execution (a_1 instanceof Throwable)"
                                             (builtin "One Step Simplification" (formula "19"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "blockEmpty" (formula "18") (term "1"))
                                             (rule "unusedLabel" (formula "18") (term "1"))
                                             (rule "preincrement" (formula "18") (term "1"))
                                             (rule "compound_int_cast_expression" (formula "18") (term "1") (inst "#v=x"))
                                             (rule "variableDeclarationAssign" (formula "18") (term "1"))
                                             (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_18"))
                                             (rule "remove_parentheses_right" (formula "18") (term "1"))
                                             (rule "assignmentAdditionInt" (formula "18") (term "1"))
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "translateJavaAddInt" (formula "18") (term "0,1,0"))
                                             (rule "polySimp_addComm0" (formula "18") (term "0,1,0"))
                                             (rule "widening_identity_cast_5" (formula "18") (term "1"))
                                             (rule "assignment" (formula "18") (term "1"))
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "tryEmpty" (formula "18") (term "1"))
                                             (rule "methodCallEmpty" (formula "18") (term "1"))
                                             (rule "emptyModality" (formula "18") (term "1"))
                                             (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "3")) (ifInst ""  (formula "16")) (ifInst ""  (formula "17")) (ifInst ""  (formula "6")))
                                             (rule "eqSymm" (formula "18") (term "0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "18") (term "0,0,1"))
                                             (rule "polySimp_rightDist" (formula "18") (term "0,0,1"))
                                             (rule "mul_literals" (formula "18") (term "0,0,0,1"))
                                             (rule "dismissNonSelectedField" (formula "18") (term "1,1,0,1,0,0"))
                                             (rule "dismissNonSelectedField" (formula "18") (term "0,1,0,1,0,0"))
                                             (rule "precOfInt" (formula "18") (term "1"))
                                             (rule "dismissNonSelectedField" (formula "18") (term "1,1,0,1,0,0"))
                                             (rule "dismissNonSelectedField" (formula "18") (term "0,1,0,1,0,0"))
                                             (rule "dismissNonSelectedField" (formula "18") (term "1,1,0,1,0,0"))
                                             (rule "dismissNonSelectedField" (formula "18") (term "0,1,0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "18") (term "1,1"))
                                             (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,1"))
                                             (rule "polySimp_mulAssoc" (formula "18") (term "0,1,0,0,1,1"))
                                             (rule "polySimp_mulComm0" (formula "18") (term "0,0,1,0,0,1,1"))
                                             (rule "polySimp_mulLiterals" (formula "18") (term "0,1,0,0,1,1"))
                                             (rule "polySimp_elimOne" (formula "18") (term "0,1,0,0,1,1"))
                                             (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,1"))
                                             (rule "polySimp_addAssoc" (formula "18") (term "0,1,1"))
                                             (rule "polySimp_addComm1" (formula "18") (term "0,0,1,1"))
                                             (rule "polySimp_pullOutFactor2b" (formula "18") (term "0,1,1"))
                                             (rule "add_literals" (formula "18") (term "1,1,0,1,1"))
                                             (rule "times_zero_1" (formula "18") (term "1,0,1,1"))
                                             (rule "add_zero_right" (formula "18") (term "0,1,1"))
                                             (rule "polySimp_addAssoc" (formula "18") (term "0,1,1"))
                                             (rule "polySimp_addComm1" (formula "18") (term "0,0,1,1"))
                                             (rule "add_literals" (formula "18") (term "0,0,0,1,1"))
                                             (rule "add_zero_left" (formula "18") (term "0,0,1,1"))
                                             (rule "polySimp_pullOutFactor1" (formula "18") (term "0,1,1"))
                                             (rule "add_literals" (formula "18") (term "1,0,1,1"))
                                             (rule "times_zero_1" (formula "18") (term "0,1,1"))
                                             (rule "leq_literals" (formula "18") (term "1,1"))
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "inEqSimp_homoInEq0" (formula "18") (term "1"))
                                             (rule "times_zero_2" (formula "18") (term "1,0,1"))
                                             (rule "add_zero_right" (formula "18") (term "0,1"))
                                             (rule "applyEq" (formula "2") (term "0") (ifseqformula "6"))
                                             (rule "applyEq" (formula "5") (term "0") (ifseqformula "6"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "0,0,0"))
                                             (rule "mul_literals" (formula "17") (term "1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1"))
                                             (rule "polySimp_mulComm0" (formula "17") (term "1,1"))
                                             (rule "polySimp_rightDist" (formula "17") (term "1,1"))
                                             (rule "mul_literals" (formula "17") (term "0,1,1"))
                                             (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1"))
                                             (rule "polySimp_elimOne" (formula "17") (term "1,1,1"))
                                             (rule "replace_known_left" (formula "17") (term "1") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "17"))
                                             (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "2"))
                                             (rule "andLeft" (formula "3"))
                                             (rule "inEqSimp_homoInEq1" (formula "3"))
                                             (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                             (rule "add_literals" (formula "3") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "3") (term "1,0"))
                                             (rule "add_zero_right" (formula "3") (term "0"))
                                             (rule "leq_literals" (formula "3"))
                                             (rule "closeFalse" (formula "3"))
                                          )
                                          (branch "ClassCastException (!(a_1 instanceof Throwable))"
                                             (builtin "One Step Simplification" (formula "19"))
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "closeTrue" (formula "18"))
                                          )
                                       )
                                       (branch "if a_1 instanceof Throwable false"
                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                    )
                                 )
                                 (branch "Null Reference (a_2 = null)"
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
                                    (rule "closeFalse" (formula "1"))
                                 )
                              )
                           )
                           (branch "Null Reference (_a = null)"
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "Index Out of Bounds (_a != null, but i Out of Bounds!)"
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
                              (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                              (rule "add_literals" (formula "1") (term "0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                              (rule "mul_literals" (formula "1") (term "1,1"))
                              (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "2"))
                              (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                              (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0,0"))
                              (rule "leq_literals" (formula "1") (term "0,0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "inEqSimp_contradInEq0" (formula "11") (ifseqformula "1"))
                              (rule "qeq_literals" (formula "11") (term "0"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "closeFalse" (formula "11"))
                           )
                        )
                        (branch "if x_10 false"
                           (builtin "One Step Simplification" (formula "15"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                     (branch "Null Reference (_a = null)"
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch "Null Reference (_a = null)"
                     (builtin "One Step Simplification" (formula "11"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
                     (rule "closeFalse" (formula "1"))
                  )
               )
               (branch "Use Case"
                  (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "8")) (ifInst ""  (formula "9")))
                  (builtin "One Step Simplification" (formula "10"))
                  (rule "andLeft" (formula "7"))
                  (rule "andLeft" (formula "7"))
                  (rule "andLeft" (formula "7"))
                  (rule "eqSymm" (formula "10") (term "1,0"))
                  (rule "eqSymm" (formula "9"))
                  (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "8"))
                  (rule "inEqSimp_commuteLeq" (formula "7"))
                  (rule "variableDeclarationAssign" (formula "12") (term "1"))
                  (rule "variableDeclaration" (formula "12") (term "1") (newnames "b_0_1"))
                  (rule "blockEmpty" (formula "12") (term "1,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                  (rule "nnf_imp2or" (formula "9") (term "0"))
                  (rule "nnf_notAnd" (formula "9") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
                  (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                  (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
                  (rule "compound_less_than_comparison_2" (formula "12") (term "1") (inst "#v1=x_1") (inst "#v0=x"))
                  (rule "variableDeclarationAssign" (formula "12") (term "1"))
                  (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_6"))
                  (rule "assignment" (formula "12") (term "1"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "variableDeclarationAssign" (formula "12") (term "1"))
                  (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_7"))
                  (rule "assignment_read_length" (formula "12") (term "1"))
                  (branch "Normal Execution (_a != null)"
                     (builtin "One Step Simplification" (formula "13"))
                     (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "10")))
                     (rule "false_right" (formula "12"))
                     (rule "less_than_comparison_simple" (formula "12") (term "1"))
                     (builtin "One Step Simplification" (formula "12"))
                     (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,1,0"))
                     (rule "polySimp_addComm1" (formula "12") (term "0,0,0,1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "0,0,0,1,0"))
                     (rule "methodCallEmpty" (formula "12") (term "1"))
                     (rule "emptyModality" (formula "12") (term "1"))
                     (builtin "One Step Simplification" (formula "12"))
                     (rule "impRight" (formula "12"))
                     (rule "notLeft" (formula "1"))
                     (rule "inEqSimp_geqRight" (formula "10"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1"))
                     (rule "inEqSimp_antiSymm" (formula "9") (ifseqformula "1"))
                     (rule "methodCallReturn" (formula "14") (term "1"))
                     (rule "assignment" (formula "14") (term "1"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "methodCallEmpty" (formula "14") (term "1"))
                     (rule "tryEmpty" (formula "14") (term "1"))
                     (rule "emptyModality" (formula "14") (term "1"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "narrowSelectArrayType" (formula "14") (term "1,1,1,0,1") (ifseqformula "3") (ifseqformula "12"))
                     (rule "narrowSelectArrayType" (formula "14") (term "1,0,1,0,1") (ifseqformula "3") (ifseqformula "13"))
                     (rule "applyEq" (formula "14") (term "1,1,1,0,0,1") (ifseqformula "2"))
                     (rule "applyEq" (formula "14") (term "0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "14") (term "0,0,1,1,0,0,1") (ifseqformula "2"))
                     (rule "applyEq" (formula "14") (term "1,0,0") (ifseqformula "2"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "allRight" (formula "14") (inst "sk=iv_0"))
                     (rule "orRight" (formula "14"))
                     (rule "orRight" (formula "14"))
                     (rule "inEqSimp_geqRight" (formula "15"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_leqRight" (formula "15"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "replace_known_left" (formula "16") (term "0,0,0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "1")))
                     (rule "inEqSimp_homoInEq0" (formula "16") (term "0,0"))
                     (rule "eqSymm" (formula "16"))
                     (rule "polySimp_addComm1" (formula "16") (term "0,0,1"))
                     (rule "inEqSimp_homoInEq0" (formula "16") (term "0,0"))
                     (rule "eqSymm" (formula "16"))
                     (rule "polySimp_addComm1" (formula "16") (term "0,0,1"))
                     (rule "applyEq" (formula "3") (term "0") (ifseqformula "11"))
                     (rule "inEqSimp_homoInEq0" (formula "3"))
                     (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
                     (rule "add_literals" (formula "3") (term "1,0"))
                     (rule "times_zero_1" (formula "3") (term "0"))
                     (rule "qeq_literals" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "applyEq" (formula "11") (term "0") (ifseqformula "10"))
                     (rule "inEqSimp_homoInEq1" (formula "11"))
                     (rule "polySimp_pullOutFactor1" (formula "11") (term "0"))
                     (rule "add_literals" (formula "11") (term "1,0"))
                     (rule "times_zero_1" (formula "11") (term "0"))
                     (rule "leq_literals" (formula "11"))
                     (rule "true_left" (formula "11"))
                     (rule "applyEq" (formula "14") (term "1,0,0,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "2") (term "1,0,1,0") (ifseqformula "10"))
                     (rule "applyEq" (formula "2") (term "0,0,0,1,0") (ifseqformula "10"))
                     (rule "applyEq" (formula "14") (term "1,0,0,0") (ifseqformula "10"))
                     (rule "eqSymm" (formula "14"))
                     (rule "polySimp_addComm1" (formula "14") (term "0,0,1"))
                     (rule "applyEq" (formula "3") (term "1") (ifseqformula "10"))
                     (rule "applyEq" (formula "14") (term "1,0,0,0") (ifseqformula "10"))
                     (rule "polySimp_addComm1" (formula "14") (term "0,0,0"))
                     (rule "eqSymm" (formula "14"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "14") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "0,0,1"))
                     (rule "eqSymm" (formula "14"))
                     (rule "polySimp_elimOne" (formula "14") (term "0,0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "14") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "0,0,1"))
                     (rule "eqSymm" (formula "14"))
                     (rule "polySimp_elimOne" (formula "14") (term "0,0,0"))
                     (rule "ifthenelse_split" (formula "14") (term "0"))
                     (branch "iv_0 ≤ -1 + i_0 TRUE"
                        (rule "eqSymm" (formula "15"))
                        (rule "replace_known_left" (formula "15") (term "0,0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "15"))
                        (rule "eqSymm" (formula "15"))
                        (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                        (rule "times_zero_1" (formula "2") (term "0,0"))
                        (rule "add_zero_left" (formula "2") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "mul_literals" (formula "2") (term "1"))
                        (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "2"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "inEqSimp_homoInEq1" (formula "4"))
                        (rule "polySimp_addComm1" (formula "4") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1"))
                        (rule "polySimp_rightDist" (formula "4") (term "1"))
                        (rule "mul_literals" (formula "4") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                        (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "2"))
                        (rule "leq_literals" (formula "10") (term "0"))
                        (builtin "One Step Simplification" (formula "10"))
                        (rule "true_left" (formula "10"))
                        (rule "allLeft" (formula "11") (inst "t=iv_0"))
                        (rule "replace_known_right" (formula "11") (term "1") (ifseqformula "15"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "inEqSimp_contradInEq0" (formula "11") (term "1") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "11") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0,0,1"))
                        (rule "polySimp_addComm0" (formula "11") (term "0,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1"))
                        (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "11") (term "0,0,1"))
                        (rule "leq_literals" (formula "11") (term "0,1"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "11"))
                        (rule "qeq_literals" (formula "3") (term "0"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "closeFalse" (formula "3"))
                     )
                     (branch "iv_0 ≤ -1 + i_0 FALSE"
                        (rule "eqSymm" (formula "15"))
                        (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "14")))
                        (rule "closeTrue" (formula "15"))
                     )
                  )
                  (branch "Null Reference (_a = null)"
                     (builtin "One Step Simplification" (formula "13"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
                     (rule "closeFalse" (formula "1"))
                  )
               )
            )
         )
         (branch "Null Reference (_b = null)"
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "Null Reference (_a = null)"
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "if x false"
      (builtin "One Step Simplification" (formula "8"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
)
)

}
