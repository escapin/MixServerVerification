\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Fri Mar 18 09:39:55 CET 2016
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=5000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Fri Mar 18 09:39:55 CET 2016
name=verif.selectvoting.system.core.MixServer[verif.selectvoting.system.core.MixServer\\:\\:sort([[B)].JML normal_behavior operation contract.0
contract=verif.selectvoting.system.core.MixServer[verif.selectvoting.system.core.MixServer\\:\\:sort([[B)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mihai" ) (keyVersion "99336ad04cdaa9fea6ec698b0fe69574b8516e91"))

(autoModeTime "1045")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1") (newnames "entr_arr,self,result,exc,heapAtPre,o,f"))
(rule "translateJavaSubInt" (formula "1") (term "1,1,0,0,0,1,0,0,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "0,2,2,0,1,0,0,1,0,0,0,1,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "9") (term "1,0,0,1,0,1"))
(rule "polySimp_elimSub" (formula "9") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "9") (term "1,1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_addComm0" (formula "9") (term "0,2,2,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_addComm0" (formula "9") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,0,1,0,0,0,1"))
(rule "add_literals" (formula "9") (term "0,0,0,1,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,0,1,0,0,0,1"))
(rule "assignment" (formula "9") (term "1"))
(builtin "One Step Simplification" (formula "9"))
(rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "9") (term "0,1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,0,1,0,0,0,1"))
(rule "nonNull" (formula "7") (inst "i=i"))
(rule "greater_literals" (formula "7") (term "0,1"))
(builtin "One Step Simplification" (formula "7"))
(rule "sub_literals" (formula "7") (term "2,1,0,1"))
(builtin "One Step Simplification" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "notLeft" (formula "7"))
(rule "replace_known_right" (formula "4") (term "0") (ifseqformula "8"))
(builtin "One Step Simplification" (formula "4"))
(rule "narrowSelectArrayType" (formula "7") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "8"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
(rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
(rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
(rule "array2seqDef" (formula "10") (term "0,0,0,0,0,1") (inst "u=u"))
(rule "array2seqDef" (formula "10") (term "1,0,0,0,0,1") (inst "u=u"))
(rule "nonNull" (formula "10") (term "1,1,1,0,0,0,1") (inst "i=i"))
(rule "greater_literals" (formula "10") (term "0,1,1,1,1,0,0,0,1"))
(builtin "One Step Simplification" (formula "10"))
(rule "sub_literals" (formula "10") (term "2,1,0,1,1,1,1,0,0,0,1"))
(builtin "One Step Simplification" (formula "10"))
(rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "10") (term "0,1,1,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1,1,1,1,0,0,0,1"))
(rule "nnf_imp2or" (formula "7") (term "0"))
(rule "nnf_notAnd" (formula "7") (term "0,0"))
(rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
(rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
(rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
(rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
(rule "mul_literals" (formula "7") (term "1,0,0,0"))
(rule "nnf_imp2or" (formula "10") (term "0,0,1,0,0,0,1"))
(rule "nnf_imp2or" (formula "10") (term "0,1,1,1,1,0,0,0,1"))
(rule "nnf_notAnd" (formula "10") (term "0,0,0,1,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0,1,0,0,0,1"))
(rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "10") (term "0,1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "10") (term "1,0,0,0,0,0,0,1,0,0,0,1"))
(rule "add_zero_right" (formula "10") (term "0,0,0,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "10") (term "1,0,0,0,0,1,0,0,0,1"))
(rule "nnf_notAnd" (formula "10") (term "0,0,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,1,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,1,1,1,1,0,0,0,1"))
(rule "add_literals" (formula "10") (term "0,0,0,1,0,0,1,1,1,1,0,0,0,1"))
(rule "add_zero_left" (formula "10") (term "0,0,1,0,0,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,1,1,1,1,0,0,0,1"))
(rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0,1,1,1,1,0,0,0,1"))
(rule "add_zero_right" (formula "10") (term "0,0,0,0,0,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,1,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "10") (term "1,0,0,0,1,1,1,1,0,0,0,1"))
(rule "commute_or_2" (formula "7") (term "0"))
(rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "6") (ifseqformula "3"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "notLeft" (formula "8"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "6"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "6"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "nonNull" (formula "8") (inst "i=i"))
(rule "greater_literals" (formula "8") (term "0,1"))
(builtin "One Step Simplification" (formula "8"))
(rule "sub_literals" (formula "8") (term "2,1,0,1"))
(builtin "One Step Simplification" (formula "8"))
(rule "andLeft" (formula "8"))
(rule "notLeft" (formula "8"))
(rule "narrowSelectArrayType" (formula "8") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "10"))
(rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
(rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
(rule "nonNull" (formula "7") (inst "i=i"))
(rule "greater_literals" (formula "7") (term "0,1"))
(builtin "One Step Simplification" (formula "7"))
(rule "sub_literals" (formula "7") (term "2,1,0,1"))
(builtin "One Step Simplification" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "notLeft" (formula "7"))
(rule "narrowSelectArrayType" (formula "7") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "10"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
(rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
(rule "nonNull" (formula "6") (inst "i=i"))
(rule "greater_literals" (formula "6") (term "0,1"))
(builtin "One Step Simplification" (formula "6"))
(rule "sub_literals" (formula "6") (term "2,1,0,1"))
(builtin "One Step Simplification" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "notLeft" (formula "6"))
(rule "narrowSelectArrayType" (formula "6") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "10"))
(rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
(rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
(rule "nnf_imp2or" (formula "8") (term "0"))
(rule "nnf_imp2or" (formula "7") (term "0"))
(rule "nnf_imp2or" (formula "6") (term "0"))
(rule "nnf_notAnd" (formula "8") (term "0,0"))
(rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
(rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
(rule "add_literals" (formula "8") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
(rule "mul_literals" (formula "8") (term "1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
(rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
(rule "nnf_notAnd" (formula "7") (term "0,0"))
(rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
(rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
(rule "add_literals" (formula "7") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
(rule "mul_literals" (formula "7") (term "1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
(rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
(rule "nnf_notAnd" (formula "6") (term "0,0"))
(rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
(rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
(rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
(rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0"))
(rule "add_literals" (formula "6") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
(rule "mul_literals" (formula "6") (term "1,0,0,0"))
(rule "commute_or" (formula "9") (term "0,0"))
(rule "commute_or_2" (formula "8") (term "0"))
(rule "commute_or_2" (formula "7") (term "0"))
(rule "commute_or_2" (formula "6") (term "0"))
(rule "methodBodyExpand" (formula "19") (term "1") (newnames "heapBefore_sort,savedHeapBefore_sort"))
(builtin "One Step Simplification" (formula "19"))
(rule "commute_or" (formula "8") (term "0,0"))
(rule "commute_or" (formula "7") (term "0,0"))
(rule "commute_or" (formula "6") (term "0,0"))
(rule "arrayLengthNotNegative" (formula "9") (term "1,1,0"))
(rule "arrayLengthIsAShort" (formula "10") (term "1,1,0"))
(builtin "One Step Simplification" (formula "10"))
(rule "true_left" (formula "10"))
(rule "ifElseUnfold" (formula "20") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "20") (term "1") (newnames "x"))
(rule "inequality_comparison_simple" (formula "20") (term "1"))
(builtin "One Step Simplification" (formula "20"))
(rule "replace_known_right" (formula "20") (term "0,0,1,0") (ifseqformula "18"))
(builtin "One Step Simplification" (formula "20"))
(rule "ifElseSplit" (formula "20"))
(branch "if x true"
   (builtin "One Step Simplification" (formula "21"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "methodCallUnfoldArguments" (formula "20") (term "1"))
   (rule "variableDeclarationAssign" (formula "20") (term "1"))
   (rule "variableDeclaration" (formula "20") (term "1") (newnames "var"))
   (rule "assignment" (formula "20") (term "1"))
   (builtin "One Step Simplification" (formula "20"))
   (rule "variableDeclarationAssign" (formula "20") (term "1"))
   (rule "variableDeclaration" (formula "20") (term "1") (newnames "var_1"))
   (rule "assignment" (formula "20") (term "1"))
   (builtin "One Step Simplification" (formula "20"))
   (rule "variableDeclarationAssign" (formula "20") (term "1"))
   (rule "variableDeclaration" (formula "20") (term "1") (newnames "var_2"))
   (rule "assignment_read_length" (formula "20") (term "1"))
   (branch "Normal Execution (_entr_arr != null)"
      (builtin "One Step Simplification" (formula "21"))
      (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "18")))
      (rule "false_right" (formula "20"))
      (builtin "Use Operation Contract" (formula "20") (newnames "heapBefore_sort_0,exc_0,heapAfter_sort,anon_heap_sort") (contract "verif.selectvoting.system.core.Utils[verif.selectvoting.system.core.Utils::sort([[B,int,int)].JML normal_behavior operation contract.0"))
      (branch "Post (sort)"
         (builtin "One Step Simplification" (formula "12"))
         (builtin "One Step Simplification" (formula "22"))
         (rule "translateJavaSubInt" (formula "12") (term "1,1,0,0,0,1,0,1,1"))
         (rule "translateJavaAddInt" (formula "12") (term "0,2,2,0,1,0,0,1,0,1,1"))
         (rule "andLeft" (formula "12"))
         (rule "andLeft" (formula "13"))
         (rule "andLeft" (formula "14"))
         (rule "andLeft" (formula "14"))
         (rule "andLeft" (formula "15"))
         (rule "polySimp_elimSub" (formula "15") (term "1,1,0,0"))
         (rule "mul_literals" (formula "15") (term "1,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "15") (term "0,2,2,0,1,0"))
         (rule "polySimp_addComm0" (formula "15") (term "1,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
         (rule "blockEmpty" (formula "26") (term "1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
         (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
         (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
         (rule "array2seqDef" (formula "14") (term "0") (inst "u=u"))
         (rule "array2seqDef" (formula "14") (term "1") (inst "u=u"))
         (rule "narrowSelectArrayType" (formula "14") (term "2,1") (ifseqformula "1") (ifseqformula "24"))
         (rule "nnf_imp2or" (formula "16") (term "0"))
         (rule "nnf_imp2or" (formula "15") (term "0"))
         (rule "nnf_notAnd" (formula "16") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
         (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "16") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
         (rule "mul_literals" (formula "16") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "15") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
         (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "15") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
         (rule "mul_literals" (formula "15") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
         (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
         (rule "commute_or_2" (formula "16") (term "0"))
         (rule "commute_or" (formula "16") (term "0,0"))
         (rule "methodCallReturn" (formula "26") (term "1"))
         (rule "assignment" (formula "26") (term "1"))
         (builtin "One Step Simplification" (formula "26"))
         (rule "methodCallEmpty" (formula "26") (term "1"))
         (rule "tryEmpty" (formula "26") (term "1"))
         (rule "emptyModality" (formula "26") (term "1"))
         (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "15")) (ifInst ""  (formula "24")))
         (rule "eqSymm" (formula "26") (term "1,0,0,1"))
         (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "26") (term "0,0") (ifseqformula "3"))
         (rule "nonNull" (formula "26") (term "1,0,0,0,0,0,0") (inst "i=i"))
         (rule "greater_literals" (formula "26") (term "0,1,1,0,0,0,0,0,0"))
         (builtin "One Step Simplification" (formula "26"))
         (rule "sub_literals" (formula "26") (term "2,1,0,1,1,0,0,0,0,0,0"))
         (builtin "One Step Simplification" (formula "26"))
         (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,1,0,0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,1,1,0,0,0,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1,1,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,1,1,0,0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1,1,0,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1,1,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "26") (term "0,1,1,0,0,1,1,0,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1,1,0,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,1,1,0,0,0,0,0,0"))
         (rule "nonNull" (formula "26") (term "0,0,0,0,0,0,0,0") (inst "i=i"))
         (rule "sub_literals" (formula "26") (term "2,1,0,1,1,0,0,0,0,0,0,0,0"))
         (builtin "One Step Simplification" (formula "26"))
         (rule "greater_literals" (formula "26") (term "0,1,0,0,0,0,0,0,0,0"))
         (builtin "One Step Simplification" (formula "26"))
         (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,0,0,0,0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,1,0,0,0,0,0,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1,0,0,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,1,0,0,0,0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1,0,0,0,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1,0,0,0,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1,0,0,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "26") (term "0,1,1,0,0,1,0,0,0,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,1,0,0,0,0,0,0,0,0"))
         (rule "nonNull" (formula "26") (term "1,0,0,0,0,0,0,0") (inst "i=i"))
         (rule "sub_literals" (formula "26") (term "2,1,0,1,1,1,0,0,0,0,0,0,0"))
         (builtin "One Step Simplification" (formula "26"))
         (rule "greater_literals" (formula "26") (term "0,1,1,0,0,0,0,0,0,0"))
         (builtin "One Step Simplification" (formula "26"))
         (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,1,0,0,0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,1,1,0,0,0,0,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1,1,0,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,1,1,0,0,0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1,1,0,0,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1,1,0,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "26") (term "0,1,1,0,0,1,1,0,0,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1,1,0,0,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,1,1,0,0,0,0,0,0,0"))
         (rule "pullOutSelect" (formula "26") (term "0,0,0,1,0,0,0,0,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_a_0"))
         (rule "applyEq" (formula "27") (term "1,0,0,1,0,1,1,0,0,0,0,0,0,0") (ifseqformula "1"))
         (rule "applyEq" (formula "27") (term "0,1,1,1,0,0,1,1,0,0,0,0,0,0,0") (ifseqformula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")) (ifInst ""  (formula "3")))
         (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
         (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "26"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")))
         (rule "applyEqReverse" (formula "27") (term "0,1,1,1,0,0,1,1,0,0,0,0,0,0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "27") (term "0,0,0,1,0,0,0,0,0,0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "27") (term "1,0,0,1,0,1,1,0,0,0,0,0,0,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "replace_known_right" (formula "26") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "18"))
         (builtin "One Step Simplification" (formula "26"))
         (rule "pullOutSelect" (formula "26") (term "1,0,0,1,0,1,1,0,0,0,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_msg_0"))
         (rule "applyEq" (formula "27") (term "0,1,1,1,0,0,1,1,0,0,0,0,0,0") (ifseqformula "1"))
         (rule "applyEq" (formula "27") (term "0,0,0,1,0,0,0,0,0,0") (ifseqformula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")) (ifInst ""  (formula "3")))
         (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
         (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "25"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")))
         (rule "applyEqReverse" (formula "27") (term "1,0,0,1,0,1,1,0,0,0,0,0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "27") (term "0,1,1,1,0,0,1,1,0,0,0,0,0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "27") (term "0,0,0,1,0,0,0,0,0,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "replace_known_right" (formula "26") (term "0,0,1,0,0,0,0,0,0") (ifseqformula "19"))
         (builtin "One Step Simplification" (formula "26"))
         (rule "pullOutSelect" (formula "26") (term "0,1,1,1,0,0,1,0,0,0,0,0,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_b_0"))
         (rule "applyEq" (formula "27") (term "1,0,0,1,0,1,0,0,0,0,0,0,0,0") (ifseqformula "1"))
         (rule "applyEq" (formula "27") (term "0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")) (ifInst ""  (formula "3")))
         (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
         (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "26"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")))
         (rule "applyEqReverse" (formula "27") (term "0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "27") (term "1,0,0,1,0,1,0,0,0,0,0,0,0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "27") (term "0,1,1,1,0,0,1,0,0,0,0,0,0,0,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "replace_known_right" (formula "26") (term "0,0,0,0,0,0,0,0,0,0") (ifseqformula "17"))
         (builtin "One Step Simplification" (formula "26"))
         (rule "pullOutSelect" (formula "26") (term "0,0,1,0,0,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_0"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")) (ifInst ""  (formula "3")))
         (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
         (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "25"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")))
         (rule "applyEqReverse" (formula "27") (term "0,0,1,0,0,0,0,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "replace_known_right" (formula "26") (term "0,1,0,0,0,0,0") (ifseqformula "20"))
         (builtin "One Step Simplification" (formula "26"))
         (rule "pullOutSelect" (formula "26") (term "0,0,1,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_0"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")) (ifInst ""  (formula "3")))
         (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
         (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "25"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")))
         (rule "applyEqReverse" (formula "27") (term "0,0,1,0,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "replace_known_right" (formula "26") (term "0,1,0,0") (ifseqformula "23"))
         (builtin "One Step Simplification" (formula "26"))
         (rule "pullOutSelect" (formula "26") (term "0,0,1,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_0"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")) (ifInst ""  (formula "3")))
         (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
         (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "26"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")))
         (rule "applyEqReverse" (formula "27") (term "0,0,1,0,0,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "replace_known_right" (formula "26") (term "0,1,0,0,0") (ifseqformula "21"))
         (builtin "One Step Simplification" (formula "26"))
         (rule "pullOutSelect" (formula "26") (term "0,0,1,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_0"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")) (ifInst ""  (formula "3")))
         (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
         (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "26"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")))
         (rule "applyEqReverse" (formula "27") (term "0,0,1,0,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "replace_known_right" (formula "26") (term "0,1,0,0") (ifseqformula "22"))
         (builtin "One Step Simplification" (formula "26"))
         (rule "nnf_imp2or" (formula "26") (term "0,1,0,0"))
         (rule "nnf_imp2or" (formula "26") (term "0,0,0,0,0"))
         (rule "nnf_imp2or" (formula "26") (term "0,1,0,0,0"))
         (rule "nnf_notAnd" (formula "26") (term "0,0,1,0,0"))
         (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,1,0,0"))
         (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,1,0,0"))
         (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,1,0,0"))
         (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,1,0,0"))
         (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,1,0,0"))
         (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,1,0,0"))
         (rule "add_zero_right" (formula "26") (term "0,0,0,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,1,0,0"))
         (rule "mul_literals" (formula "26") (term "1,0,0,0,1,0,0"))
         (rule "nnf_notAnd" (formula "26") (term "0,0,0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0,0,0,0"))
         (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "26") (term "0,0,0,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0,0"))
         (rule "nnf_notAnd" (formula "26") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,1,0,0,0"))
         (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,1,0,0,0"))
         (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,1,0,0,0"))
         (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,1,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,1,0,0,0"))
         (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,1,0,0,0"))
         (rule "add_zero_right" (formula "26") (term "0,0,0,0,0,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,1,0,0,0"))
         (rule "mul_literals" (formula "26") (term "1,0,0,0,1,0,0,0"))
         (rule "andRight" (formula "26"))
         (branch "Case 1"
            (rule "andRight" (formula "26"))
            (branch "Case 1"
               (rule "andRight" (formula "26"))
               (branch "Case 1"
                  (rule "andRight" (formula "26"))
                  (branch "Case 1"
                     (rule "allRight" (formula "26") (inst "sk=i_3"))
                     (rule "orRight" (formula "26"))
                     (rule "notRight" (formula "27"))
                     (rule "orRight" (formula "27"))
                     (rule "inEqSimp_leqRight" (formula "27"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_geqRight" (formula "28"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_6"))
                     (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "16"))
                     (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "21")))
                     (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "15") (ifseqformula "21"))
                     (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "5") (ifseqformula "21"))
                     (rule "applyEqRigid" (formula "3") (term "1") (ifseqformula "4"))
                     (rule "ifEqualsNull" (formula "3"))
                     (rule "commute_and" (formula "3") (term "0"))
                     (rule "orLeft" (formula "3"))
                     (branch " (self.b@heap)[i_3]@anon_heap_sort<<anonHeapFunction>> = null & (self.b = entr_arr | !self.b.<created> = TRUE)"
                        (rule "andLeft" (formula "3"))
                        (rule "arrayLengthIsAShort" (formula "12") (term "1,1,0"))
                        (builtin "One Step Simplification" (formula "12"))
                        (rule "true_left" (formula "12"))
                        (rule "arrayLengthIsAShort" (formula "13") (term "1,1,0"))
                        (builtin "One Step Simplification" (formula "13"))
                        (rule "true_left" (formula "13"))
                        (rule "arrayLengthNotNegative" (formula "13") (term "1,1,0"))
                        (rule "arrayLengthNotNegative" (formula "12") (term "1,1,0"))
                        (rule "arrayLengthNotNegative" (formula "11") (term "1,1,0"))
                        (rule "arrayLengthIsAShort" (formula "12") (term "1,1,0"))
                        (builtin "One Step Simplification" (formula "12"))
                        (rule "true_left" (formula "12"))
                        (rule "allLeft" (formula "12") (inst "t=i_3"))
                        (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
                        (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "12") (term "0,0,1"))
                        (rule "leq_literals" (formula "12") (term "0,1"))
                        (builtin "One Step Simplification" (formula "12"))
                        (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "12") (term "0,1"))
                        (builtin "One Step Simplification" (formula "12"))
                        (rule "notLeft" (formula "12"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "28") (term "0") (ifseqformula "6"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "29"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1,0,0,0,0,0") (ifseqformula "7"))
                        (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "28"))
                        (builtin "One Step Simplification" (formula "13"))
                        (rule "replace_known_left" (formula "5") (term "0,1") (ifseqformula "13"))
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "5"))
                        (rule "applyEq" (formula "13") (term "0,1,1,0") (ifseqformula "5"))
                        (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "5"))
                        (rule "applyEq" (formula "26") (term "0") (ifseqformula "5"))
                        (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "5"))
                        (rule "applyEq" (formula "12") (term "1,0,0,0,0,0") (ifseqformula "5"))
                        (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "5"))
                        (rule "applyEq" (formula "24") (term "1,0") (ifseqformula "5"))
                        (rule "allLeft" (formula "23") (inst "t=i_3"))
                        (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1"))
                        (rule "add_literals" (formula "23") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "23") (term "0,0,1"))
                        (rule "leq_literals" (formula "23") (term "0,1"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "23") (term "0,1"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "notLeft" (formula "23"))
                        (rule "pullOutSelect" (formula "24") (term "0") (inst "selectSK=arr_7"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "25") (term "0") (ifseqformula "1"))
                        (rule "close" (formula "25") (ifseqformula "5"))
                     )
                     (branch " !(self.b = entr_arr | !self.b.<created> = TRUE) & self.b[i_3] = null"
                        (rule "andLeft" (formula "3"))
                        (rule "notLeft" (formula "3"))
                        (rule "orRight" (formula "21"))
                        (rule "notRight" (formula "22"))
                        (rule "arrayLengthIsAShort" (formula "12") (term "1,1,0"))
                        (builtin "One Step Simplification" (formula "12"))
                        (rule "true_left" (formula "12"))
                        (rule "arrayLengthIsAShort" (formula "13") (term "1,1,0"))
                        (builtin "One Step Simplification" (formula "13"))
                        (rule "true_left" (formula "13"))
                        (rule "arrayLengthNotNegative" (formula "13") (term "1,1,0"))
                        (rule "arrayLengthNotNegative" (formula "12") (term "1,1,0"))
                        (rule "arrayLengthIsAShort" (formula "11") (term "1,1,0"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "true_left" (formula "11"))
                        (rule "arrayLengthNotNegative" (formula "11") (term "1,1,0"))
                        (rule "allLeft" (formula "12") (inst "t=i_3"))
                        (rule "replace_known_left" (formula "12") (term "0,0,0") (ifseqformula "4"))
                        (builtin "One Step Simplification" (formula "12"))
                        (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "12") (term "0") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "12") (term "0,0"))
                        (builtin "One Step Simplification" (formula "12"))
                        (rule "inEqSimp_contradInEq1" (formula "12") (ifseqformula "2"))
                        (rule "andLeft" (formula "12"))
                        (rule "inEqSimp_homoInEq1" (formula "12"))
                        (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
                        (rule "add_literals" (formula "12") (term "1,1,0"))
                        (rule "times_zero_1" (formula "12") (term "1,0"))
                        (rule "add_zero_right" (formula "12") (term "0"))
                        (rule "leq_literals" (formula "12"))
                        (rule "closeFalse" (formula "12"))
                     )
                  )
                  (branch "Case 2"
                     (rule "allRight" (formula "26") (inst "sk=i_2"))
                     (rule "orRight" (formula "26"))
                     (rule "notRight" (formula "27"))
                     (rule "orRight" (formula "27"))
                     (rule "inEqSimp_leqRight" (formula "27"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_geqRight" (formula "28"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_4"))
                     (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "16"))
                     (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "22")))
                     (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "15") (ifseqformula "22"))
                     (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "5") (ifseqformula "22"))
                     (rule "applyEqRigid" (formula "3") (term "1") (ifseqformula "4"))
                     (rule "ifEqualsNull" (formula "3"))
                     (rule "commute_and" (formula "3") (term "0"))
                     (rule "orLeft" (formula "3"))
                     (branch " (self.a@heap)[i_2]@anon_heap_sort<<anonHeapFunction>> = null & (self.a = entr_arr | !self.a.<created> = TRUE)"
                        (rule "andLeft" (formula "3"))
                        (rule "arrayLengthIsAShort" (formula "12") (term "1,1,0"))
                        (builtin "One Step Simplification" (formula "12"))
                        (rule "true_left" (formula "12"))
                        (rule "arrayLengthIsAShort" (formula "13") (term "1,1,0"))
                        (builtin "One Step Simplification" (formula "13"))
                        (rule "true_left" (formula "13"))
                        (rule "arrayLengthNotNegative" (formula "13") (term "1,1,0"))
                        (rule "arrayLengthNotNegative" (formula "12") (term "1,1,0"))
                        (rule "arrayLengthNotNegative" (formula "11") (term "1,1,0"))
                        (rule "arrayLengthIsAShort" (formula "12") (term "1,1,0"))
                        (builtin "One Step Simplification" (formula "12"))
                        (rule "true_left" (formula "12"))
                        (rule "allLeft" (formula "14") (inst "t=i_2"))
                        (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1"))
                        (rule "add_literals" (formula "14") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "14") (term "0,0,1"))
                        (rule "leq_literals" (formula "14") (term "0,1"))
                        (builtin "One Step Simplification" (formula "14"))
                        (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "14") (term "0,1"))
                        (builtin "One Step Simplification" (formula "14"))
                        (rule "notLeft" (formula "14"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "28") (term "0") (ifseqformula "6"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "29"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1,0,0,0,0,0") (ifseqformula "7"))
                        (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "28"))
                        (builtin "One Step Simplification" (formula "13"))
                        (rule "cut_direct" (formula "5") (term "0"))
                        (branch "CUT: self.a = entr_arr TRUE"
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "true_left" (formula "6"))
                           (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "5"))
                           (rule "applyEq" (formula "27") (term "1,0") (ifseqformula "5"))
                           (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "5"))
                           (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "5"))
                           (rule "applyEq" (formula "28") (term "0") (ifseqformula "5"))
                           (rule "applyEq" (formula "15") (term "0,1,1,0") (ifseqformula "5"))
                           (rule "applyEq" (formula "15") (term "1,0,0,0,0,0") (ifseqformula "5"))
                           (rule "allLeft" (formula "24") (inst "t=i_2"))
                           (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
                           (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                           (rule "add_literals" (formula "24") (term "0,0,1"))
                           (rule "leq_literals" (formula "24") (term "0,1"))
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "3"))
                           (rule "qeq_literals" (formula "24") (term "0,1"))
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "notLeft" (formula "24"))
                           (rule "pullOutSelect" (formula "25") (term "0") (inst "selectSK=arr_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "applyEqReverse" (formula "26") (term "0") (ifseqformula "1"))
                           (rule "close" (formula "26") (ifseqformula "5"))
                        )
                        (branch "CUT: self.a = entr_arr FALSE"
                           (builtin "One Step Simplification" (formula "5"))
                           (rule "notLeft" (formula "5"))
                           (rule "referencedObjectIsCreatedRight" (formula "26") (ifseqformula "30"))
                           (rule "close" (formula "26") (ifseqformula "6"))
                        )
                     )
                     (branch " !(self.a = entr_arr | !self.a.<created> = TRUE) & self.a[i_2] = null"
                        (rule "andLeft" (formula "3"))
                        (rule "notLeft" (formula "3"))
                        (rule "orRight" (formula "21"))
                        (rule "notRight" (formula "22"))
                        (rule "arrayLengthIsAShort" (formula "12") (term "1,1,0"))
                        (builtin "One Step Simplification" (formula "12"))
                        (rule "true_left" (formula "12"))
                        (rule "arrayLengthIsAShort" (formula "13") (term "1,1,0"))
                        (builtin "One Step Simplification" (formula "13"))
                        (rule "true_left" (formula "13"))
                        (rule "arrayLengthNotNegative" (formula "13") (term "1,1,0"))
                        (rule "arrayLengthNotNegative" (formula "12") (term "1,1,0"))
                        (rule "arrayLengthIsAShort" (formula "11") (term "1,1,0"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "true_left" (formula "11"))
                        (rule "arrayLengthNotNegative" (formula "11") (term "1,1,0"))
                        (rule "allLeft" (formula "14") (inst "t=i_2"))
                        (rule "replace_known_left" (formula "14") (term "0,0,0") (ifseqformula "4"))
                        (builtin "One Step Simplification" (formula "14"))
                        (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1"))
                        (rule "add_literals" (formula "14") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "14") (term "0,0,1"))
                        (rule "leq_literals" (formula "14") (term "0,1"))
                        (builtin "One Step Simplification" (formula "14"))
                        (rule "inEqSimp_contradInEq1" (formula "14") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "14") (term "0"))
                        (builtin "One Step Simplification" (formula "14"))
                        (rule "closeFalse" (formula "14"))
                     )
                  )
               )
               (branch "Case 2"
                  (rule "allRight" (formula "26") (inst "sk=i_1"))
                  (rule "orRight" (formula "26"))
                  (rule "notRight" (formula "27"))
                  (rule "orRight" (formula "27"))
                  (rule "inEqSimp_geqRight" (formula "28"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_leqRight" (formula "28"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                  (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_2"))
                  (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "16"))
                  (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "23")))
                  (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "15") (ifseqformula "23"))
                  (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "5") (ifseqformula "23"))
                  (rule "applyEqRigid" (formula "3") (term "1") (ifseqformula "4"))
                  (rule "ifEqualsNull" (formula "3"))
                  (rule "commute_and" (formula "3") (term "0"))
                  (rule "orLeft" (formula "3"))
                  (branch " (self.msg@heap)[i_1]@anon_heap_sort<<anonHeapFunction>> = null & (self.msg = entr_arr | !self.msg.<created> = TRUE)"
                     (rule "andLeft" (formula "3"))
                     (rule "arrayLengthNotNegative" (formula "11") (term "1,1,0"))
                     (rule "arrayLengthIsAShort" (formula "13") (term "1,1,0"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "true_left" (formula "13"))
                     (rule "arrayLengthIsAShort" (formula "12") (term "1,1,0"))
                     (builtin "One Step Simplification" (formula "12"))
                     (rule "true_left" (formula "12"))
                     (rule "arrayLengthNotNegative" (formula "13") (term "1,1,0"))
                     (rule "arrayLengthIsAShort" (formula "15") (term "1,1,0"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "true_left" (formula "15"))
                     (rule "arrayLengthNotNegative" (formula "15") (term "1,1,0"))
                     (rule "allLeft" (formula "16") (inst "t=i_1"))
                     (rule "inEqSimp_commuteGeq" (formula "16") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
                     (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "16") (term "0,0,1"))
                     (rule "leq_literals" (formula "16") (term "0,1"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "16") (term "0,1"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "notLeft" (formula "16"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "28") (term "0") (ifseqformula "6"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "29"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "replace_known_left" (formula "5") (term "0,1") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "5"))
                     (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "5"))
                     (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "4"))
                     (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "4"))
                     (rule "applyEq" (formula "15") (term "1,0,0,0,0,0") (ifseqformula "4"))
                     (rule "applyEq" (formula "15") (term "0,1,1,0") (ifseqformula "4"))
                     (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "4"))
                     (rule "applyEq" (formula "23") (term "1,0") (ifseqformula "4"))
                     (rule "applyEq" (formula "26") (term "0") (ifseqformula "4"))
                     (rule "allLeft" (formula "22") (inst "t=i_1"))
                     (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "22") (term "1,0") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "22") (term "0,1,0"))
                     (builtin "One Step Simplification" (formula "22"))
                     (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1"))
                     (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
                     (rule "add_literals" (formula "22") (term "0,0,1"))
                     (rule "leq_literals" (formula "22") (term "0,1"))
                     (builtin "One Step Simplification" (formula "22"))
                     (rule "notLeft" (formula "22"))
                     (rule "pullOutSelect" (formula "23") (term "0") (inst "selectSK=arr_3"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "applyEqReverse" (formula "24") (term "0") (ifseqformula "1"))
                     (rule "close" (formula "24") (ifseqformula "4"))
                  )
                  (branch " !(self.msg = entr_arr | !self.msg.<created> = TRUE) & self.msg[i_1] = null"
                     (rule "andLeft" (formula "3"))
                     (rule "notLeft" (formula "3"))
                     (rule "orRight" (formula "21"))
                     (rule "notRight" (formula "22"))
                     (rule "arrayLengthIsAShort" (formula "12") (term "1,1,0"))
                     (builtin "One Step Simplification" (formula "12"))
                     (rule "true_left" (formula "12"))
                     (rule "arrayLengthIsAShort" (formula "11") (term "1,1,0"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "true_left" (formula "11"))
                     (rule "arrayLengthNotNegative" (formula "12") (term "1,1,0"))
                     (rule "arrayLengthNotNegative" (formula "11") (term "1,1,0"))
                     (rule "arrayLengthIsAShort" (formula "15") (term "1,1,0"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "true_left" (formula "15"))
                     (rule "arrayLengthNotNegative" (formula "15") (term "1,1,0"))
                     (rule "allLeft" (formula "16") (inst "t=i_1"))
                     (rule "replace_known_left" (formula "16") (term "0,0,0") (ifseqformula "4"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "inEqSimp_commuteGeq" (formula "16") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "3"))
                     (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
                     (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "16") (term "0,0,1"))
                     (rule "leq_literals" (formula "16") (term "0,1"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "inEqSimp_contradInEq1" (formula "16") (ifseqformula "2"))
                     (rule "qeq_literals" (formula "16") (term "0"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "closeFalse" (formula "16"))
                  )
               )
            )
            (branch "Case 2"
               (rule "allRight" (formula "26") (inst "sk=i_0"))
               (rule "orRight" (formula "26"))
               (rule "notRight" (formula "27"))
               (rule "orRight" (formula "27"))
               (rule "inEqSimp_leqRight" (formula "27"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_geqRight" (formula "28"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_0"))
               (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "16"))
               (builtin "One Step Simplification" (formula "3"))
               (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
               (rule "hideAuxiliaryEq" (formula "3"))
               (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "14") (ifseqformula "27"))
               (rule "arrayLengthNotNegative" (formula "10") (term "1,1,0"))
               (rule "arrayLengthNotNegative" (formula "9") (term "1,1,0"))
               (rule "arrayLengthIsAShort" (formula "12") (term "1,1,0"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "true_left" (formula "12"))
               (rule "arrayLengthIsAShort" (formula "13") (term "1,1,0"))
               (builtin "One Step Simplification" (formula "13"))
               (rule "true_left" (formula "13"))
               (rule "arrayLengthNotNegative" (formula "13") (term "1,1,0"))
               (rule "arrayLengthIsAShort" (formula "10") (term "1,1,0"))
               (builtin "One Step Simplification" (formula "10"))
               (rule "true_left" (formula "10"))
               (rule "allLeft" (formula "16") (inst "t=i_0"))
               (rule "inEqSimp_commuteGeq" (formula "16") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "1"))
               (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
               (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
               (rule "add_literals" (formula "16") (term "0,0,1"))
               (rule "leq_literals" (formula "16") (term "0,1"))
               (builtin "One Step Simplification" (formula "16"))
               (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "2"))
               (rule "qeq_literals" (formula "16") (term "0,1"))
               (builtin "One Step Simplification" (formula "16"))
               (rule "notLeft" (formula "16"))
               (rule "allLeft" (formula "22") (inst "t=i_0"))
               (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "22") (term "1,0") (ifseqformula "2"))
               (rule "qeq_literals" (formula "22") (term "0,1,0"))
               (builtin "One Step Simplification" (formula "22"))
               (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "1"))
               (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1"))
               (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "22") (term "0,0,1"))
               (rule "leq_literals" (formula "22") (term "0,1"))
               (builtin "One Step Simplification" (formula "22"))
               (rule "notLeft" (formula "22"))
               (rule "pullOutSelect" (formula "23") (term "0") (inst "selectSK=arr_1"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "24") (term "0") (ifseqformula "1"))
               (rule "close" (formula "24") (ifseqformula "4"))
            )
         )
         (branch "Case 2"
            (rule "allRight" (formula "26") (inst "sk=f_0"))
            (rule "allRight" (formula "26") (inst "sk=o_0"))
            (rule "orRight" (formula "26"))
            (rule "orRight" (formula "26"))
            (rule "pullOutSelect" (formula "28") (term "0") (inst "selectSK=f_0_0"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "27")) (ifInst ""  (formula "28")))
            (rule "applyEqReverse" (formula "29") (term "0") (ifseqformula "1"))
            (builtin "One Step Simplification" (formula "29"))
            (rule "closeTrue" (formula "29"))
         )
      )
      (branch "Exceptional Post (sort)"
         (builtin "One Step Simplification" (formula "12"))
         (builtin "One Step Simplification" (formula "22"))
         (rule "translateJavaSubInt" (formula "12") (term "1,1,0,0,0,1,0,1,1"))
         (rule "translateJavaAddInt" (formula "12") (term "0,2,2,0,1,0,0,1,0,1,1"))
         (rule "andLeft" (formula "12"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "1,0") (ifseqformula "12"))
         (rule "andLeft" (formula "13"))
         (rule "andLeft" (formula "13"))
         (rule "andLeft" (formula "15"))
         (rule "notLeft" (formula "13"))
         (rule "close" (formula "16") (ifseqformula "15"))
      )
      (branch "Pre (sort)"
         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "18")) (ifInst ""  (formula "1")) (ifInst ""  (formula "18")) (ifInst ""  (formula "4")))
         (rule "leq_literals" (formula "20") (term "0,0,1"))
         (builtin "One Step Simplification" (formula "20"))
         (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "20") (term "0,1"))
         (rule "replace_known_left" (formula "20") (term "0,1") (ifseqformula "9"))
         (builtin "One Step Simplification" (formula "20"))
         (rule "inEqSimp_commuteLeq" (formula "20") (term "0,1,1"))
         (rule "replace_known_left" (formula "20") (term "0,1,1") (ifseqformula "9"))
         (builtin "One Step Simplification" (formula "20"))
         (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,1"))
         (rule "replace_known_left" (formula "20") (term "0,0,1") (ifseqformula "9"))
         (builtin "One Step Simplification" (formula "20"))
         (rule "inEqSimp_homoInEq0" (formula "20") (term "0,1"))
         (rule "polySimp_pullOutFactor1" (formula "20") (term "0,0,1"))
         (rule "add_literals" (formula "20") (term "1,0,0,1"))
         (rule "times_zero_1" (formula "20") (term "0,0,1"))
         (rule "qeq_literals" (formula "20") (term "0,1"))
         (builtin "One Step Simplification" (formula "20"))
         (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,0"))
         (rule "mul_literals" (formula "20") (term "0,1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,0"))
         (rule "nonNull" (formula "20") (term "1") (inst "i=i"))
         (rule "greater_literals" (formula "20") (term "0,1,1"))
         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "18")))
         (rule "sub_literals" (formula "20") (term "2,1,0,1"))
         (builtin "One Step Simplification" (formula "20"))
         (rule "narrowSelectArrayType" (formula "20") (term "0,0,1,0,1") (ifseqformula "1") (ifseqformula "18"))
         (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,1"))
         (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,1"))
         (rule "mul_literals" (formula "20") (term "0,1,1,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,1"))
         (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,1"))
         (builtin "One Step Simplification" (formula "20"))
         (rule "allRight" (formula "20") (inst "sk=i_4"))
         (rule "impRight" (formula "20"))
         (rule "andLeft" (formula "1"))
         (rule "notRight" (formula "22"))
         (rule "inEqSimp_homoInEq0" (formula "3"))
         (rule "polySimp_addComm1" (formula "3") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "3"))
         (rule "polySimp_mulComm0" (formula "3") (term "1"))
         (rule "polySimp_rightDist" (formula "3") (term "1"))
         (rule "mul_literals" (formula "3") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
         (rule "polySimp_elimOne" (formula "3") (term "1,1"))
         (rule "allLeft" (formula "13") (inst "t=i_4"))
         (rule "replace_known_left" (formula "13") (term "0,0,0") (ifseqformula "1"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "inEqSimp_commuteGeq" (formula "13") (term "1"))
         (rule "inEqSimp_contradInEq1" (formula "13") (term "0") (ifseqformula "2"))
         (rule "qeq_literals" (formula "13") (term "0,0"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "13"))
         (rule "andLeft" (formula "3"))
         (rule "inEqSimp_homoInEq1" (formula "3"))
         (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
         (rule "add_literals" (formula "3") (term "1,1,0"))
         (rule "times_zero_1" (formula "3") (term "1,0"))
         (rule "add_literals" (formula "3") (term "0"))
         (rule "leq_literals" (formula "3"))
         (rule "closeFalse" (formula "3"))
      )
   )
   (branch "Null Reference (_entr_arr = null)"
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "if x false"
   (builtin "One Step Simplification" (formula "21"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
)

}
