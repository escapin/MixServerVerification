\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Jul 10 14:07:32 CEST 2017
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=6000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , permissions-permissions\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Mon Jul 10 14:07:32 CEST 2017
name=verif.selectvoting.system.core.MixServer[verif.selectvoting.system.core.MixServer\\:\\:sort([[B)].JML normal_behavior operation contract.0
contract=verif.selectvoting.system.core.MixServer[verif.selectvoting.system.core.MixServer\\:\\:sort([[B)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mihai" ) (keyVersion "0814267c8a184b1e7da1309b7a9875095ca72975"))

(autoModeTime "25772")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "entr_arr,self,result,exc,heapAtPre,o,f") (userinteraction))
(builtin "One Step Simplification" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "assignment" (formula "9") (term "1") (userinteraction))
(rule "methodBodyExpand" (formula "9") (term "1,1") (newnames "heapBefore_sort,savedHeapBefore_sort") (userinteraction))
(builtin "One Step Simplification" (formula "9"))
(rule "variableDeclarationAssign" (formula "9") (term "1") (userinteraction))
(rule "variableDeclaration" (formula "9") (term "1") (newnames "result_1") (userinteraction))
(builtin "Use Operation Contract" (formula "9") (newnames "heapBefore_copyOf,result_0,exc_0,heapAfter_copyOf,anon_heap_copyOf") (contract "verif.selectvoting.system.core.Utils[verif.selectvoting.system.core.Utils::copyOf([[B)].JML normal_behavior operation contract.0"))
(branch "Post (copyOf)"
   (builtin "One Step Simplification" (formula "9"))
   (rule "nonNull" (formula "7") (inst "i=i") (userinteraction))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "11"))
   (rule "notLeft" (formula "7"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "13"))
   (rule "andLeft" (formula "13"))
   (rule "notLeft" (formula "14"))
   (rule "notLeft" (formula "13"))
   (rule "greater_literals" (formula "7") (term "0") (userinteraction))
   (builtin "One Step Simplification" (formula "7"))
   (rule "nonNull" (formula "13") (inst "i=i") (userinteraction))
   (rule "andLeft" (formula "13") (userinteraction))
   (rule "greater_literals" (formula "14") (term "0") (userinteraction))
   (builtin "One Step Simplification" (formula "14"))
   (rule "notLeft" (formula "13") (userinteraction))
   (rule "assignment" (formula "18") (term "1,1") (userinteraction))
   (builtin "One Step Simplification" (formula "18"))
   (rule "ifElseUnfold" (formula "18") (term "1") (inst "#boolv=x") (userinteraction))
   (rule "variableDeclaration" (formula "18") (term "1") (newnames "x") (userinteraction))
   (rule "inequality_comparison_simple" (formula "18") (term "1") (userinteraction))
   (rule "ifElse" (formula "18") (term "1,1") (userinteraction))
   (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "15")))
   (rule "methodCallUnfoldArguments" (formula "18") (term "1") (userinteraction))
   (rule "variableDeclarationAssign" (formula "18") (term "1") (userinteraction))
   (rule "variableDeclaration" (formula "18") (term "1") (newnames "var") (userinteraction))
   (rule "assignment" (formula "18") (term "1") (userinteraction))
   (rule "variableDeclarationAssign" (formula "18") (term "1,1") (userinteraction))
   (rule "variableDeclaration" (formula "18") (term "1,1") (newnames "var_1") (userinteraction))
   (rule "assignment" (formula "18") (term "1,1") (userinteraction))
   (rule "variableDeclarationAssign" (formula "18") (term "1,1,1") (userinteraction))
   (rule "variableDeclaration" (formula "18") (term "1,1,1") (newnames "var_2") (userinteraction))
   (rule "assignment_read_length" (formula "18") (term "1,1,1") (userinteraction))
   (branch "Normal Execution (result_1 != null)"
      (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "15")))
      (builtin "One Step Simplification" (formula "19"))
      (builtin "Use Operation Contract" (formula "19") (newnames "heapBefore_sort_0,exc_1,heapAfter_sort,anon_heap_sort") (contract "verif.selectvoting.system.core.Utils[verif.selectvoting.system.core.Utils::sort([[B,int,int)].JML normal_behavior operation contract.0"))
      (branch "Post (sort)"
         (builtin "One Step Simplification" (formula "15"))
         (rule "blockEmpty" (formula "21") (term "1,1") (userinteraction))
         (rule "methodCallReturn" (formula "21") (term "1,1") (userinteraction))
         (rule "assignment" (formula "21") (term "1,1") (userinteraction))
         (rule "methodCallEmpty" (formula "21") (term "1,1,1") (userinteraction))
         (rule "tryEmpty" (formula "21") (term "1,1,1") (userinteraction))
         (rule "emptyModality" (formula "21") (term "1,1,1") (userinteraction))
         (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "16")) (ifInst ""  (formula "17")))
         (rule "false_right" (formula "20"))
         (rule "andLeft" (formula "15"))
         (rule "andLeft" (formula "16"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "18"))
         (rule "andRight" (formula "24") (userinteraction))
         (branch "Case 1"
            (rule "andRight" (formula "24") (userinteraction))
            (branch "Case 1"
               (rule "seqPermDef" (formula "24") (inst "s=s") (inst "iv=iv") (userinteraction))
               (rule "andRight" (formula "24") (userinteraction))
               (branch "Case 1"
                  (rule "array2seq2dDef" (formula "24") (term "0,0") (inst "u=u") (userinteraction))
                  (rule "array2seq2dDef" (formula "24") (term "0,1") (inst "u=u") (userinteraction))
                  (rule "seqPermDef" (formula "17") (inst "s=s") (inst "iv=iv") (userinteraction))
                  (rule "andLeft" (formula "17") (userinteraction))
                  (rule "lenOfArray2seq" (formula "17") (term "0") (userinteraction))
                  (rule "lenOfArray2seq" (formula "17") (term "1") (userinteraction))
                  (rule "array2seq2dDef" (formula "12") (term "0") (inst "u=u") (userinteraction))
                  (rule "array2seq2dDef" (formula "12") (term "1") (inst "u=u") (userinteraction))
                  (rule "equalityToSeqGetAndSeqLen" (formula "12") (inst "iv=iv") (userinteraction))
                  (rule "andLeft" (formula "12") (userinteraction))
                  (builtin "One Step Simplification" (formula "18"))
                  (rule "true_left" (formula "18"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "11") (term "1") (ifseqformula "9"))
                  (rule "translateJavaSubInt" (formula "19") (term "1,1,0,0"))
                  (rule "translateJavaAddInt" (formula "19") (term "0,2,2,0,1,0"))
                  (rule "sub_literals" (formula "7") (term "2,1,0"))
                  (builtin "One Step Simplification" (formula "7"))
                  (rule "sub_literals" (formula "14") (term "2,1,0"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "exLeft" (formula "18") (inst "sk=s_0"))
                  (rule "andLeft" (formula "18"))
                  (rule "andLeft" (formula "18"))
                  (rule "eqSymm" (formula "18"))
                  (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "25"))
                  (builtin "One Step Simplification" (formula "4"))
                  (rule "replace_known_right" (formula "11") (term "0,1") (ifseqformula "23"))
                  (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "24")))
                  (rule "polySimp_elimSub" (formula "21") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "21") (term "1,1,1,0,0"))
                  (rule "polySimp_addComm0" (formula "21") (term "0,2,2,0,1,0"))
                  (rule "polySimp_addComm0" (formula "21") (term "1,1,0,0"))
                  (rule "lenOfSeqDef" (formula "13") (term "1,1,0,0"))
                  (rule "polySimp_elimSub" (formula "13") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "13") (term "1,1,1,1,0,0"))
                  (rule "add_zero_right" (formula "13") (term "1,1,1,0,0"))
                  (rule "lenOfSeqDef" (formula "27") (term "0"))
                  (rule "eqSymm" (formula "27"))
                  (rule "polySimp_elimSub" (formula "27") (term "1,1"))
                  (rule "times_zero_2" (formula "27") (term "1,1,1"))
                  (rule "add_zero_right" (formula "27") (term "1,1"))
                  (rule "lenOfSeqDef" (formula "12") (term "0"))
                  (rule "eqSymm" (formula "12"))
                  (rule "polySimp_elimSub" (formula "12") (term "1,1"))
                  (rule "mul_literals" (formula "12") (term "1,1,1"))
                  (rule "add_zero_right" (formula "12") (term "1,1"))
                  (rule "getOfSeqDef" (formula "13") (term "0,1,0"))
                  (rule "castDel" (formula "13") (term "1,0,1,0"))
                  (rule "castDel" (formula "13") (term "2,0,1,0"))
                  (rule "add_zero_right" (formula "13") (term "0,2,1,1,0,1,0"))
                  (rule "eqSymm" (formula "13") (term "1,0"))
                  (rule "polySimp_elimSub" (formula "13") (term "1,1,0,1,1,0"))
                  (rule "times_zero_2" (formula "13") (term "1,1,1,0,1,1,0"))
                  (rule "add_zero_right" (formula "13") (term "1,1,0,1,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                  (rule "lenOfSeqDef" (formula "27") (term "0"))
                  (rule "eqSymm" (formula "27"))
                  (rule "polySimp_elimSub" (formula "27") (term "1,1"))
                  (rule "times_zero_2" (formula "27") (term "1,1,1"))
                  (rule "add_zero_right" (formula "27") (term "1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                  (rule "lenOfSeqDef" (formula "12") (term "0"))
                  (rule "eqSymm" (formula "12"))
                  (rule "polySimp_elimSub" (formula "12") (term "1,1"))
                  (rule "times_zero_2" (formula "12") (term "1,1,1"))
                  (rule "add_zero_right" (formula "12") (term "1,1"))
                  (rule "close" (formula "27") (ifseqformula "12"))
               )
               (branch "Case 2"
                  (rule "seqPermDef" (formula "17") (inst "s=s") (inst "iv=iv") (userinteraction))
                  (rule "andLeft" (formula "17") (userinteraction))
                  (rule "exLeft" (formula "18") (inst "sk=s_1") (userinteraction))
                  (rule "exRightHide" (formula "25") (inst "t=s_1") (userinteraction))
                  (rule "andRight" (formula "25") (userinteraction))
                  (branch "Case 1"
                     (rule "array2seq2dDef" (formula "25") (term "0,1,0") (inst "u=u") (userinteraction))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "11") (term "1") (ifseqformula "9"))
                     (rule "translateJavaSubInt" (formula "19") (term "1,1,0,0"))
                     (rule "translateJavaAddInt" (formula "19") (term "0,2,2,0,1,0"))
                     (rule "sub_literals" (formula "13") (term "2,1,0"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "sub_literals" (formula "7") (term "2,1,0"))
                     (builtin "One Step Simplification" (formula "7"))
                     (rule "andLeft" (formula "18"))
                     (rule "andLeft" (formula "18"))
                     (rule "eqSymm" (formula "27") (term "0"))
                     (rule "eqSymm" (formula "18"))
                     (rule "replace_known_left" (formula "27") (term "1") (ifseqformula "19"))
                     (builtin "One Step Simplification" (formula "27"))
                     (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "25"))
                     (builtin "One Step Simplification" (formula "4"))
                     (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "24"))
                     (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "23")))
                     (rule "polySimp_elimSub" (formula "21") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "21") (term "1,1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "21") (term "0,2,2,0,1,0"))
                     (rule "polySimp_addComm0" (formula "21") (term "1,1,0,0"))
                     (rule "lenOfSeqDef" (formula "27") (term "0"))
                     (rule "polySimp_elimSub" (formula "27") (term "1,0"))
                     (rule "mul_literals" (formula "27") (term "1,1,0"))
                     (rule "add_zero_right" (formula "27") (term "1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                     (rule "narrowSelectArrayType" (formula "7") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "25"))
                     (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "27") (term "0,0"))
                     (rule "add_zero_right" (formula "27") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                     (rule "applyEq" (formula "18") (term "0") (ifseqformula "17"))
                     (rule "applyEq" (formula "17") (term "1") (ifseqformula "18"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "0,0,0"))
                     (rule "polySimp_elimOne" (formula "27") (term "0,0,0"))
                     (rule "array2seqDef" (formula "17") (term "0,0") (inst "u=u"))
                     (rule "lenOfSeqDef" (formula "17") (term "0"))
                     (rule "polySimp_elimSub" (formula "17") (term "1,0"))
                     (rule "times_zero_2" (formula "17") (term "1,1,0"))
                     (rule "add_zero_right" (formula "17") (term "1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0"))
                     (rule "add_zero_right" (formula "17") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0"))
                     (rule "polySimp_elimOne" (formula "17") (term "0,0,0"))
                     (rule "close" (formula "27") (ifseqformula "17"))
                  )
                  (branch "Case 2"
                     (rule "allRight" (formula "25") (inst "sk=iv_0") (userinteraction))
                     (rule "impRight" (formula "25") (userinteraction))
                     (rule "array2seq2dDef" (formula "26") (term "0,0") (inst "u=u") (userinteraction))
                     (rule "array2seq2dDef" (formula "26") (term "0,1") (inst "u=u") (userinteraction))
                     (rule "getOfSeqDef" (formula "26") (term "0") (userinteraction))
                     (rule "getOfSeqDef" (formula "26") (term "1") (userinteraction))
                     (rule "ifthenelse_split" (formula "26") (term "0") (userinteraction))
                     (branch "0 ≤ iv_0 ∧ iv_0 < result_0.length - 0 TRUE"
                        (rule "castDel" (formula "27") (term "0") (userinteraction))
                        (rule "add_zero_right" (formula "27") (term "0,2,1,0") (userinteraction))
                        (rule "ifthenelse_split" (formula "27") (term "1") (userinteraction))
                        (branch " 0 ≤ (int)s_1[iv_0] ∧ (int)s_1[iv_0] < entr_arr.length - 0 TRUE"
                           (rule "castDel" (formula "28") (term "1") (userinteraction))
                           (rule "add_zero_right" (formula "28") (term "0,2,1,1") (userinteraction))
                           (rule "pullOut" (formula "28") (term "0,2,1,1") (inst "sk=intseqGet_0") (userinteraction))
                           (rule "andLeft" (formula "22") (userinteraction))
                           (rule "allLeftHide" (formula "23") (inst "t=iv_0") (userinteraction))
                           (rule "impLeft" (formula "23") (userinteraction))
                           (branch "Case 1"
                              (rule "close" (formula "25") (ifseqformula "4"))
                           )
                           (branch "Case 2"
                              (rule "applyEqRigid" (formula "23") (term "1,1") (ifseqformula "1") (userinteraction))
                              (rule "equalityToSeqGetAndSeqLen" (formula "16") (inst "iv=iv") (userinteraction))
                              (rule "andLeft" (formula "16") (userinteraction))
                              (rule "array2seq2dDef" (formula "16") (term "0,0") (inst "u=u") (userinteraction))
                              (rule "array2seq2dDef" (formula "16") (term "0,1") (inst "u=u") (userinteraction))
                              (rule "lenOfSeqDef" (formula "16") (term "0") (userinteraction))
                              (rule "lenOfSeqDef" (formula "16") (term "1") (userinteraction))
                              (rule "allLeftHide" (formula "17") (inst "t=intseqGet_0") (userinteraction))
                              (rule "impLeft" (formula "17") (userinteraction))
                              (branch
                                 (rule "array2seq2dDef" (formula "26") (term "0,1,1") (inst "u=u") (userinteraction))
                                 (rule "lenOfSeqDef" (formula "26") (term "1,1") (userinteraction))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "1") (ifseqformula "13"))
                                 (rule "translateJavaSubInt" (formula "24") (term "1,1,0,0"))
                                 (rule "translateJavaAddInt" (formula "24") (term "0,2,2,0,1,0"))
                                 (rule "sub_literals" (formula "11") (term "2,1,0"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "sub_literals" (formula "17") (term "2,1,0"))
                                 (builtin "One Step Simplification" (formula "17"))
                                 (rule "andLeft" (formula "3"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "andLeft" (formula "6"))
                                 (rule "eqSymm" (formula "24"))
                                 (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "32"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "31"))
                                 (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "30")))
                                 (rule "polySimp_elimSub" (formula "18") (term "1,0"))
                                 (rule "times_zero_2" (formula "18") (term "1,1,0"))
                                 (rule "add_zero_right" (formula "18") (term "1,0"))
                                 (rule "polySimp_elimSub" (formula "29") (term "1,1,1"))
                                 (rule "times_zero_2" (formula "29") (term "1,1,1,1"))
                                 (rule "add_zero_right" (formula "29") (term "1,1,1"))
                                 (rule "polySimp_elimSub" (formula "18") (term "1,1"))
                                 (rule "mul_literals" (formula "18") (term "1,1,1"))
                                 (rule "add_zero_right" (formula "18") (term "1,1"))
                                 (rule "polySimp_elimSub" (formula "27") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "27") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimSub" (formula "5") (term "1"))
                                 (rule "times_zero_2" (formula "5") (term "1,1"))
                                 (rule "add_zero_right" (formula "5") (term "1"))
                                 (rule "polySimp_elimSub" (formula "3") (term "1"))
                                 (rule "times_zero_2" (formula "3") (term "1,1"))
                                 (rule "add_zero_right" (formula "3") (term "1"))
                                 (rule "polySimp_addComm0" (formula "27") (term "0,2,2,0,1,0"))
                                 (rule "polySimp_addComm0" (formula "27") (term "1,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0"))
                                 (rule "add_zero_right" (formula "18") (term "0,0,0"))
                                 (rule "eqSymm" (formula "18"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "29") (term "0,1,1"))
                                 (rule "add_zero_right" (formula "29") (term "0,0,1,1"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "6"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "6") (term "0"))
                                 (rule "narrowSelectArrayType" (formula "13") (term "0,0,1,0") (ifseqformula "7") (ifseqformula "32"))
                                 (rule "inEqSimp_ltToLeq" (formula "5"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "5") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "3"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0"))
                                 (rule "add_zero_right" (formula "18") (term "0,0,0"))
                                 (rule "eqSymm" (formula "18"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "29") (term "0"))
                                 (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "29") (term "1"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1"))
                                 (rule "polySimp_addComm1" (formula "29") (term "0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "4"))
                                 (rule "inEqSimp_commuteLeq" (formula "2"))
                                 (rule "applyEq" (formula "23") (term "0") (ifseqformula "24"))
                                 (rule "eqSymm" (formula "23"))
                                 (rule "applyEq" (formula "29") (term "0,1,0,1") (ifseqformula "18"))
                                 (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "1"))
                                 (rule "polySimp_addComm1" (formula "3") (term "0"))
                                 (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "1"))
                                 (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "29"))
                                 (rule "inEqSimp_leqRight" (formula "29"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "29") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                                 (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                                 (rule "polySimp_elimOne" (formula "7") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                 (rule "polySimp_elimOne" (formula "6") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "28") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "19") (term "0,0,0"))
                                 (rule "eqSymm" (formula "19"))
                                 (rule "polySimp_elimOne" (formula "19") (term "0,0,1"))
                                 (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "19"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                 (rule "polySimp_elimOne" (formula "4") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "19") (term "0,0,0"))
                                 (rule "eqSymm" (formula "19"))
                                 (rule "polySimp_elimOne" (formula "19") (term "0,0,1"))
                                 (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "19"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0"))
                                 (rule "array2seqDef" (formula "34") (term "1") (inst "u=u"))
                                 (rule "eqSymm" (formula "34"))
                                 (rule "array2seqDef" (formula "27") (term "0,0") (inst "u=u"))
                                 (rule "getOfSeqDef" (formula "27") (term "0"))
                                 (rule "castDel" (formula "27") (term "2,0"))
                                 (rule "castDel" (formula "27") (term "1,0"))
                                 (rule "add_zero_right" (formula "27") (term "0,2,1,0"))
                                 (rule "polySimp_elimSub" (formula "27") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "27") (term "1,1,1,0,0"))
                                 (rule "add_zero_right" (formula "27") (term "1,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
                                 (rule "polySimp_addComm1" (formula "27") (term "0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                                 (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "5"))
                                 (builtin "One Step Simplification" (formula "27"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "27") (term "0,0,0"))
                                 (rule "polySimp_elimOne" (formula "27") (term "0,0,0"))
                                 (rule "replace_known_left" (formula "27") (term "0,0") (ifseqformula "6"))
                                 (builtin "One Step Simplification" (formula "27"))
                                 (rule "array2seqDef" (formula "25") (term "0,0") (inst "u=u"))
                                 (rule "lenOfSeqDef" (formula "25") (term "0"))
                                 (rule "polySimp_elimSub" (formula "25") (term "1,0"))
                                 (rule "times_zero_2" (formula "25") (term "1,1,0"))
                                 (rule "add_zero_right" (formula "25") (term "1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0"))
                                 (rule "add_zero_right" (formula "25") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0"))
                                 (rule "polySimp_elimOne" (formula "25") (term "0,0,0"))
                                 (rule "applyEq" (formula "25") (term "0") (ifseqformula "19"))
                                 (rule "applyEq" (formula "1") (term "0") (ifseqformula "25"))
                                 (rule "applyEq" (formula "19") (term "1") (ifseqformula "25"))
                                 (rule "array2seqDef" (formula "24") (term "0,0") (inst "u=u"))
                                 (rule "lenOfSeqDef" (formula "24") (term "0"))
                                 (rule "polySimp_elimSub" (formula "24") (term "1,0"))
                                 (rule "times_zero_2" (formula "24") (term "1,1,0"))
                                 (rule "add_zero_right" (formula "24") (term "1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0"))
                                 (rule "add_zero_right" (formula "24") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "0,0,0"))
                                 (rule "polySimp_elimOne" (formula "24") (term "0,0,0"))
                                 (rule "array2seqDef" (formula "33") (term "1") (inst "u=u"))
                                 (rule "eqSymm" (formula "33"))
                                 (rule "array2seqDef" (formula "26") (term "0,1") (inst "u=u"))
                                 (rule "eqSymm" (formula "26"))
                                 (rule "getOfSeqDef" (formula "26") (term "0"))
                                 (rule "castDel" (formula "26") (term "2,0"))
                                 (rule "castDel" (formula "26") (term "1,0"))
                                 (rule "add_zero_right" (formula "26") (term "0,2,1,0"))
                                 (rule "polySimp_elimSub" (formula "26") (term "1,1,0,0"))
                                 (rule "times_zero_2" (formula "26") (term "1,1,1,0,0"))
                                 (rule "add_zero_right" (formula "26") (term "1,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
                                 (rule "polySimp_addComm1" (formula "26") (term "0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                                 (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "26"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "26") (term "0,0,0"))
                                 (rule "polySimp_elimOne" (formula "26") (term "0,0,0"))
                                 (rule "eqSeqDef" (formula "33") (inst "iv=iv"))
                                 (rule "lenOfSeqDef" (formula "33") (term "0,0"))
                                 (rule "eqSymm" (formula "33") (term "0"))
                                 (rule "polySimp_elimSub" (formula "33") (term "1,1,0"))
                                 (rule "times_zero_2" (formula "33") (term "1,1,1,0"))
                                 (rule "add_zero_right" (formula "33") (term "1,1,0"))
                                 (rule "getOfSeqDef" (formula "33") (term "0,1,0,1"))
                                 (rule "castDel" (formula "33") (term "2,0,1,0,1"))
                                 (rule "castDel" (formula "33") (term "1,0,1,0,1"))
                                 (rule "add_zero_right" (formula "33") (term "0,2,1,0,1,0,1"))
                                 (rule "eqSymm" (formula "33") (term "1,0,1"))
                                 (rule "polySimp_elimSub" (formula "33") (term "1,1,0,1,1,0,1"))
                                 (rule "times_zero_2" (formula "33") (term "1,1,1,0,1,1,0,1"))
                                 (rule "add_zero_right" (formula "33") (term "1,1,0,1,1,0,1"))
                                 (rule "lenOfSeqDef" (formula "33") (term "1,1,0,0,1"))
                                 (rule "polySimp_elimSub" (formula "33") (term "1,1,1,0,0,1"))
                                 (rule "times_zero_2" (formula "33") (term "1,1,1,1,0,0,1"))
                                 (rule "add_zero_right" (formula "33") (term "1,1,1,0,0,1"))
                                 (rule "lenOfSeqDef" (formula "33") (term "0,0"))
                                 (rule "eqSymm" (formula "33") (term "0"))
                                 (rule "polySimp_elimSub" (formula "33") (term "1,1,0"))
                                 (rule "times_zero_2" (formula "33") (term "1,1,1,0"))
                                 (rule "add_zero_right" (formula "33") (term "1,1,0"))
                                 (rule "getOfSeqDef" (formula "33") (term "0,1,0,1"))
                                 (rule "castDel" (formula "33") (term "1,0,1,0,1"))
                                 (rule "castDel" (formula "33") (term "2,0,1,0,1"))
                                 (rule "add_zero_right" (formula "33") (term "0,2,1,0,1,0,1"))
                                 (rule "eqSymm" (formula "33") (term "1,0,1"))
                                 (rule "polySimp_elimSub" (formula "33") (term "1,1,0,1,1,0,1"))
                                 (rule "mul_literals" (formula "33") (term "1,1,1,0,1,1,0,1"))
                                 (rule "add_zero_right" (formula "33") (term "1,1,0,1,1,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "33") (term "0,1,1,0,0,1"))
                                 (rule "add_zero_right" (formula "33") (term "0,0,1,1,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,1,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "33") (term "0,1,0"))
                                 (rule "add_zero_right" (formula "33") (term "0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "33") (term "0,0,0"))
                                 (rule "add_zero_right" (formula "33") (term "0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0,1,0,1"))
                                 (rule "eqSymm" (formula "33") (term "1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,1,1,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0,1,0,1"))
                                 (rule "eqSymm" (formula "33") (term "1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,1,1,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0,1,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,1,1,0,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "33") (term "0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "33") (term "0,0,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "33") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "33") (term "0,0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "33") (term "0,0,1,0,0,1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "0,0,0,1,0,0,1,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "33") (term "0,0,0,1,0,0,1,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0,1,0,1"))
                                 (rule "eqSymm" (formula "33") (term "1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,1,1,0,1"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,1,0,1,1,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,1,1,0,1"))
                                 (rule "mul_literals" (formula "33") (term "0,1,1,0,1,1,0,1"))
                                 (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,1,1,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0,1"))
                                 (rule "mul_literals" (formula "33") (term "0,1,1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0,1,0,1"))
                                 (rule "eqSymm" (formula "33") (term "1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,1,1,0,1"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,1,0,1,1,0,1"))
                                 (rule "mul_literals" (formula "33") (term "0,1,1,0,1,1,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,1,1,0,1"))
                                 (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,1,1,0,1"))
                                 (rule "pullOutSelect" (formula "26") (term "1") (inst "selectSK=arr_57"))
                                 (rule "simplifySelectOfAnonEQ" (formula "26") (ifseqformula "22"))
                                 (builtin "One Step Simplification" (formula "26"))
                                 (rule "applyEqReverse" (formula "27") (term "1") (ifseqformula "26"))
                                 (rule "hideAuxiliaryEq" (formula "26"))
                                 (rule "narrowSelectArrayType" (formula "26") (term "1") (ifseqformula "21") (ifseqformula "30"))
                                 (rule "pullOutSelect" (formula "26") (term "1,0") (inst "selectSK=arr_58"))
                                 (rule "simplifySelectOfAnonEQ" (formula "26") (ifseqformula "16"))
                                 (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "31")) (ifInst ""  (formula "30")))
                                 (rule "applyEqReverse" (formula "27") (term "1,0") (ifseqformula "26"))
                                 (rule "hideAuxiliaryEq" (formula "26"))
                                 (rule "narrowSelectArrayType" (formula "26") (term "1,0") (ifseqformula "15") (ifseqformula "30"))
                                 (rule "pullOutSelect" (formula "33") (term "0,1,0,0") (inst "selectSK=arr_59"))
                                 (rule "applyEq" (formula "34") (term "1,1,0,1,0,1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "34") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "34") (term "0,0,0,1,1,1,0,0,1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "34") (term "0,1,1,1,1,0,0,1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "34") (term "0,0,0,0,0") (ifseqformula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "34") (term "0,1,0,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "34") (term "1,1,0,1,0,1") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "34") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "34") (term "0,0,0,1,1,1,0,0,1") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "34") (term "0,1,1,1,1,0,0,1") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "34") (term "0,0,0,0,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "eqSymm" (formula "33") (term "1,0,1"))
                                 (rule "eqSymm" (formula "33") (term "0"))
                                 (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "1"))
                                 (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                                 (rule "mul_literals" (formula "7") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "7") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                                 (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                                 (rule "polySimp_elimOne" (formula "7") (term "0"))
                                 (rule "pullOutSelect" (formula "34") (term "0,1,1,1,0,0,1,0,1") (inst "selectSK=arr_60"))
                                 (rule "applyEq" (formula "35") (term "0,1,0,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "35") (term "1,1,0,1,0,1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "35") (term "0,0,0,0,0") (ifseqformula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "33")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "18"))
                                 (rule "eqSymm" (formula "35") (term "1,0,1"))
                                 (rule "eqSymm" (formula "35") (term "0"))
                                 (rule "eqSymm" (formula "1") (term "0,0,0"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "13"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "8"))
                                 (rule "times_zero_1" (formula "6") (term "0,0"))
                                 (rule "add_zero_left" (formula "6") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                                 (rule "mul_literals" (formula "6") (term "1"))
                                 (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "6"))
                                 (rule "leq_literals" (formula "4") (term "0"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=arr_61"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "34")) (ifInst ""  (formula "14")))
                                 (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "nnf_imp2or" (formula "30") (term "0"))
                                 (rule "nnf_imp2or" (formula "16") (term "0"))
                                 (rule "nnf_imp2or" (formula "22") (term "0"))
                                 (rule "nnf_imp2or" (formula "29") (term "0"))
                                 (rule "nnf_imp2or" (formula "35") (term "0,1"))
                                 (rule "nnf_notAnd" (formula "30") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "30") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "30") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
                                 (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                                 (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "22") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "22") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                                 (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "29") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "29") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "29") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0"))
                                 (rule "mul_literals" (formula "29") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "35") (term "0,0,1"))
                                 (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,1"))
                                 (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0,1"))
                                 (rule "add_zero_right" (formula "35") (term "0,0,0,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,1"))
                                 (rule "mul_literals" (formula "35") (term "1,0,0,0,1"))
                                 (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1"))
                                 (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1"))
                                 (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,1"))
                                 (rule "add_zero_left" (formula "35") (term "0,0,1,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,1"))
                                 (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "15") (ifseqformula "12"))
                                 (rule "andLeft" (formula "15"))
                                 (rule "notLeft" (formula "16"))
                                 (rule "andLeft" (formula "15"))
                                 (rule "andLeft" (formula "15"))
                                 (rule "notLeft" (formula "17"))
                                 (rule "notLeft" (formula "16"))
                                 (rule "andLeft" (formula "15"))
                                 (rule "notLeft" (formula "16"))
                                 (rule "andLeft" (formula "15"))
                                 (rule "andLeft" (formula "15"))
                                 (rule "andLeft" (formula "15"))
                                 (rule "andLeft" (formula "15"))
                                 (rule "notLeft" (formula "16"))
                                 (rule "notLeft" (formula "15"))
                                 (rule "nonNull" (formula "17") (inst "i=i"))
                                 (rule "sub_literals" (formula "17") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "17"))
                                 (rule "greater_literals" (formula "17") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "17"))
                                 (rule "andLeft" (formula "17"))
                                 (rule "notLeft" (formula "17"))
                                 (rule "narrowSelectArrayType" (formula "17") (term "0,0,1,0") (ifseqformula "10") (ifseqformula "33"))
                                 (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "16") (inst "i=i"))
                                 (rule "sub_literals" (formula "16") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "16"))
                                 (rule "greater_literals" (formula "16") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "16"))
                                 (rule "andLeft" (formula "16"))
                                 (rule "notLeft" (formula "16"))
                                 (rule "narrowSelectArrayType" (formula "16") (term "0,0,1,0") (ifseqformula "10") (ifseqformula "33"))
                                 (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "15") (inst "i=i"))
                                 (rule "sub_literals" (formula "15") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "15"))
                                 (rule "greater_literals" (formula "15") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "15"))
                                 (rule "andLeft" (formula "15"))
                                 (rule "notLeft" (formula "15"))
                                 (rule "narrowSelectArrayType" (formula "15") (term "0,0,1,0") (ifseqformula "10") (ifseqformula "33"))
                                 (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                                 (rule "nnf_imp2or" (formula "17") (term "0"))
                                 (rule "nnf_imp2or" (formula "16") (term "0"))
                                 (rule "nnf_imp2or" (formula "15") (term "0"))
                                 (rule "nnf_notAnd" (formula "17") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                                 (rule "mul_literals" (formula "17") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                                 (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                 (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                                 (rule "seqGetAlphaCast" (formula "3") (term "0"))
                                 (rule "castedGetAny" (formula "3") (term "0"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "true_left" (formula "3"))
                                 (rule "lenNonNegative" (formula "28") (term "1"))
                                 (rule "inEqSimp_commuteLeq" (formula "28"))
                                 (rule "inEqSimp_exactShadow3" (formula "28") (ifseqformula "2"))
                                 (rule "times_zero_1" (formula "28") (term "0,0"))
                                 (rule "add_zero_left" (formula "28") (term "0"))
                                 (rule "inEqSimp_subsumption1" (formula "28") (ifseqformula "5"))
                                 (rule "leq_literals" (formula "28") (term "0"))
                                 (builtin "One Step Simplification" (formula "28"))
                                 (rule "true_left" (formula "28"))
                                 (rule "commute_or_2" (formula "33") (term "0"))
                                 (rule "ifthenelse_split" (formula "23") (term "0"))
                                 (branch "result_0.length ≥ 1 TRUE"
                                    (rule "eqSymm" (formula "24"))
                                    (rule "applyEq" (formula "29") (term "0") (ifseqformula "24"))
                                    (rule "applyEq" (formula "9") (term "0") (ifseqformula "24"))
                                    (rule "applyEq" (formula "2") (term "0") (ifseqformula "23"))
                                    (rule "applyEq" (formula "29") (term "1") (ifseqformula "23"))
                                    (rule "inEqSimp_subsumption1" (formula "28") (ifseqformula "22"))
                                    (rule "leq_literals" (formula "28") (term "0"))
                                    (builtin "One Step Simplification" (formula "28"))
                                    (rule "true_left" (formula "28"))
                                    (rule "inEqSimp_contradInEq0" (formula "30") (term "0,0") (ifseqformula "2"))
                                    (rule "inEqSimp_homoInEq1" (formula "30") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "30") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "30") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "30") (term "0,0,0,0"))
                                    (rule "leq_literals" (formula "30") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "30"))
                                    (rule "applyEq" (formula "46") (term "2,0,1,0,1") (ifseqformula "30"))
                                    (rule "applyEq" (formula "46") (term "2,1,1,0,1") (ifseqformula "30"))
                                    (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "2"))
                                    (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                                    (rule "mul_literals" (formula "7") (term "0,0,0"))
                                    (rule "polySimp_addComm1" (formula "7") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                                    (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                                    (rule "polySimp_elimOne" (formula "7") (term "0"))
                                    (rule "inEqSimp_exactShadow3" (formula "22") (ifseqformula "2"))
                                    (rule "mul_literals" (formula "22") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "22"))
                                    (rule "mul_literals" (formula "22") (term "1"))
                                    (rule "commute_or_2" (formula "17") (term "0"))
                                    (rule "commute_or_2" (formula "24") (term "0"))
                                    (rule "ifthenelse_split" (formula "28") (term "0"))
                                    (branch "entr_arr.length ≥ 1 TRUE"
                                       (rule "eqSymm" (formula "29"))
                                       (rule "applyEq" (formula "33") (term "1,1,0") (ifseqformula "29"))
                                       (rule "applyEq" (formula "22") (term "0") (ifseqformula "29"))
                                       (rule "applyEq" (formula "23") (term "1,1,0") (ifseqformula "28"))
                                       (rule "applyEq" (formula "2") (term "0") (ifseqformula "28"))
                                       (rule "applyEq" (formula "7") (term "0") (ifseqformula "28"))
                                       (rule "applyEq" (formula "31") (term "1,1,1,0,0") (ifseqformula "28"))
                                       (rule "applyEq" (formula "22") (term "1") (ifseqformula "28"))
                                       (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "4"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "inEqSimp_homoInEq1" (formula "2"))
                                       (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                       (rule "add_literals" (formula "2") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "2") (term "1,0"))
                                       (rule "add_zero_right" (formula "2") (term "0"))
                                       (rule "leq_literals" (formula "2"))
                                       (rule "closeFalse" (formula "2"))
                                    )
                                    (branch "entr_arr.length ≥ 1 FALSE"
                                       (rule "eqSymm" (formula "28"))
                                       (rule "inEqSimp_geqRight" (formula "33"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "applyEq" (formula "8") (term "0") (ifseqformula "29"))
                                       (rule "inEqSimp_homoInEq1" (formula "8"))
                                       (rule "times_zero_2" (formula "8") (term "1,0"))
                                       (rule "add_zero_right" (formula "8") (term "0"))
                                       (rule "applyEq" (formula "33") (term "1,1,0") (ifseqformula "29"))
                                       (rule "applyEq" (formula "3") (term "0") (ifseqformula "29"))
                                       (rule "inEqSimp_commuteLeq" (formula "3"))
                                       (rule "applyEq" (formula "23") (term "0") (ifseqformula "29"))
                                       (rule "qeq_literals" (formula "23"))
                                       (rule "closeFalse" (formula "23"))
                                    )
                                 )
                                 (branch "result_0.length ≥ 1 FALSE"
                                    (rule "eqSymm" (formula "23"))
                                    (rule "inEqSimp_geqRight" (formula "34"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "applyEqRigid" (formula "29") (term "0") (ifseqformula "24"))
                                    (rule "qeq_literals" (formula "29"))
                                    (rule "true_left" (formula "29"))
                                    (rule "applyEq" (formula "3") (term "0") (ifseqformula "24"))
                                    (rule "inEqSimp_commuteLeq" (formula "3"))
                                    (rule "applyEqRigid" (formula "10") (term "0") (ifseqformula "24"))
                                    (rule "inEqSimp_homoInEq1" (formula "10"))
                                    (rule "times_zero_2" (formula "10") (term "1,0"))
                                    (rule "add_zero_right" (formula "10") (term "0"))
                                    (rule "applyEqRigid" (formula "29") (term "1") (ifseqformula "24"))
                                    (builtin "One Step Simplification" (formula "29"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "10"))
                                    (rule "mul_literals" (formula "10") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "7"))
                                    (rule "qeq_literals" (formula "10") (term "0"))
                                    (builtin "One Step Simplification" (formula "10"))
                                    (rule "closeFalse" (formula "10"))
                                 )
                              )
                              (branch "Case 2"
                                 (rule "array2seq2dDef" (formula "17") (term "0,0") (inst "u=u") (userinteraction))
                                 (rule "array2seq2dDef" (formula "17") (term "0,1") (inst "u=u") (userinteraction))
                                 (rule "getOfSeqDef" (formula "17") (term "0") (userinteraction))
                                 (rule "getOfSeqDef" (formula "17") (term "1") (userinteraction))
                                 (rule "ifthenelse_split" (formula "17") (term "0") (userinteraction))
                                 (branch "0 ≤ intseqGet_0 ∧ intseqGet_0 < result_0.length - 0 TRUE"
                                    (rule "ifthenelse_split" (formula "18") (term "1") (userinteraction))
                                    (branch
                                       (rule "cut" (inst "cutFormula=  array2seq(heapAfter_sort,
            byte[]::select(heapAfter_sort,
                           result_0,
                           arr(iv_0)))
= array2seq(heapAfter_copyOf,
            byte[]::select(heapAfter_copyOf,
                           result_0,
                           arr(intseqGet_0)))") (userinteraction))
                                       (branch "CUT: array2seq(heapAfter_sort, result_0[iv_0]@heapAfter_sort) = array2seq(heapAfter_copyOf, result_0[intseqGet_0]@heapAfter_copyOf) TRUE"
                                          (rule "applyEq" (formula "34") (term "0") (ifseqformula "1") (userinteraction))
                                          (rule "castDel" (formula "20") (term "0") (userinteraction))
                                          (rule "castDel" (formula "20") (term "1") (userinteraction))
                                          (rule "add_zero_right" (formula "20") (term "0,2,1,0") (userinteraction))
                                          (rule "add_zero_right" (formula "20") (term "0,2,1,1") (userinteraction))
                                          (rule "applyEq" (formula "34") (term "0") (ifseqformula "20") (userinteraction))
                                          (rule "equalityToSeqGetAndSeqLenRight" (formula "34") (inst "iv=iv") (userinteraction))
                                          (rule "andRight" (formula "34") (userinteraction))
                                          (branch "Case 1"
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "16") (term "1") (ifseqformula "14"))
                                             (rule "translateJavaSubInt" (formula "28") (term "1,1,0,0"))
                                             (rule "translateJavaAddInt" (formula "28") (term "0,2,2,0,1,0"))
                                             (rule "sub_literals" (formula "12") (term "2,1,0"))
                                             (builtin "One Step Simplification" (formula "12"))
                                             (rule "sub_literals" (formula "21") (term "2,1,0"))
                                             (builtin "One Step Simplification" (formula "21"))
                                             (rule "andLeft" (formula "26"))
                                             (rule "andLeft" (formula "3"))
                                             (rule "andLeft" (formula "6"))
                                             (rule "andLeft" (formula "20"))
                                             (rule "andLeft" (formula "22"))
                                             (rule "andLeft" (formula "5"))
                                             (rule "eqSymm" (formula "38"))
                                             (rule "eqSymm" (formula "29"))
                                             (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "36"))
                                             (builtin "One Step Simplification" (formula "11"))
                                             (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "35"))
                                             (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "34")))
                                             (rule "polySimp_elimSub" (formula "19") (term "1,0"))
                                             (rule "mul_literals" (formula "19") (term "1,1,0"))
                                             (rule "add_zero_right" (formula "19") (term "1,0"))
                                             (rule "polySimp_elimSub" (formula "19") (term "1,1"))
                                             (rule "mul_literals" (formula "19") (term "1,1,1"))
                                             (rule "add_zero_right" (formula "19") (term "1,1"))
                                             (rule "polySimp_elimSub" (formula "32") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "32") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "4") (term "1"))
                                             (rule "mul_literals" (formula "4") (term "1,1"))
                                             (rule "add_zero_right" (formula "4") (term "1"))
                                             (rule "polySimp_elimSub" (formula "21") (term "1"))
                                             (rule "mul_literals" (formula "21") (term "1,1"))
                                             (rule "add_zero_right" (formula "21") (term "1"))
                                             (rule "polySimp_elimSub" (formula "22") (term "1"))
                                             (rule "mul_literals" (formula "22") (term "1,1"))
                                             (rule "add_zero_right" (formula "22") (term "1"))
                                             (rule "polySimp_elimSub" (formula "5") (term "1"))
                                             (rule "mul_literals" (formula "5") (term "1,1"))
                                             (rule "add_zero_right" (formula "5") (term "1"))
                                             (rule "polySimp_addComm0" (formula "32") (term "0,2,2,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "32") (term "1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0"))
                                             (rule "add_zero_right" (formula "19") (term "0,0,0"))
                                             (rule "eqSymm" (formula "19"))
                                             (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1"))
                                             (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "7"))
                                             (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "7") (term "0"))
                                             (rule "narrowSelectArrayType" (formula "14") (term "0,0,1,0") (ifseqformula "8") (ifseqformula "36"))
                                             (rule "inEqSimp_ltToLeq" (formula "4"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "21"))
                                             (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "21") (term "0"))
                                             (rule "inEqSimp_ltToLeq" (formula "22"))
                                             (rule "polySimp_mulComm0" (formula "22") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "22") (term "0"))
                                             (rule "inEqSimp_ltToLeq" (formula "5"))
                                             (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "5") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "32") (term "0,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0"))
                                             (rule "add_zero_right" (formula "19") (term "0,0,0"))
                                             (rule "eqSymm" (formula "19"))
                                             (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1"))
                                             (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "3"))
                                             (rule "inEqSimp_commuteLeq" (formula "6"))
                                             (rule "inEqSimp_commuteLeq" (formula "20"))
                                             (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
                                             (rule "eqSymm" (formula "27"))
                                             (rule "applyEqRigid" (formula "3") (term "1,0") (ifseqformula "2"))
                                             (rule "polySimp_addComm1" (formula "3") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "31") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                                             (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                                             (rule "polySimp_elimOne" (formula "5") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "19"))
                                             (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                                             (rule "polySimp_elimOne" (formula "19") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "20"))
                                             (rule "polySimp_mulLiterals" (formula "20") (term "0"))
                                             (rule "polySimp_elimOne" (formula "20") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                                             (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                             (rule "polySimp_elimOne" (formula "3") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "30") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0"))
                                             (rule "eqSymm" (formula "17"))
                                             (rule "polySimp_elimOne" (formula "17") (term "0,0,1"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0"))
                                             (rule "eqSymm" (formula "17"))
                                             (rule "polySimp_elimOne" (formula "17") (term "0,0,1"))
                                             (rule "array2seqDef" (formula "1") (term "0") (inst "u=u"))
                                             (rule "array2seqDef" (formula "21") (term "0") (inst "u=u"))
                                             (rule "lenOfSeqDefEQ" (formula "36") (term "1") (ifseqformula "21"))
                                             (rule "eqSymm" (formula "36"))
                                             (rule "polySimp_elimSub" (formula "36") (term "1,0"))
                                             (rule "times_zero_2" (formula "36") (term "1,1,0"))
                                             (rule "add_zero_right" (formula "36") (term "1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0"))
                                             (rule "array2seqDef" (formula "1") (term "1") (inst "u=u"))
                                             (rule "array2seqDef" (formula "29") (term "0,1") (inst "u=u"))
                                             (rule "eqSymm" (formula "29"))
                                             (rule "getOfSeqDef" (formula "29") (term "0"))
                                             (rule "castDel" (formula "29") (term "1,0"))
                                             (rule "castDel" (formula "29") (term "2,0"))
                                             (rule "add_zero_right" (formula "29") (term "0,2,1,0"))
                                             (rule "polySimp_elimSub" (formula "29") (term "1,1,0,0"))
                                             (rule "times_zero_2" (formula "29") (term "1,1,1,0,0"))
                                             (rule "add_zero_right" (formula "29") (term "1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0"))
                                             (rule "polySimp_addComm1" (formula "29") (term "0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
                                             (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "18"))
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "29") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "29") (term "0,0,0"))
                                             (rule "polySimp_elimOne" (formula "29") (term "0,0,0"))
                                             (rule "replace_known_left" (formula "29") (term "0,0") (ifseqformula "19"))
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "array2seqDef" (formula "21") (term "1") (inst "u=u"))
                                             (rule "array2seqDef" (formula "27") (term "0,0") (inst "u=u"))
                                             (rule "lenOfSeqDef" (formula "27") (term "0"))
                                             (rule "polySimp_elimSub" (formula "27") (term "1,0"))
                                             (rule "times_zero_2" (formula "27") (term "1,1,0"))
                                             (rule "add_zero_right" (formula "27") (term "1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "27") (term "0,0"))
                                             (rule "add_zero_right" (formula "27") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "0,0,0"))
                                             (rule "polySimp_elimOne" (formula "27") (term "0,0,0"))
                                             (rule "applyEq" (formula "27") (term "0") (ifseqformula "17"))
                                             (rule "applyEq" (formula "17") (term "1") (ifseqformula "27"))
                                             (rule "array2seqDef" (formula "26") (term "0,0") (inst "u=u"))
                                             (rule "lenOfSeqDef" (formula "26") (term "0"))
                                             (rule "polySimp_elimSub" (formula "26") (term "1,0"))
                                             (rule "times_zero_2" (formula "26") (term "1,1,0"))
                                             (rule "add_zero_right" (formula "26") (term "1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "26") (term "0,0"))
                                             (rule "add_zero_right" (formula "26") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "26") (term "0,0,0"))
                                             (rule "polySimp_elimOne" (formula "26") (term "0,0,0"))
                                             (rule "array2seqDef" (formula "35") (term "0,1") (inst "u=u"))
                                             (rule "eqSymm" (formula "35"))
                                             (rule "lenOfSeqDef" (formula "35") (term "0"))
                                             (rule "polySimp_elimSub" (formula "35") (term "1,0"))
                                             (rule "times_zero_2" (formula "35") (term "1,1,0"))
                                             (rule "add_zero_right" (formula "35") (term "1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "35") (term "0,0"))
                                             (rule "add_zero_right" (formula "35") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "35") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "35") (term "0,0,0"))
                                             (rule "polySimp_elimOne" (formula "35") (term "0,0,0"))
                                             (rule "eqSeqDef" (formula "1") (inst "iv=iv"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "lenOfSeqDef" (formula "1") (term "1"))
                                             (rule "polySimp_elimSub" (formula "1") (term "1,1"))
                                             (rule "times_zero_2" (formula "1") (term "1,1,1"))
                                             (rule "add_zero_right" (formula "1") (term "1,1"))
                                             (rule "getOfSeqDef" (formula "2") (term "1,1,0"))
                                             (rule "castDel" (formula "2") (term "1,1,1,0"))
                                             (rule "castDel" (formula "2") (term "2,1,1,0"))
                                             (rule "add_zero_right" (formula "2") (term "0,2,1,1,1,0"))
                                             (rule "polySimp_elimSub" (formula "2") (term "1,1,0,1,1,0"))
                                             (rule "times_zero_2" (formula "2") (term "1,1,1,0,1,1,0"))
                                             (rule "add_zero_right" (formula "2") (term "1,1,0,1,1,0"))
                                             (rule "lenOfSeqDef" (formula "1") (term "0"))
                                             (rule "polySimp_elimSub" (formula "1") (term "1,0"))
                                             (rule "mul_literals" (formula "1") (term "1,1,0"))
                                             (rule "add_zero_right" (formula "1") (term "1,0"))
                                             (rule "lenOfSeqDef" (formula "2") (term "1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "2") (term "1,1,1,0,0"))
                                             (rule "times_zero_2" (formula "2") (term "1,1,1,1,0,0"))
                                             (rule "add_zero_right" (formula "2") (term "1,1,1,0,0"))
                                             (rule "getOfSeqDef" (formula "2") (term "0,1,0"))
                                             (rule "castDel" (formula "2") (term "2,0,1,0"))
                                             (rule "castDel" (formula "2") (term "1,0,1,0"))
                                             (rule "add_zero_right" (formula "2") (term "0,2,1,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "2") (term "1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "2") (term "1,1,1,0,0,1,0"))
                                             (rule "add_zero_right" (formula "2") (term "1,1,0,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1"))
                                             (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1"))
                                             (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,1,1,0"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,1,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0"))
                                             (rule "add_zero_right" (formula "1") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1,1,0,0"))
                                             (rule "add_zero_right" (formula "2") (term "0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,1,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1,0"))
                                             (rule "apply_eq_monomials" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "1"))
                                             (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0,0,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "2") (term "1,0,1,0,0,1,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "2") (term "1,0,0,1,0,0"))
                                             (rule "add_literals" (formula "2") (term "1,1,1,0,0,1,0,0"))
                                             (rule "times_zero_1" (formula "2") (term "1,1,0,0,1,0,0"))
                                             (rule "add_zero_right" (formula "2") (term "1,0,0,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1"))
                                             (rule "polySimp_elimOne" (formula "1") (term "0,0,1"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,1,1,0"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,1,1,0"))
                                             (rule "polySimp_rightDist" (formula "2") (term "1,1,0,1,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,1,1,0"))
                                             (rule "mul_literals" (formula "2") (term "0,1,1,0,1,1,0"))
                                             (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,1,1,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                                             (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "2") (term "0,1,1,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,1,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,1,0,0,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,0,0,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "2") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0"))
                                             (rule "array2seqDef" (formula "29") (term "0,1") (inst "u=u"))
                                             (rule "eqSymm" (formula "29"))
                                             (rule "getOfSeqDef" (formula "29") (term "0"))
                                             (rule "castDel" (formula "29") (term "1,0"))
                                             (rule "castDel" (formula "29") (term "2,0"))
                                             (rule "add_zero_right" (formula "29") (term "0,2,1,0"))
                                             (rule "polySimp_elimSub" (formula "29") (term "1,1,0,0"))
                                             (rule "times_zero_2" (formula "29") (term "1,1,1,0,0"))
                                             (rule "add_zero_right" (formula "29") (term "1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0"))
                                             (rule "polySimp_addComm1" (formula "29") (term "0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
                                             (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "5"))
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "29") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "29") (term "0,0,0"))
                                             (rule "polySimp_elimOne" (formula "29") (term "0,0,0"))
                                             (rule "replace_known_left" (formula "29") (term "0,0") (ifseqformula "4"))
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "eqSeqDef" (formula "22") (inst "iv=iv"))
                                             (rule "andLeft" (formula "22"))
                                             (rule "lenOfSeqDef" (formula "22") (term "1"))
                                             (rule "polySimp_elimSub" (formula "22") (term "1,1"))
                                             (rule "mul_literals" (formula "22") (term "1,1,1"))
                                             (rule "add_zero_right" (formula "22") (term "1,1"))
                                             (rule "lenOfSeqDef" (formula "22") (term "0"))
                                             (rule "polySimp_elimSub" (formula "22") (term "1,0"))
                                             (rule "times_zero_2" (formula "22") (term "1,1,0"))
                                             (rule "add_zero_right" (formula "22") (term "1,0"))
                                             (rule "getOfSeqDef" (formula "23") (term "0,1,0"))
                                             (rule "castDel" (formula "23") (term "1,0,1,0"))
                                             (rule "castDel" (formula "23") (term "2,0,1,0"))
                                             (rule "add_zero_right" (formula "23") (term "0,2,1,0,1,0"))
                                             (rule "eqSymm" (formula "23") (term "1,0"))
                                             (rule "polySimp_elimSub" (formula "23") (term "1,1,0,1,1,0"))
                                             (rule "times_zero_2" (formula "23") (term "1,1,1,0,1,1,0"))
                                             (rule "add_zero_right" (formula "23") (term "1,1,0,1,1,0"))
                                             (rule "lenOfSeqDef" (formula "23") (term "1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "23") (term "1,1,1,0,0"))
                                             (rule "times_zero_2" (formula "23") (term "1,1,1,1,0,0"))
                                             (rule "add_zero_right" (formula "23") (term "1,1,1,0,0"))
                                             (rule "getOfSeqDef" (formula "23") (term "0,1,0"))
                                             (rule "castDel" (formula "23") (term "2,0,1,0"))
                                             (rule "castDel" (formula "23") (term "1,0,1,0"))
                                             (rule "add_zero_right" (formula "23") (term "0,2,1,0,1,0"))
                                             (rule "eqSymm" (formula "23") (term "1,0"))
                                             (rule "polySimp_elimSub" (formula "23") (term "1,1,0,1,1,0"))
                                             (rule "times_zero_2" (formula "23") (term "1,1,1,0,1,1,0"))
                                             (rule "add_zero_right" (formula "23") (term "1,1,0,1,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "22") (term "0,1"))
                                             (rule "add_zero_right" (formula "22") (term "0,0,1"))
                                             (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1"))
                                             (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0"))
                                             (rule "add_zero_right" (formula "22") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "23") (term "0,1,1,0,0"))
                                             (rule "add_zero_right" (formula "23") (term "0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1,0"))
                                             (rule "eqSymm" (formula "23") (term "1,0"))
                                             (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,1,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1,0"))
                                             (rule "eqSymm" (formula "23") (term "1,0"))
                                             (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,1,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,1,1,0"))
                                             (rule "apply_eq_monomials" (formula "23") (term "1,0,0,1,0,0") (ifseqformula "22"))
                                             (rule "polySimp_rightDist" (formula "23") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0,0,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "23") (term "1,0,1,0,0,1,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "23") (term "1,0,0,1,0,0"))
                                             (rule "add_literals" (formula "23") (term "1,1,1,0,0,1,0,0"))
                                             (rule "times_zero_1" (formula "23") (term "1,1,0,0,1,0,0"))
                                             (rule "add_zero_right" (formula "23") (term "1,0,0,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "22") (term "0,0,1"))
                                             (rule "polySimp_elimOne" (formula "22") (term "0,0,1"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0"))
                                             (rule "polySimp_elimOne" (formula "22") (term "0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,0"))
                                             (rule "eqSymm" (formula "23") (term "1,0"))
                                             (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,1,1,0"))
                                             (rule "polySimp_rightDist" (formula "23") (term "1,1,0,1,1,0"))
                                             (rule "mul_literals" (formula "23") (term "0,1,1,0,1,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,1,1,0"))
                                             (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,1,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,0"))
                                             (rule "eqSymm" (formula "23") (term "1,0"))
                                             (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,1,1,0"))
                                             (rule "polySimp_rightDist" (formula "23") (term "1,1,0,1,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,1,1,0"))
                                             (rule "mul_literals" (formula "23") (term "0,1,1,0,1,1,0"))
                                             (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,1,1,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,1,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "23") (term "0,0,1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "23") (term "0,0,1,1,1,0,0"))
                                             (rule "pullOutSelect" (formula "37") (term "0,0,0,1") (inst "selectSK=arr_72"))
                                             (rule "applyEq" (formula "23") (term "0,0,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "3") (term "0,0,0,1,1,1,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "3") (term "1,1,1,1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "2") (term "0,0,0,1") (ifseqformula "1"))
                                             (rule "applyEq" (formula "3") (term "0,1,1,1,1,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "24") (term "1,1,0,1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "38") (term "0,1,1") (ifseqformula "1"))
                                             (rule "applyEq" (formula "2") (term "0,1,1") (ifseqformula "1"))
                                             (rule "applyEq" (formula "3") (term "0,1,1,1,0,1,1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "23") (term "0,1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "24") (term "0,1,1,1,0,0,1,0") (ifseqformula "1"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
                                             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "35")) (ifInst ""  (formula "34")))
                                             (rule "applyEqReverse" (formula "38") (term "0,0,0,1") (ifseqformula "1"))
                                             (rule "applyEqReverse" (formula "23") (term "0,0,0,0") (ifseqformula "1"))
                                             (rule "applyEqReverse" (formula "3") (term "0,0,0,1,1,1,0,0") (ifseqformula "1"))
                                             (rule "applyEqReverse" (formula "3") (term "1,1,1,1,0") (ifseqformula "1"))
                                             (rule "applyEqReverse" (formula "2") (term "0,0,0,1") (ifseqformula "1"))
                                             (rule "applyEqReverse" (formula "3") (term "0,1,1,1,1,0,0") (ifseqformula "1"))
                                             (rule "applyEqReverse" (formula "24") (term "1,1,0,1,0") (ifseqformula "1"))
                                             (rule "applyEqReverse" (formula "38") (term "0,1,1") (ifseqformula "1"))
                                             (rule "applyEqReverse" (formula "2") (term "0,1,1") (ifseqformula "1"))
                                             (rule "applyEqReverse" (formula "3") (term "0,1,1,1,0,1,1,0") (ifseqformula "1"))
                                             (rule "applyEqReverse" (formula "23") (term "0,1,0") (ifseqformula "1"))
                                             (rule "applyEqReverse" (formula "24") (term "0,1,1,1,0,0,1,0") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "eqSymm" (formula "22"))
                                             (rule "eqSymm" (formula "23") (term "1,0"))
                                             (rule "pullOutSelect" (formula "37") (term "0,1,0") (inst "selectSK=arr_73"))
                                             (rule "applyEq" (formula "38") (term "0,0,0,0") (ifseqformula "1"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                                             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "36")))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "16"))
                                             (rule "eqSymm" (formula "38"))
                                             (rule "eqSymm" (formula "1") (term "0,0,0"))
                                             (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "11"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "pullOutSelect" (formula "2") (term "0,1,0") (inst "selectSK=arr_74"))
                                             (rule "applyEq" (formula "4") (term "1,1,0,1,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "3") (term "0,0,0,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "4") (term "0,1,1,1,0,0,1,0") (ifseqformula "2"))
                                             (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "28"))
                                             (builtin "One Step Simplification" (formula "2"))
                                             (rule "applyEqReverse" (formula "4") (term "1,1,0,1,0") (ifseqformula "2"))
                                             (rule "applyEqReverse" (formula "3") (term "0,1,0") (ifseqformula "2"))
                                             (rule "applyEqReverse" (formula "3") (term "0,0,0,0") (ifseqformula "2"))
                                             (rule "applyEqReverse" (formula "4") (term "0,1,1,1,0,0,1,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "pullOutSelect" (formula "31") (term "0") (inst "selectSK=arr_75"))
                                             (rule "simplifySelectOfAnonEQ" (formula "31") (ifseqformula "27"))
                                             (builtin "One Step Simplification" (formula "31"))
                                             (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "31"))
                                             (rule "hideAuxiliaryEq" (formula "31"))
                                             (rule "eqSymm" (formula "31"))
                                             (rule "narrowSelectArrayType" (formula "31") (term "1") (ifseqformula "26") (ifseqformula "35"))
                                             (rule "pullOutSelect" (formula "24") (term "0,1,1,1,1,0,0") (inst "selectSK=arr_76"))
                                             (rule "applyEq" (formula "23") (term "0,0,0,0") (ifseqformula "24"))
                                             (rule "applyEq" (formula "25") (term "0,1,1,1,0,0,1,0") (ifseqformula "24"))
                                             (rule "applyEq" (formula "23") (term "0,1,0") (ifseqformula "24"))
                                             (rule "applyEq" (formula "25") (term "0,0,0,1,1,1,0,0") (ifseqformula "24"))
                                             (rule "applyEq" (formula "25") (term "1,1,0,1,0") (ifseqformula "24"))
                                             (rule "applyEq" (formula "1") (term "2,0") (ifseqformula "24"))
                                             (rule "simplifySelectOfAnonEQ" (formula "24") (ifseqformula "16"))
                                             (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "37")) (ifInst ""  (formula "11")))
                                             (rule "applyEqReverse" (formula "25") (term "0,1,1,1,1,0,0") (ifseqformula "24"))
                                             (rule "applyEqReverse" (formula "23") (term "0,0,0,0") (ifseqformula "24"))
                                             (rule "applyEqReverse" (formula "25") (term "0,1,1,1,0,0,1,0") (ifseqformula "24"))
                                             (rule "applyEqReverse" (formula "23") (term "0,1,0") (ifseqformula "24"))
                                             (rule "applyEqReverse" (formula "25") (term "0,0,0,1,1,1,0,0") (ifseqformula "24"))
                                             (rule "applyEqReverse" (formula "25") (term "1,1,0,1,0") (ifseqformula "24"))
                                             (rule "applyEqReverse" (formula "1") (term "2,0") (ifseqformula "24"))
                                             (rule "hideAuxiliaryEq" (formula "24"))
                                             (rule "eqSymm" (formula "23"))
                                             (rule "eqSymm" (formula "24") (term "1,0"))
                                             (rule "applyEq" (formula "3") (term "1,1,1,0,0") (ifseqformula "23"))
                                             (rule "applyEq" (formula "2") (term "1") (ifseqformula "23"))
                                             (rule "pullOutSelect" (formula "31") (term "0") (inst "selectSK=arr_77"))
                                             (rule "simplifySelectOfAnonEQ" (formula "31") (ifseqformula "16"))
                                             (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "36")) (ifInst ""  (formula "35")))
                                             (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "31"))
                                             (rule "hideAuxiliaryEq" (formula "31"))
                                             (rule "narrowSelectArrayType" (formula "31") (term "0") (ifseqformula "15") (ifseqformula "35"))
                                             (rule "eqSymm" (formula "31"))
                                             (rule "applyEq" (formula "3") (term "1,1,0,1,0") (ifseqformula "31"))
                                             (rule "applyEq" (formula "2") (term "0,0,0,0") (ifseqformula "31"))
                                             (rule "applyEq" (formula "3") (term "0,1,1,1,0,0,1,0") (ifseqformula "31"))
                                             (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "31"))
                                             (rule "nnf_imp2or" (formula "32") (term "0"))
                                             (rule "nnf_imp2or" (formula "13") (term "0"))
                                             (rule "nnf_imp2or" (formula "24") (term "0"))
                                             (rule "nnf_imp2or" (formula "31") (term "0"))
                                             (rule "nnf_imp2or" (formula "23") (term "0"))
                                             (rule "nnf_imp2or" (formula "2") (term "0"))
                                             (rule "nnf_notAnd" (formula "32") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "32") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
                                             (rule "mul_literals" (formula "32") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "32") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "32") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "13") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "13") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                                             (rule "mul_literals" (formula "13") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "24") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "24") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                                             (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "31") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "31") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "31") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0"))
                                             (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "23") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                                             (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "23") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                                             (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "2") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "2") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "2") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0"))
                                             (rule "mul_literals" (formula "2") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "2") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "2") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0"))
                                             (rule "seqGetAlphaCast" (formula "3") (term "0"))
                                             (rule "castedGetAny" (formula "3") (term "0"))
                                             (builtin "One Step Simplification" (formula "3"))
                                             (rule "true_left" (formula "3"))
                                             (rule "lenNonNegative" (formula "28") (term "1"))
                                             (rule "inEqSimp_commuteLeq" (formula "28"))
                                             (rule "ifthenelse_split" (formula "18") (term "0"))
                                             (branch "result_0.length ≥ 1 TRUE"
                                                (rule "eqSymm" (formula "19"))
                                                (rule "applyEq" (formula "6") (term "0") (ifseqformula "19"))
                                                (rule "applyEq" (formula "28") (term "0") (ifseqformula "18"))
                                                (rule "applyEq" (formula "29") (term "1") (ifseqformula "18"))
                                                (rule "inEqSimp_subsumption1" (formula "28") (ifseqformula "17"))
                                                (rule "leq_literals" (formula "28") (term "0"))
                                                (builtin "One Step Simplification" (formula "28"))
                                                (rule "true_left" (formula "28"))
                                                (rule "ifthenelse_split" (formula "28") (term "0"))
                                                (branch "entr_arr.length ≥ 1 TRUE"
                                                   (rule "eqSymm" (formula "29"))
                                                   (rule "applyEq" (formula "32") (term "1,1,1,0,0") (ifseqformula "29"))
                                                   (rule "applyEq" (formula "4") (term "0") (ifseqformula "29"))
                                                   (rule "applyEq" (formula "33") (term "1,1,0,0") (ifseqformula "29"))
                                                   (rule "applyEq" (formula "24") (term "1,1,0,0") (ifseqformula "29"))
                                                   (rule "applyEq" (formula "17") (term "0") (ifseqformula "29"))
                                                   (rule "applyEq" (formula "19") (term "0") (ifseqformula "28"))
                                                   (rule "applyEq" (formula "17") (term "1") (ifseqformula "27"))
                                                   (rule "arrayLengthNotNegative" (formula "19") (term "0"))
                                                   (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "27"))
                                                   (rule "leq_literals" (formula "19") (term "0"))
                                                   (builtin "One Step Simplification" (formula "19"))
                                                   (rule "true_left" (formula "19"))
                                                   (rule "arrayLengthIsAShort" (formula "19") (term "0"))
                                                   (builtin "One Step Simplification" (formula "19"))
                                                   (rule "true_left" (formula "19"))
                                                   (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "11") (ifseqformula "8"))
                                                   (rule "andLeft" (formula "11"))
                                                   (rule "notLeft" (formula "12"))
                                                   (rule "andLeft" (formula "11"))
                                                   (rule "andLeft" (formula "11"))
                                                   (rule "notLeft" (formula "13"))
                                                   (rule "notLeft" (formula "12"))
                                                   (rule "andLeft" (formula "11"))
                                                   (rule "andLeft" (formula "11"))
                                                   (rule "notLeft" (formula "13"))
                                                   (rule "andLeft" (formula "11"))
                                                   (rule "andLeft" (formula "11"))
                                                   (rule "andLeft" (formula "11"))
                                                   (rule "notLeft" (formula "11"))
                                                   (rule "notLeft" (formula "11"))
                                                   (rule "nonNull" (formula "13") (inst "i=i"))
                                                   (rule "sub_literals" (formula "13") (term "2,1,0,1,1"))
                                                   (builtin "One Step Simplification" (formula "13"))
                                                   (rule "greater_literals" (formula "13") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "13"))
                                                   (rule "andLeft" (formula "13"))
                                                   (rule "notLeft" (formula "13"))
                                                   (rule "narrowSelectArrayType" (formula "13") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "34"))
                                                   (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                                                   (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                                                   (rule "nonNull" (formula "12") (inst "i=i"))
                                                   (rule "sub_literals" (formula "12") (term "2,1,0,1,1"))
                                                   (builtin "One Step Simplification" (formula "12"))
                                                   (rule "greater_literals" (formula "12") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "12"))
                                                   (rule "andLeft" (formula "12"))
                                                   (rule "notLeft" (formula "12"))
                                                   (rule "narrowSelectArrayType" (formula "12") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "34"))
                                                   (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                                                   (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                                                   (rule "nonNull" (formula "11") (inst "i=i"))
                                                   (rule "greater_literals" (formula "11") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "11"))
                                                   (rule "sub_literals" (formula "11") (term "2,1,0,1"))
                                                   (builtin "One Step Simplification" (formula "11"))
                                                   (rule "andLeft" (formula "11"))
                                                   (rule "notLeft" (formula "11"))
                                                   (rule "narrowSelectArrayType" (formula "11") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "34"))
                                                   (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                                                   (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                                                   (rule "nnf_imp2or" (formula "13") (term "0"))
                                                   (rule "nnf_imp2or" (formula "12") (term "0"))
                                                   (rule "nnf_imp2or" (formula "11") (term "0"))
                                                   (rule "nnf_notAnd" (formula "13") (term "0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "13") (term "1,0,0,0"))
                                                   (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                                                   (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                                                   (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                                                   (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                                                   (rule "commute_or_2" (formula "14") (term "0"))
                                                   (rule "commute_or_2" (formula "23") (term "0"))
                                                   (rule "commute_or_2" (formula "2") (term "0"))
                                                   (rule "commute_or_2" (formula "33") (term "0"))
                                                   (rule "commute_or_2" (formula "24") (term "0"))
                                                   (rule "ifthenelse_split" (formula "47") (term "0"))
                                                   (branch " result_0[intseqGet_0]@anon_heap_copyOf«anonHeapFunction».length ≥ 0 TRUE"
                                                      (rule "eqSymm" (formula "48"))
                                                      (rule "commute_or_2" (formula "14") (term "0"))
                                                      (rule "ifthenelse_split" (formula "23") (term "0"))
                                                      (branch " result_0[intseqGet_0]@anon_heap_copyOf«anonHeapFunction».length ≥ 1 TRUE"
                                                         (rule "eqSymm" (formula "24"))
                                                         (rule "applyEq" (formula "3") (term "1,1,0") (ifseqformula "24"))
                                                         (rule "applyEq" (formula "25") (term "1,1,0") (ifseqformula "24"))
                                                         (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "23"))
                                                         (rule "leq_literals" (formula "1") (term "0"))
                                                         (builtin "One Step Simplification" (formula "1"))
                                                         (rule "true_left" (formula "1"))
                                                         (rule "commute_or_2" (formula "12") (term "0"))
                                                         (rule "ifthenelse_split" (formula "1") (term "0"))
                                                         (branch "result_0 = entr_arr TRUE"
                                                            (rule "applyEqReverse" (formula "49") (term "0,1,0") (ifseqformula "2"))
                                                            (rule "applyEqReverse" (formula "49") (term "0,0,0,0") (ifseqformula "2"))
                                                            (rule "hideAuxiliaryEq" (formula "2"))
                                                            (rule "applyEq" (formula "18") (term "1,0") (ifseqformula "1"))
                                                            (rule "applyEq" (formula "34") (term "1,0,0,1,0,0") (ifseqformula "1"))
                                                            (rule "applyEq" (formula "32") (term "1,1") (ifseqformula "1"))
                                                            (rule "applyEq" (formula "44") (term "1,0") (ifseqformula "1"))
                                                            (rule "close" (formula "44") (ifseqformula "9"))
                                                         )
                                                         (branch "result_0 = entr_arr FALSE"
                                                            (rule "applyEqReverse" (formula "49") (term "0,1,0") (ifseqformula "1"))
                                                            (rule "applyEqReverse" (formula "49") (term "0,0,0,0") (ifseqformula "1"))
                                                            (rule "close" (formula "49") (ifseqformula "23"))
                                                         )
                                                      )
                                                      (branch " result_0[intseqGet_0]@anon_heap_copyOf«anonHeapFunction».length ≥ 1 FALSE"
                                                         (rule "eqSymm" (formula "23"))
                                                         (builtin "One Step Simplification" (formula "23"))
                                                         (rule "inEqSimp_geqRight" (formula "35"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "inEqSimp_antiSymm" (formula "2") (ifseqformula "1"))
                                                         (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                                                         (rule "leq_literals" (formula "1"))
                                                         (rule "true_left" (formula "1"))
                                                         (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                                         (rule "qeq_literals" (formula "2"))
                                                         (rule "true_left" (formula "2"))
                                                         (rule "applyEq" (formula "3") (term "1,1,1,0,0,1,0,0") (ifseqformula "1"))
                                                         (rule "add_zero_right" (formula "3") (term "1,1,0,0,1,0,0"))
                                                         (rule "eqSymm" (formula "3") (term "1,0,0"))
                                                         (rule "applyEq" (formula "24") (term "1,1,1,0,0,1,0,0") (ifseqformula "1"))
                                                         (rule "add_zero_right" (formula "24") (term "1,1,0,0,1,0,0"))
                                                         (rule "eqSymm" (formula "24") (term "1,0,0"))
                                                         (rule "applyEq" (formula "3") (term "1,1,1,0,0,1,0,0") (ifseqformula "1"))
                                                         (rule "add_zero_right" (formula "3") (term "1,1,0,0,1,0,0"))
                                                         (rule "eqSymm" (formula "3") (term "1,0,0"))
                                                         (rule "applyEq" (formula "48") (term "1") (ifseqformula "1"))
                                                         (builtin "One Step Simplification" (formula "48"))
                                                         (rule "orRight" (formula "48"))
                                                         (rule "notRight" (formula "48"))
                                                         (rule "inEqSimp_contradEq7" (formula "49") (ifseqformula "1"))
                                                         (rule "times_zero_1" (formula "49") (term "1,0,0"))
                                                         (rule "add_literals" (formula "49") (term "0,0"))
                                                         (rule "leq_literals" (formula "49") (term "0"))
                                                         (builtin "One Step Simplification" (formula "49"))
                                                         (rule "false_right" (formula "49"))
                                                         (rule "inEqSimp_notGeq" (formula "24") (term "0"))
                                                         (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                                         (rule "add_literals" (formula "24") (term "0,0,0"))
                                                         (rule "add_zero_left" (formula "24") (term "0,0"))
                                                         (rule "commute_or_2" (formula "14") (term "0"))
                                                         (rule "ifthenelse_split" (formula "3") (term "0"))
                                                         (branch "result_0 = entr_arr TRUE"
                                                            (rule "applyEqReverse" (formula "1") (term "0,0") (ifseqformula "4"))
                                                            (rule "hideAuxiliaryEq" (formula "4"))
                                                            (rule "applyEq" (formula "46") (term "0") (ifseqformula "3"))
                                                            (rule "applyEq" (formula "2") (term "1,0,0") (ifseqformula "3"))
                                                            (rule "applyEq" (formula "4") (term "1,1,1,1,1,0,0") (ifseqformula "3"))
                                                            (rule "applyEq" (formula "20") (term "1,0") (ifseqformula "3"))
                                                            (rule "applyEq" (formula "34") (term "1,1,0,1,0") (ifseqformula "3"))
                                                            (rule "applyEq" (formula "33") (term "1,1") (ifseqformula "3"))
                                                            (rule "applyEq" (formula "4") (term "1,1,1,0,1,0,0") (ifseqformula "3"))
                                                            (rule "applyEq" (formula "25") (term "1,1,1,1,1,0,0") (ifseqformula "3"))
                                                            (rule "applyEq" (formula "28") (term "0,1,0") (ifseqformula "3"))
                                                            (rule "applyEq" (formula "45") (term "1,0") (ifseqformula "3"))
                                                            (rule "close" (formula "45") (ifseqformula "11"))
                                                         )
                                                         (branch "result_0 = entr_arr FALSE"
                                                            (rule "applyEqReverse" (formula "1") (term "0,0") (ifseqformula "3"))
                                                            (rule "hideAuxiliaryEq" (formula "3"))
                                                            (rule "replace_known_left" (formula "3") (term "0,1,1,0") (ifseqformula "1"))
                                                            (builtin "One Step Simplification" (formula "3"))
                                                            (rule "replace_known_left" (formula "24") (term "0,1,1,0") (ifseqformula "1"))
                                                            (builtin "One Step Simplification" (formula "24"))
                                                            (rule "inEqSimp_contradEq7" (formula "23") (term "1") (ifseqformula "1"))
                                                            (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
                                                            (rule "add_zero_right" (formula "23") (term "0,0,1"))
                                                            (rule "leq_literals" (formula "23") (term "0,1"))
                                                            (builtin "One Step Simplification" (formula "23"))
                                                            (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "23"))
                                                            (rule "qeq_literals" (formula "1") (term "0"))
                                                            (builtin "One Step Simplification" (formula "1"))
                                                            (rule "closeFalse" (formula "1"))
                                                         )
                                                      )
                                                   )
                                                   (branch " result_0[intseqGet_0]@anon_heap_copyOf«anonHeapFunction».length ≥ 0 FALSE"
                                                      (rule "eqSymm" (formula "48"))
                                                      (builtin "One Step Simplification" (formula "48"))
                                                      (rule "orRight" (formula "48"))
                                                      (rule "notRight" (formula "48"))
                                                      (rule "inEqSimp_geqRight" (formula "48"))
                                                      (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                      (rule "mul_literals" (formula "1") (term "1"))
                                                      (rule "inEqSimp_contradEq7" (formula "49") (ifseqformula "2"))
                                                      (rule "times_zero_1" (formula "49") (term "1,0,0"))
                                                      (rule "add_literals" (formula "49") (term "0,0"))
                                                      (rule "leq_literals" (formula "49") (term "0"))
                                                      (builtin "One Step Simplification" (formula "49"))
                                                      (rule "false_right" (formula "49"))
                                                      (rule "inEqSimp_contradInEq0" (formula "24") (term "0,0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "24") (term "0,0,0"))
                                                      (builtin "One Step Simplification" (formula "24"))
                                                      (rule "eqSymm" (formula "24"))
                                                      (builtin "One Step Simplification" (formula "24"))
                                                      (rule "inEqSimp_notGeq" (formula "24") (term "0"))
                                                      (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                                      (rule "add_literals" (formula "24") (term "0,0,0"))
                                                      (rule "add_zero_left" (formula "24") (term "0,0"))
                                                      (rule "commute_or_2" (formula "15") (term "0"))
                                                      (rule "commute_or_2" (formula "14") (term "0"))
                                                      (rule "ifthenelse_split" (formula "3") (term "0"))
                                                      (branch "result_0 = entr_arr TRUE"
                                                         (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "4"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "3"))
                                                         (builtin "One Step Simplification" (formula "31"))
                                                         (rule "true_left" (formula "31"))
                                                         (rule "applyEq" (formula "20") (term "1,0") (ifseqformula "3"))
                                                         (rule "applyEq" (formula "33") (term "1,2,0,1,0") (ifseqformula "3"))
                                                         (rule "applyEq" (formula "33") (term "1,1,0,1,0") (ifseqformula "3"))
                                                         (rule "applyEq" (formula "44") (term "1,0") (ifseqformula "3"))
                                                         (rule "close" (formula "44") (ifseqformula "11"))
                                                      )
                                                      (branch "result_0 = entr_arr FALSE"
                                                         (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "3"))
                                                         (rule "hideAuxiliaryEq" (formula "3"))
                                                         (rule "replace_known_left" (formula "24") (term "0,1,1,0") (ifseqformula "2"))
                                                         (builtin "One Step Simplification" (formula "24"))
                                                         (rule "replace_known_left" (formula "3") (term "0,1,1,0") (ifseqformula "2"))
                                                         (builtin "One Step Simplification" (formula "3"))
                                                         (rule "inEqSimp_contradEq7" (formula "23") (term "1") (ifseqformula "2"))
                                                         (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
                                                         (rule "add_zero_right" (formula "23") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "23") (term "0,1"))
                                                         (builtin "One Step Simplification" (formula "23"))
                                                         (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "23"))
                                                         (rule "qeq_literals" (formula "2") (term "0"))
                                                         (builtin "One Step Simplification" (formula "2"))
                                                         (rule "closeFalse" (formula "2"))
                                                      )
                                                   )
                                                )
                                                (branch "entr_arr.length ≥ 1 FALSE"
                                                   (rule "eqSymm" (formula "28"))
                                                   (rule "inEqSimp_geqRight" (formula "33"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "applyEq" (formula "25") (term "1,1,0,0") (ifseqformula "29"))
                                                   (rule "applyEq" (formula "5") (term "0") (ifseqformula "29"))
                                                   (rule "inEqSimp_homoInEq1" (formula "5"))
                                                   (rule "times_zero_2" (formula "5") (term "1,0"))
                                                   (rule "add_zero_right" (formula "5") (term "0"))
                                                   (rule "applyEq" (formula "32") (term "1,1,1,0,0") (ifseqformula "29"))
                                                   (rule "add_zero_right" (formula "32") (term "1,1,0,0"))
                                                   (rule "applyEq" (formula "18") (term "0") (ifseqformula "29"))
                                                   (rule "qeq_literals" (formula "18"))
                                                   (rule "closeFalse" (formula "18"))
                                                )
                                             )
                                             (branch "result_0.length ≥ 1 FALSE"
                                                (rule "eqSymm" (formula "18"))
                                                (rule "inEqSimp_geqRight" (formula "34"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "applyEqRigid" (formula "29") (term "0") (ifseqformula "19"))
                                                (rule "qeq_literals" (formula "29"))
                                                (rule "true_left" (formula "29"))
                                                (rule "applyEq" (formula "7") (term "0") (ifseqformula "19"))
                                                (rule "inEqSimp_homoInEq1" (formula "7"))
                                                (rule "times_zero_2" (formula "7") (term "1,0"))
                                                (rule "add_zero_right" (formula "7") (term "0"))
                                                (rule "applyEq" (formula "29") (term "1") (ifseqformula "19"))
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "7"))
                                                (rule "mul_literals" (formula "7") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "7") (ifseqformula "6"))
                                                (rule "qeq_literals" (formula "7") (term "0"))
                                                (builtin "One Step Simplification" (formula "7"))
                                                (rule "closeFalse" (formula "7"))
                                             )
                                          )
                                          (branch "Case 2"
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "16") (term "1") (ifseqformula "14"))
                                             (rule "translateJavaAddInt" (formula "28") (term "0,2,2,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "28") (term "1,1,0,0"))
                                             (rule "sub_literals" (formula "21") (term "2,1,0"))
                                             (builtin "One Step Simplification" (formula "21"))
                                             (rule "sub_literals" (formula "12") (term "2,1,0"))
                                             (builtin "One Step Simplification" (formula "12"))
                                             (rule "andLeft" (formula "19"))
                                             (rule "andLeft" (formula "4"))
                                             (rule "andLeft" (formula "3"))
                                             (rule "andLeft" (formula "7"))
                                             (rule "andLeft" (formula "29"))
                                             (rule "andLeft" (formula "20"))
                                             (rule "allRight" (formula "38") (inst "sk=iv_3"))
                                             (rule "impRight" (formula "38"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "eqSymm" (formula "31"))
                                             (rule "eqSymm" (formula "40"))
                                             (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "38"))
                                             (builtin "One Step Simplification" (formula "13"))
                                             (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "37"))
                                             (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "36")))
                                             (rule "polySimp_elimSub" (formula "21") (term "1,0"))
                                             (rule "times_zero_2" (formula "21") (term "1,1,0"))
                                             (rule "add_zero_right" (formula "21") (term "1,0"))
                                             (rule "polySimp_elimSub" (formula "21") (term "1,1"))
                                             (rule "times_zero_2" (formula "21") (term "1,1,1"))
                                             (rule "add_zero_right" (formula "21") (term "1,1"))
                                             (rule "polySimp_elimSub" (formula "34") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "34") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "24") (term "1"))
                                             (rule "times_zero_2" (formula "24") (term "1,1"))
                                             (rule "add_zero_right" (formula "24") (term "1"))
                                             (rule "polySimp_elimSub" (formula "8") (term "1"))
                                             (rule "times_zero_2" (formula "8") (term "1,1"))
                                             (rule "add_zero_right" (formula "8") (term "1"))
                                             (rule "polySimp_elimSub" (formula "6") (term "1"))
                                             (rule "times_zero_2" (formula "6") (term "1,1"))
                                             (rule "add_zero_right" (formula "6") (term "1"))
                                             (rule "polySimp_elimSub" (formula "22") (term "1"))
                                             (rule "times_zero_2" (formula "22") (term "1,1"))
                                             (rule "add_zero_right" (formula "22") (term "1"))
                                             (rule "polySimp_addComm0" (formula "34") (term "0,2,2,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "34") (term "1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0"))
                                             (rule "add_zero_right" (formula "21") (term "0,0,0"))
                                             (rule "eqSymm" (formula "21"))
                                             (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1"))
                                             (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "9"))
                                             (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "9") (term "0"))
                                             (rule "inEqSimp_ltToLeq" (formula "2"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "2") (term "0"))
                                             (rule "narrowSelectArrayType" (formula "16") (term "0,0,1,0") (ifseqformula "10") (ifseqformula "38"))
                                             (rule "inEqSimp_ltToLeq" (formula "24"))
                                             (rule "polySimp_mulComm0" (formula "24") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "24") (term "0"))
                                             (rule "inEqSimp_ltToLeq" (formula "8"))
                                             (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "8") (term "0"))
                                             (rule "inEqSimp_ltToLeq" (formula "6"))
                                             (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "22"))
                                             (rule "polySimp_mulComm0" (formula "22") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "22") (term "0"))
                                             (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0"))
                                             (rule "add_zero_right" (formula "21") (term "0,0,0"))
                                             (rule "eqSymm" (formula "21"))
                                             (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1"))
                                             (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "34") (term "0,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "23"))
                                             (rule "inEqSimp_commuteLeq" (formula "7"))
                                             (rule "inEqSimp_commuteLeq" (formula "5"))
                                             (rule "inEqSimp_commuteLeq" (formula "1"))
                                             (rule "applyEqRigid" (formula "5") (term "0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "29") (term "0") (ifseqformula "30"))
                                             (rule "eqSymm" (formula "29"))
                                             (rule "applyEq" (formula "5") (term "1,0") (ifseqformula "4"))
                                             (rule "polySimp_addComm1" (formula "5") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "33") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                                             (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                                             (rule "polySimp_elimOne" (formula "7") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                             (rule "polySimp_elimOne" (formula "2") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "22"))
                                             (rule "polySimp_mulLiterals" (formula "22") (term "0"))
                                             (rule "polySimp_elimOne" (formula "22") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                                             (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                             (rule "polySimp_elimOne" (formula "6") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "20"))
                                             (rule "polySimp_mulLiterals" (formula "20") (term "0"))
                                             (rule "polySimp_elimOne" (formula "20") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "19") (term "0,0,0"))
                                             (rule "eqSymm" (formula "19"))
                                             (rule "polySimp_elimOne" (formula "19") (term "0,0,1"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "32") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "19") (term "0,0,0"))
                                             (rule "eqSymm" (formula "19"))
                                             (rule "polySimp_elimOne" (formula "19") (term "0,0,1"))
                                             (rule "array2seqDef" (formula "31") (term "0,0") (inst "u=u"))
                                             (rule "getOfSeqDef" (formula "31") (term "0"))
                                             (rule "castDel" (formula "31") (term "1,0"))
                                             (rule "castDel" (formula "31") (term "2,0"))
                                             (rule "add_zero_right" (formula "31") (term "0,2,1,0"))
                                             (rule "polySimp_elimSub" (formula "31") (term "1,1,0,0"))
                                             (rule "times_zero_2" (formula "31") (term "1,1,1,0,0"))
                                             (rule "add_zero_right" (formula "31") (term "1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0"))
                                             (rule "polySimp_addComm1" (formula "31") (term "0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0"))
                                             (rule "replace_known_left" (formula "31") (term "0,0,0") (ifseqformula "5"))
                                             (builtin "One Step Simplification" (formula "31"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "31") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "31") (term "0,0,0"))
                                             (rule "polySimp_elimOne" (formula "31") (term "0,0,0"))
                                             (rule "replace_known_left" (formula "31") (term "0,0") (ifseqformula "6"))
                                             (builtin "One Step Simplification" (formula "31"))
                                             (rule "array2seqDef" (formula "23") (term "1") (inst "u=u"))
                                             (rule "eqSymm" (formula "23"))
                                             (rule "array2seqDef" (formula "3") (term "0") (inst "u=u"))
                                             (rule "array2seqDef" (formula "3") (term "1") (inst "u=u"))
                                             (rule "array2seqDef" (formula "29") (term "0,0") (inst "u=u"))
                                             (rule "lenOfSeqDef" (formula "29") (term "0"))
                                             (rule "polySimp_elimSub" (formula "29") (term "1,0"))
                                             (rule "times_zero_2" (formula "29") (term "1,1,0"))
                                             (rule "add_zero_right" (formula "29") (term "1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "29") (term "0,0"))
                                             (rule "add_zero_right" (formula "29") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "29") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "29") (term "0,0,0"))
                                             (rule "polySimp_elimOne" (formula "29") (term "0,0,0"))
                                             (rule "applyEq" (formula "29") (term "0") (ifseqformula "19"))
                                             (rule "applyEq" (formula "19") (term "1") (ifseqformula "29"))
                                             (rule "array2seqDef" (formula "38") (term "0,0") (inst "u=u"))
                                             (rule "getOfSeqDef" (formula "38") (term "0"))
                                             (rule "castDel" (formula "38") (term "1,0"))
                                             (rule "castDel" (formula "38") (term "2,0"))
                                             (rule "add_zero_right" (formula "38") (term "0,2,1,0"))
                                             (rule "polySimp_elimSub" (formula "38") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "38") (term "1,1,1,0,0"))
                                             (rule "add_zero_right" (formula "38") (term "1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0"))
                                             (rule "polySimp_addComm1" (formula "38") (term "0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0"))
                                             (rule "replace_known_left" (formula "38") (term "0,0,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "38"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "38") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "38") (term "0,0,0"))
                                             (rule "polySimp_elimOne" (formula "38") (term "0,0,0"))
                                             (rule "array2seqDef" (formula "28") (term "0,0") (inst "u=u"))
                                             (rule "lenOfSeqDef" (formula "28") (term "0"))
                                             (rule "polySimp_elimSub" (formula "28") (term "1,0"))
                                             (rule "mul_literals" (formula "28") (term "1,1,0"))
                                             (rule "add_zero_right" (formula "28") (term "1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0"))
                                             (rule "add_zero_right" (formula "28") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "28") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "28") (term "0,0,0"))
                                             (rule "polySimp_elimOne" (formula "28") (term "0,0,0"))
                                             (rule "array2seqDef" (formula "2") (term "0,0") (inst "u=u"))
                                             (rule "lenOfSeqDef" (formula "2") (term "0"))
                                             (rule "polySimp_elimSub" (formula "2") (term "1,0"))
                                             (rule "mul_literals" (formula "2") (term "1,1,0"))
                                             (rule "add_zero_right" (formula "2") (term "1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0"))
                                             (rule "add_zero_right" (formula "2") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
                                             (rule "polySimp_elimOne" (formula "2") (term "0,0,0"))
                                             (rule "array2seqDef" (formula "30") (term "0,1") (inst "u=u"))
                                             (rule "eqSymm" (formula "30"))
                                             (rule "getOfSeqDef" (formula "30") (term "0"))
                                             (rule "castDel" (formula "30") (term "2,0"))
                                             (rule "castDel" (formula "30") (term "1,0"))
                                             (rule "add_zero_right" (formula "30") (term "0,2,1,0"))
                                             (rule "polySimp_elimSub" (formula "30") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "30") (term "1,1,1,0,0"))
                                             (rule "add_zero_right" (formula "30") (term "1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0"))
                                             (rule "polySimp_addComm1" (formula "30") (term "0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0"))
                                             (rule "replace_known_left" (formula "30") (term "0,0,0") (ifseqformula "21"))
                                             (builtin "One Step Simplification" (formula "30"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "30") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "30") (term "0,0,0"))
                                             (rule "polySimp_elimOne" (formula "30") (term "0,0,0"))
                                             (rule "replace_known_left" (formula "30") (term "0,0") (ifseqformula "20"))
                                             (builtin "One Step Simplification" (formula "30"))
                                             (rule "eqSymm" (formula "30"))
                                             (rule "array2seqDef" (formula "23") (term "1") (inst "u=u"))
                                             (rule "eqSymm" (formula "23"))
                                             (rule "eqSeqDef" (formula "3") (inst "iv=iv"))
                                             (rule "andLeft" (formula "3"))
                                             (rule "lenOfSeqDef" (formula "3") (term "1"))
                                             (rule "polySimp_elimSub" (formula "3") (term "1,1"))
                                             (rule "mul_literals" (formula "3") (term "1,1,1"))
                                             (rule "add_zero_right" (formula "3") (term "1,1"))
                                             (rule "lenOfSeqDef" (formula "4") (term "1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "4") (term "1,1,1,0,0"))
                                             (rule "times_zero_2" (formula "4") (term "1,1,1,1,0,0"))
                                             (rule "add_zero_right" (formula "4") (term "1,1,1,0,0"))
                                             (rule "getOfSeqDef" (formula "4") (term "0,1,0"))
                                             (rule "castDel" (formula "4") (term "1,0,1,0"))
                                             (rule "castDel" (formula "4") (term "2,0,1,0"))
                                             (rule "add_zero_right" (formula "4") (term "0,2,1,0,1,0"))
                                             (rule "eqSymm" (formula "4") (term "1,0"))
                                             (rule "polySimp_elimSub" (formula "4") (term "1,1,0,1,1,0"))
                                             (rule "times_zero_2" (formula "4") (term "1,1,1,0,1,1,0"))
                                             (rule "add_zero_right" (formula "4") (term "1,1,0,1,1,0"))
                                             (rule "lenOfSeqDef" (formula "3") (term "0"))
                                             (rule "polySimp_elimSub" (formula "3") (term "1,0"))
                                             (rule "times_zero_2" (formula "3") (term "1,1,0"))
                                             (rule "add_zero_right" (formula "3") (term "1,0"))
                                             (rule "getOfSeqDef" (formula "4") (term "0,1,0"))
                                             (rule "castDel" (formula "4") (term "1,0,1,0"))
                                             (rule "castDel" (formula "4") (term "2,0,1,0"))
                                             (rule "add_zero_right" (formula "4") (term "0,2,1,0,1,0"))
                                             (rule "eqSymm" (formula "4") (term "1,0"))
                                             (rule "polySimp_elimSub" (formula "4") (term "1,1,0,1,1,0"))
                                             (rule "times_zero_2" (formula "4") (term "1,1,1,0,1,1,0"))
                                             (rule "add_zero_right" (formula "4") (term "1,1,0,1,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "3") (term "0,1"))
                                             (rule "add_zero_right" (formula "3") (term "0,0,1"))
                                             (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1"))
                                             (rule "inEqSimp_ltToLeq" (formula "4") (term "0,1,1,0,0"))
                                             (rule "add_zero_right" (formula "4") (term "0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0"))
                                             (rule "add_zero_right" (formula "3") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0,1,0"))
                                             (rule "eqSymm" (formula "4") (term "1,0"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,1,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0,1,0"))
                                             (rule "eqSymm" (formula "4") (term "1,0"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,1,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,1,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,1,0"))
                                             (rule "apply_eq_monomials" (formula "4") (term "1,0,0,1,0,0") (ifseqformula "3"))
                                             (rule "polySimp_rightDist" (formula "4") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0,0,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "4") (term "1,0,1,0,0,1,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "4") (term "1,0,0,1,0,0"))
                                             (rule "add_literals" (formula "4") (term "1,1,1,0,0,1,0,0"))
                                             (rule "times_zero_1" (formula "4") (term "1,1,0,0,1,0,0"))
                                             (rule "add_zero_right" (formula "4") (term "1,0,0,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "3") (term "0,0,1"))
                                             (rule "polySimp_elimOne" (formula "3") (term "0,0,1"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0"))
                                             (rule "polySimp_elimOne" (formula "3") (term "0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0,1,0"))
                                             (rule "eqSymm" (formula "4") (term "1,0"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,1,1,0"))
                                             (rule "polySimp_rightDist" (formula "4") (term "1,1,0,1,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,1,1,0"))
                                             (rule "mul_literals" (formula "4") (term "0,1,1,0,1,1,0"))
                                             (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,1,1,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0,1,0,0,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0,1,0,0,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "4") (term "0,0,0,1,0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0,1,0"))
                                             (rule "eqSymm" (formula "4") (term "1,0"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,1,1,0"))
                                             (rule "polySimp_rightDist" (formula "4") (term "1,1,0,1,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,1,1,0"))
                                             (rule "mul_literals" (formula "4") (term "0,1,1,0,1,1,0"))
                                             (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,1,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "4") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0"))
                                             (rule "array2seqDef" (formula "38") (term "0,1") (inst "u=u"))
                                             (rule "eqSymm" (formula "38"))
                                             (rule "getOfSeqDef" (formula "38") (term "0"))
                                             (rule "castDel" (formula "38") (term "1,0"))
                                             (rule "castDel" (formula "38") (term "2,0"))
                                             (rule "add_zero_right" (formula "38") (term "0,2,1,0"))
                                             (rule "polySimp_elimSub" (formula "38") (term "1,1,0,0"))
                                             (rule "times_zero_2" (formula "38") (term "1,1,1,0,0"))
                                             (rule "add_zero_right" (formula "38") (term "1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0"))
                                             (rule "polySimp_addComm1" (formula "38") (term "0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0"))
                                             (rule "replace_known_left" (formula "38") (term "0,0,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "38"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "38") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "38") (term "0,0,0"))
                                             (rule "eqSymm" (formula "38"))
                                             (rule "polySimp_elimOne" (formula "38") (term "0,0,1"))
                                             (rule "eqSeqDef" (formula "24") (inst "iv=iv"))
                                             (rule "andLeft" (formula "24"))
                                             (rule "lenOfSeqDef" (formula "24") (term "0"))
                                             (rule "eqSymm" (formula "24"))
                                             (rule "polySimp_elimSub" (formula "24") (term "1,1"))
                                             (rule "times_zero_2" (formula "24") (term "1,1,1"))
                                             (rule "add_zero_right" (formula "24") (term "1,1"))
                                             (rule "getOfSeqDef" (formula "25") (term "1,1,0"))
                                             (rule "castDel" (formula "25") (term "1,1,1,0"))
                                             (rule "castDel" (formula "25") (term "2,1,1,0"))
                                             (rule "add_zero_right" (formula "25") (term "0,2,1,1,1,0"))
                                             (rule "polySimp_elimSub" (formula "25") (term "1,1,0,1,1,0"))
                                             (rule "mul_literals" (formula "25") (term "1,1,1,0,1,1,0"))
                                             (rule "add_zero_right" (formula "25") (term "1,1,0,1,1,0"))
                                             (rule "getOfSeqDef" (formula "25") (term "0,1,0"))
                                             (rule "castDel" (formula "25") (term "1,0,1,0"))
                                             (rule "castDel" (formula "25") (term "2,0,1,0"))
                                             (rule "add_zero_right" (formula "25") (term "0,2,1,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "25") (term "1,1,0,0,1,0"))
                                             (rule "times_zero_2" (formula "25") (term "1,1,1,0,0,1,0"))
                                             (rule "add_zero_right" (formula "25") (term "1,1,0,0,1,0"))
                                             (rule "lenOfSeqDef" (formula "25") (term "1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "25") (term "1,1,1,0,0"))
                                             (rule "times_zero_2" (formula "25") (term "1,1,1,1,0,0"))
                                             (rule "add_zero_right" (formula "25") (term "1,1,1,0,0"))
                                             (rule "lenOfSeqDef" (formula "24") (term "0"))
                                             (rule "eqSymm" (formula "24"))
                                             (rule "polySimp_elimSub" (formula "24") (term "1,1"))
                                             (rule "times_zero_2" (formula "24") (term "1,1,1"))
                                             (rule "add_zero_right" (formula "24") (term "1,1"))
                                             (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,1,1,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,1,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "25") (term "0,1,1,0,0"))
                                             (rule "add_zero_right" (formula "25") (term "0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0"))
                                             (rule "add_zero_right" (formula "24") (term "0,0,0"))
                                             (rule "eqSymm" (formula "24"))
                                             (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1"))
                                             (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0"))
                                             (rule "add_zero_right" (formula "24") (term "0,0,0"))
                                             (rule "eqSymm" (formula "24"))
                                             (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1"))
                                             (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,1,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,1,0"))
                                             (rule "apply_eq_monomials" (formula "25") (term "1,0,0,1,0,0") (ifseqformula "24"))
                                             (rule "polySimp_rightDist" (formula "25") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1,0,0,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "25") (term "1,0,1,0,0,1,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "25") (term "1,0,0,1,0,0"))
                                             (rule "add_literals" (formula "25") (term "1,1,1,0,0,1,0,0"))
                                             (rule "times_zero_1" (formula "25") (term "1,1,0,0,1,0,0"))
                                             (rule "add_zero_right" (formula "25") (term "1,0,0,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,1,1,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,1,1,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,1,0,1,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,1,1,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,1,0,1,1,0"))
                                             (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,1,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,1,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "24") (term "0,0,0"))
                                             (rule "eqSymm" (formula "24"))
                                             (rule "polySimp_elimOne" (formula "24") (term "0,0,1"))
                                             (rule "apply_eq_monomials" (formula "25") (term "1,0,0,1,0,0") (ifseqformula "24"))
                                             (rule "polySimp_rightDist" (formula "25") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1,0,0,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "25") (term "1,0,1,0,0,1,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "25") (term "1,0,0,1,0,0"))
                                             (rule "add_literals" (formula "25") (term "1,1,1,0,0,1,0,0"))
                                             (rule "times_zero_1" (formula "25") (term "1,1,0,0,1,0,0"))
                                             (rule "add_zero_right" (formula "25") (term "1,0,0,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "24") (term "0,0,0"))
                                             (rule "eqSymm" (formula "24"))
                                             (rule "polySimp_elimOne" (formula "24") (term "0,0,1"))
                                             (rule "apply_eq_monomials" (formula "25") (term "1,0,0,1,0,0") (ifseqformula "24"))
                                             (rule "polySimp_rightDist" (formula "25") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1,0,0,1,0,0"))
                                             (rule "polySimp_pullOutFactor0b" (formula "25") (term "1,0,0,1,0,0"))
                                             (rule "add_literals" (formula "25") (term "1,1,1,0,0,1,0,0"))
                                             (rule "times_zero_1" (formula "25") (term "1,1,0,0,1,0,0"))
                                             (rule "add_zero_right" (formula "25") (term "1,0,0,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                                             (rule "pullOutSelect" (formula "2") (term "0,1,0") (inst "selectSK=arr_78"))
                                             (rule "applyEq" (formula "26") (term "0,0,0,1,1,1,0,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "26") (term "1,1,1,1,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "3") (term "0,0,0,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "25") (term "0,0,0,1") (ifseqformula "2"))
                                             (rule "applyEq" (formula "25") (term "0,1,1") (ifseqformula "2"))
                                             (rule "applyEq" (formula "40") (term "0,0,0,1") (ifseqformula "2"))
                                             (rule "applyEq" (formula "26") (term "0,1,1,1,0,1,1,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "40") (term "1,1,1") (ifseqformula "2"))
                                             (rule "applyEq" (formula "26") (term "0,1,1,1,1,0,0") (ifseqformula "2"))
                                             (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "18"))
                                             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "38")) (ifInst ""  (formula "13")))
                                             (rule "applyEqReverse" (formula "3") (term "0,1,0") (ifseqformula "2"))
                                             (rule "applyEqReverse" (formula "26") (term "0,0,0,1,1,1,0,0") (ifseqformula "2"))
                                             (rule "applyEqReverse" (formula "26") (term "1,1,1,1,0") (ifseqformula "2"))
                                             (rule "applyEqReverse" (formula "3") (term "0,0,0,0") (ifseqformula "2"))
                                             (rule "applyEqReverse" (formula "25") (term "0,0,0,1") (ifseqformula "2"))
                                             (rule "applyEqReverse" (formula "25") (term "0,1,1") (ifseqformula "2"))
                                             (rule "applyEqReverse" (formula "40") (term "0,0,0,1") (ifseqformula "2"))
                                             (rule "applyEqReverse" (formula "26") (term "0,1,1,1,0,1,1,0") (ifseqformula "2"))
                                             (rule "applyEqReverse" (formula "40") (term "1,1,1") (ifseqformula "2"))
                                             (rule "applyEqReverse" (formula "26") (term "0,1,1,1,1,0,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "pullOutSelect" (formula "32") (term "1") (inst "selectSK=arr_79"))
                                             (rule "simplifySelectOfAnonEQ" (formula "33") (ifseqformula "28"))
                                             (builtin "One Step Simplification" (formula "33"))
                                             (rule "simplifySelectOfAnonEQ" (formula "32") (ifseqformula "17"))
                                             (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "37")) (ifInst ""  (formula "36")))
                                             (rule "applyEqReverse" (formula "32") (term "1") (ifseqformula "33"))
                                             (rule "hideAuxiliaryEq" (formula "33"))
                                             (rule "eqSymm" (formula "32"))
                                             (rule "narrowSelectArrayType" (formula "32") (term "1") (ifseqformula "16") (ifseqformula "36"))
                                             (rule "narrowSelectArrayType" (formula "32") (term "0") (ifseqformula "27") (ifseqformula "36"))
                                             (rule "pullOutSelect" (formula "3") (term "0,1,1") (inst "selectSK=arr_80"))
                                             (rule "applyEq" (formula "5") (term "0,1,1,1,0,1,1,0") (ifseqformula "3"))
                                             (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "3"))
                                             (rule "applyEq" (formula "25") (term "0,1,0") (ifseqformula "3"))
                                             (rule "applyEq" (formula "26") (term "0,1,1,1,0,0,1,0") (ifseqformula "3"))
                                             (rule "applyEq" (formula "5") (term "1,1,1,1,0") (ifseqformula "3"))
                                             (rule "applyEq" (formula "5") (term "0,1,1,1,1,0,0") (ifseqformula "3"))
                                             (rule "applyEq" (formula "5") (term "0,0,0,1,1,1,0,0") (ifseqformula "3"))
                                             (rule "applyEq" (formula "26") (term "1,1,0,1,0") (ifseqformula "3"))
                                             (rule "applyEq" (formula "4") (term "0,0,0,1") (ifseqformula "3"))
                                             (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "18"))
                                             (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "37")) (ifInst ""  (formula "36")))
                                             (rule "applyEqReverse" (formula "4") (term "0,1,1") (ifseqformula "3"))
                                             (rule "applyEqReverse" (formula "5") (term "0,1,1,1,0,1,1,0") (ifseqformula "3"))
                                             (rule "applyEqReverse" (formula "25") (term "0,0,0,0") (ifseqformula "3"))
                                             (rule "applyEqReverse" (formula "25") (term "0,1,0") (ifseqformula "3"))
                                             (rule "applyEqReverse" (formula "26") (term "0,1,1,1,0,0,1,0") (ifseqformula "3"))
                                             (rule "applyEqReverse" (formula "5") (term "1,1,1,1,0") (ifseqformula "3"))
                                             (rule "applyEqReverse" (formula "5") (term "0,1,1,1,1,0,0") (ifseqformula "3"))
                                             (rule "applyEqReverse" (formula "5") (term "0,0,0,1,1,1,0,0") (ifseqformula "3"))
                                             (rule "applyEqReverse" (formula "26") (term "1,1,0,1,0") (ifseqformula "3"))
                                             (rule "applyEqReverse" (formula "4") (term "0,0,0,1") (ifseqformula "3"))
                                             (rule "hideAuxiliaryEq" (formula "3"))
                                             (rule "applyEq" (formula "4") (term "1,1,1,0,0") (ifseqformula "24"))
                                             (rule "applyEq" (formula "3") (term "1") (ifseqformula "24"))
                                             (rule "pullOutSelect" (formula "3") (term "0,1,0") (inst "selectSK=arr_81"))
                                             (rule "applyEq" (formula "5") (term "0,1,1,1,0,0,1,0") (ifseqformula "3"))
                                             (rule "applyEq" (formula "5") (term "1,1,0,1,0") (ifseqformula "3"))
                                             (rule "applyEq" (formula "4") (term "0,0,0,0") (ifseqformula "3"))
                                             (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "29"))
                                             (builtin "One Step Simplification" (formula "3"))
                                             (rule "applyEqReverse" (formula "4") (term "0,1,0") (ifseqformula "3"))
                                             (rule "applyEqReverse" (formula "5") (term "0,1,1,1,0,0,1,0") (ifseqformula "3"))
                                             (rule "applyEqReverse" (formula "5") (term "1,1,0,1,0") (ifseqformula "3"))
                                             (rule "applyEqReverse" (formula "4") (term "0,0,0,0") (ifseqformula "3"))
                                             (rule "hideAuxiliaryEq" (formula "3"))
                                             (rule "applyEq" (formula "4") (term "1,1,0,1,0") (ifseqformula "32"))
                                             (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "32"))
                                             (rule "applyEq" (formula "4") (term "0,1,1,1,0,0,1,0") (ifseqformula "32"))
                                             (rule "applyEq" (formula "3") (term "0,0,0,0") (ifseqformula "32"))
                                             (rule "pullOutSelect" (formula "38") (term "1,1,0") (inst "selectSK=arr_82"))
                                             (rule "applyEq" (formula "39") (term "0,0,0,0") (ifseqformula "1"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
                                             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "37")))
                                             (rule "replaceKnownSelect_taclet100011001100000_3" (formula "1") (term "2,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet100011001100000_4" (formula "1") (term "2,0"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "17"))
                                             (rule "eqSymm" (formula "39"))
                                             (rule "eqSymm" (formula "1") (term "0,0,0"))
                                             (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "12"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "pullOutSelect" (formula "39") (term "1,1") (inst "selectSK=arr_83"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "18"))
                                             (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
                                             (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "37"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "pullOutSelect" (formula "40") (term "1,0") (inst "selectSK=arr_84"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "pullOutSelect" (formula "2") (term "2,0") (inst "selectSK=arr_85"))
                                             (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "20"))
                                             (builtin "One Step Simplification" (formula "2"))
                                             (rule "nnf_imp2or" (formula "37") (term "0"))
                                             (rule "nnf_imp2or" (formula "29") (term "0"))
                                             (rule "nnf_imp2or" (formula "18") (term "0"))
                                             (rule "nnf_imp2or" (formula "36") (term "0"))
                                             (rule "nnf_imp2or" (formula "28") (term "0"))
                                             (rule "nnf_imp2or" (formula "7") (term "0"))
                                             (rule "nnf_notAnd" (formula "37") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "37") (term "0,0,0"))
                                             (rule "mul_literals" (formula "37") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "37") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "0,0,0"))
                                             (rule "mul_literals" (formula "37") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "37") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "37") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "37") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "37") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "37") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "29") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "29") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0"))
                                             (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "29") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0"))
                                             (rule "mul_literals" (formula "29") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "18") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                                             (rule "mul_literals" (formula "18") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                                             (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "36") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "36") (term "0,0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "36") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "36") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "36") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0"))
                                             (rule "mul_literals" (formula "36") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "28") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "28") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                                             (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "7") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
                                             (rule "mul_literals" (formula "7") (term "1,0,0,0"))
                                             (rule "seqGetAlphaCast" (formula "8") (term "0"))
                                             (rule "castedGetAny" (formula "8") (term "0"))
                                             (builtin "One Step Simplification" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "lenNonNegative" (formula "33") (term "1"))
                                             (rule "inEqSimp_commuteLeq" (formula "33"))
                                             (rule "ifthenelse_split" (formula "23") (term "0"))
                                             (branch "result_0.length ≥ 1 TRUE"
                                                (rule "eqSymm" (formula "24"))
                                                (rule "applyEq" (formula "34") (term "0") (ifseqformula "24"))
                                                (rule "applyEq" (formula "11") (term "0") (ifseqformula "24"))
                                                (rule "applyEq" (formula "34") (term "1") (ifseqformula "23"))
                                                (rule "inEqSimp_subsumption1" (formula "33") (ifseqformula "22"))
                                                (rule "leq_literals" (formula "33") (term "0"))
                                                (builtin "One Step Simplification" (formula "33"))
                                                (rule "true_left" (formula "33"))
                                                (rule "ifthenelse_split" (formula "33") (term "0"))
                                                (branch "entr_arr.length ≥ 1 TRUE"
                                                   (rule "eqSymm" (formula "34"))
                                                   (rule "applyEq" (formula "29") (term "1,1,0,0") (ifseqformula "34"))
                                                   (rule "applyEq" (formula "22") (term "0") (ifseqformula "34"))
                                                   (rule "applyEq" (formula "37") (term "1,1,0,0") (ifseqformula "33"))
                                                   (rule "applyEq" (formula "36") (term "1,1,1,0,0") (ifseqformula "33"))
                                                   (rule "applyEq" (formula "23") (term "0") (ifseqformula "33"))
                                                   (rule "applyEq" (formula "10") (term "0") (ifseqformula "32"))
                                                   (rule "applyEq" (formula "22") (term "1") (ifseqformula "32"))
                                                   (rule "arrayLengthNotNegative" (formula "24") (term "0"))
                                                   (rule "inEqSimp_subsumption1" (formula "24") (ifseqformula "32"))
                                                   (rule "leq_literals" (formula "24") (term "0"))
                                                   (builtin "One Step Simplification" (formula "24"))
                                                   (rule "true_left" (formula "24"))
                                                   (rule "arrayLengthIsAShort" (formula "24") (term "0"))
                                                   (builtin "One Step Simplification" (formula "24"))
                                                   (rule "true_left" (formula "24"))
                                                   (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "16") (ifseqformula "13"))
                                                   (rule "andLeft" (formula "16"))
                                                   (rule "notLeft" (formula "17"))
                                                   (rule "andLeft" (formula "16"))
                                                   (rule "notLeft" (formula "17"))
                                                   (rule "andLeft" (formula "16"))
                                                   (rule "notLeft" (formula "17"))
                                                   (rule "andLeft" (formula "16"))
                                                   (rule "notLeft" (formula "17"))
                                                   (rule "andLeft" (formula "16"))
                                                   (rule "andLeft" (formula "16"))
                                                   (rule "andLeft" (formula "16"))
                                                   (rule "andLeft" (formula "16"))
                                                   (rule "notLeft" (formula "16"))
                                                   (rule "notLeft" (formula "16"))
                                                   (rule "nonNull" (formula "18") (inst "i=i"))
                                                   (rule "greater_literals" (formula "18") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "18"))
                                                   (rule "sub_literals" (formula "18") (term "2,1,0,1"))
                                                   (builtin "One Step Simplification" (formula "18"))
                                                   (rule "andLeft" (formula "18"))
                                                   (rule "notLeft" (formula "18"))
                                                   (rule "narrowSelectArrayType" (formula "18") (term "0,0,1,0") (ifseqformula "11") (ifseqformula "39"))
                                                   (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                                                   (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                                                   (rule "nonNull" (formula "17") (inst "i=i"))
                                                   (rule "greater_literals" (formula "17") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "17"))
                                                   (rule "sub_literals" (formula "17") (term "2,1,0,1"))
                                                   (builtin "One Step Simplification" (formula "17"))
                                                   (rule "andLeft" (formula "17"))
                                                   (rule "notLeft" (formula "17"))
                                                   (rule "narrowSelectArrayType" (formula "17") (term "0,0,1,0") (ifseqformula "11") (ifseqformula "39"))
                                                   (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                                                   (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                                                   (rule "nonNull" (formula "16") (inst "i=i"))
                                                   (rule "greater_literals" (formula "16") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "16"))
                                                   (rule "sub_literals" (formula "16") (term "2,1,0,1"))
                                                   (builtin "One Step Simplification" (formula "16"))
                                                   (rule "andLeft" (formula "16"))
                                                   (rule "notLeft" (formula "16"))
                                                   (rule "narrowSelectArrayType" (formula "16") (term "0,0,1,0") (ifseqformula "11") (ifseqformula "39"))
                                                   (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                                                   (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                                                   (rule "nnf_imp2or" (formula "18") (term "0"))
                                                   (rule "nnf_imp2or" (formula "17") (term "0"))
                                                   (rule "nnf_imp2or" (formula "16") (term "0"))
                                                   (rule "nnf_notAnd" (formula "18") (term "0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                                                   (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
                                                   (rule "add_literals" (formula "18") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                                                   (rule "nnf_notAnd" (formula "17") (term "0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "17") (term "1,0,0,0,0,0"))
                                                   (rule "add_literals" (formula "17") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "17") (term "1,0,0,0"))
                                                   (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0"))
                                                   (rule "add_literals" (formula "16") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                                                   (rule "commute_or_2" (formula "19") (term "0"))
                                                   (rule "commute_or_2" (formula "28") (term "0"))
                                                   (rule "commute_or_2" (formula "7") (term "0"))
                                                   (rule "commute_or_2" (formula "29") (term "0"))
                                                   (rule "commute_or_2" (formula "38") (term "0"))
                                                   (rule "ifthenelse_split" (formula "27") (term "1"))
                                                   (branch "entr_arr[intseqGet_0].length ≥ 1 TRUE"
                                                      (rule "replace_known_left" (formula "7") (term "0,1,1,0") (ifseqformula "27"))
                                                      (builtin "One Step Simplification" (formula "7"))
                                                      (rule "replace_known_left" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "replace_known_left" (formula "6") (term "0,0") (ifseqformula "27"))
                                                      (builtin "One Step Simplification" (formula "6"))
                                                      (rule "replace_known_left" (formula "53") (term "0,0") (ifseqformula "6"))
                                                      (builtin "One Step Simplification" (formula "53"))
                                                      (rule "eqSymm" (formula "53"))
                                                      (rule "ifthenelse_split" (formula "28") (term "0"))
                                                      (branch " result_0[intseqGet_0]@anon_heap_copyOf«anonHeapFunction».length ≥ 1 TRUE"
                                                         (rule "applyEq" (formula "7") (term "1,1,1,0,0,1,0,0") (ifseqformula "29"))
                                                         (rule "eqSymm" (formula "7") (term "1,0,0"))
                                                         (rule "applyEq" (formula "28") (term "0") (ifseqformula "29"))
                                                         (rule "applyEq" (formula "29") (term "1,1,1,0,0,1,0,0") (ifseqformula "28"))
                                                         (rule "applyEq" (formula "7") (term "1,1,1,0,0,1,0,0") (ifseqformula "28"))
                                                         (rule "eqSymm" (formula "7") (term "1,0,0"))
                                                         (rule "commute_or_2" (formula "18") (term "0"))
                                                         (rule "commute_or_2" (formula "17") (term "0"))
                                                         (rule "ifthenelse_split" (formula "4") (term "0"))
                                                         (branch "result_0 = entr_arr TRUE"
                                                            (rule "applyEqReverse" (formula "3") (term "0,0,0,0,0") (ifseqformula "5"))
                                                            (rule "applyEqReverse" (formula "3") (term "1,0,0,0,1,0,0") (ifseqformula "5"))
                                                            (rule "applyEqReverse" (formula "2") (term "1,2,0") (ifseqformula "5"))
                                                            (rule "applyEqReverse" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "5"))
                                                            (rule "applyEqReverse" (formula "54") (term "0,0,0,0") (ifseqformula "5"))
                                                            (rule "applyEqReverse" (formula "3") (term "1,1,0") (ifseqformula "5"))
                                                            (rule "applyEqReverse" (formula "2") (term "0,0,0,0,0") (ifseqformula "5"))
                                                            (rule "applyEqReverse" (formula "3") (term "1,0,1,0,1,0,0") (ifseqformula "5"))
                                                            (rule "applyEqReverse" (formula "2") (term "1,1,0") (ifseqformula "5"))
                                                            (rule "hideAuxiliaryEq" (formula "5"))
                                                            (rule "applyEq" (formula "50") (term "0") (ifseqformula "4"))
                                                            (rule "applyEq" (formula "37") (term "1,0") (ifseqformula "4"))
                                                            (rule "applyEq" (formula "28") (term "1,0,0") (ifseqformula "4"))
                                                            (rule "applyEq" (formula "7") (term "1,1,1,1,1,0,0") (ifseqformula "4"))
                                                            (rule "applyEq" (formula "38") (term "1,1,0,1,0") (ifseqformula "4"))
                                                            (rule "applyEq" (formula "38") (term "1,2,0,1,0") (ifseqformula "4"))
                                                            (rule "applyEq" (formula "37") (term "1,1") (ifseqformula "4"))
                                                            (rule "applyEq" (formula "30") (term "1,0,0,1,0,0") (ifseqformula "4"))
                                                            (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "4"))
                                                            (builtin "One Step Simplification" (formula "35"))
                                                            (rule "true_left" (formula "35"))
                                                            (rule "applyEq" (formula "7") (term "1,1,1,0,1,0,0") (ifseqformula "4"))
                                                            (rule "applyEq" (formula "23") (term "1,0") (ifseqformula "4"))
                                                            (rule "applyEq" (formula "38") (term "1,0,0,1,0,0") (ifseqformula "4"))
                                                            (rule "applyEq" (formula "32") (term "0,1,0") (ifseqformula "4"))
                                                            (rule "applyEq" (formula "29") (term "1,1,1,0,1,0,0") (ifseqformula "4"))
                                                            (rule "applyEq" (formula "48") (term "1,0") (ifseqformula "4"))
                                                            (rule "close" (formula "48") (ifseqformula "14"))
                                                         )
                                                         (branch "result_0 = entr_arr FALSE"
                                                            (rule "applyEqReverse" (formula "3") (term "1,0,1,0,1,0,0") (ifseqformula "4"))
                                                            (rule "applyEqReverse" (formula "2") (term "0,0,0,0,0") (ifseqformula "4"))
                                                            (rule "applyEqReverse" (formula "3") (term "1,0,0,0,1,0,0") (ifseqformula "4"))
                                                            (rule "applyEqReverse" (formula "2") (term "1,1,0") (ifseqformula "4"))
                                                            (rule "applyEqReverse" (formula "3") (term "0,0,0,0,0") (ifseqformula "4"))
                                                            (rule "applyEqReverse" (formula "2") (term "1,2,0") (ifseqformula "4"))
                                                            (rule "applyEqReverse" (formula "3") (term "1,1,0") (ifseqformula "4"))
                                                            (rule "applyEqReverse" (formula "54") (term "0,0,0,0") (ifseqformula "4"))
                                                            (rule "applyEqReverse" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "4"))
                                                            (rule "hideAuxiliaryEq" (formula "4"))
                                                            (rule "replace_known_left" (formula "53") (term "0,0") (ifseqformula "5"))
                                                            (builtin "One Step Simplification" (formula "53"))
                                                            (rule "eqSymm" (formula "53"))
                                                            (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                                            (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                            (rule "hideAuxiliaryEq" (formula "2"))
                                                            (rule "commute_or_2" (formula "14") (term "0"))
                                                            (rule "ifthenelse_split" (formula "1") (term "0"))
                                                            (branch " ¬entr_arr[intseqGet_0] = null ∧ ¬entr_arr[intseqGet_0].<created> = TRUE TRUE"
                                                               (rule "andLeft" (formula "1"))
                                                               (rule "notLeft" (formula "2"))
                                                               (rule "notLeft" (formula "1"))
                                                               (rule "referencedObjectIsCreatedRight" (formula "39") (ifseqformula "38"))
                                                               (rule "close" (formula "39") (ifseqformula "9"))
                                                            )
                                                            (branch " ¬entr_arr[intseqGet_0] = null ∧ ¬entr_arr[intseqGet_0].<created> = TRUE FALSE"
                                                               (rule "applyEqReverse" (formula "53") (term "0") (ifseqformula "1"))
                                                               (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                                               (rule "hideAuxiliaryEq" (formula "1"))
                                                               (rule "commute_or" (formula "16") (term "0,0"))
                                                               (rule "commute_or" (formula "27") (term "0,0"))
                                                               (rule "commute_or" (formula "36") (term "0,0"))
                                                               (rule "commute_or" (formula "26") (term "0,0"))
                                                               (rule "commute_or" (formula "4") (term "0,0"))
                                                               (rule "commute_or" (formula "15") (term "0,0"))
                                                               (rule "commute_or" (formula "14") (term "0,0"))
                                                               (rule "commute_or" (formula "13") (term "0,0"))
                                                               (rule "ifthenelse_to_or_left" (formula "26") (term "0,0,0"))
                                                               (rule "eqSymm" (formula "26") (term "1,0,0,0,0"))
                                                               (rule "eqSymm" (formula "26") (term "1,1,0,0,0"))
                                                               (builtin "One Step Simplification" (formula "26"))
                                                               (rule "nnf_notAnd" (formula "26") (term "0,0,0,0,0"))
                                                               (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,0,0,0"))
                                                               (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0,0,0,0"))
                                                               (rule "add_zero_right" (formula "26") (term "0,0,0,0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0"))
                                                               (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,0,0,0"))
                                                               (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0,0,0"))
                                                               (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0,0,0"))
                                                               (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0,0,0"))
                                                               (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,0,0,0"))
                                                               (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,0,0"))
                                                               (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,0,0"))
                                                               (rule "nnf_notAnd" (formula "26") (term "0,1,1,0,0,0"))
                                                               (rule "inEqSimp_notLeq" (formula "26") (term "1,0,1,1,0,0,0"))
                                                               (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,1,1,0,0,0"))
                                                               (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                               (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,1,1,0,0,0"))
                                                               (rule "add_literals" (formula "26") (term "0,0,0,1,0,1,1,0,0,0"))
                                                               (rule "add_zero_left" (formula "26") (term "0,0,1,0,1,1,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,1,1,0,0,0"))
                                                               (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,1,1,0,0,0"))
                                                               (rule "polySimp_elimOne" (formula "26") (term "1,1,0,1,1,0,0,0"))
                                                               (rule "inEqSimp_notGeq" (formula "26") (term "0,0,1,1,0,0,0"))
                                                               (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,1,1,0,0,0"))
                                                               (rule "add_zero_right" (formula "26") (term "0,0,0,0,1,1,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,1,1,0,0,0"))
                                                               (rule "mul_literals" (formula "26") (term "1,0,0,1,1,0,0,0"))
                                                               (rule "commute_or" (formula "26") (term "0,0"))
                                                               (rule "commute_or_2" (formula "26") (term "0"))
                                                               (rule "commute_or" (formula "26") (term "1,1,0"))
                                                               (rule "commute_or_2" (formula "26") (term "0,1,0"))
                                                               (rule "commute_or_2" (formula "26") (term "0,1,1,0"))
                                                               (rule "commute_or" (formula "26") (term "0,0,1,0"))
                                                               (rule "commute_or" (formula "26") (term "0,0,1,1,0"))
                                                               (rule "cnf_rightDist" (formula "26") (term "1,1,0"))
                                                               (rule "commute_or_2" (formula "26") (term "0,1,1,0"))
                                                               (rule "inEqSimp_or_tautInEq1" (formula "26") (term "0,0,1,1,0"))
                                                               (rule "add_zero_right" (formula "26") (term "1,1,0,0,1,1,0"))
                                                               (rule "qeq_literals" (formula "26") (term "1,0,0,1,1,0"))
                                                               (builtin "One Step Simplification" (formula "26"))
                                                               (rule "shift_paren_or" (formula "26") (term "1,1,0"))
                                                               (rule "commute_or" (formula "26") (term "0,1,1,0"))
                                                               (rule "inEqSimp_or_tautInEq1" (formula "26") (term "1,1,0"))
                                                               (rule "inEqSimp_homoInEq1" (formula "26") (term "1,1,1,0"))
                                                               (rule "polySimp_pullOutFactor1" (formula "26") (term "0,1,1,1,0"))
                                                               (rule "add_literals" (formula "26") (term "1,0,1,1,1,0"))
                                                               (rule "times_zero_1" (formula "26") (term "0,1,1,1,0"))
                                                               (rule "leq_literals" (formula "26") (term "1,1,1,0"))
                                                               (builtin "One Step Simplification" (formula "26"))
                                                               (rule "shift_paren_or" (formula "26") (term "0"))
                                                               (rule "commute_or_2" (formula "26") (term "0,0"))
                                                               (builtin "One Step Simplification" (formula "26"))
                                                               (rule "shift_paren_or" (formula "26") (term "0,0"))
                                                               (rule "commute_or" (formula "26") (term "0,0,0"))
                                                               (builtin "One Step Simplification" (formula "26"))
                                                               (rule "ifthenelse_to_or_left" (formula "4") (term "0,0,0"))
                                                               (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                                                               (builtin "One Step Simplification" (formula "4"))
                                                               (rule "eqSymm" (formula "4") (term "1,0,0,0,0"))
                                                               (rule "nnf_notAnd" (formula "4") (term "0,0,0,0,0"))
                                                               (rule "inEqSimp_notGeq" (formula "4") (term "0,0,0,0,0,0"))
                                                               (rule "times_zero_1" (formula "4") (term "1,0,0,0,0,0,0,0,0"))
                                                               (rule "add_zero_right" (formula "4") (term "0,0,0,0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "4") (term "1,0,0,0,0,0,0"))
                                                               (rule "inEqSimp_notLeq" (formula "4") (term "1,0,0,0,0,0"))
                                                               (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,0,0,0,0"))
                                                               (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0,0,0,0"))
                                                               (rule "add_literals" (formula "4") (term "0,0,0,1,0,0,0,0,0"))
                                                               (rule "add_zero_left" (formula "4") (term "0,0,1,0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0,0,0,0"))
                                                               (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0,0,0"))
                                                               (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0,0,0,0"))
                                                               (rule "nnf_notAnd" (formula "4") (term "0,1,1,0,0,0"))
                                                               (rule "inEqSimp_notLeq" (formula "4") (term "1,0,1,1,0,0,0"))
                                                               (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,1,1,0,0,0"))
                                                               (rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                               (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,1,1,0,0,0"))
                                                               (rule "add_literals" (formula "4") (term "0,0,0,1,0,1,1,0,0,0"))
                                                               (rule "add_zero_left" (formula "4") (term "0,0,1,0,1,1,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,1,1,0,0,0"))
                                                               (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,1,1,0,0,0"))
                                                               (rule "polySimp_elimOne" (formula "4") (term "1,1,0,1,1,0,0,0"))
                                                               (rule "inEqSimp_notGeq" (formula "4") (term "0,0,1,1,0,0,0"))
                                                               (rule "mul_literals" (formula "4") (term "1,0,0,0,0,1,1,0,0,0"))
                                                               (rule "add_zero_right" (formula "4") (term "0,0,0,0,1,1,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,1,1,0,0,0"))
                                                               (rule "mul_literals" (formula "4") (term "1,0,0,1,1,0,0,0"))
                                                               (rule "commute_or" (formula "4") (term "0,0"))
                                                               (rule "commute_or_2" (formula "4") (term "0"))
                                                               (rule "commute_or" (formula "4") (term "1,1,0"))
                                                               (rule "commute_or_2" (formula "4") (term "0,1,0"))
                                                               (rule "arrayLengthIsAShort" (formula "32") (term "0"))
                                                               (builtin "One Step Simplification" (formula "32"))
                                                               (rule "true_left" (formula "32"))
                                                               (rule "arrayLengthNotNegative" (formula "32") (term "0"))
                                                               (rule "applyEq" (formula "32") (term "0") (ifseqformula "33"))
                                                               (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "31"))
                                                               (rule "leq_literals" (formula "32") (term "0"))
                                                               (builtin "One Step Simplification" (formula "32"))
                                                               (rule "true_left" (formula "32"))
                                                               (rule "commute_or_2" (formula "4") (term "0,1,1,0"))
                                                               (rule "commute_or" (formula "4") (term "0,0,1,0"))
                                                               (rule "commute_or" (formula "4") (term "0,0,1,1,0"))
                                                               (rule "cnf_rightDist" (formula "4") (term "1,1,0"))
                                                               (rule "commute_or_2" (formula "4") (term "0,1,1,0"))
                                                               (rule "inEqSimp_or_tautInEq1" (formula "4") (term "0,0,1,1,0"))
                                                               (rule "add_zero_right" (formula "4") (term "1,1,0,0,1,1,0"))
                                                               (rule "qeq_literals" (formula "4") (term "1,0,0,1,1,0"))
                                                               (builtin "One Step Simplification" (formula "4"))
                                                               (rule "shift_paren_or" (formula "4") (term "1,1,0"))
                                                               (rule "commute_or" (formula "4") (term "0,1,1,0"))
                                                               (rule "inEqSimp_or_tautInEq1" (formula "4") (term "1,1,0"))
                                                               (rule "inEqSimp_homoInEq1" (formula "4") (term "1,1,1,0"))
                                                               (rule "polySimp_pullOutFactor1" (formula "4") (term "0,1,1,1,0"))
                                                               (rule "add_literals" (formula "4") (term "1,0,1,1,1,0"))
                                                               (rule "times_zero_1" (formula "4") (term "0,1,1,1,0"))
                                                               (rule "leq_literals" (formula "4") (term "1,1,1,0"))
                                                               (builtin "One Step Simplification" (formula "4"))
                                                               (rule "shift_paren_or" (formula "4") (term "0"))
                                                               (rule "commute_or_2" (formula "4") (term "0,0"))
                                                               (builtin "One Step Simplification" (formula "4"))
                                                               (rule "shift_paren_or" (formula "4") (term "0,0"))
                                                               (rule "commute_or" (formula "4") (term "0,0,0"))
                                                               (builtin "One Step Simplification" (formula "4"))
                                                               (rule "ifthenelse_to_or_left" (formula "26") (term "0,0,0"))
                                                               (rule "eqSymm" (formula "26") (term "1,0,0,0,0"))
                                                               (rule "eqSymm" (formula "26") (term "1,1,0,0,0"))
                                                               (rule "nnf_notAnd" (formula "26") (term "0,0,0,0,0"))
                                                               (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,0,0,0"))
                                                               (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0,0,0"))
                                                               (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0,0,0"))
                                                               (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0,0,0"))
                                                               (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,0,0,0"))
                                                               (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,0,0"))
                                                               (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,0,0"))
                                                               (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0,0,0"))
                                                               (rule "add_zero_right" (formula "26") (term "0,0,0,0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0"))
                                                               (rule "commute_or" (formula "26") (term "0,0"))
                                                               (rule "commute_or_2" (formula "26") (term "0"))
                                                               (rule "commute_or" (formula "26") (term "1,1,0"))
                                                               (rule "commute_or_2" (formula "26") (term "0,1,0"))
                                                               (rule "commute_or" (formula "26") (term "0,0,1,0"))
                                                               (rule "cnf_rightDist" (formula "26") (term "1,1,0"))
                                                               (rule "cnf_rightDist" (formula "26") (term "0"))
                                                               (rule "distr_forallAnd" (formula "26"))
                                                               (rule "andLeft" (formula "26"))
                                                               (rule "commute_or" (formula "27") (term "0"))
                                                               (rule "shift_paren_or" (formula "26") (term "0"))
                                                               (rule "commute_or_2" (formula "26") (term "0,0"))
                                                               (builtin "One Step Simplification" (formula "26"))
                                                               (rule "commute_or" (formula "27") (term "1,1,0"))
                                                               (rule "shift_paren_or" (formula "26") (term "0,0"))
                                                               (rule "commute_or" (formula "26") (term "0,0,0"))
                                                               (builtin "One Step Simplification" (formula "26"))
                                                               (rule "cnf_rightDist" (formula "27") (term "0"))
                                                               (rule "distr_forallAnd" (formula "27"))
                                                               (rule "andLeft" (formula "27"))
                                                               (rule "commute_or_2" (formula "27") (term "0"))
                                                               (rule "shift_paren_or" (formula "28") (term "0"))
                                                               (rule "commute_or_2" (formula "28") (term "0,0"))
                                                               (rule "inEqSimp_or_tautInEq1" (formula "28") (term "0"))
                                                               (rule "inEqSimp_homoInEq1" (formula "28") (term "1,0"))
                                                               (rule "polySimp_pullOutFactor1" (formula "28") (term "0,1,0"))
                                                               (rule "add_literals" (formula "28") (term "1,0,1,0"))
                                                               (rule "times_zero_1" (formula "28") (term "0,1,0"))
                                                               (rule "leq_literals" (formula "28") (term "1,0"))
                                                               (builtin "One Step Simplification" (formula "28"))
                                                               (rule "true_left" (formula "28"))
                                                               (rule "shift_paren_or" (formula "27") (term "0,0"))
                                                               (rule "commute_or" (formula "27") (term "0,0,0"))
                                                               (rule "inEqSimp_or_tautInEq1" (formula "27") (term "0,0"))
                                                               (rule "add_zero_right" (formula "27") (term "1,1,0,0"))
                                                               (rule "qeq_literals" (formula "27") (term "1,0,0"))
                                                               (builtin "One Step Simplification" (formula "27"))
                                                               (rule "true_left" (formula "27"))
                                                               (rule "ifthenelse_split" (formula "1") (term "0"))
                                                               (branch " ¬entr_arr[intseqGet_0] = null ∧ ¬( entr_arr[intseqGet_0].<created> = TRUE ∨ (entr_arr[intseqGet_0]@heap).<created>@anon_heap_copyOf«anonHeapFunction» = TRUE) TRUE"
                                                                  (rule "andLeft" (formula "1"))
                                                                  (rule "notLeft" (formula "1"))
                                                                  (rule "notLeft" (formula "1"))
                                                                  (rule "orRight" (formula "37"))
                                                                  (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "39"))
                                                                  (rule "close" (formula "37") (ifseqformula "8"))
                                                               )
                                                               (branch " ¬entr_arr[intseqGet_0] = null ∧ ¬( entr_arr[intseqGet_0].<created> = TRUE ∨ (entr_arr[intseqGet_0]@heap).<created>@anon_heap_copyOf«anonHeapFunction» = TRUE) FALSE"
                                                                  (rule "close" (formula "53") (ifseqformula "1"))
                                                               )
                                                            )
                                                         )
                                                      )
                                                      (branch " result_0[intseqGet_0]@anon_heap_copyOf«anonHeapFunction».length ≥ 1 FALSE"
                                                         (rule "eqSymm" (formula "28"))
                                                         (rule "inEqSimp_geqRight" (formula "40"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "applyEq" (formula "28") (term "0") (ifseqformula "29"))
                                                         (rule "qeq_literals" (formula "28"))
                                                         (rule "closeFalse" (formula "28"))
                                                      )
                                                   )
                                                   (branch "entr_arr[intseqGet_0].length ≥ 1 FALSE"
                                                      (builtin "One Step Simplification" (formula "27"))
                                                      (rule "replace_known_right" (formula "28") (term "0,1,1,0") (ifseqformula "39"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "replace_known_right" (formula "7") (term "0,1,1,0") (ifseqformula "39"))
                                                      (builtin "One Step Simplification" (formula "7"))
                                                      (rule "replace_known_right" (formula "6") (term "0,0") (ifseqformula "39"))
                                                      (builtin "One Step Simplification" (formula "6"))
                                                      (rule "inEqSimp_geqRight" (formula "39"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "inEqSimp_homoInEq1" (formula "7"))
                                                      (rule "times_zero_2" (formula "7") (term "1,0"))
                                                      (rule "add_zero_right" (formula "7") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "7"))
                                                      (rule "mul_literals" (formula "7") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "7") (ifseqformula "6"))
                                                      (rule "qeq_literals" (formula "7") (term "0"))
                                                      (builtin "One Step Simplification" (formula "7"))
                                                      (rule "closeFalse" (formula "7"))
                                                   )
                                                )
                                                (branch "entr_arr.length ≥ 1 FALSE"
                                                   (rule "eqSymm" (formula "33"))
                                                   (rule "inEqSimp_geqRight" (formula "38"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "applyEq" (formula "38") (term "1,1,0,0") (ifseqformula "34"))
                                                   (rule "applyEq" (formula "30") (term "1,1,0,0") (ifseqformula "34"))
                                                   (rule "applyEq" (formula "23") (term "0") (ifseqformula "34"))
                                                   (rule "qeq_literals" (formula "23"))
                                                   (rule "closeFalse" (formula "23"))
                                                )
                                             )
                                             (branch "result_0.length ≥ 1 FALSE"
                                                (rule "eqSymm" (formula "23"))
                                                (rule "inEqSimp_geqRight" (formula "39"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "applyEq" (formula "12") (term "0") (ifseqformula "24"))
                                                (rule "inEqSimp_homoInEq1" (formula "12"))
                                                (rule "mul_literals" (formula "12") (term "1,0"))
                                                (rule "add_zero_right" (formula "12") (term "0"))
                                                (rule "applyEqRigid" (formula "34") (term "0") (ifseqformula "24"))
                                                (rule "qeq_literals" (formula "34"))
                                                (rule "true_left" (formula "34"))
                                                (rule "applyEq" (formula "34") (term "1") (ifseqformula "24"))
                                                (builtin "One Step Simplification" (formula "34"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "12"))
                                                (rule "mul_literals" (formula "12") (term "1"))
                                                (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "12"))
                                                (rule "qeq_literals" (formula "10") (term "0"))
                                                (builtin "One Step Simplification" (formula "10"))
                                                (rule "closeFalse" (formula "10"))
                                             )
                                          )
                                       )
                                       (branch "CUT: array2seq(heapAfter_sort, result_0[iv_0]@heapAfter_sort) = array2seq(heapAfter_copyOf, result_0[intseqGet_0]@heapAfter_copyOf) FALSE"
                                          (rule "hide_right" (formula "34") (userinteraction))
                                          (rule "equalityToSeqGetAndSeqLenRight" (formula "29") (inst "iv=iv") (userinteraction))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "1") (ifseqformula "13"))
                                          (rule "castDel" (formula "19") (term "0"))
                                          (rule "castDel" (formula "19") (term "1"))
                                          (rule "translateJavaSubInt" (formula "27") (term "1,1,0,0"))
                                          (rule "translateJavaAddInt" (formula "27") (term "0,2,2,0,1,0"))
                                          (rule "sub_literals" (formula "11") (term "2,1,0"))
                                          (builtin "One Step Simplification" (formula "11"))
                                          (rule "sub_literals" (formula "20") (term "2,1,0"))
                                          (builtin "One Step Simplification" (formula "20"))
                                          (rule "add_zero_right" (formula "19") (term "0,2,1,0"))
                                          (rule "add_zero_right" (formula "19") (term "0,2,1,1"))
                                          (rule "andLeft" (formula "25"))
                                          (rule "andLeft" (formula "17"))
                                          (rule "andLeft" (formula "2"))
                                          (rule "andLeft" (formula "5"))
                                          (rule "andLeft" (formula "4"))
                                          (rule "andLeft" (formula "21"))
                                          (rule "eqSymm" (formula "28"))
                                          (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "36"))
                                          (builtin "One Step Simplification" (formula "10"))
                                          (rule "replace_known_right" (formula "17") (term "0,1") (ifseqformula "34"))
                                          (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "35")))
                                          (rule "polySimp_elimSub" (formula "18") (term "1,1"))
                                          (rule "times_zero_2" (formula "18") (term "1,1,1"))
                                          (rule "add_zero_right" (formula "18") (term "1,1"))
                                          (rule "polySimp_elimSub" (formula "18") (term "1,0"))
                                          (rule "times_zero_2" (formula "18") (term "1,1,0"))
                                          (rule "add_zero_right" (formula "18") (term "1,0"))
                                          (rule "polySimp_elimSub" (formula "31") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "31") (term "1,1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "20") (term "1"))
                                          (rule "mul_literals" (formula "20") (term "1,1"))
                                          (rule "add_zero_right" (formula "20") (term "1"))
                                          (rule "polySimp_elimSub" (formula "3") (term "1"))
                                          (rule "mul_literals" (formula "3") (term "1,1"))
                                          (rule "add_zero_right" (formula "3") (term "1"))
                                          (rule "polySimp_elimSub" (formula "4") (term "1"))
                                          (rule "mul_literals" (formula "4") (term "1,1"))
                                          (rule "add_zero_right" (formula "4") (term "1"))
                                          (rule "polySimp_elimSub" (formula "21") (term "1"))
                                          (rule "mul_literals" (formula "21") (term "1,1"))
                                          (rule "add_zero_right" (formula "21") (term "1"))
                                          (rule "polySimp_addComm0" (formula "31") (term "0,2,2,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "31") (term "1,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0"))
                                          (rule "add_zero_right" (formula "18") (term "0,0,0"))
                                          (rule "eqSymm" (formula "18"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "6"))
                                          (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "6") (term "0"))
                                          (rule "narrowSelectArrayType" (formula "13") (term "0,0,1,0") (ifseqformula "7") (ifseqformula "36"))
                                          (rule "inEqSimp_ltToLeq" (formula "20"))
                                          (rule "polySimp_mulComm0" (formula "20") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "20") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "3"))
                                          (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "4"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "4") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "21"))
                                          (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "21") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0"))
                                          (rule "add_zero_right" (formula "18") (term "0,0,0"))
                                          (rule "eqSymm" (formula "18"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "19"))
                                          (rule "inEqSimp_commuteLeq" (formula "2"))
                                          (rule "inEqSimp_commuteLeq" (formula "5"))
                                          (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "1"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0"))
                                          (rule "applyEq" (formula "26") (term "0") (ifseqformula "25"))
                                          (rule "applyEq" (formula "25") (term "1") (ifseqformula "26"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0"))
                                          (rule "mul_literals" (formula "30") (term "0,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,1"))
                                          (rule "mul_literals" (formula "31") (term "0,1,1,0,0,1"))
                                          (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                                          (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                          (rule "polySimp_elimOne" (formula "4") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "18"))
                                          (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                                          (rule "polySimp_elimOne" (formula "18") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                          (rule "polySimp_elimOne" (formula "2") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "19"))
                                          (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                                          (rule "polySimp_elimOne" (formula "19") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "29") (term "0,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0"))
                                          (rule "eqSymm" (formula "16"))
                                          (rule "polySimp_elimOne" (formula "16") (term "0,0,1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0"))
                                          (rule "eqSymm" (formula "16"))
                                          (rule "polySimp_elimOne" (formula "16") (term "0,0,1"))
                                          (rule "array2seqDef" (formula "25") (term "0,0") (inst "u=u"))
                                          (rule "lenOfSeqDef" (formula "25") (term "0"))
                                          (rule "polySimp_elimSub" (formula "25") (term "1,0"))
                                          (rule "mul_literals" (formula "25") (term "1,1,0"))
                                          (rule "add_zero_right" (formula "25") (term "1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0"))
                                          (rule "add_zero_right" (formula "25") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0"))
                                          (rule "polySimp_elimOne" (formula "25") (term "0,0,0"))
                                          (rule "applyEq" (formula "16") (term "0") (ifseqformula "25"))
                                          (rule "eqSymm" (formula "16"))
                                          (rule "array2seqDef" (formula "28") (term "0,0") (inst "u=u"))
                                          (rule "getOfSeqDef" (formula "28") (term "0"))
                                          (rule "castDel" (formula "28") (term "1,0"))
                                          (rule "castDel" (formula "28") (term "2,0"))
                                          (rule "add_zero_right" (formula "28") (term "0,2,1,0"))
                                          (rule "polySimp_elimSub" (formula "28") (term "1,1,0,0"))
                                          (rule "times_zero_2" (formula "28") (term "1,1,1,0,0"))
                                          (rule "add_zero_right" (formula "28") (term "1,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0"))
                                          (rule "polySimp_addComm1" (formula "28") (term "0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0"))
                                          (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "28"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "28") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "28") (term "0,0,0"))
                                          (rule "polySimp_elimOne" (formula "28") (term "0,0,0"))
                                          (rule "replace_known_left" (formula "28") (term "0,0") (ifseqformula "2"))
                                          (builtin "One Step Simplification" (formula "28"))
                                          (rule "array2seqDef" (formula "31") (term "0,0,0") (inst "u=u"))
                                          (rule "lenOfSeqDef" (formula "31") (term "0,0"))
                                          (rule "polySimp_elimSub" (formula "31") (term "1,0,0"))
                                          (rule "times_zero_2" (formula "31") (term "1,1,0,0"))
                                          (rule "add_zero_right" (formula "31") (term "1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "31") (term "0,0,0"))
                                          (rule "add_zero_right" (formula "31") (term "0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "31") (term "0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "31") (term "0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "31") (term "0,0,0,0"))
                                          (rule "array2seqDef" (formula "31") (term "0,0,1,0,1") (inst "u=u"))
                                          (rule "getOfSeqDef" (formula "31") (term "0,1,0,1"))
                                          (rule "castDel" (formula "31") (term "2,0,1,0,1"))
                                          (rule "castDel" (formula "31") (term "1,0,1,0,1"))
                                          (rule "add_zero_right" (formula "31") (term "0,2,1,0,1,0,1"))
                                          (rule "polySimp_elimSub" (formula "31") (term "1,1,0,0,1,0,1"))
                                          (rule "times_zero_2" (formula "31") (term "1,1,1,0,0,1,0,1"))
                                          (rule "add_zero_right" (formula "31") (term "1,1,0,0,1,0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,1,0,1"))
                                          (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,1,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,1,0,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,1,0,1"))
                                          (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,1,0,1"))
                                          (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,1,0,1"))
                                          (rule "mul_literals" (formula "31") (term "0,1,1,0,0,1,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,1,0,1"))
                                          (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,1,0,1"))
                                          (rule "array2seqDef" (formula "31") (term "0,1,0") (inst "u=u"))
                                          (rule "eqSymm" (formula "31") (term "0"))
                                          (rule "lenOfSeqDef" (formula "31") (term "0,0"))
                                          (rule "polySimp_elimSub" (formula "31") (term "1,0,0"))
                                          (rule "times_zero_2" (formula "31") (term "1,1,0,0"))
                                          (rule "add_zero_right" (formula "31") (term "1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "31") (term "0,0,0"))
                                          (rule "add_zero_right" (formula "31") (term "0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "31") (term "0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "31") (term "0,0,0,0"))
                                          (rule "eqSymm" (formula "31") (term "0"))
                                          (rule "polySimp_elimOne" (formula "31") (term "0,0,1,0"))
                                          (rule "array2seqDef" (formula "31") (term "0,1,1,0,1") (inst "u=u"))
                                          (rule "eqSymm" (formula "31") (term "1,0,1"))
                                          (rule "getOfSeqDef" (formula "31") (term "0,1,0,1"))
                                          (rule "castDel" (formula "31") (term "2,0,1,0,1"))
                                          (rule "castDel" (formula "31") (term "1,0,1,0,1"))
                                          (rule "add_zero_right" (formula "31") (term "0,2,1,0,1,0,1"))
                                          (rule "polySimp_elimSub" (formula "31") (term "1,1,0,0,1,0,1"))
                                          (rule "times_zero_2" (formula "31") (term "1,1,1,0,0,1,0,1"))
                                          (rule "add_zero_right" (formula "31") (term "1,1,0,0,1,0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,1,0,1"))
                                          (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,1,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,1,0,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,1,0,1"))
                                          (rule "eqSymm" (formula "31") (term "1,0,1"))
                                          (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,1,1,0,1"))
                                          (rule "polySimp_rightDist" (formula "31") (term "1,1,0,1,1,0,1"))
                                          (rule "mul_literals" (formula "31") (term "0,1,1,0,1,1,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,1,1,0,1"))
                                          (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,1,1,0,1"))
                                          (rule "array2seqDef" (formula "20") (term "0") (inst "u=u"))
                                          (rule "array2seqDef" (formula "20") (term "1") (inst "u=u"))
                                          (rule "array2seqDef" (formula "26") (term "0,0") (inst "u=u"))
                                          (rule "lenOfSeqDef" (formula "26") (term "0"))
                                          (rule "polySimp_elimSub" (formula "26") (term "1,0"))
                                          (rule "mul_literals" (formula "26") (term "1,1,0"))
                                          (rule "add_zero_right" (formula "26") (term "1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "26") (term "0,0"))
                                          (rule "add_zero_right" (formula "26") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "26") (term "0,0,0"))
                                          (rule "polySimp_elimOne" (formula "26") (term "0,0,0"))
                                          (rule "array2seqDef" (formula "30") (term "0,1,1,1,0,0,1") (inst "u=u"))
                                          (rule "lenOfSeqDef" (formula "30") (term "1,1,1,0,0,1"))
                                          (rule "polySimp_elimSub" (formula "30") (term "1,1,1,1,0,0,1"))
                                          (rule "times_zero_2" (formula "30") (term "1,1,1,1,1,0,0,1"))
                                          (rule "add_zero_right" (formula "30") (term "1,1,1,1,0,0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "30") (term "0,1,1,1,0,0,1"))
                                          (rule "add_zero_right" (formula "30") (term "0,0,1,1,1,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,1,1,0,0,1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "30") (term "0,1,1,1,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "30") (term "0,0,1,1,1,0,0,1"))
                                          (rule "polySimp_elimOne" (formula "30") (term "0,0,1,1,1,0,0,1"))
                                          (rule "array2seqDef" (formula "27") (term "0,1") (inst "u=u"))
                                          (rule "eqSymm" (formula "27"))
                                          (rule "getOfSeqDef" (formula "27") (term "0"))
                                          (rule "castDel" (formula "27") (term "2,0"))
                                          (rule "castDel" (formula "27") (term "1,0"))
                                          (rule "add_zero_right" (formula "27") (term "0,2,1,0"))
                                          (rule "polySimp_elimSub" (formula "27") (term "1,1,0,0"))
                                          (rule "times_zero_2" (formula "27") (term "1,1,1,0,0"))
                                          (rule "add_zero_right" (formula "27") (term "1,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
                                          (rule "polySimp_addComm1" (formula "27") (term "0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                                          (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "17"))
                                          (builtin "One Step Simplification" (formula "27"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "27") (term "0,0,0"))
                                          (rule "polySimp_elimOne" (formula "27") (term "0,0,0"))
                                          (rule "replace_known_left" (formula "27") (term "0,0") (ifseqformula "18"))
                                          (builtin "One Step Simplification" (formula "27"))
                                          (rule "eqSymm" (formula "27"))
                                          (rule "eqSeqDef" (formula "20") (inst "iv=iv"))
                                          (rule "andLeft" (formula "20"))
                                          (rule "lenOfSeqDef" (formula "20") (term "1"))
                                          (rule "polySimp_elimSub" (formula "20") (term "1,1"))
                                          (rule "times_zero_2" (formula "20") (term "1,1,1"))
                                          (rule "add_zero_right" (formula "20") (term "1,1"))
                                          (rule "lenOfSeqDef" (formula "21") (term "1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "21") (term "1,1,1,0,0"))
                                          (rule "times_zero_2" (formula "21") (term "1,1,1,1,0,0"))
                                          (rule "add_zero_right" (formula "21") (term "1,1,1,0,0"))
                                          (rule "getOfSeqDef" (formula "21") (term "1,1,0"))
                                          (rule "castDel" (formula "21") (term "2,1,1,0"))
                                          (rule "castDel" (formula "21") (term "1,1,1,0"))
                                          (rule "add_zero_right" (formula "21") (term "0,2,1,1,1,0"))
                                          (rule "polySimp_elimSub" (formula "21") (term "1,1,0,1,1,0"))
                                          (rule "times_zero_2" (formula "21") (term "1,1,1,0,1,1,0"))
                                          (rule "add_zero_right" (formula "21") (term "1,1,0,1,1,0"))
                                          (rule "getOfSeqDef" (formula "21") (term "0,1,0"))
                                          (rule "castDel" (formula "21") (term "1,0,1,0"))
                                          (rule "castDel" (formula "21") (term "2,0,1,0"))
                                          (rule "add_zero_right" (formula "21") (term "0,2,1,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "21") (term "1,1,0,0,1,0"))
                                          (rule "times_zero_2" (formula "21") (term "1,1,1,0,0,1,0"))
                                          (rule "add_zero_right" (formula "21") (term "1,1,0,0,1,0"))
                                          (rule "lenOfSeqDef" (formula "20") (term "0"))
                                          (rule "polySimp_elimSub" (formula "20") (term "1,0"))
                                          (rule "times_zero_2" (formula "20") (term "1,1,0"))
                                          (rule "add_zero_right" (formula "20") (term "1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "20") (term "0,1"))
                                          (rule "add_zero_right" (formula "20") (term "0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "21") (term "0,1,1,0,0"))
                                          (rule "add_zero_right" (formula "21") (term "0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,1,1,0"))
                                          (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,1,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0"))
                                          (rule "add_zero_right" (formula "20") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,1,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,1,0"))
                                          (rule "apply_eq_monomials" (formula "21") (term "1,0,0,1,0,0") (ifseqformula "20"))
                                          (rule "polySimp_rightDist" (formula "21") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "21") (term "1,0,1,0,0,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "21") (term "1,0,1,0,0,1,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "21") (term "1,0,0,1,0,0"))
                                          (rule "add_literals" (formula "21") (term "1,1,1,0,0,1,0,0"))
                                          (rule "times_zero_1" (formula "21") (term "1,1,0,0,1,0,0"))
                                          (rule "add_zero_right" (formula "21") (term "1,0,0,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "20") (term "0,0,1"))
                                          (rule "polySimp_elimOne" (formula "20") (term "0,0,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,1,1,0"))
                                          (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,1,1,0"))
                                          (rule "polySimp_rightDist" (formula "21") (term "1,1,0,1,1,0"))
                                          (rule "mul_literals" (formula "21") (term "0,1,1,0,1,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,1,1,0"))
                                          (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "21") (term "0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0,1,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "20") (term "0,0,0"))
                                          (rule "polySimp_elimOne" (formula "20") (term "0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,0,1,0,0,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "21") (term "0,0,0,1,0,0,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "21") (term "0,0,0,1,0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                                          (rule "pullOutSelect" (formula "31") (term "0,0,0,0,0") (inst "selectSK=arr_66"))
                                          (rule "applyEq" (formula "32") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                                          (rule "applyEq" (formula "32") (term "0,1,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "32") (term "0,1,1,1,1,0,0,1") (ifseqformula "1"))
                                          (rule "applyEq" (formula "32") (term "0,0,0,1,1,1,0,0,1") (ifseqformula "1"))
                                          (rule "applyEq" (formula "32") (term "1,1,0,1,0,1") (ifseqformula "1"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "applyEqReverse" (formula "32") (term "0,0,0,0,0") (ifseqformula "1"))
                                          (rule "applyEqReverse" (formula "32") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                                          (rule "applyEqReverse" (formula "32") (term "0,1,0,0") (ifseqformula "1"))
                                          (rule "applyEqReverse" (formula "32") (term "0,1,1,1,1,0,0,1") (ifseqformula "1"))
                                          (rule "applyEqReverse" (formula "32") (term "0,0,0,1,1,1,0,0,1") (ifseqformula "1"))
                                          (rule "applyEqReverse" (formula "32") (term "1,1,0,1,0,1") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "eqSymm" (formula "31") (term "0"))
                                          (rule "eqSymm" (formula "31") (term "1,0,1"))
                                          (rule "pullOutSelect" (formula "28") (term "1") (inst "selectSK=arr_67"))
                                          (rule "simplifySelectOfAnonEQ" (formula "28") (ifseqformula "13"))
                                          (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "34")) (ifInst ""  (formula "33")))
                                          (rule "simplifySelectOfAnonEQ" (formula "29") (ifseqformula "24"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "applyEqReverse" (formula "29") (term "1") (ifseqformula "28"))
                                          (rule "hideAuxiliaryEq" (formula "28"))
                                          (rule "narrowSelectArrayType" (formula "28") (term "1") (ifseqformula "12") (ifseqformula "33"))
                                          (rule "narrowSelectArrayType" (formula "28") (term "0") (ifseqformula "23") (ifseqformula "33"))
                                          (rule "applyEq" (formula "31") (term "0,1,1,0") (ifseqformula "28"))
                                          (rule "applyEq" (formula "31") (term "0,1,1,1,1,0,0,1") (ifseqformula "28"))
                                          (rule "applyEq" (formula "31") (term "1,1,1,1,0,1") (ifseqformula "28"))
                                          (rule "applyEq" (formula "31") (term "0,0,0,1,0") (ifseqformula "28"))
                                          (rule "applyEq" (formula "31") (term "0,0,0,1,1,1,0,0,1") (ifseqformula "28"))
                                          (rule "applyEq" (formula "31") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "28"))
                                          (rule "pullOutSelect" (formula "20") (term "0,1,1") (inst "selectSK=arr_68"))
                                          (rule "applyEq" (formula "22") (term "0,1,1,1,1,0,0") (ifseqformula "20"))
                                          (rule "applyEq" (formula "22") (term "0,1,1,1,0,1,1,0") (ifseqformula "20"))
                                          (rule "applyEq" (formula "22") (term "1,1,1,1,0") (ifseqformula "20"))
                                          (rule "applyEq" (formula "21") (term "0,0,0,1") (ifseqformula "20"))
                                          (rule "applyEq" (formula "22") (term "0,0,0,1,1,1,0,0") (ifseqformula "20"))
                                          (rule "simplifySelectOfAnonEQ" (formula "20") (ifseqformula "13"))
                                          (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "35")) (ifInst ""  (formula "8")))
                                          (rule "applyEqReverse" (formula "21") (term "0,1,1") (ifseqformula "20"))
                                          (rule "applyEqReverse" (formula "22") (term "0,1,1,1,1,0,0") (ifseqformula "20"))
                                          (rule "applyEqReverse" (formula "22") (term "0,1,1,1,0,1,1,0") (ifseqformula "20"))
                                          (rule "applyEqReverse" (formula "22") (term "1,1,1,1,0") (ifseqformula "20"))
                                          (rule "applyEqReverse" (formula "21") (term "0,0,0,1") (ifseqformula "20"))
                                          (rule "applyEqReverse" (formula "22") (term "0,0,0,1,1,1,0,0") (ifseqformula "20"))
                                          (rule "hideAuxiliaryEq" (formula "20"))
                                          (rule "pullOutSelect" (formula "21") (term "1,1,0,1,0") (inst "selectSK=arr_69"))
                                          (rule "applyEq" (formula "20") (term "0,1,0") (ifseqformula "21"))
                                          (rule "applyEq" (formula "32") (term "1,1,0,1,0,1") (ifseqformula "21"))
                                          (rule "applyEq" (formula "32") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "21"))
                                          (rule "applyEq" (formula "20") (term "0,0,0,0") (ifseqformula "21"))
                                          (rule "applyEq" (formula "22") (term "0,1,1,1,0,0,1,0") (ifseqformula "21"))
                                          (rule "applyEq" (formula "32") (term "0,1,0,0") (ifseqformula "21"))
                                          (rule "applyEq" (formula "32") (term "0,0,0,0,0") (ifseqformula "21"))
                                          (rule "simplifySelectOfAnonEQ" (formula "21") (ifseqformula "13"))
                                          (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "34")) (ifInst ""  (formula "33")))
                                          (rule "applyEqReverse" (formula "22") (term "1,1,0,1,0") (ifseqformula "21"))
                                          (rule "applyEqReverse" (formula "20") (term "0,1,0") (ifseqformula "21"))
                                          (rule "applyEqReverse" (formula "32") (term "1,1,0,1,0,1") (ifseqformula "21"))
                                          (rule "applyEqReverse" (formula "32") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "21"))
                                          (rule "applyEqReverse" (formula "20") (term "0,0,0,0") (ifseqformula "21"))
                                          (rule "applyEqReverse" (formula "22") (term "0,1,1,1,0,0,1,0") (ifseqformula "21"))
                                          (rule "applyEqReverse" (formula "32") (term "0,1,0,0") (ifseqformula "21"))
                                          (rule "applyEqReverse" (formula "32") (term "0,0,0,0,0") (ifseqformula "21"))
                                          (builtin "One Step Simplification" (formula "32"))
                                          (rule "allRight" (formula "32") (inst "sk=iv_2"))
                                          (rule "impRight" (formula "32"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "hideAuxiliaryEq" (formula "23"))
                                          (rule "eqSymm" (formula "33"))
                                          (rule "replace_known_left" (formula "33") (term "0,0,0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "1")))
                                          (rule "inEqSimp_homoInEq0" (formula "2"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0"))
                                          (rule "inEqSimp_homoInEq0" (formula "33") (term "0,1"))
                                          (rule "polySimp_addComm1" (formula "33") (term "0,0,1"))
                                          (rule "inEqSimp_homoInEq0" (formula "33") (term "0,0"))
                                          (rule "polySimp_addComm1" (formula "33") (term "0,0,0"))
                                          (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "22"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "0,1"))
                                          (rule "polySimp_mulComm0" (formula "33") (term "1,0,1"))
                                          (rule "polySimp_rightDist" (formula "33") (term "1,0,1"))
                                          (rule "mul_literals" (formula "33") (term "0,1,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,1"))
                                          (rule "polySimp_elimOne" (formula "33") (term "1,1,0,1"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "33") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "33") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "33") (term "0,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                          (rule "polySimp_rightDist" (formula "2") (term "1"))
                                          (rule "mul_literals" (formula "2") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                          (rule "pullOutSelect" (formula "33") (term "1,0") (inst "selectSK=arr_70"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "16"))
                                          (rule "eqSymm" (formula "34"))
                                          (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
                                          (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "36"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "pullOutSelect" (formula "34") (term "1,0") (inst "selectSK=arr_71"))
                                          (rule "applyEq" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "nnf_imp2or" (formula "34") (term "0"))
                                          (rule "nnf_imp2or" (formula "15") (term "0"))
                                          (rule "nnf_imp2or" (formula "26") (term "0"))
                                          (rule "nnf_imp2or" (formula "33") (term "0"))
                                          (rule "nnf_imp2or" (formula "25") (term "0"))
                                          (rule "nnf_notAnd" (formula "34") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "34") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "34") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "34") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "34") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                                          (rule "mul_literals" (formula "34") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                          (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                          (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "33") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "33") (term "0,0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "33") (term "0,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "33") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0"))
                                          (rule "mul_literals" (formula "33") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                          (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                          (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                          (rule "seqGetAlphaCast" (formula "5") (term "0"))
                                          (rule "castedGetAny" (formula "5") (term "0"))
                                          (builtin "One Step Simplification" (formula "5"))
                                          (rule "true_left" (formula "5"))
                                          (rule "ifthenelse_split" (formula "30") (term "0"))
                                          (branch "result_0.length ≥ 1 TRUE"
                                             (rule "eqSymm" (formula "31"))
                                             (rule "applyEq" (formula "8") (term "0") (ifseqformula "31"))
                                             (rule "applyEq" (formula "19") (term "1") (ifseqformula "30"))
                                             (rule "ifthenelse_split" (formula "19") (term "0"))
                                             (branch "entr_arr.length ≥ 1 TRUE"
                                                (rule "eqSymm" (formula "20"))
                                                (rule "applyEq" (formula "22") (term "0") (ifseqformula "20"))
                                                (rule "applyEq" (formula "33") (term "1,1,1,0,0") (ifseqformula "20"))
                                                (rule "applyEq" (formula "29") (term "0") (ifseqformula "20"))
                                                (rule "applyEq" (formula "33") (term "1,1,0,0") (ifseqformula "20"))
                                                (rule "applyEq" (formula "25") (term "1,1,0,0") (ifseqformula "20"))
                                                (rule "applyEq" (formula "6") (term "0") (ifseqformula "20"))
                                                (rule "applyEq" (formula "29") (term "1") (ifseqformula "20"))
                                                (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "13") (ifseqformula "10"))
                                                (rule "andLeft" (formula "13"))
                                                (rule "notLeft" (formula "14"))
                                                (rule "andLeft" (formula "13"))
                                                (rule "andLeft" (formula "13"))
                                                (rule "notLeft" (formula "15"))
                                                (rule "notLeft" (formula "14"))
                                                (rule "andLeft" (formula "13"))
                                                (rule "notLeft" (formula "14"))
                                                (rule "andLeft" (formula "13"))
                                                (rule "andLeft" (formula "13"))
                                                (rule "andLeft" (formula "13"))
                                                (rule "andLeft" (formula "13"))
                                                (rule "notLeft" (formula "13"))
                                                (rule "notLeft" (formula "13"))
                                                (rule "nonNull" (formula "15") (inst "i=i"))
                                                (rule "greater_literals" (formula "15") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "15"))
                                                (rule "sub_literals" (formula "15") (term "2,1,0,1"))
                                                (builtin "One Step Simplification" (formula "15"))
                                                (rule "andLeft" (formula "15"))
                                                (rule "notLeft" (formula "15"))
                                                (rule "narrowSelectArrayType" (formula "15") (term "0,0,1,0") (ifseqformula "8") (ifseqformula "36"))
                                                (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                                                (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                                                (rule "nonNull" (formula "14") (inst "i=i"))
                                                (rule "greater_literals" (formula "14") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "14"))
                                                (rule "sub_literals" (formula "14") (term "2,1,0,1"))
                                                (builtin "One Step Simplification" (formula "14"))
                                                (rule "andLeft" (formula "14"))
                                                (rule "notLeft" (formula "14"))
                                                (rule "narrowSelectArrayType" (formula "14") (term "0,0,1,0") (ifseqformula "8") (ifseqformula "36"))
                                                (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                                                (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                                                (rule "nonNull" (formula "13") (inst "i=i"))
                                                (rule "sub_literals" (formula "13") (term "2,1,0,1,1"))
                                                (builtin "One Step Simplification" (formula "13"))
                                                (rule "greater_literals" (formula "13") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "13"))
                                                (rule "andLeft" (formula "13"))
                                                (rule "notLeft" (formula "13"))
                                                (rule "narrowSelectArrayType" (formula "13") (term "0,0,1,0") (ifseqformula "8") (ifseqformula "36"))
                                                (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                                                (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                                                (rule "nnf_imp2or" (formula "15") (term "0"))
                                                (rule "nnf_imp2or" (formula "14") (term "0"))
                                                (rule "nnf_imp2or" (formula "13") (term "0"))
                                                (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                                (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "14") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "14") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                                                (rule "mul_literals" (formula "14") (term "1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "13") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                                                (rule "mul_literals" (formula "13") (term "1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
                                                (rule "arrayLengthIsAShort" (formula "24") (term "0"))
                                                (builtin "One Step Simplification" (formula "24"))
                                                (rule "true_left" (formula "24"))
                                                (rule "arrayLengthNotNegative" (formula "24") (term "0"))
                                                (rule "inEqSimp_subsumption1" (formula "24") (ifseqformula "21"))
                                                (rule "leq_literals" (formula "24") (term "0"))
                                                (builtin "One Step Simplification" (formula "24"))
                                                (rule "true_left" (formula "24"))
                                                (rule "commute_or_2" (formula "16") (term "0"))
                                                (rule "commute_or_2" (formula "26") (term "0"))
                                                (rule "commute_or_2" (formula "35") (term "0"))
                                                (rule "commute_or_2" (formula "27") (term "0"))
                                                (rule "commute_or_2" (formula "15") (term "0"))
                                                (rule "ifthenelse_split" (formula "25") (term "0"))
                                                (branch " result_0[intseqGet_0]@anon_heap_copyOf«anonHeapFunction».length ≥ 1 TRUE"
                                                   (rule "eqSymm" (formula "26"))
                                                   (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "26"))
                                                   (rule "applyEq" (formula "4") (term "0") (ifseqformula "26"))
                                                   (rule "replace_known_left" (formula "46") (term "0,0") (ifseqformula "4"))
                                                   (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "4")))
                                                   (rule "commute_or_2" (formula "14") (term "0"))
                                                   (rule "commute_or_2" (formula "13") (term "0"))
                                                   (rule "commute_or" (formula "16") (term "0,0"))
                                                   (rule "commute_or" (formula "27") (term "0,0"))
                                                   (rule "commute_or" (formula "36") (term "0,0"))
                                                   (rule "commute_or" (formula "28") (term "0,0"))
                                                   (rule "commute_or" (formula "15") (term "0,0"))
                                                   (rule "commute_or" (formula "14") (term "0,0"))
                                                   (rule "commute_or" (formula "13") (term "0,0"))
                                                   (rule "ifthenelse_split" (formula "1") (term "0"))
                                                   (branch " ¬ result_0[intseqGet_0]@anon_heap_copyOf«anonHeapFunction» = null ∧ ¬ (result_0[intseqGet_0]@anon_heap_copyOf«anonHeapFunction»).<created> = TRUE TRUE"
                                                      (rule "andLeft" (formula "1"))
                                                      (rule "notLeft" (formula "1"))
                                                      (rule "notLeft" (formula "1"))
                                                      (rule "applyEqReverse" (formula "48") (term "0") (ifseqformula "1"))
                                                      (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                                      (rule "hideAuxiliaryEq" (formula "1"))
                                                      (rule "replace_known_right" (formula "1") (term "0,0,1,0,0") (ifseqformula "36"))
                                                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "37")))
                                                      (rule "ifthenelse_negated" (formula "1") (term "0"))
                                                      (rule "narrowSelectArrayType" (formula "47") (term "0") (ifseqformula "16") (ifseqformula "37"))
                                                      (rule "eqSymm" (formula "47"))
                                                      (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "16") (ifseqformula "37"))
                                                      (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "28") (ifseqformula "37"))
                                                      (rule "ifthenelse_to_or_left" (formula "26") (term "0,0,0"))
                                                      (rule "eqSymm" (formula "26") (term "1,0,0,0,0"))
                                                      (rule "eqSymm" (formula "26") (term "1,1,0,0,0"))
                                                      (builtin "One Step Simplification" (formula "26"))
                                                      (rule "nnf_notAnd" (formula "26") (term "0,0,0,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,0,0,0"))
                                                      (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0,0,0,0"))
                                                      (rule "add_zero_right" (formula "26") (term "0,0,0,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0,0,0"))
                                                      (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,0,0"))
                                                      (rule "nnf_notAnd" (formula "26") (term "0,1,1,0,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "26") (term "0,0,1,1,0,0,0"))
                                                      (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,1,1,0,0,0"))
                                                      (rule "add_zero_right" (formula "26") (term "0,0,0,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,1,1,0,0,0"))
                                                      (rule "mul_literals" (formula "26") (term "1,0,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "26") (term "1,0,1,1,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,1,1,0,0,0"))
                                                      (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,1,1,0,0,0"))
                                                      (rule "add_literals" (formula "26") (term "0,0,0,1,0,1,1,0,0,0"))
                                                      (rule "add_zero_left" (formula "26") (term "0,0,1,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,1,1,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,1,1,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "26") (term "1,1,0,1,1,0,0,0"))
                                                      (rule "commute_or" (formula "26") (term "0,0"))
                                                      (rule "commute_or_2" (formula "26") (term "0"))
                                                      (rule "commute_or_2" (formula "26") (term "0,1,0"))
                                                      (rule "commute_or" (formula "26") (term "1,1,0"))
                                                      (rule "commute_or" (formula "26") (term "0,0,1,0"))
                                                      (rule "commute_or_2" (formula "26") (term "0,1,1,0"))
                                                      (rule "commute_or" (formula "26") (term "0,0,1,1,0"))
                                                      (rule "cnf_rightDist" (formula "26") (term "1,1,0"))
                                                      (rule "commute_or" (formula "26") (term "1,1,1,0"))
                                                      (rule "cnf_rightDist" (formula "26") (term "0"))
                                                      (rule "distr_forallAnd" (formula "26"))
                                                      (rule "andLeft" (formula "26"))
                                                      (rule "commute_or" (formula "27") (term "0"))
                                                      (rule "shift_paren_or" (formula "26") (term "0"))
                                                      (rule "commute_or_2" (formula "26") (term "0,0"))
                                                      (builtin "One Step Simplification" (formula "26"))
                                                      (rule "commute_or_2" (formula "27") (term "0,1,0"))
                                                      (rule "inEqSimp_or_tautInEq1" (formula "27") (term "0,0,1,0"))
                                                      (rule "add_zero_right" (formula "27") (term "1,1,0,0,1,0"))
                                                      (rule "qeq_literals" (formula "27") (term "1,0,0,1,0"))
                                                      (builtin "One Step Simplification" (formula "27"))
                                                      (rule "commute_or_2" (formula "27") (term "0"))
                                                      (rule "shift_paren_or" (formula "26") (term "0,0"))
                                                      (rule "shift_paren_or" (formula "27") (term "0,0"))
                                                      (rule "inEqSimp_or_tautInEq1" (formula "27") (term "0"))
                                                      (rule "inEqSimp_homoInEq1" (formula "27") (term "1,0"))
                                                      (rule "polySimp_pullOutFactor1" (formula "27") (term "0,1,0"))
                                                      (rule "add_literals" (formula "27") (term "1,0,1,0"))
                                                      (rule "times_zero_1" (formula "27") (term "0,1,0"))
                                                      (rule "leq_literals" (formula "27") (term "1,0"))
                                                      (builtin "One Step Simplification" (formula "27"))
                                                      (rule "true_left" (formula "27"))
                                                      (rule "commute_or" (formula "26") (term "0,0,0"))
                                                      (builtin "One Step Simplification" (formula "26"))
                                                      (rule "lenNonNegative" (formula "31") (term "0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "31"))
                                                      (rule "applyEq" (formula "31") (term "0") (ifseqformula "32"))
                                                      (rule "inEqSimp_subsumption1" (formula "31") (ifseqformula "20"))
                                                      (rule "leq_literals" (formula "31") (term "0"))
                                                      (builtin "One Step Simplification" (formula "31"))
                                                      (rule "true_left" (formula "31"))
                                                      (rule "arrayLengthNotNegative" (formula "21") (term "0"))
                                                      (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                                      (rule "inEqSimp_subsumption1" (formula "21") (ifseqformula "20"))
                                                      (rule "leq_literals" (formula "21") (term "0"))
                                                      (builtin "One Step Simplification" (formula "21"))
                                                      (rule "true_left" (formula "21"))
                                                      (rule "arrayLengthIsAShort" (formula "21") (term "0"))
                                                      (builtin "One Step Simplification" (formula "21"))
                                                      (rule "true_left" (formula "21"))
                                                      (rule "ifthenelse_to_or_left" (formula "26") (term "0,0,0"))
                                                      (rule "eqSymm" (formula "26") (term "1,0,0,0,0"))
                                                      (rule "eqSymm" (formula "26") (term "1,1,0,0,0"))
                                                      (rule "nnf_notAnd" (formula "26") (term "0,0,0,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0,0,0"))
                                                      (rule "add_zero_right" (formula "26") (term "0,0,0,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0,0,0"))
                                                      (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,0,0"))
                                                      (rule "commute_or" (formula "26") (term "0,0"))
                                                      (rule "commute_or_2" (formula "26") (term "0"))
                                                      (rule "commute_or" (formula "26") (term "1,1,0"))
                                                      (rule "commute_or_2" (formula "26") (term "0,1,0"))
                                                      (rule "commute_or" (formula "26") (term "0,0,1,0"))
                                                      (rule "cnf_rightDist" (formula "26") (term "1,1,0"))
                                                      (rule "cnf_rightDist" (formula "26") (term "0"))
                                                      (rule "distr_forallAnd" (formula "26"))
                                                      (rule "andLeft" (formula "26"))
                                                      (rule "commute_or" (formula "27") (term "0"))
                                                      (rule "commute_or_2" (formula "26") (term "0"))
                                                      (rule "commute_or" (formula "27") (term "1,1,0"))
                                                      (rule "shift_paren_or" (formula "26") (term "0,0"))
                                                      (rule "cnf_rightDist" (formula "27") (term "0"))
                                                      (rule "distr_forallAnd" (formula "27"))
                                                      (rule "andLeft" (formula "27"))
                                                      (rule "commute_or_2" (formula "27") (term "0"))
                                                      (rule "shift_paren_or" (formula "28") (term "0"))
                                                      (rule "commute_or_2" (formula "28") (term "0,0"))
                                                      (rule "shift_paren_or" (formula "27") (term "0,0"))
                                                      (rule "commute_or" (formula "27") (term "0,0,0"))
                                                      (rule "inEqSimp_or_tautInEq1" (formula "27") (term "0,0"))
                                                      (rule "add_zero_right" (formula "27") (term "1,1,0,0"))
                                                      (rule "qeq_literals" (formula "27") (term "1,0,0"))
                                                      (builtin "One Step Simplification" (formula "27"))
                                                      (rule "true_left" (formula "27"))
                                                      (rule "shift_paren_or" (formula "26") (term "0,0,0"))
                                                      (rule "commute_or" (formula "26") (term "0,0,0,0"))
                                                      (builtin "One Step Simplification" (formula "26"))
                                                      (rule "ifthenelse_split" (formula "25") (term "0"))
                                                      (branch "entr_arr[intseqGet_0].length ≥ 1 TRUE"
                                                         (rule "eqSymm" (formula "26"))
                                                         (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "26"))
                                                         (builtin "One Step Simplification" (formula "27"))
                                                         (rule "applyEq" (formula "28") (term "1,1,0") (ifseqformula "26"))
                                                         (rule "applyEq" (formula "24") (term "0") (ifseqformula "26"))
                                                         (rule "applyEq" (formula "3") (term "0") (ifseqformula "25"))
                                                         (rule "inEqSimp_or_tautInEq1" (formula "27") (term "0"))
                                                         (rule "inEqSimp_homoInEq1" (formula "27") (term "1,0"))
                                                         (rule "polySimp_pullOutFactor1" (formula "27") (term "0,1,0"))
                                                         (rule "add_literals" (formula "27") (term "1,0,1,0"))
                                                         (rule "times_zero_1" (formula "27") (term "0,1,0"))
                                                         (rule "leq_literals" (formula "27") (term "1,0"))
                                                         (builtin "One Step Simplification" (formula "27"))
                                                         (rule "true_left" (formula "27"))
                                                         (rule "ifthenelse_split" (formula "1") (term "0"))
                                                         (branch " result_0[intseqGet_0].<created>@anon_heap_copyOf«anonHeapFunction» = TRUE TRUE"
                                                            (rule "applyEqReverse" (formula "48") (term "0") (ifseqformula "2"))
                                                            (builtin "One Step Simplification" (formula "48"))
                                                            (rule "closeTrue" (formula "48"))
                                                         )
                                                         (branch " result_0[intseqGet_0].<created>@anon_heap_copyOf«anonHeapFunction» = TRUE FALSE"
                                                            (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "38"))
                                                            (rule "close" (formula "36") (ifseqformula "16"))
                                                         )
                                                      )
                                                      (branch "entr_arr[intseqGet_0].length ≥ 1 FALSE"
                                                         (rule "eqSymm" (formula "25"))
                                                         (rule "inEqSimp_geqRight" (formula "37"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "applyEq" (formula "25") (term "0") (ifseqformula "26"))
                                                         (rule "qeq_literals" (formula "25"))
                                                         (rule "closeFalse" (formula "25"))
                                                      )
                                                   )
                                                   (branch " ¬ result_0[intseqGet_0]@anon_heap_copyOf«anonHeapFunction» = null ∧ ¬ (result_0[intseqGet_0]@anon_heap_copyOf«anonHeapFunction»).<created> = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "1"))
                                                      (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                                      (rule "hideAuxiliaryEq" (formula "1"))
                                                      (rule "ifthenelse_to_or_left" (formula "26") (term "0,0,0"))
                                                      (rule "eqSymm" (formula "26") (term "1,1,0,0,0"))
                                                      (builtin "One Step Simplification" (formula "26"))
                                                      (rule "eqSymm" (formula "26") (term "1,0,0,0,0"))
                                                      (rule "nnf_notAnd" (formula "26") (term "0,0,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0,0,0"))
                                                      (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,0,0,0"))
                                                      (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "26") (term "0,0,0,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0"))
                                                      (rule "nnf_notAnd" (formula "26") (term "0,1,1,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "26") (term "1,0,1,1,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,1,1,0,0,0"))
                                                      (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,1,1,0,0,0"))
                                                      (rule "add_literals" (formula "26") (term "0,0,0,1,0,1,1,0,0,0"))
                                                      (rule "add_zero_left" (formula "26") (term "0,0,1,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,1,1,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,1,1,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "26") (term "1,1,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "26") (term "0,0,1,1,0,0,0"))
                                                      (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,1,1,0,0,0"))
                                                      (rule "add_zero_right" (formula "26") (term "0,0,0,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,1,1,0,0,0"))
                                                      (rule "mul_literals" (formula "26") (term "1,0,0,1,1,0,0,0"))
                                                      (rule "commute_or" (formula "26") (term "0,0"))
                                                      (rule "commute_or_2" (formula "26") (term "0"))
                                                      (rule "commute_or" (formula "26") (term "1,1,0"))
                                                      (rule "commute_or_2" (formula "26") (term "0,1,0"))
                                                      (rule "commute_or_2" (formula "26") (term "0,1,1,0"))
                                                      (rule "commute_or" (formula "26") (term "0,0,1,0"))
                                                      (rule "commute_or" (formula "26") (term "0,0,1,1,0"))
                                                      (rule "cnf_rightDist" (formula "26") (term "1,1,0"))
                                                      (rule "commute_or" (formula "26") (term "1,1,1,0"))
                                                      (rule "cnf_rightDist" (formula "26") (term "0"))
                                                      (rule "distr_forallAnd" (formula "26"))
                                                      (rule "andLeft" (formula "26"))
                                                      (rule "commute_or" (formula "27") (term "0"))
                                                      (rule "shift_paren_or" (formula "26") (term "0"))
                                                      (rule "commute_or_2" (formula "26") (term "0,0"))
                                                      (builtin "One Step Simplification" (formula "26"))
                                                      (rule "commute_or_2" (formula "27") (term "0,1,0"))
                                                      (rule "inEqSimp_or_tautInEq1" (formula "27") (term "0,0,1,0"))
                                                      (rule "add_zero_right" (formula "27") (term "1,1,0,0,1,0"))
                                                      (rule "qeq_literals" (formula "27") (term "1,0,0,1,0"))
                                                      (builtin "One Step Simplification" (formula "27"))
                                                      (rule "commute_or_2" (formula "27") (term "0"))
                                                      (rule "shift_paren_or" (formula "26") (term "0,0"))
                                                      (rule "shift_paren_or" (formula "27") (term "0,0"))
                                                      (rule "inEqSimp_or_tautInEq1" (formula "27") (term "0"))
                                                      (rule "inEqSimp_homoInEq1" (formula "27") (term "1,0"))
                                                      (rule "polySimp_pullOutFactor1" (formula "27") (term "0,1,0"))
                                                      (rule "add_literals" (formula "27") (term "1,0,1,0"))
                                                      (rule "times_zero_1" (formula "27") (term "0,1,0"))
                                                      (rule "leq_literals" (formula "27") (term "1,0"))
                                                      (builtin "One Step Simplification" (formula "27"))
                                                      (rule "true_left" (formula "27"))
                                                      (rule "commute_or" (formula "26") (term "0,0,0"))
                                                      (builtin "One Step Simplification" (formula "26"))
                                                      (rule "lenNonNegative" (formula "31") (term "0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "31"))
                                                      (rule "applyEq" (formula "31") (term "0") (ifseqformula "32"))
                                                      (rule "inEqSimp_subsumption1" (formula "31") (ifseqformula "20"))
                                                      (rule "leq_literals" (formula "31") (term "0"))
                                                      (builtin "One Step Simplification" (formula "31"))
                                                      (rule "true_left" (formula "31"))
                                                      (rule "arrayLengthNotNegative" (formula "21") (term "0"))
                                                      (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                                      (rule "inEqSimp_subsumption1" (formula "21") (ifseqformula "20"))
                                                      (rule "leq_literals" (formula "21") (term "0"))
                                                      (builtin "One Step Simplification" (formula "21"))
                                                      (rule "true_left" (formula "21"))
                                                      (rule "arrayLengthIsAShort" (formula "21") (term "0"))
                                                      (builtin "One Step Simplification" (formula "21"))
                                                      (rule "true_left" (formula "21"))
                                                      (rule "ifthenelse_to_or_left" (formula "26") (term "0,0,0"))
                                                      (rule "eqSymm" (formula "26") (term "1,0,0,0,0"))
                                                      (rule "eqSymm" (formula "26") (term "1,1,0,0,0"))
                                                      (rule "nnf_notAnd" (formula "26") (term "0,0,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0,0,0"))
                                                      (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,0,0,0"))
                                                      (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "26") (term "0,0,0,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0"))
                                                      (rule "commute_or" (formula "26") (term "0,0"))
                                                      (rule "commute_or_2" (formula "26") (term "0"))
                                                      (rule "commute_or" (formula "26") (term "1,1,0"))
                                                      (rule "commute_or_2" (formula "26") (term "0,1,0"))
                                                      (rule "commute_or" (formula "26") (term "0,0,1,0"))
                                                      (rule "cnf_rightDist" (formula "26") (term "1,1,0"))
                                                      (rule "cnf_rightDist" (formula "26") (term "0"))
                                                      (rule "distr_forallAnd" (formula "26"))
                                                      (rule "andLeft" (formula "26"))
                                                      (rule "commute_or_2" (formula "26") (term "0"))
                                                      (rule "commute_or" (formula "27") (term "0"))
                                                      (rule "shift_paren_or" (formula "26") (term "0,0"))
                                                      (rule "commute_or" (formula "27") (term "1,1,0"))
                                                      (rule "cnf_rightDist" (formula "27") (term "0"))
                                                      (rule "distr_forallAnd" (formula "27"))
                                                      (rule "andLeft" (formula "27"))
                                                      (rule "commute_or_2" (formula "27") (term "0"))
                                                      (rule "shift_paren_or" (formula "28") (term "0"))
                                                      (rule "commute_or_2" (formula "28") (term "0,0"))
                                                      (rule "shift_paren_or" (formula "27") (term "0,0"))
                                                      (rule "commute_or" (formula "27") (term "0,0,0"))
                                                      (rule "inEqSimp_or_tautInEq1" (formula "27") (term "0,0"))
                                                      (rule "add_literals" (formula "27") (term "1,1,0,0"))
                                                      (rule "qeq_literals" (formula "27") (term "1,0,0"))
                                                      (builtin "One Step Simplification" (formula "27"))
                                                      (rule "true_left" (formula "27"))
                                                      (rule "shift_paren_or" (formula "26") (term "0,0,0"))
                                                      (rule "commute_or" (formula "26") (term "0,0,0,0"))
                                                      (builtin "One Step Simplification" (formula "26"))
                                                      (rule "ifthenelse_split" (formula "25") (term "0"))
                                                      (branch "entr_arr[intseqGet_0].length ≥ 1 TRUE"
                                                         (rule "eqSymm" (formula "26"))
                                                         (rule "applyEq" (formula "24") (term "0") (ifseqformula "26"))
                                                         (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "25"))
                                                         (rule "applyEq" (formula "26") (term "1,1,0") (ifseqformula "25"))
                                                         (builtin "One Step Simplification" (formula "26"))
                                                         (rule "applyEq" (formula "3") (term "0") (ifseqformula "25"))
                                                         (rule "inEqSimp_or_tautInEq1" (formula "27") (term "0"))
                                                         (rule "inEqSimp_homoInEq1" (formula "27") (term "1,0"))
                                                         (rule "polySimp_pullOutFactor1" (formula "27") (term "0,1,0"))
                                                         (rule "add_literals" (formula "27") (term "1,0,1,0"))
                                                         (rule "times_zero_1" (formula "27") (term "0,1,0"))
                                                         (rule "leq_literals" (formula "27") (term "1,0"))
                                                         (builtin "One Step Simplification" (formula "27"))
                                                         (rule "true_left" (formula "27"))
                                                         (rule "ifthenelse_split" (formula "1") (term "0"))
                                                         (branch " ¬ result_0[intseqGet_0]@anon_heap_copyOf«anonHeapFunction» = null ∧ ¬( (result_0[intseqGet_0]@anon_heap_copyOf«anonHeapFunction»).<created> = TRUE ∨ result_0[intseqGet_0].<created>@anon_heap_copyOf«anonHeapFunction» = TRUE) TRUE"
                                                            (rule "andLeft" (formula "1"))
                                                            (rule "notLeft" (formula "2"))
                                                            (rule "notLeft" (formula "1"))
                                                            (rule "orRight" (formula "37"))
                                                            (rule "referencedObjectIsCreatedRight" (formula "38") (ifseqformula "36"))
                                                            (rule "close" (formula "38") (ifseqformula "16"))
                                                         )
                                                         (branch " ¬ result_0[intseqGet_0]@anon_heap_copyOf«anonHeapFunction» = null ∧ ¬( (result_0[intseqGet_0]@anon_heap_copyOf«anonHeapFunction»).<created> = TRUE ∨ result_0[intseqGet_0].<created>@anon_heap_copyOf«anonHeapFunction» = TRUE) FALSE"
                                                            (rule "close" (formula "47") (ifseqformula "1"))
                                                         )
                                                      )
                                                      (branch "entr_arr[intseqGet_0].length ≥ 1 FALSE"
                                                         (rule "eqSymm" (formula "25"))
                                                         (rule "inEqSimp_geqRight" (formula "37"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "applyEq" (formula "25") (term "0") (ifseqformula "26"))
                                                         (rule "qeq_literals" (formula "25"))
                                                         (rule "closeFalse" (formula "25"))
                                                      )
                                                   )
                                                )
                                                (branch " result_0[intseqGet_0]@anon_heap_copyOf«anonHeapFunction».length ≥ 1 FALSE"
                                                   (rule "eqSymm" (formula "25"))
                                                   (builtin "One Step Simplification" (formula "25"))
                                                   (rule "inEqSimp_geqRight" (formula "36"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "inEqSimp_notGeq" (formula "26") (term "0"))
                                                   (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                                   (rule "add_literals" (formula "26") (term "0,0,0"))
                                                   (rule "add_zero_left" (formula "26") (term "0,0"))
                                                   (rule "commute_or_2" (formula "15") (term "0"))
                                                   (rule "commute_or_2" (formula "14") (term "0"))
                                                   (rule "ifthenelse_split" (formula "5") (term "0"))
                                                   (branch "entr_arr[intseqGet_0].length ≥ 1 TRUE"
                                                      (rule "replace_known_left" (formula "28") (term "0,1,1,0") (ifseqformula "5"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "inEqSimp_contradEq7" (formula "27") (term "1") (ifseqformula "5"))
                                                      (rule "times_zero_1" (formula "27") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "27") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "27") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "27"))
                                                      (rule "inEqSimp_contradInEq1" (formula "27") (ifseqformula "5"))
                                                      (rule "qeq_literals" (formula "27") (term "0"))
                                                      (builtin "One Step Simplification" (formula "27"))
                                                      (rule "closeFalse" (formula "27"))
                                                   )
                                                   (branch "entr_arr[intseqGet_0].length ≥ 1 FALSE"
                                                      (rule "replace_known_right" (formula "27") (term "0,1,1,0") (ifseqformula "37"))
                                                      (builtin "One Step Simplification" (formula "27"))
                                                      (rule "inEqSimp_geqRight" (formula "37"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "replace_known_left" (formula "27") (term "0") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "27"))
                                                      (rule "true_left" (formula "27"))
                                                      (rule "inEqSimp_homoInEq1" (formula "6"))
                                                      (rule "times_zero_2" (formula "6") (term "1,0"))
                                                      (rule "add_zero_right" (formula "6") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                                                      (rule "mul_literals" (formula "6") (term "1"))
                                                      (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "6"))
                                                      (rule "qeq_literals" (formula "5") (term "0"))
                                                      (builtin "One Step Simplification" (formula "5"))
                                                      (rule "closeFalse" (formula "5"))
                                                   )
                                                )
                                             )
                                             (branch "entr_arr.length ≥ 1 FALSE"
                                                (rule "eqSymm" (formula "19"))
                                                (rule "inEqSimp_geqRight" (formula "35"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "applyEq" (formula "34") (term "1,1,1,0,0") (ifseqformula "20"))
                                                (rule "add_literals" (formula "34") (term "1,1,0,0"))
                                                (rule "applyEq" (formula "35") (term "1,1,0,0") (ifseqformula "20"))
                                                (rule "applyEq" (formula "30") (term "0") (ifseqformula "20"))
                                                (rule "qeq_literals" (formula "30"))
                                                (rule "closeFalse" (formula "30"))
                                             )
                                          )
                                          (branch "result_0.length ≥ 1 FALSE"
                                             (rule "eqSymm" (formula "30"))
                                             (rule "inEqSimp_geqRight" (formula "35"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "applyEq" (formula "9") (term "0") (ifseqformula "31"))
                                             (rule "inEqSimp_homoInEq1" (formula "9"))
                                             (rule "times_zero_2" (formula "9") (term "1,0"))
                                             (rule "add_zero_right" (formula "9") (term "0"))
                                             (rule "applyEq" (formula "21") (term "1") (ifseqformula "31"))
                                             (builtin "One Step Simplification" (formula "21"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "9"))
                                             (rule "mul_literals" (formula "9") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "9") (ifseqformula "8"))
                                             (rule "qeq_literals" (formula "9") (term "0"))
                                             (builtin "One Step Simplification" (formula "9"))
                                             (rule "closeFalse" (formula "9"))
                                          )
                                       )
                                    )
                                    (branch "0 ≤ intseqGet_0 ∧ intseqGet_0 < entr_arr.length - 0 FALSE"
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "1") (ifseqformula "13"))
                                       (rule "translateJavaSubInt" (formula "26") (term "1,1,0,0"))
                                       (rule "translateJavaAddInt" (formula "26") (term "0,2,2,0,1,0"))
                                       (rule "castDel" (formula "18") (term "0"))
                                       (rule "castDel" (formula "18") (term "1"))
                                       (rule "sub_literals" (formula "19") (term "2,1,0"))
                                       (builtin "One Step Simplification" (formula "19"))
                                       (rule "sub_literals" (formula "11") (term "2,1,0"))
                                       (builtin "One Step Simplification" (formula "11"))
                                       (rule "add_zero_right" (formula "18") (term "0,2,1,0"))
                                       (rule "andLeft" (formula "24"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "andLeft" (formula "5"))
                                       (rule "andLeft" (formula "4"))
                                       (rule "eqSymm" (formula "21"))
                                       (rule "eqSymm" (formula "27"))
                                       (rule "replace_known_left" (formula "32") (term "0") (ifseqformula "19"))
                                       (builtin "One Step Simplification" (formula "32"))
                                       (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "35"))
                                       (builtin "One Step Simplification" (formula "10"))
                                       (rule "replace_known_right" (formula "17") (term "0,1") (ifseqformula "33"))
                                       (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "34")))
                                       (rule "polySimp_elimSub" (formula "18") (term "1,0"))
                                       (rule "times_zero_2" (formula "18") (term "1,1,0"))
                                       (rule "add_zero_right" (formula "18") (term "1,0"))
                                       (rule "polySimp_elimSub" (formula "18") (term "1,1"))
                                       (rule "mul_literals" (formula "18") (term "1,1,1"))
                                       (rule "add_zero_right" (formula "18") (term "1,1"))
                                       (rule "polySimp_elimSub" (formula "30") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "30") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimSub" (formula "20") (term "1"))
                                       (rule "times_zero_2" (formula "20") (term "1,1"))
                                       (rule "add_zero_right" (formula "20") (term "1"))
                                       (rule "polySimp_elimSub" (formula "3") (term "1"))
                                       (rule "times_zero_2" (formula "3") (term "1,1"))
                                       (rule "add_zero_right" (formula "3") (term "1"))
                                       (rule "polySimp_elimSub" (formula "4") (term "1"))
                                       (rule "times_zero_2" (formula "4") (term "1,1"))
                                       (rule "add_zero_right" (formula "4") (term "1"))
                                       (rule "polySimp_elimSub" (formula "32") (term "1"))
                                       (rule "times_zero_2" (formula "32") (term "1,1"))
                                       (rule "add_zero_right" (formula "32") (term "1"))
                                       (rule "polySimp_addComm0" (formula "30") (term "0,2,2,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "30") (term "1,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "18") (term "0,1"))
                                       (rule "add_zero_right" (formula "18") (term "0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0"))
                                       (rule "add_zero_right" (formula "18") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "6"))
                                       (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "6") (term "0"))
                                       (rule "narrowSelectArrayType" (formula "13") (term "0,0,1,0") (ifseqformula "7") (ifseqformula "35"))
                                       (rule "inEqSimp_ltRight" (formula "32"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "1") (term "0"))
                                       (rule "inEqSimp_ltToLeq" (formula "21"))
                                       (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "21") (term "0"))
                                       (rule "inEqSimp_ltToLeq" (formula "4"))
                                       (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "5"))
                                       (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "5") (term "0"))
                                       (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "20"))
                                       (rule "inEqSimp_commuteLeq" (formula "3"))
                                       (rule "inEqSimp_commuteLeq" (formula "6"))
                                       (rule "applyEqRigid" (formula "4") (term "1,0") (ifseqformula "2"))
                                       (rule "polySimp_addComm1" (formula "4") (term "0"))
                                       (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
                                       (rule "applyEq" (formula "26") (term "0") (ifseqformula "27"))
                                       (rule "eqSymm" (formula "26"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "31") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "18") (term "0,0,1"))
                                       (rule "polySimp_elimOne" (formula "18") (term "0,0,1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0"))
                                       (rule "polySimp_elimOne" (formula "18") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                                       (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                       (rule "polySimp_elimOne" (formula "6") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "20"))
                                       (rule "polySimp_mulLiterals" (formula "20") (term "0"))
                                       (rule "polySimp_elimOne" (formula "20") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                                       (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                       (rule "polySimp_elimOne" (formula "4") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "30") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                       (rule "polySimp_elimOne" (formula "3") (term "0"))
                                       (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "3"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "inEqSimp_homoInEq1" (formula "1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                       (rule "add_literals" (formula "1") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "1") (term "1,0"))
                                       (rule "add_zero_right" (formula "1") (term "0"))
                                       (rule "leq_literals" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                 )
                                 (branch "0 ≤ intseqGet_0 ∧ intseqGet_0 < result_0.length - 0 FALSE"
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "1") (ifseqformula "13"))
                                    (rule "translateJavaSubInt" (formula "25") (term "1,1,0,0"))
                                    (rule "translateJavaAddInt" (formula "25") (term "0,2,2,0,1,0"))
                                    (rule "castDel" (formula "17") (term "0"))
                                    (rule "castDel" (formula "17") (term "1,1"))
                                    (rule "castDel" (formula "17") (term "2,1"))
                                    (rule "sub_literals" (formula "18") (term "2,1,0"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "sub_literals" (formula "11") (term "2,1,0"))
                                    (builtin "One Step Simplification" (formula "11"))
                                    (rule "add_zero_right" (formula "17") (term "0,2,1,1,1"))
                                    (rule "andLeft" (formula "23"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "andLeft" (formula "4"))
                                    (rule "andLeft" (formula "6"))
                                    (rule "eqSymm" (formula "19"))
                                    (builtin "One Step Simplification" (formula "19"))
                                    (rule "eqSymm" (formula "25"))
                                    (rule "eqSymm" (formula "19") (term "1"))
                                    (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "33"))
                                    (builtin "One Step Simplification" (formula "10"))
                                    (rule "replace_known_right" (formula "17") (term "0,1") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "32")))
                                    (rule "polySimp_elimSub" (formula "30") (term "1,1"))
                                    (rule "times_zero_2" (formula "30") (term "1,1,1"))
                                    (rule "add_zero_right" (formula "30") (term "1,1"))
                                    (rule "polySimp_elimSub" (formula "18") (term "1,0"))
                                    (rule "times_zero_2" (formula "18") (term "1,1,0"))
                                    (rule "add_zero_right" (formula "18") (term "1,0"))
                                    (rule "polySimp_elimSub" (formula "18") (term "1,1"))
                                    (rule "mul_literals" (formula "18") (term "1,1,1"))
                                    (rule "add_zero_right" (formula "18") (term "1,1"))
                                    (rule "polySimp_elimSub" (formula "28") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "28") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimSub" (formula "3") (term "1"))
                                    (rule "times_zero_2" (formula "3") (term "1,1"))
                                    (rule "add_zero_right" (formula "3") (term "1"))
                                    (rule "polySimp_elimSub" (formula "5") (term "1"))
                                    (rule "times_zero_2" (formula "5") (term "1,1"))
                                    (rule "add_zero_right" (formula "5") (term "1"))
                                    (rule "polySimp_elimSub" (formula "19") (term "1,1,0,0"))
                                    (rule "times_zero_2" (formula "19") (term "1,1,1,0,0"))
                                    (rule "add_zero_right" (formula "19") (term "1,1,0,0"))
                                    (rule "polySimp_addComm0" (formula "28") (term "0,2,2,0,1,0"))
                                    (rule "polySimp_addComm0" (formula "28") (term "1,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0"))
                                    (rule "add_zero_right" (formula "18") (term "0,0,0"))
                                    (rule "eqSymm" (formula "18"))
                                    (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "6"))
                                    (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "6") (term "0"))
                                    (rule "narrowSelectArrayType" (formula "13") (term "0,0,1,0") (ifseqformula "7") (ifseqformula "33"))
                                    (rule "inEqSimp_ltToLeq" (formula "30") (term "1"))
                                    (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1"))
                                    (rule "polySimp_addComm1" (formula "30") (term "0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "3"))
                                    (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "30") (term "0"))
                                    (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "5"))
                                    (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "5") (term "0"))
                                    (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "19") (term "0,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0"))
                                    (rule "add_zero_right" (formula "18") (term "0,0,0"))
                                    (rule "eqSymm" (formula "18"))
                                    (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "2"))
                                    (rule "inEqSimp_commuteLeq" (formula "4"))
                                    (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                                    (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "1"))
                                    (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "2"))
                                    (builtin "One Step Simplification" (formula "30"))
                                    (rule "replace_known_left" (formula "19") (term "0,0,0") (ifseqformula "2"))
                                    (builtin "One Step Simplification" (formula "19"))
                                    (rule "inEqSimp_leqRight" (formula "30"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0,0"))
                                    (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "2"))
                                    (rule "polySimp_addComm1" (formula "4") (term "0"))
                                    (rule "replace_known_left" (formula "20") (term "0,0") (ifseqformula "4"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "applyEq" (formula "26") (term "0") (ifseqformula "25"))
                                    (rule "applyEq" (formula "25") (term "1") (ifseqformula "26"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "30") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                                    (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                                    (rule "polySimp_elimOne" (formula "7") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                                    (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                    (rule "polySimp_elimOne" (formula "6") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "29") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "19") (term "0,0,0"))
                                    (rule "eqSymm" (formula "19"))
                                    (rule "polySimp_elimOne" (formula "19") (term "0,0,1"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                                    (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                    (rule "polySimp_elimOne" (formula "4") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "19") (term "0,0,0"))
                                    (rule "eqSymm" (formula "19"))
                                    (rule "polySimp_elimOne" (formula "19") (term "0,0,1"))
                                    (rule "array2seqDef" (formula "35") (term "0") (inst "u=u"))
                                    (rule "array2seqDef" (formula "28") (term "0,1") (inst "u=u"))
                                    (rule "eqSymm" (formula "28"))
                                    (rule "getOfSeqDef" (formula "28") (term "0"))
                                    (rule "castDel" (formula "28") (term "2,0"))
                                    (rule "castDel" (formula "28") (term "1,0"))
                                    (rule "add_zero_right" (formula "28") (term "0,2,1,0"))
                                    (rule "polySimp_elimSub" (formula "28") (term "1,1,0,0"))
                                    (rule "times_zero_2" (formula "28") (term "1,1,1,0,0"))
                                    (rule "add_zero_right" (formula "28") (term "1,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "28") (term "0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0"))
                                    (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "28"))
                                    (rule "applyEq" (formula "28") (term "2,0") (ifseqformula "20"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "28") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "28") (term "0,0,0"))
                                    (rule "polySimp_elimOne" (formula "28") (term "0,0,0"))
                                    (rule "inEqSimp_contradInEq0" (formula "28") (term "0,0") (ifseqformula "1"))
                                    (rule "inEqSimp_homoInEq1" (formula "28") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "28") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "28") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "28") (term "0,0,0,0"))
                                    (rule "leq_literals" (formula "28") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "28"))
                                    (rule "eqSymm" (formula "28"))
                                    (rule "array2seqDef" (formula "25") (term "0,0") (inst "u=u"))
                                    (rule "lenOfSeqDef" (formula "25") (term "0"))
                                    (rule "polySimp_elimSub" (formula "25") (term "1,0"))
                                    (rule "mul_literals" (formula "25") (term "1,1,0"))
                                    (rule "add_zero_right" (formula "25") (term "1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0"))
                                    (rule "add_zero_right" (formula "25") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0"))
                                    (rule "polySimp_elimOne" (formula "25") (term "0,0,0"))
                                    (rule "applyEq" (formula "25") (term "0") (ifseqformula "19"))
                                    (rule "applyEq" (formula "19") (term "1") (ifseqformula "25"))
                                    (rule "array2seqDef" (formula "35") (term "1") (inst "u=u"))
                                    (rule "array2seqDef" (formula "20") (term "1") (inst "u=u"))
                                    (rule "eqSymm" (formula "20"))
                                    (rule "array2seqDef" (formula "26") (term "0,0") (inst "u=u"))
                                    (rule "lenOfSeqDef" (formula "26") (term "0"))
                                    (rule "polySimp_elimSub" (formula "26") (term "1,0"))
                                    (rule "mul_literals" (formula "26") (term "1,1,0"))
                                    (rule "add_zero_right" (formula "26") (term "1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "26") (term "0,0"))
                                    (rule "add_zero_right" (formula "26") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "26") (term "0,0,0"))
                                    (rule "polySimp_elimOne" (formula "26") (term "0,0,0"))
                                    (rule "array2seqDef" (formula "27") (term "1") (inst "u=u"))
                                    (rule "eqSymm" (formula "27"))
                                    (rule "eqSeqDef" (formula "34") (inst "iv=iv"))
                                    (rule "getOfSeqDef" (formula "34") (term "1,1,0,1"))
                                    (rule "castDel" (formula "34") (term "2,1,1,0,1"))
                                    (rule "castDel" (formula "34") (term "1,1,1,0,1"))
                                    (rule "add_zero_right" (formula "34") (term "0,2,1,1,1,0,1"))
                                    (rule "polySimp_elimSub" (formula "34") (term "1,1,0,1,1,0,1"))
                                    (rule "times_zero_2" (formula "34") (term "1,1,1,0,1,1,0,1"))
                                    (rule "add_zero_right" (formula "34") (term "1,1,0,1,1,0,1"))
                                    (rule "lenOfSeqDef" (formula "34") (term "1,0"))
                                    (rule "polySimp_elimSub" (formula "34") (term "1,1,0"))
                                    (rule "times_zero_2" (formula "34") (term "1,1,1,0"))
                                    (rule "add_zero_right" (formula "34") (term "1,1,0"))
                                    (rule "getOfSeqDef" (formula "34") (term "0,1,0,1"))
                                    (rule "castDel" (formula "34") (term "2,0,1,0,1"))
                                    (rule "castDel" (formula "34") (term "1,0,1,0,1"))
                                    (rule "add_zero_right" (formula "34") (term "0,2,1,0,1,0,1"))
                                    (rule "polySimp_elimSub" (formula "34") (term "1,1,0,0,1,0,1"))
                                    (rule "mul_literals" (formula "34") (term "1,1,1,0,0,1,0,1"))
                                    (rule "add_zero_right" (formula "34") (term "1,1,0,0,1,0,1"))
                                    (rule "lenOfSeqDef" (formula "34") (term "1,1,0,0,1"))
                                    (rule "polySimp_elimSub" (formula "34") (term "1,1,1,0,0,1"))
                                    (rule "mul_literals" (formula "34") (term "1,1,1,1,0,0,1"))
                                    (rule "add_zero_right" (formula "34") (term "1,1,1,0,0,1"))
                                    (rule "lenOfSeqDef" (formula "34") (term "0,0"))
                                    (rule "polySimp_elimSub" (formula "34") (term "1,0,0"))
                                    (rule "mul_literals" (formula "34") (term "1,1,0,0"))
                                    (rule "add_zero_right" (formula "34") (term "1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,1,1,0,1"))
                                    (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,1,1,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "34") (term "0,1,0"))
                                    (rule "add_zero_right" (formula "34") (term "0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0,1,0,1"))
                                    (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0,1,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "34") (term "0,1,1,0,0,1"))
                                    (rule "add_zero_right" (formula "34") (term "0,0,1,1,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,1,0,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "34") (term "0,0,0"))
                                    (rule "add_zero_right" (formula "34") (term "0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,1,1,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,1,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,1,1,0,1"))
                                    (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,1,1,0,1"))
                                    (rule "polySimp_rightDist" (formula "34") (term "1,1,0,1,1,0,1"))
                                    (rule "mul_literals" (formula "34") (term "0,1,1,0,1,1,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,1,1,0,1"))
                                    (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,1,1,0,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "34") (term "0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "34") (term "0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "34") (term "0,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,1,0,1"))
                                    (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,1,0,1"))
                                    (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,1,0,1"))
                                    (rule "mul_literals" (formula "34") (term "0,1,1,0,0,1,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,1,0,1"))
                                    (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,1,0,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "34") (term "0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "34") (term "0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "34") (term "0,0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "34") (term "0,0,1,0,0,1,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "34") (term "0,0,0,1,0,0,1,0,0,1"))
                                    (rule "polySimp_elimOne" (formula "34") (term "0,0,0,1,0,0,1,0,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,1"))
                                    (rule "mul_literals" (formula "34") (term "0,1,1,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,1"))
                                    (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,1"))
                                    (rule "array2seqDef" (formula "27") (term "0,1") (inst "u=u"))
                                    (rule "eqSymm" (formula "27"))
                                    (rule "getOfSeqDef" (formula "27") (term "0"))
                                    (rule "castDel" (formula "27") (term "2,0"))
                                    (rule "castDel" (formula "27") (term "1,0"))
                                    (rule "add_zero_right" (formula "27") (term "0,2,1,0"))
                                    (rule "eqSymm" (formula "27"))
                                    (rule "polySimp_elimSub" (formula "27") (term "1,1,0,1"))
                                    (rule "times_zero_2" (formula "27") (term "1,1,1,0,1"))
                                    (rule "add_zero_right" (formula "27") (term "1,1,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,1"))
                                    (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,1"))
                                    (rule "polySimp_addComm1" (formula "27") (term "0,1,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,1"))
                                    (rule "replace_known_left" (formula "27") (term "0,0,1") (ifseqformula "5"))
                                    (builtin "One Step Simplification" (formula "27"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "27") (term "0,0,1"))
                                    (rule "polySimp_elimOne" (formula "27") (term "0,0,1"))
                                    (rule "replace_known_left" (formula "27") (term "0,1") (ifseqformula "6"))
                                    (builtin "One Step Simplification" (formula "27"))
                                    (rule "pullOutSelect" (formula "20") (term "0,1,0") (inst "selectSK=arr_62"))
                                    (rule "applyEq" (formula "28") (term "1,2,0") (ifseqformula "20"))
                                    (rule "applyEq" (formula "28") (term "0,1,0") (ifseqformula "20"))
                                    (rule "applyEq" (formula "21") (term "1,2,0") (ifseqformula "20"))
                                    (rule "simplifySelectOfAnonEQ" (formula "20") (ifseqformula "16"))
                                    (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "33")) (ifInst ""  (formula "11")))
                                    (rule "applyEqReverse" (formula "21") (term "0,1,0") (ifseqformula "20"))
                                    (rule "applyEqReverse" (formula "28") (term "1,2,0") (ifseqformula "20"))
                                    (rule "applyEqReverse" (formula "28") (term "0,1,0") (ifseqformula "20"))
                                    (rule "applyEqReverse" (formula "21") (term "1,2,0") (ifseqformula "20"))
                                    (rule "hideAuxiliaryEq" (formula "20"))
                                    (rule "pullOutSelect" (formula "34") (term "1,1,1,1,0,1") (inst "selectSK=arr_63"))
                                    (rule "applyEq" (formula "35") (term "0,0,0,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "35") (term "0,1,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "35") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "33")))
                                    (rule "replaceKnownSelect_taclet111001100000_3" (formula "1") (term "2,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet111001100000_4" (formula "1") (term "2,0"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "17"))
                                    (rule "eqSymm" (formula "1") (term "0,0,0"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "12"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "pullOutSelect" (formula "35") (term "1,1,0,1,0,1") (inst "selectSK=arr_64"))
                                    (rule "applyEq" (formula "36") (term "0,0,0,1,1,1,0,0,1") (ifseqformula "1"))
                                    (rule "applyEq" (formula "36") (term "0,1,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "36") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                                    (rule "applyEq" (formula "36") (term "0,0,0,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "36") (term "0,1,1,1,1,0,0,1") (ifseqformula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "applyEqReverse" (formula "36") (term "0,0,0,1,1,1,0,0,1") (ifseqformula "1"))
                                    (rule "applyEqReverse" (formula "36") (term "0,1,0,0") (ifseqformula "1"))
                                    (rule "applyEqReverse" (formula "36") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                                    (rule "applyEqReverse" (formula "36") (term "0,0,0,0,0") (ifseqformula "1"))
                                    (rule "applyEqReverse" (formula "36") (term "1,1,0,1,0,1") (ifseqformula "1"))
                                    (rule "applyEqReverse" (formula "36") (term "0,1,1,1,1,0,0,1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "2"))
                                    (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                                    (rule "mul_literals" (formula "7") (term "0,0,0"))
                                    (rule "polySimp_addComm1" (formula "7") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                                    (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                                    (rule "polySimp_elimOne" (formula "7") (term "0"))
                                    (rule "pullOutSelect" (formula "29") (term "1") (inst "selectSK=arr_65"))
                                    (rule "applyEq" (formula "22") (term "0") (ifseqformula "30"))
                                    (rule "simplifySelectOfAnonEQ" (formula "29") (ifseqformula "25"))
                                    (builtin "One Step Simplification" (formula "29"))
                                    (rule "applyEqReverse" (formula "22") (term "0") (ifseqformula "29"))
                                    (rule "applyEqReverse" (formula "30") (term "1") (ifseqformula "29"))
                                    (rule "hideAuxiliaryEq" (formula "29"))
                                    (rule "narrowSelectArrayType" (formula "29") (term "1") (ifseqformula "24") (ifseqformula "33"))
                                    (builtin "One Step Simplification" (formula "29"))
                                    (rule "closeFalse" (formula "29"))
                                 )
                              )
                           )
                        )
                        (branch " 0 ≤ (int)s_1[iv_0] ∧ (int)s_1[iv_0] < entr_arr.length - 0 FALSE"
                           (rule "andLeft" (formula "20") (userinteraction))
                           (rule "andLeft" (formula "20") (userinteraction))
                           (rule "seqNPermRange" (formula "21") (inst "iv=iv") (userinteraction))
                           (rule "lenOfArray2seq" (formula "20") (term "1") (userinteraction))
                           (rule "lenOfArray2seq" (formula "19") (term "0") (userinteraction))
                           (rule "lenOfArray2seq" (formula "19") (term "1") (userinteraction))
                           (rule "array2seq2dDef" (formula "14") (term "0") (inst "u=u") (userinteraction))
                           (rule "array2seq2dDef" (formula "14") (term "1") (inst "u=u") (userinteraction))
                           (rule "equalityToSeqGetAndSeqLen" (formula "14") (inst "iv=iv") (userinteraction))
                           (rule "lenOfSeqDef" (formula "14") (term "0,0") (userinteraction))
                           (rule "lenOfSeqDef" (formula "14") (term "1,0") (userinteraction))
                           (builtin "One Step Simplification" (formula "19"))
                           (rule "true_left" (formula "19"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "1") (ifseqformula "11"))
                           (rule "castDel" (formula "30") (term "1"))
                           (rule "translateJavaSubInt" (formula "23") (term "1,1,0,0"))
                           (rule "translateJavaAddInt" (formula "23") (term "0,2,2,0,1,0"))
                           (rule "sub_literals" (formula "15") (term "2,1,0"))
                           (builtin "One Step Simplification" (formula "15"))
                           (rule "sub_literals" (formula "9") (term "2,1,0"))
                           (builtin "One Step Simplification" (formula "9"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "15"))
                           (rule "andLeft" (formula "3"))
                           (rule "eqSymm" (formula "32"))
                           (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "29"))
                           (builtin "One Step Simplification" (formula "7"))
                           (rule "replace_known_right" (formula "14") (term "0,1") (ifseqformula "27"))
                           (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "28")))
                           (rule "polySimp_elimSub" (formula "31") (term "1,1"))
                           (rule "mul_literals" (formula "31") (term "1,1,1"))
                           (rule "add_zero_right" (formula "31") (term "1,1"))
                           (rule "polySimp_elimSub" (formula "25") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "25") (term "1,1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "2") (term "1"))
                           (rule "mul_literals" (formula "2") (term "1,1"))
                           (rule "add_zero_right" (formula "2") (term "1"))
                           (rule "polySimp_elimSub" (formula "15") (term "1,0"))
                           (rule "times_zero_2" (formula "15") (term "1,1,0"))
                           (rule "add_zero_right" (formula "15") (term "1,0"))
                           (rule "polySimp_elimSub" (formula "15") (term "1,1"))
                           (rule "times_zero_2" (formula "15") (term "1,1,1"))
                           (rule "add_zero_right" (formula "15") (term "1,1"))
                           (rule "polySimp_addComm0" (formula "25") (term "0,2,2,0,1,0"))
                           (rule "polySimp_addComm0" (formula "25") (term "1,1,0,0"))
                           (rule "getOfSeqDef" (formula "16") (term "1,1,0"))
                           (rule "castDel" (formula "16") (term "1,1,1,0"))
                           (rule "castDel" (formula "16") (term "2,1,1,0"))
                           (rule "add_zero_right" (formula "16") (term "0,2,1,1,1,1,0"))
                           (rule "polySimp_elimSub" (formula "16") (term "1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "16") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "16") (term "1,1,0,1,1,0"))
                           (rule "getOfSeqDef" (formula "16") (term "0,1,0"))
                           (rule "castDel" (formula "16") (term "2,0,1,0"))
                           (rule "castDel" (formula "16") (term "1,0,1,0"))
                           (rule "add_zero_right" (formula "16") (term "0,2,1,1,0,1,0"))
                           (rule "polySimp_elimSub" (formula "16") (term "1,1,0,0,1,0"))
                           (rule "times_zero_2" (formula "16") (term "1,1,1,0,0,1,0"))
                           (rule "add_zero_right" (formula "16") (term "1,1,0,0,1,0"))
                           (rule "lenOfSeqDef" (formula "16") (term "1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "16") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "16") (term "1,1,1,1,0,0"))
                           (rule "add_zero_right" (formula "16") (term "1,1,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "22") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0"))
                           (rule "add_zero_right" (formula "15") (term "0,0,0"))
                           (rule "eqSymm" (formula "15"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0"))
                           (rule "narrowSelectArrayType" (formula "10") (term "0,0,1,0") (ifseqformula "4") (ifseqformula "29"))
                           (rule "inEqSimp_ltToLeq" (formula "31") (term "1"))
                           (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "31") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "22") (term "0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "16") (term "0,1,1,0,0"))
                           (rule "add_zero_right" (formula "16") (term "0,0,1,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "1"))
                           (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0"))
                           (rule "add_zero_right" (formula "15") (term "0,0,0"))
                           (rule "eqSymm" (formula "15"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                           (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "21"))
                           (rule "applyEq" (formula "21") (term "0,1,0,0,1,0,0") (ifseqformula "20"))
                           (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0") (ifseqformula "20"))
                           (rule "applyEq" (formula "21") (term "0,1,0,0,1,1,0") (ifseqformula "20"))
                           (rule "applyEq" (formula "15") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1"))
                           (rule "polySimp_mulComm0" (formula "30") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "30") (term "1,1"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1"))
                           (rule "mul_literals" (formula "30") (term "0,1,1"))
                           (rule "polySimp_elimOne" (formula "30") (term "1,1,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "15") (term "1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "15") (term "0,1,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,0"))
                           (rule "mul_literals" (formula "15") (term "0,1,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0"))
                           (rule "eqSymm" (formula "14"))
                           (rule "polySimp_elimOne" (formula "14") (term "0,0,1"))
                           (rule "applyEq" (formula "15") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,1,1,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,1,0"))
                           (rule "mul_literals" (formula "21") (term "0,1,1,1,0"))
                           (rule "polySimp_elimOne" (formula "21") (term "1,1,1,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0"))
                           (rule "eqSymm" (formula "14"))
                           (rule "polySimp_elimOne" (formula "14") (term "0,0,1"))
                           (rule "applyEq" (formula "15") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                           (rule "array2seqDef" (formula "23") (term "0,1,1,0") (inst "u=u"))
                           (rule "eqSymm" (formula "23") (term "1,0"))
                           (rule "getOfSeqDef" (formula "23") (term "0,1,0"))
                           (rule "castDel" (formula "23") (term "1,0,1,0"))
                           (rule "castDel" (formula "23") (term "2,0,1,0"))
                           (rule "add_zero_right" (formula "23") (term "0,2,1,0,1,0"))
                           (rule "polySimp_elimSub" (formula "23") (term "1,1,0,0,1,0"))
                           (rule "times_zero_2" (formula "23") (term "1,1,1,0,0,1,0"))
                           (rule "add_zero_right" (formula "23") (term "1,1,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,1,0"))
                           (rule "mul_literals" (formula "23") (term "0,1,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,1,0"))
                           (rule "array2seqDef" (formula "31") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "31"))
                           (rule "array2seqDef" (formula "15") (term "1,1,1,0") (inst "u=u"))
                           (rule "eqSymm" (formula "15") (term "1,0"))
                           (rule "array2seqDef" (formula "23") (term "0,1,1,0") (inst "u=u"))
                           (rule "eqSymm" (formula "23") (term "1,0"))
                           (rule "getOfSeqDef" (formula "23") (term "0,1,0"))
                           (rule "castDel" (formula "23") (term "2,0,1,0"))
                           (rule "castDel" (formula "23") (term "1,0,1,0"))
                           (rule "add_zero_right" (formula "23") (term "0,2,1,0,1,0"))
                           (rule "polySimp_elimSub" (formula "23") (term "1,1,0,0,1,0"))
                           (rule "times_zero_2" (formula "23") (term "1,1,1,0,0,1,0"))
                           (rule "add_zero_right" (formula "23") (term "1,1,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "23") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,1,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "23") (term "1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "23") (term "0,1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,1,1,0"))
                           (rule "array2seqDef" (formula "15") (term "1,1,1,0") (inst "u=u"))
                           (rule "eqSymm" (formula "15") (term "1,0"))
                           (rule "pullOutSelect" (formula "31") (term "0,1,0") (inst "selectSK=arr_12"))
                           (rule "applyEq" (formula "32") (term "1,2,0") (ifseqformula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "applyEqReverse" (formula "32") (term "0,1,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "32") (term "1,2,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "nnf_imp2or" (formula "25") (term "0"))
                           (rule "nnf_imp2or" (formula "16") (term "0"))
                           (rule "nnf_imp2or" (formula "9") (term "0"))
                           (rule "nnf_imp2or" (formula "24") (term "0"))
                           (rule "nnf_imp2or" (formula "21") (term "0"))
                           (rule "nnf_imp2or" (formula "23") (term "0"))
                           (rule "nnf_imp2or" (formula "15") (term "0"))
                           (rule "nnf_notAnd" (formula "25") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                           (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "25") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                           (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "16") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                           (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "16") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                           (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "9") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
                           (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                           (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "24") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                           (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "24") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                           (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "21") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                           (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                           (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "23") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                           (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                           (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "15") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                           (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                           (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                           (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "8") (ifseqformula "5"))
                           (rule "andLeft" (formula "8"))
                           (rule "andLeft" (formula "8"))
                           (rule "notLeft" (formula "10"))
                           (rule "andLeft" (formula "8"))
                           (rule "notLeft" (formula "10"))
                           (rule "andLeft" (formula "8"))
                           (rule "notLeft" (formula "10"))
                           (rule "andLeft" (formula "8"))
                           (rule "notLeft" (formula "10"))
                           (rule "andLeft" (formula "8"))
                           (rule "andLeft" (formula "8"))
                           (rule "andLeft" (formula "8"))
                           (rule "notLeft" (formula "9"))
                           (rule "notLeft" (formula "8"))
                           (rule "nonNull" (formula "10") (inst "i=i"))
                           (rule "sub_literals" (formula "10") (term "2,1,0,1,1"))
                           (builtin "One Step Simplification" (formula "10"))
                           (rule "greater_literals" (formula "10") (term "0,1"))
                           (builtin "One Step Simplification" (formula "10"))
                           (rule "andLeft" (formula "10"))
                           (rule "notLeft" (formula "10"))
                           (rule "narrowSelectArrayType" (formula "10") (term "0,0,1,0") (ifseqformula "3") (ifseqformula "28"))
                           (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "9") (inst "i=i"))
                           (rule "greater_literals" (formula "9") (term "0,1"))
                           (builtin "One Step Simplification" (formula "9"))
                           (rule "sub_literals" (formula "9") (term "2,1,0,1"))
                           (builtin "One Step Simplification" (formula "9"))
                           (rule "andLeft" (formula "9"))
                           (rule "notLeft" (formula "9"))
                           (rule "narrowSelectArrayType" (formula "9") (term "0,0,1,0") (ifseqformula "3") (ifseqformula "28"))
                           (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "8") (inst "i=i"))
                           (rule "greater_literals" (formula "8") (term "0,1"))
                           (builtin "One Step Simplification" (formula "8"))
                           (rule "sub_literals" (formula "8") (term "2,1,0,1"))
                           (builtin "One Step Simplification" (formula "8"))
                           (rule "andLeft" (formula "8"))
                           (rule "notLeft" (formula "8"))
                           (rule "narrowSelectArrayType" (formula "8") (term "0,0,1,0") (ifseqformula "3") (ifseqformula "28"))
                           (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
                           (rule "nnf_imp2or" (formula "10") (term "0"))
                           (rule "nnf_imp2or" (formula "9") (term "0"))
                           (rule "nnf_imp2or" (formula "8") (term "0"))
                           (rule "nnf_notAnd" (formula "10") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
                           (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "10") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                           (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "9") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
                           (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "9") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                           (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "8") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
                           (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "8") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                           (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
                           (rule "commute_or_2" (formula "27") (term "0"))
                           (rule "commute_or_2" (formula "18") (term "0"))
                           (rule "commute_or_2" (formula "11") (term "0"))
                           (rule "arrayLengthIsAShort" (formula "22") (term "1"))
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "true_left" (formula "22"))
                           (rule "arrayLengthNotNegative" (formula "22") (term "1"))
                           (rule "lenNonNegative" (formula "23") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "23"))
                           (rule "applyEq" (formula "23") (term "0") (ifseqformula "24"))
                           (rule "commute_or_2" (formula "26") (term "0"))
                           (rule "commute_or_2" (formula "17") (term "0"))
                           (rule "cnf_rightDist" (formula "24") (term "0"))
                           (rule "seqGetAlphaCast" (formula "42") (term "0,0"))
                           (rule "castedGetAny" (formula "1") (term "0"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "cut_direct" (formula "42") (term "0"))
                           (branch "CUT: (int)s_1[iv_0] ≥ 0 TRUE"
                              (builtin "One Step Simplification" (formula "43"))
                              (rule "inEqSimp_leqRight" (formula "43"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1"))
                              (rule "distr_forallAnd" (formula "26"))
                              (rule "andLeft" (formula "26"))
                              (rule "ifthenelse_split" (formula "18") (term "0"))
                              (branch "result_0.length ≥ 1 TRUE"
                                 (rule "eqSymm" (formula "19"))
                                 (rule "applyEq" (formula "20") (term "1,1,0") (ifseqformula "19"))
                                 (rule "inEqSimp_subsumption1" (formula "25") (ifseqformula "18"))
                                 (rule "leq_literals" (formula "25") (term "0"))
                                 (builtin "One Step Simplification" (formula "25"))
                                 (rule "true_left" (formula "25"))
                                 (rule "commute_or_2" (formula "12") (term "0"))
                                 (rule "commute_or_2" (formula "11") (term "0"))
                                 (rule "commute_or_2" (formula "10") (term "0"))
                                 (rule "commute_or" (formula "31") (term "0,0"))
                                 (rule "commute_or" (formula "21") (term "0,0"))
                                 (rule "commute_or" (formula "13") (term "0,0"))
                                 (rule "commute_or" (formula "27") (term "0"))
                                 (rule "commute_or" (formula "29") (term "0,0"))
                                 (rule "commute_or" (formula "20") (term "0,0"))
                                 (rule "commute_or" (formula "12") (term "0,0"))
                                 (rule "commute_or" (formula "11") (term "0,0"))
                                 (rule "commute_or" (formula "10") (term "0,0"))
                                 (rule "arrayLengthIsAShort" (formula "45") (term "1,0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "arrayLengthNotNegative" (formula "45") (term "1,0"))
                                 (rule "ifthenelse_to_or_left" (formula "30") (term "0,0,0"))
                                 (rule "eqSymm" (formula "30") (term "1,1,0,0,0"))
                                 (builtin "One Step Simplification" (formula "30"))
                                 (rule "eqSymm" (formula "30") (term "1,0,0,0,0"))
                                 (rule "nnf_notAnd" (formula "30") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "30") (term "1,0,0,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "30") (term "0,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "30") (term "1,0,0,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "30") (term "0,0,0,1,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "30") (term "0,0,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0,0,0,0"))
                                 (rule "nnf_notAnd" (formula "30") (term "0,1,1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "30") (term "1,0,1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,1,1,0,0,0"))
                                 (rule "add_literals" (formula "30") (term "0,0,0,1,0,1,1,0,0,0"))
                                 (rule "add_zero_left" (formula "30") (term "0,0,1,0,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "30") (term "1,1,0,1,1,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "30") (term "0,0,1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,1,1,0,0,0"))
                                 (rule "add_zero_right" (formula "30") (term "0,0,0,0,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "30") (term "1,0,0,1,1,0,0,0"))
                                 (rule "commute_or" (formula "30") (term "0,0"))
                                 (rule "commute_or_2" (formula "30") (term "0"))
                                 (rule "commute_or_2" (formula "30") (term "0,1,0"))
                                 (rule "commute_or" (formula "30") (term "1,1,0"))
                                 (rule "commute_or" (formula "30") (term "0,0,1,0"))
                                 (rule "commute_or_2" (formula "30") (term "0,1,1,0"))
                                 (rule "commute_or" (formula "30") (term "0,0,1,1,0"))
                                 (rule "cnf_rightDist" (formula "30") (term "1,1,0"))
                                 (rule "commute_or" (formula "30") (term "1,1,1,0"))
                                 (rule "cnf_rightDist" (formula "30") (term "0"))
                                 (rule "distr_forallAnd" (formula "30"))
                                 (rule "andLeft" (formula "30"))
                                 (rule "commute_or" (formula "31") (term "0"))
                                 (rule "shift_paren_or" (formula "30") (term "0"))
                                 (rule "shift_paren_or" (formula "30") (term "0,0"))
                                 (rule "commute_or_2" (formula "30") (term "0,0,0"))
                                 (rule "cnf_rightDist" (formula "31") (term "0"))
                                 (rule "distr_forallAnd" (formula "31"))
                                 (rule "andLeft" (formula "31"))
                                 (rule "commute_or_2" (formula "32") (term "0"))
                                 (rule "shift_paren_or" (formula "31") (term "0"))
                                 (rule "shift_paren_or" (formula "32") (term "0,0"))
                                 (rule "shift_paren_or" (formula "31") (term "0,0"))
                                 (rule "commute_or_2" (formula "32") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "32"))
                                 (rule "commute_or_2" (formula "31") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "commute_or" (formula "30") (term "0,0,0,0"))
                                 (rule "shift_paren_or" (formula "31") (term "0,0,0"))
                                 (rule "commute_or" (formula "31") (term "0,0,0,0"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "ifthenelse_to_or_right" (formula "21") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "21"))
                                 (rule "nnf_notAnd" (formula "21") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "21") (term "0,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,0,0"))
                                 (rule "nnf_notAnd" (formula "21") (term "0,1,1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "21") (term "1,0,1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,1,1,0,0,0"))
                                 (rule "add_literals" (formula "21") (term "0,0,0,1,0,1,1,0,0,0"))
                                 (rule "add_zero_left" (formula "21") (term "0,0,1,0,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "21") (term "1,1,0,1,1,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "21") (term "0,0,1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,1,1,0,0,0"))
                                 (rule "add_zero_right" (formula "21") (term "0,0,0,0,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "21") (term "1,0,0,1,1,0,0,0"))
                                 (rule "commute_or" (formula "21") (term "0,0"))
                                 (rule "commute_or_2" (formula "21") (term "0"))
                                 (rule "commute_or_2" (formula "21") (term "0,1,0"))
                                 (rule "commute_or" (formula "21") (term "1,1,0"))
                                 (rule "commute_or" (formula "21") (term "0,0,1,0"))
                                 (rule "commute_or_2" (formula "21") (term "0,1,1,0"))
                                 (rule "commute_or" (formula "21") (term "0,0,1,1,0"))
                                 (rule "cnf_rightDist" (formula "21") (term "1,1,0"))
                                 (rule "commute_or_2" (formula "21") (term "0,1,1,0"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "21") (term "0,0,1,1,0"))
                                 (rule "add_zero_right" (formula "21") (term "1,1,0,0,1,1,0"))
                                 (rule "qeq_literals" (formula "21") (term "1,0,0,1,1,0"))
                                 (builtin "One Step Simplification" (formula "21"))
                                 (rule "shift_paren_or" (formula "21") (term "1,1,0"))
                                 (rule "commute_or" (formula "21") (term "0,1,1,0"))
                                 (rule "cnf_rightDist" (formula "21") (term "0"))
                                 (rule "distr_forallAnd" (formula "21"))
                                 (rule "andLeft" (formula "21"))
                                 (rule "commute_or_2" (formula "21") (term "0"))
                                 (rule "shift_paren_or" (formula "22") (term "0"))
                                 (rule "commute_or_2" (formula "22") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "commute_or_2" (formula "22") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "shift_paren_or" (formula "21") (term "0,0"))
                                 (rule "shift_paren_or" (formula "21") (term "0,0,0"))
                                 (rule "commute_or" (formula "21") (term "0,0,0,0"))
                                 (builtin "One Step Simplification" (formula "21"))
                                 (rule "ifthenelse_split" (formula "20") (term "0"))
                                 (branch "entr_arr.length ≥ 1 TRUE"
                                    (rule "eqSymm" (formula "21"))
                                    (rule "applyEq" (formula "33") (term "1,1,0,0") (ifseqformula "21"))
                                    (rule "applyEq" (formula "22") (term "1,1,0") (ifseqformula "21"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "applyEq" (formula "32") (term "1,1,0,0,0") (ifseqformula "21"))
                                    (rule "applyEq" (formula "29") (term "1,1,0,0") (ifseqformula "21"))
                                    (rule "applyEq" (formula "24") (term "1,1,0") (ifseqformula "21"))
                                    (rule "applyEq" (formula "5") (term "0") (ifseqformula "21"))
                                    (rule "applyEq" (formula "30") (term "1,1,1,0") (ifseqformula "21"))
                                    (rule "applyEq" (formula "34") (term "1,1,0,0") (ifseqformula "21"))
                                    (rule "applyEq" (formula "30") (term "1,1,0,0") (ifseqformula "21"))
                                    (rule "applyEq" (formula "36") (term "1,1,0") (ifseqformula "21"))
                                    (rule "applyEq" (formula "32") (term "1,1,0") (ifseqformula "21"))
                                    (rule "applyEq" (formula "35") (term "1,1,1,0,0") (ifseqformula "21"))
                                    (rule "applyEq" (formula "34") (term "1,1,1,0") (ifseqformula "21"))
                                    (rule "applyEq" (formula "23") (term "1,1,0") (ifseqformula "21"))
                                    (rule "applyEq" (formula "32") (term "1,1,1,0,0,0,0,0,0,0") (ifseqformula "21"))
                                    (rule "applyEq" (formula "19") (term "0") (ifseqformula "21"))
                                    (rule "applyEq" (formula "21") (term "1,1,1,0,0,0,0,0") (ifseqformula "20"))
                                    (rule "applyEq" (formula "27") (term "1") (ifseqformula "20"))
                                    (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0"))
                                    (rule "inEqSimp_homoInEq1" (formula "22") (term "1,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "22") (term "0,1,0"))
                                    (rule "add_literals" (formula "22") (term "1,0,1,0"))
                                    (rule "times_zero_1" (formula "22") (term "0,1,0"))
                                    (rule "leq_literals" (formula "22") (term "1,0"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "true_left" (formula "22"))
                                    (rule "arrayLengthIsAShort" (formula "14") (term "1,1,0"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "true_left" (formula "14"))
                                    (rule "arrayLengthNotNegative" (formula "14") (term "1,1,0"))
                                    (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "20"))
                                    (rule "leq_literals" (formula "14") (term "0"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "true_left" (formula "14"))
                                    (rule "ifthenelse_to_or_left" (formula "21") (term "0,0,0"))
                                    (rule "eqSymm" (formula "21") (term "1,1,0,0,0"))
                                    (rule "eqSeqDef" (formula "21") (term "1,0,0,0,0") (inst "iv=iv_1"))
                                    (rule "lenOfSeqDef" (formula "21") (term "0,0,1,0,0,0,0"))
                                    (rule "eqSymm" (formula "21") (term "0,1,0,0,0,0"))
                                    (rule "polySimp_elimSub" (formula "21") (term "1,1,0,1,0,0,0,0"))
                                    (rule "times_zero_2" (formula "21") (term "1,1,1,0,1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "21") (term "1,1,0,1,0,0,0,0"))
                                    (rule "lenOfSeqDef" (formula "21") (term "1,1,0,0,1,1,0,0,0,0"))
                                    (rule "polySimp_elimSub" (formula "21") (term "1,1,1,0,0,1,1,0,0,0,0"))
                                    (rule "times_zero_2" (formula "21") (term "1,1,1,1,0,0,1,1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "21") (term "1,1,1,0,0,1,1,0,0,0,0"))
                                    (rule "getOfSeqDef" (formula "21") (term "0,1,0,1,1,0,0,0,0"))
                                    (rule "castDel" (formula "21") (term "1,0,1,0,1,1,0,0,0,0"))
                                    (rule "castDel" (formula "21") (term "2,0,1,0,1,1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "21") (term "0,2,1,0,1,0,1,1,0,0,0,0"))
                                    (rule "eqSymm" (formula "21") (term "1,0,1,1,0,0,0,0"))
                                    (rule "polySimp_elimSub" (formula "21") (term "1,1,0,1,1,0,1,1,0,0,0,0"))
                                    (rule "times_zero_2" (formula "21") (term "1,1,1,0,1,1,0,1,1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "21") (term "1,1,0,1,1,0,1,1,0,0,0,0"))
                                    (rule "lenOfSeqDef" (formula "21") (term "0,0,1,0,0,0,0"))
                                    (rule "eqSymm" (formula "21") (term "0,1,0,0,0,0"))
                                    (rule "polySimp_elimSub" (formula "21") (term "1,1,0,1,0,0,0,0"))
                                    (rule "times_zero_2" (formula "21") (term "1,1,1,0,1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "21") (term "1,1,0,1,0,0,0,0"))
                                    (rule "getOfSeqDef" (formula "21") (term "0,1,0,1,1,0,0,0,0"))
                                    (rule "castDel" (formula "21") (term "2,0,1,0,1,1,0,0,0,0"))
                                    (rule "castDel" (formula "21") (term "1,0,1,0,1,1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "21") (term "0,2,1,0,1,0,1,1,0,0,0,0"))
                                    (rule "eqSymm" (formula "21") (term "1,0,1,1,0,0,0,0"))
                                    (rule "polySimp_elimSub" (formula "21") (term "1,1,0,1,1,0,1,1,0,0,0,0"))
                                    (rule "times_zero_2" (formula "21") (term "1,1,1,0,1,1,0,1,1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "21") (term "1,1,0,1,1,0,1,1,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "21") (term "0,1,1,0,0,1,1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "21") (term "0,0,1,1,0,0,1,1,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,1,0,0,1,1,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "21") (term "0,1,0,1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "21") (term "0,0,1,0,1,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,1,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0,0,1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "21") (term "0,0,0,0,1,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,1,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,1,0,1,1,0,0,0,0"))
                                    (rule "eqSymm" (formula "21") (term "1,0,1,1,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,1,1,0,1,1,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,1,1,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,1,1,0,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,1,1,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,1,0,1,1,0,0,0,0"))
                                    (rule "eqSymm" (formula "21") (term "1,0,1,1,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,1,1,0,1,1,0,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,1,0,1,1,0,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,1,1,0,1,1,0,0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,1,0,1,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "0,0,1,0,1,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "21") (term "0,0,1,0,1,0,0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,0,0,1,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "0,0,0,0,1,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "21") (term "0,0,0,0,1,0,0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,0,1,0,0,1,0,0,1,1,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "0,0,0,1,0,0,1,0,0,1,1,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "21") (term "0,0,0,1,0,0,1,0,0,1,1,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,1,0,1,1,0,0,0,0"))
                                    (rule "eqSymm" (formula "21") (term "1,0,1,1,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,1,1,0,1,1,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "21") (term "1,1,0,1,1,0,1,1,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,1,1,0,1,1,0,0,0,0"))
                                    (rule "mul_literals" (formula "21") (term "0,1,1,0,1,1,0,1,1,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,1,1,0,1,1,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,1,1,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0,1,1,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0,1,1,0,0,0,0"))
                                    (rule "mul_literals" (formula "21") (term "0,1,1,0,0,1,1,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0,1,1,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0,1,1,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,1,0,1,1,0,0,0,0"))
                                    (rule "eqSymm" (formula "21") (term "1,0,1,1,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,1,1,0,1,1,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "21") (term "1,1,0,1,1,0,1,1,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,1,1,0,1,1,0,0,0,0"))
                                    (rule "mul_literals" (formula "21") (term "0,1,1,0,1,1,0,1,1,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,1,1,0,1,1,0,0,0,0"))
                                    (rule "nnf_notAnd" (formula "21") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "21") (term "0,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,0,0"))
                                    (rule "nnf_imp2or" (formula "21") (term "0,1,1,0,0,0,0"))
                                    (rule "nnf_notAnd" (formula "21") (term "0,0,1,1,0,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0,1,1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "21") (term "0,0,0,0,0,1,1,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,1,1,0,0,0,0"))
                                    (rule "mul_literals" (formula "21") (term "1,0,0,0,1,1,0,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,1,1,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,1,1,0,0,0,0"))
                                    (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,1,1,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,1,1,0,0,0,0"))
                                    (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,1,1,0,0,0,0"))
                                    (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,1,1,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,1,1,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,1,1,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,1,1,0,0,0,0"))
                                    (rule "commute_or" (formula "21") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "21") (term "0,0"))
                                    (rule "commute_or_2" (formula "21") (term "0"))
                                    (rule "arrayLengthIsAShort" (formula "13") (term "1,1,0"))
                                    (builtin "One Step Simplification" (formula "13"))
                                    (rule "true_left" (formula "13"))
                                    (rule "arrayLengthNotNegative" (formula "13") (term "1,1,0"))
                                    (rule "arrayLengthIsAShort" (formula "12") (term "1,1,0"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "true_left" (formula "12"))
                                    (rule "arrayLengthNotNegative" (formula "12") (term "1,1,0"))
                                    (rule "arrayLengthIsAShort" (formula "11") (term "1,1,0"))
                                    (builtin "One Step Simplification" (formula "11"))
                                    (rule "true_left" (formula "11"))
                                    (rule "arrayLengthNotNegative" (formula "11") (term "1,1,0"))
                                    (rule "ifthenelse_to_or_left" (formula "33") (term "0,0,0,0,0"))
                                    (rule "eqSymm" (formula "33") (term "1,1,0,0,0,0,0"))
                                    (rule "nnf_notAnd" (formula "33") (term "0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0,0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0,0,0,0,0,0"))
                                    (rule "add_literals" (formula "33") (term "0,0,0,1,0,0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "33") (term "0,0,1,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0,0,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "33") (term "0,0,0,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0,0,0,0"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "51") (term "0,1,0") (ifseqformula "26"))
                                    (rule "commute_or" (formula "34") (term "0,0,0,0"))
                                    (rule "commute_or_2" (formula "34") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "34") (term "0,0"))
                                    (rule "commute_or_2" (formula "34") (term "0"))
                                    (rule "commute_or_2" (formula "34") (term "0,1,0"))
                                    (rule "commute_or" (formula "34") (term "1,1,0"))
                                    (rule "allLeft" (formula "32") (inst "t=iv_0"))
                                    (rule "inEqSimp_commuteGeq" (formula "32") (term "1,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "32") (term "1") (ifseqformula "3"))
                                    (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1"))
                                    (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1"))
                                    (rule "mul_literals" (formula "32") (term "0,1,0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "32") (term "0,0,1"))
                                    (rule "polySimp_addComm0" (formula "32") (term "0,0,0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1"))
                                    (rule "add_literals" (formula "32") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "32") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "32") (term "0,0,1"))
                                    (rule "leq_literals" (formula "32") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "32"))
                                    (rule "inEqSimp_contradInEq1" (formula "32") (term "0") (ifseqformula "5"))
                                    (rule "qeq_literals" (formula "32") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "32"))
                                    (rule "inEqSimp_contradInEq1" (formula "32") (ifseqformula "6"))
                                    (rule "andLeft" (formula "32"))
                                    (rule "inEqSimp_homoInEq1" (formula "32"))
                                    (rule "polySimp_pullOutFactor1b" (formula "32") (term "0"))
                                    (rule "add_literals" (formula "32") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "32") (term "1,0"))
                                    (rule "add_zero_right" (formula "32") (term "0"))
                                    (rule "leq_literals" (formula "32"))
                                    (rule "closeFalse" (formula "32"))
                                 )
                                 (branch "entr_arr.length ≥ 1 FALSE"
                                    (rule "eqSymm" (formula "20"))
                                    (rule "inEqSimp_geqRight" (formula "36"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "applyEq" (formula "30") (term "1,1,0,0") (ifseqformula "21"))
                                    (rule "applyEq" (formula "36") (term "1,1,0") (ifseqformula "21"))
                                    (rule "applyEq" (formula "22") (term "1,1,0") (ifseqformula "21"))
                                    (rule "applyEq" (formula "29") (term "1,1,0,0") (ifseqformula "21"))
                                    (rule "applyEq" (formula "24") (term "1,1,0") (ifseqformula "21"))
                                    (rule "applyEq" (formula "6") (term "0") (ifseqformula "21"))
                                    (rule "inEqSimp_homoInEq1" (formula "6"))
                                    (rule "times_zero_2" (formula "6") (term "1,0"))
                                    (rule "add_zero_right" (formula "6") (term "0"))
                                    (rule "applyEq" (formula "32") (term "1,1,0,0,0") (ifseqformula "21"))
                                    (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                                    (rule "qeq_literals" (formula "20"))
                                    (rule "closeFalse" (formula "20"))
                                 )
                              )
                              (branch "result_0.length ≥ 1 FALSE"
                                 (rule "eqSymm" (formula "18"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "inEqSimp_geqRight" (formula "32"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_antiSymm" (formula "25") (ifseqformula "1"))
                                 (rule "applyEq" (formula "26") (term "0") (ifseqformula "25"))
                                 (rule "qeq_literals" (formula "26"))
                                 (rule "true_left" (formula "26"))
                                 (rule "applyEq" (formula "32") (term "1,1,0") (ifseqformula "25"))
                                 (rule "applyEq" (formula "30") (term "1,1,0") (ifseqformula "25"))
                                 (rule "applyEq" (formula "21") (term "1,1,0") (ifseqformula "25"))
                                 (rule "applyEq" (formula "30") (term "1,1,1,0,0,1,0,0") (ifseqformula "25"))
                                 (rule "add_zero_right" (formula "30") (term "1,1,0,0,1,0,0"))
                                 (rule "applyEq" (formula "28") (term "1,1,0,0") (ifseqformula "25"))
                                 (rule "add_literals" (formula "28") (term "1,0,0"))
                                 (rule "applyEq" (formula "1") (term "0") (ifseqformula "25"))
                                 (rule "leq_literals" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "applyEq" (formula "26") (term "1,1,0,0") (ifseqformula "24"))
                                 (rule "applyEq" (formula "4") (term "0") (ifseqformula "24"))
                                 (rule "inEqSimp_homoInEq1" (formula "4"))
                                 (rule "mul_literals" (formula "4") (term "1,0"))
                                 (rule "add_zero_right" (formula "4") (term "0"))
                                 (rule "applyEq" (formula "27") (term "1,1,1,0") (ifseqformula "24"))
                                 (rule "applyEq" (formula "30") (term "1,1,1,0,0") (ifseqformula "24"))
                                 (rule "add_literals" (formula "30") (term "1,1,0,0"))
                                 (rule "applyEq" (formula "19") (term "1,1,1,0,0,1,0,0") (ifseqformula "24"))
                                 (rule "add_zero_right" (formula "19") (term "1,1,0,0,1,0,0"))
                                 (rule "eqSymm" (formula "19") (term "1,0,0"))
                                 (rule "applyEq" (formula "25") (term "1") (ifseqformula "24"))
                                 (rule "applyEq" (formula "29") (term "1,1,1,0,1,1,0,0") (ifseqformula "24"))
                                 (rule "add_literals" (formula "29") (term "1,1,0,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                 (rule "mul_literals" (formula "4") (term "1"))
                                 (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "4"))
                                 (rule "qeq_literals" (formula "3") (term "0"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "closeFalse" (formula "3"))
                              )
                           )
                           (branch "CUT: (int)s_1[iv_0] ≥ 0 FALSE"
                              (builtin "One Step Simplification" (formula "43"))
                              (rule "false_right" (formula "43"))
                              (rule "inEqSimp_geqRight" (formula "42"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "distr_forallAnd" (formula "25"))
                              (rule "andLeft" (formula "25"))
                              (rule "ifthenelse_split" (formula "17") (term "0"))
                              (branch "result_0.length ≥ 1 TRUE"
                                 (rule "eqSymm" (formula "18"))
                                 (rule "applyEq" (formula "19") (term "1,1,0") (ifseqformula "18"))
                                 (rule "inEqSimp_subsumption1" (formula "24") (ifseqformula "17"))
                                 (rule "leq_literals" (formula "24") (term "0"))
                                 (builtin "One Step Simplification" (formula "24"))
                                 (rule "true_left" (formula "24"))
                                 (rule "commute_or_2" (formula "11") (term "0"))
                                 (rule "commute_or_2" (formula "10") (term "0"))
                                 (rule "commute_or_2" (formula "9") (term "0"))
                                 (rule "commute_or" (formula "30") (term "0,0"))
                                 (rule "commute_or" (formula "20") (term "0,0"))
                                 (rule "commute_or" (formula "12") (term "0,0"))
                                 (rule "commute_or" (formula "26") (term "0"))
                                 (rule "commute_or" (formula "28") (term "0,0"))
                                 (rule "commute_or" (formula "19") (term "0,0"))
                                 (rule "commute_or" (formula "11") (term "0,0"))
                                 (rule "commute_or" (formula "10") (term "0,0"))
                                 (rule "commute_or" (formula "9") (term "0,0"))
                                 (rule "arrayLengthIsAShort" (formula "44") (term "1,0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "arrayLengthNotNegative" (formula "44") (term "1,0"))
                                 (rule "ifthenelse_to_or_left" (formula "29") (term "0,0,0"))
                                 (rule "eqSymm" (formula "29") (term "1,0,0,0,0"))
                                 (rule "eqSymm" (formula "29") (term "1,1,0,0,0"))
                                 (builtin "One Step Simplification" (formula "29"))
                                 (rule "nnf_notAnd" (formula "29") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0,0,0"))
                                 (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "29") (term "0,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,0,0"))
                                 (rule "nnf_notAnd" (formula "29") (term "0,1,1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "29") (term "1,0,1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,1,1,0,0,0"))
                                 (rule "add_literals" (formula "29") (term "0,0,0,1,0,1,1,0,0,0"))
                                 (rule "add_zero_left" (formula "29") (term "0,0,1,0,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "29") (term "1,1,0,1,1,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "29") (term "0,0,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "29") (term "1,0,0,0,0,1,1,0,0,0"))
                                 (rule "add_zero_right" (formula "29") (term "0,0,0,0,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "29") (term "1,0,0,1,1,0,0,0"))
                                 (rule "commute_or" (formula "29") (term "0,0"))
                                 (rule "commute_or_2" (formula "29") (term "0"))
                                 (rule "commute_or_2" (formula "29") (term "0,1,0"))
                                 (rule "commute_or" (formula "29") (term "1,1,0"))
                                 (rule "commute_or" (formula "29") (term "0,0,1,0"))
                                 (rule "commute_or_2" (formula "29") (term "0,1,1,0"))
                                 (rule "commute_or" (formula "29") (term "0,0,1,1,0"))
                                 (rule "cnf_rightDist" (formula "29") (term "1,1,0"))
                                 (rule "commute_or" (formula "29") (term "1,1,1,0"))
                                 (rule "cnf_rightDist" (formula "29") (term "0"))
                                 (rule "distr_forallAnd" (formula "29"))
                                 (rule "andLeft" (formula "29"))
                                 (rule "commute_or" (formula "30") (term "0"))
                                 (rule "shift_paren_or" (formula "29") (term "0"))
                                 (rule "shift_paren_or" (formula "29") (term "0,0"))
                                 (rule "commute_or_2" (formula "29") (term "0,0,0"))
                                 (rule "cnf_rightDist" (formula "30") (term "0"))
                                 (rule "distr_forallAnd" (formula "30"))
                                 (rule "andLeft" (formula "30"))
                                 (rule "commute_or_2" (formula "31") (term "0"))
                                 (rule "shift_paren_or" (formula "30") (term "0"))
                                 (rule "shift_paren_or" (formula "31") (term "0,0"))
                                 (rule "shift_paren_or" (formula "30") (term "0,0"))
                                 (rule "commute_or_2" (formula "31") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "commute_or_2" (formula "30") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "30"))
                                 (rule "commute_or" (formula "29") (term "0,0,0,0"))
                                 (rule "shift_paren_or" (formula "30") (term "0,0,0"))
                                 (rule "commute_or" (formula "30") (term "0,0,0,0"))
                                 (builtin "One Step Simplification" (formula "30"))
                                 (rule "ifthenelse_to_or_right" (formula "20") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "nnf_notAnd" (formula "20") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "20") (term "0,0,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,0,0,0"))
                                 (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "20") (term "0,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0,0"))
                                 (rule "nnf_notAnd" (formula "20") (term "0,1,1,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "20") (term "0,0,1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,1,1,0,0,0"))
                                 (rule "add_zero_right" (formula "20") (term "0,0,0,0,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "20") (term "1,0,0,1,1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "20") (term "1,0,1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,1,1,0,0,0"))
                                 (rule "add_literals" (formula "20") (term "0,0,0,1,0,1,1,0,0,0"))
                                 (rule "add_zero_left" (formula "20") (term "0,0,1,0,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "20") (term "1,1,0,1,1,0,0,0"))
                                 (rule "commute_or" (formula "20") (term "0,0"))
                                 (rule "commute_or_2" (formula "20") (term "0"))
                                 (rule "commute_or_2" (formula "20") (term "0,1,0"))
                                 (rule "commute_or" (formula "20") (term "1,1,0"))
                                 (rule "commute_or" (formula "20") (term "0,0,1,0"))
                                 (rule "commute_or_2" (formula "20") (term "0,1,1,0"))
                                 (rule "commute_or" (formula "20") (term "0,0,1,1,0"))
                                 (rule "cnf_rightDist" (formula "20") (term "1,1,0"))
                                 (rule "commute_or_2" (formula "20") (term "0,1,1,0"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "20") (term "0,0,1,1,0"))
                                 (rule "add_zero_right" (formula "20") (term "1,1,0,0,1,1,0"))
                                 (rule "qeq_literals" (formula "20") (term "1,0,0,1,1,0"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "shift_paren_or" (formula "20") (term "1,1,0"))
                                 (rule "commute_or" (formula "20") (term "0,1,1,0"))
                                 (rule "cnf_rightDist" (formula "20") (term "0"))
                                 (rule "distr_forallAnd" (formula "20"))
                                 (rule "andLeft" (formula "20"))
                                 (rule "commute_or_2" (formula "20") (term "0"))
                                 (rule "shift_paren_or" (formula "21") (term "0"))
                                 (rule "commute_or_2" (formula "21") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "21"))
                                 (rule "commute_or_2" (formula "21") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "21"))
                                 (rule "shift_paren_or" (formula "20") (term "0,0"))
                                 (rule "shift_paren_or" (formula "20") (term "0,0,0"))
                                 (rule "commute_or" (formula "20") (term "0,0,0,0"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "allLeft" (formula "27") (inst "t=iv_0"))
                                 (rule "inEqSimp_commuteGeq" (formula "27") (term "1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "27") (term "1,0") (ifseqformula "4"))
                                 (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "27") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "27") (term "1,0,0,1,0"))
                                 (rule "add_zero_right" (formula "27") (term "0,0,1,0"))
                                 (rule "leq_literals" (formula "27") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "27"))
                                 (rule "inEqSimp_contradInEq1" (formula "27") (term "0") (ifseqformula "3"))
                                 (rule "qeq_literals" (formula "27") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "27"))
                                 (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "27"))
                                 (rule "qeq_literals" (formula "2") (term "0"))
                                 (builtin "One Step Simplification" (formula "2"))
                                 (rule "closeFalse" (formula "2"))
                              )
                              (branch "result_0.length ≥ 1 FALSE"
                                 (rule "eqSymm" (formula "17"))
                                 (builtin "One Step Simplification" (formula "17"))
                                 (rule "inEqSimp_geqRight" (formula "31"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_antiSymm" (formula "24") (ifseqformula "1"))
                                 (rule "applyEq" (formula "20") (term "1,1,0") (ifseqformula "24"))
                                 (rule "applyEq" (formula "28") (term "1,1,0,0") (ifseqformula "24"))
                                 (rule "add_zero_right" (formula "28") (term "1,0,0"))
                                 (rule "applyEq" (formula "27") (term "1,1,0,0") (ifseqformula "24"))
                                 (rule "applyEq" (formula "19") (term "1,1,1,0,0,1,0,0") (ifseqformula "24"))
                                 (rule "add_literals" (formula "19") (term "1,1,0,0,1,0,0"))
                                 (rule "eqSymm" (formula "19") (term "1,0,0"))
                                 (rule "applyEq" (formula "1") (term "0") (ifseqformula "24"))
                                 (rule "leq_literals" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "applyEq" (formula "3") (term "0") (ifseqformula "23"))
                                 (rule "inEqSimp_homoInEq1" (formula "3"))
                                 (rule "mul_literals" (formula "3") (term "1,0"))
                                 (rule "add_zero_right" (formula "3") (term "0"))
                                 (rule "applyEq" (formula "24") (term "0") (ifseqformula "23"))
                                 (rule "qeq_literals" (formula "24"))
                                 (rule "true_left" (formula "24"))
                                 (rule "applyEq" (formula "26") (term "1,1,1,0") (ifseqformula "23"))
                                 (rule "applyEq" (formula "28") (term "1,1,0") (ifseqformula "23"))
                                 (rule "applyEq" (formula "29") (term "1,1,1,0,0") (ifseqformula "23"))
                                 (rule "add_zero_right" (formula "29") (term "1,1,0,0"))
                                 (rule "applyEq" (formula "28") (term "1,1,1,0,0,1,0,0") (ifseqformula "23"))
                                 (rule "add_literals" (formula "28") (term "1,1,0,0,1,0,0"))
                                 (rule "applyEq" (formula "30") (term "1,1,0") (ifseqformula "23"))
                                 (rule "applyEq" (formula "28") (term "1,1,1,0,1,1,0,0") (ifseqformula "23"))
                                 (rule "add_literals" (formula "28") (term "1,1,0,1,1,0,0"))
                                 (rule "applyEq" (formula "24") (term "1") (ifseqformula "23"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                 (rule "mul_literals" (formula "3") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "2"))
                                 (rule "qeq_literals" (formula "3") (term "0"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "closeFalse" (formula "3"))
                              )
                           )
                        )
                     )
                     (branch "0 ≤ iv_0 ∧ iv_0 < result_0.length - 0 FALSE"
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "12") (term "1") (ifseqformula "10"))
                        (rule "translateJavaSubInt" (formula "20") (term "1,1,0,0"))
                        (rule "castDel" (formula "27") (term "0"))
                        (rule "castDel" (formula "27") (term "1,1"))
                        (rule "translateJavaAddInt" (formula "20") (term "0,2,2,0,1,0"))
                        (rule "castDel" (formula "27") (term "2,1"))
                        (rule "sub_literals" (formula "14") (term "2,1,0"))
                        (builtin "One Step Simplification" (formula "14"))
                        (rule "sub_literals" (formula "8") (term "2,1,0"))
                        (builtin "One Step Simplification" (formula "8"))
                        (rule "add_zero_right" (formula "27") (term "0,2,1,1,1"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "20"))
                        (rule "andLeft" (formula "20"))
                        (rule "eqSymm" (formula "30"))
                        (builtin "One Step Simplification" (formula "30"))
                        (rule "orRight" (formula "30"))
                        (rule "notRight" (formula "30"))
                        (rule "andLeft" (formula "1"))
                        (rule "eqSymm" (formula "22"))
                        (rule "eqSymm" (formula "32"))
                        (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "31"))
                        (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "29"))
                        (builtin "One Step Simplification" (formula "8"))
                        (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "28"))
                        (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "27")))
                        (rule "polySimp_elimSub" (formula "25") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "25") (term "1,1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "2") (term "1"))
                        (rule "times_zero_2" (formula "2") (term "1,1"))
                        (rule "add_zero_right" (formula "2") (term "1"))
                        (rule "polySimp_elimSub" (formula "31") (term "1"))
                        (rule "times_zero_2" (formula "31") (term "1,1"))
                        (rule "add_zero_right" (formula "31") (term "1"))
                        (rule "polySimp_addComm0" (formula "25") (term "0,2,2,0,1,0"))
                        (rule "polySimp_addComm0" (formula "25") (term "1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                        (rule "narrowSelectArrayType" (formula "11") (term "0,0,1,0") (ifseqformula "5") (ifseqformula "29"))
                        (rule "inEqSimp_ltRight" (formula "31"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "4"))
                        (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "2"))
                        (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                        (rule "eqSymm" (formula "22"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                        (rule "polySimp_elimOne" (formula "5") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
                        (rule "array2seqDef" (formula "25") (term "0,0,1,0") (inst "u=u"))
                        (rule "getOfSeqDef" (formula "25") (term "0,1,0"))
                        (rule "castDel" (formula "25") (term "1,0,1,0"))
                        (rule "castDel" (formula "25") (term "2,0,1,0"))
                        (rule "add_zero_right" (formula "25") (term "0,2,1,0,1,0"))
                        (rule "polySimp_elimSub" (formula "25") (term "1,1,0,0,1,0"))
                        (rule "times_zero_2" (formula "25") (term "1,1,1,0,0,1,0"))
                        (rule "add_zero_right" (formula "25") (term "1,1,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "25") (term "0,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1,0"))
                        (rule "array2seqDef" (formula "25") (term "0,1,1,0") (inst "u=u"))
                        (rule "eqSymm" (formula "25") (term "1,0"))
                        (rule "getOfSeqDef" (formula "25") (term "0,1,0"))
                        (rule "castDel" (formula "25") (term "1,0,1,0"))
                        (rule "castDel" (formula "25") (term "2,0,1,0"))
                        (rule "add_zero_right" (formula "25") (term "0,2,1,0,1,0"))
                        (rule "polySimp_elimSub" (formula "25") (term "1,1,0,0,1,0"))
                        (rule "times_zero_2" (formula "25") (term "1,1,1,0,0,1,0"))
                        (rule "add_zero_right" (formula "25") (term "1,1,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "25") (term "0,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1,0"))
                        (rule "array2seqDef" (formula "23") (term "0,0") (inst "u=u"))
                        (rule "lenOfSeqDef" (formula "23") (term "0"))
                        (rule "polySimp_elimSub" (formula "23") (term "1,0"))
                        (rule "times_zero_2" (formula "23") (term "1,1,0"))
                        (rule "add_zero_right" (formula "23") (term "1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0"))
                        (rule "add_zero_right" (formula "23") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "23") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "23") (term "0,0,0"))
                        (rule "array2seqDef" (formula "32") (term "1") (inst "u=u"))
                        (rule "eqSymm" (formula "32"))
                        (rule "array2seqDef" (formula "22") (term "0,0") (inst "u=u"))
                        (rule "lenOfSeqDef" (formula "22") (term "0"))
                        (rule "polySimp_elimSub" (formula "22") (term "1,0"))
                        (rule "times_zero_2" (formula "22") (term "1,1,0"))
                        (rule "add_zero_right" (formula "22") (term "1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0"))
                        (rule "add_zero_right" (formula "22") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "22") (term "0,0,0"))
                        (rule "pullOutSelect" (formula "31") (term "0,1,0") (inst "selectSK=arr_10"))
                        (rule "applyEq" (formula "32") (term "1,2,0") (ifseqformula "1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "15"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "10"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "4"))
                        (rule "times_zero_1" (formula "3") (term "0,0"))
                        (rule "add_zero_left" (formula "3") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                        (rule "mul_literals" (formula "3") (term "1"))
                        (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=arr_11"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "32")) (ifInst ""  (formula "12")))
                        (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "nnf_imp2or" (formula "28") (term "0"))
                        (rule "nnf_imp2or" (formula "20") (term "0"))
                        (rule "nnf_imp2or" (formula "14") (term "0"))
                        (rule "nnf_imp2or" (formula "27") (term "0"))
                        (rule "nnf_imp2or" (formula "26") (term "0"))
                        (rule "nnf_notAnd" (formula "28") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
                        (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0"))
                        (rule "add_literals" (formula "28") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                        (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "20") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                        (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0"))
                        (rule "add_literals" (formula "20") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                        (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "14") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                        (rule "mul_literals" (formula "14") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "27") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                        (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "27") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                        (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
                        (rule "nnf_notAnd" (formula "26") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                        (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                        (rule "add_literals" (formula "26") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                        (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                        (rule "commute_or_2" (formula "28") (term "0"))
                        (rule "commute_or_2" (formula "20") (term "0"))
                        (rule "commute_or_2" (formula "14") (term "0"))
                        (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "13") (ifseqformula "10"))
                        (rule "andLeft" (formula "13"))
                        (rule "notLeft" (formula "14"))
                        (rule "andLeft" (formula "13"))
                        (rule "notLeft" (formula "14"))
                        (rule "andLeft" (formula "13"))
                        (rule "notLeft" (formula "14"))
                        (rule "andLeft" (formula "13"))
                        (rule "notLeft" (formula "14"))
                        (rule "andLeft" (formula "13"))
                        (rule "andLeft" (formula "13"))
                        (rule "andLeft" (formula "13"))
                        (rule "andLeft" (formula "13"))
                        (rule "notLeft" (formula "13"))
                        (rule "notLeft" (formula "13"))
                        (rule "nonNull" (formula "15") (inst "i=i"))
                        (rule "greater_literals" (formula "15") (term "0,1"))
                        (builtin "One Step Simplification" (formula "15"))
                        (rule "sub_literals" (formula "15") (term "2,1,0,1"))
                        (builtin "One Step Simplification" (formula "15"))
                        (rule "andLeft" (formula "15"))
                        (rule "notLeft" (formula "15"))
                        (rule "narrowSelectArrayType" (formula "15") (term "0,0,1,0") (ifseqformula "8") (ifseqformula "31"))
                        (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                        (rule "nonNull" (formula "14") (inst "i=i"))
                        (rule "greater_literals" (formula "14") (term "0,1"))
                        (builtin "One Step Simplification" (formula "14"))
                        (rule "sub_literals" (formula "14") (term "2,1,0,1"))
                        (builtin "One Step Simplification" (formula "14"))
                        (rule "andLeft" (formula "14"))
                        (rule "notLeft" (formula "14"))
                        (rule "narrowSelectArrayType" (formula "14") (term "0,0,1,0") (ifseqformula "8") (ifseqformula "31"))
                        (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                        (rule "nonNull" (formula "13") (inst "i=i"))
                        (rule "sub_literals" (formula "13") (term "2,1,0,1,1"))
                        (builtin "One Step Simplification" (formula "13"))
                        (rule "greater_literals" (formula "13") (term "0,1"))
                        (builtin "One Step Simplification" (formula "13"))
                        (rule "andLeft" (formula "13"))
                        (rule "notLeft" (formula "13"))
                        (rule "narrowSelectArrayType" (formula "13") (term "0,0,1,0") (ifseqformula "8") (ifseqformula "31"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                        (rule "nnf_imp2or" (formula "15") (term "0"))
                        (rule "nnf_imp2or" (formula "14") (term "0"))
                        (rule "nnf_imp2or" (formula "13") (term "0"))
                        (rule "nnf_notAnd" (formula "15") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                        (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
                        (rule "add_literals" (formula "15") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                        (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "14") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                        (rule "mul_literals" (formula "14") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "13") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
                        (rule "commute_or_2" (formula "28") (term "0"))
                        (rule "commute_or" (formula "30") (term "0,0"))
                        (rule "commute_or" (formula "22") (term "0,0"))
                        (rule "commute_or" (formula "16") (term "0,0"))
                        (rule "equalityToSeqGetAndSeqLenLeft" (formula "21") (inst "iv=iv"))
                        (rule "andLeft" (formula "21"))
                        (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                        (rule "applyEq" (formula "22") (term "0,0,1,0,0,1,0,0") (ifseqformula "23"))
                        (rule "applyEq" (formula "21") (term "0,0") (ifseqformula "23"))
                        (builtin "One Step Simplification" (formula "21"))
                        (rule "true_left" (formula "21"))
                        (rule "applyEq" (formula "21") (term "0,0,1,0") (ifseqformula "22"))
                        (builtin "One Step Simplification" (formula "21"))
                        (rule "true_left" (formula "21"))
                        (rule "lenNonNegative" (formula "26") (term "1"))
                        (rule "inEqSimp_commuteLeq" (formula "26"))
                        (rule "commute_or_2" (formula "15") (term "0"))
                        (rule "commute_or_2" (formula "14") (term "0"))
                        (rule "commute_or_2" (formula "13") (term "0"))
                        (rule "seqGetAlphaCast" (formula "4") (term "0"))
                        (rule "castedGetAny" (formula "4") (term "0"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "commute_or" (formula "29") (term "0,0"))
                        (rule "ifthenelse_split" (formula "27") (term "0"))
                        (branch "result_0.length ≥ 1 TRUE"
                           (rule "eqSymm" (formula "28"))
                           (rule "applyEq" (formula "30") (term "1,1,0") (ifseqformula "28"))
                           (rule "applyEq" (formula "26") (term "0") (ifseqformula "28"))
                           (rule "applyEq" (formula "7") (term "0") (ifseqformula "28"))
                           (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "7"))
                           (rule "andLeft" (formula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "2"))
                           (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                           (rule "add_literals" (formula "2") (term "1,1,0"))
                           (rule "times_zero_1" (formula "2") (term "1,0"))
                           (rule "add_zero_right" (formula "2") (term "0"))
                           (rule "leq_literals" (formula "2"))
                           (rule "closeFalse" (formula "2"))
                        )
                        (branch "result_0.length ≥ 1 FALSE"
                           (rule "eqSymm" (formula "27"))
                           (rule "inEqSimp_geqRight" (formula "32"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "applyEqRigid" (formula "8") (term "0") (ifseqformula "28"))
                           (rule "inEqSimp_homoInEq1" (formula "8"))
                           (rule "times_zero_2" (formula "8") (term "1,0"))
                           (rule "add_zero_right" (formula "8") (term "0"))
                           (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
                           (rule "qeq_literals" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "applyEq" (formula "29") (term "1,1,0") (ifseqformula "27"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "8"))
                           (rule "mul_literals" (formula "8") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "8") (ifseqformula "7"))
                           (rule "qeq_literals" (formula "8") (term "0"))
                           (builtin "One Step Simplification" (formula "8"))
                           (rule "closeFalse" (formula "8"))
                        )
                     )
                  )
               )
            )
            (branch "Case 2"
               (rule "andRight" (formula "24") (userinteraction))
               (branch "Case 1"
                  (rule "closeAntec" (formula "18") (ifseqformula "24") (userinteraction))
               )
               (branch "Case 2"
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "11") (term "1") (ifseqformula "9"))
                  (rule "translateJavaSubInt" (formula "18") (term "1,1,0,0"))
                  (rule "translateJavaAddInt" (formula "18") (term "0,2,2,0,1,0"))
                  (rule "sub_literals" (formula "7") (term "2,1,0"))
                  (builtin "One Step Simplification" (formula "7"))
                  (rule "sub_literals" (formula "13") (term "2,1,0"))
                  (builtin "One Step Simplification" (formula "13"))
                  (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "22"))
                  (builtin "One Step Simplification" (formula "4"))
                  (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "21"))
                  (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "20")))
                  (rule "polySimp_elimSub" (formula "18") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "18") (term "1,1,1,0,0"))
                  (rule "polySimp_addComm0" (formula "18") (term "0,2,2,0,1,0"))
                  (rule "polySimp_addComm0" (formula "18") (term "1,1,0,0"))
                  (rule "narrowSelectArrayType" (formula "7") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "22"))
                  (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                  (rule "array2seqDef" (formula "17") (term "0") (inst "u=u"))
                  (rule "array2seqDef" (formula "17") (term "1") (inst "u=u"))
                  (rule "nonNull" (formula "24") (term "1") (inst "i=i"))
                  (rule "sub_literals" (formula "24") (term "2,1,0,1,1,1"))
                  (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "21")))
                  (rule "greater_literals" (formula "24") (term "0,1"))
                  (builtin "One Step Simplification" (formula "24"))
                  (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1"))
                  (rule "mul_literals" (formula "24") (term "0,1,1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1"))
                  (rule "nnf_imp2or" (formula "19") (term "0"))
                  (rule "nnf_imp2or" (formula "7") (term "0"))
                  (rule "nnf_imp2or" (formula "13") (term "0"))
                  (rule "nnf_imp2or" (formula "18") (term "0"))
                  (rule "nnf_imp2or" (formula "24") (term "0,1"))
                  (rule "nnf_notAnd" (formula "19") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
                  (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                  (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "7") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
                  (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
                  (rule "mul_literals" (formula "7") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "13") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
                  (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                  (rule "mul_literals" (formula "13") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "18") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                  (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                  (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "24") (term "0,0,1"))
                  (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,1"))
                  (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0,1"))
                  (rule "add_zero_right" (formula "24") (term "0,0,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,1"))
                  (rule "mul_literals" (formula "24") (term "1,0,0,0,1"))
                  (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,1"))
                  (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,1"))
                  (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,1"))
                  (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,1"))
                  (rule "commute_or_2" (formula "19") (term "0"))
                  (rule "commute_or_2" (formula "7") (term "0"))
                  (rule "commute_or_2" (formula "13") (term "0"))
                  (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "24") (term "0") (ifseqformula "3"))
                  (rule "nonNull" (formula "24") (term "1,0,0,0,0,0,0,0") (inst "i=i"))
                  (rule "greater_literals" (formula "24") (term "0,1,1,0,0,0,0,0,0,0"))
                  (builtin "One Step Simplification" (formula "24"))
                  (rule "sub_literals" (formula "24") (term "2,1,0,1,1,0,0,0,0,0,0,0"))
                  (builtin "One Step Simplification" (formula "24"))
                  (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,1,1,0,0,0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,1,1,0,0,0,0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1,1,0,0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,1,1,0,0,0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1,1,0,0,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1,1,0,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "24") (term "0,1,1,0,0,1,1,0,0,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1,1,0,0,0,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1,1,0,0,0,0,0,0,0"))
                  (rule "nonNull" (formula "24") (term "1,0,0,0,0,0,0") (inst "i=i"))
                  (rule "sub_literals" (formula "24") (term "2,1,0,1,1,1,0,0,0,0,0,0"))
                  (builtin "One Step Simplification" (formula "24"))
                  (rule "greater_literals" (formula "24") (term "0,1,1,0,0,0,0,0,0"))
                  (builtin "One Step Simplification" (formula "24"))
                  (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,1,1,0,0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,1,1,0,0,0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1,1,0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,1,1,0,0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1,1,0,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1,1,0,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1,1,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "24") (term "0,1,1,0,0,1,1,0,0,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1,1,0,0,0,0,0,0"))
                  (rule "nonNull" (formula "24") (term "1,0,0,0,0,0") (inst "i=i"))
                  (rule "greater_literals" (formula "24") (term "0,1,1,0,0,0,0,0"))
                  (builtin "One Step Simplification" (formula "24"))
                  (rule "sub_literals" (formula "24") (term "2,1,0,1,1,0,0,0,0,0"))
                  (builtin "One Step Simplification" (formula "24"))
                  (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,1,1,0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,1,1,0,0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1,1,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,1,1,0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1,1,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1,1,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1,1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "24") (term "0,1,1,0,0,1,1,0,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1,1,0,0,0,0,0"))
                  (rule "pullOutSelect" (formula "24") (term "0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_0"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "10"))
                  (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "3"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
                  (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "22"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "10"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")) (ifInst ""  (formula "3")))
                  (rule "applyEqReverse" (formula "25") (term "0,0,1,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "pullOutSelect" (formula "24") (term "1,0,0,1,0,1,1,0,0,0,0,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_0"))
                  (rule "applyEq" (formula "25") (term "0,0,0,1,0,0,0,0,0,0,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "25") (term "0,1,1,1,0,0,1,1,0,0,0,0,0,0,0") (ifseqformula "1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "10"))
                  (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "3"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
                  (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "24"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "10"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")) (ifInst ""  (formula "3")))
                  (rule "applyEqReverse" (formula "25") (term "0,1,1,1,0,0,1,1,0,0,0,0,0,0,0") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "25") (term "0,0,0,1,0,0,0,0,0,0,0") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "25") (term "1,0,0,1,0,1,1,0,0,0,0,0,0,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "pullOutSelect" (formula "24") (term "0,0,0,0,0,0,0,0,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_0"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "10"))
                  (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "3"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
                  (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "22"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "10"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")) (ifInst ""  (formula "3")))
                  (rule "applyEqReverse" (formula "25") (term "0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "pullOutSelect" (formula "24") (term "0,1,1,1,0,0,1,1,0,0,0,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_0"))
                  (rule "applyEq" (formula "25") (term "1,0,0,1,0,1,1,0,0,0,0,0,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "25") (term "0,0,0,1,0,0,0,0,0,0") (ifseqformula "1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "10"))
                  (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "3"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
                  (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "24"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "10"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")) (ifInst ""  (formula "3")))
                  (rule "applyEqReverse" (formula "25") (term "0,0,0,1,0,0,0,0,0,0") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "25") (term "0,1,1,1,0,0,1,1,0,0,0,0,0,0") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "25") (term "1,0,0,1,0,1,1,0,0,0,0,0,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "pullOutSelect" (formula "24") (term "0,0,1,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_0"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "10"))
                  (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "3"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
                  (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "22"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "10"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")) (ifInst ""  (formula "3")))
                  (rule "applyEqReverse" (formula "25") (term "0,0,1,0,0,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "pullOutSelect" (formula "24") (term "0,0,1,0,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_0"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "10"))
                  (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "3"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
                  (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "22"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "10"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")) (ifInst ""  (formula "3")))
                  (rule "applyEqReverse" (formula "25") (term "0,0,1,0,0,0,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "pullOutSelect" (formula "24") (term "1,0,0,1,0,1,1,0,0,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_0"))
                  (rule "applyEq" (formula "25") (term "0,0,0,1,0,0,0,0,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "25") (term "0,1,1,1,0,0,1,1,0,0,0,0,0") (ifseqformula "1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "10"))
                  (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "3"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
                  (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "22"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "10"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")) (ifInst ""  (formula "3")))
                  (rule "applyEqReverse" (formula "25") (term "0,1,1,1,0,0,1,1,0,0,0,0,0") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "25") (term "0,0,0,1,0,0,0,0,0") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "25") (term "1,0,0,1,0,1,1,0,0,0,0,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "pullOutSelect" (formula "24") (term "0,0,1,0,0,0,0,0,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_0"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "10"))
                  (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "3"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
                  (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "22"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "10"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")) (ifInst ""  (formula "3")))
                  (rule "applyEqReverse" (formula "25") (term "0,0,1,0,0,0,0,0,0,0,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "pullOutSelect" (formula "24") (term "0,0,1,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_0"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "10"))
                  (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "3"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
                  (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "24"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "10"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")) (ifInst ""  (formula "3")))
                  (rule "applyEqReverse" (formula "25") (term "0,0,1,0,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "nnf_imp2or" (formula "24") (term "0,1,1,0,0,0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "24") (term "0,1,1,0,0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "24") (term "0,1,1,0,0,0,0,0"))
                  (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "6") (ifseqformula "3"))
                  (rule "andLeft" (formula "6"))
                  (rule "notLeft" (formula "7"))
                  (rule "andLeft" (formula "6"))
                  (rule "notLeft" (formula "7"))
                  (rule "andLeft" (formula "6"))
                  (rule "notLeft" (formula "7"))
                  (rule "andLeft" (formula "6"))
                  (rule "notLeft" (formula "7"))
                  (rule "andLeft" (formula "6"))
                  (rule "andLeft" (formula "6"))
                  (rule "andLeft" (formula "6"))
                  (rule "andLeft" (formula "6"))
                  (rule "notLeft" (formula "6"))
                  (rule "notLeft" (formula "6"))
                  (rule "replace_known_right" (formula "32") (term "0,1,0,0,0,0,0,0,0,0") (ifseqformula "22"))
                  (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "23")) (ifInst ""  (formula "24")) (ifInst ""  (formula "25")) (ifInst ""  (formula "26")) (ifInst ""  (formula "27")))
                  (rule "nonNull" (formula "8") (inst "i=i"))
                  (rule "sub_literals" (formula "8") (term "2,1,0,1,1"))
                  (builtin "One Step Simplification" (formula "8"))
                  (rule "greater_literals" (formula "8") (term "0,1"))
                  (builtin "One Step Simplification" (formula "8"))
                  (rule "andLeft" (formula "8"))
                  (rule "notLeft" (formula "8"))
                  (rule "replace_known_right" (formula "33") (term "0,0,1,0") (ifseqformula "22"))
                  (builtin "One Step Simplification" (formula "33"))
                  (rule "narrowSelectArrayType" (formula "8") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "22"))
                  (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
                  (rule "nonNull" (formula "7") (inst "i=i"))
                  (rule "greater_literals" (formula "7") (term "0,1"))
                  (builtin "One Step Simplification" (formula "7"))
                  (rule "sub_literals" (formula "7") (term "2,1,0,1"))
                  (builtin "One Step Simplification" (formula "7"))
                  (rule "andLeft" (formula "7"))
                  (rule "notLeft" (formula "7"))
                  (rule "replace_known_right" (formula "34") (term "0,0,1,0,0") (ifseqformula "22"))
                  (builtin "One Step Simplification" (formula "34"))
                  (rule "narrowSelectArrayType" (formula "7") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "22"))
                  (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
                  (rule "nonNull" (formula "6") (inst "i=i"))
                  (rule "sub_literals" (formula "6") (term "2,1,0,1,1"))
                  (builtin "One Step Simplification" (formula "6"))
                  (rule "greater_literals" (formula "6") (term "0,1"))
                  (builtin "One Step Simplification" (formula "6"))
                  (rule "andLeft" (formula "6"))
                  (rule "notLeft" (formula "6"))
                  (rule "replace_known_right" (formula "35") (term "0,0,0,0,0") (ifseqformula "22"))
                  (builtin "One Step Simplification" (formula "35"))
                  (rule "narrowSelectArrayType" (formula "6") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "22"))
                  (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
                  (rule "nnf_imp2or" (formula "8") (term "0"))
                  (rule "nnf_imp2or" (formula "7") (term "0"))
                  (rule "nnf_imp2or" (formula "6") (term "0"))
                  (rule "nnf_notAnd" (formula "8") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
                  (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                  (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "7") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
                  (rule "mul_literals" (formula "7") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
                  (rule "mul_literals" (formula "7") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "6") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
                  (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "6") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
                  (rule "mul_literals" (formula "6") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "35") (term "0,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,1,0"))
                  (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0,1,0"))
                  (rule "add_zero_right" (formula "35") (term "0,0,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,1,0"))
                  (rule "mul_literals" (formula "35") (term "1,0,0,0,1,0"))
                  (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1,0"))
                  (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1,0"))
                  (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,1,0"))
                  (rule "add_zero_left" (formula "35") (term "0,0,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,1,0"))
                  (rule "commute_or" (formula "21") (term "0,0"))
                  (rule "nnf_notAnd" (formula "35") (term "0,0,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,1,0,0"))
                  (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "35") (term "0,0,0,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "35") (term "1,0,0,0,1,0,0"))
                  (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1,0,0"))
                  (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "35") (term "0,0,1,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,1,0,0"))
                  (rule "nnf_notAnd" (formula "35") (term "0,0,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,0,0,0"))
                  (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "35") (term "0,0,0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "35") (term "1,0,0,0,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,0,0,0"))
                  (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "35") (term "0,0,1,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,0,0,0"))
                  (rule "commute_or" (formula "9") (term "0,0"))
                  (rule "commute_or" (formula "15") (term "0,0"))
                  (rule "equalityToSeqGetAndSeqLenLeft" (formula "14") (inst "iv=iv"))
                  (rule "andLeft" (formula "14"))
                  (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                  (rule "applyEq" (formula "15") (term "0,0,1,0,0,1,0,0") (ifseqformula "16"))
                  (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "16"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "true_left" (formula "14"))
                  (rule "applyEq" (formula "14") (term "0,0,1,0") (ifseqformula "15"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "true_left" (formula "14"))
                  (rule "arrayLengthNotNegative" (formula "19") (term "1,0"))
                  (rule "arrayLengthIsAShort" (formula "20") (term "1,0"))
                  (builtin "One Step Simplification" (formula "20"))
                  (rule "true_left" (formula "20"))
                  (rule "commute_or_2" (formula "8") (term "0"))
                  (rule "commute_or_2" (formula "7") (term "0"))
                  (rule "commute_or_2" (formula "6") (term "0"))
                  (rule "arrayLengthIsAShort" (formula "9") (term "1,1,0"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "true_left" (formula "9"))
                  (rule "arrayLengthNotNegative" (formula "9") (term "1,1,0"))
                  (rule "commute_or" (formula "8") (term "0,0"))
                  (rule "commute_or" (formula "7") (term "0,0"))
                  (rule "commute_or" (formula "6") (term "0,0"))
                  (rule "andRight" (formula "37"))
                  (branch "Case 1"
                     (rule "andRight" (formula "37"))
                     (branch "Case 1"
                        (rule "andRight" (formula "37"))
                        (branch "Case 1"
                           (rule "allRight" (formula "37") (inst "sk=i_3"))
                           (rule "orRight" (formula "37"))
                           (rule "notRight" (formula "38"))
                           (rule "orRight" (formula "38"))
                           (rule "inEqSimp_geqRight" (formula "39"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "39"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_6"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "22"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "28")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,1,0,0") (ifseqformula "16"))
                           (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "21") (ifseqformula "28"))
                           (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                           (rule "ifEqualsNull" (formula "3"))
                           (rule "pullOutSelect" (formula "3") (term "0,1,1") (inst "selectSK=arr_7"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "17"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "29")))
                           (rule "ifthenelse_negated" (formula "3") (term "0"))
                           (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "16") (ifseqformula "29"))
                           (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "6") (ifseqformula "29"))
                           (rule "orLeft" (formula "4"))
                           (branch " ( self.sorted = result_0 ∨ ¬( self.sorted.<created> = TRUE ∨ (self.sorted@heap).<created>@anon_heap_copyOf«anonHeapFunction» = TRUE)) ∧ (self.sorted@heap)[i_3]@anon_heap_sort«anonHeapFunction» = null"
                              (rule "andLeft" (formula "4"))
                              (rule "ifthenelse_split" (formula "3") (term "0"))
                              (branch "self.sorted.<created> = TRUE TRUE"
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "replace_known_left" (formula "4") (term "0,0,1") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "referencedObjectIsCreatedRightEQ" (formula "39") (ifseqformula "4") (ifseqformula "40"))
                                 (rule "close" (formula "39") (ifseqformula "7"))
                              )
                              (branch "self.sorted.<created> = TRUE FALSE"
                                 (rule "referencedObjectIsCreatedRight" (formula "30") (ifseqformula "31"))
                                 (rule "close" (formula "30") (ifseqformula "7"))
                              )
                           )
                           (branch " ¬( self.sorted = result_0 ∨ ¬( self.sorted.<created> = TRUE ∨ (self.sorted@heap).<created>@anon_heap_copyOf«anonHeapFunction» = TRUE)) ∧ arr_7«selectSK» = null"
                              (rule "andLeft" (formula "4"))
                              (rule "notLeft" (formula "4"))
                              (rule "orRight" (formula "29"))
                              (rule "notRight" (formula "30"))
                              (rule "applyEq" (formula "4") (term "1") (ifseqformula "5"))
                              (rule "ifEqualsNull" (formula "4"))
                              (rule "cnf_rightDist" (formula "4"))
                              (rule "andLeft" (formula "4"))
                              (rule "commute_or" (formula "4"))
                              (rule "cnf_rightDist" (formula "5"))
                              (rule "andLeft" (formula "5"))
                              (rule "commute_or" (formula "5"))
                              (rule "cnf_rightDist" (formula "4"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "commute_or" (formula "4"))
                              (rule "allLeft" (formula "14") (inst "t=i_3"))
                              (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "3"))
                              (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1"))
                              (rule "add_literals" (formula "14") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "14") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "14") (term "0,0,1"))
                              (rule "leq_literals" (formula "14") (term "0,1"))
                              (builtin "One Step Simplification" (formula "14"))
                              (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "14") (term "0,1"))
                              (builtin "One Step Simplification" (formula "14"))
                              (rule "notLeft" (formula "14"))
                              (rule "replace_known_right" (formula "4") (term "1") (ifseqformula "32"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "notLeft" (formula "4"))
                              (rule "referencedObjectIsCreatedRight" (formula "31") (ifseqformula "34"))
                              (rule "close" (formula "31") (ifseqformula "8"))
                           )
                        )
                        (branch "Case 2"
                           (rule "allRight" (formula "37") (inst "sk=i_2"))
                           (rule "orRight" (formula "37"))
                           (rule "notRight" (formula "38"))
                           (rule "orRight" (formula "38"))
                           (rule "inEqSimp_geqRight" (formula "39"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "39"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "22"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "29")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,1,0,0") (ifseqformula "16"))
                           (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "21") (ifseqformula "29"))
                           (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                           (rule "ifEqualsNull" (formula "3"))
                           (rule "pullOutSelect" (formula "3") (term "0,1,1") (inst "selectSK=arr_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "17"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "30")))
                           (rule "ifthenelse_negated" (formula "3") (term "0"))
                           (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "16") (ifseqformula "30"))
                           (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "6") (ifseqformula "30"))
                           (rule "orLeft" (formula "4"))
                           (branch " ( self.encrypted = result_0 ∨ ¬( self.encrypted.<created> = TRUE ∨ (self.encrypted@heap).<created>@anon_heap_copyOf«anonHeapFunction» = TRUE)) ∧ (self.encrypted@heap)[i_2]@anon_heap_sort«anonHeapFunction» = null"
                              (rule "andLeft" (formula "4"))
                              (rule "ifthenelse_split" (formula "3") (term "0"))
                              (branch "self.encrypted.<created> = TRUE TRUE"
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "replace_known_left" (formula "4") (term "0,0,1") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "referencedObjectIsCreatedRightEQ" (formula "39") (ifseqformula "4") (ifseqformula "40"))
                                 (rule "close" (formula "39") (ifseqformula "7"))
                              )
                              (branch "self.encrypted.<created> = TRUE FALSE"
                                 (rule "referencedObjectIsCreatedRight" (formula "30") (ifseqformula "32"))
                                 (rule "close" (formula "30") (ifseqformula "7"))
                              )
                           )
                           (branch " ¬( self.encrypted = result_0 ∨ ¬( self.encrypted.<created> = TRUE ∨ (self.encrypted@heap).<created>@anon_heap_copyOf«anonHeapFunction» = TRUE)) ∧ arr_5«selectSK» = null"
                              (rule "andLeft" (formula "4"))
                              (rule "notLeft" (formula "4"))
                              (rule "orRight" (formula "29"))
                              (rule "notRight" (formula "30"))
                              (rule "applyEq" (formula "4") (term "1") (ifseqformula "5"))
                              (rule "ifEqualsNull" (formula "4"))
                              (rule "cnf_rightDist" (formula "4"))
                              (rule "andLeft" (formula "4"))
                              (rule "commute_or" (formula "4"))
                              (rule "cnf_rightDist" (formula "5"))
                              (rule "andLeft" (formula "5"))
                              (rule "commute_or" (formula "5"))
                              (rule "cnf_rightDist" (formula "4"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "commute_or" (formula "4"))
                              (rule "allLeft" (formula "15") (inst "t=i_2"))
                              (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "3"))
                              (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
                              (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "15") (term "0,0,1"))
                              (rule "leq_literals" (formula "15") (term "0,1"))
                              (builtin "One Step Simplification" (formula "15"))
                              (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "15") (term "0,1"))
                              (builtin "One Step Simplification" (formula "15"))
                              (rule "notLeft" (formula "15"))
                              (rule "replace_known_right" (formula "4") (term "1") (ifseqformula "32"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "notLeft" (formula "4"))
                              (rule "referencedObjectIsCreatedRight" (formula "31") (ifseqformula "35"))
                              (rule "close" (formula "31") (ifseqformula "8"))
                           )
                        )
                     )
                     (branch "Case 2"
                        (rule "allRight" (formula "37") (inst "sk=i_1"))
                        (rule "orRight" (formula "37"))
                        (rule "notRight" (formula "38"))
                        (rule "orRight" (formula "38"))
                        (rule "inEqSimp_geqRight" (formula "39"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "39"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_2"))
                        (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "22"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "30")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,1,0,0") (ifseqformula "16"))
                        (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "21") (ifseqformula "30"))
                        (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                        (rule "ifEqualsNull" (formula "3"))
                        (rule "pullOutSelect" (formula "3") (term "0,1,1") (inst "selectSK=arr_3"))
                        (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "17"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "31")))
                        (rule "ifthenelse_negated" (formula "3") (term "0"))
                        (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "16") (ifseqformula "31"))
                        (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "6") (ifseqformula "31"))
                        (rule "orLeft" (formula "4"))
                        (branch " ( self.chosen = result_0 ∨ ¬( self.chosen.<created> = TRUE ∨ (self.chosen@heap).<created>@anon_heap_copyOf«anonHeapFunction» = TRUE)) ∧ (self.chosen@heap)[i_1]@anon_heap_sort«anonHeapFunction» = null"
                           (rule "andLeft" (formula "4"))
                           (rule "ifthenelse_split" (formula "3") (term "0"))
                           (branch "self.chosen.<created> = TRUE TRUE"
                              (rule "hideAuxiliaryEq" (formula "4"))
                              (rule "replace_known_left" (formula "4") (term "0,0,1") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "referencedObjectIsCreatedRightEQ" (formula "39") (ifseqformula "4") (ifseqformula "40"))
                              (rule "close" (formula "39") (ifseqformula "7"))
                           )
                           (branch "self.chosen.<created> = TRUE FALSE"
                              (rule "referencedObjectIsCreatedRight" (formula "30") (ifseqformula "33"))
                              (rule "close" (formula "30") (ifseqformula "7"))
                           )
                        )
                        (branch " ¬( self.chosen = result_0 ∨ ¬( self.chosen.<created> = TRUE ∨ (self.chosen@heap).<created>@anon_heap_copyOf«anonHeapFunction» = TRUE)) ∧ arr_3«selectSK» = null"
                           (rule "andLeft" (formula "4"))
                           (rule "notLeft" (formula "4"))
                           (rule "orRight" (formula "29"))
                           (rule "notRight" (formula "30"))
                           (rule "applyEq" (formula "4") (term "1") (ifseqformula "5"))
                           (rule "ifEqualsNull" (formula "4"))
                           (rule "cnf_rightDist" (formula "4"))
                           (rule "andLeft" (formula "4"))
                           (rule "commute_or" (formula "4"))
                           (rule "cnf_rightDist" (formula "5"))
                           (rule "andLeft" (formula "5"))
                           (rule "commute_or" (formula "5"))
                           (rule "cnf_rightDist" (formula "4"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "commute_or" (formula "4"))
                           (rule "allLeft" (formula "16") (inst "t=i_1"))
                           (rule "inEqSimp_commuteGeq" (formula "16") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "3"))
                           (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
                           (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "16") (term "0,0,1"))
                           (rule "leq_literals" (formula "16") (term "0,1"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "2"))
                           (rule "qeq_literals" (formula "16") (term "0,1"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "notLeft" (formula "16"))
                           (rule "replace_known_right" (formula "4") (term "1") (ifseqformula "32"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "notLeft" (formula "4"))
                           (rule "referencedObjectIsCreatedRight" (formula "31") (ifseqformula "36"))
                           (rule "close" (formula "31") (ifseqformula "8"))
                        )
                     )
                  )
                  (branch "Case 2"
                     (rule "allRight" (formula "37") (inst "sk=i_0"))
                     (rule "orRight" (formula "37"))
                     (rule "notRight" (formula "38"))
                     (rule "orRight" (formula "38"))
                     (rule "inEqSimp_leqRight" (formula "38"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_geqRight" (formula "39"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_0"))
                     (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "22"))
                     (builtin "One Step Simplification" (formula "3"))
                     (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "20") (ifseqformula "37"))
                     (rule "allLeft" (formula "26") (inst "t=i_0"))
                     (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                     (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "26") (term "0,0,1"))
                     (rule "leq_literals" (formula "26") (term "0,1"))
                     (builtin "One Step Simplification" (formula "26"))
                     (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "2"))
                     (rule "qeq_literals" (formula "26") (term "0,1"))
                     (builtin "One Step Simplification" (formula "26"))
                     (rule "notLeft" (formula "26"))
                     (rule "pullOutSelect" (formula "27") (term "0") (inst "selectSK=arr_1"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "applyEqReverse" (formula "28") (term "0") (ifseqformula "1"))
                     (rule "close" (formula "28") (ifseqformula "4"))
                  )
               )
            )
         )
         (branch "Case 2"
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "11") (term "1") (ifseqformula "9"))
            (rule "translateJavaSubInt" (formula "18") (term "1,1,0,0"))
            (rule "translateJavaAddInt" (formula "18") (term "0,2,2,0,1,0"))
            (rule "sub_literals" (formula "7") (term "2,1,0"))
            (builtin "One Step Simplification" (formula "7"))
            (rule "sub_literals" (formula "13") (term "2,1,0"))
            (builtin "One Step Simplification" (formula "13"))
            (rule "allRight" (formula "24") (inst "sk=f_0"))
            (rule "allRight" (formula "24") (inst "sk=o_0"))
            (rule "orRight" (formula "24"))
            (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "22"))
            (builtin "One Step Simplification" (formula "4"))
            (rule "replace_known_right" (formula "11") (term "0,1") (ifseqformula "20"))
            (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "21")))
            (rule "polySimp_elimSub" (formula "18") (term "1,1,0,0"))
            (rule "mul_literals" (formula "18") (term "1,1,1,0,0"))
            (rule "polySimp_addComm0" (formula "18") (term "0,2,2,0,1,0"))
            (rule "polySimp_addComm0" (formula "18") (term "1,1,0,0"))
            (rule "narrowSelectArrayType" (formula "7") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "22"))
            (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
            (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
            (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
            (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
            (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
            (rule "array2seqDef" (formula "17") (term "0") (inst "u=u"))
            (rule "array2seqDef" (formula "17") (term "1") (inst "u=u"))
            (rule "pullOutSelect" (formula "25") (term "0") (inst "selectSK=f_0_0"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "10"))
            (rule "eqSymm" (formula "26"))
            (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "11"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")))
            (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "nnf_imp2or" (formula "20") (term "0"))
            (rule "nnf_imp2or" (formula "8") (term "0"))
            (rule "nnf_imp2or" (formula "14") (term "0"))
            (rule "nnf_imp2or" (formula "19") (term "0"))
            (rule "nnf_notAnd" (formula "20") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
            (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
            (rule "mul_literals" (formula "20") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "8") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
            (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
            (rule "mul_literals" (formula "8") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "14") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
            (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "14") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
            (rule "mul_literals" (formula "14") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "19") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
            (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "19") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
            (rule "mul_literals" (formula "19") (term "1,0,0,0"))
            (rule "commute_or_2" (formula "20") (term "0"))
            (rule "commute_or_2" (formula "8") (term "0"))
            (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "7") (ifseqformula "4"))
            (rule "andLeft" (formula "7"))
            (rule "notLeft" (formula "8"))
            (rule "andLeft" (formula "7"))
            (rule "notLeft" (formula "8"))
            (rule "andLeft" (formula "7"))
            (rule "andLeft" (formula "7"))
            (rule "notLeft" (formula "9"))
            (rule "andLeft" (formula "7"))
            (rule "notLeft" (formula "9"))
            (rule "andLeft" (formula "7"))
            (rule "andLeft" (formula "7"))
            (rule "andLeft" (formula "7"))
            (rule "notLeft" (formula "8"))
            (rule "notLeft" (formula "7"))
            (rule "nonNull" (formula "9") (inst "i=i"))
            (rule "sub_literals" (formula "9") (term "2,1,0,1,1"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "greater_literals" (formula "9") (term "0,1"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "andLeft" (formula "9"))
            (rule "notLeft" (formula "9"))
            (rule "narrowSelectArrayType" (formula "9") (term "0,0,1,0") (ifseqformula "2") (ifseqformula "23"))
            (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
            (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
            (rule "nonNull" (formula "8") (inst "i=i"))
            (rule "greater_literals" (formula "8") (term "0,1"))
            (builtin "One Step Simplification" (formula "8"))
            (rule "sub_literals" (formula "8") (term "2,1,0,1"))
            (builtin "One Step Simplification" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "notLeft" (formula "8"))
            (rule "narrowSelectArrayType" (formula "8") (term "0,0,1,0") (ifseqformula "2") (ifseqformula "23"))
            (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
            (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
            (rule "nonNull" (formula "7") (inst "i=i"))
            (rule "sub_literals" (formula "7") (term "2,1,0,1,1"))
            (builtin "One Step Simplification" (formula "7"))
            (rule "greater_literals" (formula "7") (term "0,1"))
            (builtin "One Step Simplification" (formula "7"))
            (rule "andLeft" (formula "7"))
            (rule "notLeft" (formula "7"))
            (rule "narrowSelectArrayType" (formula "7") (term "0,0,1,0") (ifseqformula "2") (ifseqformula "23"))
            (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
            (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
            (rule "nnf_imp2or" (formula "9") (term "0"))
            (rule "nnf_imp2or" (formula "8") (term "0"))
            (rule "nnf_imp2or" (formula "7") (term "0"))
            (rule "nnf_notAnd" (formula "9") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
            (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
            (rule "mul_literals" (formula "9") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "8") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
            (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
            (rule "mul_literals" (formula "8") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "7") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
            (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
            (rule "mul_literals" (formula "7") (term "1,0,0,0"))
            (rule "commute_or_2" (formula "16") (term "0"))
            (rule "commute_and" (formula "1") (term "0,0,0"))
            (rule "commute_or" (formula "22") (term "0,0"))
            (rule "commute_or" (formula "10") (term "0,0"))
            (rule "commute_or_2" (formula "9") (term "0"))
            (rule "commute_or_2" (formula "8") (term "0"))
            (rule "commute_or_2" (formula "7") (term "0"))
            (rule "commute_or" (formula "16") (term "0,0"))
            (rule "commute_or" (formula "9") (term "0,0"))
            (rule "commute_or" (formula "8") (term "0,0"))
            (rule "commute_or" (formula "7") (term "0,0"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "15") (inst "iv=iv"))
            (rule "andLeft" (formula "15"))
            (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
            (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "17"))
            (builtin "One Step Simplification" (formula "15"))
            (rule "true_left" (formula "15"))
            (rule "applyEq" (formula "15") (term "0,0,1,0,0,1,0,0") (ifseqformula "16"))
            (rule "applyEq" (formula "15") (term "0,0,1,0") (ifseqformula "16"))
            (builtin "One Step Simplification" (formula "15"))
            (rule "true_left" (formula "15"))
            (rule "cut_direct" (formula "36") (term "0,0"))
            (branch "CUT: o_0 = null TRUE"
               (builtin "One Step Simplification" (formula "37"))
               (rule "false_right" (formula "37"))
               (rule "replace_known_left" (formula "2") (term "0,0,1,0,0") (ifseqformula "1"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "applyEqRigid" (formula "2") (term "1,1,0") (ifseqformula "1"))
               (rule "applyEqRigid" (formula "2") (term "1,2,0") (ifseqformula "1"))
               (rule "applyEqRigid" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
               (rule "eqSymm" (formula "2") (term "1,0,0"))
               (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "34"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "applyEqReverse" (formula "37") (term "1") (ifseqformula "2"))
               (rule "hideAuxiliaryEq" (formula "2"))
               (rule "applyEq" (formula "36") (term "1,0") (ifseqformula "1"))
               (builtin "One Step Simplification" (formula "36"))
               (rule "closeTrue" (formula "36"))
            )
            (branch "CUT: o_0 = null FALSE"
               (builtin "One Step Simplification" (formula "37"))
               (rule "notRight" (formula "37"))
               (rule "replace_known_left" (formula "2") (term "0,0,1,1,0,0") (ifseqformula "1"))
               (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "37")))
               (rule "arrayLengthIsAShort" (formula "21") (term "1,0"))
               (builtin "One Step Simplification" (formula "21"))
               (rule "true_left" (formula "21"))
               (rule "arrayLengthNotNegative" (formula "21") (term "1,0"))
               (rule "arrayLengthNotNegative" (formula "11") (term "1,1,0"))
               (rule "arrayLengthIsAShort" (formula "12") (term "1,1,0"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "true_left" (formula "12"))
               (rule "ifthenelse_split" (formula "2") (term "0"))
               (branch "¬f_0 = java.lang.Object::<created> ∧ o_0 = result_0 TRUE"
                  (rule "andLeft" (formula "2"))
                  (rule "notLeft" (formula "2"))
                  (rule "applyEqReverse" (formula "42") (term "1") (ifseqformula "3"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "eqSymm" (formula "41"))
                  (rule "applyEq" (formula "41") (term "1,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "40") (term "0") (ifseqformula "2"))
                  (rule "applyEq" (formula "40") (term "1,1") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "2"))
                  (rule "close" (formula "36") (ifseqformula "1"))
               )
               (branch "¬f_0 = java.lang.Object::<created> ∧ o_0 = result_0 FALSE"
                  (rule "close" (formula "41") (ifseqformula "2"))
               )
            )
         )
      )
      (branch "Exceptional Post (sort)"
         (builtin "One Step Simplification" (formula "15"))
         (builtin "One Step Simplification" (formula "21"))
         (rule "false_right" (formula "20"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "11") (term "1") (ifseqformula "9"))
         (rule "translateJavaSubInt" (formula "15") (term "1,1,0,0,0,1,0,1,1"))
         (rule "translateJavaAddInt" (formula "15") (term "0,2,2,0,1,0,0,1,0,1,1"))
         (rule "translateJavaAddInt" (formula "20") (term "0,2,2,0,1,0,0,1,0,0,0,1"))
         (rule "translateJavaSubInt" (formula "20") (term "1,1,0,0,0,1,0,0,0,1"))
         (rule "sub_literals" (formula "7") (term "2,1,0"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "sub_literals" (formula "13") (term "2,1,0"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "andLeft" (formula "15"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "16") (term "1,0") (ifseqformula "15"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "16") (term "0,1,0") (ifseqformula "9"))
         (rule "andLeft" (formula "16"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "16"))
         (rule "andLeft" (formula "18"))
         (rule "notLeft" (formula "16"))
         (rule "close" (formula "20") (ifseqformula "19"))
      )
      (branch "Pre (sort)"
         (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "15")) (ifInst ""  (formula "15")))
         (rule "false_right" (formula "18"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "11") (term "1") (ifseqformula "9"))
         (rule "wellFormedAnonEQ" (formula "18") (term "0,1") (ifseqformula "9"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "1,1") (ifseqformula "9"))
         (rule "sub_literals" (formula "7") (term "2,1,0"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "sub_literals" (formula "13") (term "2,1,0"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "leq_literals" (formula "18") (term "0,0,1,0"))
         (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "1")) (ifInst ""  (formula "8")) (ifInst ""  (formula "14")))
         (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "16"))
         (builtin "One Step Simplification" (formula "4"))
         (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "15"))
         (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "14")))
         (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "11"))
         (builtin "One Step Simplification" (formula "18"))
         (rule "narrowSelectArrayType" (formula "7") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "16"))
         (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "18") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "18") (term "0,1"))
         (rule "inEqSimp_homoInEq0" (formula "18") (term "1,0,1,1"))
         (rule "polySimp_pullOutFactor1" (formula "18") (term "0,1,0,1,1"))
         (rule "add_literals" (formula "18") (term "1,0,1,0,1,1"))
         (rule "times_zero_1" (formula "18") (term "0,1,0,1,1"))
         (rule "qeq_literals" (formula "18") (term "1,0,1,1"))
         (builtin "One Step Simplification" (formula "18"))
         (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
         (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
         (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,0"))
         (rule "mul_literals" (formula "18") (term "0,1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,0"))
         (rule "nonNull" (formula "18") (term "1,1,1,1") (inst "i=i"))
         (rule "greater_literals" (formula "18") (term "0,1,1,1,1,1"))
         (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "15")))
         (rule "sub_literals" (formula "18") (term "2,1,0,1,1,1,1"))
         (builtin "One Step Simplification" (formula "18"))
         (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,1,1,1,1"))
         (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,1,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1,1,1,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,1,1,1,1"))
         (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,1,1,1,1"))
         (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,1,1,1,1"))
         (rule "mul_literals" (formula "18") (term "0,1,1,0,0,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,1,1,1,1"))
         (rule "replace_known_left" (formula "18") (term "1,1,1,1") (ifseqformula "13"))
         (builtin "One Step Simplification" (formula "18"))
         (rule "nnf_imp2or" (formula "7") (term "0"))
         (rule "nnf_imp2or" (formula "13") (term "0"))
         (rule "nnf_imp2or" (formula "18") (term "0,0"))
         (rule "nnf_notAnd" (formula "7") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
         (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
         (rule "mul_literals" (formula "7") (term "1,0,0,0"))
         (rule "nnf_notAnd" (formula "13") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
         (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
         (rule "mul_literals" (formula "13") (term "1,0,0,0"))
         (rule "nnf_notAnd" (formula "18") (term "0,0,0"))
         (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,0"))
         (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,0"))
         (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,0"))
         (rule "add_zero_left" (formula "18") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0,0"))
         (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "18") (term "0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,0"))
         (rule "mul_literals" (formula "18") (term "1,0,0,0,0"))
         (rule "commute_or_2" (formula "7") (term "0"))
         (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "6") (ifseqformula "3"))
         (rule "andLeft" (formula "6"))
         (rule "notLeft" (formula "7"))
         (rule "andLeft" (formula "6"))
         (rule "notLeft" (formula "7"))
         (rule "andLeft" (formula "6"))
         (rule "notLeft" (formula "7"))
         (rule "andLeft" (formula "6"))
         (rule "notLeft" (formula "7"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "notLeft" (formula "6"))
         (rule "notLeft" (formula "6"))
         (rule "nonNull" (formula "8") (inst "i=i"))
         (rule "greater_literals" (formula "8") (term "0,1"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "sub_literals" (formula "8") (term "2,1,0,1"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "andLeft" (formula "8"))
         (rule "notLeft" (formula "8"))
         (rule "narrowSelectArrayType" (formula "8") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "16"))
         (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
         (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "7") (inst "i=i"))
         (rule "sub_literals" (formula "7") (term "2,1,0,1,1"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "greater_literals" (formula "7") (term "0,1"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "andLeft" (formula "7"))
         (rule "notLeft" (formula "7"))
         (rule "narrowSelectArrayType" (formula "7") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "16"))
         (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
         (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "6") (inst "i=i"))
         (rule "greater_literals" (formula "6") (term "0,1"))
         (builtin "One Step Simplification" (formula "6"))
         (rule "sub_literals" (formula "6") (term "2,1,0,1"))
         (builtin "One Step Simplification" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "notLeft" (formula "6"))
         (rule "narrowSelectArrayType" (formula "6") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "16"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
         (rule "nnf_imp2or" (formula "8") (term "0"))
         (rule "nnf_imp2or" (formula "7") (term "0"))
         (rule "nnf_imp2or" (formula "6") (term "0"))
         (rule "nnf_notAnd" (formula "8") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
         (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
         (rule "mul_literals" (formula "8") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "7") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
         (rule "mul_literals" (formula "7") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
         (rule "mul_literals" (formula "7") (term "1,0,0,0"))
         (rule "nnf_notAnd" (formula "6") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
         (rule "mul_literals" (formula "6") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "6") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
         (rule "mul_literals" (formula "6") (term "1,0,0,0"))
         (rule "commute_or_2" (formula "15") (term "0"))
         (rule "commute_or" (formula "9") (term "0,0"))
         (rule "commute_or_2" (formula "8") (term "0"))
         (rule "commute_or_2" (formula "7") (term "0"))
         (rule "commute_or_2" (formula "6") (term "0"))
         (rule "commute_or" (formula "15") (term "0,0"))
         (rule "commute_or" (formula "8") (term "0,0"))
         (rule "commute_or" (formula "7") (term "0,0"))
         (rule "commute_or" (formula "6") (term "0,0"))
         (rule "equalityToSeqGetAndSeqLenLeft" (formula "14") (inst "iv=iv"))
         (rule "andLeft" (formula "14"))
         (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
         (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "16"))
         (builtin "One Step Simplification" (formula "14"))
         (rule "true_left" (formula "14"))
         (rule "applyEq" (formula "14") (term "0,0,1,0,0,1,0,0") (ifseqformula "15"))
         (rule "applyEq" (formula "14") (term "0,0,1,0") (ifseqformula "15"))
         (builtin "One Step Simplification" (formula "14"))
         (rule "true_left" (formula "14"))
         (rule "arrayLengthIsAShort" (formula "29") (term "0,1"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "cut_direct" (formula "29") (term "1"))
         (branch "CUT: result_0.length ≥ 0 TRUE"
            (builtin "One Step Simplification" (formula "30"))
            (rule "allRight" (formula "30") (inst "sk=i_4"))
            (rule "orRight" (formula "30"))
            (rule "notRight" (formula "31"))
            (rule "orRight" (formula "31"))
            (rule "inEqSimp_geqRight" (formula "32"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "inEqSimp_leqRight" (formula "32"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "polySimp_elimOne" (formula "2") (term "0"))
            (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_8"))
            (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "16"))
            (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "31")) (ifInst ""  (formula "30")))
            (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
            (rule "hideAuxiliaryEq" (formula "3"))
            (rule "arrayLengthNotNegative" (formula "13") (term "1,1,0"))
            (rule "arrayLengthIsAShort" (formula "14") (term "1,1,0"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "allLeft" (formula "20") (inst "t=i_4"))
            (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
            (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "20") (term "0,0,1"))
            (rule "leq_literals" (formula "20") (term "0,1"))
            (builtin "One Step Simplification" (formula "20"))
            (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "1"))
            (rule "qeq_literals" (formula "20") (term "0,1"))
            (builtin "One Step Simplification" (formula "20"))
            (rule "notLeft" (formula "20"))
            (rule "pullOutSelect" (formula "21") (term "0") (inst "selectSK=arr_9"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "33")) (ifInst ""  (formula "32")))
            (rule "applyEqReverse" (formula "22") (term "0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "narrowSelectArrayType" (formula "21") (term "0") (ifseqformula "15") (ifseqformula "32"))
            (rule "close" (formula "21") (ifseqformula "3"))
         )
         (branch "CUT: result_0.length ≥ 0 FALSE"
            (builtin "One Step Simplification" (formula "30"))
            (rule "false_right" (formula "30"))
            (rule "inEqSimp_geqRight" (formula "29"))
            (rule "times_zero_1" (formula "1") (term "1,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "arrayLengthNotNegative" (formula "10") (term "1,1,0"))
            (rule "arrayLengthIsAShort" (formula "11") (term "1,1,0"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "arrayLengthNotNegative" (formula "17") (term "1,1,0"))
            (rule "inEqSimp_contradInEq0" (formula "17") (ifseqformula "1"))
            (rule "qeq_literals" (formula "17") (term "0"))
            (builtin "One Step Simplification" (formula "17"))
            (rule "closeFalse" (formula "17"))
         )
      )
   )
   (branch "Null Reference (result_1 = null)"
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Exceptional Post (copyOf)"
   (builtin "One Step Simplification" (formula "9"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "translateJavaAddInt" (formula "11") (term "0,2,2,0,1,0,0,1,0,0,0,1"))
   (rule "translateJavaSubInt" (formula "11") (term "1,1,0,0,0,1,0,0,0,1"))
   (rule "andLeft" (formula "9"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "10") (term "1,0") (ifseqformula "9"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "12"))
   (rule "notLeft" (formula "10"))
   (rule "close" (formula "14") (ifseqformula "13"))
)
(branch
   (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "7")) (ifInst ""  (formula "1")) (ifInst ""  (formula "4")))
   (rule "nonNull" (formula "7") (inst "i=i") (userinteraction))
   (rule "greater_literals" (formula "7") (term "0,1"))
   (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "9")))
   (rule "closeFalse" (formula "7"))
)
)

}
