\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Fri Mar 18 17:53:20 CET 2016
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=5000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Fri Mar 18 17:53:20 CET 2016
name=verif.selectvoting.system.core.MixServer[verif.selectvoting.system.core.MixServer\\:\\:sort([[B)].JML normal_behavior operation contract.0
contract=verif.selectvoting.system.core.MixServer[verif.selectvoting.system.core.MixServer\\:\\:sort([[B)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mihai" ) (keyVersion "99336ad04cdaa9fea6ec698b0fe69574b8516e91"))
(keyLog "1" (keyUser "mihai" ) (keyVersion "99336ad04cdaa9fea6ec698b0fe69574b8516e91"))

(autoModeTime "31398")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1") (newnames "entr_arr,self,result,exc,heapAtPre,o,f"))
(rule "translateJavaSubInt" (formula "1") (term "1,1,0,0,0,1,0,0,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "0,2,2,0,1,0,0,1,0,0,0,1,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "4"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "11") (term "1,0,0,1,0,1"))
(rule "polySimp_elimSub" (formula "11") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "1,1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_addComm0" (formula "11") (term "0,2,2,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_addComm0" (formula "11") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,0,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0,1,0,0,0,1"))
(rule "add_literals" (formula "11") (term "0,0,0,1,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,0,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
(rule "assignment" (formula "11") (term "1"))
(builtin "One Step Simplification" (formula "11"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
(rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,0,1,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "0,1,1,0,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,0,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "0,1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,0,1,0,0,0,1"))
(rule "nonNull" (formula "8") (inst "i=i"))
(rule "sub_literals" (formula "8") (term "2,1,0,1,1"))
(builtin "One Step Simplification" (formula "8"))
(rule "greater_literals" (formula "8") (term "0,1"))
(builtin "One Step Simplification" (formula "8"))
(rule "andLeft" (formula "8"))
(rule "notLeft" (formula "8"))
(rule "replace_known_right" (formula "4") (term "0") (ifseqformula "9"))
(builtin "One Step Simplification" (formula "4"))
(rule "narrowSelectArrayType" (formula "8") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "9"))
(rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
(rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
(rule "nonNull" (formula "12") (term "1,1,1,1,1,1,0,0,0,1") (inst "i=i"))
(rule "greater_literals" (formula "12") (term "0,1,1,1,1,1,1,1,0,0,0,1"))
(builtin "One Step Simplification" (formula "12"))
(rule "sub_literals" (formula "12") (term "2,1,0,1,1,1,1,1,1,1,0,0,0,1"))
(builtin "One Step Simplification" (formula "12"))
(rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,1,1,1,1,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,1,1,1,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1,1,1,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,1,1,1,1,1,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,1,1,1,1,1,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,1,1,1,1,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "12") (term "0,1,1,0,0,1,1,1,1,1,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,1,1,1,1,1,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,1,1,1,1,1,1,1,0,0,0,1"))
(rule "nnf_imp2or" (formula "6") (term "0"))
(rule "nnf_imp2or" (formula "8") (term "0"))
(rule "nnf_notAnd" (formula "6") (term "0,0"))
(rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
(rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
(rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
(rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "6") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
(rule "mul_literals" (formula "6") (term "1,0,0,0"))
(rule "nnf_notAnd" (formula "8") (term "0,0"))
(rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
(rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
(rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
(rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
(rule "mul_literals" (formula "8") (term "1,0,0,0"))
(rule "nnf_imp2or" (formula "12") (term "0,0,1,0,0,0,1"))
(rule "nnf_imp2or" (formula "12") (term "0,0,1,1,1,1,0,0,0,1"))
(rule "nnf_notAnd" (formula "12") (term "0,0,0,1,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0,1,0,0,0,1"))
(rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "12") (term "0,1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,0,1,0,0,0,1"))
(rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,0,1,0,0,0,1"))
(rule "add_zero_right" (formula "12") (term "0,0,0,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "12") (term "1,0,0,0,0,1,0,0,0,1"))
(rule "nnf_imp2or" (formula "12") (term "0,1,1,1,1,1,1,1,0,0,0,1"))
(rule "nnf_notAnd" (formula "12") (term "0,0,0,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,0,1,1,1,1,0,0,0,1"))
(rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,0,1,1,1,1,0,0,0,1"))
(rule "add_zero_right" (formula "12") (term "0,0,0,0,0,0,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,1,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "12") (term "1,0,0,0,0,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0,1,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0,1,1,1,1,0,0,0,1"))
(rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,1,1,1,1,0,0,0,1"))
(rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,1,1,1,1,0,0,0,1"))
(rule "nnf_notAnd" (formula "12") (term "0,0,1,1,1,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,1,1,1,1,1,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,1,1,1,1,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,1,1,1,1,1,1,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,1,1,1,1,1,1,1,0,0,0,1"))
(rule "add_literals" (formula "12") (term "0,0,0,1,0,0,1,1,1,1,1,1,1,0,0,0,1"))
(rule "add_zero_left" (formula "12") (term "0,0,1,0,0,1,1,1,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,1,1,1,1,1,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1,1,1,1,1,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,1,1,1,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,1,1,1,1,1,1,1,0,0,0,1"))
(rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,1"))
(rule "add_zero_right" (formula "12") (term "0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,1,1,1,1,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "12") (term "1,0,0,0,1,1,1,1,1,1,1,0,0,0,1"))
(rule "commute_or_2" (formula "6") (term "0"))
(rule "commute_or_2" (formula "8") (term "0"))
(rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "7") (ifseqformula "3"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "notLeft" (formula "9"))
(rule "andLeft" (formula "7"))
(rule "notLeft" (formula "9"))
(rule "notLeft" (formula "8"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "notLeft" (formula "9"))
(rule "andLeft" (formula "7"))
(rule "nonNull" (formula "9") (inst "i=i"))
(rule "sub_literals" (formula "9") (term "2,1,0,1,1"))
(builtin "One Step Simplification" (formula "9"))
(rule "greater_literals" (formula "9") (term "0,1"))
(builtin "One Step Simplification" (formula "9"))
(rule "andLeft" (formula "9"))
(rule "notLeft" (formula "9"))
(rule "narrowSelectArrayType" (formula "9") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "11"))
(rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
(rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
(rule "nonNull" (formula "8") (inst "i=i"))
(rule "greater_literals" (formula "8") (term "0,1"))
(builtin "One Step Simplification" (formula "8"))
(rule "sub_literals" (formula "8") (term "2,1,0,1"))
(builtin "One Step Simplification" (formula "8"))
(rule "andLeft" (formula "8"))
(rule "notLeft" (formula "8"))
(rule "narrowSelectArrayType" (formula "8") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "11"))
(rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
(rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
(rule "nonNull" (formula "7") (inst "i=i"))
(rule "sub_literals" (formula "7") (term "2,1,0,1,1"))
(builtin "One Step Simplification" (formula "7"))
(rule "greater_literals" (formula "7") (term "0,1"))
(builtin "One Step Simplification" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "notLeft" (formula "7"))
(rule "narrowSelectArrayType" (formula "7") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "11"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
(rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
(rule "nnf_imp2or" (formula "9") (term "0"))
(rule "nnf_imp2or" (formula "8") (term "0"))
(rule "nnf_imp2or" (formula "7") (term "0"))
(rule "nnf_notAnd" (formula "9") (term "0,0"))
(rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
(rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
(rule "add_literals" (formula "9") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
(rule "mul_literals" (formula "9") (term "1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
(rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
(rule "nnf_notAnd" (formula "8") (term "0,0"))
(rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
(rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
(rule "add_literals" (formula "8") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
(rule "mul_literals" (formula "8") (term "1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
(rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
(rule "nnf_notAnd" (formula "7") (term "0,0"))
(rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
(rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
(rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
(rule "mul_literals" (formula "7") (term "1,0,0,0,0,0"))
(rule "add_literals" (formula "7") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
(rule "mul_literals" (formula "7") (term "1,0,0,0"))
(rule "commute_or" (formula "6") (term "0,0"))
(rule "commute_or" (formula "10") (term "0,0"))
(rule "commute_or_2" (formula "9") (term "0"))
(rule "commute_or_2" (formula "8") (term "0"))
(rule "commute_or_2" (formula "7") (term "0"))
(rule "methodBodyExpand" (formula "21") (term "1") (newnames "heapBefore_sort,savedHeapBefore_sort"))
(builtin "One Step Simplification" (formula "21"))
(rule "variableDeclarationAssign" (formula "21") (term "1"))
(rule "variableDeclaration" (formula "21") (term "1") (newnames "result_1"))
(rule "commute_or" (formula "9") (term "0,0"))
(rule "commute_or" (formula "8") (term "0,0"))
(rule "commute_or" (formula "7") (term "0,0"))
(builtin "Use Operation Contract" (formula "21") (newnames "heapBefore_copyOf,result_0,exc_0,heapAfter_copyOf,anon_heap_copyOf") (contract "verif.selectvoting.system.core.Utils[verif.selectvoting.system.core.Utils::copyOf([[B)].JML normal_behavior operation contract.0"))
(branch "Post (copyOf)"
   (builtin "One Step Simplification" (formula "12"))
   (builtin "One Step Simplification" (formula "23"))
   (rule "andLeft" (formula "12"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "1,1,0") (ifseqformula "12"))
   (rule "andLeft" (formula "13"))
   (rule "andLeft" (formula "13"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "16"))
   (rule "andLeft" (formula "16"))
   (rule "notLeft" (formula "16"))
   (rule "notLeft" (formula "16"))
   (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "17"))
   (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "18")))
   (rule "assignment" (formula "29") (term "1"))
   (builtin "One Step Simplification" (formula "29"))
   (rule "nonNull" (formula "16") (inst "i=i"))
   (rule "greater_literals" (formula "16") (term "0,1"))
   (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "17")))
   (rule "sub_literals" (formula "16") (term "2,1,0"))
   (builtin "One Step Simplification" (formula "16"))
   (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
   (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
   (rule "nnf_imp2or" (formula "16") (term "0"))
   (rule "nnf_notAnd" (formula "16") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
   (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
   (rule "mul_literals" (formula "16") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
   (rule "commute_or_2" (formula "16") (term "0"))
   (rule "commute_or" (formula "16") (term "0,0"))
   (rule "arrayLengthNotNegative" (formula "6") (term "1,1,0"))
   (rule "arrayLengthIsAShort" (formula "7") (term "1,1,0"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "true_left" (formula "7"))
   (rule "arrayLengthIsAShort" (formula "11") (term "1,1,0"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "true_left" (formula "11"))
   (rule "arrayLengthNotNegative" (formula "11") (term "1,1,0"))
   (rule "ifElseUnfold" (formula "31") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "31") (term "1") (newnames "x"))
   (rule "inequality_comparison_simple" (formula "31") (term "1"))
   (builtin "One Step Simplification" (formula "31"))
   (rule "replace_known_right" (formula "31") (term "0,0,1,0") (ifseqformula "19"))
   (builtin "One Step Simplification" (formula "31"))
   (rule "arrayLengthIsAShort" (formula "10") (term "1,1,0"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "true_left" (formula "10"))
   (rule "arrayLengthNotNegative" (formula "10") (term "1,1,0"))
   (rule "arrayLengthNotNegative" (formula "9") (term "1,1,0"))
   (rule "arrayLengthIsAShort" (formula "10") (term "1,1,0"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "true_left" (formula "10"))
   (rule "arrayLengthIsAShort" (formula "8") (term "1,1,0"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "true_left" (formula "8"))
   (rule "arrayLengthNotNegative" (formula "8") (term "1,1,0"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "7") (term "0,1,1,0") (ifseqformula "1"))
   (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "34"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "equalityToSeqGetAndSeqLenLeft" (formula "21") (inst "iv=iv"))
   (rule "andLeft" (formula "21"))
   (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
   (rule "apply_eq_monomials" (formula "22") (term "1,0,0,1,0,0") (ifseqformula "21"))
   (rule "polySimp_rightDist" (formula "22") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "22") (term "1,0,1,0,0,1,0,0"))
   (rule "polySimp_elimOne" (formula "22") (term "1,0,1,0,0,1,0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "22") (term "1,0,0,1,0,0"))
   (rule "add_literals" (formula "22") (term "1,1,1,0,0,1,0,0"))
   (rule "times_zero_1" (formula "22") (term "1,1,0,0,1,0,0"))
   (rule "add_zero_right" (formula "22") (term "1,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
   (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
   (rule "nnf_imp2or" (formula "22") (term "0"))
   (rule "nnf_notAnd" (formula "22") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
   (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "22") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
   (rule "mul_literals" (formula "22") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
   (rule "commute_or_2" (formula "22") (term "0"))
   (rule "commute_or" (formula "22") (term "0,0"))
   (rule "ifElseSplit" (formula "37"))
   (branch "if x true"
      (builtin "One Step Simplification" (formula "38"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "methodCallUnfoldArguments" (formula "37") (term "1"))
      (rule "variableDeclarationAssign" (formula "37") (term "1"))
      (rule "variableDeclaration" (formula "37") (term "1") (newnames "var"))
      (rule "assignment" (formula "37") (term "1"))
      (builtin "One Step Simplification" (formula "37"))
      (rule "variableDeclarationAssign" (formula "37") (term "1"))
      (rule "variableDeclaration" (formula "37") (term "1") (newnames "var_1"))
      (rule "assignment" (formula "37") (term "1"))
      (builtin "One Step Simplification" (formula "37"))
      (rule "variableDeclarationAssign" (formula "37") (term "1"))
      (rule "variableDeclaration" (formula "37") (term "1") (newnames "var_2"))
      (rule "assignment_read_length" (formula "37") (term "1"))
      (branch "Normal Execution (result_1 != null)"
         (builtin "One Step Simplification" (formula "38"))
         (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "25")))
         (rule "false_right" (formula "37"))
         (builtin "Use Operation Contract" (formula "37") (newnames "heapBefore_sort_0,exc_1,heapAfter_sort,anon_heap_sort") (contract "verif.selectvoting.system.core.Utils[verif.selectvoting.system.core.Utils::sort([[B,int,int)].JML normal_behavior operation contract.0"))
         (branch "Post (sort)"
            (builtin "One Step Simplification" (formula "39"))
            (builtin "One Step Simplification" (formula "26"))
            (rule "translateJavaAddInt" (formula "26") (term "0,2,2,0,1,0,0,1,0,1,1"))
            (rule "translateJavaSubInt" (formula "26") (term "1,1,0,0,0,1,0,1,1"))
            (rule "andLeft" (formula "26"))
            (rule "andLeft" (formula "27"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "29"))
            (rule "polySimp_elimSub" (formula "29") (term "1,1,0,0"))
            (rule "mul_literals" (formula "29") (term "1,1,1,0,0"))
            (rule "polySimp_addComm0" (formula "29") (term "0,2,2,0,1,0"))
            (rule "polySimp_addComm0" (formula "29") (term "1,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
            (rule "blockEmpty" (formula "43") (term "1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0"))
            (rule "mul_literals" (formula "30") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "29") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
            (rule "array2seqDef" (formula "28") (term "0") (inst "u=u"))
            (rule "array2seqDef" (formula "28") (term "1") (inst "u=u"))
            (rule "nnf_imp2or" (formula "30") (term "0"))
            (rule "nnf_imp2or" (formula "29") (term "0"))
            (rule "nnf_notAnd" (formula "30") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0"))
            (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "30") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
            (rule "mul_literals" (formula "30") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "30") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "29") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0"))
            (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "29") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0"))
            (rule "mul_literals" (formula "29") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0"))
            (rule "mul_literals" (formula "29") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
            (rule "commute_or_2" (formula "30") (term "0"))
            (rule "commute_or" (formula "30") (term "0,0"))
            (rule "methodCallReturn" (formula "43") (term "1"))
            (rule "assignment" (formula "43") (term "1"))
            (builtin "One Step Simplification" (formula "43"))
            (rule "methodCallEmpty" (formula "43") (term "1"))
            (rule "tryEmpty" (formula "43") (term "1"))
            (rule "emptyModality" (formula "43") (term "1"))
            (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "29")) (ifInst ""  (formula "32")) (ifInst ""  (formula "31")) (ifInst ""  (formula "31")))
            (rule "andRight" (formula "43") (userinteraction))
            (branch "Case 1"
               (rule "andRight" (formula "43") (userinteraction))
               (branch "Case 1"
                  (rule "pullOut" (formula "28") (term "0") (inst "sk=seqDef_0") (userinteraction))
                  (rule "pullOut" (formula "29") (term "1") (inst "sk=seqDef_1") (userinteraction))
                  (rule "cut" (inst "cutFormula=seqDef_0 = array2seq(heapAfter_sort, result_0)") (userinteraction))
                  (branch "CUT: seqDef_0 = array2seq(heapAfter_sort, result_0) TRUE"
                     (rule "applyEq" (formula "31") (term "0") (ifseqformula "1") (userinteraction))
                     (rule "cut" (inst "cutFormula=seqDef_1 = array2seq(heapAfter_copyOf, result_0)") (userinteraction))
                     (branch "CUT: seqDef_1 = array2seq(heapAfter_copyOf, result_0) TRUE"
                        (rule "applyEq" (formula "32") (term "1") (ifseqformula "1") (userinteraction))
                        (rule "cut" (inst "cutFormula=  array2seq2d(heapAfter_sort, entr_arr)
= array2seq2d(heapAfter_copyOf, entr_arr)") (userinteraction))
                        (branch
                           (rule "applyEq" (formula "48") (term "1") (ifseqformula "1") (userinteraction))
                           (rule "applyEqReverse" (formula "48") (term "1") (ifseqformula "1") (userinteraction))
                           (rule "applyEq" (formula "48") (term "1") (ifseqformula "1") (userinteraction))
                           (rule "eqSymm" (formula "26") (userinteraction))
                           (rule "applyEq" (formula "48") (term "1") (ifseqformula "26") (userinteraction))
                           (rule "seqPermDefLeft" (formula "33") (inst "s=s") (inst "iv=iv") (userinteraction))
                           (rule "andLeft" (formula "33") (userinteraction))
                           (rule "seqPermDef" (formula "50") (inst "s=s") (inst "iv=iv") (userinteraction))
                           (rule "exLeft" (formula "34") (inst "sk=s_1") (userinteraction))
                           (rule "andLeft" (formula "34") (userinteraction))
                           (rule "andLeft" (formula "34") (userinteraction))
                           (rule "seqNPermRange" (formula "35") (inst "iv=iv") (userinteraction))
                           (rule "andRight" (formula "53") (userinteraction))
                           (branch
                              (rule "array2seq2dDef" (formula "53") (term "0,0") (inst "u=u") (userinteraction))
                              (rule "array2seq2dDef" (formula "53") (term "0,1") (inst "u=u") (userinteraction))
                              (rule "eqSymm" (formula "26"))
                              (rule "eqSymm" (formula "2"))
                              (rule "eqSymm" (formula "3"))
                              (rule "eqSymm" (formula "34"))
                              (rule "lenOfSeqDef" (formula "53") (term "1"))
                              (rule "polySimp_elimSub" (formula "53") (term "1,1"))
                              (rule "times_zero_2" (formula "53") (term "1,1,1"))
                              (rule "add_zero_right" (formula "53") (term "1,1"))
                              (rule "lenOfSeqDef" (formula "53") (term "0"))
                              (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                              (rule "times_zero_2" (formula "53") (term "1,1,0"))
                              (rule "add_zero_right" (formula "53") (term "1,0"))
                              (builtin "One Step Simplification" (formula "53"))
                              (rule "closeTrue" (formula "53"))
                           )
                           (branch "Case 2"
                              (rule "instEx" (formula "36") (term "0") (ifseqformula "53") (userinteraction))
                              (rule "andRight" (formula "41") (userinteraction))
                              (branch "Case 1"
                                 (rule "array2seq2dDef" (formula "41") (term "0,1,0") (inst "u=u") (userinteraction))
                                 (rule "eqSymm" (formula "54") (term "1,0,1,0"))
                                 (rule "eqSymm" (formula "26"))
                                 (rule "eqSymm" (formula "2"))
                                 (rule "eqSymm" (formula "3"))
                                 (rule "eqSymm" (formula "34"))
                                 (rule "eqSymm" (formula "41") (term "0"))
                                 (rule "replace_known_left" (formula "41") (term "1") (ifseqformula "36"))
                                 (builtin "One Step Simplification" (formula "41"))
                                 (rule "lenOfSeqDef" (formula "41") (term "0"))
                                 (rule "polySimp_elimSub" (formula "41") (term "1,0"))
                                 (rule "mul_literals" (formula "41") (term "1,1,0"))
                                 (rule "add_zero_right" (formula "41") (term "1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "37") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "54") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "54") (term "1,0,0,1,0,0,1,0"))
                                 (rule "polySimp_addComm1" (formula "54") (term "0,1,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "35") (term "1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "41") (term "0,0"))
                                 (rule "add_zero_right" (formula "41") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "37") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "35") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "54") (term "0,0,0,1,0"))
                                 (rule "applyEq" (formula "38") (term "1") (ifseqformula "2"))
                                 (rule "applyEq" (formula "37") (term "0,1,1,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "3"))
                                 (rule "eqSymm" (formula "33"))
                                 (rule "lenOfSeqDefEQ" (formula "33") (term "1") (ifseqformula "31"))
                                 (rule "eqSymm" (formula "33"))
                                 (rule "polySimp_elimSub" (formula "33") (term "1,0"))
                                 (rule "times_zero_2" (formula "33") (term "1,1,0"))
                                 (rule "add_zero_right" (formula "33") (term "1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0"))
                                 (rule "applyEq" (formula "54") (term "0,0,1,0,1,0") (ifseqformula "26"))
                                 (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "3"))
                                 (rule "lenOfSeqDefEQ" (formula "34") (term "0") (ifseqformula "31"))
                                 (rule "polySimp_elimSub" (formula "34") (term "1,0"))
                                 (rule "times_zero_2" (formula "34") (term "1,1,0"))
                                 (rule "add_zero_right" (formula "34") (term "1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0"))
                                 (rule "applyEq" (formula "25") (term "0,0,0,0,0") (ifseqformula "26"))
                                 (builtin "One Step Simplification" (formula "25"))
                                 (rule "true_left" (formula "25"))
                                 (rule "applyEq" (formula "24") (term "0,0") (ifseqformula "25"))
                                 (builtin "One Step Simplification" (formula "24"))
                                 (rule "true_left" (formula "24"))
                                 (rule "applyEq" (formula "36") (term "0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "35") (term "0,0,1,0") (ifseqformula "3"))
                                 (rule "eqSymm" (formula "35") (term "1,0"))
                                 (rule "applyEq" (formula "31") (term "0,1") (ifseqformula "2"))
                                 (rule "lenOfSeqDefEQ" (formula "31") (term "1") (ifseqformula "30"))
                                 (rule "eqSymm" (formula "31"))
                                 (rule "polySimp_elimSub" (formula "31") (term "1,0"))
                                 (rule "times_zero_2" (formula "31") (term "1,1,0"))
                                 (rule "add_zero_right" (formula "31") (term "1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "true_left" (formula "31"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "32") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "34") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "51") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "51") (term "0,1,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "51") (term "0,1,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "32") (term "1,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,1,0"))
                                 (rule "mul_literals" (formula "32") (term "0,1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "32") (term "1,1,1,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "38") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "38") (term "0,0,0"))
                                 (rule "polySimp_elimOne" (formula "38") (term "0,0,0"))
                                 (rule "array2seqDef" (formula "2") (term "0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "2") (term "0") (inst "u=u"))
                                 (rule "eqSeqDef2" (formula "27") (inst "iv=iv") (ifseqformula "27"))
                                 (builtin "One Step Simplification" (formula "27"))
                                 (rule "true_left" (formula "27"))
                                 (rule "eqSeqDef2" (formula "27") (inst "iv=iv") (ifseqformula "27"))
                                 (builtin "One Step Simplification" (formula "27"))
                                 (rule "true_left" (formula "27"))
                                 (rule "nnf_ex2all" (formula "47"))
                                 (rule "nnf_imp2or" (formula "31") (term "0"))
                                 (rule "nnf_imp2or" (formula "29") (term "0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0"))
                                 (rule "nnf_notAnd" (formula "31") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "31") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "31") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0"))
                                 (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "29") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "29") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0"))
                                 (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "29") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0"))
                                 (rule "mul_literals" (formula "29") (term "1,0,0,0"))
                                 (rule "nnf_notAll" (formula "1") (term "1,0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                 (rule "nnf_imp2or" (formula "1") (term "0,0,1,0"))
                                 (rule "nnf_notOr" (formula "1") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "commute_or_2" (formula "31") (term "0"))
                                 (rule "commute_or" (formula "1") (term "0,0"))
                                 (rule "commute_or" (formula "31") (term "0,0"))
                                 (rule "cnf_rightDist" (formula "29") (term "0"))
                                 (rule "distr_forallAnd" (formula "29"))
                                 (rule "andLeft" (formula "29"))
                                 (rule "commute_or" (formula "30") (term "0"))
                                 (rule "commute_and_2" (formula "1") (term "0,1,0"))
                                 (rule "commute_and" (formula "1") (term "0,0,1,0"))
                                 (rule "ifthenelse_split" (formula "28") (term "0"))
                                 (branch "result_0.length >= 0 TRUE"
                                    (rule "eqSymm" (formula "29"))
                                    (rule "applyEq" (formula "31") (term "1,1,0,0") (ifseqformula "29"))
                                    (rule "applyEq" (formula "30") (term "1,1,0,0") (ifseqformula "29"))
                                    (rule "applyEq" (formula "31") (term "1,1,1,0") (ifseqformula "29"))
                                    (rule "applyEq" (formula "33") (term "1,1,0") (ifseqformula "29"))
                                    (rule "applyEq" (formula "37") (term "1") (ifseqformula "29"))
                                    (builtin "One Step Simplification" (formula "37"))
                                    (rule "orRight" (formula "37"))
                                    (rule "eqSymm" (formula "38"))
                                    (rule "inEqSimp_geqRight" (formula "37"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "38"))
                                    (rule "add_zero_right" (formula "1") (term "1"))
                                    (rule "inEqSimp_contradEq3" (formula "38") (ifseqformula "1"))
                                    (rule "times_zero_1" (formula "38") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "38") (term "0,0"))
                                    (rule "qeq_literals" (formula "38") (term "0"))
                                    (builtin "One Step Simplification" (formula "38"))
                                    (rule "false_right" (formula "38"))
                                    (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "29"))
                                    (rule "qeq_literals" (formula "1") (term "0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "result_0.length >= 0 FALSE"
                                    (rule "eqSymm" (formula "28"))
                                    (rule "inEqSimp_geqRight" (formula "36"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "applyEq" (formula "30") (term "1,1,0,0") (ifseqformula "29"))
                                    (rule "applyEqRigid" (formula "33") (term "1,1,0") (ifseqformula "29"))
                                    (rule "applyEq" (formula "31") (term "1,1,0,0") (ifseqformula "29"))
                                    (rule "applyEq" (formula "31") (term "1,1,1,0") (ifseqformula "29"))
                                    (rule "add_zero_right" (formula "31") (term "1,1,0"))
                                    (rule "applyEqRigid" (formula "37") (term "1") (ifseqformula "29"))
                                    (builtin "One Step Simplification" (formula "37"))
                                    (rule "orRight" (formula "37"))
                                    (rule "notRight" (formula "37"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                    (rule "mul_literals" (formula "2") (term "1"))
                                    (rule "inEqSimp_contradEq7" (formula "38") (ifseqformula "1"))
                                    (rule "times_zero_1" (formula "38") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "38") (term "0,0"))
                                    (rule "leq_literals" (formula "38") (term "0"))
                                    (builtin "One Step Simplification" (formula "38"))
                                    (rule "false_right" (formula "38"))
                                    (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
                                    (rule "qeq_literals" (formula "1") (term "0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                              )
                              (branch "Case 2"
                                 (rule "allRight" (formula "41") (inst "sk=iv_4") (userinteraction))
                                 (rule "impRight" (formula "41") (userinteraction))
                                 (rule "array2seq2dDef" (formula "42") (term "0,0") (inst "u=u") (userinteraction))
                                 (rule "array2seq2dDef" (formula "42") (term "0,1") (inst "u=u") (userinteraction))
                                 (rule "instAll" (formula "42") (term "1,0") (ifseqformula "38") (userinteraction))
                                 (rule "impLeft" (formula "1") (userinteraction))
                                 (branch "Case 1"
                                    (rule "close" (formula "42") (ifseqformula "1") (userinteraction))
                                 )
                                 (branch "Case 2"
                                    (rule "array2seqDef" (formula "1") (term "0,0") (inst "u=u") (userinteraction))
                                    (rule "array2seqDef" (formula "1") (term "0,1") (inst "u=u") (userinteraction))
                                    (rule "andLeft" (formula "2"))
                                    (rule "eqSymm" (formula "37"))
                                    (rule "eqSymm" (formula "5"))
                                    (rule "eqSymm" (formula "6"))
                                    (rule "eqSymm" (formula "29"))
                                    (rule "eqSymm" (formula "57") (term "1,0,1,0"))
                                    (rule "getOfSeqDef" (formula "1") (term "0"))
                                    (rule "castDel" (formula "1") (term "1,0"))
                                    (rule "castDel" (formula "1") (term "2,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,2,1,0"))
                                    (rule "eqSymm" (formula "1"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,1") (ifseqformula "2"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "polySimp_elimSub" (formula "1") (term "1,0,1"))
                                    (rule "mul_literals" (formula "1") (term "1,1,0,1"))
                                    (rule "add_zero_right" (formula "1") (term "1,0,1"))
                                    (rule "getOfSeqDef" (formula "44") (term "0"))
                                    (rule "castDel" (formula "44") (term "1,0"))
                                    (rule "castDel" (formula "44") (term "2,0"))
                                    (rule "add_zero_right" (formula "44") (term "0,2,1,1,0"))
                                    (rule "eqSymm" (formula "44"))
                                    (rule "replace_known_left" (formula "44") (term "0,0,1") (ifseqformula "2"))
                                    (builtin "One Step Simplification" (formula "44"))
                                    (rule "polySimp_elimSub" (formula "44") (term "1,0,1"))
                                    (rule "mul_literals" (formula "44") (term "1,1,0,1"))
                                    (rule "add_zero_right" (formula "44") (term "1,0,1"))
                                    (rule "getOfSeqDef" (formula "1") (term "0"))
                                    (rule "castDel" (formula "1") (term "2,0"))
                                    (rule "castDel" (formula "1") (term "1,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,2,1,0"))
                                    (rule "polySimp_elimSub" (formula "1") (term "1,1,0,0"))
                                    (rule "times_zero_2" (formula "1") (term "1,1,1,0,0"))
                                    (rule "add_zero_right" (formula "1") (term "1,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "57") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,1,0,0,1,0"))
                                    (rule "polySimp_addComm1" (formula "57") (term "0,1,0,0,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "38") (term "1,1,0"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "3"))
                                    (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "3") (term "0"))
                                    (rule "getOfSeqDef" (formula "44") (term "0"))
                                    (rule "castDel" (formula "44") (term "2,0"))
                                    (rule "castDel" (formula "44") (term "1,0"))
                                    (rule "add_zero_right" (formula "44") (term "0,2,1,1,0"))
                                    (rule "polySimp_elimSub" (formula "44") (term "1,1,0,0"))
                                    (rule "times_zero_2" (formula "44") (term "1,1,1,0,0"))
                                    (rule "add_zero_right" (formula "44") (term "1,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "44") (term "0,1"))
                                    (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,0,1"))
                                    (rule "polySimp_addComm1" (formula "44") (term "0,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "57") (term "0,0,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "38") (term "0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "2"))
                                    (rule "inEqSimp_ltToLeq" (formula "44") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "44") (term "0,0,0"))
                                    (rule "applyEq" (formula "36") (term "0") (ifseqformula "37"))
                                    (rule "eqSymm" (formula "36"))
                                    (rule "applyEq" (formula "37") (term "0,0") (ifseqformula "6"))
                                    (rule "lenOfSeqDefEQ" (formula "37") (term "0") (ifseqformula "34"))
                                    (rule "polySimp_elimSub" (formula "37") (term "1,0"))
                                    (rule "times_zero_2" (formula "37") (term "1,1,0"))
                                    (rule "add_zero_right" (formula "37") (term "1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "37") (term "0,0"))
                                    (rule "applyEq" (formula "40") (term "0,0,1,0") (ifseqformula "6"))
                                    (rule "eqSymm" (formula "40") (term "1,0"))
                                    (rule "applyEq" (formula "28") (term "0,0,0,0,0") (ifseqformula "29"))
                                    (builtin "One Step Simplification" (formula "28"))
                                    (rule "true_left" (formula "28"))
                                    (rule "applyEq" (formula "40") (term "0") (ifseqformula "6"))
                                    (rule "applyEq" (formula "56") (term "0,0,1,0,1,0") (ifseqformula "28"))
                                    (rule "applyEq" (formula "27") (term "0,0") (ifseqformula "28"))
                                    (builtin "One Step Simplification" (formula "27"))
                                    (rule "true_left" (formula "27"))
                                    (rule "applyEq" (formula "39") (term "1") (ifseqformula "5"))
                                    (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "5"))
                                    (rule "lenOfSeqDefEQ" (formula "34") (term "0") (ifseqformula "33"))
                                    (rule "polySimp_elimSub" (formula "34") (term "1,0"))
                                    (rule "times_zero_2" (formula "34") (term "1,1,0"))
                                    (rule "add_zero_right" (formula "34") (term "1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0"))
                                    (rule "applyEq" (formula "37") (term "0,0,1,0") (ifseqformula "5"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "54") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "54") (term "0,1,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "54") (term "0,1,0,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "37") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "37") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "37") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "37") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,1,0"))
                                    (rule "polySimp_mulComm0" (formula "35") (term "1,1,1,0"))
                                    (rule "polySimp_rightDist" (formula "35") (term "1,1,1,0"))
                                    (rule "mul_literals" (formula "35") (term "0,1,1,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,1,0"))
                                    (rule "polySimp_elimOne" (formula "35") (term "1,1,1,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "35") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                    (rule "polySimp_elimOne" (formula "3") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "0,0,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "41") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "41") (term "0,0,1"))
                                    (rule "polySimp_elimOne" (formula "41") (term "0,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "41") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "41") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "41") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "41") (term "1,1,1,0,0"))
                                    (rule "array2seqDef" (formula "5") (term "0") (inst "u=u"))
                                    (rule "array2seqDef" (formula "5") (term "0") (inst "u=u"))
                                    (rule "array2seqDef" (formula "39") (term "1,1") (inst "u=u"))
                                    (rule "eqSymm" (formula "39"))
                                    (rule "pullOutSelect" (formula "1") (term "1,1") (inst "selectSK=arr_86"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "applyEqReverse" (formula "2") (term "1,1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "narrowSelectArrayType" (formula "1") (term "1,1") (ifseqformula "27") (ifseqformula "40"))
                                    (rule "pullOutSelect" (formula "1") (term "1,0") (inst "selectSK=arr_87"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")) (ifInst ""  (formula "42")))
                                    (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "21") (ifseqformula "40"))
                                    (rule "eqSeqDef2" (formula "30") (inst "iv=iv") (ifseqformula "30"))
                                    (builtin "One Step Simplification" (formula "30"))
                                    (rule "true_left" (formula "30"))
                                    (rule "eqSeqDef2" (formula "30") (inst "iv=iv") (ifseqformula "30"))
                                    (builtin "One Step Simplification" (formula "30"))
                                    (rule "true_left" (formula "30"))
                                    (rule "array2seqDef" (formula "37") (term "1,1") (inst "u=u"))
                                    (rule "eqSymm" (formula "37"))
                                    (rule "pullOutSelect" (formula "37") (term "1,2,1,0") (inst "selectSK=arr_88"))
                                    (rule "applyEq" (formula "38") (term "0,1,1,0") (ifseqformula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "39")) (ifInst ""  (formula "40")))
                                    (rule "applyEqReverse" (formula "38") (term "1,2,1,0") (ifseqformula "1"))
                                    (rule "applyEqReverse" (formula "38") (term "0,1,1,0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "pullOutSelect" (formula "37") (term "1,2,1,1") (inst "selectSK=arr_89"))
                                    (rule "applyEq" (formula "38") (term "0,1,1,1") (ifseqformula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "applyEqReverse" (formula "38") (term "1,2,1,1") (ifseqformula "1"))
                                    (rule "applyEqReverse" (formula "38") (term "0,1,1,1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "nnf_ex2all" (formula "50"))
                                    (rule "nnf_imp2or" (formula "34") (term "0"))
                                    (rule "nnf_imp2or" (formula "32") (term "0"))
                                    (rule "nnf_notAnd" (formula "1") (term "0"))
                                    (rule "nnf_notAnd" (formula "34") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "34") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "34") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0"))
                                    (rule "mul_literals" (formula "34") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "34") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                                    (rule "mul_literals" (formula "34") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "32") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "32") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "32") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "32") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
                                    (rule "mul_literals" (formula "32") (term "1,0,0,0"))
                                    (rule "nnf_notAll" (formula "1") (term "1,0"))
                                    (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                    (rule "nnf_imp2or" (formula "1") (term "0,0,1,0"))
                                    (rule "nnf_notOr" (formula "1") (term "0,1,0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "commute_or_2" (formula "34") (term "0"))
                                    (rule "commute_or" (formula "1") (term "0,0"))
                                    (rule "commute_or" (formula "34") (term "0,0"))
                                    (rule "cnf_rightDist" (formula "32") (term "0"))
                                    (rule "distr_forallAnd" (formula "32"))
                                    (rule "andLeft" (formula "32"))
                                    (rule "commute_or" (formula "33") (term "0"))
                                    (rule "commute_and_2" (formula "1") (term "0,1,0"))
                                    (rule "commute_and" (formula "1") (term "0,0,1,0"))
                                    (rule "arrayLengthIsAShort" (formula "38") (term "1,1,0"))
                                    (builtin "One Step Simplification" (formula "38"))
                                    (rule "true_left" (formula "38"))
                                    (rule "equalityToSeqGetAndSeqLenLeft" (formula "5") (inst "iv=iv"))
                                    (rule "andLeft" (formula "5"))
                                    (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
                                    (rule "applyEq" (formula "6") (term "0,0,1,0") (ifseqformula "7"))
                                    (builtin "One Step Simplification" (formula "6"))
                                    (rule "true_left" (formula "6"))
                                    (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "6"))
                                    (builtin "One Step Simplification" (formula "5"))
                                    (rule "true_left" (formula "5"))
                                    (rule "arrayLengthNotNegative" (formula "37") (term "1,1,1,0,0"))
                                    (rule "replace_known_left" (formula "31") (term "0,0") (ifseqformula "37"))
                                    (builtin "One Step Simplification" (formula "31"))
                                    (rule "eqSymm" (formula "31"))
                                    (rule "applyEq" (formula "35") (term "1,1,0") (ifseqformula "31"))
                                    (rule "applyEq" (formula "32") (term "1,1,0,0") (ifseqformula "31"))
                                    (rule "applyEq" (formula "4") (term "0") (ifseqformula "31"))
                                    (rule "replace_known_left" (formula "2") (term "0,1") (ifseqformula "4"))
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "replace_known_left" (formula "40") (term "0,1") (ifseqformula "4"))
                                    (builtin "One Step Simplification" (formula "40"))
                                    (rule "applyEq" (formula "33") (term "1,1,1,0") (ifseqformula "31"))
                                    (rule "applyEq" (formula "33") (term "1,1,0,0") (ifseqformula "31"))
                                    (rule "ex_pull_out3" (formula "1") (term "0"))
                                    (rule "cnf_rightDist" (formula "1") (term "0,0"))
                                    (rule "commute_or" (formula "1") (term "1,0,0"))
                                    (rule "applyEq_or_int5" (formula "1") (term "1,0,0"))
                                    (rule "inEqSimp_homoInEq1" (formula "1") (term "1,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0,1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1,1,1,0,0"))
                                    (rule "commute_or_2" (formula "1") (term "1,0,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "1") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                                    (rule "ifthenelse_split" (formula "2") (term "0"))
                                    (branch " (int)s_1[iv_4] >= 0 & (int)s_1[iv_4] <= -1 + result_0.length TRUE"
                                       (rule "andLeft" (formula "2"))
                                       (rule "replace_known_left" (formula "42") (term "1,0,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "2")))
                                       (rule "eqSymm" (formula "42"))
                                       (rule "applyEq" (formula "42") (term "1,2,1") (ifseqformula "4"))
                                       (rule "applyEq" (formula "42") (term "0,1,1") (ifseqformula "4"))
                                       (rule "eqSeqDef" (formula "42") (inst "iv=iv"))
                                       (rule "getOfSeqDef" (formula "42") (term "0,1,0,1"))
                                       (rule "castDel" (formula "42") (term "2,0,1,0,1"))
                                       (rule "castDel" (formula "42") (term "1,0,1,0,1"))
                                       (rule "add_zero_right" (formula "42") (term "0,2,1,0,1,0,1"))
                                       (rule "eqSymm" (formula "42") (term "1,0,1"))
                                       (rule "polySimp_elimSub" (formula "42") (term "1,1,0,1,1,0,1"))
                                       (rule "times_zero_2" (formula "42") (term "1,1,1,0,1,1,0,1"))
                                       (rule "add_zero_right" (formula "42") (term "1,1,0,1,1,0,1"))
                                       (rule "lenOfSeqDef" (formula "42") (term "1,1,0,0,1"))
                                       (rule "polySimp_elimSub" (formula "42") (term "1,1,1,0,0,1"))
                                       (rule "times_zero_2" (formula "42") (term "1,1,1,1,0,0,1"))
                                       (rule "add_zero_right" (formula "42") (term "1,1,1,0,0,1"))
                                       (rule "lenOfSeqDef" (formula "42") (term "1,0"))
                                       (rule "polySimp_elimSub" (formula "42") (term "1,1,0"))
                                       (rule "mul_literals" (formula "42") (term "1,1,1,0"))
                                       (rule "add_zero_right" (formula "42") (term "1,1,0"))
                                       (rule "lenOfSeqDef" (formula "42") (term "0,0"))
                                       (rule "polySimp_elimSub" (formula "42") (term "1,0,0"))
                                       (rule "mul_literals" (formula "42") (term "1,1,0,0"))
                                       (rule "add_zero_right" (formula "42") (term "1,0,0"))
                                       (builtin "One Step Simplification" (formula "42"))
                                       (rule "allRight" (formula "42") (inst "sk=iv_7"))
                                       (rule "impRight" (formula "42"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "replace_known_left" (formula "44") (term "0,0,1") (ifseqformula "1"))
                                       (builtin "One Step Simplification" (formula "44"))
                                       (rule "getOfSeqDef" (formula "44") (term "0"))
                                       (rule "castDel" (formula "44") (term "1,0"))
                                       (rule "castDel" (formula "44") (term "2,0"))
                                       (rule "add_zero_right" (formula "44") (term "0,2,1,0"))
                                       (rule "replace_known_left" (formula "44") (term "0,0,0") (ifseqformula "1"))
                                       (builtin "One Step Simplification" (formula "44"))
                                       (rule "polySimp_elimSub" (formula "44") (term "1,0,0"))
                                       (rule "times_zero_2" (formula "44") (term "1,1,0,0"))
                                       (rule "add_zero_right" (formula "44") (term "1,0,0"))
                                       (rule "eqSymm" (formula "44"))
                                       (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1"))
                                       (rule "add_zero_right" (formula "2") (term "0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "44") (term "0,0"))
                                       (rule "eqSymm" (formula "44"))
                                       (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,0,1"))
                                       (rule "polySimp_addComm1" (formula "44") (term "0,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "2"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0"))
                                       (rule "inEqSimp_ltToLeq" (formula "44") (term "0,0"))
                                       (rule "eqSymm" (formula "44"))
                                       (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,0,1"))
                                       (rule "eqSymm" (formula "44"))
                                       (rule "polySimp_addComm1" (formula "44") (term "0,0,0"))
                                       (rule "eqSymm" (formula "44"))
                                       (rule "inEqSimp_commuteLeq" (formula "1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "44") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "44") (term "0,0,0"))
                                       (rule "eqSymm" (formula "44"))
                                       (rule "polySimp_elimOne" (formula "44") (term "0,0,1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "44") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "44") (term "0,0,0"))
                                       (rule "polySimp_elimOne" (formula "44") (term "0,0,0"))
                                       (rule "eqSymm" (formula "44"))
                                       (rule "pullOutSelect" (formula "44") (term "1,1") (inst "selectSK=arr_90"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "pullOutSelect" (formula "45") (term "1,0") (inst "selectSK=arr_91"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "35"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "replaceKnownSelect_taclet0111000000000_8" (formula "1") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "29"))
                                       (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
                                       (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "47"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "7"))
                                       (rule "times_zero_1" (formula "6") (term "0,0"))
                                       (rule "add_zero_left" (formula "6") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                                       (rule "mul_literals" (formula "6") (term "1"))
                                       (rule "inEqSimp_subsumption1" (formula "44") (ifseqformula "6"))
                                       (rule "leq_literals" (formula "44") (term "0"))
                                       (builtin "One Step Simplification" (formula "44"))
                                       (rule "true_left" (formula "44"))
                                       (rule "commute_and" (formula "5") (term "0,0,0"))
                                       (rule "allLeft" (formula "45") (inst "t=iv_4"))
                                       (rule "replaceKnownSelect_taclet111000000000_6" (formula "45") (term "0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet111000000000_7" (formula "45") (term "0,0,0,0"))
                                       (rule "inEqSimp_commuteGeq" (formula "45") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "45") (term "1,0") (ifseqformula "10"))
                                       (rule "qeq_literals" (formula "45") (term "0,1,0"))
                                       (builtin "One Step Simplification" (formula "45"))
                                       (rule "inEqSimp_contradInEq1" (formula "45") (term "1") (ifseqformula "11"))
                                       (rule "inEqSimp_homoInEq1" (formula "45") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "45") (term "0,0,1"))
                                       (rule "add_literals" (formula "45") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "45") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "45") (term "0,0,1"))
                                       (rule "leq_literals" (formula "45") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "45"))
                                       (rule "notLeft" (formula "45"))
                                       (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "46"))
                                       (builtin "One Step Simplification" (formula "2"))
                                       (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "46"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "ifthenelse_negated" (formula "2") (term "0"))
                                       (rule "ifthenelse_negated" (formula "1") (term "0"))
                                       (rule "narrowSelectArrayType" (formula "2") (term "2,0") (ifseqformula "29") (ifseqformula "46"))
                                       (rule "narrowSelectArrayType" (formula "2") (term "1,0") (ifseqformula "13") (ifseqformula "46"))
                                       (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "35") (ifseqformula "46"))
                                       (rule "allLeft" (formula "34") (inst "t=iv_4"))
                                       (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "11"))
                                       (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                                       (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "34") (term "0,0,1"))
                                       (rule "leq_literals" (formula "34") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "34"))
                                       (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "10"))
                                       (rule "qeq_literals" (formula "34") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "34"))
                                       (rule "notLeft" (formula "34"))
                                       (rule "pullOutSelect" (formula "46") (term "0") (inst "selectSK=arr_92"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "50")) (ifInst ""  (formula "51")))
                                       (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "narrowSelectArrayType" (formula "46") (term "0") (ifseqformula "29") (ifseqformula "49"))
                                       (rule "allLeft" (formula "42") (inst "t=iv_4"))
                                       (rule "inEqSimp_commuteGeq" (formula "42") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "42") (term "1,0") (ifseqformula "10"))
                                       (rule "qeq_literals" (formula "42") (term "0,1,0"))
                                       (builtin "One Step Simplification" (formula "42"))
                                       (rule "inEqSimp_contradInEq1" (formula "42") (term "1") (ifseqformula "11"))
                                       (rule "inEqSimp_homoInEq1" (formula "42") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "42") (term "0,0,1"))
                                       (rule "add_literals" (formula "42") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "42") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "42") (term "0,0,1"))
                                       (rule "leq_literals" (formula "42") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "42"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "1,0,0,0,0,0") (ifseqformula "13"))
                                       (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "54"))
                                       (builtin "One Step Simplification" (formula "24"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0,1,1,0") (ifseqformula "13"))
                                       (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "54"))
                                       (builtin "One Step Simplification" (formula "22"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "58") (term "0") (ifseqformula "13"))
                                       (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "59"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "60") (term "0") (ifseqformula "14"))
                                       (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "61"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "30") (term "0,1,1,0") (ifseqformula "15"))
                                       (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "59"))
                                       (builtin "One Step Simplification" (formula "30"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "63") (term "0") (ifseqformula "15"))
                                       (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "64"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "61") (term "0") (ifseqformula "16"))
                                       (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "62"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "lenNonNegative" (formula "45") (term "0"))
                                       (rule "inEqSimp_commuteLeq" (formula "45"))
                                       (rule "applyEq" (formula "45") (term "0") (ifseqformula "46"))
                                       (rule "inEqSimp_subsumption1" (formula "45") (ifseqformula "10"))
                                       (rule "leq_literals" (formula "45") (term "0"))
                                       (builtin "One Step Simplification" (formula "45"))
                                       (rule "true_left" (formula "45"))
                                       (rule "commute_and_2" (formula "9") (term "0,0"))
                                       (rule "ifthenelse_split" (formula "8") (term "0"))
                                       (branch " result_0[iv_4]@anon_heap_sort<<anonHeapFunction>>.length >= 1 TRUE"
                                          (rule "replace_known_left" (formula "57") (term "0,0") (ifseqformula "9"))
                                          (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "9")))
                                          (rule "seqGetAlphaCast" (formula "14") (term "0,2,0"))
                                          (rule "castedGetAny" (formula "14") (term "0"))
                                          (builtin "One Step Simplification" (formula "14"))
                                          (rule "true_left" (formula "14"))
                                          (rule "allLeft" (formula "54") (inst "t=int::seqGet(s_1, iv_4)"))
                                          (rule "inEqSimp_contradInEq1" (formula "54") (term "1,0") (ifseqformula "12"))
                                          (rule "qeq_literals" (formula "54") (term "0,1,0"))
                                          (builtin "One Step Simplification" (formula "54"))
                                          (rule "inEqSimp_contradInEq0" (formula "54") (term "1") (ifseqformula "13"))
                                          (rule "inEqSimp_homoInEq1" (formula "54") (term "0,1"))
                                          (rule "polySimp_mulComm0" (formula "54") (term "1,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "54") (term "1,0,0,1"))
                                          (rule "mul_literals" (formula "54") (term "0,1,0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "54") (term "0,0,1"))
                                          (rule "polySimp_addComm0" (formula "54") (term "0,0,0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "54") (term "0,0,1"))
                                          (rule "add_literals" (formula "54") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "54") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "54") (term "0,0,1"))
                                          (rule "leq_literals" (formula "54") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "54"))
                                          (rule "notLeft" (formula "54"))
                                          (rule "pullOutSelect" (formula "55") (term "0") (inst "selectSK=arr_93"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "45"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "applyEqReverse" (formula "56") (term "0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "allLeft" (formula "42") (inst "t=int::seqGet(s_1, iv_4)"))
                                          (rule "inEqSimp_contradInEq0" (formula "42") (term "1") (ifseqformula "13"))
                                          (rule "inEqSimp_homoInEq1" (formula "42") (term "0,1"))
                                          (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "42") (term "1,0,0,1"))
                                          (rule "mul_literals" (formula "42") (term "0,1,0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "42") (term "0,0,1"))
                                          (rule "polySimp_addComm0" (formula "42") (term "0,0,0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "42") (term "0,0,1"))
                                          (rule "add_literals" (formula "42") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "42") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "42") (term "0,0,1"))
                                          (rule "leq_literals" (formula "42") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "42"))
                                          (rule "inEqSimp_contradInEq1" (formula "42") (term "1") (ifseqformula "12"))
                                          (rule "qeq_literals" (formula "42") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "42"))
                                          (rule "notLeft" (formula "42"))
                                          (rule "pullOutSelect" (formula "55") (term "0") (inst "selectSK=arr_94"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "39"))
                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "61")) (ifInst ""  (formula "62")))
                                          (rule "applyEqReverse" (formula "56") (term "0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "narrowSelectArrayType" (formula "55") (term "0") (ifseqformula "37") (ifseqformula "60"))
                                          (rule "applyEq" (formula "55") (term "0") (ifseqformula "14"))
                                          (rule "ifthenelse_split" (formula "6") (term "0"))
                                          (branch " (result_0[iv_4]@anon_heap_sort<<anonHeapFunction>>).<created> = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "59") (term "1") (ifseqformula "7"))
                                             (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "7"))
                                             (rule "hideAuxiliaryEq" (formula "7"))
                                             (rule "replace_known_left" (formula "5") (term "0,0,0") (ifseqformula "6"))
                                             (builtin "One Step Simplification" (formula "5"))
                                             (rule "applyEqReverse" (formula "58") (term "0") (ifseqformula "5"))
                                             (builtin "One Step Simplification" (formula "58"))
                                             (rule "closeTrue" (formula "58"))
                                          )
                                          (branch " (result_0[iv_4]@anon_heap_sort<<anonHeapFunction>>).<created> = TRUE FALSE"
                                             (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "6"))
                                             (rule "applyEqReverse" (formula "59") (term "1") (ifseqformula "6"))
                                             (rule "hideAuxiliaryEq" (formula "6"))
                                             (rule "replace_known_right" (formula "5") (term "0,0,0") (ifseqformula "54"))
                                             (builtin "One Step Simplification" (formula "5"))
                                             (rule "allLeft" (formula "52") (inst "t=iv_4"))
                                             (rule "replaceKnownSelect_taclet111000000000_6" (formula "52") (term "1,0,1"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet111000000000_7" (formula "52") (term "1,0,1"))
                                             (rule "inEqSimp_homoInEq1" (formula "52") (term "1,0"))
                                             (rule "polySimp_addComm1" (formula "52") (term "0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "52") (term "1,0"))
                                             (rule "polySimp_mulComm0" (formula "52") (term "1,1,0"))
                                             (rule "polySimp_rightDist" (formula "52") (term "1,1,0"))
                                             (rule "mul_literals" (formula "52") (term "0,1,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "52") (term "1,1,1,0"))
                                             (rule "polySimp_elimOne" (formula "52") (term "1,1,1,0"))
                                             (rule "inEqSimp_contradInEq1" (formula "52") (term "0,0") (ifseqformula "14"))
                                             (rule "qeq_literals" (formula "52") (term "0,0,0"))
                                             (builtin "One Step Simplification" (formula "52"))
                                             (rule "pullOutSelect" (formula "52") (term "2,0,1") (inst "selectSK=arr_95"))
                                             (rule "simplifySelectOfAnonEQ" (formula "52") (ifseqformula "43"))
                                             (builtin "One Step Simplification" (formula "52"))
                                             (rule "applyEqReverse" (formula "53") (term "2,0,1") (ifseqformula "52"))
                                             (rule "hideAuxiliaryEq" (formula "52"))
                                             (rule "allLeft" (formula "30") (inst "t=iv_4"))
                                             (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "30") (term "1,0") (ifseqformula "14"))
                                             (rule "qeq_literals" (formula "30") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "30"))
                                             (rule "allLeft" (formula "34") (inst "t=iv_4"))
                                             (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (term "1,0") (ifseqformula "14"))
                                             (rule "qeq_literals" (formula "34") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "34"))
                                             (rule "allLeft" (formula "24") (inst "t=iv_4"))
                                             (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "24") (term "1,0") (ifseqformula "14"))
                                             (rule "qeq_literals" (formula "24") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "24"))
                                             (rule "allLeft" (formula "38") (inst "t=iv_4"))
                                             (rule "inEqSimp_commuteGeq" (formula "38") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "38") (term "1,0") (ifseqformula "14"))
                                             (rule "qeq_literals" (formula "38") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "38"))
                                             (rule "allLeft" (formula "28") (inst "t=iv_4"))
                                             (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "28") (term "1,0") (ifseqformula "14"))
                                             (rule "qeq_literals" (formula "28") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "28"))
                                             (rule "allLeft" (formula "37") (inst "t=int::seqGet(s_1, iv_4)"))
                                             (rule "inEqSimp_contradInEq1" (formula "37") (term "1,0") (ifseqformula "11"))
                                             (rule "qeq_literals" (formula "37") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "37"))
                                             (rule "allLeft" (formula "59") (inst "t=int::seqGet(s_1, iv_4)"))
                                             (rule "replaceKnownSelect_taclet00111000000000_12" (formula "59") (term "1,0,1"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet00111000000000_13" (formula "59") (term "1,0,1"))
                                             (rule "inEqSimp_contradInEq1" (formula "59") (term "0,0") (ifseqformula "11"))
                                             (rule "qeq_literals" (formula "59") (term "0,0,0"))
                                             (builtin "One Step Simplification" (formula "59"))
                                             (rule "pullOutSelect" (formula "59") (term "2,0,1") (inst "selectSK=arr_96"))
                                             (rule "simplifySelectOfAnonEQ" (formula "59") (ifseqformula "49"))
                                             (builtin "One Step Simplification" (formula "59"))
                                             (rule "applyEqReverse" (formula "60") (term "2,0,1") (ifseqformula "59"))
                                             (rule "hideAuxiliaryEq" (formula "59"))
                                             (rule "allLeft" (formula "29") (inst "t=int::seqGet(s_1, iv_4)"))
                                             (rule "inEqSimp_contradInEq1" (formula "29") (term "1,0") (ifseqformula "11"))
                                             (rule "qeq_literals" (formula "29") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "allLeft" (formula "25") (inst "t=int::seqGet(s_1, iv_4)"))
                                             (rule "inEqSimp_contradInEq1" (formula "25") (term "1,0") (ifseqformula "11"))
                                             (rule "qeq_literals" (formula "25") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "25"))
                                             (rule "allLeft" (formula "35") (inst "t=int::seqGet(s_1, iv_4)"))
                                             (rule "inEqSimp_contradInEq1" (formula "35") (term "1,0") (ifseqformula "11"))
                                             (rule "qeq_literals" (formula "35") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "35"))
                                             (rule "allLeft" (formula "44") (inst "t=int::seqGet(s_1, iv_4)"))
                                             (rule "inEqSimp_contradInEq1" (formula "44") (term "1,0") (ifseqformula "11"))
                                             (rule "qeq_literals" (formula "44") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "44"))
                                             (rule "seqGetAlphaCast" (formula "59") (term "1"))
                                             (rule "castDel" (formula "59") (term "0"))
                                             (builtin "One Step Simplification" (formula "59"))
                                             (rule "true_left" (formula "59"))
                                             (rule "seqGetAlphaCast" (formula "59") (term "0"))
                                             (rule "castDel" (formula "59") (term "0"))
                                             (builtin "One Step Simplification" (formula "59"))
                                             (rule "true_left" (formula "59"))
                                             (rule "ifthenelse_split" (formula "5") (term "0"))
                                             (branch " (result_0[iv_4]@anon_heap_sort<<anonHeapFunction>>).<created>@anon_heap_copyOf<<anonHeapFunction>> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "71") (term "0") (ifseqformula "6"))
                                                (builtin "One Step Simplification" (formula "71"))
                                                (rule "closeTrue" (formula "71"))
                                             )
                                             (branch " (result_0[iv_4]@anon_heap_sort<<anonHeapFunction>>).<created>@anon_heap_copyOf<<anonHeapFunction>> = TRUE FALSE"
                                                (rule "referencedObjectIsCreatedRightEQ" (formula "66") (ifseqformula "13") (ifseqformula "70"))
                                                (rule "close" (formula "66") (ifseqformula "46"))
                                             )
                                          )
                                       )
                                       (branch " result_0[iv_4]@anon_heap_sort<<anonHeapFunction>>.length >= 1 FALSE"
                                          (rule "inEqSimp_geqRight" (formula "54"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "9"))
                                          (rule "times_zero_2" (formula "9") (term "1,0"))
                                          (rule "add_zero_right" (formula "9") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "9"))
                                          (rule "mul_literals" (formula "9") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "9") (ifseqformula "8"))
                                          (rule "qeq_literals" (formula "9") (term "0"))
                                          (builtin "One Step Simplification" (formula "9"))
                                          (rule "closeFalse" (formula "9"))
                                       )
                                    )
                                    (branch " (int)s_1[iv_4] >= 0 & (int)s_1[iv_4] <= -1 + result_0.length FALSE"
                                       (rule "replace_known_right" (formula "41") (term "0,0") (ifseqformula "40"))
                                       (builtin "One Step Simplification" (formula "41"))
                                       (rule "eqSymm" (formula "41"))
                                       (rule "applyEq" (formula "41") (term "1") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "41"))
                                       (rule "false_right" (formula "41"))
                                       (rule "allLeft" (formula "33") (inst "t=iv_4"))
                                       (rule "inEqSimp_commuteGeq" (formula "33") (term "1,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "33") (term "0,0") (ifseqformula "3"))
                                       (rule "qeq_literals" (formula "33") (term "0,0,0"))
                                       (builtin "One Step Simplification" (formula "33"))
                                       (rule "inEqSimp_contradInEq1" (formula "33") (term "0") (ifseqformula "4"))
                                       (rule "inEqSimp_homoInEq1" (formula "33") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,0"))
                                       (rule "add_literals" (formula "33") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "33") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "33") (term "0,0,0"))
                                       (rule "leq_literals" (formula "33") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "33"))
                                       (rule "replace_known_left" (formula "41") (term "1") (ifseqformula "33"))
                                       (builtin "One Step Simplification" (formula "41"))
                                       (rule "inEqSimp_geqRight" (formula "41"))
                                       (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                       (rule "mul_literals" (formula "1") (term "1"))
                                       (rule "allLeft" (formula "33") (inst "t=iv_4"))
                                       (rule "inEqSimp_commuteGeq" (formula "33") (term "1,0"))
                                       (rule "inEqSimp_contradInEq0" (formula "33") (term "1") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "33") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "33"))
                                       (rule "inEqSimp_contradInEq1" (formula "33") (term "0") (ifseqformula "4"))
                                       (rule "qeq_literals" (formula "33") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "33"))
                                       (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "33"))
                                       (rule "andLeft" (formula "5"))
                                       (rule "inEqSimp_homoInEq1" (formula "5"))
                                       (rule "polySimp_pullOutFactor1b" (formula "5") (term "0"))
                                       (rule "add_literals" (formula "5") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "5") (term "1,0"))
                                       (rule "add_literals" (formula "5") (term "0"))
                                       (rule "leq_literals" (formula "5"))
                                       (rule "closeFalse" (formula "5"))
                                    )
                                 )
                              )
                           )
                        )
                        (branch "CUT: array2seq2d(heapAfter_sort, entr_arr) = array2seq2d(heapAfter_copyOf, entr_arr) FALSE"
                           (rule "array2seq2dDef" (formula "35") (term "0") (inst "u=u") (userinteraction))
                           (rule "array2seq2dDef" (formula "35") (term "1") (inst "u=u") (userinteraction))
                           (rule "equalityToSeqGetAndSeqLenRight" (formula "35") (inst "iv=iv") (userinteraction))
                           (rule "andRight" (formula "35") (userinteraction))
                           (branch "Case 1"
                              (rule "eqSymm" (formula "1"))
                              (rule "eqSymm" (formula "2"))
                              (rule "lenOfSeqDef" (formula "35") (term "1"))
                              (rule "polySimp_elimSub" (formula "35") (term "1,1"))
                              (rule "times_zero_2" (formula "35") (term "1,1,1"))
                              (rule "add_zero_right" (formula "35") (term "1,1"))
                              (rule "lenOfSeqDef" (formula "35") (term "0"))
                              (rule "polySimp_elimSub" (formula "35") (term "1,0"))
                              (rule "times_zero_2" (formula "35") (term "1,1,0"))
                              (rule "add_zero_right" (formula "35") (term "1,0"))
                              (builtin "One Step Simplification" (formula "35"))
                              (rule "closeTrue" (formula "35"))
                           )
                           (branch "Case 2"
                              (rule "allRight" (formula "35") (inst "sk=iv_2") (userinteraction))
                              (rule "impRight" (formula "35") (userinteraction))
                              (rule "getOfSeqDef" (formula "36") (term "0") (userinteraction))
                              (rule "ifthenelse_split" (formula "36") (term "0") (userinteraction))
                              (branch "0 <= iv_2 & iv_2 < entr_arr.length - 0 TRUE"
                                 (rule "castDel" (formula "37") (term "0") (userinteraction))
                                 (rule "getOfSeqDef" (formula "37") (term "1") (userinteraction))
                                 (rule "ifthenelse_split" (formula "37") (term "1") (userinteraction))
                                 (branch "0 <= iv_2 & iv_2 < entr_arr.length - 0 TRUE"
                                    (rule "castDel" (formula "37") (term "1") (userinteraction))
                                    (rule "array2seqDef" (formula "37") (term "0") (inst "u=u") (userinteraction))
                                    (rule "array2seqDef" (formula "37") (term "1") (inst "u=u") (userinteraction))
                                    (rule "equalityToSeqGetAndSeqLenRight" (formula "37") (inst "iv=iv") (userinteraction))
                                    (rule "andRight" (formula "37") (userinteraction))
                                    (branch "Case 1"
                                       (rule "add_zero_right" (formula "37") (term "0,2,0,1,0,0"))
                                       (rule "add_zero_right" (formula "37") (term "0,2,1,2,0,0"))
                                       (rule "add_zero_right" (formula "37") (term "0,2,0,1,0,1"))
                                       (rule "add_zero_right" (formula "37") (term "0,2,1,2,0,1"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "eqSymm" (formula "4"))
                                       (rule "eqSymm" (formula "5"))
                                       (rule "polySimp_elimSub" (formula "1") (term "1"))
                                       (rule "mul_literals" (formula "1") (term "1,1"))
                                       (rule "add_zero_right" (formula "1") (term "1"))
                                       (rule "lenOfSeqDef" (formula "38") (term "0"))
                                       (rule "eqSymm" (formula "38"))
                                       (rule "polySimp_elimSub" (formula "38") (term "1,1"))
                                       (rule "times_zero_2" (formula "38") (term "1,1,1"))
                                       (rule "add_zero_right" (formula "38") (term "1,1"))
                                       (rule "lenOfSeqDef" (formula "3") (term "1"))
                                       (rule "polySimp_elimSub" (formula "3") (term "1,1"))
                                       (rule "times_zero_2" (formula "3") (term "1,1,1"))
                                       (rule "add_zero_right" (formula "3") (term "1,1"))
                                       (rule "lenOfSeqDef" (formula "38") (term "0"))
                                       (rule "eqSymm" (formula "38"))
                                       (rule "polySimp_elimSub" (formula "38") (term "1,1"))
                                       (rule "times_zero_2" (formula "38") (term "1,1,1"))
                                       (rule "add_zero_right" (formula "38") (term "1,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "inEqSimp_ltToLeq" (formula "3") (term "0,1"))
                                       (rule "add_zero_right" (formula "3") (term "0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "38") (term "0,1"))
                                       (rule "add_zero_right" (formula "38") (term "0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "38") (term "0,0"))
                                       (rule "add_zero_right" (formula "38") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "3"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "3") (term "0"))
                                       (rule "inEqSimp_commuteLeq" (formula "2"))
                                       (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "28"))
                                       (builtin "One Step Simplification" (formula "26"))
                                       (rule "true_left" (formula "26"))
                                       (rule "applyEq" (formula "26") (term "0,0,0,0,0") (ifseqformula "27"))
                                       (builtin "One Step Simplification" (formula "26"))
                                       (rule "true_left" (formula "26"))
                                       (rule "applyEq" (formula "33") (term "0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "33") (term "1") (ifseqformula "4"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "36") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "36") (term "0,0,1"))
                                       (rule "polySimp_elimOne" (formula "36") (term "0,0,1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "36") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "36") (term "0,0,0"))
                                       (rule "polySimp_elimOne" (formula "36") (term "0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                       (rule "polySimp_elimOne" (formula "3") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0"))
                                       (rule "polySimp_elimOne" (formula "3") (term "0,0,0"))
                                       (rule "array2seqDef" (formula "4") (term "0") (inst "u=u"))
                                       (rule "array2seqDef" (formula "4") (term "0") (inst "u=u"))
                                       (rule "eqSeqDef2" (formula "30") (inst "iv=iv") (ifseqformula "30"))
                                       (builtin "One Step Simplification" (formula "30"))
                                       (rule "true_left" (formula "30"))
                                       (rule "eqSeqDef2" (formula "29") (inst "iv=iv") (ifseqformula "29"))
                                       (builtin "One Step Simplification" (formula "29"))
                                       (rule "true_left" (formula "29"))
                                       (rule "pullOutSelect" (formula "32") (term "0,1,0") (inst "selectSK=arr_44"))
                                       (rule "applyEq" (formula "33") (term "0,0,0,0") (ifseqformula "1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "22"))
                                       (rule "eqSymm" (formula "33"))
                                       (rule "eqSymm" (formula "1") (term "0,0,0"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "8"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "pullOutSelect" (formula "33") (term "0,1,0") (inst "selectSK=arr_45"))
                                       (rule "applyEq" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "34") (term "0,0,0,0") (ifseqformula "1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")) (ifInst ""  (formula "9")))
                                       (rule "applyEqReverse" (formula "34") (term "0,1,0") (ifseqformula "1"))
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "applyEqReverse" (formula "34") (term "0,0,0,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "ifthenelse_split" (formula "4") (term "0"))
                                       (branch "entr_arr.length >= 1 TRUE"
                                          (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "4"))
                                          (rule "leq_literals" (formula "19") (term "0"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "true_left" (formula "19"))
                                          (rule "allLeft" (formula "19") (inst "t=iv_2"))
                                          (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "2"))
                                          (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1"))
                                          (rule "add_literals" (formula "19") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "19") (term "0,0,1"))
                                          (rule "leq_literals" (formula "19") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "3"))
                                          (rule "qeq_literals" (formula "19") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "notLeft" (formula "19"))
                                          (rule "arrayLengthIsAShort" (formula "30") (term "1,1,1,0,0"))
                                          (builtin "One Step Simplification" (formula "30"))
                                          (rule "true_left" (formula "30"))
                                          (rule "arrayLengthNotNegative" (formula "31") (term "1,1,0"))
                                          (rule "ifthenelse_split" (formula "1") (term "0"))
                                          (branch "result_0 = entr_arr TRUE"
                                             (rule "applyEqReverse" (formula "35") (term "0,0,0,1") (ifseqformula "2"))
                                             (rule "applyEqReverse" (formula "35") (term "0,1,1") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "eqSymm" (formula "34"))
                                             (rule "applyEq" (formula "30") (term "0,1,1,1,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "30") (term "1,1,0,1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "32") (term "1,0,0,0,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "36") (term "1,0") (ifseqformula "1"))
                                             (rule "close" (formula "36") (ifseqformula "8"))
                                          )
                                          (branch "result_0 = entr_arr FALSE"
                                             (rule "applyEqReverse" (formula "35") (term "0,0,0,1") (ifseqformula "1"))
                                             (rule "applyEqReverse" (formula "35") (term "0,1,1") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "35"))
                                             (rule "closeTrue" (formula "35"))
                                          )
                                       )
                                       (branch "entr_arr.length >= 1 FALSE"
                                          (rule "inEqSimp_geqRight" (formula "33"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "5"))
                                          (rule "times_zero_2" (formula "5") (term "1,0"))
                                          (rule "add_zero_right" (formula "5") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                          (rule "mul_literals" (formula "5") (term "1"))
                                          (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "5"))
                                          (rule "qeq_literals" (formula "4") (term "0"))
                                          (builtin "One Step Simplification" (formula "4"))
                                          (rule "closeFalse" (formula "4"))
                                       )
                                    )
                                    (branch "Case 2"
                                       (rule "allRight" (formula "37") (inst "sk=iv_3") (userinteraction))
                                       (rule "impRight" (formula "37") (userinteraction))
                                       (rule "getOfSeqDef" (formula "38") (term "0") (userinteraction))
                                       (rule "ifthenelse_split" (formula "38") (term "0") (userinteraction))
                                       (branch " 0 <= iv_3 & iv_3 < entr_arr[iv_2 + 0]@heapAfter_sort.length - 0 TRUE"
                                          (rule "getOfSeqDef" (formula "39") (term "1") (userinteraction))
                                          (rule "ifthenelse_split" (formula "39") (term "1") (userinteraction))
                                          (branch " 0 <= iv_3 & iv_3 < entr_arr[iv_2 + 0]@heapAfter_copyOf.length - 0 TRUE"
                                             (rule "castDel" (formula "40") (term "1"))
                                             (rule "castDel" (formula "40") (term "0"))
                                             (rule "add_zero_right" (formula "3") (term "0,2,0,1,0,1,1"))
                                             (rule "add_zero_right" (formula "3") (term "0,2,1,2,0,1,1"))
                                             (rule "add_zero_right" (formula "2") (term "0,2,0,0,1,1"))
                                             (rule "add_zero_right" (formula "1") (term "0,2,0,0,1,1"))
                                             (rule "add_zero_right" (formula "40") (term "0,2,1"))
                                             (rule "add_zero_right" (formula "40") (term "0,2,1,1"))
                                             (rule "add_zero_right" (formula "40") (term "0,2,0"))
                                             (rule "add_zero_right" (formula "40") (term "0,2,1,0"))
                                             (rule "andLeft" (formula "5"))
                                             (rule "andLeft" (formula "4"))
                                             (rule "andLeft" (formula "3"))
                                             (rule "andLeft" (formula "2"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "eqSymm" (formula "8"))
                                             (rule "eqSymm" (formula "9"))
                                             (rule "polySimp_elimSub" (formula "5") (term "1"))
                                             (rule "mul_literals" (formula "5") (term "1,1"))
                                             (rule "add_zero_right" (formula "5") (term "1"))
                                             (rule "polySimp_elimSub" (formula "2") (term "1"))
                                             (rule "mul_literals" (formula "2") (term "1,1"))
                                             (rule "add_zero_right" (formula "2") (term "1"))
                                             (rule "polySimp_elimSub" (formula "1") (term "1"))
                                             (rule "times_zero_2" (formula "1") (term "1,1"))
                                             (rule "add_zero_right" (formula "1") (term "1"))
                                             (rule "lenOfSeqDef" (formula "7") (term "1"))
                                             (rule "polySimp_elimSub" (formula "7") (term "1,1"))
                                             (rule "times_zero_2" (formula "7") (term "1,1,1"))
                                             (rule "add_zero_right" (formula "7") (term "1,1"))
                                             (rule "lenOfSeqDef" (formula "4") (term "1"))
                                             (rule "polySimp_elimSub" (formula "4") (term "1,1"))
                                             (rule "mul_literals" (formula "4") (term "1,1,1"))
                                             (rule "add_zero_right" (formula "4") (term "1,1"))
                                             (rule "inEqSimp_ltToLeq" (formula "5"))
                                             (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "5") (term "0"))
                                             (rule "inEqSimp_ltToLeq" (formula "2"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "2") (term "0"))
                                             (rule "inEqSimp_ltToLeq" (formula "1"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0"))
                                             (rule "inEqSimp_ltToLeq" (formula "7") (term "0,1"))
                                             (rule "add_zero_right" (formula "7") (term "0,0,1"))
                                             (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1"))
                                             (rule "inEqSimp_ltToLeq" (formula "4") (term "0,1"))
                                             (rule "add_zero_right" (formula "4") (term "0,0,1"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1"))
                                             (rule "inEqSimp_ltToLeq" (formula "7"))
                                             (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "7") (term "0"))
                                             (rule "inEqSimp_ltToLeq" (formula "4"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "4") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "6"))
                                             (rule "inEqSimp_commuteLeq" (formula "3"))
                                             (rule "applyEq" (formula "39") (term "0") (ifseqformula "9"))
                                             (rule "applyEq" (formula "31") (term "0,0,0,0,0") (ifseqformula "32"))
                                             (builtin "One Step Simplification" (formula "31"))
                                             (rule "true_left" (formula "31"))
                                             (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "31"))
                                             (builtin "One Step Simplification" (formula "30"))
                                             (rule "true_left" (formula "30"))
                                             (rule "applyEq" (formula "37") (term "1") (ifseqformula "8"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                                             (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                                             (rule "polySimp_elimOne" (formula "5") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                             (rule "polySimp_elimOne" (formula "2") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                             (rule "polySimp_elimOne" (formula "1") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                                             (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                                             (rule "polySimp_elimOne" (formula "7") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                                             (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                             (rule "polySimp_elimOne" (formula "4") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0"))
                                             (rule "polySimp_elimOne" (formula "7") (term "0,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0"))
                                             (rule "polySimp_elimOne" (formula "4") (term "0,0,0"))
                                             (rule "array2seqDef" (formula "8") (term "0") (inst "u=u"))
                                             (rule "array2seqDef" (formula "8") (term "0") (inst "u=u"))
                                             (rule "eqSeqDef2" (formula "33") (inst "iv=iv") (ifseqformula "33"))
                                             (builtin "One Step Simplification" (formula "33"))
                                             (rule "true_left" (formula "33"))
                                             (rule "eqSeqDef2" (formula "33") (inst "iv=iv") (ifseqformula "33"))
                                             (builtin "One Step Simplification" (formula "33"))
                                             (rule "true_left" (formula "33"))
                                             (rule "pullOutSelect" (formula "36") (term "1,1") (inst "selectSK=arr_53"))
                                             (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "1"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                                             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")) (ifInst ""  (formula "12")))
                                             (rule "applyEqReverse" (formula "37") (term "1,1") (ifseqformula "1"))
                                             (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "pullOutSelect" (formula "36") (term "1,0") (inst "selectSK=arr_54"))
                                             (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "5") (term "0,1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "5") (term "0,0,0,0") (ifseqformula "1"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "32"))
                                             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")))
                                             (rule "replaceKnownSelect_taclet001001100000000_0" (formula "1") (term "2,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet001001100000000_1" (formula "1") (term "2,0"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "26"))
                                             (rule "eqSymm" (formula "1") (term "0,0,0"))
                                             (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "12"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "pullOutSelect" (formula "37") (term "1") (inst "selectSK=arr_55"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "pullOutSelect" (formula "38") (term "0") (inst "selectSK=arr_56"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "34"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "28"))
                                             (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
                                             (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "40"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=arr_57"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "arrayLengthIsAShort" (formula "33") (term "1,1,0"))
                                             (builtin "One Step Simplification" (formula "33"))
                                             (rule "true_left" (formula "33"))
                                             (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                             (rule "ifthenelse_split" (formula "11") (term "0"))
                                             (branch "entr_arr.length >= 1 TRUE"
                                                (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "11"))
                                                (rule "leq_literals" (formula "26") (term "0"))
                                                (builtin "One Step Simplification" (formula "26"))
                                                (rule "true_left" (formula "26"))
                                                (rule "allLeft" (formula "26") (inst "t=iv_2"))
                                                (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "9"))
                                                (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                                                (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                                                (rule "add_zero_right" (formula "26") (term "0,0,1"))
                                                (rule "leq_literals" (formula "26") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "26"))
                                                (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "10"))
                                                (rule "qeq_literals" (formula "26") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "26"))
                                                (rule "notLeft" (formula "26"))
                                                (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "40"))
                                                (builtin "One Step Simplification" (formula "3"))
                                                (rule "ifthenelse_negated" (formula "3") (term "0"))
                                                (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "12") (ifseqformula "40"))
                                                (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "27") (ifseqformula "40"))
                                                (rule "ifthenelse_split" (formula "4") (term "0"))
                                                (branch "result_0 = entr_arr TRUE"
                                                   (rule "applyEqReverse" (formula "1") (term "1,0,0,1,0,0") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "1") (term "1,1,0") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "2") (term "1,0,0,0,1,0,0") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "2") (term "1,0,1,0,1,0,0") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "1") (term "1,2,0") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "1") (term "0,0,0,0,0") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "2") (term "0,0,0,0,0") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "2") (term "1,1,0") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "7") (term "0,0") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "9") (term "0,1,0") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "9") (term "0,0,0,0") (ifseqformula "5"))
                                                   (rule "hideAuxiliaryEq" (formula "5"))
                                                   (rule "applyEq" (formula "37") (term "0,1,1,1,0,0") (ifseqformula "4"))
                                                   (rule "applyEq" (formula "39") (term "1,0,0,0,0,0") (ifseqformula "4"))
                                                   (rule "applyEq" (formula "31") (term "1,0") (ifseqformula "4"))
                                                   (builtin "One Step Simplification" (formula "31"))
                                                   (rule "true_left" (formula "31"))
                                                   (rule "applyEq" (formula "36") (term "1,1,0,1,0") (ifseqformula "4"))
                                                   (rule "applyEq" (formula "31") (term "1,0,0,0,0,0") (ifseqformula "4"))
                                                   (rule "applyEq" (formula "36") (term "1,2,0,1,0") (ifseqformula "4"))
                                                   (rule "applyEq" (formula "53") (term "1,0") (ifseqformula "4"))
                                                   (builtin "One Step Simplification" (formula "53"))
                                                   (rule "closeTrue" (formula "53"))
                                                )
                                                (branch "result_0 = entr_arr FALSE"
                                                   (rule "applyEqReverse" (formula "2") (term "1,0,0,0,1,0,0") (ifseqformula "4"))
                                                   (rule "applyEqReverse" (formula "6") (term "0,0") (ifseqformula "4"))
                                                   (rule "applyEqReverse" (formula "2") (term "0,0,0,0,0") (ifseqformula "4"))
                                                   (rule "applyEqReverse" (formula "7") (term "0,0,0,0") (ifseqformula "4"))
                                                   (rule "applyEqReverse" (formula "2") (term "1,0,1,0,1,0,0") (ifseqformula "4"))
                                                   (rule "applyEqReverse" (formula "1") (term "1,2,0") (ifseqformula "4"))
                                                   (rule "applyEqReverse" (formula "1") (term "1,1,0") (ifseqformula "4"))
                                                   (rule "applyEqReverse" (formula "1") (term "0,0,0,0,0") (ifseqformula "4"))
                                                   (rule "applyEqReverse" (formula "7") (term "0,1,0") (ifseqformula "4"))
                                                   (rule "applyEqReverse" (formula "2") (term "1,1,0") (ifseqformula "4"))
                                                   (rule "applyEqReverse" (formula "1") (term "1,0,0,1,0,0") (ifseqformula "4"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "39"))
                                                   (builtin "One Step Simplification" (formula "2"))
                                                   (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "39"))
                                                   (builtin "One Step Simplification" (formula "1"))
                                                   (rule "ifthenelse_negated" (formula "2") (term "0"))
                                                   (rule "ifthenelse_negated" (formula "1") (term "0"))
                                                   (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "25") (ifseqformula "39"))
                                                   (rule "narrowSelectArrayType" (formula "2") (term "2,0") (ifseqformula "31") (ifseqformula "39"))
                                                   (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "10") (ifseqformula "39"))
                                                   (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                                                   (rule "applyEqReverse" (formula "40") (term "1") (ifseqformula "3"))
                                                   (rule "hideAuxiliaryEq" (formula "3"))
                                                   (rule "eqSymm" (formula "39"))
                                                   (rule "ifthenelse_split" (formula "1") (term "0"))
                                                   (branch "entr_arr[iv_2].<created> = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "40") (term "0") (ifseqformula "2"))
                                                      (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                                      (rule "hideAuxiliaryEq" (formula "2"))
                                                      (rule "eqSymm" (formula "39"))
                                                      (rule "replace_known_left" (formula "2") (term "0,0,0") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "2"))
                                                      (rule "applyEqReverse" (formula "39") (term "0") (ifseqformula "2"))
                                                      (builtin "One Step Simplification" (formula "39"))
                                                      (rule "closeTrue" (formula "39"))
                                                   )
                                                   (branch "entr_arr[iv_2].<created> = TRUE FALSE"
                                                      (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "39"))
                                                      (rule "close" (formula "37") (ifseqformula "9"))
                                                   )
                                                )
                                             )
                                             (branch "entr_arr.length >= 1 FALSE"
                                                (rule "inEqSimp_geqRight" (formula "41"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "inEqSimp_homoInEq1" (formula "12"))
                                                (rule "times_zero_2" (formula "12") (term "1,0"))
                                                (rule "add_zero_right" (formula "12") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "12"))
                                                (rule "mul_literals" (formula "12") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "12") (ifseqformula "11"))
                                                (rule "qeq_literals" (formula "12") (term "0"))
                                                (builtin "One Step Simplification" (formula "12"))
                                                (rule "closeFalse" (formula "12"))
                                             )
                                          )
                                          (branch " 0 <= iv_3 & iv_3 < entr_arr[iv_2 + 0]@heapAfter_copyOf.length - 0 FALSE"
                                             (rule "castDel" (formula "40") (term "0"))
                                             (rule "castDel" (formula "40") (term "1"))
                                             (rule "add_zero_right" (formula "39") (term "0,2,0,0,1,1"))
                                             (rule "add_zero_right" (formula "2") (term "0,2,0,1,0,1,1"))
                                             (rule "add_zero_right" (formula "2") (term "0,2,1,2,0,1,1"))
                                             (rule "add_zero_right" (formula "1") (term "0,2,0,0,1,1"))
                                             (rule "add_zero_right" (formula "40") (term "0,2,0"))
                                             (rule "add_zero_right" (formula "40") (term "0,2,1,0"))
                                             (rule "andLeft" (formula "3"))
                                             (rule "andLeft" (formula "5"))
                                             (rule "andLeft" (formula "2"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "eqSymm" (formula "7"))
                                             (rule "eqSymm" (formula "8"))
                                             (rule "replace_known_left" (formula "41") (term "0") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "41"))
                                             (rule "polySimp_elimSub" (formula "5") (term "1"))
                                             (rule "mul_literals" (formula "5") (term "1,1"))
                                             (rule "add_zero_right" (formula "5") (term "1"))
                                             (rule "polySimp_elimSub" (formula "1") (term "1"))
                                             (rule "mul_literals" (formula "1") (term "1,1"))
                                             (rule "add_zero_right" (formula "1") (term "1"))
                                             (rule "polySimp_elimSub" (formula "41") (term "1"))
                                             (rule "times_zero_2" (formula "41") (term "1,1"))
                                             (rule "add_zero_right" (formula "41") (term "1"))
                                             (rule "lenOfSeqDef" (formula "6") (term "1"))
                                             (rule "polySimp_elimSub" (formula "6") (term "1,1"))
                                             (rule "mul_literals" (formula "6") (term "1,1,1"))
                                             (rule "add_zero_right" (formula "6") (term "1,1"))
                                             (rule "lenOfSeqDef" (formula "3") (term "1"))
                                             (rule "polySimp_elimSub" (formula "3") (term "1,1"))
                                             (rule "times_zero_2" (formula "3") (term "1,1,1"))
                                             (rule "add_zero_right" (formula "3") (term "1,1"))
                                             (rule "inEqSimp_ltRight" (formula "41"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                             (rule "polySimp_addComm0" (formula "1") (term "0"))
                                             (rule "inEqSimp_ltToLeq" (formula "6"))
                                             (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "6") (term "0"))
                                             (rule "inEqSimp_ltToLeq" (formula "2"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "2") (term "0"))
                                             (rule "inEqSimp_ltToLeq" (formula "7") (term "0,1"))
                                             (rule "add_zero_right" (formula "7") (term "0,0,1"))
                                             (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1"))
                                             (rule "inEqSimp_ltToLeq" (formula "4") (term "0,1"))
                                             (rule "add_zero_right" (formula "4") (term "0,0,1"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1"))
                                             (rule "inEqSimp_ltToLeq" (formula "7"))
                                             (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "7") (term "0"))
                                             (rule "inEqSimp_ltToLeq" (formula "4"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "4") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "5"))
                                             (rule "inEqSimp_commuteLeq" (formula "3"))
                                             (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "32"))
                                             (builtin "One Step Simplification" (formula "30"))
                                             (rule "true_left" (formula "30"))
                                             (rule "applyEq" (formula "38") (term "1") (ifseqformula "8"))
                                             (rule "applyEq" (formula "38") (term "0") (ifseqformula "9"))
                                             (rule "applyEq" (formula "30") (term "0,0,0,0,0") (ifseqformula "31"))
                                             (builtin "One Step Simplification" (formula "30"))
                                             (rule "true_left" (formula "30"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                             (rule "polySimp_elimOne" (formula "1") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                                             (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                             (rule "polySimp_elimOne" (formula "6") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                             (rule "polySimp_elimOne" (formula "2") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                                             (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                                             (rule "polySimp_elimOne" (formula "7") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                                             (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                             (rule "polySimp_elimOne" (formula "4") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0"))
                                             (rule "polySimp_elimOne" (formula "7") (term "0,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0"))
                                             (rule "polySimp_elimOne" (formula "4") (term "0,0,0"))
                                             (rule "array2seqDef" (formula "8") (term "0") (inst "u=u"))
                                             (rule "array2seqDef" (formula "8") (term "0") (inst "u=u"))
                                             (rule "eqSeqDef2" (formula "33") (inst "iv=iv") (ifseqformula "33"))
                                             (builtin "One Step Simplification" (formula "33"))
                                             (rule "true_left" (formula "33"))
                                             (rule "eqSeqDef2" (formula "33") (inst "iv=iv") (ifseqformula "33"))
                                             (builtin "One Step Simplification" (formula "33"))
                                             (rule "true_left" (formula "33"))
                                             (rule "pullOutSelect" (formula "36") (term "0") (inst "selectSK=arr_49"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "32"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "26"))
                                             (rule "eqSymm" (formula "37"))
                                             (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
                                             (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "38"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "pullOutSelect" (formula "2") (term "0,0") (inst "selectSK=arr_50"))
                                             (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "27"))
                                             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "48")) (ifInst ""  (formula "13")))
                                             (rule "applyEqReverse" (formula "3") (term "0,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "pullOutSelect" (formula "3") (term "0,0") (inst "selectSK=arr_51"))
                                             (rule "applyEq" (formula "1") (term "1,0,0,0,1,0,0") (ifseqformula "3"))
                                             (rule "applyEq" (formula "1") (term "1,1,0") (ifseqformula "3"))
                                             (rule "applyEq" (formula "6") (term "0,0,0,0") (ifseqformula "3"))
                                             (rule "applyEq" (formula "1") (term "1,0,1,0,1,0,0") (ifseqformula "3"))
                                             (rule "applyEq" (formula "1") (term "1,2,0") (ifseqformula "3"))
                                             (rule "applyEq" (formula "6") (term "0,1,0") (ifseqformula "3"))
                                             (rule "applyEq" (formula "1") (term "0,0,0,0,0") (ifseqformula "3"))
                                             (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "33"))
                                             (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "48")))
                                             (rule "replaceKnownSelect_taclet101001100000000_1" (formula "3") (term "2,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet101001100000000_2" (formula "3") (term "2,0"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,1,0,0") (ifseqformula "27"))
                                             (rule "eqSymm" (formula "3") (term "0,0,0"))
                                             (rule "replace_known_left" (formula "3") (term "0,0,1,0,0") (ifseqformula "13"))
                                             (builtin "One Step Simplification" (formula "3"))
                                             (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=arr_52"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "arrayLengthNotNegative" (formula "32") (term "1,1,0"))
                                             (rule "arrayLengthIsAShort" (formula "39") (term "1,1,0"))
                                             (builtin "One Step Simplification" (formula "39"))
                                             (rule "true_left" (formula "39"))
                                             (rule "ifthenelse_split" (formula "10") (term "0"))
                                             (branch "entr_arr.length >= 1 TRUE"
                                                (rule "inEqSimp_subsumption1" (formula "25") (ifseqformula "10"))
                                                (rule "leq_literals" (formula "25") (term "0"))
                                                (builtin "One Step Simplification" (formula "25"))
                                                (rule "true_left" (formula "25"))
                                                (rule "allLeft" (formula "25") (inst "t=iv_2"))
                                                (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "25") (term "1,0") (ifseqformula "8"))
                                                (rule "qeq_literals" (formula "25") (term "0,1,0"))
                                                (builtin "One Step Simplification" (formula "25"))
                                                (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "9"))
                                                (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                                                (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                                                (rule "add_zero_right" (formula "25") (term "0,0,1"))
                                                (rule "leq_literals" (formula "25") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "25"))
                                                (rule "notLeft" (formula "25"))
                                                (rule "ifthenelse_split" (formula "4") (term "0"))
                                                (branch "result_0 = entr_arr TRUE"
                                                   (rule "applyEqReverse" (formula "8") (term "0,1,0") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "1") (term "1,1,0") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "2") (term "1,1,0") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "6") (term "0,0") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "1") (term "0,0,0,0,0") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "8") (term "0,0,0,0") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "1") (term "1,2,0") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "2") (term "0,0,0,0,0") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "2") (term "1,0,1,0,1,0,0") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "1") (term "1,0,0,1,0,0") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "2") (term "1,0,0,0,1,0,0") (ifseqformula "5"))
                                                   (rule "hideAuxiliaryEq" (formula "5"))
                                                   (rule "applyEq" (formula "53") (term "1,0") (ifseqformula "4"))
                                                   (builtin "One Step Simplification" (formula "53"))
                                                   (rule "closeTrue" (formula "53"))
                                                )
                                                (branch "result_0 = entr_arr FALSE"
                                                   (rule "applyEqReverse" (formula "7") (term "0,1,0") (ifseqformula "4"))
                                                   (rule "applyEqReverse" (formula "1") (term "1,2,0") (ifseqformula "4"))
                                                   (rule "applyEqReverse" (formula "2") (term "1,1,0") (ifseqformula "4"))
                                                   (rule "applyEqReverse" (formula "1") (term "1,1,0") (ifseqformula "4"))
                                                   (rule "applyEqReverse" (formula "2") (term "1,0,0,0,1,0,0") (ifseqformula "4"))
                                                   (rule "applyEqReverse" (formula "1") (term "0,0,0,0,0") (ifseqformula "4"))
                                                   (rule "applyEqReverse" (formula "7") (term "0,0,0,0") (ifseqformula "4"))
                                                   (rule "applyEqReverse" (formula "5") (term "0,0") (ifseqformula "4"))
                                                   (rule "applyEqReverse" (formula "2") (term "0,0,0,0,0") (ifseqformula "4"))
                                                   (rule "applyEqReverse" (formula "1") (term "1,0,0,1,0,0") (ifseqformula "4"))
                                                   (rule "applyEqReverse" (formula "2") (term "1,0,1,0,1,0,0") (ifseqformula "4"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "39"))
                                                   (builtin "One Step Simplification" (formula "1"))
                                                   (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "39"))
                                                   (builtin "One Step Simplification" (formula "2"))
                                                   (rule "ifthenelse_negated" (formula "1") (term "0"))
                                                   (rule "ifthenelse_negated" (formula "2") (term "0"))
                                                   (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "25") (ifseqformula "39"))
                                                   (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "10") (ifseqformula "39"))
                                                   (rule "narrowSelectArrayType" (formula "2") (term "2,0") (ifseqformula "32") (ifseqformula "39"))
                                                   (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "3"))
                                                   (rule "andLeft" (formula "4"))
                                                   (rule "inEqSimp_homoInEq1" (formula "4"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                                                   (rule "add_literals" (formula "4") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "4") (term "1,0"))
                                                   (rule "add_literals" (formula "4") (term "0"))
                                                   (rule "leq_literals" (formula "4"))
                                                   (rule "closeFalse" (formula "4"))
                                                )
                                             )
                                             (branch "entr_arr.length >= 1 FALSE"
                                                (rule "inEqSimp_geqRight" (formula "40"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "inEqSimp_homoInEq1" (formula "11"))
                                                (rule "mul_literals" (formula "11") (term "1,0"))
                                                (rule "add_zero_right" (formula "11") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "11"))
                                                (rule "mul_literals" (formula "11") (term "1"))
                                                (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "11"))
                                                (rule "qeq_literals" (formula "9") (term "0"))
                                                (builtin "One Step Simplification" (formula "9"))
                                                (rule "closeFalse" (formula "9"))
                                             )
                                          )
                                       )
                                       (branch " 0 <= iv_3 & iv_3 < entr_arr[iv_2 + 0]@heapAfter_sort.length - 0 FALSE"
                                          (rule "castDel" (formula "39") (term "0"))
                                          (rule "add_zero_right" (formula "39") (term "0,2,0,1,0,1"))
                                          (rule "add_zero_right" (formula "39") (term "0,2,1,2,0,1"))
                                          (rule "add_zero_right" (formula "1") (term "0,2,0,1,0,1,1"))
                                          (rule "add_zero_right" (formula "1") (term "0,2,1,2,0,1,1"))
                                          (rule "add_zero_right" (formula "38") (term "0,2,0,0,1,1"))
                                          (rule "andLeft" (formula "2"))
                                          (rule "andLeft" (formula "4"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "eqSymm" (formula "6"))
                                          (rule "eqSymm" (formula "7"))
                                          (rule "eqSymm" (formula "41"))
                                          (rule "replace_known_left" (formula "40") (term "0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "40"))
                                          (rule "polySimp_elimSub" (formula "4") (term "1"))
                                          (rule "mul_literals" (formula "4") (term "1,1"))
                                          (rule "add_zero_right" (formula "4") (term "1"))
                                          (rule "polySimp_elimSub" (formula "40") (term "1"))
                                          (rule "mul_literals" (formula "40") (term "1,1"))
                                          (rule "add_zero_right" (formula "40") (term "1"))
                                          (rule "lenOfSeqDef" (formula "5") (term "1"))
                                          (rule "polySimp_elimSub" (formula "5") (term "1,1"))
                                          (rule "times_zero_2" (formula "5") (term "1,1,1"))
                                          (rule "add_zero_right" (formula "5") (term "1,1"))
                                          (rule "lenOfSeqDef" (formula "2") (term "1"))
                                          (rule "polySimp_elimSub" (formula "2") (term "1,1"))
                                          (rule "times_zero_2" (formula "2") (term "1,1,1"))
                                          (rule "add_zero_right" (formula "2") (term "1,1"))
                                          (rule "getOfSeqDef" (formula "41") (term "0"))
                                          (rule "castDel" (formula "41") (term "1,0"))
                                          (rule "castDel" (formula "41") (term "2,0"))
                                          (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "1")))
                                          (rule "add_zero_right" (formula "41") (term "0,2,0,1"))
                                          (rule "orRight" (formula "41"))
                                          (rule "notRight" (formula "41"))
                                          (rule "polySimp_elimSub" (formula "1") (term "1"))
                                          (rule "times_zero_2" (formula "1") (term "1,1"))
                                          (rule "add_zero_right" (formula "1") (term "1"))
                                          (rule "inEqSimp_ltRight" (formula "41"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                          (rule "polySimp_addComm0" (formula "1") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "6"))
                                          (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "6") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "7") (term "0,1"))
                                          (rule "add_zero_right" (formula "7") (term "0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "4") (term "0,1"))
                                          (rule "add_zero_right" (formula "4") (term "0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "7"))
                                          (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "7") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "5"))
                                          (rule "inEqSimp_commuteLeq" (formula "3"))
                                          (rule "inEqSimp_ltToLeq" (formula "4"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "4") (term "0"))
                                          (rule "applyEq" (formula "39") (term "1") (ifseqformula "8"))
                                          (rule "applyEq" (formula "31") (term "0,0,0,0,0") (ifseqformula "32"))
                                          (builtin "One Step Simplification" (formula "31"))
                                          (rule "true_left" (formula "31"))
                                          (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "31"))
                                          (builtin "One Step Simplification" (formula "30"))
                                          (rule "true_left" (formula "30"))
                                          (rule "applyEq" (formula "37") (term "0") (ifseqformula "9"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                          (rule "polySimp_elimOne" (formula "2") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                                          (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                                          (rule "polySimp_elimOne" (formula "7") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                                          (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                          (rule "polySimp_elimOne" (formula "4") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0"))
                                          (rule "polySimp_elimOne" (formula "7") (term "0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0"))
                                          (rule "polySimp_elimOne" (formula "4") (term "0,0,0"))
                                          (rule "array2seqDef" (formula "8") (term "0") (inst "u=u"))
                                          (rule "array2seqDef" (formula "8") (term "0") (inst "u=u"))
                                          (rule "eqSeqDef2" (formula "34") (inst "iv=iv") (ifseqformula "34"))
                                          (builtin "One Step Simplification" (formula "34"))
                                          (rule "true_left" (formula "34"))
                                          (rule "eqSeqDef2" (formula "33") (inst "iv=iv") (ifseqformula "33"))
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "true_left" (formula "33"))
                                          (rule "pullOutSelect" (formula "36") (term "0") (inst "selectSK=arr_46"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "eqSymm" (formula "37"))
                                          (rule "pullOutSelect" (formula "2") (term "0,0") (inst "selectSK=arr_47"))
                                          (rule "applyEq" (formula "6") (term "0,0,0,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "6") (term "0,1,0") (ifseqformula "2"))
                                          (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "33"))
                                          (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "48")))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,0,0") (ifseqformula "27"))
                                          (rule "eqSymm" (formula "2") (term "0,0,0"))
                                          (rule "replace_known_left" (formula "2") (term "0,0,1,0,0") (ifseqformula "13"))
                                          (builtin "One Step Simplification" (formula "2"))
                                          (rule "pullOutSelect" (formula "4") (term "0,0") (inst "selectSK=arr_48"))
                                          (rule "applyEq" (formula "1") (term "1,0,0,1,0,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "2") (term "2,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "1") (term "0,0,0,0,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "1") (term "1,2,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "1") (term "1,1,0") (ifseqformula "4"))
                                          (rule "simplifySelectOfAnonEQ" (formula "4") (ifseqformula "28"))
                                          (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "49")) (ifInst ""  (formula "14")))
                                          (rule "applyEqReverse" (formula "5") (term "0,0") (ifseqformula "4"))
                                          (rule "applyEqReverse" (formula "1") (term "1,0,0,1,0,0") (ifseqformula "4"))
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "4"))
                                          (rule "applyEqReverse" (formula "1") (term "0,0,0,0,0") (ifseqformula "4"))
                                          (rule "applyEqReverse" (formula "1") (term "1,2,0") (ifseqformula "4"))
                                          (rule "applyEqReverse" (formula "1") (term "1,1,0") (ifseqformula "4"))
                                          (rule "hideAuxiliaryEq" (formula "4"))
                                          (rule "arrayLengthIsAShort" (formula "37") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "37"))
                                          (rule "true_left" (formula "37"))
                                          (rule "arrayLengthNotNegative" (formula "36") (term "1,1,1,0,0"))
                                          (rule "ifthenelse_split" (formula "9") (term "0"))
                                          (branch "entr_arr.length >= 1 TRUE"
                                             (rule "inEqSimp_subsumption1" (formula "24") (ifseqformula "9"))
                                             (rule "leq_literals" (formula "24") (term "0"))
                                             (builtin "One Step Simplification" (formula "24"))
                                             (rule "true_left" (formula "24"))
                                             (rule "allLeft" (formula "24") (inst "t=iv_2"))
                                             (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "24") (term "1,0") (ifseqformula "7"))
                                             (rule "qeq_literals" (formula "24") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "24"))
                                             (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "8"))
                                             (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
                                             (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                                             (rule "add_zero_right" (formula "24") (term "0,0,1"))
                                             (rule "leq_literals" (formula "24") (term "0,1"))
                                             (builtin "One Step Simplification" (formula "24"))
                                             (rule "notLeft" (formula "24"))
                                             (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "38"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "ifthenelse_negated" (formula "1") (term "0"))
                                             (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "25") (ifseqformula "38"))
                                             (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "10") (ifseqformula "38"))
                                             (rule "ifthenelse_split" (formula "2") (term "0"))
                                             (branch "result_0 = entr_arr TRUE"
                                                (rule "applyEqReverse" (formula "7") (term "0,1,0") (ifseqformula "3"))
                                                (rule "applyEqReverse" (formula "7") (term "0,0,0,0") (ifseqformula "3"))
                                                (rule "applyEqReverse" (formula "4") (term "0,0") (ifseqformula "3"))
                                                (rule "hideAuxiliaryEq" (formula "3"))
                                                (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "2"))
                                                (rule "applyEq" (formula "29") (term "1,0") (ifseqformula "2"))
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "true_left" (formula "29"))
                                                (rule "applyEq" (formula "35") (term "0,1,1,1,0,0") (ifseqformula "2"))
                                                (rule "applyEq" (formula "51") (term "1,0") (ifseqformula "2"))
                                                (builtin "One Step Simplification" (formula "51"))
                                                (rule "closeTrue" (formula "51"))
                                             )
                                             (branch "result_0 = entr_arr FALSE"
                                                (rule "applyEqReverse" (formula "3") (term "0,0") (ifseqformula "2"))
                                                (rule "applyEqReverse" (formula "6") (term "0,0,0,0") (ifseqformula "2"))
                                                (rule "applyEqReverse" (formula "6") (term "0,1,0") (ifseqformula "2"))
                                                (rule "hideAuxiliaryEq" (formula "2"))
                                                (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "3"))
                                                (rule "andLeft" (formula "2"))
                                                (rule "inEqSimp_homoInEq1" (formula "2"))
                                                (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                (rule "add_literals" (formula "2") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "2") (term "1,0"))
                                                (rule "add_literals" (formula "2") (term "0"))
                                                (rule "leq_literals" (formula "2"))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                          )
                                          (branch "entr_arr.length >= 1 FALSE"
                                             (rule "inEqSimp_geqRight" (formula "39"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_homoInEq1" (formula "10"))
                                             (rule "times_zero_2" (formula "10") (term "1,0"))
                                             (rule "add_zero_right" (formula "10") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "10"))
                                             (rule "mul_literals" (formula "10") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "8"))
                                             (rule "qeq_literals" (formula "10") (term "0"))
                                             (builtin "One Step Simplification" (formula "10"))
                                             (rule "closeFalse" (formula "10"))
                                          )
                                       )
                                    )
                                 )
                                 (branch "0 <= iv_2 & iv_2 < entr_arr.length - 0 FALSE"
                                    (rule "close" (formula "37") (ifseqformula "1"))
                                 )
                              )
                              (branch "0 <= iv_2 & iv_2 < entr_arr.length - 0 FALSE"
                                 (rule "castDel" (formula "37") (term "0"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "eqSymm" (formula "3"))
                                 (rule "eqSymm" (formula "4"))
                                 (rule "eqSymm" (formula "38"))
                                 (rule "replace_known_left" (formula "37") (term "0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "37"))
                                 (rule "polySimp_elimSub" (formula "37") (term "1"))
                                 (rule "mul_literals" (formula "37") (term "1,1"))
                                 (rule "add_zero_right" (formula "37") (term "1"))
                                 (rule "lenOfSeqDef" (formula "2") (term "1"))
                                 (rule "polySimp_elimSub" (formula "2") (term "1,1"))
                                 (rule "mul_literals" (formula "2") (term "1,1,1"))
                                 (rule "add_zero_right" (formula "2") (term "1,1"))
                                 (rule "getOfSeqDef" (formula "38") (term "0"))
                                 (rule "castDel" (formula "38") (term "1,0"))
                                 (rule "castDel" (formula "38") (term "2,0"))
                                 (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "1")))
                                 (rule "add_zero_right" (formula "38") (term "0,2,1,0,1"))
                                 (rule "orRight" (formula "38"))
                                 (rule "notRight" (formula "38"))
                                 (rule "eqSymm" (formula "39"))
                                 (rule "polySimp_elimSub" (formula "1") (term "1"))
                                 (rule "mul_literals" (formula "1") (term "1,1"))
                                 (rule "add_zero_right" (formula "1") (term "1"))
                                 (rule "close" (formula "38") (ifseqformula "1"))
                              )
                           )
                        )
                     )
                     (branch "CUT: seqDef_1 = array2seq(heapAfter_copyOf, result_0) FALSE"
                        (rule "array2seqDef" (formula "34") (term "1") (inst "u=u") (userinteraction))
                        (rule "eqSymm" (formula "1"))
                        (rule "eqSymm" (formula "34"))
                        (rule "close" (formula "34") (ifseqformula "30"))
                     )
                  )
                  (branch "CUT: seqDef_0 = array2seq(heapAfter_sort, result_0) FALSE"
                     (rule "array2seqDef" (formula "33") (term "1") (inst "u=u") (userinteraction))
                     (rule "eqSymm" (formula "33"))
                     (rule "close" (formula "33") (ifseqformula "28"))
                  )
               )
               (branch "Case 2"
                  (rule "applyEq" (formula "21") (term "0,0") (ifseqformula "23"))
                  (builtin "One Step Simplification" (formula "21"))
                  (rule "true_left" (formula "21"))
                  (rule "applyEq" (formula "21") (term "0,0,0,0,0") (ifseqformula "22"))
                  (builtin "One Step Simplification" (formula "21"))
                  (rule "true_left" (formula "21"))
                  (rule "pullOutSelect" (formula "41") (term "1,0,0,1,0,0,1") (inst "selectSK=verif_selectvoting_system_core_ConservativeExtension_messages_1"))
                  (rule "applyEq" (formula "42") (term "0,0,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "42") (term "0,1,1,0,0,0,1") (ifseqformula "1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "0,0"))
                  (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "30"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "42") (term "1,0,0,1,0,0,1") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "42") (term "0,0,0") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "42") (term "0,1,1,0,0,0,1") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replace_known_right" (formula "41") (term "0,0") (ifseqformula "40"))
                  (builtin "One Step Simplification" (formula "41"))
                  (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "41") (term "0,1") (ifseqformula "3"))
                  (rule "nonNull" (formula "41") (term "0,0,0,0,0,0,0,1") (inst "i=i"))
                  (rule "sub_literals" (formula "41") (term "2,1,0,1,1,0,0,0,0,0,0,0,1"))
                  (builtin "One Step Simplification" (formula "41"))
                  (rule "greater_literals" (formula "41") (term "0,1,0,0,0,0,0,0,0,1"))
                  (builtin "One Step Simplification" (formula "41"))
                  (rule "inEqSimp_ltToLeq" (formula "41") (term "1,0,0,1,0,0,0,0,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,0,0,1,0,0,0,0,0,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "41") (term "0,0,0,1,0,0,0,0,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0,0,1,0,0,0,0,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "41") (term "1,1,0,0,1,0,0,0,0,0,0,0,1"))
                  (rule "polySimp_rightDist" (formula "41") (term "1,1,0,0,1,0,0,0,0,0,0,0,1"))
                  (rule "mul_literals" (formula "41") (term "0,1,1,0,0,1,0,0,0,0,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0,0,1,0,0,0,0,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "41") (term "1,1,1,0,0,1,0,0,0,0,0,0,0,1"))
                  (rule "nonNull" (formula "41") (term "1,0,0,0,0,0,1") (inst "i=i"))
                  (rule "greater_literals" (formula "41") (term "0,1,1,0,0,0,0,0,1"))
                  (builtin "One Step Simplification" (formula "41"))
                  (rule "sub_literals" (formula "41") (term "2,1,0,1,1,0,0,0,0,0,1"))
                  (builtin "One Step Simplification" (formula "41"))
                  (rule "inEqSimp_ltToLeq" (formula "41") (term "1,0,0,1,1,0,0,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,0,0,1,1,0,0,0,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "41") (term "0,0,0,1,1,0,0,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0,0,1,1,0,0,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "41") (term "1,1,0,0,1,1,0,0,0,0,0,1"))
                  (rule "polySimp_rightDist" (formula "41") (term "1,1,0,0,1,1,0,0,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0,0,1,1,0,0,0,0,0,1"))
                  (rule "mul_literals" (formula "41") (term "0,1,1,0,0,1,1,0,0,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "41") (term "1,1,1,0,0,1,1,0,0,0,0,0,1"))
                  (rule "nonNull" (formula "41") (term "1,0,0,0,0,0,0,1") (inst "i=i"))
                  (rule "sub_literals" (formula "41") (term "2,1,0,1,1,1,0,0,0,0,0,0,1"))
                  (builtin "One Step Simplification" (formula "41"))
                  (rule "greater_literals" (formula "41") (term "0,1,1,0,0,0,0,0,0,1"))
                  (builtin "One Step Simplification" (formula "41"))
                  (rule "inEqSimp_ltToLeq" (formula "41") (term "1,0,0,1,1,0,0,0,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,0,0,1,1,0,0,0,0,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "41") (term "0,0,0,1,1,0,0,0,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0,0,1,1,0,0,0,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "41") (term "1,1,0,0,1,1,0,0,0,0,0,0,1"))
                  (rule "polySimp_rightDist" (formula "41") (term "1,1,0,0,1,1,0,0,0,0,0,0,1"))
                  (rule "mul_literals" (formula "41") (term "0,1,1,0,0,1,1,0,0,0,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0,0,1,1,0,0,0,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "41") (term "1,1,1,0,0,1,1,0,0,0,0,0,0,1"))
                  (rule "pullOutSelect" (formula "41") (term "1,0,0,1,0,1,0,0,0,0,0,0,0,1") (inst "selectSK=verif_selectvoting_system_core_MixServer_b_1"))
                  (rule "applyEq" (formula "42") (term "0,1,1,1,0,0,1,0,0,0,0,0,0,0,1") (ifseqformula "1"))
                  (rule "applyEq" (formula "42") (term "0,0,0,0,0,0,0,0,0,0,1") (ifseqformula "1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "19"))
                  (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "3"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
                  (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "30"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")) (ifInst ""  (formula "3")))
                  (rule "applyEqReverse" (formula "42") (term "1,0,0,1,0,1,0,0,0,0,0,0,0,1") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "42") (term "0,1,1,1,0,0,1,0,0,0,0,0,0,0,1") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "42") (term "0,0,0,0,0,0,0,0,0,0,1") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replace_known_right" (formula "41") (term "0,0,0,0,0,0,0,0,0,1") (ifseqformula "31"))
                  (builtin "One Step Simplification" (formula "41"))
                  (rule "pullOutSelect" (formula "41") (term "0,0,1,0,0,0,0,1") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "19"))
                  (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "3"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
                  (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "40"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")) (ifInst ""  (formula "3")))
                  (rule "applyEqReverse" (formula "42") (term "0,0,1,0,0,0,0,1") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replace_known_right" (formula "41") (term "0,1,0,0,0,0,1") (ifseqformula "34"))
                  (builtin "One Step Simplification" (formula "41"))
                  (rule "pullOutSelect" (formula "41") (term "0,0,1,0,0,0,1") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "19"))
                  (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "3"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
                  (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "30"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")) (ifInst ""  (formula "3")))
                  (rule "applyEqReverse" (formula "42") (term "0,0,1,0,0,0,1") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replace_known_right" (formula "41") (term "0,1,0,0,0,1") (ifseqformula "35"))
                  (builtin "One Step Simplification" (formula "41"))
                  (rule "pullOutSelect" (formula "41") (term "1,0,0,1,0,1,1,0,0,0,1") (inst "selectSK=verif_selectvoting_system_core_MixServer_msg_1"))
                  (rule "applyEq" (formula "42") (term "0,1,1,1,0,0,1,1,0,0,0,1") (ifseqformula "1"))
                  (rule "applyEq" (formula "42") (term "0,0,0,1,0,0,0,1") (ifseqformula "1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "19"))
                  (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "3"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
                  (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "40"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")) (ifInst ""  (formula "3")))
                  (rule "applyEqReverse" (formula "42") (term "1,0,0,1,0,1,1,0,0,0,1") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "42") (term "0,1,1,1,0,0,1,1,0,0,0,1") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "42") (term "0,0,0,1,0,0,0,1") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replace_known_right" (formula "41") (term "0,0,1,0,0,0,1") (ifseqformula "33"))
                  (builtin "One Step Simplification" (formula "41"))
                  (rule "pullOutSelect" (formula "41") (term "0,0,1,0,1") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "19"))
                  (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "3"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
                  (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "30"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")) (ifInst ""  (formula "3")))
                  (rule "applyEqReverse" (formula "42") (term "0,0,1,0,1") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replace_known_right" (formula "41") (term "0,1,0,1") (ifseqformula "37"))
                  (builtin "One Step Simplification" (formula "41"))
                  (rule "pullOutSelect" (formula "41") (term "0,0,0,1,0,0,0,1") (inst "selectSK=verif_selectvoting_system_core_MixServer_a_1"))
                  (rule "applyEq" (formula "42") (term "1,0,0,1,0,1,1,0,0,0,1") (ifseqformula "1"))
                  (rule "applyEq" (formula "42") (term "0,1,1,1,0,0,1,1,0,0,0,1") (ifseqformula "1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "19"))
                  (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "3"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
                  (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "40"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")) (ifInst ""  (formula "3")))
                  (rule "applyEqReverse" (formula "42") (term "0,1,1,1,0,0,1,1,0,0,0,1") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "42") (term "0,0,0,1,0,0,0,1") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "42") (term "1,0,0,1,0,1,1,0,0,0,1") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replace_known_right" (formula "41") (term "0,0,1,0,0,0,1") (ifseqformula "32"))
                  (builtin "One Step Simplification" (formula "41"))
                  (rule "pullOutSelect" (formula "41") (term "0,0,1,0,1") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "19"))
                  (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "3"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
                  (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "30"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")) (ifInst ""  (formula "3")))
                  (rule "applyEqReverse" (formula "42") (term "0,0,1,0,1") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replace_known_right" (formula "41") (term "0,1,0,1") (ifseqformula "36"))
                  (builtin "One Step Simplification" (formula "41"))
                  (rule "nnf_imp2or" (formula "41") (term "0,1,0,1"))
                  (rule "nnf_imp2or" (formula "41") (term "0,0,0,0,1"))
                  (rule "nnf_imp2or" (formula "41") (term "0,1,0,0,1"))
                  (rule "nnf_notAnd" (formula "41") (term "0,0,1,0,1"))
                  (rule "inEqSimp_notGeq" (formula "41") (term "0,0,0,1,0,1"))
                  (rule "mul_literals" (formula "41") (term "1,0,0,0,0,0,1,0,1"))
                  (rule "add_zero_right" (formula "41") (term "0,0,0,0,0,1,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "0,0,0,1,0,1"))
                  (rule "mul_literals" (formula "41") (term "1,0,0,0,1,0,1"))
                  (rule "inEqSimp_notLeq" (formula "41") (term "1,0,0,1,0,1"))
                  (rule "polySimp_rightDist" (formula "41") (term "1,0,0,1,0,0,1,0,1"))
                  (rule "mul_literals" (formula "41") (term "0,1,0,0,1,0,0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "41") (term "0,0,1,0,0,1,0,1"))
                  (rule "add_literals" (formula "41") (term "0,0,0,1,0,0,1,0,1"))
                  (rule "add_zero_left" (formula "41") (term "0,0,1,0,0,1,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "1,0,0,1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0,1,0,1"))
                  (rule "polySimp_elimOne" (formula "41") (term "1,1,0,0,1,0,1"))
                  (rule "nnf_notAnd" (formula "41") (term "0,0,0,0,0,1"))
                  (rule "inEqSimp_notLeq" (formula "41") (term "1,0,0,0,0,0,1"))
                  (rule "polySimp_rightDist" (formula "41") (term "1,0,0,1,0,0,0,0,0,1"))
                  (rule "mul_literals" (formula "41") (term "0,1,0,0,1,0,0,0,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "41") (term "0,0,1,0,0,0,0,0,1"))
                  (rule "add_literals" (formula "41") (term "0,0,0,1,0,0,0,0,0,1"))
                  (rule "add_zero_left" (formula "41") (term "0,0,1,0,0,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "1,0,0,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "41") (term "1,1,0,0,0,0,0,1"))
                  (rule "inEqSimp_notGeq" (formula "41") (term "0,0,0,0,0,0,1"))
                  (rule "times_zero_1" (formula "41") (term "1,0,0,0,0,0,0,0,0,1"))
                  (rule "add_zero_right" (formula "41") (term "0,0,0,0,0,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "0,0,0,0,0,0,1"))
                  (rule "mul_literals" (formula "41") (term "1,0,0,0,0,0,0,1"))
                  (rule "nnf_notAnd" (formula "41") (term "0,0,1,0,0,1"))
                  (rule "inEqSimp_notGeq" (formula "41") (term "0,0,0,1,0,0,1"))
                  (rule "times_zero_1" (formula "41") (term "1,0,0,0,0,0,1,0,0,1"))
                  (rule "add_zero_right" (formula "41") (term "0,0,0,0,0,1,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "0,0,0,1,0,0,1"))
                  (rule "mul_literals" (formula "41") (term "1,0,0,0,1,0,0,1"))
                  (rule "inEqSimp_notLeq" (formula "41") (term "1,0,0,1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "41") (term "1,0,0,1,0,0,1,0,0,1"))
                  (rule "mul_literals" (formula "41") (term "0,1,0,0,1,0,0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "41") (term "0,0,1,0,0,1,0,0,1"))
                  (rule "add_literals" (formula "41") (term "0,0,0,1,0,0,1,0,0,1"))
                  (rule "add_zero_left" (formula "41") (term "0,0,1,0,0,1,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "1,0,0,1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "41") (term "1,1,0,0,1,0,0,1"))
                  (rule "andRight" (formula "41"))
                  (branch "Case 1"
                     (rule "allRight" (formula "41") (inst "sk=i_12"))
                     (rule "orRight" (formula "41"))
                     (rule "orRight" (formula "41"))
                     (rule "notRight" (formula "43"))
                     (rule "inEqSimp_leqRight" (formula "42"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_geqRight" (formula "43"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_22"))
                     (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "28"))
                     (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "44")))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,1,0,0") (ifseqformula "22"))
                     (rule "replace_known_left" (formula "3") (term "0,0,1,0,0") (ifseqformula "11"))
                     (builtin "One Step Simplification" (formula "3"))
                     (rule "applyEqRigid" (formula "3") (term "1") (ifseqformula "4"))
                     (rule "ifEqualsNull" (formula "3"))
                     (rule "pullOutSelect" (formula "3") (term "0,1,1") (inst "selectSK=arr_23"))
                     (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "23"))
                     (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "45")) (ifInst ""  (formula "12")))
                     (rule "applyEqReverse" (formula "4") (term "0,1,1") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "cnf_rightDist" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "commute_or" (formula "3"))
                     (rule "cnf_rightDist" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "commute_or" (formula "5"))
                     (rule "commute_or" (formula "4"))
                     (rule "cnf_rightDist" (formula "3"))
                     (builtin "One Step Simplification" (formula "3"))
                     (rule "commute_or" (formula "3"))
                     (rule "arrayLengthNotNegative" (formula "34") (term "1,1,0"))
                     (rule "arrayLengthIsAShort" (formula "32") (term "1,1"))
                     (builtin "One Step Simplification" (formula "32"))
                     (rule "true_left" (formula "32"))
                     (rule "allLeft" (formula "14") (inst "t=i_12"))
                     (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "14") (term "1,0") (ifseqformula "2"))
                     (rule "qeq_literals" (formula "14") (term "0,1,0"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1"))
                     (rule "add_literals" (formula "14") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "14") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "14") (term "0,0,1"))
                     (rule "leq_literals" (formula "14") (term "0,1"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "notLeft" (formula "14"))
                     (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "36"))
                     (builtin "One Step Simplification" (formula "5"))
                     (rule "replace_known_right" (formula "4") (term "1") (ifseqformula "36"))
                     (builtin "One Step Simplification" (formula "4"))
                     (rule "referencedObjectIsCreatedRightEQ" (formula "38") (ifseqformula "4") (ifseqformula "37"))
                     (rule "close" (formula "38") (ifseqformula "7"))
                  )
                  (branch "Case 2"
                     (rule "andRight" (formula "41"))
                     (branch "Case 1"
                        (rule "andRight" (formula "41"))
                        (branch "Case 1"
                           (rule "andRight" (formula "41"))
                           (branch "Case 1"
                              (rule "allRight" (formula "41") (inst "sk=i_11"))
                              (rule "orRight" (formula "41"))
                              (rule "notRight" (formula "42"))
                              (rule "orRight" (formula "42"))
                              (rule "inEqSimp_geqRight" (formula "43"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_leqRight" (formula "43"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_20"))
                              (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "28"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "35")))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,1,0,0") (ifseqformula "22"))
                              (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "27") (ifseqformula "35"))
                              (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                              (rule "ifEqualsNull" (formula "3"))
                              (rule "pullOutSelect" (formula "3") (term "0,1,1") (inst "selectSK=arr_21"))
                              (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "23"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "36")))
                              (rule "ifthenelse_negated" (formula "3") (term "0"))
                              (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "6") (ifseqformula "36"))
                              (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "22") (ifseqformula "36"))
                              (rule "arrayLengthNotNegative" (formula "31") (term "1,1"))
                              (rule "arrayLengthIsAShort" (formula "32") (term "1,1"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "true_left" (formula "32"))
                              (rule "orLeft" (formula "4"))
                              (branch " ( self.b = result_0 | !( self.b.<created> = TRUE | (self.b@heap).<created>@anon_heap_copyOf<<anonHeapFunction>> = TRUE)) & (self.b@heap)[i_11]@anon_heap_sort<<anonHeapFunction>> = null"
                                 (rule "andLeft" (formula "4"))
                                 (rule "ifthenelse_split" (formula "3") (term "0"))
                                 (branch "self.b.<created> = TRUE TRUE"
                                    (rule "hideAuxiliaryEq" (formula "4"))
                                    (rule "replace_known_left" (formula "4") (term "0,0,1") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "referencedObjectIsCreatedRightEQ" (formula "37") (ifseqformula "4") (ifseqformula "36"))
                                    (rule "close" (formula "37") (ifseqformula "7"))
                                 )
                                 (branch "self.b.<created> = TRUE FALSE"
                                    (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "39"))
                                    (rule "close" (formula "36") (ifseqformula "7"))
                                 )
                              )
                              (branch " !( self.b = result_0 | !( self.b.<created> = TRUE | (self.b@heap).<created>@anon_heap_copyOf<<anonHeapFunction>> = TRUE)) & arr_21<<selectSK>> = null"
                                 (rule "andLeft" (formula "4"))
                                 (rule "notLeft" (formula "4"))
                                 (rule "orRight" (formula "35"))
                                 (rule "notRight" (formula "36"))
                                 (rule "applyEq" (formula "4") (term "1") (ifseqformula "5"))
                                 (rule "ifEqualsNull" (formula "4"))
                                 (rule "cnf_rightDist" (formula "4"))
                                 (rule "andLeft" (formula "4"))
                                 (rule "commute_or" (formula "4"))
                                 (rule "cnf_rightDist" (formula "5"))
                                 (rule "andLeft" (formula "5"))
                                 (rule "commute_or" (formula "5"))
                                 (rule "cnf_rightDist" (formula "4"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "commute_or" (formula "4"))
                                 (rule "allLeft" (formula "18") (inst "t=i_11"))
                                 (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "18") (term "1") (ifseqformula "3"))
                                 (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1"))
                                 (rule "add_literals" (formula "18") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "18") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "18") (term "0,0,1"))
                                 (rule "leq_literals" (formula "18") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "inEqSimp_contradInEq1" (formula "18") (term "1") (ifseqformula "2"))
                                 (rule "qeq_literals" (formula "18") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "notLeft" (formula "18"))
                                 (rule "replace_known_right" (formula "4") (term "1") (ifseqformula "38"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "notLeft" (formula "4"))
                                 (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "42"))
                                 (rule "close" (formula "37") (ifseqformula "8"))
                              )
                           )
                           (branch "Case 2"
                              (rule "allRight" (formula "41") (inst "sk=i_10"))
                              (rule "orRight" (formula "41"))
                              (rule "notRight" (formula "42"))
                              (rule "orRight" (formula "42"))
                              (rule "inEqSimp_geqRight" (formula "43"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_leqRight" (formula "43"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_18"))
                              (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "28"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "36")))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,1,0,0") (ifseqformula "22"))
                              (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "27") (ifseqformula "36"))
                              (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                              (rule "ifEqualsNull" (formula "3"))
                              (rule "pullOutSelect" (formula "3") (term "0,1,1") (inst "selectSK=arr_19"))
                              (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "23"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "37")))
                              (rule "ifthenelse_negated" (formula "3") (term "0"))
                              (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "6") (ifseqformula "37"))
                              (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "22") (ifseqformula "37"))
                              (rule "arrayLengthNotNegative" (formula "31") (term "1,1"))
                              (rule "arrayLengthIsAShort" (formula "32") (term "1,1"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "true_left" (formula "32"))
                              (rule "orLeft" (formula "4"))
                              (branch " ( self.a = result_0 | !( self.a.<created> = TRUE | (self.a@heap).<created>@anon_heap_copyOf<<anonHeapFunction>> = TRUE)) & (self.a@heap)[i_10]@anon_heap_sort<<anonHeapFunction>> = null"
                                 (rule "andLeft" (formula "4"))
                                 (rule "ifthenelse_split" (formula "3") (term "0"))
                                 (branch "self.a.<created> = TRUE TRUE"
                                    (rule "hideAuxiliaryEq" (formula "4"))
                                    (rule "replace_known_left" (formula "4") (term "0,0,1") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "referencedObjectIsCreatedRightEQ" (formula "37") (ifseqformula "4") (ifseqformula "36"))
                                    (rule "close" (formula "37") (ifseqformula "7"))
                                 )
                                 (branch "self.a.<created> = TRUE FALSE"
                                    (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "40"))
                                    (rule "close" (formula "36") (ifseqformula "7"))
                                 )
                              )
                              (branch " !( self.a = result_0 | !( self.a.<created> = TRUE | (self.a@heap).<created>@anon_heap_copyOf<<anonHeapFunction>> = TRUE)) & arr_19<<selectSK>> = null"
                                 (rule "andLeft" (formula "4"))
                                 (rule "notLeft" (formula "4"))
                                 (rule "orRight" (formula "35"))
                                 (rule "notRight" (formula "36"))
                                 (rule "applyEq" (formula "4") (term "1") (ifseqformula "5"))
                                 (rule "ifEqualsNull" (formula "4"))
                                 (rule "cnf_rightDist" (formula "4"))
                                 (rule "andLeft" (formula "4"))
                                 (rule "commute_or" (formula "4"))
                                 (rule "cnf_rightDist" (formula "5"))
                                 (rule "andLeft" (formula "5"))
                                 (rule "commute_or" (formula "5"))
                                 (rule "cnf_rightDist" (formula "4"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "commute_or" (formula "4"))
                                 (rule "allLeft" (formula "20") (inst "t=i_10"))
                                 (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "3"))
                                 (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                                 (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "20") (term "0,0,1"))
                                 (rule "leq_literals" (formula "20") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "2"))
                                 (rule "qeq_literals" (formula "20") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "notLeft" (formula "20"))
                                 (rule "replace_known_right" (formula "4") (term "1") (ifseqformula "38"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "notLeft" (formula "4"))
                                 (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "43"))
                                 (rule "close" (formula "37") (ifseqformula "8"))
                              )
                           )
                        )
                        (branch "Case 2"
                           (rule "allRight" (formula "41") (inst "sk=i_9"))
                           (rule "orRight" (formula "41"))
                           (rule "notRight" (formula "42"))
                           (rule "orRight" (formula "42"))
                           (rule "inEqSimp_leqRight" (formula "42"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "43"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_16"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "28"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "37")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,1,0,0") (ifseqformula "22"))
                           (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "27") (ifseqformula "37"))
                           (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                           (rule "ifEqualsNull" (formula "3"))
                           (rule "pullOutSelect" (formula "3") (term "0,1,1") (inst "selectSK=arr_17"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "23"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "38")))
                           (rule "ifthenelse_negated" (formula "3") (term "0"))
                           (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "6") (ifseqformula "38"))
                           (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "22") (ifseqformula "38"))
                           (rule "arrayLengthIsAShort" (formula "31") (term "1,1"))
                           (builtin "One Step Simplification" (formula "31"))
                           (rule "true_left" (formula "31"))
                           (rule "arrayLengthNotNegative" (formula "31") (term "1,0"))
                           (rule "orLeft" (formula "4"))
                           (branch " ( self.msg = result_0 | !( self.msg.<created> = TRUE | (self.msg@heap).<created>@anon_heap_copyOf<<anonHeapFunction>> = TRUE)) & (self.msg@heap)[i_9]@anon_heap_sort<<anonHeapFunction>> = null"
                              (rule "andLeft" (formula "4"))
                              (rule "ifthenelse_split" (formula "3") (term "0"))
                              (branch "self.msg.<created> = TRUE TRUE"
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "replace_known_left" (formula "4") (term "0,0,1") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "referencedObjectIsCreatedRightEQ" (formula "37") (ifseqformula "4") (ifseqformula "36"))
                                 (rule "close" (formula "37") (ifseqformula "7"))
                              )
                              (branch "self.msg.<created> = TRUE FALSE"
                                 (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "41"))
                                 (rule "close" (formula "36") (ifseqformula "7"))
                              )
                           )
                           (branch " !( self.msg = result_0 | !( self.msg.<created> = TRUE | (self.msg@heap).<created>@anon_heap_copyOf<<anonHeapFunction>> = TRUE)) & arr_17<<selectSK>> = null"
                              (rule "andLeft" (formula "4"))
                              (rule "notLeft" (formula "4"))
                              (rule "orRight" (formula "35"))
                              (rule "notRight" (formula "36"))
                              (rule "applyEq" (formula "4") (term "1") (ifseqformula "5"))
                              (rule "ifEqualsNull" (formula "4"))
                              (rule "cnf_rightDist" (formula "4"))
                              (rule "andLeft" (formula "4"))
                              (rule "commute_or" (formula "4"))
                              (rule "cnf_rightDist" (formula "5"))
                              (rule "andLeft" (formula "5"))
                              (rule "commute_or" (formula "5"))
                              (rule "cnf_rightDist" (formula "4"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "commute_or" (formula "4"))
                              (rule "allLeft" (formula "22") (inst "t=i_9"))
                              (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "2"))
                              (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1"))
                              (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "22") (term "0,0,1"))
                              (rule "leq_literals" (formula "22") (term "0,1"))
                              (builtin "One Step Simplification" (formula "22"))
                              (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "3"))
                              (rule "qeq_literals" (formula "22") (term "0,1"))
                              (builtin "One Step Simplification" (formula "22"))
                              (rule "notLeft" (formula "22"))
                              (rule "replace_known_right" (formula "4") (term "1") (ifseqformula "38"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "notLeft" (formula "4"))
                              (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "44"))
                              (rule "close" (formula "37") (ifseqformula "8"))
                           )
                        )
                     )
                     (branch "Case 2"
                        (rule "allRight" (formula "41") (inst "sk=i_8"))
                        (rule "orRight" (formula "41"))
                        (rule "notRight" (formula "42"))
                        (rule "orRight" (formula "42"))
                        (rule "inEqSimp_leqRight" (formula "42"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_geqRight" (formula "43"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_13"))
                        (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "28"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "26") (ifseqformula "32"))
                        (rule "arrayLengthNotNegative" (formula "25") (term "1,1,0"))
                        (rule "arrayLengthIsAShort" (formula "30") (term "1,0"))
                        (builtin "One Step Simplification" (formula "30"))
                        (rule "true_left" (formula "30"))
                        (rule "allLeft" (formula "26") (inst "t=i_8"))
                        (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "26") (term "1,0") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "26") (term "0,1,0"))
                        (builtin "One Step Simplification" (formula "26"))
                        (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                        (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "26") (term "0,0,1"))
                        (rule "leq_literals" (formula "26") (term "0,1"))
                        (builtin "One Step Simplification" (formula "26"))
                        (rule "notLeft" (formula "26"))
                        (rule "pullOutSelect" (formula "33") (term "0") (inst "selectSK=arr_14"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "35")) (ifInst ""  (formula "36")))
                        (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "narrowSelectArrayType" (formula "33") (term "0") (ifseqformula "20") (ifseqformula "34"))
                        (rule "allLeft" (formula "32") (inst "t=i_8"))
                        (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "32") (term "1,0") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "32") (term "0,1,0"))
                        (builtin "One Step Simplification" (formula "32"))
                        (rule "inEqSimp_contradInEq1" (formula "32") (term "1") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1"))
                        (rule "add_literals" (formula "32") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "32") (term "1,0,0,1"))
                        (rule "add_literals" (formula "32") (term "0,0,1"))
                        (rule "leq_literals" (formula "32") (term "0,1"))
                        (builtin "One Step Simplification" (formula "32"))
                        (rule "notLeft" (formula "32"))
                        (rule "pullOutSelect" (formula "33") (term "0") (inst "selectSK=arr_15"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "1"))
                        (rule "close" (formula "34") (ifseqformula "4"))
                     )
                  )
               )
            )
            (branch "Case 2"
               (rule "allRight" (formula "43") (inst "sk=f_1"))
               (rule "allRight" (formula "43") (inst "sk=o_1"))
               (rule "orRight" (formula "43"))
               (rule "eqSymm" (formula "44"))
               (rule "applyEq" (formula "21") (term "0,0") (ifseqformula "23"))
               (builtin "One Step Simplification" (formula "21"))
               (rule "true_left" (formula "21"))
               (rule "applyEq" (formula "21") (term "0,0,0,0,0") (ifseqformula "22"))
               (builtin "One Step Simplification" (formula "21"))
               (rule "true_left" (formula "21"))
               (rule "pullOutSelect" (formula "42") (term "0") (inst "selectSK=f_1_0"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "19"))
               (rule "eqSymm" (formula "43"))
               (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_1_1"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")))
               (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "commute_and" (formula "1") (term "0,0,0"))
               (rule "ifthenelse_split" (formula "1") (term "0"))
               (branch " !f_1 = java.lang.Object::<created> & o_1 = result_0 | !o_1 = null & !( o_1.<created> = TRUE | o_1.<created>@anon_heap_copyOf<<anonHeapFunction>> = TRUE) TRUE"
                  (rule "applyEqReverse" (formula "44") (term "1") (ifseqformula "2"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "eqSymm" (formula "43"))
                  (rule "orLeft" (formula "1"))
                  (branch "!f_1 = java.lang.Object::<created> & o_1 = result_0"
                     (rule "andLeft" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "applyEq" (formula "44") (term "1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "43") (term "1,0,0,1") (ifseqformula "1"))
                     (rule "replace_known_right" (formula "43") (term "0,1") (ifseqformula "32"))
                     (builtin "One Step Simplification" (formula "43"))
                     (rule "notRight" (formula "43"))
                     (rule "applyEq" (formula "44") (term "1,1") (ifseqformula "2"))
                     (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "1"))
                     (rule "eqSymm" (formula "2"))
                     (rule "close" (formula "32") (ifseqformula "2"))
                  )
                  (branch " !o_1 = null & !( o_1.<created> = TRUE | o_1.<created>@anon_heap_copyOf<<anonHeapFunction>> = TRUE)"
                     (rule "andLeft" (formula "1"))
                     (rule "notLeft" (formula "2"))
                     (rule "notLeft" (formula "1"))
                     (rule "orRight" (formula "30"))
                     (rule "replace_known_right" (formula "44") (term "0,0") (ifseqformula "29"))
                     (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "30")))
                     (rule "closeTrue" (formula "44"))
                  )
               )
               (branch " !f_1 = java.lang.Object::<created> & o_1 = result_0 | !o_1 = null & !( o_1.<created> = TRUE | o_1.<created>@anon_heap_copyOf<<anonHeapFunction>> = TRUE) FALSE"
                  (rule "close" (formula "44") (ifseqformula "1"))
               )
            )
         )
         (branch "Exceptional Post (sort)"
            (builtin "One Step Simplification" (formula "39"))
            (builtin "One Step Simplification" (formula "26"))
            (rule "translateJavaSubInt" (formula "26") (term "1,1,0,0,0,1,0,1,1"))
            (rule "translateJavaAddInt" (formula "26") (term "0,2,2,0,1,0,0,1,0,1,1"))
            (rule "andLeft" (formula "26"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "1,0") (ifseqformula "26"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "0,1,0") (ifseqformula "18"))
            (rule "andLeft" (formula "27"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "27"))
            (rule "andLeft" (formula "29"))
            (rule "notLeft" (formula "27"))
            (rule "close" (formula "31") (ifseqformula "30"))
         )
         (branch "Pre (sort)"
            (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "25")) (ifInst ""  (formula "25")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "37") (term "1,1") (ifseqformula "18"))
            (rule "wellFormedAnonEQ" (formula "37") (term "0,1") (ifseqformula "18"))
            (rule "leq_literals" (formula "37") (term "0,0,1,0"))
            (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "1")) (ifInst ""  (formula "17")) (ifInst ""  (formula "26")) (ifInst ""  (formula "20")))
            (rule "inEqSimp_ltToLeq" (formula "37") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "37") (term "0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "37") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "37") (term "0,1"))
            (rule "inEqSimp_commuteLeq" (formula "37") (term "0,0,1,1"))
            (rule "inEqSimp_homoInEq0" (formula "37") (term "1,0,1,1"))
            (rule "polySimp_pullOutFactor1" (formula "37") (term "0,1,0,1,1"))
            (rule "add_literals" (formula "37") (term "1,0,1,0,1,1"))
            (rule "times_zero_1" (formula "37") (term "0,1,0,1,1"))
            (rule "qeq_literals" (formula "37") (term "1,0,1,1"))
            (builtin "One Step Simplification" (formula "37"))
            (rule "applyEq" (formula "21") (term "0,0") (ifseqformula "23"))
            (builtin "One Step Simplification" (formula "21"))
            (rule "true_left" (formula "21"))
            (rule "applyEq" (formula "21") (term "0,0,0,0,0") (ifseqformula "22"))
            (builtin "One Step Simplification" (formula "21"))
            (rule "true_left" (formula "21"))
            (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "35") (term "0,1,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,0"))
            (rule "nonNull" (formula "35") (term "1,1,1,1") (inst "i=i"))
            (rule "sub_literals" (formula "35") (term "2,1,0,1,1,1,1,1,1"))
            (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "23")))
            (rule "greater_literals" (formula "35") (term "0,1,1,1,1"))
            (builtin "One Step Simplification" (formula "35"))
            (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,1,1,1,1"))
            (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,1,1,1,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,1,1,1,1"))
            (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1,1,1,1"))
            (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1,1,1,1"))
            (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1,1,1,1"))
            (rule "nnf_imp2or" (formula "35") (term "0,0"))
            (rule "nnf_notAnd" (formula "35") (term "0,0,0"))
            (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,0"))
            (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0,0"))
            (rule "add_zero_right" (formula "35") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,0"))
            (rule "mul_literals" (formula "35") (term "1,0,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,0"))
            (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,0"))
            (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,0"))
            (rule "add_zero_left" (formula "35") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,0"))
            (rule "nnf_imp2or" (formula "35") (term "0,1,1,1,1"))
            (rule "nnf_notAnd" (formula "35") (term "0,0,1,1,1,1"))
            (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,1,1,1,1"))
            (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0,1,1,1,1"))
            (rule "add_literals" (formula "35") (term "0,0,0,0,0,1,1,1,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,1,1,1,1"))
            (rule "mul_literals" (formula "35") (term "1,0,0,0,1,1,1,1"))
            (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,1,1,1,1"))
            (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1,1,1,1"))
            (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,1,1,1,1"))
            (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1,1,1,1"))
            (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,1,1,1,1"))
            (rule "add_zero_left" (formula "35") (term "0,0,1,0,0,1,1,1,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,1,1,1,1"))
            (rule "arrayLengthNotNegative" (formula "22") (term "1,1,0"))
            (rule "replace_known_left" (formula "36") (term "0,1") (ifseqformula "22"))
            (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "22")) (ifInst ""  (formula "22")))
            (rule "andRight" (formula "36"))
            (branch "Case 1"
               (rule "allRight" (formula "36") (inst "sk=i_6"))
               (rule "orRight" (formula "36"))
               (rule "notRight" (formula "37"))
               (rule "orRight" (formula "37"))
               (rule "inEqSimp_geqRight" (formula "38"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_leqRight" (formula "38"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
               (rule "polySimp_elimOne" (formula "2") (term "0"))
               (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_11"))
               (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "22"))
               (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "28")) (ifInst ""  (formula "29")))
               (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
               (rule "hideAuxiliaryEq" (formula "3"))
               (rule "arrayLengthIsAShort" (formula "26") (term "1,1,0"))
               (builtin "One Step Simplification" (formula "26"))
               (rule "true_left" (formula "26"))
               (rule "allLeft" (formula "26") (inst "t=i_6"))
               (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "26") (term "1,0") (ifseqformula "1"))
               (rule "qeq_literals" (formula "26") (term "0,1,0"))
               (builtin "One Step Simplification" (formula "26"))
               (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "2"))
               (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
               (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "26") (term "0,0,1"))
               (rule "leq_literals" (formula "26") (term "0,1"))
               (builtin "One Step Simplification" (formula "26"))
               (rule "notLeft" (formula "26"))
               (rule "pullOutSelect" (formula "27") (term "0") (inst "selectSK=arr_12"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")) (ifInst ""  (formula "30")))
               (rule "applyEqReverse" (formula "28") (term "0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "narrowSelectArrayType" (formula "27") (term "0") (ifseqformula "20") (ifseqformula "28"))
               (rule "close" (formula "27") (ifseqformula "3"))
            )
            (branch "Case 2"
               (rule "allRight" (formula "36") (inst "sk=i_5"))
               (rule "orRight" (formula "36"))
               (rule "notRight" (formula "37"))
               (rule "orRight" (formula "37"))
               (rule "inEqSimp_leqRight" (formula "37"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_geqRight" (formula "38"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_10"))
               (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "22"))
               (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "28")) (ifInst ""  (formula "29")))
               (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
               (rule "hideAuxiliaryEq" (formula "3"))
               (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "20") (ifseqformula "27"))
               (rule "arrayLengthIsAShort" (formula "26") (term "1,1,0"))
               (builtin "One Step Simplification" (formula "26"))
               (rule "true_left" (formula "26"))
               (rule "allLeft" (formula "26") (inst "t=i_5"))
               (rule "replaceKnownSelect_taclet12000_0" (formula "26") (term "0,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet12000_1" (formula "26") (term "0,0,0,0"))
               (rule "narrowSelectArrayType" (formula "26") (term "0,0,0,0") (ifseqformula "20") (ifseqformula "28"))
               (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "3"))
               (builtin "One Step Simplification" (formula "26"))
               (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "1"))
               (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
               (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "26") (term "0,0,1"))
               (rule "leq_literals" (formula "26") (term "0,1"))
               (builtin "One Step Simplification" (formula "26"))
               (rule "inEqSimp_contradInEq1" (formula "26") (ifseqformula "2"))
               (rule "qeq_literals" (formula "26") (term "0"))
               (builtin "One Step Simplification" (formula "26"))
               (rule "closeFalse" (formula "26"))
            )
         )
      )
      (branch "Null Reference (result_1 = null)"
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "if x false"
      (builtin "One Step Simplification" (formula "38"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Exceptional Post (copyOf)"
   (builtin "One Step Simplification" (formula "12"))
   (builtin "One Step Simplification" (formula "23"))
   (rule "andLeft" (formula "12"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "1,0") (ifseqformula "12"))
   (rule "andLeft" (formula "13"))
   (rule "andLeft" (formula "13"))
   (rule "andLeft" (formula "15"))
   (rule "notLeft" (formula "13"))
   (rule "close" (formula "16") (ifseqformula "15"))
)
(branch "Pre (copyOf)"
   (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "18")) (ifInst ""  (formula "1")) (ifInst ""  (formula "18")) (ifInst ""  (formula "4")))
   (rule "nonNull" (formula "21") (inst "i=i"))
   (rule "sub_literals" (formula "21") (term "2,1,0,1,1"))
   (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "18")))
   (rule "greater_literals" (formula "21") (term "0"))
   (builtin "One Step Simplification" (formula "21"))
   (rule "allRight" (formula "21") (inst "sk=i_7"))
   (rule "impRight" (formula "21"))
   (rule "andLeft" (formula "1"))
   (rule "notRight" (formula "23"))
   (rule "narrowSelectArrayType" (formula "1") (term "0") (ifseqformula "4") (ifseqformula "21"))
   (rule "inEqSimp_ltToLeq" (formula "3"))
   (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "3") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "2"))
   (rule "inEqSimp_sepNegMonomial0" (formula "3"))
   (rule "polySimp_mulLiterals" (formula "3") (term "0"))
   (rule "polySimp_elimOne" (formula "3") (term "0"))
   (rule "allLeft" (formula "13") (inst "t=i_7"))
   (rule "replace_known_left" (formula "13") (term "0,0,0") (ifseqformula "1"))
   (builtin "One Step Simplification" (formula "13"))
   (rule "inEqSimp_commuteGeq" (formula "13") (term "1"))
   (rule "inEqSimp_contradInEq1" (formula "13") (term "0") (ifseqformula "2"))
   (rule "qeq_literals" (formula "13") (term "0,0"))
   (builtin "One Step Simplification" (formula "13"))
   (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "13"))
   (rule "andLeft" (formula "3"))
   (rule "inEqSimp_homoInEq1" (formula "3"))
   (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
   (rule "add_literals" (formula "3") (term "1,1,0"))
   (rule "times_zero_1" (formula "3") (term "1,0"))
   (rule "add_zero_right" (formula "3") (term "0"))
   (rule "leq_literals" (formula "3"))
   (rule "closeFalse" (formula "3"))
)
)

}
