\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Nov 28 17:06:31 CET 2016
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=8000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , permissions-permissions\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\proofObligation "#Proof Obligation Settings
#Mon Nov 28 17:06:31 CET 2016
name=lenInverse2
class=de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput
";

\proof {
(keyLog "0" (keyUser "mihai" ) (keyVersion "09f735064ff7095c3fc50fbed0305eab50b24aa5"))

(autoModeTime "1697")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "f_i,f_s"))
(rule "notRight" (formula "2"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "cut" (inst "cutFormula=  seq2int(seqConcat(int2seq(f_i), f_s))
= seq2int(int2seq(f_i))") (userinteraction))
(branch "CUT: seq2int(seqConcat(int2seq(f_i), f_s)) = seq2int(int2seq(f_i)) TRUE"
   (rule "applyEq" (formula "4") (term "0") (ifseqformula "1") (userinteraction))
   (rule "lenInverse" (formula "4") (term "0") (ifseqformula "2") (ifseqformula "3") (userinteraction))
   (builtin "One Step Simplification" (formula "3"))
   (builtin "One Step Simplification" (formula "4"))
   (rule "closeTrue" (formula "4"))
)
(branch "CUT: seq2int(seqConcat(int2seq(f_i), f_s)) = seq2int(int2seq(f_i)) FALSE"
   (rule "hide_right" (formula "4") (userinteraction))
   (rule "defOfint2seq" (formula "3") (term "0,0,0") (userinteraction))
   (rule "defOfseq2int" (formula "3") (term "0") (userinteraction))
   (rule "defOfint2seq" (formula "3") (term "0,1") (userinteraction))
   (rule "defOfseq2int" (formula "3") (term "1") (userinteraction))
   (builtin "One Step Simplification" (formula "2"))
   (rule "true_left" (formula "2"))
   (rule "translateJavaAddInt" (formula "2") (term "0"))
   (rule "translateJavaAddInt" (formula "2") (term "1"))
   (rule "translateJavaMulInt" (formula "2") (term "0,0"))
   (rule "translateJavaAddInt" (formula "2") (term "1,0"))
   (rule "translateJavaMod" (formula "2") (term "0,0,1,1,1,0,0,1,0,1,1,1"))
   (rule "translateJavaMulInt" (formula "2") (term "0,1"))
   (rule "translateJavaMulInt" (formula "2") (term "0,1,1"))
   (rule "translateJavaCastByte" (formula "2") (term "0,0,0,0,1,0,1,1,1"))
   (rule "translateJavaCastByte" (formula "2") (term "0,0,1,0,0,1,0,1,1,1"))
   (rule "translateJavaCastByte" (formula "2") (term "0,0,1,1,0,0,1,0,1,1,1"))
   (rule "translateJavaCastByte" (formula "2") (term "0,0,0,0,1,1,1,1"))
   (rule "translateJavaCastByte" (formula "2") (term "0,0,1,0,0,1,1,1,1"))
   (rule "translateJavaCastByte" (formula "2") (term "0,0,1,1,0,0,1,1,1,1"))
   (rule "translateJavaCastByte" (formula "2") (term "0,1,1,1,0,0,1,1,1,1"))
   (rule "translateJavaCastByte" (formula "2") (term "0,0,0,0,0,1,0,0"))
   (rule "translateJavaCastByte" (formula "2") (term "0,0,1,0,0,0,1,0,0"))
   (rule "translateJavaCastByte" (formula "2") (term "0,0,1,1,0,0,0,1,0,0"))
   (rule "translateJavaCastByte" (formula "2") (term "0,1,1,1,0,0,0,1,0,0"))
   (rule "translateJavaMulInt" (formula "2") (term "0,1,0"))
   (rule "translateJavaAddInt" (formula "2") (term "1,1,0"))
   (rule "translateJavaCastByte" (formula "2") (term "0,1,1,1,0,0,1,0,1,1,1"))
   (rule "translateJavaCastByte" (formula "2") (term "0,0,0,0,1,0,1"))
   (rule "translateJavaCastByte" (formula "2") (term "0,0,1,0,0,1,0,1"))
   (rule "translateJavaCastByte" (formula "2") (term "0,0,1,1,0,0,1,0,1"))
   (rule "translateJavaCastByte" (formula "2") (term "0,1,1,1,0,0,1,0,1"))
   (rule "translateJavaCastByte" (formula "2") (term "0,0,0,0,1,0,1,1"))
   (rule "translateJavaCastByte" (formula "2") (term "0,0,1,0,0,1,0,1,1"))
   (rule "translateJavaCastByte" (formula "2") (term "0,0,1,1,0,0,1,0,1,1"))
   (rule "translateJavaCastByte" (formula "2") (term "0,1,1,1,0,0,1,0,1,1"))
   (rule "translateJavaMod" (formula "2") (term "0,0,0,0,1,0,1,1,1"))
   (rule "translateJavaMod" (formula "2") (term "0,0,1,0,0,1,0,1,1,1"))
   (rule "translateJavaMod" (formula "2") (term "0,0,1,1,0,0,1,0,1,1,1"))
   (rule "translateJavaMod" (formula "2") (term "0,0,0,0,1,1,1,1"))
   (rule "translateJavaMod" (formula "2") (term "0,0,1,0,0,1,1,1,1"))
   (rule "translateJavaMod" (formula "2") (term "0,0,1,1,0,0,1,1,1,1"))
   (rule "translateJavaMod" (formula "2") (term "0,1,1,1,0,0,1,1,1,1"))
   (rule "translateJavaMod" (formula "2") (term "0,0,0,0,0,1,0,0"))
   (rule "translateJavaMod" (formula "2") (term "0,0,1,0,0,0,1,0,0"))
   (rule "translateJavaMod" (formula "2") (term "0,0,1,1,0,0,0,1,0,0"))
   (rule "translateJavaMod" (formula "2") (term "0,1,1,1,0,0,0,1,0,0"))
   (rule "translateJavaCastByte" (formula "2") (term "0,0,0,0,0,1,0,1,0"))
   (rule "translateJavaCastByte" (formula "2") (term "0,0,1,0,0,0,1,0,1,0"))
   (rule "translateJavaCastByte" (formula "2") (term "0,0,1,1,0,0,0,1,0,1,0"))
   (rule "translateJavaCastByte" (formula "2") (term "0,1,1,1,0,0,0,1,0,1,0"))
   (rule "translateJavaMulInt" (formula "2") (term "0,1,1,0"))
   (rule "translateJavaCastByte" (formula "2") (term "0,0,0,0,0,1,1,1,0"))
   (rule "translateJavaCastByte" (formula "2") (term "0,0,1,0,0,0,1,1,1,0"))
   (rule "translateJavaCastByte" (formula "2") (term "0,0,1,1,0,0,0,1,1,1,0"))
   (rule "translateJavaCastByte" (formula "2") (term "0,1,1,1,0,0,0,1,1,1,0"))
   (rule "translateJavaMod" (formula "2") (term "0,0,0,0,1,0,1"))
   (rule "translateJavaMod" (formula "2") (term "0,0,1,0,0,1,0,1"))
   (rule "translateJavaMod" (formula "2") (term "0,0,1,1,0,0,1,0,1"))
   (rule "translateJavaMod" (formula "2") (term "0,1,1,1,0,0,1,0,1"))
   (rule "translateJavaMod" (formula "2") (term "0,0,0,0,1,0,1,1"))
   (rule "translateJavaMod" (formula "2") (term "0,0,1,0,0,1,0,1,1"))
   (rule "translateJavaMod" (formula "2") (term "0,0,1,1,0,0,1,0,1,1"))
   (rule "translateJavaMod" (formula "2") (term "0,1,1,1,0,0,1,0,1,1"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,0,0,1,0,1,1,1"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,1,0,0,1,0,1,1,1"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,1,1,0,0,1,0,1,1,1"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,0,0,1,1,1,1"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,1,0,0,1,1,1,1"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,1,1,0,0,1,1,1,1"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,0,0,0,1,0,0"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,1,0,0,0,1,0,0"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,1,1,0,0,0,1,0,0"))
   (rule "translateJavaMod" (formula "2") (term "0,0,0,0,0,1,0,1,0"))
   (rule "translateJavaMod" (formula "2") (term "0,0,1,0,0,0,1,0,1,0"))
   (rule "translateJavaMod" (formula "2") (term "0,0,1,1,0,0,0,1,0,1,0"))
   (rule "translateJavaMod" (formula "2") (term "0,1,1,1,0,0,0,1,0,1,0"))
   (rule "translateJavaCastByte" (formula "2") (term "0,0,0,0,0,1,0,1,1,0"))
   (rule "translateJavaCastByte" (formula "2") (term "0,0,1,0,0,0,1,0,1,1,0"))
   (rule "translateJavaCastByte" (formula "2") (term "0,0,1,1,0,0,0,1,0,1,1,0"))
   (rule "translateJavaCastByte" (formula "2") (term "0,1,1,1,0,0,0,1,0,1,1,0"))
   (rule "translateJavaMod" (formula "2") (term "0,0,0,0,0,1,1,1,0"))
   (rule "translateJavaMod" (formula "2") (term "0,0,1,0,0,0,1,1,1,0"))
   (rule "translateJavaMod" (formula "2") (term "0,0,1,1,0,0,0,1,1,1,0"))
   (rule "translateJavaMod" (formula "2") (term "0,1,1,1,0,0,0,1,1,1,0"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,0,0,1,0,1"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,1,0,0,1,0,1"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,1,1,0,0,1,0,1"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,0,0,1,0,1,1"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,1,0,0,1,0,1,1"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,1,1,0,0,1,0,1,1"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,0,0,0,1,0,1,1,1"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,0,1,0,0,1,0,1,1,1"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,0,0,0,1,1,1,1"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,0,1,0,0,1,1,1,1"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,0,0,0,0,1,0,0"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,0,1,0,0,0,1,0,0"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,0,0,0,1,0,1,0"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,1,0,0,0,1,0,1,0"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,1,1,0,0,0,1,0,1,0"))
   (rule "translateJavaMod" (formula "2") (term "0,0,0,0,0,1,0,1,1,0"))
   (rule "translateJavaMod" (formula "2") (term "0,0,1,0,0,0,1,0,1,1,0"))
   (rule "translateJavaMod" (formula "2") (term "0,0,1,1,0,0,0,1,0,1,1,0"))
   (rule "translateJavaMod" (formula "2") (term "0,1,1,1,0,0,0,1,0,1,1,0"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,0,0,0,1,1,1,0"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,1,0,0,0,1,1,1,0"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,1,1,0,0,0,1,1,1,0"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,0,0,0,1,0,1"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,0,1,0,0,1,0,1"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,0,0,0,1,0,1,1"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,0,1,0,0,1,0,1,1"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,0,0,0,0,1,0,1,1,1"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,0,0,0,0,1,1,1,1"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,0,0,0,0,0,1,0,0"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,0,0,0,0,1,0,1,0"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,0,1,0,0,0,1,0,1,0"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,0,0,0,1,0,1,1,0"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,1,0,0,0,1,0,1,1,0"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,1,1,0,0,0,1,0,1,1,0"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,0,0,0,0,1,1,1,0"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,0,1,0,0,0,1,1,1,0"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,0,0,0,0,1,0,1"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,0,0,0,0,1,0,1,1"))
   (rule "translateJavaMulInt" (formula "2") (term "0,1,1,1"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,0,0,0,0,0,1,0,1,0"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,0,0,0,0,1,0,1,1,0"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,0,1,0,0,0,1,0,1,1,0"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,0,0,0,0,0,1,1,1,0"))
   (rule "translateJavaAddInt" (formula "2") (term "1,1"))
   (rule "translateJavaDivInt" (formula "2") (term "0,0,0,0,0,0,0,0,1,0,1,1,0"))
   (rule "translateJavaAddInt" (formula "2") (term "1,1,1"))
   (rule "polySimp_mulComm0" (formula "2") (term "0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "0,1"))
   (rule "polySimp_mulComm0" (formula "2") (term "0,1,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "0,1,1"))
   (rule "polySimp_mulComm0" (formula "2") (term "0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "0,1,1,1"))
   (rule "polySimp_addAssoc" (formula "2") (term "1,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "1,1"))
   (rule "polySimp_addAssoc" (formula "2") (term "0"))
   (rule "polySimp_addAssoc" (formula "2") (term "1"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
   (rule "polySimp_homoEq" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "0,1,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,1,0"))
   (rule "polySimp_mulAssoc" (formula "2") (term "0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "0,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0"))
   (rule "jmod_axiom" (formula "2") (term "0,1,1,1,0,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,1,1,0,0,0,0,1,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0"))
   (rule "polySimp_addComm1" (formula "2") (term "0,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
   (rule "jmod_axiom" (formula "2") (term "0,1,1,1,0,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,1,1,0,0,0,0,1,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0"))
   (rule "polySimp_addComm1" (formula "2") (term "0,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
   (rule "jmod_axiom" (formula "2") (term "0,1,1,1,0,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,1,1,0,0,0,0,1,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0"))
   (rule "polySimp_addComm1" (formula "2") (term "0,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
   (rule "jmod_axiom" (formula "2") (term "0,1,1,1,0,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,1,1,0,0,0,0,1,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0"))
   (rule "polySimp_addComm1" (formula "2") (term "0,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
   (rule "jmod_axiom" (formula "2") (term "0,1,1,1,0,0,0,0,0,0,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0"))
   (rule "jmod_axiom" (formula "2") (term "0,1,1,1,0,0,1,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,1,1,0,0,1,0,0,0,0,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0,0,0,0,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0,0,0,0,0,0"))
   (rule "jmod_axiom" (formula "2") (term "0,1,1,1,0,0,0,1,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,1,1,0,0,0,1,0,0,0,0,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0,0,0,0,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0,0,0,0,0,0"))
   (rule "jmod_axiom" (formula "2") (term "0,1,1,1,0,0,0,1,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,1,1,0,0,0,1,0,0,0,0,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0,0,0,0,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0,0,0,0,0,0"))
   (rule "polySimp_sepNegMonomial" (formula "2"))
   (rule "polySimp_mulLiterals" (formula "2") (term "0"))
   (rule "polySimp_elimOne" (formula "2") (term "0"))
   (rule "getOfSeqConcat" (formula "2") (term "0,0,1,0,1"))
   (rule "polySimp_elimSub" (formula "2") (term "1,2,0,0,1,0,1"))
   (rule "polySimp_homoEq" (formula "2"))
   (rule "polySimp_addComm1" (formula "2") (term "0,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,1,2,0,0,1,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,1,2,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,1,2,0,0,1,0"))
   (rule "mul_literals" (formula "2") (term "0,1,1,2,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "1,2,0,0,1,0"))
   (rule "add_literals" (formula "2") (term "0,1,2,0,0,1,0"))
   (rule "add_zero_left" (formula "2") (term "1,2,0,0,1,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "1,0,0,0,1,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "lenOfSeqConcat" (formula "2") (term "1,1,0,0,0,1,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_addAssoc" (formula "2") (term "1,0,0,0,1,0"))
   (rule "add_literals" (formula "2") (term "0,1,0,0,0,1,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,2,0,0,1,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,2,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,2,0,0,1,0"))
   (rule "mul_literals" (formula "2") (term "0,1,2,0,0,1,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "1,1,0,0,0,1,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "add_literals" (formula "2") (term "1,1,0,0,0,1,0"))
   (rule "add_literals" (formula "2") (term "1,0,0,0,1,0"))
   (rule "less_literals" (formula "2") (term "0,0,0,1,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_addComm1" (formula "2") (term "0"))
   (rule "polySimp_addComm1" (formula "2") (term "0,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0,0,0,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0,0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0,0,0,0,0"))
   (rule "add_literals" (formula "2") (term "1,1,0,0,0,0,0,0"))
   (rule "times_zero_1" (formula "2") (term "1,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "2") (term "0,0,0,0,0,0"))
   (rule "polySimp_sepNegMonomial" (formula "2"))
   (rule "polySimp_mulLiterals" (formula "2") (term "0"))
   (rule "polySimp_elimOne" (formula "2") (term "0"))
   (rule "getOfSeqConcat" (formula "2") (term "0,0,1,0,1"))
   (rule "polySimp_elimSub" (formula "2") (term "1,2,0,0,1,0,1"))
   (rule "add_zero_left" (formula "2") (term "1,2,0,0,1,0,1"))
   (rule "polySimp_homoEq" (formula "2"))
   (rule "polySimp_addComm1" (formula "2") (term "0,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,2,0,0,1,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,2,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,2,0,0,1,0"))
   (rule "mul_literals" (formula "2") (term "0,1,2,0,0,1,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "1,0,0,0,1,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,1,2,0,0,1,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,1,2,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,1,2,0,0,1,0"))
   (rule "mul_literals" (formula "2") (term "0,1,1,2,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "1,2,0,0,1,0"))
   (rule "add_literals" (formula "2") (term "0,1,2,0,0,1,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "1,1,0,0,0,1,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_addAssoc" (formula "2") (term "1,0,0,0,1,0"))
   (rule "add_literals" (formula "2") (term "0,1,0,0,0,1,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,1,2,0,0,1,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "add_literals" (formula "2") (term "0,1,1,2,0,0,1,0"))
   (rule "mul_literals" (formula "2") (term "1,1,2,0,0,1,0"))
   (rule "add_literals" (formula "2") (term "1,2,0,0,1,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "1,1,0,0,0,1,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "add_literals" (formula "2") (term "1,1,0,0,0,1,0"))
   (rule "add_literals" (formula "2") (term "1,0,0,0,1,0"))
   (rule "less_literals" (formula "2") (term "0,0,0,1,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_addComm1" (formula "2") (term "0"))
   (rule "polySimp_addComm1" (formula "2") (term "0,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0" (formula "2") (term "0,0,0,0,0"))
   (rule "add_literals" (formula "2") (term "1,0,0,0,0,0"))
   (rule "times_zero_1" (formula "2") (term "0,0,0,0,0"))
   (rule "add_zero_left" (formula "2") (term "0,0,0,0"))
   (rule "polySimp_sepNegMonomial" (formula "2"))
   (rule "polySimp_mulLiterals" (formula "2") (term "0"))
   (rule "polySimp_elimOne" (formula "2") (term "0"))
   (rule "getOfSeqConcat" (formula "2") (term "0,0,0,0,1"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "less_literals" (formula "2") (term "0,0,0,0,0,1"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "sub_literals" (formula "2") (term "1,0,0,0,0,1"))
   (rule "defOfunsign" (formula "2") (term "0,1,1"))
   (rule "translateJavaAddInt" (formula "2") (term "1,0,1,1"))
   (rule "translateJavaCastInt" (formula "2") (term "0,1,0,1,1"))
   (rule "polySimp_homoEq" (formula "2"))
   (rule "polySimp_addComm1" (formula "2") (term "0"))
   (rule "polySimp_addComm0" (formula "2") (term "1,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,1,0"))
   (rule "mul_literals" (formula "2") (term "1,0,0,0,0,1,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0"))
   (rule "polySimp_sepNegMonomial" (formula "2"))
   (rule "polySimp_mulLiterals" (formula "2") (term "0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0"))
   (rule "mul_literals" (formula "2") (term "1,0,0,0"))
   (rule "getOfSeqConcat" (formula "2") (term "0,1,0,1"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "less_literals" (formula "2") (term "0,0,1,0,1"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "sub_literals" (formula "2") (term "1,0,1,0,1"))
   (rule "getOfSeqConcat" (formula "2") (term "0,0,1,1"))
   (rule "polySimp_homoEq" (formula "2"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
   (rule "polySimp_elimSub" (formula "2") (term "1,2,0,0,1,0,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0"))
   (rule "lenOfSeqConcat" (formula "2") (term "1,0,0,0,1,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "lenOfSeqConcat" (formula "2") (term "1,1,0,0,0,1,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_addAssoc" (formula "2") (term "1,0,0,0,1,0"))
   (rule "add_literals" (formula "2") (term "0,1,0,0,0,1,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,1,2,0,0,1,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,1,2,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,1,2,0,0,1,0"))
   (rule "mul_literals" (formula "2") (term "0,1,1,2,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "1,2,0,0,1,0"))
   (rule "add_literals" (formula "2") (term "0,1,2,0,0,1,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "1,1,0,0,0,1,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "add_literals" (formula "2") (term "1,1,0,0,0,1,0"))
   (rule "add_literals" (formula "2") (term "1,0,0,0,1,0"))
   (rule "less_literals" (formula "2") (term "0,0,0,1,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_addComm1" (formula "2") (term "0"))
   (rule "polySimp_sepNegMonomial" (formula "2"))
   (rule "polySimp_mulLiterals" (formula "2") (term "0"))
   (rule "defOfunsign" (formula "2") (term "0,1,1"))
   (rule "translateJavaAddInt" (formula "2") (term "1,0,1,1"))
   (rule "translateJavaCastInt" (formula "2") (term "0,1,0,1,1"))
   (rule "polySimp_homoEq" (formula "2"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
   (rule "polySimp_addComm0" (formula "2") (term "1,0,1,0,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0"))
   (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,1,0"))
   (rule "mul_literals" (formula "2") (term "1,0,0,0,0,1,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0"))
   (rule "polySimp_sepNegMonomial" (formula "2"))
   (rule "polySimp_mulLiterals" (formula "2") (term "0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,1,1"))
   (rule "mul_literals" (formula "2") (term "1,0,0,1,1"))
   (rule "getOfSeqConcat" (formula "2") (term "0,0,0,0,1"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "less_literals" (formula "2") (term "0,0,0,0,0,1"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "sub_literals" (formula "2") (term "1,0,0,0,0,1"))
   (rule "getOfSeqConcat" (formula "2") (term "1,1,0,0"))
   (rule "polySimp_elimSub" (formula "2") (term "1,2,1,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "1,0,1,1,0,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "lenOfSeqConcat" (formula "2") (term "1,1,0,1,1,0,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_addAssoc" (formula "2") (term "1,0,1,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,1,0,1,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,1,2,1,1,0,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,1,2,1,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,1,2,1,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,1,2,1,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "1,2,1,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,1,2,1,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "1,1,0,1,1,0,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "add_literals" (formula "2") (term "1,1,0,1,1,0,0"))
   (rule "add_literals" (formula "2") (term "1,0,1,1,0,0"))
   (rule "less_literals" (formula "2") (term "0,1,1,0,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "getOfSeqConcat" (formula "2") (term "2,0,1,1"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "less_literals" (formula "2") (term "0,2,0,1,1"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "sub_literals" (formula "2") (term "1,2,0,1,1"))
   (rule "getOfSeqConcat" (formula "2") (term "0,0,0,0"))
   (rule "polySimp_elimSub" (formula "2") (term "1,2,0,0,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "1,0,0,0,0,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "lenOfSeqConcat" (formula "2") (term "1,1,0,0,0,0,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_addAssoc" (formula "2") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "2") (term "0,1,0,0,0,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,1,2,0,0,0,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,1,2,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,1,2,0,0,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,1,2,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "1,2,0,0,0,0"))
   (rule "add_literals" (formula "2") (term "0,1,2,0,0,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "1,1,0,0,0,0,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "add_literals" (formula "2") (term "1,1,0,0,0,0,0"))
   (rule "add_literals" (formula "2") (term "1,0,0,0,0,0"))
   (rule "less_literals" (formula "2") (term "0,0,0,0,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_homoEq" (formula "2"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0"))
   (rule "polySimp_sepNegMonomial" (formula "2"))
   (rule "polySimp_mulLiterals" (formula "2") (term "0"))
   (rule "polySimp_elimOne" (formula "2") (term "0"))
   (rule "getOfSeqConcat" (formula "2") (term "0,0,0,1,1"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "less_literals" (formula "2") (term "0,0,0,0,1,1"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "sub_literals" (formula "2") (term "1,0,0,0,1,1"))
   (rule "getOfSeqConcat" (formula "2") (term "0,1,0,1"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "less_literals" (formula "2") (term "0,0,1,0,1"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "sub_literals" (formula "2") (term "1,0,1,0,1"))
   (rule "getOfSeqConcat" (formula "2") (term "0,0,0,1,1"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "less_literals" (formula "2") (term "0,0,0,0,1,1"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "sub_literals" (formula "2") (term "1,0,0,0,1,1"))
   (rule "getOfSeqConcat" (formula "2") (term "2,0,1,1"))
   (rule "polySimp_homoEq" (formula "2"))
   (rule "polySimp_elimSub" (formula "2") (term "1,2,2,0,1,0,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,1,2,2,0,1,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,1,2,2,0,1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,1,2,2,0,1,0"))
   (rule "mul_literals" (formula "2") (term "0,1,1,2,2,0,1,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "1,2,2,0,1,0"))
   (rule "add_literals" (formula "2") (term "0,1,2,2,0,1,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "1,0,2,0,1,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,1,2,2,0,1,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,1,2,2,0,1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,1,2,2,0,1,0"))
   (rule "mul_literals" (formula "2") (term "0,1,1,2,2,0,1,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "1,2,2,0,1,0"))
   (rule "add_literals" (formula "2") (term "0,1,2,2,0,1,0"))
   (rule "add_zero_left" (formula "2") (term "1,2,2,0,1,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "1,1,0,2,0,1,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_addAssoc" (formula "2") (term "1,0,2,0,1,0"))
   (rule "add_literals" (formula "2") (term "0,1,0,2,0,1,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,2,2,0,1,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "add_literals" (formula "2") (term "0,1,2,2,0,1,0"))
   (rule "mul_literals" (formula "2") (term "1,2,2,0,1,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "1,1,0,2,0,1,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "add_literals" (formula "2") (term "1,1,0,2,0,1,0"))
   (rule "add_literals" (formula "2") (term "1,0,2,0,1,0"))
   (rule "less_literals" (formula "2") (term "0,2,0,1,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_addComm1" (formula "2") (term "0"))
   (rule "polySimp_sepNegMonomial" (formula "2"))
   (rule "polySimp_mulLiterals" (formula "2") (term "0"))
   (rule "polySimp_elimOne" (formula "2") (term "0"))
   (rule "getOfSeqConcat" (formula "2") (term "0,1,0,1"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "less_literals" (formula "2") (term "0,0,1,0,1"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "sub_literals" (formula "2") (term "1,0,1,0,1"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "castDel" (formula "2") (term "0,1,0,1"))
   (rule "polySimp_addComm0" (formula "2") (term "0,1"))
   (rule "getOfSeqConcat" (formula "2") (term "0,0,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "less_literals" (formula "2") (term "0,0,0,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "sub_literals" (formula "2") (term "1,0,0,0"))
   (rule "getOfSeqConcat" (formula "2") (term "0,0,0,1,1"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "castDel" (formula "2") (term "1,0,0,0,1,1"))
   (rule "less_literals" (formula "2") (term "0,0,0,0,1,1"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "defOfunsign" (formula "2") (term "0,0,1"))
   (rule "translateJavaAddInt" (formula "2") (term "1,0,0,1"))
   (rule "translateJavaCastInt" (formula "2") (term "0,1,0,0,1"))
   (rule "polySimp_homoEq" (formula "2"))
   (rule "polySimp_addComm0" (formula "2") (term "0,0,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0,0"))
   (rule "polySimp_addComm1" (formula "2") (term "1,1,0,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0"))
   (rule "polySimp_addComm0" (formula "2") (term "0,1,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1,0"))
   (rule "mul_literals" (formula "2") (term "1,0,0,0,1,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,1,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0"))
   (rule "polySimp_addComm1" (formula "2") (term "0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,0"))
   (rule "polySimp_sepNegMonomial" (formula "2"))
   (rule "polySimp_mulLiterals" (formula "2") (term "0"))
   (rule "polySimp_elimOne" (formula "2") (term "0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "2") (term "0,0,1,0,1"))
   (rule "getOfSeqConcat" (formula "2") (term "2,0,1,1"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "less_literals" (formula "2") (term "0,2,0,1,1"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "sub_literals" (formula "2") (term "1,2,0,1,1"))
   (rule "defOfunsign" (formula "2") (term "0,0,0,1"))
   (rule "translateJavaAddInt" (formula "2") (term "1,0,0,0,1"))
   (rule "translateJavaCastInt" (formula "2") (term "0,1,0,0,0,1"))
   (rule "polySimp_homoEq" (formula "2"))
   (rule "polySimp_addComm0" (formula "2") (term "1,0,0,0,0,0"))
   (rule "polySimp_addComm0" (formula "2") (term "0,0,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0"))
   (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,1,0"))
   (rule "mul_literals" (formula "2") (term "1,0,0,0,0,1,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0"))
   (rule "polySimp_sepNegMonomial" (formula "2"))
   (rule "polySimp_mulLiterals" (formula "2") (term "0"))
   (rule "polySimp_elimOne" (formula "2") (term "0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,1,1"))
   (rule "mul_literals" (formula "2") (term "1,0,0,1,1"))
   (rule "getOfSeqConcat" (formula "2") (term "1,1,0,1,1"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "castDel" (formula "2") (term "1,1,1,0,1,1"))
   (rule "sub_literals" (formula "2") (term "1,2,1,1,0,1,1"))
   (rule "less_literals" (formula "2") (term "0,1,1,0,1,1"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "getOfSeqConcat" (formula "2") (term "1,1,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "less_literals" (formula "2") (term "0,1,1,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "sub_literals" (formula "2") (term "1,1,1,0"))
   (rule "getOfSeqConcat" (formula "2") (term "2,0,1,0,1"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "less_literals" (formula "2") (term "0,2,0,1,0,1"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "sub_literals" (formula "2") (term "1,2,0,1,0,1"))
   (rule "getOfSeqConcat" (formula "2") (term "2,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "less_literals" (formula "2") (term "0,2,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "sub_literals" (formula "2") (term "1,2,0"))
   (rule "getOfSeqConcat" (formula "2") (term "1,1,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "less_literals" (formula "2") (term "0,1,1,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "sub_literals" (formula "2") (term "1,1,1,0"))
   (rule "getOfSeqConcat" (formula "2") (term "1,1,0,1,0,1"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "less_literals" (formula "2") (term "0,1,1,0,1,0,1"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "sub_literals" (formula "2") (term "1,1,1,0,1,0,1"))
   (rule "getOfSeqConcat" (formula "2") (term "0,0,0,1,1"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "castDel" (formula "2") (term "1,0,0,0,1,1"))
   (rule "sub_literals" (formula "2") (term "1,2,0,0,0,1,1"))
   (rule "less_literals" (formula "2") (term "0,0,0,0,1,1"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_addComm1" (formula "2") (term "1"))
   (rule "getOfSeqConcat" (formula "2") (term "2,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "less_literals" (formula "2") (term "0,2,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "sub_literals" (formula "2") (term "1,2,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "castDel" (formula "2") (term "2,0"))
   (rule "getOfSeqConcat" (formula "2") (term "1,1,0,1,1"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "less_literals" (formula "2") (term "0,1,1,0,1,1"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "sub_literals" (formula "2") (term "1,1,1,0,1,1"))
   (rule "getOfSeqConcat" (formula "2") (term "0,0,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "less_literals" (formula "2") (term "0,0,0,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "sub_literals" (formula "2") (term "1,0,0,0"))
   (rule "getOfSeqConcat" (formula "2") (term "2,0,1,1"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "castDel" (formula "2") (term "1,2,0,1,1"))
   (rule "sub_literals" (formula "2") (term "1,2,2,0,1,1"))
   (rule "less_literals" (formula "2") (term "0,2,0,1,1"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "getOfSeqConcat" (formula "2") (term "2,0,1,0,1"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "castDel" (formula "2") (term "1,2,0,1,0,1"))
   (rule "sub_literals" (formula "2") (term "1,2,2,0,1,0,1"))
   (rule "less_literals" (formula "2") (term "0,2,0,1,0,1"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "getOfSeqConcat" (formula "2") (term "1,1,0,1,1"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "castDel" (formula "2") (term "1,1,1,0,1,1"))
   (rule "sub_literals" (formula "2") (term "1,2,1,1,0,1,1"))
   (rule "less_literals" (formula "2") (term "0,1,1,0,1,1"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_pullOutFactor0b" (formula "2") (term "1"))
   (rule "add_literals" (formula "2") (term "1,1,1"))
   (rule "times_zero_1" (formula "2") (term "1,1"))
   (rule "add_zero_right" (formula "2") (term "1"))
   (rule "getOfSeqConcat" (formula "2") (term "0,0,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "less_literals" (formula "2") (term "0,0,0,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "sub_literals" (formula "2") (term "1,0,0,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "castDel" (formula "2") (term "0,0,0"))
   (rule "inEqSimp_homoInEq0" (formula "2") (term "0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0"))
   (rule "getOfSeqConcat" (formula "2") (term "1,1,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "less_literals" (formula "2") (term "0,1,1,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "sub_literals" (formula "2") (term "1,1,1,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "castDel" (formula "2") (term "1,1,0"))
   (rule "eqSymm" (formula "2"))
   (rule "polySimp_addAssoc" (formula "2") (term "1,1"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "closeTrue" (formula "2"))
)
)

}
