\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Jul 13 22:13:54 CEST 2017
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=\\#begexpand_inByte\\#end,\\#begexpand_inChar\\#end,\\#begexpand_inShort\\#end,\\#begexpand_inInt\\#end,\\#begexpand_inLong\\#end
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=5000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Thu Jul 13 22:13:54 CEST 2017
name=verif.functionalities.pkisig.Signer.Log[verif.functionalities.pkisig.Signer.Log\\:\\:contains([B)].JML normal_behavior operation contract.0
contract=verif.functionalities.pkisig.Signer.Log[verif.functionalities.pkisig.Signer.Log\\:\\:contains([B)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mihai" ) (keyVersion "0814267c8a184b1e7da1309b7a9875095ca72975"))

(autoModeTime "486")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "message,self,result,exc,heapAtPre,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "8") (term "0,0,1,0,1"))
(rule "replace_known_right" (formula "4") (term "0") (ifseqformula "7"))
(builtin "One Step Simplification" (formula "4"))
(rule "assignment" (formula "8") (term "1"))
(builtin "One Step Simplification" (formula "8"))
(rule "array2seqDef" (formula "8") (term "0,1,0,0,0,1") (inst "u=u"))
(rule "array2seqDef" (formula "8") (term "1,1,0,0,0,1") (inst "u=u"))
(rule "eqSeqDef" (formula "8") (term "1,0,0,0,1") (inst "iv=iv"))
(rule "lenOfSeqDef" (formula "8") (term "0,0,1,0,0,0,1"))
(rule "eqSymm" (formula "8") (term "0,1,0,0,0,1"))
(rule "polySimp_elimSub" (formula "8") (term "1,1,0,1,0,0,0,1"))
(rule "times_zero_2" (formula "8") (term "1,1,1,0,1,0,0,0,1"))
(rule "add_zero_right" (formula "8") (term "1,1,0,1,0,0,0,1"))
(rule "lenOfSeqDef" (formula "8") (term "1,1,0,0,1,1,0,0,0,1"))
(rule "polySimp_elimSub" (formula "8") (term "1,1,1,0,0,1,1,0,0,0,1"))
(rule "mul_literals" (formula "8") (term "1,1,1,1,0,0,1,1,0,0,0,1"))
(rule "add_zero_right" (formula "8") (term "1,1,1,0,0,1,1,0,0,0,1"))
(rule "getOfSeqDef" (formula "8") (term "0,1,0,1,1,0,0,0,1"))
(rule "castDel" (formula "8") (term "1,0,1,0,1,1,0,0,0,1"))
(rule "castDel" (formula "8") (term "2,0,1,0,1,1,0,0,0,1"))
(rule "add_zero_right" (formula "8") (term "0,2,1,0,1,0,1,1,0,0,0,1"))
(rule "eqSymm" (formula "8") (term "1,0,1,1,0,0,0,1"))
(rule "polySimp_elimSub" (formula "8") (term "1,1,0,1,1,0,1,1,0,0,0,1"))
(rule "mul_literals" (formula "8") (term "1,1,1,0,1,1,0,1,1,0,0,0,1"))
(rule "add_zero_right" (formula "8") (term "1,1,0,1,1,0,1,1,0,0,0,1"))
(rule "lenOfSeqDef" (formula "8") (term "0,0,1,0,0,0,1"))
(rule "eqSymm" (formula "8") (term "0,1,0,0,0,1"))
(rule "polySimp_elimSub" (formula "8") (term "1,1,0,1,0,0,0,1"))
(rule "mul_literals" (formula "8") (term "1,1,1,0,1,0,0,0,1"))
(rule "add_zero_right" (formula "8") (term "1,1,0,1,0,0,0,1"))
(rule "getOfSeqDef" (formula "8") (term "0,1,0,1,1,0,0,0,1"))
(rule "castDel" (formula "8") (term "1,0,1,0,1,1,0,0,0,1"))
(rule "castDel" (formula "8") (term "2,0,1,0,1,1,0,0,0,1"))
(rule "add_zero_right" (formula "8") (term "0,2,1,0,1,0,1,1,0,0,0,1"))
(rule "eqSymm" (formula "8") (term "1,0,1,1,0,0,0,1"))
(rule "polySimp_elimSub" (formula "8") (term "1,1,0,1,1,0,1,1,0,0,0,1"))
(rule "mul_literals" (formula "8") (term "1,1,1,0,1,1,0,1,1,0,0,0,1"))
(rule "add_zero_right" (formula "8") (term "1,1,0,1,1,0,1,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "8") (term "0,1,1,0,0,1,1,0,0,0,1"))
(rule "add_zero_right" (formula "8") (term "0,0,1,1,0,0,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,1,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0,1,0,0,0,1"))
(rule "add_zero_right" (formula "8") (term "0,0,0,0,1,0,0,0,1"))
(rule "eqSymm" (formula "8") (term "0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,1,0,1,1,0,0,0,1"))
(rule "eqSymm" (formula "8") (term "1,0,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,1,1,0,1,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0,1,0,0,0,1"))
(rule "add_zero_right" (formula "8") (term "0,0,0,0,1,0,0,0,1"))
(rule "eqSymm" (formula "8") (term "0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,1,0,1,1,0,0,0,1"))
(rule "eqSymm" (formula "8") (term "1,0,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,1,1,0,1,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,1,0,1,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,1,1,0,1,1,0,0,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,0,1,0,0,1,0,0,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "8") (term "0,0,0,1,0,0,1,0,0,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "8") (term "0,0,0,1,0,0,1,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,0,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "8") (term "0,0,0,0,1,0,0,0,1"))
(rule "eqSymm" (formula "8") (term "0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "8") (term "0,0,1,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,1,0,1,1,0,0,0,1"))
(rule "eqSymm" (formula "8") (term "1,0,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "8") (term "1,1,0,1,1,0,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "8") (term "1,1,0,1,1,0,1,1,0,0,0,1"))
(rule "mul_literals" (formula "8") (term "0,1,1,0,1,1,0,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,1,1,0,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,1,1,0,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,1,1,0,0,0,1"))
(rule "mul_literals" (formula "8") (term "0,1,1,0,0,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,0,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "8") (term "0,0,0,0,1,0,0,0,1"))
(rule "eqSymm" (formula "8") (term "0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "8") (term "0,0,1,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,1,0,1,1,0,0,0,1"))
(rule "eqSymm" (formula "8") (term "1,0,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "8") (term "1,1,0,1,1,0,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "8") (term "1,1,0,1,1,0,1,1,0,0,0,1"))
(rule "mul_literals" (formula "8") (term "0,1,1,0,1,1,0,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,1,1,0,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,1,1,0,1,1,0,0,0,1"))
(rule "nnf_imp2or" (formula "8") (term "0,1,1,0,0,0,1"))
(rule "nnf_notAnd" (formula "8") (term "0,0,1,1,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "8") (term "0,0,0,1,1,0,0,0,1"))
(rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0,1,1,0,0,0,1"))
(rule "add_zero_right" (formula "8") (term "0,0,0,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,1,1,0,0,0,1"))
(rule "mul_literals" (formula "8") (term "1,0,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "8") (term "1,0,0,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0,1,1,0,0,0,1"))
(rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0,1,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0,1,1,0,0,0,1"))
(rule "add_literals" (formula "8") (term "0,0,0,1,0,0,1,1,0,0,0,1"))
(rule "add_zero_left" (formula "8") (term "0,0,1,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,1,1,0,0,0,1"))
(rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_contains,savedHeapBefore_contains"))
(builtin "One Step Simplification" (formula "8"))
(rule "returnUnfold" (formula "8") (term "1") (inst "#v0=x"))
(rule "variableDeclarationAssign" (formula "8") (term "1"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "x"))
(rule "methodCallWithAssignmentUnfoldArguments" (formula "8") (term "1"))
(rule "variableDeclarationAssign" (formula "8") (term "1"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "var"))
(rule "assignment_read_attribute_this" (formula "8") (term "1"))
(builtin "One Step Simplification" (formula "8"))
(rule "variableDeclarationAssign" (formula "8") (term "1"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "var_1"))
(rule "assignment" (formula "8") (term "1"))
(builtin "One Step Simplification" (formula "8"))
(builtin "Use Operation Contract" (formula "8") (newnames "heapBefore_equal,result_0,exc_0") (contract "verif.utils.MessageTools[verif.utils.MessageTools::equal([B,[B)].JML normal_behavior operation contract.0#verif.utils.MessageTools[verif.utils.MessageTools::equal([B,[B)].JML normal_behavior operation contract.1"))
(branch "Post (equal)"
   (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "8")) (ifInst ""  (formula "8")))
   (builtin "One Step Simplification" (formula "9"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "7"))
   (rule "eqSymm" (formula "7") (term "0,1"))
   (rule "replace_known_left" (formula "7") (term "1,1") (ifseqformula "6"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "replace_known_left" (formula "8") (term "1,1") (ifseqformula "6"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "assignment" (formula "11") (term "1"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "blockEmpty" (formula "11") (term "1"))
   (rule "array2seqDef" (formula "7") (term "0,0,0,1") (inst "u=u"))
   (rule "array2seqDef" (formula "7") (term "1,0,0,1") (inst "u=u"))
   (rule "narrowSelectArrayType" (formula "7") (term "2,1,0,0,1") (ifseqformula "1") (ifseqformula "10"))
   (rule "eqSeqDef" (formula "7") (term "0,0,1") (inst "iv=iv"))
   (rule "getOfSeqDef" (formula "7") (term "1,1,0,1,0,0,1"))
   (rule "castDel" (formula "7") (term "1,1,1,0,1,0,0,1"))
   (rule "castDel" (formula "7") (term "2,1,1,0,1,0,0,1"))
   (rule "add_zero_right" (formula "7") (term "0,2,1,1,1,0,1,0,0,1"))
   (rule "polySimp_elimSub" (formula "7") (term "1,1,0,1,1,0,1,0,0,1"))
   (rule "times_zero_2" (formula "7") (term "1,1,1,0,1,1,0,1,0,0,1"))
   (rule "add_zero_right" (formula "7") (term "1,1,0,1,1,0,1,0,0,1"))
   (rule "lenOfSeqDef" (formula "7") (term "0,0,0,0,1"))
   (rule "eqSymm" (formula "7") (term "0,0,0,1"))
   (rule "polySimp_elimSub" (formula "7") (term "1,1,0,0,0,1"))
   (rule "times_zero_2" (formula "7") (term "1,1,1,0,0,0,1"))
   (rule "add_zero_right" (formula "7") (term "1,1,0,0,0,1"))
   (rule "lenOfSeqDef" (formula "7") (term "1,1,0,0,1,0,0,1"))
   (rule "polySimp_elimSub" (formula "7") (term "1,1,1,0,0,1,0,0,1"))
   (rule "times_zero_2" (formula "7") (term "1,1,1,1,0,0,1,0,0,1"))
   (rule "add_zero_right" (formula "7") (term "1,1,1,0,0,1,0,0,1"))
   (rule "getOfSeqDef" (formula "7") (term "0,1,0,1,0,0,1"))
   (rule "castDel" (formula "7") (term "2,0,1,0,1,0,0,1"))
   (rule "castDel" (formula "7") (term "1,0,1,0,1,0,0,1"))
   (rule "add_zero_right" (formula "7") (term "0,2,1,0,1,0,1,0,0,1"))
   (rule "polySimp_elimSub" (formula "7") (term "1,1,0,0,1,0,1,0,0,1"))
   (rule "times_zero_2" (formula "7") (term "1,1,1,0,0,1,0,1,0,0,1"))
   (rule "add_zero_right" (formula "7") (term "1,1,0,0,1,0,1,0,0,1"))
   (rule "lenOfSeqDef" (formula "7") (term "0,0,0,0,1"))
   (rule "eqSymm" (formula "7") (term "0,0,0,1"))
   (rule "polySimp_elimSub" (formula "7") (term "1,1,0,0,0,1"))
   (rule "times_zero_2" (formula "7") (term "1,1,1,0,0,0,1"))
   (rule "add_zero_right" (formula "7") (term "1,1,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,1,1,0,1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,1,1,0,1,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "7") (term "0,1,1,0,0,1,0,0,1"))
   (rule "add_zero_right" (formula "7") (term "0,0,1,1,0,0,1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,1,0,0,1,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,1,0,1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0,1,0,1,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,0,0,0,1"))
   (rule "add_zero_right" (formula "7") (term "0,0,0,0,0,0,1"))
   (rule "eqSymm" (formula "7") (term "0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0,1,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,0,0,0,1"))
   (rule "add_zero_right" (formula "7") (term "0,0,0,0,0,0,1"))
   (rule "eqSymm" (formula "7") (term "0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,1,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,1,1,0,1,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,1,0,1,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,1,1,0,1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,1,1,0,1,0,0,1"))
   (rule "polySimp_rightDist" (formula "7") (term "1,1,0,1,1,0,1,0,0,1"))
   (rule "mul_literals" (formula "7") (term "0,1,1,0,1,1,0,1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,1,1,0,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,1,1,0,1,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,1,0,1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0,1,0,1,0,0,1"))
   (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0,1,0,1,0,0,1"))
   (rule "mul_literals" (formula "7") (term "0,1,1,0,0,1,0,1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0,1,0,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0,1,0,1,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0,1,0,0,1"))
   (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0,1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0,1,0,0,1"))
   (rule "mul_literals" (formula "7") (term "0,1,1,0,0,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0,1,0,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0,0,0,0,1"))
   (rule "eqSymm" (formula "7") (term "0,0,0,1"))
   (rule "polySimp_elimOne" (formula "7") (term "0,0,1,0,0,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,1,1,1,0,0,1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "7") (term "0,0,1,1,1,0,0,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "7") (term "0,0,1,1,1,0,0,1,0,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0,0,0,0,1"))
   (rule "eqSymm" (formula "7") (term "0,0,0,1"))
   (rule "polySimp_elimOne" (formula "7") (term "0,0,1,0,0,0,1"))
   (rule "nnf_imp2or" (formula "7") (term "0,1,0,0,1"))
   (rule "nnf_notAnd" (formula "7") (term "0,0,1,0,0,1"))
   (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0,1,0,0,1"))
   (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0,1,0,0,1"))
   (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0,1,0,0,1"))
   (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0,1,0,0,1"))
   (rule "add_literals" (formula "7") (term "0,0,0,1,0,0,1,0,0,1"))
   (rule "add_zero_left" (formula "7") (term "0,0,1,0,0,1,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0,1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,1,0,0,1"))
   (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0,1,0,0,1"))
   (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0,1,0,0,1"))
   (rule "add_zero_right" (formula "7") (term "0,0,0,0,0,1,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0,1,0,0,1"))
   (rule "mul_literals" (formula "7") (term "1,0,0,0,1,0,0,1"))
   (rule "methodCallReturn" (formula "11") (term "1"))
   (rule "assignment" (formula "11") (term "1"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "commute_or_2" (formula "7") (term "0,1,0,0,1"))
   (rule "commute_or" (formula "7") (term "0,0,1,0,0,1"))
   (rule "methodCallEmpty" (formula "11") (term "1"))
   (rule "tryEmpty" (formula "11") (term "1"))
   (rule "emptyModality" (formula "11") (term "1"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "impRight" (formula "11"))
   (rule "replace_known_left" (formula "9") (term "0,1") (ifseqformula "1"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "notLeft" (formula "9"))
   (rule "replace_known_right" (formula "8") (term "0,0") (ifseqformula "9"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "narrowSelectArrayType" (formula "12") (term "1,0,1,0,1") (ifseqformula "2") (ifseqformula "9"))
   (rule "narrowSelectArrayType" (formula "12") (term "1,1,1,0,1") (ifseqformula "2") (ifseqformula "11"))
   (rule "narrowSelectArrayType" (formula "8") (term "1,0,0,0,0,1,0,0") (ifseqformula "2") (ifseqformula "9"))
   (rule "applyEq" (formula "8") (term "1") (ifseqformula "1"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "replace_known_left" (formula "13") (term "0") (ifseqformula "8"))
   (builtin "One Step Simplification" (formula "13"))
   (rule "allRight" (formula "13") (inst "sk=iv_0"))
   (rule "orRight" (formula "13"))
   (rule "orRight" (formula "13"))
   (rule "inEqSimp_leqRight" (formula "13"))
   (rule "mul_literals" (formula "1") (term "1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "add_zero_left" (formula "1") (term "0"))
   (rule "replace_known_left" (formula "15") (term "0,0,1") (ifseqformula "1"))
   (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "1")))
   (rule "inEqSimp_geqRight" (formula "14"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "1") (term "0"))
   (rule "inEqSimp_homoInEq0" (formula "15") (term "0,1"))
   (rule "polySimp_addComm1" (formula "15") (term "0,0,1"))
   (rule "inEqSimp_homoInEq0" (formula "15") (term "0,0"))
   (rule "polySimp_addComm1" (formula "15") (term "0,0,0"))
   (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "10"))
   (rule "applyEq" (formula "11") (term "1,1,0") (ifseqformula "10"))
   (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,1"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,1"))
   (rule "polySimp_rightDist" (formula "15") (term "1,0,1"))
   (rule "mul_literals" (formula "15") (term "0,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,1"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "15") (term "1,0,0"))
   (rule "mul_literals" (formula "15") (term "0,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
   (rule "polySimp_elimOne" (formula "1") (term "0"))
   (rule "ifthenelse_to_or_right" (formula "11") (term "0,0,0"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "nnf_notAnd" (formula "11") (term "0,0,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0,0,0"))
   (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0,0,0"))
   (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,0,0,0"))
   (rule "add_zero_left" (formula "11") (term "0,0,1,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,0,0,0"))
   (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "11") (term "0,0,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,0,0"))
   (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0,0"))
   (rule "nnf_notAnd" (formula "11") (term "0,1,1,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "11") (term "0,0,1,1,0,0,0"))
   (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,1,1,0,0,0"))
   (rule "add_zero_right" (formula "11") (term "0,0,0,0,1,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,1,1,0,0,0"))
   (rule "mul_literals" (formula "11") (term "1,0,0,1,1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "11") (term "1,0,1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,1,1,0,0,0"))
   (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,1,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,1,1,0,0,0"))
   (rule "add_literals" (formula "11") (term "0,0,0,1,0,1,1,0,0,0"))
   (rule "add_zero_left" (formula "11") (term "0,0,1,0,1,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,0,1,1,0,0,0"))
   (rule "commute_or" (formula "11") (term "0,0"))
   (rule "commute_or_2" (formula "11") (term "0"))
   (rule "commute_or" (formula "11") (term "1,1,0"))
   (rule "commute_or_2" (formula "11") (term "0,1,0"))
   (rule "commute_or_2" (formula "11") (term "0,1,1,0"))
   (rule "commute_or" (formula "11") (term "0,0,1,0"))
   (rule "commute_or" (formula "11") (term "0,0,1,1,0"))
   (rule "cnf_rightDist" (formula "11") (term "1,1,0"))
   (rule "commute_or_2" (formula "11") (term "0,1,1,0"))
   (rule "inEqSimp_or_tautInEq1" (formula "11") (term "0,0,1,1,0"))
   (rule "add_zero_right" (formula "11") (term "1,1,0,0,1,1,0"))
   (rule "qeq_literals" (formula "11") (term "1,0,0,1,1,0"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "shift_paren_or" (formula "11") (term "1,1,0"))
   (rule "commute_or" (formula "11") (term "0,1,1,0"))
   (rule "cnf_rightDist" (formula "11") (term "0"))
   (rule "distr_forallAnd" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "commute_or_2" (formula "11") (term "0"))
   (rule "shift_paren_or" (formula "12") (term "0"))
   (rule "commute_or_2" (formula "12") (term "0,0"))
   (rule "shift_paren_or" (formula "11") (term "0,0"))
   (rule "commute_or_2" (formula "12") (term "0,0,0"))
   (builtin "One Step Simplification" (formula "12"))
   (rule "shift_paren_or" (formula "11") (term "0,0,0"))
   (rule "commute_or" (formula "11") (term "0,0,0,0"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "ifthenelse_split" (formula "10") (term "0"))
   (branch "self.messages.length ≥ 1 TRUE"
      (rule "eqSymm" (formula "11"))
      (rule "applyEq" (formula "12") (term "1,1,0") (ifseqformula "11"))
      (rule "applyEq" (formula "1") (term "0") (ifseqformula "11"))
      (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "1"))
      (builtin "One Step Simplification" (formula "17"))
      (rule "eqSymm" (formula "17"))
      (rule "applyEq" (formula "13") (term "1,1,0") (ifseqformula "11"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "ifthenelse_to_or_left" (formula "12") (term "0,0,0,0"))
      (rule "eqSymm" (formula "12") (term "1,1,0,0,0,0"))
      (rule "nnf_notAnd" (formula "12") (term "0,0,0,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,0,0,0,0"))
      (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,0,0,0,0"))
      (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0,0,0,0"))
      (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,0,0,0"))
      (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0,0"))
      (rule "commute_or" (formula "12") (term "0,0,0"))
      (rule "commute_or_2" (formula "12") (term "0,0"))
      (rule "commute_or_2" (formula "12") (term "0"))
      (rule "commute_or" (formula "12") (term "1,1,0"))
      (rule "cnf_rightDist" (formula "12") (term "1,1,0"))
      (rule "cnf_rightDist" (formula "12") (term "0"))
      (rule "distr_forallAnd" (formula "12"))
      (rule "andLeft" (formula "12"))
      (rule "commute_or" (formula "13") (term "0"))
      (rule "shift_paren_or" (formula "12") (term "0"))
      (rule "commute_or" (formula "13") (term "1,1,0"))
      (rule "shift_paren_or" (formula "12") (term "0,0"))
      (rule "commute_or_2" (formula "12") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "commute_or_2" (formula "12") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "cnf_rightDist" (formula "13") (term "0"))
      (rule "distr_forallAnd" (formula "13"))
      (rule "andLeft" (formula "13"))
      (rule "commute_or_2" (formula "13") (term "0"))
      (rule "shift_paren_or" (formula "14") (term "0"))
      (rule "commute_or_2" (formula "13") (term "0,0"))
      (rule "commute_or_2" (formula "14") (term "0,0"))
      (rule "inEqSimp_or_tautInEq1" (formula "14") (term "0"))
      (rule "inEqSimp_homoInEq1" (formula "14") (term "1,0"))
      (rule "polySimp_pullOutFactor1" (formula "14") (term "0,1,0"))
      (rule "add_literals" (formula "14") (term "1,0,1,0"))
      (rule "times_zero_1" (formula "14") (term "0,1,0"))
      (rule "leq_literals" (formula "14") (term "1,0"))
      (builtin "One Step Simplification" (formula "14"))
      (rule "true_left" (formula "14"))
      (rule "shift_paren_or" (formula "13") (term "0,0,0"))
      (rule "commute_or" (formula "13") (term "0,0,0,0"))
      (rule "inEqSimp_or_tautInEq1" (formula "13") (term "0,0,0"))
      (rule "add_zero_right" (formula "13") (term "1,1,0,0,0"))
      (rule "qeq_literals" (formula "13") (term "1,0,0,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "true_left" (formula "13"))
      (rule "ifthenelse_split" (formula "11") (term "0"))
      (branch "message.length ≥ 1 TRUE"
         (rule "eqSymm" (formula "12"))
         (rule "applyEq" (formula "10") (term "0") (ifseqformula "12"))
         (rule "applyEq" (formula "13") (term "1,1,0") (ifseqformula "11"))
         (rule "applyEq" (formula "1") (term "0") (ifseqformula "11"))
         (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "1"))
         (builtin "One Step Simplification" (formula "17"))
         (rule "eqSymm" (formula "17"))
         (rule "applyEq" (formula "12") (term "1,1,0,0") (ifseqformula "11"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "inEqSimp_or_tautInEq1" (formula "13") (term "0"))
         (rule "inEqSimp_homoInEq1" (formula "13") (term "1,0"))
         (rule "polySimp_pullOutFactor1" (formula "13") (term "0,1,0"))
         (rule "add_literals" (formula "13") (term "1,0,1,0"))
         (rule "times_zero_1" (formula "13") (term "0,1,0"))
         (rule "leq_literals" (formula "13") (term "1,0"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "true_left" (formula "13"))
         (rule "allLeft" (formula "12") (inst "t=iv_0"))
         (rule "replace_known_right" (formula "12") (term "1") (ifseqformula "17"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
         (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "1"))
         (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1"))
         (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
         (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
         (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "12") (term "0,0,1"))
         (rule "leq_literals" (formula "12") (term "0,1"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "inEqSimp_contradInEq1" (formula "12") (ifseqformula "2"))
         (rule "qeq_literals" (formula "12") (term "0"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "closeFalse" (formula "12"))
      )
      (branch "message.length ≥ 1 FALSE"
         (rule "eqSymm" (formula "11"))
         (rule "inEqSimp_geqRight" (formula "14"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "applyEq" (formula "2") (term "0") (ifseqformula "12"))
         (rule "inEqSimp_homoInEq1" (formula "2"))
         (rule "mul_literals" (formula "2") (term "1,0"))
         (rule "add_zero_right" (formula "2") (term "0"))
         (rule "applyEq" (formula "13") (term "1,1,0,0") (ifseqformula "12"))
         (rule "applyEq" (formula "11") (term "0") (ifseqformula "12"))
         (rule "qeq_literals" (formula "11"))
         (rule "closeFalse" (formula "11"))
      )
   )
   (branch "self.messages.length ≥ 1 FALSE"
      (rule "eqSymm" (formula "10"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "inEqSimp_geqRight" (formula "13"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "inEqSimp_notGeq" (formula "11") (term "0"))
      (rule "mul_literals" (formula "11") (term "1,0,0,0"))
      (rule "add_literals" (formula "11") (term "0,0,0"))
      (rule "add_zero_left" (formula "11") (term "0,0"))
      (rule "ifthenelse_to_or_left" (formula "12") (term "0,0,0,0"))
      (rule "eqSymm" (formula "12") (term "1,1,0,0,0,0"))
      (rule "nnf_notAnd" (formula "12") (term "0,0,0,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0,0,0,0,0"))
      (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0,0,0,0"))
      (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,0,0,0"))
      (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0,0"))
      (rule "commute_or" (formula "12") (term "0,0,0"))
      (rule "commute_or_2" (formula "12") (term "0,0"))
      (rule "commute_or_2" (formula "12") (term "0"))
      (rule "commute_or" (formula "12") (term "1,1,0"))
      (rule "cnf_rightDist" (formula "12") (term "1,1,0"))
      (rule "cnf_rightDist" (formula "12") (term "0"))
      (rule "distr_forallAnd" (formula "12"))
      (rule "andLeft" (formula "12"))
      (rule "commute_or" (formula "13") (term "0"))
      (rule "shift_paren_or" (formula "12") (term "0"))
      (rule "commute_or_2" (formula "12") (term "0,0"))
      (rule "commute_or" (formula "13") (term "1,1,0"))
      (rule "cnf_rightDist" (formula "13") (term "0"))
      (rule "distr_forallAnd" (formula "13"))
      (rule "andLeft" (formula "13"))
      (rule "commute_or_2" (formula "13") (term "0"))
      (rule "shift_paren_or" (formula "14") (term "0"))
      (rule "commute_or_2" (formula "13") (term "0,0"))
      (rule "commute_or_2" (formula "14") (term "0,0"))
      (rule "shift_paren_or" (formula "12") (term "0,0,0"))
      (rule "shift_paren_or" (formula "13") (term "0,0,0"))
      (rule "shift_paren_or" (formula "14") (term "0,0,0"))
      (rule "commute_or_2" (formula "12") (term "0,0,0,0"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "commute_or" (formula "13") (term "0,0,0,0"))
      (rule "inEqSimp_or_tautInEq1" (formula "13") (term "0,0,0"))
      (rule "add_zero_right" (formula "13") (term "1,1,0,0,0"))
      (rule "qeq_literals" (formula "13") (term "1,0,0,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "true_left" (formula "13"))
      (rule "ifthenelse_split" (formula "2") (term "0"))
      (branch "message.length ≥ 1 TRUE"
         (rule "replace_known_left" (formula "13") (term "0,1,1,0,0") (ifseqformula "2"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "replace_known_left" (formula "19") (term "0,1") (ifseqformula "3"))
         (builtin "One Step Simplification" (formula "19"))
         (rule "replace_known_left" (formula "14") (term "0,1,1,0") (ifseqformula "2"))
         (builtin "One Step Simplification" (formula "14"))
         (rule "replace_known_left" (formula "15") (term "0,1,1,0") (ifseqformula "2"))
         (builtin "One Step Simplification" (formula "15"))
         (rule "inEqSimp_contradEq7" (formula "12") (term "1") (ifseqformula "2"))
         (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "12") (term "0,0,1"))
         (rule "leq_literals" (formula "12") (term "0,1"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "inEqSimp_contradInEq1" (formula "12") (ifseqformula "2"))
         (rule "qeq_literals" (formula "12") (term "0"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "closeFalse" (formula "12"))
      )
      (branch "message.length ≥ 1 FALSE"
         (rule "replace_known_right" (formula "14") (term "0,1,1,0") (ifseqformula "15"))
         (builtin "One Step Simplification" (formula "14"))
         (rule "replace_known_right" (formula "13") (term "0,1,1,0") (ifseqformula "15"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "replace_known_right" (formula "12") (term "0,1,1,0,0") (ifseqformula "15"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "inEqSimp_geqRight" (formula "15"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "replace_known_left" (formula "12") (term "0") (ifseqformula "1"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "true_left" (formula "12"))
         (rule "inEqSimp_homoInEq1" (formula "3"))
         (rule "times_zero_2" (formula "3") (term "1,0"))
         (rule "add_zero_right" (formula "3") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "3"))
         (rule "mul_literals" (formula "3") (term "1"))
         (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "4"))
         (rule "qeq_literals" (formula "3") (term "0"))
         (builtin "One Step Simplification" (formula "3"))
         (rule "closeFalse" (formula "3"))
      )
   )
)
(branch "Exceptional Post (equal)"
   (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "8")) (ifInst ""  (formula "8")))
   (builtin "One Step Simplification" (formula "9"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "8"))
   (rule "notLeft" (formula "6"))
   (rule "eqSymm" (formula "7") (term "0,1"))
   (rule "replace_known_right" (formula "7") (term "1,1") (ifseqformula "9"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "replace_known_right" (formula "8") (term "1,1") (ifseqformula "9"))
   (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "7")))
   (rule "closeFalse" (formula "8"))
)
(branch "Pre (equal)"
   (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "7")) (ifInst ""  (formula "7")) (ifInst ""  (formula "1")) (ifInst ""  (formula "7")) (ifInst ""  (formula "4")))
   (rule "orRight" (formula "8"))
   (rule "referencedObjectIsCreatedRight" (formula "9") (ifseqformula "8"))
   (rule "close" (formula "9") (ifseqformula "1"))
)
)

}
