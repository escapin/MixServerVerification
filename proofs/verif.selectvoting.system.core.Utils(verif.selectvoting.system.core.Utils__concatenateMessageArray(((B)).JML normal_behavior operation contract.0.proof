\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Nov 08 11:04:27 CET 2016
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=80000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Tue Nov 08 11:04:27 CET 2016
name=verif.selectvoting.system.core.Utils[verif.selectvoting.system.core.Utils\\:\\:concatenateMessageArray([[B)].JML normal_behavior operation contract.0
contract=verif.selectvoting.system.core.Utils[verif.selectvoting.system.core.Utils\\:\\:concatenateMessageArray([[B)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mihai" ) (keyVersion "796a45c33263bea49efe849c61f69175f8e7c46c"))
(keyLog "1" (keyUser "mihai" ) (keyVersion "796a45c33263bea49efe849c61f69175f8e7c46c"))
(keyLog "2" (keyUser "mihai" ) (keyVersion "796a45c33263bea49efe849c61f69175f8e7c46c"))
(keyLog "3" (keyUser "mihai" ) (keyVersion "796a45c33263bea49efe849c61f69175f8e7c46c"))
(keyLog "4" (keyUser "mihai" ) (keyVersion "796a45c33263bea49efe849c61f69175f8e7c46c"))
(keyLog "5" (keyUser "mihai" ) (keyVersion "796a45c33263bea49efe849c61f69175f8e7c46c"))
(keyLog "6" (keyUser "mihai" ) (keyVersion "796a45c33263bea49efe849c61f69175f8e7c46c"))

(autoModeTime "73644")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1") (newnames "messages,result,exc,heapAtPre,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "5") (term "0,0,0,0,1"))
(rule "eqSymm" (formula "5") (term "1,0,0,1,0,1"))
(rule "assignment" (formula "5") (term "1"))
(builtin "One Step Simplification" (formula "5"))
(rule "nonNull" (formula "4") (inst "i=i"))
(rule "sub_literals" (formula "4") (term "2,1,0,1,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "greater_literals" (formula "4") (term "0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "andLeft" (formula "4"))
(rule "notLeft" (formula "4"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "5"))
(builtin "One Step Simplification" (formula "2"))
(rule "narrowSelectArrayType" (formula "4") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "5"))
(rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "4") (term "1,1,0,0"))
(rule "mul_literals" (formula "4") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0"))
(rule "array2seqDef" (formula "6") (term "1,0,0,0,0,1") (inst "u=u"))
(rule "eqSymm" (formula "6") (term "0,0,0,0,1"))
(rule "nnf_imp2or" (formula "4") (term "0"))
(rule "nnf_notAnd" (formula "4") (term "0,0"))
(rule "inEqSimp_notLeq" (formula "4") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0"))
(rule "add_literals" (formula "4") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "4") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "4") (term "1,1,0,0"))
(rule "inEqSimp_notGeq" (formula "4") (term "0,0,0"))
(rule "times_zero_1" (formula "4") (term "1,0,0,0,0,0"))
(rule "add_literals" (formula "4") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
(rule "mul_literals" (formula "4") (term "1,0,0,0"))
(rule "commute_or_2" (formula "4") (term "0"))
(rule "commute_or" (formula "4") (term "0,0"))
(rule "methodBodyExpand" (formula "6") (term "1") (newnames "heapBefore_concatenateMessageArray,savedHeapBefore_concatenateMessageArray,_messagesBefore_concatenateMessageArray"))
(builtin "One Step Simplification" (formula "6"))
(rule "variableDeclarationAssign" (formula "6") (term "1"))
(rule "variableDeclaration" (formula "6") (term "1") (newnames "msg"))
(rule "arrayCreation" (formula "6") (term "1") (inst "#v0=x_arr"))
(rule "variableDeclaration" (formula "6") (term "1") (newnames "x_arr"))
(rule "variableDeclarationAssign" (formula "6") (term "1"))
(rule "variableDeclaration" (formula "6") (term "1") (newnames "dim0"))
(rule "assignment" (formula "6") (term "1"))
(builtin "One Step Simplification" (formula "6"))
(rule "ifUnfold" (formula "6") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "6") (term "1") (newnames "x"))
(rule "less_than_comparison_simple" (formula "6") (term "1"))
(builtin "One Step Simplification" (formula "6"))
(rule "less_literals" (formula "6") (term "0,0,1,0"))
(builtin "One Step Simplification" (formula "6"))
(rule "ifSplit" (formula "6"))
(branch "if x true"
   (builtin "One Step Simplification" (formula "7"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
(branch "if x false"
   (builtin "One Step Simplification" (formula "7"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "arrayLengthIsAShort" (formula "4") (term "1,1,0"))
   (builtin "One Step Simplification" (formula "4"))
   (rule "true_left" (formula "4"))
   (rule "arrayLengthNotNegative" (formula "4") (term "1,1,0"))
   (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "7") (term "1") (inst "#v0=x_arr_1"))
   (rule "variableDeclaration" (formula "7") (term "1") (newnames "x_arr_1"))
   (rule "variableDeclarationAssign" (formula "7") (term "1"))
   (rule "variableDeclaration" (formula "7") (term "1") (newnames "length_1"))
   (rule "assignment" (formula "7") (term "1"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_<createArray>,savedHeapBefore_<createArray>"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "variableDeclaration" (formula "7") (term "1") (newnames "newObject"))
   (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "7") (term "1") (inst "#v0=x_arr_2"))
   (rule "variableDeclaration" (formula "7") (term "1") (newnames "x_arr_2"))
   (rule "variableDeclarationAssign" (formula "7") (term "1"))
   (rule "variableDeclaration" (formula "7") (term "1") (newnames "length_2"))
   (rule "assignment" (formula "7") (term "1"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "allocateInstanceWithLength" (formula "7"))
   (builtin "One Step Simplification" (formula "8"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "blockEmpty" (formula "11") (term "1"))
   (rule "assignment" (formula "11") (term "1"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "arrayLengthIsAShort" (formula "1") (term "0"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "arrayLengthNotNegative" (formula "1") (term "0"))
   (rule "methodCall" (formula "12") (term "1"))
   (branch "Normal Execution (newObject != null )"
      (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "10")))
      (rule "false_right" (formula "12"))
      (rule "methodBodyExpand" (formula "12") (term "1") (newnames "heapBefore_<createArrayHelper>,savedHeapBefore_<createArrayHelper>"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "assignment_write_attribute_this" (formula "12") (term "1"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "methodCallWithinClass" (formula "12") (term "1"))
      (rule "methodBodyExpand" (formula "12") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "arrayInitialisation" (formula "12") (term "1"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "polySimp_elimSub" (formula "12") (term "2,1,0,1,0"))
      (rule "mul_literals" (formula "12") (term "1,2,1,0,1,0"))
      (rule "polySimp_addComm0" (formula "12") (term "2,1,0,1,0"))
      (rule "methodCallEmpty" (formula "12") (term "1"))
      (rule "blockEmpty" (formula "12") (term "1"))
      (rule "assignment_write_attribute_this" (formula "12") (term "1"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "methodCallReturnIgnoreResult" (formula "12") (term "1"))
      (rule "blockEmpty" (formula "12") (term "1"))
      (rule "methodCallReturn" (formula "12") (term "1"))
      (rule "assignment" (formula "12") (term "1"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "methodCallEmpty" (formula "12") (term "1"))
      (rule "blockEmpty" (formula "12") (term "1"))
      (rule "assignment" (formula "12") (term "1"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "blockEmpty" (formula "12") (term "1"))
      (rule "assignment" (formula "12") (term "1"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "variableDeclarationAssign" (formula "12") (term "1"))
      (rule "variableDeclaration" (formula "12") (term "1") (newnames "i"))
      (rule "compound_subtraction_1" (formula "12") (term "1") (inst "#v=x"))
      (rule "variableDeclarationAssign" (formula "12") (term "1"))
      (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_1"))
      (rule "assignment_read_length" (formula "12") (term "1"))
      (branch "Normal Execution (_messages != null)"
         (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "11")))
         (rule "false_right" (formula "12") (userinteraction))
         (builtin "One Step Simplification" (formula "12"))
         (rule "assignmentSubtractionInt" (formula "12") (term "1") (userinteraction))
         (builtin "One Step Simplification" (formula "12"))
         (builtin "Loop Invariant" (formula "12") (newnames "variant_1,b_3,heapBefore_LOOP_1,iBefore_LOOP_1,msgBefore_LOOP_1,i_2,msg_2,heap_After_LOOP_1,anon_heap_LOOP_1,o,f"))
         (branch "Invariant Initially Valid"
            (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "9")) (ifInst ""  (formula "10")))
            (rule "defOfarrConcat" (formula "12") (term "1,1,0") (userinteraction))
            (rule "array2seq2dDef" (formula "12") (term "0,1,0,1,1,0") (inst "u=u") (userinteraction))
            (rule "wellFormedStorePrimitive" (formula "12") (term "1"))
            (rule "translateJavaSubInt" (formula "12") (term "0,1,0,0"))
            (rule "translateJavaAddInt" (formula "12") (term "1,0,2,1,1,0"))
            (rule "translateJavaAddInt" (formula "12") (term "0,0,1,2,1,1,0"))
            (rule "translateJavaAddInt" (formula "12") (term "0,0,1,1,0"))
            (rule "translateJavaSubInt" (formula "12") (term "1,0,0,0"))
            (rule "translateJavaUnaryMinusInt" (formula "12") (term "0,0,0,0"))
            (rule "translateJavaSubInt" (formula "12") (term "0,1,0,2,1,1,0"))
            (rule "translateJavaSubInt" (formula "12") (term "0,0,0,1,2,1,1,0"))
            (rule "translateJavaSubInt" (formula "12") (term "0,0,0,1,1,0"))
            (rule "neg_literal" (formula "12") (term "0,0,0,0"))
            (rule "polySimp_addLiterals" (formula "12") (term "0,1,2,1,1,0"))
            (rule "eqSymm" (formula "12") (term "0,1,1,0"))
            (rule "eqSymm" (formula "12") (term "1,0"))
            (rule "polySimp_elimSub" (formula "12") (term "0,1,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,1,0,0"))
            (rule "polySimp_elimSub" (formula "12") (term "1,0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,1,0,0,0"))
            (rule "polySimp_elimSub" (formula "12") (term "0,1,0,2,0,1,0"))
            (rule "mul_literals" (formula "12") (term "1,0,1,0,2,0,1,0"))
            (rule "polySimp_addLiterals" (formula "12") (term "1,0,2,0,1,0"))
            (rule "add_zero_right" (formula "12") (term "1,0,2,0,1,0"))
            (rule "polySimp_elimSub" (formula "12") (term "0,1,0,0,1,0"))
            (rule "mul_literals" (formula "12") (term "1,0,1,0,0,1,0"))
            (rule "polySimp_addLiterals" (formula "12") (term "1,0,0,1,0"))
            (rule "add_zero_right" (formula "12") (term "1,0,0,1,0"))
            (rule "polySimp_elimSub" (formula "12") (term "0,0,1,2,0,1,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,1,2,0,1,0"))
            (rule "polySimp_addLiterals" (formula "12") (term "0,1,2,0,1,0"))
            (rule "polySimp_addComm0" (formula "12") (term "0,1,0,0"))
            (rule "polySimp_addComm0" (formula "12") (term "1,0,0,0"))
            (rule "polySimp_addComm0" (formula "12") (term "0,1,2,0,1,0"))
            (rule "lenOfSeqDef" (formula "12") (term "0,0,0,1,0"))
            (rule "polySimp_elimSub" (formula "12") (term "1,0,0,0,1,0"))
            (rule "mul_literals" (formula "12") (term "1,1,0,0,0,1,0"))
            (rule "add_zero_right" (formula "12") (term "1,0,0,0,1,0"))
            (builtin "One Step Simplification" (formula "12"))
            (rule "eqSymm" (formula "12") (term "1,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,1,0"))
            (rule "add_zero_right" (formula "12") (term "0,0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,1,0,0"))
            (rule "polySimp_addComm1" (formula "12") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
            (rule "polySimp_pullOutFactor2" (formula "12") (term "0,1,0,0"))
            (rule "add_literals" (formula "12") (term "1,0,1,0,0"))
            (rule "times_zero_1" (formula "12") (term "0,1,0,0"))
            (rule "leq_literals" (formula "12") (term "1,0,0"))
            (builtin "One Step Simplification" (formula "12"))
            (rule "inEqSimp_homoInEq0" (formula "12") (term "0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,0"))
            (rule "polySimp_addComm1" (formula "12") (term "0,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,0"))
            (rule "add_zero_left" (formula "12") (term "0,0,0"))
            (rule "replace_known_left" (formula "12") (term "0,0") (ifseqformula "7"))
            (builtin "One Step Simplification" (formula "12"))
            (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
            (rule "qeq_literals" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "applyEq" (formula "11") (term "1,2,1,0,0,0,0,2,0,0") (ifseqformula "1"))
            (rule "add_literals" (formula "11") (term "2,1,0,0,0,0,2,0,0"))
            (rule "applyEq" (formula "11") (term "1,2,1,0,0,1,1,2,0,0") (ifseqformula "1"))
            (rule "add_zero_right" (formula "11") (term "2,1,0,0,1,1,2,0,0"))
            (rule "applyEq" (formula "11") (term "1,2,1,0,1") (ifseqformula "1"))
            (rule "add_zero_right" (formula "11") (term "2,1,0,1"))
            (rule "applyEq" (formula "11") (term "1,2,1,0,0,1,0") (ifseqformula "1"))
            (rule "add_zero_right" (formula "11") (term "2,1,0,0,1,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "0,0,0,0,0"))
            (rule "wellFormedMemsetArrayPrimitive" (formula "11") (term "1"))
            (rule "wellFormedStorePrimitive" (formula "11") (term "1"))
            (rule "wellFormedStorePrimitive" (formula "11") (term "1"))
            (rule "wellFormedStorePrimitive" (formula "11") (term "1"))
            (rule "wellFormedCreate" (formula "11") (term "1"))
            (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "3"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "array2seqDef" (formula "11") (term "1") (inst "u=u"))
            (rule "eqSymm" (formula "11"))
            (rule "dismissNonSelectedField" (formula "11") (term "2,0"))
            (rule "applyEq" (formula "11") (term "1,0") (ifseqformula "1"))
            (rule "seqDef_lower_equals_upper" (formula "11") (term "0"))
            (rule "eqSymm" (formula "11"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "orRight" (formula "11"))
            (rule "orRight" (formula "11"))
            (rule "eqSeqEmpty" (formula "13"))
            (rule "inEqSimp_geqRight" (formula "11"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "12"))
            (rule "add_zero_right" (formula "1") (term "1"))
            (rule "inEqSimp_contradEq3" (formula "12") (ifseqformula "1"))
            (rule "times_zero_1" (formula "12") (term "1,0,0"))
            (rule "add_zero_right" (formula "12") (term "0,0"))
            (rule "qeq_literals" (formula "12") (term "0"))
            (builtin "One Step Simplification" (formula "12"))
            (rule "false_right" (formula "12"))
            (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "7"))
            (rule "qeq_literals" (formula "1") (term "0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "Body Preserves Invariant"
            (builtin "One Step Simplification" (formula "10"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "impRight" (formula "14") (userinteraction))
            (rule "variableDeclarationAssign" (formula "1") (term "1") (userinteraction))
            (rule "variableDeclaration" (formula "1") (term "1") (newnames "b_3_2") (userinteraction))
            (rule "greater_equal_than_comparison_simple" (formula "1") (term "1") (userinteraction))
            (rule "methodCallEmpty" (formula "1") (term "1,1") (userinteraction))
            (rule "emptyModality" (formula "1") (term "1,1") (userinteraction))
            (builtin "One Step Simplification" (formula "1"))
            (rule "variableDeclarationAssign" (formula "15") (term "1") (userinteraction))
            (rule "variableDeclaration" (formula "15") (term "1") (newnames "exc_1") (userinteraction))
            (rule "assignment" (formula "15") (term "1") (userinteraction))
            (builtin "One Step Simplification" (formula "15"))
            (rule "variableDeclaration" (formula "15") (term "1") (newnames "thrownExc") (userinteraction))
            (rule "ifUnfold" (formula "15") (term "1") (inst "#boolv=x") (userinteraction))
            (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_2") (userinteraction))
            (rule "greater_equal_than_comparison_simple" (formula "15") (term "1") (userinteraction))
            (builtin "One Step Simplification" (formula "15"))
            (rule "if" (formula "15") (term "1") (userinteraction))
            (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "1")))
            (rule "methodCallWithAssignmentUnfoldArguments" (formula "15") (term "1") (userinteraction))
            (rule "variableDeclarationAssign" (formula "15") (term "1") (userinteraction))
            (rule "variableDeclaration" (formula "15") (term "1") (newnames "var") (userinteraction))
            (rule "assignment_array2" (formula "15") (term "1") (userinteraction))
            (branch "Normal Execution (_messages != null)"
               (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "14")))
               (rule "orRight" (formula "15") (userinteraction))
               (builtin "One Step Simplification" (formula "17"))
               (rule "variableDeclarationAssign" (formula "17") (term "1") (userinteraction))
               (rule "variableDeclaration" (formula "17") (term "1") (newnames "var_1") (userinteraction))
               (rule "assignment" (formula "17") (term "1") (userinteraction))
               (builtin "One Step Simplification" (formula "17"))
               (builtin "Use Operation Contract" (formula "17") (newnames "heapBefore_concatenate,result_0,exc_0,heapAfter_concatenate,anon_heap_concatenate") (contract "verif.utils.MessageTools[verif.utils.MessageTools::concatenate([B,[B)].JML normal_behavior operation contract.0"))
               (branch "Post (concatenate)"
                  (rule "assignment" (formula "19") (term "1,1") (userinteraction))
                  (rule "tryEmpty" (formula "19") (term "1,1,1") (userinteraction))
                  (rule "postdecrement" (formula "19") (term "1,1,1") (userinteraction))
                  (rule "compound_subtraction_1" (formula "19") (term "1,1,1") (inst "#v=x") (userinteraction))
                  (rule "variableDeclarationAssign" (formula "19") (term "1,1,1") (userinteraction))
                  (rule "variableDeclaration" (formula "19") (term "1,1,1") (newnames "x_3") (userinteraction))
                  (rule "widening_identity_cast_5" (formula "19") (term "1,1,1") (userinteraction))
                  (rule "assignment" (formula "19") (term "1,1,1") (userinteraction))
                  (rule "assignmentSubtractionInt" (formula "19") (term "1,1,1,1") (userinteraction))
                  (rule "tryEmpty" (formula "19") (term "1,1,1,1,1") (userinteraction))
                  (rule "methodCallEmpty" (formula "19") (term "1,1,1,1,1") (userinteraction))
                  (rule "emptyModality" (formula "19") (term "1,1,1,1,1") (userinteraction))
                  (builtin "One Step Simplification" (formula "19"))
                  (builtin "One Step Simplification" (formula "13"))
                  (rule "andLeft" (formula "11"))
                  (rule "andLeft" (formula "14"))
                  (rule "andLeft" (formula "11"))
                  (rule "andLeft" (formula "16"))
                  (rule "andLeft" (formula "12"))
                  (rule "andLeft" (formula "11"))
                  (rule "andLeft" (formula "18"))
                  (rule "andLeft" (formula "20"))
                  (rule "notLeft" (formula "14"))
                  (rule "notLeft" (formula "13"))
                  (rule "andLeft" (formula "11"))
                  (rule "andLeft" (formula "19"))
                  (rule "andLeft" (formula "20"))
                  (rule "notLeft" (formula "21"))
                  (rule "notLeft" (formula "20"))
                  (rule "orRight" (formula "20"))
                  (rule "andRight" (formula "30") (userinteraction))
                  (branch "Case 1"
                     (rule "andRight" (formula "30") (userinteraction))
                     (branch "Case 1"
                        (rule "andRight" (formula "30") (userinteraction))
                        (branch "Case 1"
                           (rule "andRight" (formula "30") (userinteraction))
                           (branch "Case 1"
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "1") (ifseqformula "16"))
                              (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "22")) (ifInst ""  (formula "20")) (ifInst ""  (formula "21")))
                              (rule "translateJavaUnaryMinusInt" (formula "11") (term "0"))
                              (rule "translateJavaAddInt" (formula "13") (term "0,1"))
                              (rule "translateJavaUnaryMinusInt" (formula "30") (term "0,0"))
                              (rule "translateJavaSubInt" (formula "30") (term "1,0"))
                              (rule "translateJavaSubInt" (formula "30") (term "0,1"))
                              (rule "neg_literal" (formula "11") (term "0"))
                              (rule "neg_literal" (formula "30") (term "0,0"))
                              (rule "eqSymm" (formula "19"))
                              (rule "eqSymm" (formula "13"))
                              (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "24"))
                              (builtin "One Step Simplification" (formula "14"))
                              (rule "polySimp_elimSub" (formula "30") (term "1,0"))
                              (rule "mul_literals" (formula "30") (term "1,1,0"))
                              (rule "polySimp_elimSub" (formula "30") (term "0,1"))
                              (rule "mul_literals" (formula "30") (term "1,0,1"))
                              (rule "polySimp_addComm0" (formula "13") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "30") (term "1,0"))
                              (rule "polySimp_addComm0" (formula "30") (term "0,1"))
                              (rule "dismissNonSelectedField" (formula "20") (term "0"))
                              (rule "inEqSimp_leqRight" (formula "28"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "inEqSimp_ltRight" (formula "29"))
                              (rule "mul_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "dismissNonSelectedField" (formula "15") (term "0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "13"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "13") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "29") (term "1"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1"))
                              (rule "polySimp_addComm1" (formula "29") (term "0,1"))
                              (rule "polySimp_addAssoc" (formula "29") (term "0,0,1"))
                              (rule "add_literals" (formula "29") (term "0,0,0,1"))
                              (rule "add_zero_left" (formula "29") (term "0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "12"))
                              (rule "inEqSimp_homoInEq0" (formula "29") (term "0"))
                              (rule "mul_literals" (formula "29") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "29") (term "0,0"))
                              (rule "add_literals" (formula "29") (term "0,0,0"))
                              (rule "add_zero_left" (formula "29") (term "0,0"))
                              (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "2"))
                              (builtin "One Step Simplification" (formula "29"))
                              (rule "inEqSimp_leqRight" (formula "29"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0"))
                              (rule "applyEq" (formula "21") (term "1,2,1,0,0,0,1,0,0") (ifseqformula "5"))
                              (rule "add_zero_right" (formula "21") (term "2,1,0,0,0,1,0,0"))
                              (rule "applyEq" (formula "22") (term "1,2,1,0,0") (ifseqformula "5"))
                              (rule "add_zero_right" (formula "22") (term "2,1,0,0"))
                              (rule "applyEq" (formula "4") (term "0") (ifseqformula "5"))
                              (rule "qeq_literals" (formula "4"))
                              (rule "true_left" (formula "4"))
                              (rule "applyEq" (formula "15") (term "1,2,1,0,0,0") (ifseqformula "4"))
                              (rule "add_literals" (formula "15") (term "2,1,0,0,0"))
                              (rule "applyEq" (formula "14") (term "1,2,1,0,0,0,1,0") (ifseqformula "4"))
                              (rule "add_literals" (formula "14") (term "2,1,0,0,0,1,0"))
                              (rule "eqSymm" (formula "14"))
                              (rule "applyEq" (formula "17") (term "1,2,1,0,0,0,0") (ifseqformula "4"))
                              (rule "add_literals" (formula "17") (term "2,1,0,0,0,0"))
                              (rule "applyEq" (formula "14") (term "1,2,1,0,0,0,0") (ifseqformula "4"))
                              (rule "add_zero_right" (formula "14") (term "2,1,0,0,0,0"))
                              (rule "eqSymm" (formula "14"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1"))
                              (rule "polySimp_rightDist" (formula "2") (term "1"))
                              (rule "mul_literals" (formula "2") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "13"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                              (rule "polySimp_elimOne" (formula "13") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
                              (rule "andLeft" (formula "2"))
                              (rule "inEqSimp_homoInEq1" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                              (rule "mul_literals" (formula "2") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "2") (term "0"))
                              (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                              (rule "add_literals" (formula "2") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                              (rule "add_literals" (formula "2") (term "1,1,0"))
                              (rule "times_zero_1" (formula "2") (term "1,0"))
                              (rule "add_zero_right" (formula "2") (term "0"))
                              (rule "leq_literals" (formula "2"))
                              (rule "closeFalse" (formula "2"))
                           )
                           (branch "Case 2"
                              (rule "translateJavaAddInt" (formula "30") (term "0,1") (userinteraction))
                              (rule "translateJavaSubInt" (formula "30") (term "0,0,1") (userinteraction))
                              (rule "polySimp_addComm0" (formula "30") (term "0,1") (userinteraction))
                              (rule "switch_params" (formula "30") (term "0,1") (userinteraction))
                              (rule "sub" (formula "30") (term "0,0,1") (userinteraction))
                              (rule "switch_brackets" (formula "30") (term "0,1") (userinteraction))
                              (rule "add_sub_elim_left" (formula "30") (term "1,0,1") (userinteraction))
                              (rule "add_zero_right" (formula "30") (term "0,1") (userinteraction))
                              (rule "translateJavaAddInt" (formula "13") (term "0,1") (userinteraction))
                              (rule "applyEq" (formula "30") (term "0") (ifseqformula "19") (userinteraction))
                              (rule "defOfarrConcat" (formula "30") (term "1") (userinteraction))
                              (rule "ifthenelse_split" (formula "30") (term "1") (userinteraction))
                              (branch
                                 (rule "array2seq2dDef" (formula "1") (term "0,1") (inst "u=u") (userinteraction))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1") (ifseqformula "17"))
                                 (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "23")) (ifInst ""  (formula "21")) (ifInst ""  (formula "22")))
                                 (rule "translateJavaUnaryMinusInt" (formula "12") (term "0"))
                                 (rule "neg_literal" (formula "12") (term "0"))
                                 (rule "eqSymm" (formula "14"))
                                 (rule "eqSymm" (formula "1"))
                                 (rule "eqSymm" (formula "20"))
                                 (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "25"))
                                 (builtin "One Step Simplification" (formula "15"))
                                 (rule "polySimp_addComm0" (formula "14") (term "0,0"))
                                 (rule "eqSeqEmpty" (formula "31"))
                                 (rule "dismissNonSelectedField" (formula "21") (term "0"))
                                 (rule "lenOfSeqDef" (formula "1") (term "0"))
                                 (rule "polySimp_elimSub" (formula "1") (term "1,0"))
                                 (rule "times_zero_2" (formula "1") (term "1,1,0"))
                                 (rule "add_zero_right" (formula "1") (term "1,0"))
                                 (rule "dismissNonSelectedField" (formula "15") (term "0,0"))
                                 (rule "inEqSimp_leqRight" (formula "29"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "inEqSimp_ltRight" (formula "30"))
                                 (rule "times_zero_1" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "14"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "14") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0"))
                                 (rule "add_zero_right" (formula "2") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "13"))
                                 (rule "applyEq" (formula "22") (term "1,2,1,0,0") (ifseqformula "5"))
                                 (rule "add_literals" (formula "22") (term "2,1,0,0"))
                                 (rule "applyEq" (formula "30") (term "1,2,1,0,0,0,1,0,0,0") (ifseqformula "5"))
                                 (rule "add_literals" (formula "30") (term "2,1,0,0,0,1,0,0,0"))
                                 (rule "applyEq" (formula "15") (term "1,2,1,0,0,0,1,0") (ifseqformula "5"))
                                 (rule "add_zero_right" (formula "15") (term "2,1,0,0,0,1,0"))
                                 (rule "eqSymm" (formula "15"))
                                 (rule "applyEq" (formula "21") (term "1,2,1,0,0,0,1,0,0") (ifseqformula "5"))
                                 (rule "add_zero_right" (formula "21") (term "2,1,0,0,0,1,0,0"))
                                 (rule "applyEq" (formula "18") (term "1,2,1,0,0,0,0") (ifseqformula "5"))
                                 (rule "add_literals" (formula "18") (term "2,1,0,0,0,0"))
                                 (rule "applyEq" (formula "16") (term "1,2,1,0,0,0") (ifseqformula "5"))
                                 (rule "add_zero_right" (formula "16") (term "2,1,0,0,0"))
                                 (rule "applyEq" (formula "4") (term "0") (ifseqformula "5"))
                                 (rule "qeq_literals" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "applyEq" (formula "14") (term "1,2,1,0,0,0,0") (ifseqformula "4"))
                                 (rule "add_literals" (formula "14") (term "2,1,0,0,0,0"))
                                 (rule "eqSymm" (formula "14"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                 (rule "mul_literals" (formula "1") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "13"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                                 (rule "polySimp_elimOne" (formula "13") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0,0,0"))
                                 (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "3"))
                                 (rule "leq_literals" (formula "12") (term "0"))
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "true_left" (formula "12"))
                                 (rule "array2seqDef" (formula "18") (term "1,0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "18") (term "1") (inst "u=u"))
                                 (rule "eqSymm" (formula "18"))
                                 (rule "array2seqDef" (formula "27") (term "1,0,0") (inst "u=u"))
                                 (rule "lenOfSeqDefEQ" (formula "27") (term "0") (ifseqformula "18"))
                                 (builtin "One Step Simplification" (formula "27"))
                                 (rule "orRight" (formula "27"))
                                 (rule "notRight" (formula "27"))
                                 (rule "polySimp_elimSub" (formula "28") (term "0"))
                                 (rule "mul_literals" (formula "28") (term "1,0"))
                                 (rule "add_zero_right" (formula "28") (term "0"))
                                 (rule "inEqSimp_commuteLeq" (formula "1"))
                                 (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "28"))
                                 (rule "add_zero_right" (formula "1") (term "1"))
                                 (rule "inEqSimp_contradEq7" (formula "28") (ifseqformula "1"))
                                 (rule "times_zero_1" (formula "28") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "28") (term "0,0"))
                                 (rule "leq_literals" (formula "28") (term "0"))
                                 (builtin "One Step Simplification" (formula "28"))
                                 (rule "false_right" (formula "28"))
                                 (rule "array2seqDef" (formula "13") (term "1") (inst "u=u"))
                                 (rule "eqSymm" (formula "13"))
                                 (rule "array2seqDef" (formula "19") (term "0,1") (inst "u=u"))
                                 (rule "eqSymm" (formula "19"))
                                 (rule "eqSeqDef" (formula "19") (inst "iv=iv"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "lenOfSeqDef" (formula "19") (term "1"))
                                 (rule "polySimp_elimSub" (formula "19") (term "1,1"))
                                 (rule "mul_literals" (formula "19") (term "1,1,1"))
                                 (rule "add_zero_right" (formula "19") (term "1,1"))
                                 (rule "getOfSeqDef" (formula "20") (term "1,1,0"))
                                 (rule "castDel" (formula "20") (term "1,1,1,0"))
                                 (rule "castDel" (formula "20") (term "2,1,1,0"))
                                 (rule "add_zero_right" (formula "20") (term "0,2,1,1,1,0"))
                                 (rule "polySimp_elimSub" (formula "20") (term "1,1,0,1,1,0"))
                                 (rule "times_zero_2" (formula "20") (term "1,1,1,0,1,1,0"))
                                 (rule "add_zero_right" (formula "20") (term "1,1,0,1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                                 (rule "polySimp_addComm1" (formula "20") (term "0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "19") (term "0,1"))
                                 (rule "add_zero_right" (formula "19") (term "0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,1,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,1,1,0"))
                                 (rule "apply_eq_monomials" (formula "20") (term "1,0,1,0,0") (ifseqformula "19"))
                                 (rule "polySimp_rightDist" (formula "20") (term "0,1,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1,0,1,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "20") (term "1,0,1,0,0"))
                                 (rule "add_literals" (formula "20") (term "1,1,1,0,1,0,0"))
                                 (rule "times_zero_1" (formula "20") (term "1,1,0,1,0,0"))
                                 (rule "add_zero_right" (formula "20") (term "1,0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "20") (term "1,0,1,0,0"))
                                 (rule "polySimp_addComm1" (formula "20") (term "0,1,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "19") (term "0,0,1"))
                                 (rule "polySimp_elimOne" (formula "19") (term "0,0,1"))
                                 (rule "replace_known_left" (formula "19") (term "0,1") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "20") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,1,1,0"))
                                 (rule "mul_literals" (formula "20") (term "0,1,1,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,1,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,0,1,0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "0,0,0,1,0,0,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "20") (term "0,0,0,1,0,0,1,0,0"))
                                 (rule "replace_known_left" (formula "20") (term "0,0,1,0,0,1,0,0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                                 (rule "eqSeqDef2" (formula "13") (inst "iv=iv") (ifseqformula "13"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "true_left" (formula "13"))
                                 (rule "pullOutSelect" (formula "20") (term "0") (inst "selectSK=java_lang_Object_created__20"))
                                 (rule "simplifySelectOfMemset" (formula "1"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "simplifySelectOfStore" (formula "1"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "simplifySelectOfStore" (formula "1"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "simplifySelectOfStore" (formula "1"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "simplifySelectOfCreate" (formula "1"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "27")))
                                 (rule "castDel" (formula "1") (term "1,0"))
                                 (rule "apply_eq_boolean_rigid" (formula "1") (term "1") (ifseqformula "21"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "orRight" (formula "20"))
                                 (rule "pullOutSelect" (formula "13") (term "0,0") (inst "selectSK=java_lang_Object_created__21"))
                                 (rule "simplifySelectOfMemset" (formula "13"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "simplifySelectOfStore" (formula "13"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "simplifySelectOfStore" (formula "13"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "simplifySelectOfStore" (formula "13"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "simplifySelectOfCreate" (formula "13"))
                                 (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "29")))
                                 (rule "castDel" (formula "13") (term "1,0"))
                                 (rule "apply_eq_boolean" (formula "13") (term "2,0") (ifseqformula "26"))
                                 (rule "pullOutSelect" (formula "19") (term "0,1,0,0,0") (inst "selectSK=arr_13"))
                                 (rule "applyEq" (formula "20") (term "1,2,0,0,0") (ifseqformula "19"))
                                 (rule "applyEq" (formula "21") (term "1,2,0,0,0,1,0") (ifseqformula "19"))
                                 (rule "applyEq" (formula "21") (term "0,1,0,0,0,1,0") (ifseqformula "19"))
                                 (rule "simplifySelectOfAnon" (formula "19"))
                                 (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "31")))
                                 (rule "dismissNonSelectedField" (formula "19") (term "0,0,0,0"))
                                 (rule "dismissNonSelectedField" (formula "19") (term "2,0"))
                                 (rule "ifthenelse_negated" (formula "19") (term "0"))
                                 (rule "pullOutSelect" (formula "19") (term "0,0,0") (inst "selectSK=java_lang_Object_created__22"))
                                 (rule "simplifySelectOfMemset" (formula "19"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "simplifySelectOfStore" (formula "19"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "simplifySelectOfStore" (formula "19"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "simplifySelectOfStore" (formula "19"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "simplifySelectOfCreate" (formula "19"))
                                 (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "31")))
                                 (rule "castDel" (formula "19") (term "1,0"))
                                 (rule "sortsDisjointModuloNull" (formula "19") (term "0,0"))
                                 (rule "replace_known_right" (formula "19") (term "0,0,0") (ifseqformula "31"))
                                 (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "32")))
                                 (rule "applyEqReverse" (formula "20") (term "0,0,0") (ifseqformula "19"))
                                 (rule "hideAuxiliaryEq" (formula "19"))
                                 (rule "replace_known_left" (formula "19") (term "0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "simplifySelectOfMemset" (formula "19"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "elementOfArrayRangeConcrete" (formula "19") (term "0,0"))
                                 (rule "eqSymm" (formula "19") (term "0,0,0,0"))
                                 (rule "dismissNonSelectedField" (formula "19") (term "2,0"))
                                 (rule "sortsDisjointModuloNull" (formula "19") (term "0,0,0,0"))
                                 (rule "replace_known_right" (formula "19") (term "0,0,0,0,0") (ifseqformula "30"))
                                 (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "31")))
                                 (rule "simplifySelectOfStore" (formula "19"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "simplifySelectOfStore" (formula "19"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "simplifySelectOfCreate" (formula "19"))
                                 (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "30")))
                                 (rule "applyEqReverse" (formula "20") (term "0,1,0,0,0") (ifseqformula "19"))
                                 (rule "applyEqReverse" (formula "21") (term "0,1,0,0,0,1,0") (ifseqformula "19"))
                                 (rule "applyEqReverse" (formula "21") (term "1,2,0,0,0,1,0") (ifseqformula "19"))
                                 (rule "applyEqReverse" (formula "20") (term "1,2,0,0,0") (ifseqformula "19"))
                                 (rule "hideAuxiliaryEq" (formula "19"))
                                 (rule "hideAuxiliaryEqConcrete2" (formula "23"))
                                 (rule "nnf_imp2or" (formula "20") (term "0"))
                                 (rule "nnf_notAnd" (formula "20") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "20") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                                 (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                                 (rule "commute_or_2" (formula "20") (term "0"))
                                 (rule "commute_or" (formula "20") (term "0,0"))
                                 (rule "ifthenelse_split" (formula "3") (term "0"))
                                 (branch "messages.length >= 1 TRUE"
                                    (rule "applyEq" (formula "11") (term "0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "2") (term "0") (ifseqformula "4"))
                                    (rule "inEqSimp_homoInEq1" (formula "2"))
                                    (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                    (rule "add_literals" (formula "2") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "2") (term "1,0"))
                                    (rule "add_zero_right" (formula "2") (term "0"))
                                    (rule "leq_literals" (formula "2"))
                                    (rule "closeFalse" (formula "2"))
                                 )
                                 (branch "messages.length >= 1 FALSE"
                                    (rule "eqSymm" (formula "3"))
                                    (rule "inEqSimp_geqRight" (formula "21"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "applyEq" (formula "20") (term "0,2,1,2,0,0,0") (ifseqformula "4"))
                                    (rule "applyEqRigid" (formula "3") (term "1,1") (ifseqformula "4"))
                                    (rule "add_literals" (formula "3") (term "1"))
                                    (rule "applyEqRigid" (formula "21") (term "0,2,0,1,0,0,0,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "5") (term "0") (ifseqformula "4"))
                                    (rule "qeq_literals" (formula "5"))
                                    (rule "true_left" (formula "5"))
                                    (rule "applyEq" (formula "20") (term "0,2,1,2,0,0,0,0,0,0") (ifseqformula "4"))
                                    (rule "applyEqRigid" (formula "19") (term "0,2,0,1,0,0,0") (ifseqformula "4"))
                                    (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "3") (term "0"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "closeFalse" (formula "3"))
                                 )
                              )
                              (branch
                                 (rule "pullOut" (formula "31") (term "0,0") (inst "sk=array2seq_0") (userinteraction))
                                 (rule "pullOut" (formula "32") (term "0,1") (inst "sk=SeqseqGet_0") (userinteraction))
                                 (rule "cut" (inst "cutFormula=array2seq_0 = SeqseqGet_0") (userinteraction))
                                 (branch "CUT: array2seq_0 = SeqseqGet_0 TRUE"
                                    (rule "applyEqReverse" (formula "34") (term "0,1") (ifseqformula "1") (userinteraction))
                                    (rule "pullOut" (formula "16") (term "0") (inst "sk=array2seq_1") (userinteraction))
                                    (rule "pullOut" (formula "35") (term "1,0") (inst "sk=array2seq_2") (userinteraction))
                                    (rule "cut" (inst "cutFormula=array2seq_2 = array2seq_1") (userinteraction))
                                    (branch
                                       (rule "applyEqRigid" (formula "37") (term "1,0") (ifseqformula "1") (userinteraction))
                                       (rule "applyEq" (formula "37") (term "1,0") (ifseqformula "19") (userinteraction))
                                       (rule "pullOut" (formula "37") (term "1,1,0") (inst "sk=array2seq2d_0") (userinteraction))
                                       (rule "pullOut" (formula "38") (term "1,1,1") (inst "sk=array2seq2d_1") (userinteraction))
                                       (rule "cut" (inst "cutFormula=array2seq2d_0 = array2seq2d_1") (userinteraction))
                                       (branch "CUT: array2seq2d_0 = array2seq2d_1 TRUE"
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "1") (ifseqformula "25"))
                                          (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "31")) (ifInst ""  (formula "29")) (ifInst ""  (formula "30")))
                                          (rule "translateJavaUnaryMinusInt" (formula "19") (term "0"))
                                          (rule "neg_literal" (formula "19") (term "0"))
                                          (rule "eqSymm" (formula "22"))
                                          (rule "eqSymm" (formula "1"))
                                          (rule "eqSymm" (formula "39"))
                                          (rule "eqSymm" (formula "40"))
                                          (rule "eqSymm" (formula "28"))
                                          (rule "replace_known_right" (formula "23") (term "0") (ifseqformula "33"))
                                          (builtin "One Step Simplification" (formula "23"))
                                          (rule "polySimp_addComm0" (formula "22") (term "0,0"))
                                          (rule "polySimp_addComm0" (formula "40") (term "0,1,1"))
                                          (rule "polySimp_addComm0" (formula "40") (term "0,1,0"))
                                          (rule "dismissNonSelectedField" (formula "29") (term "0"))
                                          (rule "inEqSimp_leqRight" (formula "37"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "inEqSimp_ltRight" (formula "38"))
                                          (rule "mul_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "dismissNonSelectedField" (formula "24") (term "0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "21"))
                                          (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "21") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "20"))
                                          (rule "applyEq" (formula "24") (term "1,2,1,0,0,0") (ifseqformula "12"))
                                          (rule "add_zero_right" (formula "24") (term "2,1,0,0,0"))
                                          (rule "applyEq" (formula "23") (term "1,2,1,0,0,0,1,0") (ifseqformula "12"))
                                          (rule "add_zero_right" (formula "23") (term "2,1,0,0,0,1,0"))
                                          (rule "applyEq" (formula "22") (term "1,2,1,0,0,0,0") (ifseqformula "12"))
                                          (rule "add_zero_right" (formula "22") (term "2,1,0,0,0,0"))
                                          (rule "applyEqRigid" (formula "39") (term "0,0") (ifseqformula "7"))
                                          (rule "eqSymm" (formula "39"))
                                          (rule "applyEq" (formula "11") (term "0") (ifseqformula "12"))
                                          (rule "qeq_literals" (formula "11"))
                                          (rule "true_left" (formula "11"))
                                          (rule "applyEqRigid" (formula "6") (term "1") (ifseqformula "5"))
                                          (rule "applyEq" (formula "3") (term "1") (ifseqformula "2"))
                                          (rule "applyEq" (formula "25") (term "1,2,1,0,0,0,0") (ifseqformula "11"))
                                          (rule "add_zero_right" (formula "25") (term "2,1,0,0,0,0"))
                                          (rule "applyEq" (formula "9") (term "1") (ifseqformula "7"))
                                          (rule "applyEq" (formula "28") (term "1,2,1,0,0,0,1,0,0") (ifseqformula "11"))
                                          (rule "add_literals" (formula "28") (term "2,1,0,0,0,1,0,0"))
                                          (rule "applyEq" (formula "9") (term "1,2,1,0,0,0,1,0") (ifseqformula "11"))
                                          (rule "add_literals" (formula "9") (term "2,1,0,0,0,1,0"))
                                          (rule "applyEq" (formula "29") (term "1,2,1,0,0") (ifseqformula "11"))
                                          (rule "add_zero_right" (formula "29") (term "2,1,0,0"))
                                          (rule "applyEq" (formula "4") (term "1,2,1,0,0,0,0") (ifseqformula "11"))
                                          (rule "add_zero_right" (formula "4") (term "2,1,0,0,0,0"))
                                          (rule "applyEqRigid" (formula "38") (term "1,1,1") (ifseqformula "2"))
                                          (rule "applyEq" (formula "37") (term "0,0") (ifseqformula "3"))
                                          (rule "applyEqRigid" (formula "38") (term "0,0") (ifseqformula "7"))
                                          (builtin "One Step Simplification" (formula "38"))
                                          (rule "closeTrue" (formula "38"))
                                       )
                                       (branch "CUT: array2seq2d_0 = array2seq2d_1 FALSE"
                                          (rule "applyEqReverse" (formula "28") (term "0") (ifseqformula "2") (userinteraction))
                                          (rule "applyEqReverse" (formula "28") (term "1") (ifseqformula "1") (userinteraction))
                                          (rule "array2seq2dDef" (formula "28") (term "0") (inst "u=u") (userinteraction))
                                          (rule "array2seq2dDef" (formula "28") (term "1") (inst "u=u") (userinteraction))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "26") (term "1") (ifseqformula "24"))
                                          (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "31")) (ifInst ""  (formula "29")) (ifInst ""  (formula "30")))
                                          (rule "translateJavaUnaryMinusInt" (formula "18") (term "0"))
                                          (rule "neg_literal" (formula "18") (term "0"))
                                          (rule "eqSymm" (formula "21"))
                                          (rule "eqSymm" (formula "39"))
                                          (rule "eqSymm" (formula "40"))
                                          (rule "eqSymm" (formula "27"))
                                          (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "33"))
                                          (builtin "One Step Simplification" (formula "22"))
                                          (rule "polySimp_addComm0" (formula "21") (term "0,0"))
                                          (rule "polySimp_addComm0" (formula "40") (term "0,1,1"))
                                          (rule "polySimp_addComm0" (formula "40") (term "0,1,0"))
                                          (rule "dismissNonSelectedField" (formula "29") (term "0"))
                                          (rule "inEqSimp_leqRight" (formula "37"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "inEqSimp_ltRight" (formula "38"))
                                          (rule "times_zero_1" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "dismissNonSelectedField" (formula "23") (term "0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "20"))
                                          (rule "polySimp_mulComm0" (formula "20") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "20") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "19"))
                                          (rule "applyEq" (formula "38") (term "0,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "8") (term "1,2,1,0,0,0,1,0") (ifseqformula "11"))
                                          (rule "add_zero_right" (formula "8") (term "2,1,0,0,0,1,0"))
                                          (rule "applyEq" (formula "30") (term "1,2,1,0,0") (ifseqformula "11"))
                                          (rule "add_literals" (formula "30") (term "2,1,0,0"))
                                          (rule "applyEq" (formula "29") (term "1,2,1,0,0,0,2,0") (ifseqformula "11"))
                                          (rule "add_zero_right" (formula "29") (term "2,1,0,0,0,2,0"))
                                          (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "23") (term "1,2,1,0,0,0") (ifseqformula "11"))
                                          (rule "add_zero_right" (formula "23") (term "2,1,0,0,0"))
                                          (rule "applyEqRigid" (formula "39") (term "0,1") (ifseqformula "6"))
                                          (rule "applyEq" (formula "39") (term "0,0") (ifseqformula "6"))
                                          (rule "applyEq" (formula "25") (term "1,2,1,0,0,0,0") (ifseqformula "11"))
                                          (rule "add_zero_right" (formula "25") (term "2,1,0,0,0,0"))
                                          (rule "applyEq" (formula "8") (term "1") (ifseqformula "6"))
                                          (rule "applyEq" (formula "22") (term "1,2,1,0,0,0,1,0") (ifseqformula "11"))
                                          (rule "add_zero_right" (formula "22") (term "2,1,0,0,0,1,0"))
                                          (rule "applyEq" (formula "29") (term "1,2,1,0,0,0,1,2,0") (ifseqformula "11"))
                                          (rule "add_zero_right" (formula "29") (term "2,1,0,0,0,1,2,0"))
                                          (rule "applyEq" (formula "28") (term "1,2,1,0,0,0,1,0,0") (ifseqformula "11"))
                                          (rule "add_zero_right" (formula "28") (term "2,1,0,0,0,1,0,0"))
                                          (rule "applyEqRigid" (formula "5") (term "1") (ifseqformula "4"))
                                          (rule "applyEq" (formula "10") (term "0") (ifseqformula "11"))
                                          (rule "qeq_literals" (formula "10"))
                                          (rule "true_left" (formula "10"))
                                          (rule "applyEq" (formula "3") (term "1,2,1,0,0,0,0") (ifseqformula "10"))
                                          (rule "add_zero_right" (formula "3") (term "2,1,0,0,0,0"))
                                          (rule "applyEq" (formula "20") (term "1,2,1,0,0,0,0") (ifseqformula "10"))
                                          (rule "add_zero_right" (formula "20") (term "2,1,0,0,0,0"))
                                          (rule "applyEq" (formula "21") (term "1,0") (ifseqformula "3"))
                                          (rule "applyEqRigid" (formula "27") (term "1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "38") (term "1,1") (ifseqformula "21"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1"))
                                          (rule "mul_literals" (formula "1") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "19"))
                                          (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                                          (rule "polySimp_elimOne" (formula "19") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "9"))
                                          (rule "leq_literals" (formula "18") (term "0"))
                                          (builtin "One Step Simplification" (formula "18"))
                                          (rule "true_left" (formula "18"))
                                          (rule "array2seqDef" (formula "5") (term "0") (inst "u=u"))
                                          (rule "array2seqDef" (formula "26") (term "2,1") (inst "u=u_1"))
                                          (rule "eqSymm" (formula "26"))
                                          (rule "array2seqDef" (formula "25") (term "1") (inst "u=u"))
                                          (rule "eqSymm" (formula "25"))
                                          (rule "array2seqDef" (formula "8") (term "0") (inst "u=u"))
                                          (rule "array2seqDef" (formula "18") (term "0") (inst "u=u"))
                                          (rule "equalityToSeqGetAndSeqLenRight" (formula "36") (inst "iv=iv"))
                                          (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,1"))
                                          (rule "mul_literals" (formula "36") (term "0,1,1,0,0,1"))
                                          (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0,1"))
                                          (rule "eqSeqDef" (formula "26") (inst "iv=iv"))
                                          (rule "lenOfSeqDef" (formula "26") (term "1,0"))
                                          (rule "polySimp_elimSub" (formula "26") (term "1,1,0"))
                                          (rule "times_zero_2" (formula "26") (term "1,1,1,0"))
                                          (rule "add_zero_right" (formula "26") (term "1,1,0"))
                                          (rule "lenOfSeqDef" (formula "26") (term "0,0"))
                                          (rule "polySimp_elimSub" (formula "26") (term "1,0,0"))
                                          (rule "times_zero_2" (formula "26") (term "1,1,0,0"))
                                          (rule "add_zero_right" (formula "26") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "26"))
                                          (rule "allRight" (formula "26") (inst "sk=iv_23"))
                                          (rule "impRight" (formula "26"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "getOfSeqDef" (formula "28") (term "0"))
                                          (rule "castDel" (formula "28") (term "1,0"))
                                          (rule "castDel" (formula "28") (term "2,0"))
                                          (rule "add_zero_right" (formula "28") (term "0,2,0,1,1,0"))
                                          (rule "add_zero_right" (formula "28") (term "0,2,1,2,1,0"))
                                          (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "28"))
                                          (rule "polySimp_elimSub" (formula "28") (term "1,0,0"))
                                          (rule "times_zero_2" (formula "28") (term "1,1,0,0"))
                                          (rule "add_zero_right" (formula "28") (term "1,0,0"))
                                          (rule "lenOfSeqDef" (formula "2") (term "1"))
                                          (rule "polySimp_elimSub" (formula "2") (term "1,1"))
                                          (rule "times_zero_2" (formula "2") (term "1,1,1"))
                                          (rule "add_zero_right" (formula "2") (term "1,1"))
                                          (rule "getOfSeqDef" (formula "28") (term "1"))
                                          (rule "castDel" (formula "28") (term "2,1"))
                                          (rule "castDel" (formula "28") (term "1,1"))
                                          (rule "add_zero_right" (formula "28") (term "0,2,1,1,1"))
                                          (rule "replace_known_left" (formula "28") (term "0,0,1") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "28"))
                                          (rule "polySimp_elimSub" (formula "28") (term "1,0,1"))
                                          (rule "times_zero_2" (formula "28") (term "1,1,0,1"))
                                          (rule "add_zero_right" (formula "28") (term "1,0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1"))
                                          (rule "add_zero_right" (formula "2") (term "0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "28") (term "0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "28") (term "0,1"))
                                          (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,1"))
                                          (rule "polySimp_addComm1" (formula "28") (term "0,0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "28") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "28") (term "0,0,0"))
                                          (rule "polySimp_elimOne" (formula "28") (term "0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "28") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "28") (term "0,0,1"))
                                          (rule "polySimp_elimOne" (formula "28") (term "0,0,1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                          (rule "polySimp_elimOne" (formula "2") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
                                          (rule "polySimp_elimOne" (formula "2") (term "0,0,0"))
                                          (rule "array2seqDef" (formula "27") (term "0,1") (inst "u=u"))
                                          (rule "eqSymm" (formula "27"))
                                          (rule "eqSeqDef2" (formula "9") (inst "iv=iv") (ifseqformula "10"))
                                          (rule "andLeft" (formula "9"))
                                          (rule "eqSymm" (formula "9"))
                                          (rule "eqSymm" (formula "10") (term "1,0"))
                                          (rule "lenOfSeqDef" (formula "9") (term "0"))
                                          (rule "polySimp_elimSub" (formula "9") (term "1,0"))
                                          (rule "mul_literals" (formula "9") (term "1,1,0"))
                                          (rule "add_zero_right" (formula "9") (term "1,0"))
                                          (rule "getOfSeqDef" (formula "10") (term "0,1,0"))
                                          (rule "castDel" (formula "10") (term "1,0,1,0"))
                                          (rule "castDel" (formula "10") (term "2,0,1,0"))
                                          (rule "add_zero_right" (formula "10") (term "0,2,1,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "10") (term "1,1,0,0,1,0"))
                                          (rule "times_zero_2" (formula "10") (term "1,1,1,0,0,1,0"))
                                          (rule "add_zero_right" (formula "10") (term "1,1,0,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0"))
                                          (rule "add_zero_right" (formula "9") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0"))
                                          (rule "polySimp_elimOne" (formula "9") (term "0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "10") (term "0,1,1,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1,0"))
                                          (rule "eqSeqDef2" (formula "22") (inst "iv=iv") (ifseqformula "7"))
                                          (rule "andLeft" (formula "22"))
                                          (rule "eqSymm" (formula "22"))
                                          (rule "eqSymm" (formula "23") (term "1,0"))
                                          (rule "lenOfSeqDef" (formula "22") (term "0"))
                                          (rule "polySimp_elimSub" (formula "22") (term "1,0"))
                                          (rule "mul_literals" (formula "22") (term "1,1,0"))
                                          (rule "add_zero_right" (formula "22") (term "1,0"))
                                          (rule "getOfSeqDef" (formula "23") (term "0,1,0"))
                                          (rule "castDel" (formula "23") (term "2,0,1,0"))
                                          (rule "castDel" (formula "23") (term "1,0,1,0"))
                                          (rule "add_zero_right" (formula "23") (term "0,2,1,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "23") (term "1,1,0,0,1,0"))
                                          (rule "times_zero_2" (formula "23") (term "1,1,1,0,0,1,0"))
                                          (rule "add_zero_right" (formula "23") (term "1,1,0,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0"))
                                          (rule "add_zero_right" (formula "22") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                                          (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0"))
                                          (rule "polySimp_elimOne" (formula "22") (term "0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "23") (term "0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,1,0"))
                                          (rule "eqSeqDef2" (formula "7") (inst "iv=iv") (ifseqformula "21"))
                                          (rule "andLeft" (formula "7"))
                                          (rule "eqSymm" (formula "7"))
                                          (rule "eqSymm" (formula "8") (term "1,0"))
                                          (rule "lenOfSeqDef" (formula "8") (term "1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "8") (term "1,1,1,0,0"))
                                          (rule "mul_literals" (formula "8") (term "1,1,1,1,0,0"))
                                          (rule "add_zero_right" (formula "8") (term "1,1,1,0,0"))
                                          (rule "lenOfSeqDef" (formula "7") (term "1"))
                                          (rule "polySimp_elimSub" (formula "7") (term "1,1"))
                                          (rule "mul_literals" (formula "7") (term "1,1,1"))
                                          (rule "add_zero_right" (formula "7") (term "1,1"))
                                          (rule "lenOfSeqDef" (formula "7") (term "0"))
                                          (rule "polySimp_elimSub" (formula "7") (term "1,0"))
                                          (rule "times_zero_2" (formula "7") (term "1,1,0"))
                                          (rule "add_zero_right" (formula "7") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "getOfSeqDef" (formula "7") (term "1,1,0"))
                                          (rule "castDel" (formula "7") (term "2,1,1,0"))
                                          (rule "castDel" (formula "7") (term "1,1,1,0"))
                                          (rule "add_zero_right" (formula "7") (term "0,2,1,1,1,0"))
                                          (rule "polySimp_elimSub" (formula "7") (term "1,1,0,1,1,0"))
                                          (rule "mul_literals" (formula "7") (term "1,1,1,0,1,1,0"))
                                          (rule "add_zero_right" (formula "7") (term "1,1,0,1,1,0"))
                                          (rule "getOfSeqDef" (formula "7") (term "0,1,0"))
                                          (rule "castDel" (formula "7") (term "1,0,1,0"))
                                          (rule "castDel" (formula "7") (term "2,0,1,0"))
                                          (rule "add_zero_right" (formula "7") (term "0,2,1,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "7") (term "1,1,0,0,1,0"))
                                          (rule "times_zero_2" (formula "7") (term "1,1,1,0,0,1,0"))
                                          (rule "add_zero_right" (formula "7") (term "1,1,0,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "7") (term "0,1,1,0,0"))
                                          (rule "add_zero_right" (formula "7") (term "0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,1,1,0"))
                                          (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,1,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,1,0"))
                                          (rule "eqSymm" (formula "7") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,1,1,0"))
                                          (rule "eqSymm" (formula "7") (term "1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,1,0"))
                                          (rule "eqSymm" (formula "7") (term "1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,1,0"))
                                          (rule "eqSymm" (formula "7") (term "1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
                                          (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,1,0"))
                                          (rule "eqSymm" (formula "7") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,1,1,0"))
                                          (rule "polySimp_rightDist" (formula "7") (term "1,1,0,1,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,1,1,0"))
                                          (rule "mul_literals" (formula "7") (term "0,1,1,0,1,1,0"))
                                          (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,1,1,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,1,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "7") (term "0,0,1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "7") (term "0,0,1,1,1,0,0"))
                                          (rule "applyEqRigid" (formula "7") (term "1,1,1,0,0") (ifseqformula "22"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "7") (term "0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0,1,0"))
                                          (rule "eqSymm" (formula "7") (term "1,0"))
                                          (rule "eqSeqDef2" (formula "6") (inst "iv=iv") (ifseqformula "21"))
                                          (rule "andLeft" (formula "6"))
                                          (rule "eqSymm" (formula "7") (term "1,0"))
                                          (rule "eqSymm" (formula "6"))
                                          (rule "getOfSeqDef" (formula "7") (term "0,1,0"))
                                          (rule "castDel" (formula "7") (term "1,0,1,0"))
                                          (rule "castDel" (formula "7") (term "2,0,1,0"))
                                          (rule "add_zero_right" (formula "7") (term "0,2,1,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "7") (term "1,1,0,0,1,0"))
                                          (rule "times_zero_2" (formula "7") (term "1,1,1,0,0,1,0"))
                                          (rule "add_zero_right" (formula "7") (term "1,1,0,0,1,0"))
                                          (rule "lenOfSeqDef" (formula "6") (term "0"))
                                          (rule "polySimp_elimSub" (formula "6") (term "1,0"))
                                          (rule "mul_literals" (formula "6") (term "1,1,0"))
                                          (rule "add_zero_right" (formula "6") (term "1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0"))
                                          (rule "add_zero_right" (formula "6") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "7") (term "0,1,1,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0,1,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "0,0,0"))
                                          (rule "applyEq" (formula "23") (term "0") (ifseqformula "6"))
                                          (rule "eqSymm" (formula "23"))
                                          (rule "applyEqRigid" (formula "24") (term "1,1,1,0,0") (ifseqformula "23"))
                                          (rule "applyEq" (formula "8") (term "1,1,1,0,0") (ifseqformula "23"))
                                          (rule "eqSeqDef2" (formula "9") (inst "iv=iv") (ifseqformula "12"))
                                          (rule "andLeft" (formula "9"))
                                          (rule "eqSymm" (formula "9"))
                                          (rule "eqSymm" (formula "10") (term "1,0"))
                                          (rule "lenOfSeqDef" (formula "9") (term "0"))
                                          (rule "polySimp_elimSub" (formula "9") (term "1,0"))
                                          (rule "times_zero_2" (formula "9") (term "1,1,0"))
                                          (rule "add_zero_right" (formula "9") (term "1,0"))
                                          (rule "getOfSeqDef" (formula "10") (term "0,1,0"))
                                          (rule "castDel" (formula "10") (term "1,0,1,0"))
                                          (rule "castDel" (formula "10") (term "2,0,1,0"))
                                          (rule "add_zero_right" (formula "10") (term "0,2,1,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "10") (term "1,1,0,0,1,0"))
                                          (rule "times_zero_2" (formula "10") (term "1,1,1,0,0,1,0"))
                                          (rule "add_zero_right" (formula "10") (term "1,1,0,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0"))
                                          (rule "add_zero_right" (formula "9") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0"))
                                          (rule "polySimp_elimOne" (formula "9") (term "0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "10") (term "0,1,1,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1,0"))
                                          (rule "array2seqDef" (formula "32") (term "1,1") (inst "u=u"))
                                          (rule "pullOutSelect" (formula "33") (term "0") (inst "selectSK=java_lang_Object_created__113"))
                                          (rule "simplifySelectOfMemset" (formula "1"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "simplifySelectOfStore" (formula "1"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "simplifySelectOfStore" (formula "1"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "simplifySelectOfStore" (formula "1"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "simplifySelectOfCreate" (formula "1"))
                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")))
                                          (rule "castDel" (formula "1") (term "1,0"))
                                          (rule "apply_eq_boolean" (formula "1") (term "1") (ifseqformula "34"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "orRight" (formula "32"))
                                          (rule "pullOutSelect" (formula "26") (term "0,0") (inst "selectSK=java_lang_Object_created__114"))
                                          (rule "simplifySelectOfMemset" (formula "26"))
                                          (builtin "One Step Simplification" (formula "26"))
                                          (rule "simplifySelectOfStore" (formula "26"))
                                          (builtin "One Step Simplification" (formula "26"))
                                          (rule "simplifySelectOfStore" (formula "26"))
                                          (builtin "One Step Simplification" (formula "26"))
                                          (rule "simplifySelectOfStore" (formula "26"))
                                          (builtin "One Step Simplification" (formula "26"))
                                          (rule "simplifySelectOfCreate" (formula "26"))
                                          (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "42")))
                                          (rule "castDel" (formula "26") (term "1,0"))
                                          (rule "apply_eq_boolean" (formula "26") (term "2,0") (ifseqformula "39"))
                                          (rule "eqSeqDef2" (formula "23") (inst "iv=iv") (ifseqformula "23"))
                                          (builtin "One Step Simplification" (formula "23"))
                                          (rule "true_left" (formula "23"))
                                          (rule "eqSeqDef" (formula "31") (inst "iv=iv"))
                                          (rule "andLeft" (formula "31"))
                                          (rule "getOfSeqDef" (formula "32") (term "1,1,0"))
                                          (rule "castDel" (formula "32") (term "1,1,1,0"))
                                          (rule "castDel" (formula "32") (term "2,1,1,0"))
                                          (rule "add_zero_right" (formula "32") (term "0,2,1,1,1,0"))
                                          (rule "polySimp_elimSub" (formula "32") (term "1,1,0,1,1,0"))
                                          (rule "times_zero_2" (formula "32") (term "1,1,1,0,1,1,0"))
                                          (rule "add_zero_right" (formula "32") (term "1,1,0,1,1,0"))
                                          (rule "lenOfSeqDef" (formula "31") (term "1"))
                                          (rule "polySimp_elimSub" (formula "31") (term "1,1"))
                                          (rule "times_zero_2" (formula "31") (term "1,1,1"))
                                          (rule "add_zero_right" (formula "31") (term "1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0"))
                                          (rule "polySimp_addComm1" (formula "32") (term "0,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,1,1,0"))
                                          (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,1,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "31") (term "0,1"))
                                          (rule "add_zero_right" (formula "31") (term "0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,1,1,0"))
                                          (rule "apply_eq_monomials" (formula "32") (term "1,0,1,0,0") (ifseqformula "31"))
                                          (rule "polySimp_rightDist" (formula "32") (term "0,1,0,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "32") (term "1,0,1,0,1,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "32") (term "1,0,1,0,0"))
                                          (rule "add_literals" (formula "32") (term "1,1,1,0,1,0,0"))
                                          (rule "times_zero_1" (formula "32") (term "1,1,0,1,0,0"))
                                          (rule "add_zero_right" (formula "32") (term "1,0,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "32") (term "1,0,1,0,0"))
                                          (rule "polySimp_addComm1" (formula "32") (term "0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,1,1,0"))
                                          (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,1,1,0"))
                                          (rule "polySimp_rightDist" (formula "32") (term "1,1,0,1,1,0"))
                                          (rule "mul_literals" (formula "32") (term "0,1,1,0,1,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,1,1,0"))
                                          (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,1,1,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "31") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "31") (term "0,0,1"))
                                          (rule "polySimp_elimOne" (formula "31") (term "0,0,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "32") (term "0,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "32") (term "0,1,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "32") (term "0,0,1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "32") (term "0,0,1,1,1,0,0"))
                                          (rule "eqSeqDef2" (formula "13") (inst "iv=iv") (ifseqformula "13"))
                                          (builtin "One Step Simplification" (formula "13"))
                                          (rule "true_left" (formula "13"))
                                          (rule "pullOutSelect" (formula "34") (term "1,2,1,0") (inst "selectSK=arr_402"))
                                          (rule "applyEq" (formula "35") (term "0,1,1,0") (ifseqformula "1"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")))
                                          (rule "dismissNonSelectedField" (formula "1") (term "0,0,0,0,0"))
                                          (rule "ifthenelse_negated" (formula "1") (term "0"))
                                          (rule "pullOutSelect" (formula "12") (term "0,1,0") (inst "selectSK=arr_403"))
                                          (rule "applyEq" (formula "32") (term "0,1,0,0,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "14") (term "0,1,1,1,0,0,1,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "11") (term "0,1,1,1,0,0,1,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "10") (term "0,1,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "11") (term "1,1,0,1,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "13") (term "0,0,0,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "32") (term "1,2,0,0,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "33") (term "1,2,0,0,0,1,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "14") (term "1,1,0,1,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "10") (term "0,0,0,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "33") (term "0,1,0,0,0,1,0") (ifseqformula "12"))
                                          (rule "simplifySelectOfAnon" (formula "12"))
                                          (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "44")))
                                          (rule "dismissNonSelectedField" (formula "12") (term "0,0,0,0"))
                                          (rule "dismissNonSelectedField" (formula "12") (term "2,0"))
                                          (rule "ifthenelse_negated" (formula "12") (term "0"))
                                          (rule "applyEq" (formula "10") (term "0") (ifseqformula "13"))
                                          (rule "applyEq" (formula "14") (term "1,1,1,0,0") (ifseqformula "10"))
                                          (rule "applyEq" (formula "13") (term "1") (ifseqformula "10"))
                                          (rule "pullOutSelect" (formula "36") (term "1,2,1,1") (inst "selectSK=arr_404"))
                                          (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "37") (term "0,1,1,1") (ifseqformula "1"))
                                          (rule "simplifySelectOfAnon" (formula "1"))
                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")))
                                          (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
                                          (rule "dismissNonSelectedField" (formula "1") (term "0,0,0,0"))
                                          (rule "ifthenelse_negated" (formula "1") (term "0"))
                                          (rule "pullOutSelect" (formula "2") (term "0,0,0,0") (inst "selectSK=java_lang_Object_created__115"))
                                          (rule "applyEq" (formula "1") (term "0,0,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "14") (term "0,0,0") (ifseqformula "2"))
                                          (rule "simplifySelectOfMemset" (formula "2"))
                                          (builtin "One Step Simplification" (formula "2"))
                                          (rule "simplifySelectOfStore" (formula "2"))
                                          (builtin "One Step Simplification" (formula "2"))
                                          (rule "simplifySelectOfStore" (formula "2"))
                                          (builtin "One Step Simplification" (formula "2"))
                                          (rule "simplifySelectOfStore" (formula "2"))
                                          (builtin "One Step Simplification" (formula "2"))
                                          (rule "simplifySelectOfCreate" (formula "2"))
                                          (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "45")))
                                          (rule "castDel" (formula "2") (term "1,0"))
                                          (rule "sortsDisjointModuloNull" (formula "2") (term "0,0"))
                                          (rule "replace_known_right" (formula "2") (term "0,0,0") (ifseqformula "45"))
                                          (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "46")))
                                          (rule "applyEqReverse" (formula "1") (term "0,0,0") (ifseqformula "2"))
                                          (rule "applyEqReverse" (formula "3") (term "0,0,0,0") (ifseqformula "2"))
                                          (rule "applyEqReverse" (formula "14") (term "0,0,0") (ifseqformula "2"))
                                          (rule "hideAuxiliaryEq" (formula "2"))
                                          (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "20"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "simplifySelectOfMemset" (formula "1"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "replace_known_left" (formula "13") (term "0,0") (ifseqformula "20"))
                                          (builtin "One Step Simplification" (formula "13"))
                                          (rule "simplifySelectOfMemset" (formula "13"))
                                          (builtin "One Step Simplification" (formula "13"))
                                          (rule "replace_known_left" (formula "2") (term "0,0,0") (ifseqformula "20"))
                                          (builtin "One Step Simplification" (formula "2"))
                                          (rule "applyEqReverse" (formula "37") (term "0,1,1,0") (ifseqformula "2"))
                                          (rule "applyEqReverse" (formula "37") (term "1,2,1,0") (ifseqformula "2"))
                                          (rule "hideAuxiliaryEq" (formula "2"))
                                          (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
                                          (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                                          (rule "eqSymm" (formula "1") (term "0,0,0,0"))
                                          (rule "elementOfArrayRangeConcrete" (formula "12") (term "0,0"))
                                          (rule "eqSymm" (formula "12") (term "0,0,0,0"))
                                          (rule "dismissNonSelectedField" (formula "12") (term "2,0"))
                                          (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
                                          (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0,0"))
                                          (rule "replace_known_right" (formula "1") (term "1,0,0,0,0") (ifseqformula "44"))
                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")))
                                          (rule "simplifySelectOfStore" (formula "1"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "simplifySelectOfCreate" (formula "1"))
                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")))
                                          (rule "applyEqReverse" (formula "36") (term "1,2,1,1") (ifseqformula "1"))
                                          (rule "applyEqReverse" (formula "36") (term "1,2,1,0") (ifseqformula "1"))
                                          (rule "applyEqReverse" (formula "36") (term "0,1,1,1") (ifseqformula "1"))
                                          (rule "applyEqReverse" (formula "36") (term "0,1,1,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "sortsDisjointModuloNull" (formula "11") (term "0,0,0,0"))
                                          (rule "replace_known_right" (formula "11") (term "1,0,0,0,0") (ifseqformula "43"))
                                          (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "42")))
                                          (rule "simplifySelectOfStore" (formula "11"))
                                          (builtin "One Step Simplification" (formula "11"))
                                          (rule "simplifySelectOfStore" (formula "11"))
                                          (builtin "One Step Simplification" (formula "11"))
                                          (rule "simplifySelectOfCreate" (formula "11"))
                                          (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "42")))
                                          (rule "applyEqReverse" (formula "12") (term "0,1,0") (ifseqformula "11"))
                                          (rule "applyEqReverse" (formula "13") (term "0,1,1,1,0,0,1,0") (ifseqformula "11"))
                                          (rule "applyEqReverse" (formula "32") (term "0,1,0,0,0,1,0") (ifseqformula "11"))
                                          (rule "applyEqReverse" (formula "31") (term "1,2,0,0,0") (ifseqformula "11"))
                                          (rule "applyEqReverse" (formula "12") (term "0,0,0,0") (ifseqformula "11"))
                                          (rule "applyEqReverse" (formula "13") (term "1,1,0,1,0") (ifseqformula "11"))
                                          (rule "applyEqReverse" (formula "10") (term "1,1,0,1,0") (ifseqformula "11"))
                                          (rule "applyEqReverse" (formula "32") (term "1,2,0,0,0,1,0") (ifseqformula "11"))
                                          (rule "applyEqReverse" (formula "10") (term "0,1,1,1,0,0,1,0") (ifseqformula "11"))
                                          (rule "applyEqReverse" (formula "31") (term "0,1,0,0,0") (ifseqformula "11"))
                                          (rule "hideAuxiliaryEq" (formula "11"))
                                          (rule "nnf_imp2or" (formula "44") (term "0,1"))
                                          (rule "nnf_imp2or" (formula "7") (term "0"))
                                          (rule "nnf_imp2or" (formula "23") (term "0"))
                                          (rule "nnf_imp2or" (formula "8") (term "0"))
                                          (rule "hideAuxiliaryEqConcrete2" (formula "35"))
                                          (rule "nnf_imp2or" (formula "12") (term "0"))
                                          (rule "nnf_imp2or" (formula "31") (term "0"))
                                          (rule "nnf_imp2or" (formula "10") (term "0"))
                                          (rule "nnf_notAnd" (formula "7") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "7") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
                                          (rule "mul_literals" (formula "7") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "23") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                                          (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "23") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                                          (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "8") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "8") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                                          (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
                                          (rule "arrayLengthIsAShort" (formula "19") (term "0"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "true_left" (formula "19"))
                                          (rule "equalityToSeqGetAndSeqLenLeft" (formula "4") (inst "iv=iv"))
                                          (rule "andLeft" (formula "4"))
                                          (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
                                          (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "6"))
                                          (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "applyEq" (formula "4") (term "0,0,1,0") (ifseqformula "5"))
                                          (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "arrayLengthIsAShort" (formula "14") (term "0"))
                                          (builtin "One Step Simplification" (formula "14"))
                                          (rule "true_left" (formula "14"))
                                          (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "12") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                          (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                                          (rule "arrayLengthNotNegative" (formula "14") (term "0"))
                                          (rule "applyEq" (formula "14") (term "0") (ifseqformula "15"))
                                          (rule "qeq_literals" (formula "14"))
                                          (rule "true_left" (formula "14"))
                                          (rule "arrayLengthNotNegative" (formula "19") (term "0"))
                                          (rule "nnf_notAnd" (formula "31") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "31") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0"))
                                          (rule "mul_literals" (formula "31") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "31") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0"))
                                          (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "10") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "10") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                                          (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "43") (term "0,0,1"))
                                          (rule "inEqSimp_notGeq" (formula "43") (term "0,0,0,1"))
                                          (rule "times_zero_1" (formula "43") (term "1,0,0,0,0,0,1"))
                                          (rule "add_literals" (formula "43") (term "0,0,0,0,0,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "0,0,0,1"))
                                          (rule "mul_literals" (formula "43") (term "1,0,0,0,1"))
                                          (rule "inEqSimp_notLeq" (formula "43") (term "1,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "43") (term "1,0,0,1,0,0,1"))
                                          (rule "mul_literals" (formula "43") (term "0,1,0,0,1,0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "43") (term "0,0,1,0,0,1"))
                                          (rule "add_literals" (formula "43") (term "0,0,0,1,0,0,1"))
                                          (rule "add_zero_left" (formula "43") (term "0,0,1,0,0,1"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "1,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,0,1"))
                                          (rule "polySimp_elimOne" (formula "43") (term "1,1,0,0,1"))
                                          (rule "lenNonNegative" (formula "42") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "1"))
                                          (rule "equalityToSeqGetAndSeqLenLeft" (formula "6") (inst "iv=iv"))
                                          (rule "andLeft" (formula "6"))
                                          (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
                                          (rule "applyEq" (formula "7") (term "0,0,1,0") (ifseqformula "8"))
                                          (builtin "One Step Simplification" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "7"))
                                          (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "ifthenelse_split" (formula "3") (term "0"))
                                          (branch "messages.length >= 1 TRUE"
                                             (rule "replace_known_left" (formula "36") (term "0,1") (ifseqformula "4"))
                                             (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "4")))
                                             (rule "inEqSimp_subsumption1" (formula "21") (ifseqformula "3"))
                                             (rule "leq_literals" (formula "21") (term "0"))
                                             (builtin "One Step Simplification" (formula "21"))
                                             (rule "true_left" (formula "21"))
                                             (rule "equalityToSeqGetAndSeqLenRight" (formula "35") (inst "iv=iv"))
                                             (rule "lenOfSeqDef" (formula "35") (term "1,0"))
                                             (rule "polySimp_elimSub" (formula "35") (term "1,1,0"))
                                             (rule "times_zero_2" (formula "35") (term "1,1,1,0"))
                                             (rule "add_zero_right" (formula "35") (term "1,1,0"))
                                             (rule "getOfSeqDef" (formula "35") (term "0,1,0,1"))
                                             (rule "castDel" (formula "35") (term "2,0,1,0,1"))
                                             (rule "castDel" (formula "35") (term "1,0,1,0,1"))
                                             (rule "add_zero_right" (formula "35") (term "0,2,1,0,1,0,1"))
                                             (rule "eqSymm" (formula "35") (term "1,0,1"))
                                             (rule "polySimp_elimSub" (formula "35") (term "1,1,0,1,1,0,1"))
                                             (rule "mul_literals" (formula "35") (term "1,1,1,0,1,1,0,1"))
                                             (rule "add_zero_right" (formula "35") (term "1,1,0,1,1,0,1"))
                                             (rule "lenOfSeqDef" (formula "35") (term "0,0"))
                                             (rule "polySimp_elimSub" (formula "35") (term "1,0,0"))
                                             (rule "times_zero_2" (formula "35") (term "1,1,0,0"))
                                             (rule "add_zero_right" (formula "35") (term "1,0,0"))
                                             (builtin "One Step Simplification" (formula "35"))
                                             (rule "allRight" (formula "35") (inst "sk=iv_24"))
                                             (rule "impRight" (formula "35"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "replace_known_left" (formula "37") (term "0,0,1") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "37"))
                                             (rule "lenOfSeqDef" (formula "2") (term "1"))
                                             (rule "polySimp_elimSub" (formula "2") (term "1,1"))
                                             (rule "times_zero_2" (formula "2") (term "1,1,1"))
                                             (rule "add_zero_right" (formula "2") (term "1,1"))
                                             (rule "getOfSeqDef" (formula "37") (term "0"))
                                             (rule "castDel" (formula "37") (term "2,0"))
                                             (rule "castDel" (formula "37") (term "1,0"))
                                             (rule "add_zero_right" (formula "37") (term "0,2,1,0"))
                                             (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "37"))
                                             (rule "polySimp_elimSub" (formula "37") (term "1,0,0"))
                                             (rule "times_zero_2" (formula "37") (term "1,1,0,0"))
                                             (rule "add_zero_right" (formula "37") (term "1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1"))
                                             (rule "add_zero_right" (formula "2") (term "0,0,1"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1"))
                                             (rule "inEqSimp_ltToLeq" (formula "37") (term "0,1"))
                                             (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,0,1"))
                                             (rule "polySimp_addComm1" (formula "37") (term "0,0,1"))
                                             (rule "inEqSimp_ltToLeq" (formula "37") (term "0,0"))
                                             (rule "eqSymm" (formula "37"))
                                             (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,0,1"))
                                             (rule "eqSymm" (formula "37"))
                                             (rule "polySimp_addComm1" (formula "37") (term "0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "2"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "2") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "1"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "37") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "37") (term "0,0,1"))
                                             (rule "polySimp_elimOne" (formula "37") (term "0,0,1"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "37") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "37") (term "0,0,0"))
                                             (rule "polySimp_elimOne" (formula "37") (term "0,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                             (rule "polySimp_elimOne" (formula "2") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
                                             (rule "polySimp_elimOne" (formula "2") (term "0,0,0"))
                                             (rule "pullOutSelect" (formula "37") (term "1,0") (inst "selectSK=arr_405"))
                                             (rule "simplifySelectOfAnon" (formula "1"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "eqSymm" (formula "38"))
                                             (rule "dismissNonSelectedField" (formula "1") (term "0,0,1,0,0"))
                                             (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
                                             (rule "pullOutSelect" (formula "38") (term "1,0") (inst "selectSK=arr_406"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "32"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "replaceKnownSelect_taclet010011000001001_30" (formula "1") (term "2,0"))
                                             (rule "dismissNonSelectedField" (formula "1") (term "0,0,0,1,0,0"))
                                             (rule "pullOutSelect" (formula "2") (term "0,0,1,0,0") (inst "selectSK=java_lang_Object_created__116"))
                                             (rule "applyEq" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "2"))
                                             (rule "simplifySelectOfMemset" (formula "2"))
                                             (builtin "One Step Simplification" (formula "2"))
                                             (rule "simplifySelectOfStore" (formula "2"))
                                             (builtin "One Step Simplification" (formula "2"))
                                             (rule "simplifySelectOfStore" (formula "2"))
                                             (builtin "One Step Simplification" (formula "2"))
                                             (rule "simplifySelectOfStore" (formula "2"))
                                             (builtin "One Step Simplification" (formula "2"))
                                             (rule "simplifySelectOfCreate" (formula "2"))
                                             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "46")))
                                             (rule "castDel" (formula "2") (term "1,0"))
                                             (rule "eqSymm" (formula "2") (term "0,0"))
                                             (rule "pullOutSelect" (formula "3") (term "2,0") (inst "selectSK=arr_407"))
                                             (rule "simplifySelectOfMemset" (formula "3"))
                                             (builtin "One Step Simplification" (formula "3"))
                                             (rule "dismissNonSelectedField" (formula "3") (term "2,0"))
                                             (rule "elementOfArrayRangeConcrete" (formula "3") (term "0,0"))
                                             (rule "dismissNonSelectedField" (formula "3") (term "2,0"))
                                             (rule "dismissNonSelectedField" (formula "3") (term "2,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,0,0"))
                                             (rule "replace_known_left" (formula "3") (term "1,0,0,0") (ifseqformula "5"))
                                             (builtin "One Step Simplification" (formula "3"))
                                             (rule "inEqSimp_contradInEq1" (formula "3") (term "1,0,0") (ifseqformula "5"))
                                             (rule "qeq_literals" (formula "3") (term "0,1,0,0"))
                                             (builtin "One Step Simplification" (formula "3"))
                                             (rule "simplifySelectOfCreate" (formula "3"))
                                             (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "47")))
                                             (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                             (rule "hideAuxiliaryEq" (formula "3"))
                                             (rule "lenNonNegative" (formula "49") (term "1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "1"))
                                             (rule "lenNonNegative" (formula "50") (term "0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "1"))
                                             (rule "cut_direct" (formula "51") (term "0"))
                                             (branch "CUT: mConcat(SeqseqGet_0, arrConcat(1 + i_2, array2seq2d_1)).length = mConcat(SeqseqGet_0, array2seq_1).length TRUE"
                                                (builtin "One Step Simplification" (formula "52"))
                                                (rule "allRight" (formula "52") (inst "sk=iv_25"))
                                                (rule "orRight" (formula "52"))
                                                (rule "orRight" (formula "52"))
                                                (rule "inEqSimp_leqRight" (formula "52"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "inEqSimp_geqRight" (formula "53"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                (rule "applyEqRigid" (formula "1") (term "0,1,0") (ifseqformula "3"))
                                                (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "3"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                (rule "ifthenelse_split" (formula "17") (term "0"))
                                                (branch "msg_2.length >= 1 TRUE"
                                                   (rule "eqSymm" (formula "18"))
                                                   (rule "applyEq" (formula "20") (term "1,1,0,0") (ifseqformula "18"))
                                                   (rule "applyEqRigid" (formula "34") (term "1,1,0,0") (ifseqformula "18"))
                                                   (rule "applyEq" (formula "19") (term "1,1,0,0") (ifseqformula "18"))
                                                   (rule "applyEqRigid" (formula "33") (term "1") (ifseqformula "18"))
                                                   (rule "commute_or_2" (formula "24") (term "0"))
                                                   (rule "ifthenelse_split" (formula "35") (term "0"))
                                                   (branch "x_arr_2 = msg_2 TRUE"
                                                      (rule "applyEqReverse" (formula "37") (term "0,0") (ifseqformula "36"))
                                                      (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "hideAuxiliaryEq" (formula "36"))
                                                      (rule "applyEq" (formula "27") (term "0,0") (ifseqformula "35"))
                                                      (rule "applyEq" (formula "19") (term "1,0,0,0,0,1,0,1,0") (ifseqformula "35"))
                                                      (rule "applyEq" (formula "37") (term "1,0,0,0,0,0") (ifseqformula "35"))
                                                      (rule "applyEq" (formula "20") (term "1,0,0,0,0,0,0,0,1,0,1,0") (ifseqformula "35"))
                                                      (rule "applyEq" (formula "42") (term "0") (ifseqformula "35"))
                                                      (rule "eqSymm" (formula "42"))
                                                      (rule "applyEq" (formula "19") (term "0,1,0,0,0,1,0,1,0") (ifseqformula "35"))
                                                      (rule "applyEq" (formula "20") (term "1,0,0,0,0,1,0,1,0") (ifseqformula "35"))
                                                      (rule "applyEq" (formula "16") (term "1,0,0,0,0,0,0,0") (ifseqformula "35"))
                                                      (rule "applyEq" (formula "19") (term "1,0,0,0,0,0,0,0,1,0,1,0") (ifseqformula "35"))
                                                      (rule "applyEq" (formula "6") (term "1,0,0") (ifseqformula "35"))
                                                      (rule "applyEq" (formula "20") (term "1,0,0,0,0,0,0,1,0,1,0") (ifseqformula "35"))
                                                      (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "35"))
                                                      (rule "applyEq" (formula "19") (term "1,0,0,0,0,0,0,1,0,1,0") (ifseqformula "35"))
                                                      (rule "applyEq" (formula "20") (term "0,1,0,0,0,1,0,1,0") (ifseqformula "35"))
                                                      (rule "applyEq" (formula "19") (term "1,0,0,0,0,0,1,0,1,0") (ifseqformula "35"))
                                                      (rule "applyEq" (formula "19") (term "1,0,0,1,0,1,0") (ifseqformula "35"))
                                                      (rule "applyEq" (formula "16") (term "1,0,0,0,0,0,0,0,0") (ifseqformula "35"))
                                                      (rule "applyEq" (formula "37") (term "1,0,0,0,0,0,0,0,0") (ifseqformula "35"))
                                                      (rule "applyEq" (formula "16") (term "1,0,0,0,0,0,0") (ifseqformula "35"))
                                                      (rule "applyEq" (formula "37") (term "0,1,0,0,0,0") (ifseqformula "35"))
                                                      (rule "applyEq" (formula "37") (term "1,0,0,0,0,0,0") (ifseqformula "35"))
                                                      (rule "applyEq" (formula "37") (term "1,0,0,0,0,0,0,0") (ifseqformula "35"))
                                                      (rule "applyEq" (formula "50") (term "0") (ifseqformula "35"))
                                                      (rule "applyEq" (formula "49") (term "1,0") (ifseqformula "35"))
                                                      (rule "applyEq" (formula "16") (term "0,1,0,0,0,0") (ifseqformula "35"))
                                                      (rule "applyEq" (formula "20") (term "1,0,0,0,0,0,1,0,1,0") (ifseqformula "35"))
                                                      (rule "applyEq" (formula "16") (term "1,0,0,0,0,0") (ifseqformula "35"))
                                                      (rule "applyEq" (formula "37") (term "1,0,0,0") (ifseqformula "35"))
                                                      (rule "applyEq" (formula "16") (term "1,0,0,0") (ifseqformula "35"))
                                                      (rule "applyEq" (formula "20") (term "1,0,0,1,0,1,0") (ifseqformula "35"))
                                                      (rule "applyEqRigid" (formula "20") (term "1,1,1,0,0,1,0") (ifseqformula "26"))
                                                      (rule "add_literals" (formula "20") (term "1,1,0,0,1,0"))
                                                      (rule "eqSymm" (formula "20") (term "1,0"))
                                                      (rule "applyEq" (formula "17") (term "0") (ifseqformula "26"))
                                                      (rule "qeq_literals" (formula "17"))
                                                      (rule "closeFalse" (formula "17"))
                                                   )
                                                   (branch "x_arr_2 = msg_2 FALSE"
                                                      (rule "applyEqReverse" (formula "36") (term "0,0") (ifseqformula "35"))
                                                      (builtin "One Step Simplification" (formula "36"))
                                                      (rule "hideAuxiliaryEq" (formula "35"))
                                                      (rule "lenNonNegative" (formula "33") (term "0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "33"))
                                                      (rule "applyEqRigid" (formula "33") (term "0") (ifseqformula "34"))
                                                      (rule "inEqSimp_subsumption1" (formula "33") (ifseqformula "17"))
                                                      (rule "leq_literals" (formula "33") (term "0"))
                                                      (builtin "One Step Simplification" (formula "33"))
                                                      (rule "true_left" (formula "33"))
                                                      (rule "lenNonNegative" (formula "21") (term "1"))
                                                      (rule "inEqSimp_commuteLeq" (formula "21"))
                                                      (rule "commute_or_2" (formula "42") (term "0"))
                                                      (rule "commute_or_2" (formula "23") (term "0"))
                                                      (rule "ifthenelse_to_or_left" (formula "19") (term "1,0"))
                                                      (rule "eqSymm" (formula "19") (term "1,1,1,0"))
                                                      (rule "nnf_notAnd" (formula "19") (term "0,0,1,0"))
                                                      (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0,1,0"))
                                                      (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,1,0"))
                                                      (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,1,0"))
                                                      (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,1,0"))
                                                      (rule "add_zero_left" (formula "19") (term "0,0,1,0,0,1,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0,1,0"))
                                                      (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,1,0"))
                                                      (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,1,0"))
                                                      (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0,1,0"))
                                                      (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0,1,0"))
                                                      (rule "add_literals" (formula "19") (term "0,0,0,0,0,1,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0,1,0"))
                                                      (rule "mul_literals" (formula "19") (term "1,0,0,0,1,0"))
                                                      (rule "ifthenelse_to_or_left" (formula "35") (term "1,0"))
                                                      (rule "eqSymm" (formula "35") (term "1,1,1,0"))
                                                      (rule "nnf_notAnd" (formula "35") (term "0,0,1,0"))
                                                      (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,1,0"))
                                                      (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0,1,0"))
                                                      (rule "add_literals" (formula "35") (term "0,0,0,0,0,1,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,1,0"))
                                                      (rule "mul_literals" (formula "35") (term "1,0,0,0,1,0"))
                                                      (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,1,0"))
                                                      (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1,0"))
                                                      (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1,0"))
                                                      (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,1,0"))
                                                      (rule "add_zero_left" (formula "35") (term "0,0,1,0,0,1,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,1,0"))
                                                      (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,1,0"))
                                                      (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,1,0"))
                                                      (rule "ifthenelse_to_or_left" (formula "20") (term "1,0"))
                                                      (rule "eqSymm" (formula "20") (term "1,0,1,0"))
                                                      (rule "eqSymm" (formula "20") (term "1,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "20"))
                                                      (rule "nnf_notAnd" (formula "20") (term "0,0,1,0"))
                                                      (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0,1,0"))
                                                      (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,1,0"))
                                                      (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,1,0"))
                                                      (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,1,0"))
                                                      (rule "add_zero_left" (formula "20") (term "0,0,1,0,0,1,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0,1,0"))
                                                      (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,1,0"))
                                                      (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,1,0"))
                                                      (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,1,0"))
                                                      (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0,1,0"))
                                                      (rule "add_literals" (formula "20") (term "0,0,0,0,0,1,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,1,0"))
                                                      (rule "mul_literals" (formula "20") (term "1,0,0,0,1,0"))
                                                      (rule "nnf_notAnd" (formula "20") (term "0,1,1,1,0"))
                                                      (rule "inEqSimp_notGeq" (formula "20") (term "0,0,1,1,1,0"))
                                                      (rule "mul_literals" (formula "20") (term "1,0,0,0,0,1,1,1,0"))
                                                      (rule "add_literals" (formula "20") (term "0,0,0,0,1,1,1,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,1,1,1,0"))
                                                      (rule "mul_literals" (formula "20") (term "1,0,0,1,1,1,0"))
                                                      (rule "inEqSimp_notLeq" (formula "20") (term "1,0,1,1,1,0"))
                                                      (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,1,1,1,0"))
                                                      (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,1,1,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,1,1,1,0"))
                                                      (rule "add_literals" (formula "20") (term "0,0,0,1,0,1,1,1,0"))
                                                      (rule "add_zero_left" (formula "20") (term "0,0,1,0,1,1,1,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,1,1,1,0"))
                                                      (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,1,1,1,0"))
                                                      (rule "polySimp_elimOne" (formula "20") (term "1,1,0,1,1,1,0"))
                                                      (rule "ifthenelse_split" (formula "41") (term "1"))
                                                      (branch "result_0.length >= 1 TRUE"
                                                         (rule "replace_known_left" (formula "43") (term "0,1,1,0") (ifseqformula "41"))
                                                         (builtin "One Step Simplification" (formula "43"))
                                                         (rule "allLeft" (formula "32") (inst "t=i_2"))
                                                         (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "32") (term "1,0") (ifseqformula "26"))
                                                         (rule "qeq_literals" (formula "32") (term "0,1,0"))
                                                         (builtin "One Step Simplification" (formula "32"))
                                                         (rule "inEqSimp_contradInEq1" (formula "32") (term "1") (ifseqformula "14"))
                                                         (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1"))
                                                         (rule "add_literals" (formula "32") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "32") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "32") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "32") (term "0,1"))
                                                         (builtin "One Step Simplification" (formula "32"))
                                                         (rule "notLeft" (formula "32"))
                                                         (rule "seqGetAlphaCast" (formula "22") (term "0,0"))
                                                         (rule "castedGetAny" (formula "22") (term "0"))
                                                         (builtin "One Step Simplification" (formula "22"))
                                                         (rule "true_left" (formula "22"))
                                                         (rule "lenNonNegative" (formula "22") (term "0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "22"))
                                                         (rule "applyEqRigid" (formula "22") (term "0") (ifseqformula "23"))
                                                         (rule "ifthenelse_split" (formula "24") (term "0"))
                                                         (branch "messages[i_2].length >= 1 TRUE"
                                                            (rule "eqSymm" (formula "25"))
                                                            (rule "applyEq" (formula "26") (term "1,1,0") (ifseqformula "25"))
                                                            (rule "applyEq" (formula "21") (term "0") (ifseqformula "25"))
                                                            (rule "applyEq" (formula "23") (term "1,1,0") (ifseqformula "25"))
                                                            (rule "applyEq" (formula "22") (term "1") (ifseqformula "25"))
                                                            (rule "inEqSimp_subsumption1" (formula "21") (ifseqformula "24"))
                                                            (rule "leq_literals" (formula "21") (term "0"))
                                                            (builtin "One Step Simplification" (formula "21"))
                                                            (rule "true_left" (formula "21"))
                                                            (rule "commute_and" (formula "7") (term "0,0"))
                                                            (rule "commute_or" (formula "25") (term "0,0"))
                                                            (rule "commute_or" (formula "22") (term "0,0"))
                                                            (rule "arrayLengthNotNegative" (formula "42") (term "1,0,0,0"))
                                                            (rule "inEqSimp_subsumption1" (formula "42") (ifseqformula "23"))
                                                            (rule "leq_literals" (formula "42") (term "0"))
                                                            (builtin "One Step Simplification" (formula "42"))
                                                            (rule "true_left" (formula "42"))
                                                            (rule "arrayLengthIsAShort" (formula "42") (term "1,0,0,0"))
                                                            (builtin "One Step Simplification" (formula "42"))
                                                            (rule "true_left" (formula "42"))
                                                            (rule "lenNonNegative" (formula "42") (term "0"))
                                                            (rule "inEqSimp_commuteLeq" (formula "42"))
                                                            (rule "commute_or" (formula "19") (term "1,1,0"))
                                                            (rule "commute_or_2" (formula "19") (term "0,1,0"))
                                                            (rule "commute_or" (formula "35") (term "1,1,0"))
                                                            (rule "commute_or_2" (formula "35") (term "0,1,0"))
                                                            (rule "commute_or" (formula "44") (term "0,0"))
                                                            (rule "commute_or_2" (formula "20") (term "0,1,0"))
                                                            (rule "commute_or" (formula "20") (term "1,1,0"))
                                                            (rule "allLeft" (formula "32") (inst "t=iv_23"))
                                                            (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
                                                            (rule "inEqSimp_contradInEq1" (formula "32") (term "1") (ifseqformula "13"))
                                                            (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1"))
                                                            (rule "add_literals" (formula "32") (term "1,1,0,0,1"))
                                                            (rule "times_zero_1" (formula "32") (term "1,0,0,1"))
                                                            (rule "add_zero_right" (formula "32") (term "0,0,1"))
                                                            (rule "leq_literals" (formula "32") (term "0,1"))
                                                            (builtin "One Step Simplification" (formula "32"))
                                                            (rule "inEqSimp_contradInEq1" (formula "32") (term "1") (ifseqformula "11"))
                                                            (rule "qeq_literals" (formula "32") (term "0,1"))
                                                            (builtin "One Step Simplification" (formula "32"))
                                                            (rule "notLeft" (formula "32"))
                                                            (rule "replace_known_right" (formula "7") (term "0,1,0,0") (ifseqformula "45"))
                                                            (builtin "One Step Simplification" (formula "7"))
                                                            (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "45"))
                                                            (builtin "One Step Simplification" (formula "5"))
                                                            (rule "ifthenelse_negated" (formula "7") (term "0"))
                                                            (rule "ifthenelse_negated" (formula "5") (term "0"))
                                                            (rule "narrowSelectArrayType" (formula "7") (term "1,0") (ifseqformula "29") (ifseqformula "45"))
                                                            (rule "narrowSelectArrayType" (formula "7") (term "2,0") (ifseqformula "33") (ifseqformula "45"))
                                                            (rule "narrowSelectArrayType" (formula "5") (term "2,0") (ifseqformula "37") (ifseqformula "45"))
                                                            (rule "ifthenelse_split" (formula "9") (term "0"))
                                                            (branch "messages[iv_23].length >= 1 TRUE"
                                                               (rule "replace_known_left" (formula "51") (term "0,0") (ifseqformula "10"))
                                                               (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "10")))
                                                               (rule "commute_or" (formula "20") (term "0,0,1,0"))
                                                               (rule "commute_or" (formula "36") (term "0,0,1,0"))
                                                               (rule "commute_or" (formula "21") (term "0,0,1,0"))
                                                               (rule "commute_or_2" (formula "21") (term "0,1,1,0"))
                                                               (rule "ifthenelse_split" (formula "6") (term "0"))
                                                               (branch "messages[iv_23] = x_arr_2 TRUE"
                                                                  (rule "referencedObjectIsCreatedRightEQ" (formula "57") (ifseqformula "6") (ifseqformula "58"))
                                                                  (rule "close" (formula "57") (ifseqformula "31"))
                                                               )
                                                               (branch "messages[iv_23] = x_arr_2 FALSE"
                                                                  (rule "applyEqReverse" (formula "7") (term "0,0,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "5") (term "0,0,0,0") (ifseqformula "6"))
                                                                  (rule "hideAuxiliaryEq" (formula "6"))
                                                                  (rule "cnf_rightDist" (formula "19") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "19") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "19"))
                                                                  (rule "andLeft" (formula "19"))
                                                                  (rule "commute_or" (formula "20") (term "0"))
                                                                  (rule "shift_paren_or" (formula "19") (term "0"))
                                                                  (rule "commute_or_2" (formula "19") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "19"))
                                                                  (rule "commute_or" (formula "20") (term "1,1,0"))
                                                                  (rule "shift_paren_or" (formula "19") (term "0,0"))
                                                                  (rule "commute_or" (formula "19") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "19"))
                                                                  (rule "cnf_rightDist" (formula "36") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "20") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "20"))
                                                                  (rule "andLeft" (formula "20"))
                                                                  (rule "commute_or_2" (formula "20") (term "0"))
                                                                  (rule "shift_paren_or" (formula "21") (term "0"))
                                                                  (rule "commute_or_2" (formula "21") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "21") (term "0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "21") (term "1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "21") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "21") (term "1,0,1,0"))
                                                                  (rule "times_zero_1" (formula "21") (term "0,1,0"))
                                                                  (rule "leq_literals" (formula "21") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "21"))
                                                                  (rule "true_left" (formula "21"))
                                                                  (rule "shift_paren_or" (formula "20") (term "0,0"))
                                                                  (rule "cnf_rightDist" (formula "36") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "36"))
                                                                  (rule "andLeft" (formula "36"))
                                                                  (rule "commute_or" (formula "37") (term "0"))
                                                                  (rule "shift_paren_or" (formula "36") (term "0"))
                                                                  (rule "commute_or_2" (formula "36") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "36"))
                                                                  (rule "commute_or" (formula "20") (term "0,0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "20") (term "0,0"))
                                                                  (rule "add_zero_right" (formula "20") (term "1,1,0,0"))
                                                                  (rule "qeq_literals" (formula "20") (term "1,0,0"))
                                                                  (builtin "One Step Simplification" (formula "20"))
                                                                  (rule "true_left" (formula "20"))
                                                                  (rule "commute_or" (formula "36") (term "1,1,0"))
                                                                  (rule "shift_paren_or" (formula "35") (term "0,0"))
                                                                  (rule "commute_or" (formula "20") (term "0,0,1,1,0"))
                                                                  (rule "commute_or" (formula "35") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "35"))
                                                                  (rule "ifthenelse_to_or_left" (formula "25") (term "0,0,0"))
                                                                  (rule "eqSymm" (formula "25") (term "1,1,0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "25") (term "0,0,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0,0,0,0"))
                                                                  (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0,0,0,0"))
                                                                  (rule "add_zero_right" (formula "25") (term "0,0,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,0,0,0"))
                                                                  (rule "add_zero_left" (formula "25") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,0,0,0"))
                                                                  (rule "commute_or" (formula "25") (term "0,0"))
                                                                  (rule "commute_or_2" (formula "25") (term "0"))
                                                                  (rule "ifthenelse_to_or_left" (formula "22") (term "0,0,0"))
                                                                  (rule "eqSymm" (formula "22") (term "1,1,0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "22") (term "0,0,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "add_literals" (formula "22") (term "0,0,0,1,0,0,0,0,0"))
                                                                  (rule "add_zero_left" (formula "22") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0,0,0,0"))
                                                                  (rule "add_zero_right" (formula "22") (term "0,0,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0,0"))
                                                                  (rule "cnf_rightDist" (formula "36") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "36"))
                                                                  (rule "andLeft" (formula "36"))
                                                                  (rule "commute_or_2" (formula "36") (term "0"))
                                                                  (rule "commute_or" (formula "22") (term "0,0"))
                                                                  (rule "commute_or_2" (formula "22") (term "0"))
                                                                  (rule "ifthenelse_to_or_right" (formula "46") (term "0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "46") (term "0,0,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "46") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "46") (term "1,0,0,1,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "46") (term "0,1,0,0,1,0,0,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "46") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "add_literals" (formula "46") (term "0,0,0,1,0,0,0,0,0"))
                                                                  (rule "add_zero_left" (formula "46") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "46") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "46") (term "1,1,0,0,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "46") (term "1,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "46") (term "0,0,0,0,0,0"))
                                                                  (rule "times_zero_1" (formula "46") (term "1,0,0,0,0,0,0,0,0"))
                                                                  (rule "add_zero_right" (formula "46") (term "0,0,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "46") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "46") (term "1,0,0,0,0,0,0"))
                                                                  (rule "shift_paren_or" (formula "37") (term "0"))
                                                                  (rule "commute_or" (formula "25") (term "1,1,0"))
                                                                  (rule "commute_or_2" (formula "25") (term "0,1,0"))
                                                                  (rule "commute_or" (formula "46") (term "0,0"))
                                                                  (rule "commute_or_2" (formula "46") (term "0"))
                                                                  (rule "commute_or_2" (formula "37") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "37") (term "0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "37") (term "1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "37") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "37") (term "1,0,1,0"))
                                                                  (rule "times_zero_1" (formula "37") (term "0,1,0"))
                                                                  (rule "leq_literals" (formula "37") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "37"))
                                                                  (rule "true_left" (formula "37"))
                                                                  (rule "shift_paren_or" (formula "36") (term "0,0"))
                                                                  (rule "commute_or_2" (formula "22") (term "0,1,0"))
                                                                  (rule "commute_or" (formula "22") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "20") (term "1,1,0"))
                                                                  (rule "seqGetAlphaCast" (formula "61") (term "1"))
                                                                  (rule "castDel" (formula "1") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "seqGetAlphaCast" (formula "61") (term "0"))
                                                                  (rule "castDel" (formula "1") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "commute_or" (formula "45") (term "1,1,0"))
                                                                  (rule "commute_or_2" (formula "45") (term "0,1,0"))
                                                                  (rule "arrayLengthIsAShort" (formula "17") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "17"))
                                                                  (rule "true_left" (formula "17"))
                                                                  (rule "arrayLengthNotNegative" (formula "17") (term "0"))
                                                                  (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "18"))
                                                                  (rule "leq_literals" (formula "17") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "17"))
                                                                  (rule "true_left" (formula "17"))
                                                                  (rule "lenNonNegative" (formula "18") (term "0"))
                                                                  (rule "inEqSimp_commuteLeq" (formula "18"))
                                                                  (rule "applyEqRigid" (formula "18") (term "0") (ifseqformula "19"))
                                                                  (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "17"))
                                                                  (rule "leq_literals" (formula "18") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "18"))
                                                                  (rule "true_left" (formula "18"))
                                                                  (rule "commute_or" (formula "36") (term "0,0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "36") (term "0,0"))
                                                                  (rule "add_literals" (formula "36") (term "1,1,0,0"))
                                                                  (rule "qeq_literals" (formula "36") (term "1,0,0"))
                                                                  (builtin "One Step Simplification" (formula "36"))
                                                                  (rule "true_left" (formula "36"))
                                                                  (rule "commute_or" (formula "25") (term "0,0,1,0"))
                                                                  (rule "ifthenelse_to_or_left" (formula "20") (term "0,0,0,1,0"))
                                                                  (rule "eqSymm" (formula "20") (term "1,0,0,0,0,1,0"))
                                                                  (rule "eqSymm" (formula "20") (term "1,1,0,0,0,1,0"))
                                                                  (rule "nnf_notAnd" (formula "20") (term "0,0,0,0,0,1,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,0,0,0,1,0"))
                                                                  (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0,0,0,0,1,0"))
                                                                  (rule "add_zero_right" (formula "20") (term "0,0,0,0,0,0,0,0,1,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,0,0,0,1,0"))
                                                                  (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0,0,1,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0,0,0,0,1,0"))
                                                                  (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,0,0,0,1,0"))
                                                                  (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,0,0,0,1,0"))
                                                                  (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,0,0,0,1,0"))
                                                                  (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,0,0,0,1,0"))
                                                                  (rule "add_zero_left" (formula "20") (term "0,0,1,0,0,0,0,0,1,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0,0,0,0,1,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,0,0,1,0"))
                                                                  (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,0,0,1,0"))
                                                                  (rule "commute_or" (formula "22") (term "0,0,1,0"))
                                                                  (rule "commute_or_2" (formula "20") (term "0,1,1,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "20") (term "0,0,1,1,0"))
                                                                  (rule "add_zero_right" (formula "20") (term "1,1,0,0,1,1,0"))
                                                                  (rule "qeq_literals" (formula "20") (term "1,0,0,1,1,0"))
                                                                  (builtin "One Step Simplification" (formula "20"))
                                                                  (rule "commute_or" (formula "44") (term "0,0,1,0"))
                                                                  (rule "cnf_rightDist" (formula "25") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "22") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "44") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "25") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "25"))
                                                                  (rule "andLeft" (formula "25"))
                                                                  (rule "commute_or" (formula "26") (term "0"))
                                                                  (rule "shift_paren_or" (formula "25") (term "0"))
                                                                  (rule "commute_or_2" (formula "25") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "25"))
                                                                  (rule "commute_or" (formula "26") (term "1,1,0"))
                                                                  (rule "shift_paren_or" (formula "25") (term "0,0"))
                                                                  (rule "cnf_rightDist" (formula "22") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "22"))
                                                                  (rule "andLeft" (formula "22"))
                                                                  (rule "commute_or" (formula "23") (term "0"))
                                                                  (rule "shift_paren_or" (formula "22") (term "0"))
                                                                  (rule "commute_or_2" (formula "22") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "22"))
                                                                  (rule "commute_or" (formula "26") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "26"))
                                                                  (rule "cnf_rightDist" (formula "46") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "46"))
                                                                  (rule "andLeft" (formula "46"))
                                                                  (rule "commute_or" (formula "47") (term "0"))
                                                                  (rule "shift_paren_or" (formula "46") (term "0"))
                                                                  (rule "commute_or_2" (formula "46") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "46"))
                                                                  (rule "commute_or" (formula "23") (term "1,1,0"))
                                                                  (rule "commute_or" (formula "20") (term "0,0,1,0"))
                                                                  (rule "shift_paren_or" (formula "20") (term "1,1,0"))
                                                                  (rule "shift_paren_or" (formula "22") (term "0,0"))
                                                                  (rule "cnf_rightDist" (formula "27") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "27"))
                                                                  (rule "andLeft" (formula "27"))
                                                                  (rule "commute_or_2" (formula "27") (term "0"))
                                                                  (rule "shift_paren_or" (formula "28") (term "0"))
                                                                  (rule "commute_or_2" (formula "28") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "28") (term "0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "28") (term "1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "28") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "28") (term "1,0,1,0"))
                                                                  (rule "times_zero_1" (formula "28") (term "0,1,0"))
                                                                  (rule "leq_literals" (formula "28") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "28"))
                                                                  (rule "true_left" (formula "28"))
                                                                  (rule "arrayLengthNotNegative" (formula "43") (term "0"))
                                                                  (rule "inEqSimp_subsumption1" (formula "43") (ifseqformula "44"))
                                                                  (rule "leq_literals" (formula "43") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "43"))
                                                                  (rule "true_left" (formula "43"))
                                                                  (rule "arrayLengthIsAShort" (formula "43") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "43"))
                                                                  (rule "true_left" (formula "43"))
                                                                  (rule "commute_or" (formula "47") (term "1,1,0"))
                                                                  (rule "shift_paren_or" (formula "46") (term "0,0"))
                                                                  (rule "commute_or_2" (formula "20") (term "0,1,0"))
                                                                  (rule "commute_or" (formula "22") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "22"))
                                                                  (rule "ifthenelse_split" (formula "6") (term "0"))
                                                                  (branch "messages[iv_23].<created> = TRUE TRUE"
                                                                     (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "7"))
                                                                     (rule "applyEqReverse" (formula "55") (term "1") (ifseqformula "7"))
                                                                     (rule "hideAuxiliaryEq" (formula "7"))
                                                                     (rule "replace_known_left" (formula "5") (term "0,0,0") (ifseqformula "6"))
                                                                     (builtin "One Step Simplification" (formula "5"))
                                                                     (rule "applyEqReverse" (formula "54") (term "0") (ifseqformula "5"))
                                                                     (builtin "One Step Simplification" (formula "54"))
                                                                     (rule "closeTrue" (formula "54"))
                                                                  )
                                                                  (branch "messages[iv_23].<created> = TRUE FALSE"
                                                                     (rule "referencedObjectIsCreatedRight" (formula "48") (ifseqformula "50"))
                                                                     (rule "close" (formula "48") (ifseqformula "31"))
                                                                  )
                                                               )
                                                            )
                                                            (branch "messages[iv_23].length >= 1 FALSE"
                                                               (rule "inEqSimp_geqRight" (formula "45"))
                                                               (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                               (rule "add_literals" (formula "1") (term "0,0"))
                                                               (rule "add_zero_left" (formula "1") (term "0"))
                                                               (rule "inEqSimp_homoInEq1" (formula "10"))
                                                               (rule "times_zero_2" (formula "10") (term "1,0"))
                                                               (rule "add_zero_right" (formula "10") (term "0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "10"))
                                                               (rule "mul_literals" (formula "10") (term "1"))
                                                               (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "9"))
                                                               (rule "qeq_literals" (formula "10") (term "0"))
                                                               (builtin "One Step Simplification" (formula "10"))
                                                               (rule "closeFalse" (formula "10"))
                                                            )
                                                         )
                                                         (branch "messages[i_2].length >= 1 FALSE"
                                                            (rule "eqSymm" (formula "24"))
                                                            (rule "inEqSimp_geqRight" (formula "44"))
                                                            (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0"))
                                                            (rule "applyEqRigid" (formula "24") (term "1,1,0") (ifseqformula "25"))
                                                            (rule "applyEqRigid" (formula "26") (term "1,1,0") (ifseqformula "25"))
                                                            (rule "applyEq" (formula "22") (term "0") (ifseqformula "25"))
                                                            (rule "qeq_literals" (formula "22"))
                                                            (rule "true_left" (formula "22"))
                                                            (rule "applyEq" (formula "22") (term "1") (ifseqformula "24"))
                                                            (rule "commute_and" (formula "8") (term "0,0"))
                                                            (rule "commute_or" (formula "25") (term "0,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "25") (term "0"))
                                                            (rule "add_literals" (formula "25") (term "1,1,0"))
                                                            (rule "qeq_literals" (formula "25") (term "1,0"))
                                                            (builtin "One Step Simplification" (formula "25"))
                                                            (rule "true_left" (formula "25"))
                                                            (rule "commute_or" (formula "23") (term "0,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "23") (term "0"))
                                                            (rule "add_zero_right" (formula "23") (term "1,1,0"))
                                                            (rule "qeq_literals" (formula "23") (term "1,0"))
                                                            (builtin "One Step Simplification" (formula "23"))
                                                            (rule "true_left" (formula "23"))
                                                            (rule "lenNonNegative" (formula "40") (term "0"))
                                                            (rule "inEqSimp_commuteLeq" (formula "40"))
                                                            (rule "arrayLengthNotNegative" (formula "41") (term "1,0,0,0"))
                                                            (rule "inEqSimp_antiSymm" (formula "41") (ifseqformula "1"))
                                                            (rule "applyEq" (formula "43") (term "1,0,0,0") (ifseqformula "41"))
                                                            (rule "seqDef_lower_equals_upper" (formula "43") (term "0,0,0"))
                                                            (rule "applyEq" (formula "40") (term "1,0,0,0") (ifseqformula "41"))
                                                            (rule "seqDef_lower_equals_upper" (formula "40") (term "0,0,0"))
                                                            (rule "applyEq" (formula "1") (term "0") (ifseqformula "41"))
                                                            (rule "leq_literals" (formula "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "applyEq" (formula "41") (term "0") (ifseqformula "40"))
                                                            (rule "qeq_literals" (formula "41"))
                                                            (rule "true_left" (formula "41"))
                                                            (rule "applyEq" (formula "42") (term "1,0,0,0,1,0,0") (ifseqformula "40"))
                                                            (rule "seqDef_lower_equals_upper" (formula "42") (term "0,0,0,1,0,0"))
                                                            (rule "eqSymm" (formula "42") (term "1,0,0"))
                                                            (rule "applyEq" (formula "39") (term "0") (ifseqformula "41"))
                                                            (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "38"))
                                                            (rule "leq_literals" (formula "39") (term "0"))
                                                            (builtin "One Step Simplification" (formula "39"))
                                                            (rule "true_left" (formula "39"))
                                                            (rule "commute_or" (formula "19") (term "1,1,0"))
                                                            (rule "commute_or_2" (formula "19") (term "0,1,0"))
                                                            (rule "commute_or" (formula "32") (term "1,1,0"))
                                                            (rule "commute_or_2" (formula "32") (term "0,1,0"))
                                                            (rule "commute_or_2" (formula "20") (term "0,1,0"))
                                                            (rule "commute_or" (formula "20") (term "1,1,0"))
                                                            (rule "allLeft" (formula "29") (inst "t=iv_23"))
                                                            (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                                            (rule "inEqSimp_contradInEq1" (formula "29") (term "1,0") (ifseqformula "11"))
                                                            (rule "qeq_literals" (formula "29") (term "0,1,0"))
                                                            (builtin "One Step Simplification" (formula "29"))
                                                            (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "13"))
                                                            (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                                                            (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                                                            (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                                                            (rule "add_zero_right" (formula "29") (term "0,0,1"))
                                                            (rule "leq_literals" (formula "29") (term "0,1"))
                                                            (builtin "One Step Simplification" (formula "29"))
                                                            (rule "notLeft" (formula "29"))
                                                            (rule "replace_known_right" (formula "7") (term "0,1,0,0") (ifseqformula "42"))
                                                            (builtin "One Step Simplification" (formula "7"))
                                                            (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "42"))
                                                            (builtin "One Step Simplification" (formula "5"))
                                                            (rule "ifthenelse_negated" (formula "7") (term "0"))
                                                            (rule "ifthenelse_negated" (formula "5") (term "0"))
                                                            (rule "narrowSelectArrayType" (formula "7") (term "1,0") (ifseqformula "26") (ifseqformula "42"))
                                                            (rule "narrowSelectArrayType" (formula "7") (term "2,0") (ifseqformula "30") (ifseqformula "42"))
                                                            (rule "narrowSelectArrayType" (formula "5") (term "2,0") (ifseqformula "34") (ifseqformula "42"))
                                                            (rule "commute_or" (formula "41") (term "0,0"))
                                                            (rule "ifthenelse_split" (formula "9") (term "0"))
                                                            (branch "messages[iv_23].length >= 1 TRUE"
                                                               (rule "replace_known_left" (formula "48") (term "0,0") (ifseqformula "10"))
                                                               (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "10")))
                                                               (rule "ifthenelse_split" (formula "6") (term "0"))
                                                               (branch "messages[iv_23] = x_arr_2 TRUE"
                                                                  (rule "referencedObjectIsCreatedRightEQ" (formula "54") (ifseqformula "6") (ifseqformula "55"))
                                                                  (rule "close" (formula "54") (ifseqformula "28"))
                                                               )
                                                               (branch "messages[iv_23] = x_arr_2 FALSE"
                                                                  (rule "applyEqReverse" (formula "5") (term "0,0,0,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "7") (term "0,0,0") (ifseqformula "6"))
                                                                  (rule "hideAuxiliaryEq" (formula "6"))
                                                                  (rule "commute_or" (formula "19") (term "0,0,1,0"))
                                                                  (rule "commute_or" (formula "32") (term "0,0,1,0"))
                                                                  (rule "commute_or" (formula "20") (term "0,0,1,0"))
                                                                  (rule "commute_or_2" (formula "20") (term "0,1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "19") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "19") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "19"))
                                                                  (rule "andLeft" (formula "19"))
                                                                  (rule "commute_or" (formula "20") (term "0"))
                                                                  (rule "shift_paren_or" (formula "19") (term "0"))
                                                                  (rule "commute_or_2" (formula "19") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "19"))
                                                                  (rule "commute_or" (formula "20") (term "1,1,0"))
                                                                  (rule "shift_paren_or" (formula "19") (term "0,0"))
                                                                  (rule "commute_or" (formula "19") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "19"))
                                                                  (rule "cnf_rightDist" (formula "33") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "20") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "20"))
                                                                  (rule "andLeft" (formula "20"))
                                                                  (rule "commute_or_2" (formula "20") (term "0"))
                                                                  (rule "shift_paren_or" (formula "21") (term "0"))
                                                                  (rule "commute_or_2" (formula "21") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "21") (term "0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "21") (term "1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "21") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "21") (term "1,0,1,0"))
                                                                  (rule "times_zero_1" (formula "21") (term "0,1,0"))
                                                                  (rule "leq_literals" (formula "21") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "21"))
                                                                  (rule "true_left" (formula "21"))
                                                                  (rule "shift_paren_or" (formula "20") (term "0,0"))
                                                                  (rule "cnf_rightDist" (formula "33") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "33"))
                                                                  (rule "andLeft" (formula "33"))
                                                                  (rule "commute_or" (formula "34") (term "0"))
                                                                  (rule "shift_paren_or" (formula "33") (term "0"))
                                                                  (rule "commute_or_2" (formula "33") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "33"))
                                                                  (rule "commute_or" (formula "20") (term "0,0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "20") (term "0,0"))
                                                                  (rule "add_zero_right" (formula "20") (term "1,1,0,0"))
                                                                  (rule "qeq_literals" (formula "20") (term "1,0,0"))
                                                                  (builtin "One Step Simplification" (formula "20"))
                                                                  (rule "true_left" (formula "20"))
                                                                  (rule "commute_or" (formula "33") (term "1,1,0"))
                                                                  (rule "shift_paren_or" (formula "32") (term "0,0"))
                                                                  (rule "commute_or" (formula "20") (term "0,0,1,1,0"))
                                                                  (rule "commute_or" (formula "32") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "32"))
                                                                  (rule "cnf_rightDist" (formula "33") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "33"))
                                                                  (rule "andLeft" (formula "33"))
                                                                  (rule "commute_or_2" (formula "33") (term "0"))
                                                                  (rule "shift_paren_or" (formula "34") (term "0"))
                                                                  (rule "commute_or_2" (formula "34") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "34") (term "0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "34") (term "1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "34") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "34") (term "1,0,1,0"))
                                                                  (rule "times_zero_1" (formula "34") (term "0,1,0"))
                                                                  (rule "leq_literals" (formula "34") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "34"))
                                                                  (rule "true_left" (formula "34"))
                                                                  (rule "shift_paren_or" (formula "33") (term "0,0"))
                                                                  (rule "commute_or" (formula "33") (term "0,0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "33") (term "0,0"))
                                                                  (rule "add_literals" (formula "33") (term "1,1,0,0"))
                                                                  (rule "qeq_literals" (formula "33") (term "1,0,0"))
                                                                  (builtin "One Step Simplification" (formula "33"))
                                                                  (rule "true_left" (formula "33"))
                                                                  (rule "seqGetAlphaCast" (formula "57") (term "1"))
                                                                  (rule "castDel" (formula "1") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "seqGetAlphaCast" (formula "57") (term "0"))
                                                                  (rule "castDel" (formula "1") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "arrayLengthIsAShort" (formula "17") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "17"))
                                                                  (rule "true_left" (formula "17"))
                                                                  (rule "ifthenelse_to_or_left" (formula "41") (term "0,0,0"))
                                                                  (rule "eqSymm" (formula "41") (term "1,1,0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "41") (term "0,0,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "41") (term "0,0,0,0,0,0"))
                                                                  (rule "times_zero_1" (formula "41") (term "1,0,0,0,0,0,0,0,0"))
                                                                  (rule "add_zero_right" (formula "41") (term "0,0,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "41") (term "1,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "41") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "41") (term "1,0,0,1,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "41") (term "0,1,0,0,1,0,0,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "41") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "add_literals" (formula "41") (term "0,0,0,1,0,0,0,0,0"))
                                                                  (rule "add_zero_left" (formula "41") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "41") (term "1,1,0,0,0,0,0"))
                                                                  (rule "commute_or" (formula "41") (term "0,0"))
                                                                  (rule "commute_or_2" (formula "41") (term "0"))
                                                                  (rule "arrayLengthNotNegative" (formula "17") (term "0"))
                                                                  (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "18"))
                                                                  (rule "leq_literals" (formula "17") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "17"))
                                                                  (rule "true_left" (formula "17"))
                                                                  (rule "lenNonNegative" (formula "18") (term "0"))
                                                                  (rule "inEqSimp_commuteLeq" (formula "18"))
                                                                  (rule "applyEqRigid" (formula "18") (term "0") (ifseqformula "19"))
                                                                  (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "17"))
                                                                  (rule "leq_literals" (formula "18") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "18"))
                                                                  (rule "true_left" (formula "18"))
                                                                  (rule "cnf_rightDist" (formula "20") (term "1,1,0"))
                                                                  (rule "commute_or" (formula "41") (term "1,1,0"))
                                                                  (rule "commute_or_2" (formula "41") (term "0,1,0"))
                                                                  (rule "commute_or_2" (formula "20") (term "0,1,1,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "20") (term "0,0,1,1,0"))
                                                                  (rule "add_literals" (formula "20") (term "1,1,0,0,1,1,0"))
                                                                  (rule "qeq_literals" (formula "20") (term "1,0,0,1,1,0"))
                                                                  (builtin "One Step Simplification" (formula "20"))
                                                                  (rule "commute_or" (formula "41") (term "0,0,1,0"))
                                                                  (rule "shift_paren_or" (formula "20") (term "1,1,0"))
                                                                  (rule "commute_or" (formula "20") (term "0,1,1,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "20") (term "1,1,0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "20") (term "1,1,1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "20") (term "0,1,1,1,0"))
                                                                  (rule "add_literals" (formula "20") (term "1,0,1,1,1,0"))
                                                                  (rule "times_zero_1" (formula "20") (term "0,1,1,1,0"))
                                                                  (rule "leq_literals" (formula "20") (term "1,1,1,0"))
                                                                  (builtin "One Step Simplification" (formula "20"))
                                                                  (rule "shift_paren_or" (formula "20") (term "0"))
                                                                  (rule "commute_or_2" (formula "20") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "20"))
                                                                  (rule "shift_paren_or" (formula "20") (term "0,0"))
                                                                  (rule "commute_or" (formula "20") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "20"))
                                                                  (rule "cnf_rightDist" (formula "41") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "41") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "41"))
                                                                  (rule "andLeft" (formula "41"))
                                                                  (rule "commute_or" (formula "42") (term "0"))
                                                                  (rule "shift_paren_or" (formula "41") (term "0"))
                                                                  (rule "commute_or_2" (formula "41") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "41"))
                                                                  (rule "commute_or" (formula "42") (term "1,1,0"))
                                                                  (rule "shift_paren_or" (formula "41") (term "0,0"))
                                                                  (rule "commute_or" (formula "41") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "41"))
                                                                  (rule "cnf_rightDist" (formula "42") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "42"))
                                                                  (rule "andLeft" (formula "42"))
                                                                  (rule "commute_or_2" (formula "42") (term "0"))
                                                                  (rule "shift_paren_or" (formula "43") (term "0"))
                                                                  (rule "commute_or_2" (formula "43") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "43") (term "0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "43") (term "1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "43") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "43") (term "1,0,1,0"))
                                                                  (rule "times_zero_1" (formula "43") (term "0,1,0"))
                                                                  (rule "leq_literals" (formula "43") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "43"))
                                                                  (rule "true_left" (formula "43"))
                                                                  (rule "shift_paren_or" (formula "42") (term "0,0"))
                                                                  (rule "commute_or" (formula "42") (term "0,0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "42") (term "0,0"))
                                                                  (rule "add_literals" (formula "42") (term "1,1,0,0"))
                                                                  (rule "qeq_literals" (formula "42") (term "1,0,0"))
                                                                  (builtin "One Step Simplification" (formula "42"))
                                                                  (rule "true_left" (formula "42"))
                                                                  (rule "arrayLengthNotNegative" (formula "40") (term "1"))
                                                                  (rule "inEqSimp_subsumption1" (formula "40") (ifseqformula "38"))
                                                                  (rule "leq_literals" (formula "40") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "40"))
                                                                  (rule "true_left" (formula "40"))
                                                                  (rule "arrayLengthIsAShort" (formula "40") (term "1"))
                                                                  (builtin "One Step Simplification" (formula "40"))
                                                                  (rule "true_left" (formula "40"))
                                                                  (rule "ifthenelse_split" (formula "6") (term "0"))
                                                                  (branch "messages[iv_23].<created> = TRUE TRUE"
                                                                     (rule "applyEqReverse" (formula "49") (term "1") (ifseqformula "7"))
                                                                     (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "7"))
                                                                     (rule "hideAuxiliaryEq" (formula "7"))
                                                                     (rule "replace_known_left" (formula "5") (term "0,0,0") (ifseqformula "6"))
                                                                     (builtin "One Step Simplification" (formula "5"))
                                                                     (rule "applyEqReverse" (formula "48") (term "0") (ifseqformula "5"))
                                                                     (builtin "One Step Simplification" (formula "48"))
                                                                     (rule "closeTrue" (formula "48"))
                                                                  )
                                                                  (branch "messages[iv_23].<created> = TRUE FALSE"
                                                                     (rule "referencedObjectIsCreatedRight" (formula "42") (ifseqformula "44"))
                                                                     (rule "close" (formula "42") (ifseqformula "26"))
                                                                  )
                                                               )
                                                            )
                                                            (branch "messages[iv_23].length >= 1 FALSE"
                                                               (rule "inEqSimp_geqRight" (formula "42"))
                                                               (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                               (rule "add_literals" (formula "1") (term "0,0"))
                                                               (rule "add_zero_left" (formula "1") (term "0"))
                                                               (rule "inEqSimp_homoInEq1" (formula "10"))
                                                               (rule "times_zero_2" (formula "10") (term "1,0"))
                                                               (rule "add_zero_right" (formula "10") (term "0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "10"))
                                                               (rule "mul_literals" (formula "10") (term "1"))
                                                               (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "9"))
                                                               (rule "qeq_literals" (formula "10") (term "0"))
                                                               (builtin "One Step Simplification" (formula "10"))
                                                               (rule "closeFalse" (formula "10"))
                                                            )
                                                         )
                                                      )
                                                      (branch "result_0.length >= 1 FALSE"
                                                         (rule "replace_known_right" (formula "42") (term "0,1,1,0") (ifseqformula "43"))
                                                         (builtin "One Step Simplification" (formula "42"))
                                                         (rule "inEqSimp_geqRight" (formula "43"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "allLeft" (formula "33") (inst "t=i_2"))
                                                         (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "15"))
                                                         (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1"))
                                                         (rule "add_literals" (formula "33") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "33") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "33") (term "0,1"))
                                                         (builtin "One Step Simplification" (formula "33"))
                                                         (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "27"))
                                                         (rule "qeq_literals" (formula "33") (term "0,1"))
                                                         (builtin "One Step Simplification" (formula "33"))
                                                         (rule "notLeft" (formula "33"))
                                                         (rule "seqGetAlphaCast" (formula "23") (term "0,0"))
                                                         (rule "castedGetAny" (formula "23") (term "0"))
                                                         (builtin "One Step Simplification" (formula "23"))
                                                         (rule "true_left" (formula "23"))
                                                         (rule "lenNonNegative" (formula "23") (term "0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "23"))
                                                         (rule "applyEqRigid" (formula "23") (term "0") (ifseqformula "24"))
                                                         (rule "ifthenelse_split" (formula "25") (term "0"))
                                                         (branch "messages[i_2].length >= 1 TRUE"
                                                            (rule "eqSymm" (formula "26"))
                                                            (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "26"))
                                                            (rule "applyEq" (formula "22") (term "0") (ifseqformula "26"))
                                                            (rule "applyEq" (formula "24") (term "1,1,0") (ifseqformula "26"))
                                                            (rule "applyEq" (formula "23") (term "1") (ifseqformula "26"))
                                                            (rule "inEqSimp_subsumption1" (formula "22") (ifseqformula "25"))
                                                            (rule "leq_literals" (formula "22") (term "0"))
                                                            (builtin "One Step Simplification" (formula "22"))
                                                            (rule "true_left" (formula "22"))
                                                            (rule "commute_and" (formula "8") (term "0,0"))
                                                            (rule "commute_or" (formula "26") (term "0,0"))
                                                            (rule "commute_or" (formula "23") (term "0,0"))
                                                            (rule "lenNonNegative" (formula "42") (term "0"))
                                                            (rule "inEqSimp_commuteLeq" (formula "42"))
                                                            (rule "arrayLengthNotNegative" (formula "43") (term "1,0,0,0"))
                                                            (rule "inEqSimp_subsumption1" (formula "43") (ifseqformula "24"))
                                                            (rule "leq_literals" (formula "43") (term "0"))
                                                            (builtin "One Step Simplification" (formula "43"))
                                                            (rule "true_left" (formula "43"))
                                                            (rule "arrayLengthIsAShort" (formula "43") (term "1,0,0,0"))
                                                            (builtin "One Step Simplification" (formula "43"))
                                                            (rule "true_left" (formula "43"))
                                                            (rule "commute_or" (formula "20") (term "1,1,0"))
                                                            (rule "commute_or_2" (formula "20") (term "0,1,0"))
                                                            (rule "commute_or" (formula "36") (term "1,1,0"))
                                                            (rule "commute_or_2" (formula "36") (term "0,1,0"))
                                                            (rule "commute_or" (formula "44") (term "0,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "44") (term "0"))
                                                            (rule "add_zero_right" (formula "44") (term "1,1,0"))
                                                            (rule "qeq_literals" (formula "44") (term "1,0"))
                                                            (builtin "One Step Simplification" (formula "44"))
                                                            (rule "true_left" (formula "44"))
                                                            (rule "commute_or_2" (formula "21") (term "0,1,0"))
                                                            (rule "commute_or" (formula "21") (term "1,1,0"))
                                                            (rule "allLeft" (formula "33") (inst "t=iv_23"))
                                                            (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                                                            (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "14"))
                                                            (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1"))
                                                            (rule "add_literals" (formula "33") (term "1,1,0,0,1"))
                                                            (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
                                                            (rule "add_zero_right" (formula "33") (term "0,0,1"))
                                                            (rule "leq_literals" (formula "33") (term "0,1"))
                                                            (builtin "One Step Simplification" (formula "33"))
                                                            (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "12"))
                                                            (rule "qeq_literals" (formula "33") (term "0,1"))
                                                            (builtin "One Step Simplification" (formula "33"))
                                                            (rule "notLeft" (formula "33"))
                                                            (rule "replace_known_right" (formula "8") (term "0,1,0,0") (ifseqformula "44"))
                                                            (builtin "One Step Simplification" (formula "8"))
                                                            (rule "replace_known_right" (formula "6") (term "0,0,0,0") (ifseqformula "44"))
                                                            (builtin "One Step Simplification" (formula "6"))
                                                            (rule "ifthenelse_negated" (formula "8") (term "0"))
                                                            (rule "ifthenelse_negated" (formula "6") (term "0"))
                                                            (rule "narrowSelectArrayType" (formula "8") (term "2,0") (ifseqformula "34") (ifseqformula "44"))
                                                            (rule "narrowSelectArrayType" (formula "8") (term "1,0") (ifseqformula "30") (ifseqformula "44"))
                                                            (rule "narrowSelectArrayType" (formula "6") (term "2,0") (ifseqformula "38") (ifseqformula "44"))
                                                            (rule "ifthenelse_split" (formula "10") (term "0"))
                                                            (branch "messages[iv_23].length >= 1 TRUE"
                                                               (rule "replace_known_left" (formula "50") (term "0,1") (ifseqformula "11"))
                                                               (builtin "One Step Simplification" (formula "50") (ifInst ""  (formula "11")))
                                                               (rule "commute_or" (formula "21") (term "0,0,1,0"))
                                                               (rule "commute_or" (formula "37") (term "0,0,1,0"))
                                                               (rule "commute_or" (formula "22") (term "0,0,1,0"))
                                                               (rule "commute_or_2" (formula "22") (term "0,1,1,0"))
                                                               (rule "ifthenelse_split" (formula "7") (term "0"))
                                                               (branch "messages[iv_23] = x_arr_2 TRUE"
                                                                  (rule "referencedObjectIsCreatedRightEQ" (formula "56") (ifseqformula "7") (ifseqformula "57"))
                                                                  (rule "close" (formula "56") (ifseqformula "32"))
                                                               )
                                                               (branch "messages[iv_23] = x_arr_2 FALSE"
                                                                  (rule "applyEqReverse" (formula "8") (term "0,0,0") (ifseqformula "7"))
                                                                  (rule "applyEqReverse" (formula "6") (term "0,0,0,0") (ifseqformula "7"))
                                                                  (rule "hideAuxiliaryEq" (formula "7"))
                                                                  (rule "cnf_rightDist" (formula "20") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "36") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "20") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "20"))
                                                                  (rule "andLeft" (formula "20"))
                                                                  (rule "commute_or" (formula "21") (term "0"))
                                                                  (rule "shift_paren_or" (formula "20") (term "0"))
                                                                  (rule "commute_or_2" (formula "20") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "20"))
                                                                  (rule "commute_or" (formula "21") (term "1,1,0"))
                                                                  (rule "shift_paren_or" (formula "20") (term "0,0"))
                                                                  (rule "commute_or" (formula "20") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "20"))
                                                                  (rule "cnf_rightDist" (formula "37") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "37"))
                                                                  (rule "andLeft" (formula "37"))
                                                                  (rule "commute_or" (formula "38") (term "0"))
                                                                  (rule "shift_paren_or" (formula "37") (term "0"))
                                                                  (rule "commute_or_2" (formula "37") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "37"))
                                                                  (rule "commute_or" (formula "38") (term "1,1,0"))
                                                                  (rule "shift_paren_or" (formula "37") (term "0,0"))
                                                                  (rule "cnf_rightDist" (formula "21") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "21"))
                                                                  (rule "andLeft" (formula "21"))
                                                                  (rule "commute_or_2" (formula "21") (term "0"))
                                                                  (rule "shift_paren_or" (formula "22") (term "0"))
                                                                  (rule "commute_or_2" (formula "22") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "22") (term "1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "22") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "22") (term "1,0,1,0"))
                                                                  (rule "times_zero_1" (formula "22") (term "0,1,0"))
                                                                  (rule "leq_literals" (formula "22") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "22"))
                                                                  (rule "true_left" (formula "22"))
                                                                  (rule "commute_or" (formula "37") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "37"))
                                                                  (rule "shift_paren_or" (formula "21") (term "0,0"))
                                                                  (rule "cnf_rightDist" (formula "38") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "38"))
                                                                  (rule "andLeft" (formula "38"))
                                                                  (rule "commute_or_2" (formula "38") (term "0"))
                                                                  (rule "shift_paren_or" (formula "39") (term "0"))
                                                                  (rule "commute_or_2" (formula "39") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "39") (term "0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "39") (term "1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "39") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "39") (term "1,0,1,0"))
                                                                  (rule "times_zero_1" (formula "39") (term "0,1,0"))
                                                                  (rule "leq_literals" (formula "39") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "39"))
                                                                  (rule "true_left" (formula "39"))
                                                                  (rule "commute_or" (formula "22") (term "0,0,1,1,0"))
                                                                  (rule "commute_or" (formula "21") (term "0,0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "21") (term "0,0"))
                                                                  (rule "add_zero_right" (formula "21") (term "1,1,0,0"))
                                                                  (rule "qeq_literals" (formula "21") (term "1,0,0"))
                                                                  (builtin "One Step Simplification" (formula "21"))
                                                                  (rule "true_left" (formula "21"))
                                                                  (rule "shift_paren_or" (formula "37") (term "0,0"))
                                                                  (rule "ifthenelse_to_or_left" (formula "26") (term "0,0,0"))
                                                                  (rule "eqSymm" (formula "26") (term "1,1,0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "26") (term "0,0,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,0,0,0"))
                                                                  (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0,0,0,0"))
                                                                  (rule "add_zero_right" (formula "26") (term "0,0,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0,0,0"))
                                                                  (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,0,0"))
                                                                  (rule "ifthenelse_to_or_left" (formula "23") (term "0,0,0"))
                                                                  (rule "eqSymm" (formula "23") (term "1,1,0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "23") (term "0,0,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0,0,0,0"))
                                                                  (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0,0,0,0"))
                                                                  (rule "add_zero_right" (formula "23") (term "0,0,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,0,0,0"))
                                                                  (rule "add_zero_left" (formula "23") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,0,0,0"))
                                                                  (rule "commute_or" (formula "26") (term "0,0"))
                                                                  (rule "commute_or_2" (formula "26") (term "0"))
                                                                  (rule "commute_or" (formula "37") (term "0,0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "37") (term "0,0"))
                                                                  (rule "add_zero_right" (formula "37") (term "1,1,0,0"))
                                                                  (rule "qeq_literals" (formula "37") (term "1,0,0"))
                                                                  (builtin "One Step Simplification" (formula "37"))
                                                                  (rule "true_left" (formula "37"))
                                                                  (rule "commute_or" (formula "23") (term "0,0"))
                                                                  (rule "commute_or_2" (formula "23") (term "0"))
                                                                  (rule "seqGetAlphaCast" (formula "59") (term "1"))
                                                                  (rule "castDel" (formula "1") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "seqGetAlphaCast" (formula "59") (term "0"))
                                                                  (rule "castDel" (formula "1") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "commute_or" (formula "26") (term "1,1,0"))
                                                                  (rule "commute_or_2" (formula "26") (term "0,1,0"))
                                                                  (rule "arrayLengthNotNegative" (formula "18") (term "0"))
                                                                  (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "19"))
                                                                  (rule "leq_literals" (formula "18") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "18"))
                                                                  (rule "true_left" (formula "18"))
                                                                  (rule "arrayLengthIsAShort" (formula "18") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "18"))
                                                                  (rule "true_left" (formula "18"))
                                                                  (rule "cnf_rightDist" (formula "21") (term "1,1,0"))
                                                                  (rule "commute_or" (formula "23") (term "1,1,0"))
                                                                  (rule "commute_or_2" (formula "23") (term "0,1,0"))
                                                                  (rule "lenNonNegative" (formula "19") (term "0"))
                                                                  (rule "inEqSimp_commuteLeq" (formula "19"))
                                                                  (rule "applyEqRigid" (formula "19") (term "0") (ifseqformula "20"))
                                                                  (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "18"))
                                                                  (rule "leq_literals" (formula "19") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "19"))
                                                                  (rule "true_left" (formula "19"))
                                                                  (rule "ifthenelse_to_or_left" (formula "21") (term "0,0,0,1,0"))
                                                                  (rule "eqSymm" (formula "21") (term "1,0,0,0,0,1,0"))
                                                                  (rule "eqSymm" (formula "21") (term "1,1,0,0,0,1,0"))
                                                                  (rule "nnf_notAnd" (formula "21") (term "0,0,0,0,0,1,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,0,0,0,1,0"))
                                                                  (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0,0,0,0,1,0"))
                                                                  (rule "add_zero_right" (formula "21") (term "0,0,0,0,0,0,0,0,1,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0,0,0,1,0"))
                                                                  (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0,0,1,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,0,0,0,1,0"))
                                                                  (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,0,0,0,1,0"))
                                                                  (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,0,0,0,1,0"))
                                                                  (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,0,0,0,1,0"))
                                                                  (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,0,0,0,1,0"))
                                                                  (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,0,0,0,1,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,0,0,0,1,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,0,0,1,0"))
                                                                  (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,0,0,1,0"))
                                                                  (rule "commute_or" (formula "26") (term "0,0,1,0"))
                                                                  (rule "commute_or_2" (formula "21") (term "0,1,1,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "21") (term "0,0,1,1,0"))
                                                                  (rule "add_zero_right" (formula "21") (term "1,1,0,0,1,1,0"))
                                                                  (rule "qeq_literals" (formula "21") (term "1,0,0,1,1,0"))
                                                                  (builtin "One Step Simplification" (formula "21"))
                                                                  (rule "commute_or" (formula "23") (term "0,0,1,0"))
                                                                  (rule "cnf_rightDist" (formula "26") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "26") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "26"))
                                                                  (rule "andLeft" (formula "26"))
                                                                  (rule "commute_or" (formula "27") (term "0"))
                                                                  (rule "shift_paren_or" (formula "26") (term "0"))
                                                                  (rule "commute_or_2" (formula "26") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "26"))
                                                                  (rule "commute_or" (formula "27") (term "1,1,0"))
                                                                  (rule "shift_paren_or" (formula "26") (term "0,0"))
                                                                  (rule "commute_or" (formula "26") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "26"))
                                                                  (rule "cnf_rightDist" (formula "23") (term "1,1,0"))
                                                                  (rule "commute_or" (formula "21") (term "0,0,1,0"))
                                                                  (rule "commute_or_2" (formula "21") (term "0,1,0"))
                                                                  (rule "shift_paren_or" (formula "21") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "27") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "27"))
                                                                  (rule "andLeft" (formula "27"))
                                                                  (rule "commute_or_2" (formula "27") (term "0"))
                                                                  (rule "shift_paren_or" (formula "28") (term "0"))
                                                                  (rule "commute_or_2" (formula "28") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "28") (term "0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "28") (term "1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "28") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "28") (term "1,0,1,0"))
                                                                  (rule "times_zero_1" (formula "28") (term "0,1,0"))
                                                                  (rule "leq_literals" (formula "28") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "28"))
                                                                  (rule "true_left" (formula "28"))
                                                                  (rule "shift_paren_or" (formula "27") (term "0,0"))
                                                                  (rule "cnf_rightDist" (formula "23") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "23"))
                                                                  (rule "andLeft" (formula "23"))
                                                                  (rule "commute_or" (formula "24") (term "0"))
                                                                  (rule "shift_paren_or" (formula "23") (term "0"))
                                                                  (rule "commute_or_2" (formula "23") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "23"))
                                                                  (rule "commute_or" (formula "28") (term "0,0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "28") (term "0,0"))
                                                                  (rule "add_zero_right" (formula "28") (term "1,1,0,0"))
                                                                  (rule "qeq_literals" (formula "28") (term "1,0,0"))
                                                                  (builtin "One Step Simplification" (formula "28"))
                                                                  (rule "true_left" (formula "28"))
                                                                  (rule "commute_or" (formula "24") (term "1,1,0"))
                                                                  (rule "commute_or" (formula "21") (term "0,1,1,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "21") (term "1,1,0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "21") (term "1,1,1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "21") (term "0,1,1,1,0"))
                                                                  (rule "add_literals" (formula "21") (term "1,0,1,1,1,0"))
                                                                  (rule "times_zero_1" (formula "21") (term "0,1,1,1,0"))
                                                                  (rule "leq_literals" (formula "21") (term "1,1,1,0"))
                                                                  (builtin "One Step Simplification" (formula "21"))
                                                                  (rule "shift_paren_or" (formula "23") (term "0,0"))
                                                                  (rule "arrayLengthIsAShort" (formula "1") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "arrayLengthNotNegative" (formula "1") (term "0"))
                                                                  (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "2"))
                                                                  (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                                                                  (rule "leq_literals" (formula "3"))
                                                                  (rule "true_left" (formula "3"))
                                                                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                                                  (rule "qeq_literals" (formula "2"))
                                                                  (rule "true_left" (formula "2"))
                                                                  (rule "commute_or" (formula "23") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "23"))
                                                                  (rule "cnf_rightDist" (formula "24") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "24"))
                                                                  (rule "andLeft" (formula "24"))
                                                                  (rule "commute_or_2" (formula "24") (term "0"))
                                                                  (rule "shift_paren_or" (formula "25") (term "0"))
                                                                  (rule "commute_or_2" (formula "25") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "25") (term "0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "25") (term "1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "25") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "25") (term "1,0,1,0"))
                                                                  (rule "times_zero_1" (formula "25") (term "0,1,0"))
                                                                  (rule "leq_literals" (formula "25") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "25"))
                                                                  (rule "true_left" (formula "25"))
                                                                  (rule "ifthenelse_split" (formula "7") (term "0"))
                                                                  (branch "messages[iv_23].<created> = TRUE TRUE"
                                                                     (rule "applyEqReverse" (formula "52") (term "1") (ifseqformula "8"))
                                                                     (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "8"))
                                                                     (rule "hideAuxiliaryEq" (formula "8"))
                                                                     (rule "replace_known_left" (formula "6") (term "0,0,0") (ifseqformula "7"))
                                                                     (builtin "One Step Simplification" (formula "6"))
                                                                     (rule "applyEqReverse" (formula "51") (term "0") (ifseqformula "6"))
                                                                     (builtin "One Step Simplification" (formula "51"))
                                                                     (rule "closeTrue" (formula "51"))
                                                                  )
                                                                  (branch "messages[iv_23].<created> = TRUE FALSE"
                                                                     (rule "referencedObjectIsCreatedRight" (formula "45") (ifseqformula "47"))
                                                                     (rule "close" (formula "45") (ifseqformula "31"))
                                                                  )
                                                               )
                                                            )
                                                            (branch "messages[iv_23].length >= 1 FALSE"
                                                               (rule "inEqSimp_geqRight" (formula "44"))
                                                               (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                               (rule "add_literals" (formula "1") (term "0,0"))
                                                               (rule "add_zero_left" (formula "1") (term "0"))
                                                               (rule "inEqSimp_homoInEq1" (formula "11"))
                                                               (rule "times_zero_2" (formula "11") (term "1,0"))
                                                               (rule "add_zero_right" (formula "11") (term "0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "11"))
                                                               (rule "mul_literals" (formula "11") (term "1"))
                                                               (rule "inEqSimp_contradInEq1" (formula "11") (ifseqformula "10"))
                                                               (rule "qeq_literals" (formula "11") (term "0"))
                                                               (builtin "One Step Simplification" (formula "11"))
                                                               (rule "closeFalse" (formula "11"))
                                                            )
                                                         )
                                                         (branch "messages[i_2].length >= 1 FALSE"
                                                            (rule "eqSymm" (formula "25"))
                                                            (rule "inEqSimp_geqRight" (formula "44"))
                                                            (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0"))
                                                            (rule "applyEqRigid" (formula "23") (term "0") (ifseqformula "26"))
                                                            (rule "qeq_literals" (formula "23"))
                                                            (rule "true_left" (formula "23"))
                                                            (rule "applyEq" (formula "26") (term "1,1,0") (ifseqformula "25"))
                                                            (rule "applyEq" (formula "24") (term "1,1,0") (ifseqformula "25"))
                                                            (rule "applyEqRigid" (formula "23") (term "1") (ifseqformula "25"))
                                                            (rule "commute_and" (formula "9") (term "0,0"))
                                                            (rule "commute_or" (formula "26") (term "0,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "26") (term "0"))
                                                            (rule "add_zero_right" (formula "26") (term "1,1,0"))
                                                            (rule "qeq_literals" (formula "26") (term "1,0"))
                                                            (builtin "One Step Simplification" (formula "26"))
                                                            (rule "true_left" (formula "26"))
                                                            (rule "commute_or" (formula "24") (term "0,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "24") (term "0"))
                                                            (rule "add_zero_right" (formula "24") (term "1,1,0"))
                                                            (rule "qeq_literals" (formula "24") (term "1,0"))
                                                            (builtin "One Step Simplification" (formula "24"))
                                                            (rule "true_left" (formula "24"))
                                                            (rule "arrayLengthNotNegative" (formula "40") (term "1,0,0,0"))
                                                            (rule "inEqSimp_antiSymm" (formula "40") (ifseqformula "1"))
                                                            (rule "applyEq" (formula "42") (term "1,0,0,0") (ifseqformula "40"))
                                                            (rule "seqDef_lower_equals_upper" (formula "42") (term "0,0,0"))
                                                            (rule "applyEq" (formula "43") (term "1,0,0,0,1,0,0") (ifseqformula "40"))
                                                            (rule "seqDef_lower_equals_upper" (formula "43") (term "0,0,0,1,0,0"))
                                                            (rule "eqSymm" (formula "43") (term "1,0,0"))
                                                            (rule "applyEq" (formula "41") (term "0") (ifseqformula "40"))
                                                            (rule "qeq_literals" (formula "41"))
                                                            (rule "true_left" (formula "41"))
                                                            (rule "applyEq" (formula "1") (term "0") (ifseqformula "40"))
                                                            (rule "leq_literals" (formula "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "commute_or" (formula "20") (term "1,1,0"))
                                                            (rule "commute_or_2" (formula "20") (term "0,1,0"))
                                                            (rule "commute_or" (formula "33") (term "1,1,0"))
                                                            (rule "commute_or_2" (formula "33") (term "0,1,0"))
                                                            (rule "commute_or_2" (formula "21") (term "0,1,0"))
                                                            (rule "commute_or" (formula "21") (term "1,1,0"))
                                                            (rule "allLeft" (formula "30") (inst "t=iv_23"))
                                                            (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                                                            (rule "inEqSimp_contradInEq1" (formula "30") (term "1,0") (ifseqformula "12"))
                                                            (rule "qeq_literals" (formula "30") (term "0,1,0"))
                                                            (builtin "One Step Simplification" (formula "30"))
                                                            (rule "inEqSimp_contradInEq1" (formula "30") (term "1") (ifseqformula "14"))
                                                            (rule "inEqSimp_homoInEq1" (formula "30") (term "0,1"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,1"))
                                                            (rule "add_literals" (formula "30") (term "1,1,0,0,1"))
                                                            (rule "times_zero_1" (formula "30") (term "1,0,0,1"))
                                                            (rule "add_zero_right" (formula "30") (term "0,0,1"))
                                                            (rule "leq_literals" (formula "30") (term "0,1"))
                                                            (builtin "One Step Simplification" (formula "30"))
                                                            (rule "notLeft" (formula "30"))
                                                            (rule "replace_known_right" (formula "6") (term "0,0,0,0") (ifseqformula "42"))
                                                            (builtin "One Step Simplification" (formula "6"))
                                                            (rule "replace_known_right" (formula "8") (term "0,1,0,0") (ifseqformula "42"))
                                                            (builtin "One Step Simplification" (formula "8"))
                                                            (rule "ifthenelse_negated" (formula "6") (term "0"))
                                                            (rule "ifthenelse_negated" (formula "8") (term "0"))
                                                            (rule "narrowSelectArrayType" (formula "6") (term "2,0") (ifseqformula "35") (ifseqformula "42"))
                                                            (rule "narrowSelectArrayType" (formula "8") (term "1,0") (ifseqformula "27") (ifseqformula "42"))
                                                            (rule "narrowSelectArrayType" (formula "8") (term "2,0") (ifseqformula "31") (ifseqformula "42"))
                                                            (rule "commute_or" (formula "41") (term "0,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "41") (term "0"))
                                                            (rule "add_zero_right" (formula "41") (term "1,1,0"))
                                                            (rule "qeq_literals" (formula "41") (term "1,0"))
                                                            (builtin "One Step Simplification" (formula "41"))
                                                            (rule "true_left" (formula "41"))
                                                            (rule "ifthenelse_split" (formula "10") (term "0"))
                                                            (branch "messages[iv_23].length >= 1 TRUE"
                                                               (rule "replace_known_left" (formula "47") (term "0,1") (ifseqformula "11"))
                                                               (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "11")))
                                                               (rule "ifthenelse_split" (formula "7") (term "0"))
                                                               (branch "messages[iv_23] = x_arr_2 TRUE"
                                                                  (rule "referencedObjectIsCreatedRightEQ" (formula "53") (ifseqformula "7") (ifseqformula "54"))
                                                                  (rule "close" (formula "53") (ifseqformula "29"))
                                                               )
                                                               (branch "messages[iv_23] = x_arr_2 FALSE"
                                                                  (rule "applyEqReverse" (formula "8") (term "0,0,0") (ifseqformula "7"))
                                                                  (rule "applyEqReverse" (formula "6") (term "0,0,0,0") (ifseqformula "7"))
                                                                  (rule "hideAuxiliaryEq" (formula "7"))
                                                                  (rule "commute_or" (formula "20") (term "0,0,1,0"))
                                                                  (rule "commute_or" (formula "33") (term "0,0,1,0"))
                                                                  (rule "commute_or" (formula "21") (term "0,0,1,0"))
                                                                  (rule "commute_or_2" (formula "21") (term "0,1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "20") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "33") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "20") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "20"))
                                                                  (rule "andLeft" (formula "20"))
                                                                  (rule "commute_or" (formula "21") (term "0"))
                                                                  (rule "shift_paren_or" (formula "20") (term "0"))
                                                                  (rule "commute_or_2" (formula "20") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "20"))
                                                                  (rule "commute_or" (formula "21") (term "1,1,0"))
                                                                  (rule "shift_paren_or" (formula "20") (term "0,0"))
                                                                  (rule "commute_or" (formula "20") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "20"))
                                                                  (rule "cnf_rightDist" (formula "34") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "34"))
                                                                  (rule "andLeft" (formula "34"))
                                                                  (rule "commute_or" (formula "35") (term "0"))
                                                                  (rule "shift_paren_or" (formula "34") (term "0"))
                                                                  (rule "commute_or_2" (formula "34") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "34"))
                                                                  (rule "commute_or" (formula "35") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "21") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "21"))
                                                                  (rule "andLeft" (formula "21"))
                                                                  (rule "commute_or_2" (formula "21") (term "0"))
                                                                  (rule "shift_paren_or" (formula "22") (term "0"))
                                                                  (rule "commute_or_2" (formula "22") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "22") (term "1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "22") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "22") (term "1,0,1,0"))
                                                                  (rule "times_zero_1" (formula "22") (term "0,1,0"))
                                                                  (rule "leq_literals" (formula "22") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "22"))
                                                                  (rule "true_left" (formula "22"))
                                                                  (rule "shift_paren_or" (formula "34") (term "0,0"))
                                                                  (rule "shift_paren_or" (formula "21") (term "0,0"))
                                                                  (rule "cnf_rightDist" (formula "35") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "35"))
                                                                  (rule "andLeft" (formula "35"))
                                                                  (rule "commute_or_2" (formula "35") (term "0"))
                                                                  (rule "shift_paren_or" (formula "36") (term "0"))
                                                                  (rule "commute_or_2" (formula "36") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "36") (term "0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "36") (term "1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "36") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "36") (term "1,0,1,0"))
                                                                  (rule "times_zero_1" (formula "36") (term "0,1,0"))
                                                                  (rule "leq_literals" (formula "36") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "36"))
                                                                  (rule "true_left" (formula "36"))
                                                                  (rule "commute_or" (formula "34") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "34"))
                                                                  (rule "commute_or" (formula "21") (term "0,0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "21") (term "0,0"))
                                                                  (rule "add_zero_right" (formula "21") (term "1,1,0,0"))
                                                                  (rule "qeq_literals" (formula "21") (term "1,0,0"))
                                                                  (builtin "One Step Simplification" (formula "21"))
                                                                  (rule "true_left" (formula "21"))
                                                                  (rule "commute_or" (formula "21") (term "0,0,1,1,0"))
                                                                  (rule "shift_paren_or" (formula "34") (term "0,0"))
                                                                  (rule "commute_or" (formula "34") (term "0,0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "34") (term "0,0"))
                                                                  (rule "add_zero_right" (formula "34") (term "1,1,0,0"))
                                                                  (rule "qeq_literals" (formula "34") (term "1,0,0"))
                                                                  (builtin "One Step Simplification" (formula "34"))
                                                                  (rule "true_left" (formula "34"))
                                                                  (rule "seqGetAlphaCast" (formula "56") (term "1"))
                                                                  (rule "castDel" (formula "1") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "seqGetAlphaCast" (formula "56") (term "0"))
                                                                  (rule "castDel" (formula "1") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "arrayLengthIsAShort" (formula "18") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "18"))
                                                                  (rule "true_left" (formula "18"))
                                                                  (rule "arrayLengthNotNegative" (formula "18") (term "0"))
                                                                  (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "19"))
                                                                  (rule "leq_literals" (formula "18") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "18"))
                                                                  (rule "true_left" (formula "18"))
                                                                  (rule "lenNonNegative" (formula "19") (term "0"))
                                                                  (rule "inEqSimp_commuteLeq" (formula "19"))
                                                                  (rule "applyEqRigid" (formula "19") (term "0") (ifseqformula "20"))
                                                                  (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "18"))
                                                                  (rule "leq_literals" (formula "19") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "19"))
                                                                  (rule "true_left" (formula "19"))
                                                                  (rule "cnf_rightDist" (formula "21") (term "1,1,0"))
                                                                  (rule "commute_or_2" (formula "21") (term "0,1,1,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "21") (term "0,0,1,1,0"))
                                                                  (rule "add_zero_right" (formula "21") (term "1,1,0,0,1,1,0"))
                                                                  (rule "qeq_literals" (formula "21") (term "1,0,0,1,1,0"))
                                                                  (builtin "One Step Simplification" (formula "21"))
                                                                  (rule "shift_paren_or" (formula "21") (term "1,1,0"))
                                                                  (rule "commute_or" (formula "21") (term "0,1,1,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "21") (term "1,1,0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "21") (term "1,1,1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "21") (term "0,1,1,1,0"))
                                                                  (rule "add_literals" (formula "21") (term "1,0,1,1,1,0"))
                                                                  (rule "times_zero_1" (formula "21") (term "0,1,1,1,0"))
                                                                  (rule "leq_literals" (formula "21") (term "1,1,1,0"))
                                                                  (builtin "One Step Simplification" (formula "21"))
                                                                  (rule "shift_paren_or" (formula "21") (term "0"))
                                                                  (rule "commute_or_2" (formula "21") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "21"))
                                                                  (rule "shift_paren_or" (formula "21") (term "0,0"))
                                                                  (rule "commute_or" (formula "21") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "21"))
                                                                  (rule "arrayLengthIsAShort" (formula "1") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "arrayLengthNotNegative" (formula "1") (term "0"))
                                                                  (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "2"))
                                                                  (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                                                                  (rule "leq_literals" (formula "3"))
                                                                  (rule "true_left" (formula "3"))
                                                                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                                                  (rule "qeq_literals" (formula "2"))
                                                                  (rule "true_left" (formula "2"))
                                                                  (rule "ifthenelse_split" (formula "7") (term "0"))
                                                                  (branch "messages[iv_23].<created> = TRUE TRUE"
                                                                     (rule "applyEqReverse" (formula "48") (term "1") (ifseqformula "8"))
                                                                     (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "8"))
                                                                     (rule "hideAuxiliaryEq" (formula "8"))
                                                                     (rule "replace_known_left" (formula "6") (term "0,0,0") (ifseqformula "7"))
                                                                     (builtin "One Step Simplification" (formula "6"))
                                                                     (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "6"))
                                                                     (builtin "One Step Simplification" (formula "47"))
                                                                     (rule "closeTrue" (formula "47"))
                                                                  )
                                                                  (branch "messages[iv_23].<created> = TRUE FALSE"
                                                                     (rule "referencedObjectIsCreatedRight" (formula "41") (ifseqformula "43"))
                                                                     (rule "close" (formula "41") (ifseqformula "27"))
                                                                  )
                                                               )
                                                            )
                                                            (branch "messages[iv_23].length >= 1 FALSE"
                                                               (rule "inEqSimp_geqRight" (formula "41"))
                                                               (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                               (rule "add_literals" (formula "1") (term "0,0"))
                                                               (rule "add_zero_left" (formula "1") (term "0"))
                                                               (rule "inEqSimp_homoInEq1" (formula "11"))
                                                               (rule "mul_literals" (formula "11") (term "1,0"))
                                                               (rule "add_zero_right" (formula "11") (term "0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "11"))
                                                               (rule "mul_literals" (formula "11") (term "1"))
                                                               (rule "inEqSimp_contradInEq1" (formula "11") (ifseqformula "10"))
                                                               (rule "qeq_literals" (formula "11") (term "0"))
                                                               (builtin "One Step Simplification" (formula "11"))
                                                               (rule "closeFalse" (formula "11"))
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                                (branch "msg_2.length >= 1 FALSE"
                                                   (rule "eqSymm" (formula "17"))
                                                   (rule "inEqSimp_geqRight" (formula "42"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "applyEqRigid" (formula "19") (term "1,1,0,0") (ifseqformula "18"))
                                                   (rule "applyEq" (formula "34") (term "1,1,0,0") (ifseqformula "18"))
                                                   (rule "applyEqRigid" (formula "20") (term "1,1,0,0") (ifseqformula "18"))
                                                   (rule "applyEqRigid" (formula "33") (term "1") (ifseqformula "18"))
                                                   (rule "inEqSimp_or_tautInEq0" (formula "19") (term "0,0"))
                                                   (rule "add_zero_right" (formula "19") (term "1,1,0,0"))
                                                   (rule "qeq_literals" (formula "19") (term "1,0,0"))
                                                   (builtin "One Step Simplification" (formula "19"))
                                                   (rule "true_left" (formula "19"))
                                                   (rule "inEqSimp_or_tautInEq0" (formula "33") (term "0,0"))
                                                   (rule "add_zero_right" (formula "33") (term "1,1,0,0"))
                                                   (rule "qeq_literals" (formula "33") (term "1,0,0"))
                                                   (builtin "One Step Simplification" (formula "33"))
                                                   (rule "true_left" (formula "33"))
                                                   (rule "inEqSimp_or_tautInEq0" (formula "19") (term "0,0"))
                                                   (rule "add_zero_right" (formula "19") (term "1,1,0,0"))
                                                   (rule "qeq_literals" (formula "19") (term "1,0,0"))
                                                   (builtin "One Step Simplification" (formula "19"))
                                                   (rule "true_left" (formula "19"))
                                                   (rule "commute_or_2" (formula "22") (term "0"))
                                                   (rule "ifthenelse_split" (formula "32") (term "0"))
                                                   (branch "x_arr_2 = msg_2 TRUE"
                                                      (rule "applyEqReverse" (formula "34") (term "0,0") (ifseqformula "33"))
                                                      (builtin "One Step Simplification" (formula "34"))
                                                      (rule "true_left" (formula "34"))
                                                      (rule "hideAuxiliaryEq" (formula "33"))
                                                      (rule "applyEq" (formula "34") (term "1,0,0,0,0,0,0,0,0") (ifseqformula "32"))
                                                      (rule "applyEq" (formula "24") (term "0,0") (ifseqformula "32"))
                                                      (rule "applyEq" (formula "47") (term "0") (ifseqformula "32"))
                                                      (rule "applyEq" (formula "17") (term "1,0,0,0,0,0,0,0,0") (ifseqformula "32"))
                                                      (rule "applyEq" (formula "46") (term "1,0") (ifseqformula "32"))
                                                      (rule "applyEq" (formula "17") (term "1,0,0,0,0,0") (ifseqformula "32"))
                                                      (rule "applyEq" (formula "34") (term "1,0,0,0") (ifseqformula "32"))
                                                      (rule "applyEq" (formula "17") (term "1,0,0,0,0,0,0") (ifseqformula "32"))
                                                      (rule "applyEq" (formula "34") (term "1,0,0,0,0,0") (ifseqformula "32"))
                                                      (rule "applyEq" (formula "17") (term "0,1,0,0,0,0") (ifseqformula "32"))
                                                      (rule "applyEq" (formula "34") (term "1,0,0,0,0,0,0,0") (ifseqformula "32"))
                                                      (rule "applyEq" (formula "25") (term "0,0") (ifseqformula "32"))
                                                      (rule "applyEq" (formula "34") (term "1,0,0,0,0,0,0") (ifseqformula "32"))
                                                      (rule "applyEq" (formula "17") (term "1,0,0,0,0,0,0,0") (ifseqformula "32"))
                                                      (rule "applyEq" (formula "17") (term "1,0,0,0") (ifseqformula "32"))
                                                      (rule "applyEq" (formula "39") (term "0") (ifseqformula "32"))
                                                      (rule "eqSymm" (formula "39"))
                                                      (rule "applyEq" (formula "34") (term "0,1,0,0,0,0") (ifseqformula "32"))
                                                      (rule "applyEq" (formula "7") (term "1,0,0") (ifseqformula "32"))
                                                      (rule "applyEq" (formula "1") (term "0") (ifseqformula "24"))
                                                      (rule "leq_literals" (formula "1"))
                                                      (rule "true_left" (formula "1"))
                                                      (rule "lenNonNegative" (formula "30") (term "0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "30"))
                                                      (rule "applyEq" (formula "30") (term "0") (ifseqformula "31"))
                                                      (rule "qeq_literals" (formula "30"))
                                                      (rule "true_left" (formula "30"))
                                                      (rule "lenNonNegative" (formula "18") (term "1"))
                                                      (rule "inEqSimp_commuteLeq" (formula "18"))
                                                      (rule "commute_or_2" (formula "38") (term "0"))
                                                      (rule "commute_or_2" (formula "20") (term "0"))
                                                      (rule "ifthenelse_split" (formula "37") (term "1"))
                                                      (branch "result_0.length >= 1 TRUE"
                                                         (rule "replace_known_left" (formula "39") (term "0,1,1,0") (ifseqformula "37"))
                                                         (builtin "One Step Simplification" (formula "39"))
                                                         (rule "allLeft" (formula "29") (inst "t=i_2"))
                                                         (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "29") (term "1,0") (ifseqformula "23"))
                                                         (rule "qeq_literals" (formula "29") (term "0,1,0"))
                                                         (builtin "One Step Simplification" (formula "29"))
                                                         (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "14"))
                                                         (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                                                         (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                                                         (rule "add_zero_right" (formula "29") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "29") (term "0,1"))
                                                         (builtin "One Step Simplification" (formula "29"))
                                                         (rule "notLeft" (formula "29"))
                                                         (rule "seqGetAlphaCast" (formula "19") (term "0,0"))
                                                         (rule "castedGetAny" (formula "19") (term "0"))
                                                         (builtin "One Step Simplification" (formula "19"))
                                                         (rule "true_left" (formula "19"))
                                                         (rule "lenNonNegative" (formula "19") (term "0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "19"))
                                                         (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                                                         (rule "ifthenelse_split" (formula "21") (term "0"))
                                                         (branch "messages[i_2].length >= 1 TRUE"
                                                            (rule "eqSymm" (formula "22"))
                                                            (rule "applyEq" (formula "20") (term "1,1,0") (ifseqformula "22"))
                                                            (rule "applyEq" (formula "18") (term "0") (ifseqformula "22"))
                                                            (rule "applyEq" (formula "23") (term "1,1,0") (ifseqformula "22"))
                                                            (rule "applyEq" (formula "19") (term "1") (ifseqformula "22"))
                                                            (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "21"))
                                                            (rule "leq_literals" (formula "18") (term "0"))
                                                            (builtin "One Step Simplification" (formula "18"))
                                                            (rule "true_left" (formula "18"))
                                                            (rule "commute_and" (formula "7") (term "0,0"))
                                                            (rule "commute_or" (formula "22") (term "0,0"))
                                                            (rule "lenNonNegative" (formula "38") (term "0"))
                                                            (rule "inEqSimp_commuteLeq" (formula "38"))
                                                            (rule "arrayLengthIsAShort" (formula "39") (term "1,0,0,0"))
                                                            (builtin "One Step Simplification" (formula "39"))
                                                            (rule "true_left" (formula "39"))
                                                            (rule "arrayLengthNotNegative" (formula "39") (term "1,0,0,0"))
                                                            (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "20"))
                                                            (rule "leq_literals" (formula "39") (term "0"))
                                                            (builtin "One Step Simplification" (formula "39"))
                                                            (rule "true_left" (formula "39"))
                                                            (rule "commute_or" (formula "19") (term "0,0"))
                                                            (rule "commute_or" (formula "40") (term "0,0"))
                                                            (rule "allLeft" (formula "29") (inst "t=iv_23"))
                                                            (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                                            (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "13"))
                                                            (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                                                            (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                                                            (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                                                            (rule "add_literals" (formula "29") (term "0,0,1"))
                                                            (rule "leq_literals" (formula "29") (term "0,1"))
                                                            (builtin "One Step Simplification" (formula "29"))
                                                            (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "11"))
                                                            (rule "qeq_literals" (formula "29") (term "0,1"))
                                                            (builtin "One Step Simplification" (formula "29"))
                                                            (rule "notLeft" (formula "29"))
                                                            (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "41"))
                                                            (builtin "One Step Simplification" (formula "5"))
                                                            (rule "replace_known_right" (formula "7") (term "0,1,0,0") (ifseqformula "41"))
                                                            (builtin "One Step Simplification" (formula "7"))
                                                            (rule "ifthenelse_negated" (formula "5") (term "0"))
                                                            (rule "ifthenelse_negated" (formula "7") (term "0"))
                                                            (rule "narrowSelectArrayType" (formula "5") (term "2,0") (ifseqformula "33") (ifseqformula "41"))
                                                            (rule "narrowSelectArrayType" (formula "7") (term "1,0") (ifseqformula "26") (ifseqformula "41"))
                                                            (rule "narrowSelectArrayType" (formula "7") (term "2,0") (ifseqformula "30") (ifseqformula "41"))
                                                            (rule "ifthenelse_split" (formula "9") (term "0"))
                                                            (branch "messages[iv_23].length >= 1 TRUE"
                                                               (rule "replace_known_left" (formula "46") (term "0,1") (ifseqformula "10"))
                                                               (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "10")))
                                                               (rule "ifthenelse_to_or_left" (formula "23") (term "0,0,0"))
                                                               (rule "eqSymm" (formula "23") (term "1,1,0,0,0"))
                                                               (rule "nnf_notAnd" (formula "23") (term "0,0,0,0,0"))
                                                               (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0,0,0,0"))
                                                               (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0,0,0,0"))
                                                               (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,0,0,0"))
                                                               (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,0,0,0"))
                                                               (rule "add_zero_left" (formula "23") (term "0,0,1,0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0,0,0,0"))
                                                               (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,0,0,0"))
                                                               (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,0,0,0"))
                                                               (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0,0,0,0"))
                                                               (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0,0,0,0"))
                                                               (rule "add_zero_right" (formula "23") (term "0,0,0,0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0,0"))
                                                               (rule "commute_or" (formula "23") (term "0,0"))
                                                               (rule "commute_or_2" (formula "23") (term "0"))
                                                               (rule "commute_or_2" (formula "23") (term "0,1,0"))
                                                               (rule "commute_or" (formula "23") (term "1,1,0"))
                                                               (rule "commute_or" (formula "23") (term "0,0,1,0"))
                                                               (rule "cnf_rightDist" (formula "23") (term "1,1,0"))
                                                               (rule "cnf_rightDist" (formula "23") (term "0"))
                                                               (rule "distr_forallAnd" (formula "23"))
                                                               (rule "andLeft" (formula "23"))
                                                               (rule "commute_or" (formula "24") (term "0"))
                                                               (rule "shift_paren_or" (formula "23") (term "0"))
                                                               (rule "commute_or_2" (formula "23") (term "0,0"))
                                                               (builtin "One Step Simplification" (formula "23"))
                                                               (rule "commute_or" (formula "24") (term "1,1,0"))
                                                               (rule "shift_paren_or" (formula "23") (term "0,0"))
                                                               (rule "commute_or" (formula "23") (term "0,0,0"))
                                                               (builtin "One Step Simplification" (formula "23"))
                                                               (rule "cnf_rightDist" (formula "24") (term "0"))
                                                               (rule "distr_forallAnd" (formula "24"))
                                                               (rule "andLeft" (formula "24"))
                                                               (rule "commute_or_2" (formula "24") (term "0"))
                                                               (rule "shift_paren_or" (formula "25") (term "0"))
                                                               (rule "commute_or_2" (formula "25") (term "0,0"))
                                                               (rule "inEqSimp_or_tautInEq1" (formula "25") (term "0"))
                                                               (rule "inEqSimp_homoInEq1" (formula "25") (term "1,0"))
                                                               (rule "polySimp_pullOutFactor1" (formula "25") (term "0,1,0"))
                                                               (rule "add_literals" (formula "25") (term "1,0,1,0"))
                                                               (rule "times_zero_1" (formula "25") (term "0,1,0"))
                                                               (rule "leq_literals" (formula "25") (term "1,0"))
                                                               (builtin "One Step Simplification" (formula "25"))
                                                               (rule "true_left" (formula "25"))
                                                               (rule "shift_paren_or" (formula "24") (term "0,0"))
                                                               (rule "commute_or" (formula "24") (term "0,0,0"))
                                                               (rule "inEqSimp_or_tautInEq1" (formula "24") (term "0,0"))
                                                               (rule "add_literals" (formula "24") (term "1,1,0,0"))
                                                               (rule "qeq_literals" (formula "24") (term "1,0,0"))
                                                               (builtin "One Step Simplification" (formula "24"))
                                                               (rule "true_left" (formula "24"))
                                                               (rule "ifthenelse_to_or_left" (formula "20") (term "0,0,0"))
                                                               (rule "eqSymm" (formula "20") (term "1,1,0,0,0"))
                                                               (rule "nnf_notAnd" (formula "20") (term "0,0,0,0,0"))
                                                               (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0,0,0,0"))
                                                               (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,0,0,0"))
                                                               (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,0,0,0"))
                                                               (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,0,0,0"))
                                                               (rule "add_zero_left" (formula "20") (term "0,0,1,0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0,0,0,0"))
                                                               (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,0,0"))
                                                               (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,0,0"))
                                                               (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,0,0,0"))
                                                               (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0,0,0,0"))
                                                               (rule "add_zero_right" (formula "20") (term "0,0,0,0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0,0"))
                                                               (rule "commute_or" (formula "20") (term "0,0"))
                                                               (rule "commute_or_2" (formula "20") (term "0"))
                                                               (rule "ifthenelse_to_or_right" (formula "41") (term "0,0,0"))
                                                               (rule "nnf_notAnd" (formula "41") (term "0,0,0,0,0"))
                                                               (rule "inEqSimp_notGeq" (formula "41") (term "0,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "41") (term "1,0,0,0,0,0,0,0,0"))
                                                               (rule "add_zero_right" (formula "41") (term "0,0,0,0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "0,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "41") (term "1,0,0,0,0,0,0"))
                                                               (rule "inEqSimp_notLeq" (formula "41") (term "1,0,0,0,0,0"))
                                                               (rule "polySimp_rightDist" (formula "41") (term "1,0,0,1,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "41") (term "0,1,0,0,1,0,0,0,0,0"))
                                                               (rule "polySimp_addAssoc" (formula "41") (term "0,0,1,0,0,0,0,0"))
                                                               (rule "add_literals" (formula "41") (term "0,0,0,1,0,0,0,0,0"))
                                                               (rule "add_zero_left" (formula "41") (term "0,0,1,0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "1,0,0,0,0,0"))
                                                               (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0,0,0,0"))
                                                               (rule "polySimp_elimOne" (formula "41") (term "1,1,0,0,0,0,0"))
                                                               (rule "commute_or" (formula "41") (term "0,0"))
                                                               (rule "commute_or_2" (formula "41") (term "0"))
                                                               (rule "commute_or_2" (formula "20") (term "0,1,0"))
                                                               (rule "commute_or" (formula "20") (term "1,1,0"))
                                                               (rule "commute_or_2" (formula "41") (term "0,1,0"))
                                                               (rule "commute_or" (formula "41") (term "1,1,0"))
                                                               (rule "commute_or" (formula "20") (term "0,0,1,0"))
                                                               (rule "commute_or" (formula "41") (term "0,0,1,0"))
                                                               (rule "ifthenelse_split" (formula "6") (term "0"))
                                                               (branch "messages[iv_23] = msg_2 TRUE"
                                                                  (rule "referencedObjectIsCreatedRightEQ" (formula "50") (ifseqformula "6") (ifseqformula "51"))
                                                                  (rule "close" (formula "50") (ifseqformula "28"))
                                                               )
                                                               (branch "messages[iv_23] = msg_2 FALSE"
                                                                  (rule "applyEqReverse" (formula "5") (term "0,0,0,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "7") (term "0,0,0") (ifseqformula "6"))
                                                                  (rule "hideAuxiliaryEq" (formula "6"))
                                                                  (rule "seqGetAlphaCast" (formula "53") (term "1"))
                                                                  (rule "castDel" (formula "1") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "seqGetAlphaCast" (formula "53") (term "0"))
                                                                  (rule "castDel" (formula "1") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "cnf_rightDist" (formula "19") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "19") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "19"))
                                                                  (rule "andLeft" (formula "19"))
                                                                  (rule "commute_or" (formula "20") (term "0"))
                                                                  (rule "shift_paren_or" (formula "19") (term "0"))
                                                                  (rule "commute_or_2" (formula "19") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "19"))
                                                                  (rule "commute_or" (formula "20") (term "1,1,0"))
                                                                  (rule "shift_paren_or" (formula "19") (term "0,0"))
                                                                  (rule "commute_or" (formula "19") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "19"))
                                                                  (rule "cnf_rightDist" (formula "20") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "20"))
                                                                  (rule "andLeft" (formula "20"))
                                                                  (rule "commute_or_2" (formula "20") (term "0"))
                                                                  (rule "shift_paren_or" (formula "21") (term "0"))
                                                                  (rule "commute_or_2" (formula "21") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "21") (term "0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "21") (term "1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "21") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "21") (term "1,0,1,0"))
                                                                  (rule "times_zero_1" (formula "21") (term "0,1,0"))
                                                                  (rule "leq_literals" (formula "21") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "21"))
                                                                  (rule "true_left" (formula "21"))
                                                                  (rule "shift_paren_or" (formula "20") (term "0,0"))
                                                                  (rule "commute_or" (formula "20") (term "0,0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "20") (term "0,0"))
                                                                  (rule "add_literals" (formula "20") (term "1,1,0,0"))
                                                                  (rule "qeq_literals" (formula "20") (term "1,0,0"))
                                                                  (builtin "One Step Simplification" (formula "20"))
                                                                  (rule "true_left" (formula "20"))
                                                                  (rule "cnf_rightDist" (formula "40") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "40") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "40"))
                                                                  (rule "andLeft" (formula "40"))
                                                                  (rule "commute_or" (formula "41") (term "0"))
                                                                  (rule "shift_paren_or" (formula "40") (term "0"))
                                                                  (rule "commute_or_2" (formula "40") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "40"))
                                                                  (rule "commute_or" (formula "41") (term "1,1,0"))
                                                                  (rule "shift_paren_or" (formula "40") (term "0,0"))
                                                                  (rule "commute_or" (formula "40") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "40"))
                                                                  (rule "lenNonNegative" (formula "17") (term "0"))
                                                                  (rule "inEqSimp_commuteLeq" (formula "17"))
                                                                  (rule "applyEqRigid" (formula "17") (term "0") (ifseqformula "18"))
                                                                  (rule "qeq_literals" (formula "17"))
                                                                  (rule "true_left" (formula "17"))
                                                                  (rule "cnf_rightDist" (formula "41") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "41"))
                                                                  (rule "andLeft" (formula "41"))
                                                                  (rule "commute_or_2" (formula "41") (term "0"))
                                                                  (rule "shift_paren_or" (formula "42") (term "0"))
                                                                  (rule "commute_or_2" (formula "42") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "42") (term "0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "42") (term "1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "42") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "42") (term "1,0,1,0"))
                                                                  (rule "times_zero_1" (formula "42") (term "0,1,0"))
                                                                  (rule "leq_literals" (formula "42") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "42"))
                                                                  (rule "true_left" (formula "42"))
                                                                  (rule "shift_paren_or" (formula "41") (term "0,0"))
                                                                  (rule "commute_or" (formula "41") (term "0,0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "41") (term "0,0"))
                                                                  (rule "add_literals" (formula "41") (term "1,1,0,0"))
                                                                  (rule "qeq_literals" (formula "41") (term "1,0,0"))
                                                                  (builtin "One Step Simplification" (formula "41"))
                                                                  (rule "true_left" (formula "41"))
                                                                  (rule "arrayLengthIsAShort" (formula "24") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "24"))
                                                                  (rule "true_left" (formula "24"))
                                                                  (rule "arrayLengthNotNegative" (formula "24") (term "0"))
                                                                  (rule "applyEq" (formula "24") (term "0") (ifseqformula "25"))
                                                                  (rule "qeq_literals" (formula "24"))
                                                                  (rule "true_left" (formula "24"))
                                                                  (rule "equalityToSeqGetAndSeqLenLeft" (formula "16") (inst "iv=iv"))
                                                                  (rule "andLeft" (formula "16"))
                                                                  (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                                                                  (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                                                                  (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                                                                  (rule "applyEq" (formula "17") (term "0,0,1,0,0,1,0,0") (ifseqformula "18"))
                                                                  (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "18"))
                                                                  (builtin "One Step Simplification" (formula "16"))
                                                                  (rule "true_left" (formula "16"))
                                                                  (rule "applyEq" (formula "16") (term "0,0,1,0") (ifseqformula "17"))
                                                                  (builtin "One Step Simplification" (formula "16"))
                                                                  (rule "true_left" (formula "16"))
                                                                  (rule "arrayLengthNotNegative" (formula "39") (term "1"))
                                                                  (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "37"))
                                                                  (rule "leq_literals" (formula "39") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "39"))
                                                                  (rule "true_left" (formula "39"))
                                                                  (rule "arrayLengthIsAShort" (formula "37") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "37"))
                                                                  (rule "true_left" (formula "37"))
                                                                  (rule "onlyCreatedObjectsAreReferenced" (formula "39") (term "1,2,0,0,0") (ifseqformula "26"))
                                                                  (rule "replace_known_right" (formula "39") (term "0") (ifseqformula "44"))
                                                                  (builtin "One Step Simplification" (formula "39"))
                                                                  (rule "arrayLengthNotNegative" (formula "8") (term "0"))
                                                                  (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "9"))
                                                                  (rule "leq_literals" (formula "8") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "8"))
                                                                  (rule "true_left" (formula "8"))
                                                                  (rule "arrayLengthIsAShort" (formula "8") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "8"))
                                                                  (rule "true_left" (formula "8"))
                                                                  (rule "ifthenelse_split" (formula "6") (term "0"))
                                                                  (branch "messages[iv_23].<created> = TRUE TRUE"
                                                                     (rule "applyEqReverse" (formula "48") (term "1") (ifseqformula "7"))
                                                                     (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "7"))
                                                                     (rule "hideAuxiliaryEq" (formula "7"))
                                                                     (rule "replace_known_left" (formula "5") (term "0,0,0") (ifseqformula "6"))
                                                                     (builtin "One Step Simplification" (formula "5"))
                                                                     (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "5"))
                                                                     (builtin "One Step Simplification" (formula "47"))
                                                                     (rule "closeTrue" (formula "47"))
                                                                  )
                                                                  (branch "messages[iv_23].<created> = TRUE FALSE"
                                                                     (rule "referencedObjectIsCreatedRight" (formula "42") (ifseqformula "44"))
                                                                     (rule "close" (formula "42") (ifseqformula "26"))
                                                                  )
                                                               )
                                                            )
                                                            (branch "messages[iv_23].length >= 1 FALSE"
                                                               (rule "inEqSimp_geqRight" (formula "41"))
                                                               (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                               (rule "add_literals" (formula "1") (term "0,0"))
                                                               (rule "add_zero_left" (formula "1") (term "0"))
                                                               (rule "inEqSimp_homoInEq1" (formula "10"))
                                                               (rule "mul_literals" (formula "10") (term "1,0"))
                                                               (rule "add_zero_right" (formula "10") (term "0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "10"))
                                                               (rule "mul_literals" (formula "10") (term "1"))
                                                               (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "10"))
                                                               (rule "qeq_literals" (formula "9") (term "0"))
                                                               (builtin "One Step Simplification" (formula "9"))
                                                               (rule "closeFalse" (formula "9"))
                                                            )
                                                         )
                                                         (branch "messages[i_2].length >= 1 FALSE"
                                                            (rule "eqSymm" (formula "21"))
                                                            (rule "inEqSimp_geqRight" (formula "40"))
                                                            (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0"))
                                                            (rule "applyEq" (formula "19") (term "0") (ifseqformula "22"))
                                                            (rule "qeq_literals" (formula "19"))
                                                            (rule "true_left" (formula "19"))
                                                            (rule "applyEq" (formula "22") (term "1,1,0") (ifseqformula "21"))
                                                            (rule "applyEqRigid" (formula "20") (term "1,1,0") (ifseqformula "21"))
                                                            (rule "applyEq" (formula "19") (term "1") (ifseqformula "21"))
                                                            (rule "commute_and" (formula "8") (term "0,0"))
                                                            (rule "commute_or" (formula "22") (term "0,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0"))
                                                            (rule "add_zero_right" (formula "22") (term "1,1,0"))
                                                            (rule "qeq_literals" (formula "22") (term "1,0"))
                                                            (builtin "One Step Simplification" (formula "22"))
                                                            (rule "true_left" (formula "22"))
                                                            (rule "arrayLengthIsAShort" (formula "37") (term "1,0,0,0"))
                                                            (builtin "One Step Simplification" (formula "37"))
                                                            (rule "true_left" (formula "37"))
                                                            (rule "lenNonNegative" (formula "37") (term "0"))
                                                            (rule "inEqSimp_commuteLeq" (formula "37"))
                                                            (rule "arrayLengthNotNegative" (formula "38") (term "1,0,0,0"))
                                                            (rule "inEqSimp_antiSymm" (formula "38") (ifseqformula "1"))
                                                            (rule "applyEq" (formula "20") (term "1,1,1,0,0,1,0,0") (ifseqformula "38"))
                                                            (rule "add_literals" (formula "20") (term "1,1,0,0,1,0,0"))
                                                            (rule "applyEq" (formula "41") (term "1,0,0,0,1,0,0") (ifseqformula "38"))
                                                            (rule "seqDef_lower_equals_upper" (formula "41") (term "0,0,0,1,0,0"))
                                                            (rule "eqSymm" (formula "41") (term "1,0,0"))
                                                            (rule "applyEq" (formula "40") (term "1,0,0,0") (ifseqformula "38"))
                                                            (rule "seqDef_lower_equals_upper" (formula "40") (term "0,0,0"))
                                                            (rule "applyEq" (formula "39") (term "0") (ifseqformula "38"))
                                                            (rule "qeq_literals" (formula "39"))
                                                            (rule "true_left" (formula "39"))
                                                            (rule "applyEq" (formula "1") (term "0") (ifseqformula "38"))
                                                            (rule "leq_literals" (formula "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "applyEq" (formula "36") (term "1,0,0,0") (ifseqformula "37"))
                                                            (rule "seqDef_lower_equals_upper" (formula "36") (term "0,0,0"))
                                                            (rule "applyEq" (formula "36") (term "0") (ifseqformula "38"))
                                                            (rule "inEqSimp_subsumption1" (formula "36") (ifseqformula "35"))
                                                            (rule "leq_literals" (formula "36") (term "0"))
                                                            (builtin "One Step Simplification" (formula "36"))
                                                            (rule "true_left" (formula "36"))
                                                            (rule "commute_or" (formula "19") (term "0,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "19") (term "0"))
                                                            (rule "add_literals" (formula "19") (term "1,1,0"))
                                                            (rule "qeq_literals" (formula "19") (term "1,0"))
                                                            (builtin "One Step Simplification" (formula "19"))
                                                            (rule "true_left" (formula "19"))
                                                            (rule "commute_or" (formula "37") (term "0,0"))
                                                            (rule "allLeft" (formula "26") (inst "t=iv_23"))
                                                            (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                                                            (rule "inEqSimp_contradInEq1" (formula "26") (term "1,0") (ifseqformula "11"))
                                                            (rule "qeq_literals" (formula "26") (term "0,1,0"))
                                                            (builtin "One Step Simplification" (formula "26"))
                                                            (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "13"))
                                                            (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                                                            (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                                                            (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                                                            (rule "add_zero_right" (formula "26") (term "0,0,1"))
                                                            (rule "leq_literals" (formula "26") (term "0,1"))
                                                            (builtin "One Step Simplification" (formula "26"))
                                                            (rule "notLeft" (formula "26"))
                                                            (rule "replace_known_right" (formula "7") (term "0,1,0,0") (ifseqformula "38"))
                                                            (builtin "One Step Simplification" (formula "7"))
                                                            (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "38"))
                                                            (builtin "One Step Simplification" (formula "5"))
                                                            (rule "ifthenelse_negated" (formula "7") (term "0"))
                                                            (rule "ifthenelse_negated" (formula "5") (term "0"))
                                                            (rule "narrowSelectArrayType" (formula "7") (term "1,0") (ifseqformula "23") (ifseqformula "38"))
                                                            (rule "narrowSelectArrayType" (formula "7") (term "2,0") (ifseqformula "27") (ifseqformula "38"))
                                                            (rule "narrowSelectArrayType" (formula "5") (term "2,0") (ifseqformula "30") (ifseqformula "38"))
                                                            (rule "ifthenelse_split" (formula "9") (term "0"))
                                                            (branch "messages[iv_23].length >= 1 TRUE"
                                                               (rule "replace_known_left" (formula "43") (term "0,0") (ifseqformula "10"))
                                                               (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "10")))
                                                               (rule "ifthenelse_to_or_left" (formula "38") (term "0,0,0"))
                                                               (rule "eqSymm" (formula "38") (term "1,1,0,0,0"))
                                                               (rule "nnf_notAnd" (formula "38") (term "0,0,0,0,0"))
                                                               (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0,0,0,0"))
                                                               (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,0,0,0"))
                                                               (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,0,0,0"))
                                                               (rule "add_literals" (formula "38") (term "0,0,0,1,0,0,0,0,0"))
                                                               (rule "add_zero_left" (formula "38") (term "0,0,1,0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0,0,0,0"))
                                                               (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,0,0,0"))
                                                               (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0,0,0,0"))
                                                               (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0,0,0,0"))
                                                               (rule "times_zero_1" (formula "38") (term "1,0,0,0,0,0,0,0,0"))
                                                               (rule "add_literals" (formula "38") (term "0,0,0,0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "38") (term "1,0,0,0,0,0,0"))
                                                               (rule "commute_or" (formula "38") (term "0,0"))
                                                               (rule "commute_or_2" (formula "38") (term "0"))
                                                               (rule "commute_or_2" (formula "38") (term "0,1,0"))
                                                               (rule "commute_or" (formula "38") (term "1,1,0"))
                                                               (rule "commute_or" (formula "38") (term "0,0,1,0"))
                                                               (rule "cnf_rightDist" (formula "38") (term "1,1,0"))
                                                               (rule "cnf_rightDist" (formula "38") (term "0"))
                                                               (rule "distr_forallAnd" (formula "38"))
                                                               (rule "andLeft" (formula "38"))
                                                               (rule "commute_or" (formula "39") (term "0"))
                                                               (rule "shift_paren_or" (formula "38") (term "0"))
                                                               (rule "commute_or_2" (formula "38") (term "0,0"))
                                                               (builtin "One Step Simplification" (formula "38"))
                                                               (rule "commute_or" (formula "39") (term "1,1,0"))
                                                               (rule "shift_paren_or" (formula "38") (term "0,0"))
                                                               (rule "commute_or" (formula "38") (term "0,0,0"))
                                                               (builtin "One Step Simplification" (formula "38"))
                                                               (rule "cnf_rightDist" (formula "39") (term "0"))
                                                               (rule "distr_forallAnd" (formula "39"))
                                                               (rule "andLeft" (formula "39"))
                                                               (rule "commute_or_2" (formula "39") (term "0"))
                                                               (rule "shift_paren_or" (formula "40") (term "0"))
                                                               (rule "commute_or_2" (formula "40") (term "0,0"))
                                                               (rule "inEqSimp_or_tautInEq1" (formula "40") (term "0"))
                                                               (rule "inEqSimp_homoInEq1" (formula "40") (term "1,0"))
                                                               (rule "polySimp_pullOutFactor1" (formula "40") (term "0,1,0"))
                                                               (rule "add_literals" (formula "40") (term "1,0,1,0"))
                                                               (rule "times_zero_1" (formula "40") (term "0,1,0"))
                                                               (rule "leq_literals" (formula "40") (term "1,0"))
                                                               (builtin "One Step Simplification" (formula "40"))
                                                               (rule "true_left" (formula "40"))
                                                               (rule "shift_paren_or" (formula "39") (term "0,0"))
                                                               (rule "commute_or" (formula "39") (term "0,0,0"))
                                                               (rule "inEqSimp_or_tautInEq1" (formula "39") (term "0,0"))
                                                               (rule "add_zero_right" (formula "39") (term "1,1,0,0"))
                                                               (rule "qeq_literals" (formula "39") (term "1,0,0"))
                                                               (builtin "One Step Simplification" (formula "39"))
                                                               (rule "true_left" (formula "39"))
                                                               (rule "ifthenelse_split" (formula "6") (term "0"))
                                                               (branch "messages[iv_23] = msg_2 TRUE"
                                                                  (rule "referencedObjectIsCreatedRightEQ" (formula "47") (ifseqformula "6") (ifseqformula "48"))
                                                                  (rule "close" (formula "47") (ifseqformula "25"))
                                                               )
                                                               (branch "messages[iv_23] = msg_2 FALSE"
                                                                  (rule "applyEqReverse" (formula "5") (term "0,0,0,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "7") (term "0,0,0") (ifseqformula "6"))
                                                                  (rule "hideAuxiliaryEq" (formula "6"))
                                                                  (rule "seqGetAlphaCast" (formula "50") (term "1"))
                                                                  (rule "castDel" (formula "1") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "seqGetAlphaCast" (formula "50") (term "0"))
                                                                  (rule "castDel" (formula "1") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "lenNonNegative" (formula "17") (term "0"))
                                                                  (rule "inEqSimp_commuteLeq" (formula "17"))
                                                                  (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
                                                                  (rule "qeq_literals" (formula "17"))
                                                                  (rule "true_left" (formula "17"))
                                                                  (rule "arrayLengthNotNegative" (formula "21") (term "0"))
                                                                  (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                                                  (rule "qeq_literals" (formula "21"))
                                                                  (rule "true_left" (formula "21"))
                                                                  (rule "arrayLengthIsAShort" (formula "21") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "21"))
                                                                  (rule "true_left" (formula "21"))
                                                                  (rule "equalityToSeqGetAndSeqLenLeft" (formula "16") (inst "iv=iv"))
                                                                  (rule "andLeft" (formula "16"))
                                                                  (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                                                                  (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                                                                  (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                                                                  (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "18"))
                                                                  (builtin "One Step Simplification" (formula "16"))
                                                                  (rule "true_left" (formula "16"))
                                                                  (rule "applyEq" (formula "16") (term "0,0,1,0") (ifseqformula "17"))
                                                                  (builtin "One Step Simplification" (formula "16"))
                                                                  (rule "true_left" (formula "16"))
                                                                  (rule "arrayLengthNotNegative" (formula "34") (term "0"))
                                                                  (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "35"))
                                                                  (rule "leq_literals" (formula "34") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "34"))
                                                                  (rule "true_left" (formula "34"))
                                                                  (rule "arrayLengthIsAShort" (formula "36") (term "1"))
                                                                  (builtin "One Step Simplification" (formula "36"))
                                                                  (rule "true_left" (formula "36"))
                                                                  (rule "lenNonNegative" (formula "36") (term "0"))
                                                                  (rule "inEqSimp_commuteLeq" (formula "36"))
                                                                  (rule "applyEq" (formula "36") (term "0") (ifseqformula "37"))
                                                                  (rule "inEqSimp_subsumption1" (formula "36") (ifseqformula "34"))
                                                                  (rule "leq_literals" (formula "36") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "36"))
                                                                  (rule "true_left" (formula "36"))
                                                                  (rule "ifthenelse_split" (formula "6") (term "0"))
                                                                  (branch "messages[iv_23].<created> = TRUE TRUE"
                                                                     (rule "applyEqReverse" (formula "44") (term "1") (ifseqformula "7"))
                                                                     (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "7"))
                                                                     (rule "hideAuxiliaryEq" (formula "7"))
                                                                     (rule "replace_known_left" (formula "5") (term "0,0,0") (ifseqformula "6"))
                                                                     (builtin "One Step Simplification" (formula "5"))
                                                                     (rule "applyEqReverse" (formula "43") (term "0") (ifseqformula "5"))
                                                                     (builtin "One Step Simplification" (formula "43"))
                                                                     (rule "closeTrue" (formula "43"))
                                                                  )
                                                                  (branch "messages[iv_23].<created> = TRUE FALSE"
                                                                     (rule "referencedObjectIsCreatedRight" (formula "38") (ifseqformula "40"))
                                                                     (rule "close" (formula "38") (ifseqformula "23"))
                                                                  )
                                                               )
                                                            )
                                                            (branch "messages[iv_23].length >= 1 FALSE"
                                                               (rule "inEqSimp_geqRight" (formula "38"))
                                                               (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                               (rule "add_literals" (formula "1") (term "0,0"))
                                                               (rule "add_zero_left" (formula "1") (term "0"))
                                                               (rule "inEqSimp_homoInEq1" (formula "10"))
                                                               (rule "times_zero_2" (formula "10") (term "1,0"))
                                                               (rule "add_zero_right" (formula "10") (term "0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "10"))
                                                               (rule "mul_literals" (formula "10") (term "1"))
                                                               (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "10"))
                                                               (rule "qeq_literals" (formula "9") (term "0"))
                                                               (builtin "One Step Simplification" (formula "9"))
                                                               (rule "closeFalse" (formula "9"))
                                                            )
                                                         )
                                                      )
                                                      (branch "result_0.length >= 1 FALSE"
                                                         (rule "replace_known_right" (formula "38") (term "0,1,1,0") (ifseqformula "39"))
                                                         (builtin "One Step Simplification" (formula "38"))
                                                         (rule "inEqSimp_geqRight" (formula "39"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "allLeft" (formula "30") (inst "t=i_2"))
                                                         (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "30") (term "1") (ifseqformula "15"))
                                                         (rule "inEqSimp_homoInEq1" (formula "30") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,1"))
                                                         (rule "add_literals" (formula "30") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "30") (term "1,0,0,1"))
                                                         (rule "add_zero_right" (formula "30") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "30") (term "0,1"))
                                                         (builtin "One Step Simplification" (formula "30"))
                                                         (rule "inEqSimp_contradInEq1" (formula "30") (term "1") (ifseqformula "24"))
                                                         (rule "qeq_literals" (formula "30") (term "0,1"))
                                                         (builtin "One Step Simplification" (formula "30"))
                                                         (rule "notLeft" (formula "30"))
                                                         (rule "seqGetAlphaCast" (formula "20") (term "0,0"))
                                                         (rule "castedGetAny" (formula "20") (term "0"))
                                                         (builtin "One Step Simplification" (formula "20"))
                                                         (rule "true_left" (formula "20"))
                                                         (rule "lenNonNegative" (formula "20") (term "0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "20"))
                                                         (rule "applyEqRigid" (formula "20") (term "0") (ifseqformula "21"))
                                                         (rule "ifthenelse_split" (formula "22") (term "0"))
                                                         (branch "messages[i_2].length >= 1 TRUE"
                                                            (rule "eqSymm" (formula "23"))
                                                            (rule "applyEq" (formula "19") (term "0") (ifseqformula "23"))
                                                            (rule "applyEq" (formula "24") (term "1,1,0") (ifseqformula "23"))
                                                            (rule "applyEq" (formula "21") (term "1,1,0") (ifseqformula "23"))
                                                            (rule "applyEq" (formula "20") (term "1") (ifseqformula "23"))
                                                            (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "22"))
                                                            (rule "leq_literals" (formula "19") (term "0"))
                                                            (builtin "One Step Simplification" (formula "19"))
                                                            (rule "true_left" (formula "19"))
                                                            (rule "commute_and" (formula "8") (term "0,0"))
                                                            (rule "commute_or" (formula "23") (term "0,0"))
                                                            (rule "lenNonNegative" (formula "38") (term "0"))
                                                            (rule "inEqSimp_commuteLeq" (formula "38"))
                                                            (rule "arrayLengthIsAShort" (formula "39") (term "1,0,0,0"))
                                                            (builtin "One Step Simplification" (formula "39"))
                                                            (rule "true_left" (formula "39"))
                                                            (rule "arrayLengthNotNegative" (formula "39") (term "1,0,0,0"))
                                                            (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "21"))
                                                            (rule "leq_literals" (formula "39") (term "0"))
                                                            (builtin "One Step Simplification" (formula "39"))
                                                            (rule "true_left" (formula "39"))
                                                            (rule "commute_or" (formula "20") (term "0,0"))
                                                            (rule "commute_or" (formula "40") (term "0,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "40") (term "0"))
                                                            (rule "add_zero_right" (formula "40") (term "1,1,0"))
                                                            (rule "qeq_literals" (formula "40") (term "1,0"))
                                                            (builtin "One Step Simplification" (formula "40"))
                                                            (rule "true_left" (formula "40"))
                                                            (rule "allLeft" (formula "30") (inst "t=iv_23"))
                                                            (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                                                            (rule "inEqSimp_contradInEq1" (formula "30") (term "1,0") (ifseqformula "12"))
                                                            (rule "qeq_literals" (formula "30") (term "0,1,0"))
                                                            (builtin "One Step Simplification" (formula "30"))
                                                            (rule "inEqSimp_contradInEq1" (formula "30") (term "1") (ifseqformula "14"))
                                                            (rule "inEqSimp_homoInEq1" (formula "30") (term "0,1"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,1"))
                                                            (rule "add_literals" (formula "30") (term "1,1,0,0,1"))
                                                            (rule "times_zero_1" (formula "30") (term "1,0,0,1"))
                                                            (rule "add_literals" (formula "30") (term "0,0,1"))
                                                            (rule "leq_literals" (formula "30") (term "0,1"))
                                                            (builtin "One Step Simplification" (formula "30"))
                                                            (rule "notLeft" (formula "30"))
                                                            (rule "replace_known_right" (formula "6") (term "0,0,0,0") (ifseqformula "40"))
                                                            (builtin "One Step Simplification" (formula "6"))
                                                            (rule "replace_known_right" (formula "8") (term "0,1,0,0") (ifseqformula "40"))
                                                            (builtin "One Step Simplification" (formula "8"))
                                                            (rule "ifthenelse_negated" (formula "6") (term "0"))
                                                            (rule "ifthenelse_negated" (formula "8") (term "0"))
                                                            (rule "narrowSelectArrayType" (formula "6") (term "2,0") (ifseqformula "34") (ifseqformula "40"))
                                                            (rule "narrowSelectArrayType" (formula "8") (term "1,0") (ifseqformula "27") (ifseqformula "40"))
                                                            (rule "narrowSelectArrayType" (formula "8") (term "2,0") (ifseqformula "31") (ifseqformula "40"))
                                                            (rule "ifthenelse_split" (formula "10") (term "0"))
                                                            (branch "messages[iv_23].length >= 1 TRUE"
                                                               (rule "replace_known_left" (formula "45") (term "0,0") (ifseqformula "11"))
                                                               (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "11")))
                                                               (rule "ifthenelse_to_or_left" (formula "24") (term "0,0,0"))
                                                               (rule "eqSymm" (formula "24") (term "1,1,0,0,0"))
                                                               (rule "nnf_notAnd" (formula "24") (term "0,0,0,0,0"))
                                                               (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,0,0,0"))
                                                               (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0,0,0,0"))
                                                               (rule "add_zero_right" (formula "24") (term "0,0,0,0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0,0"))
                                                               (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,0,0,0"))
                                                               (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,0,0,0"))
                                                               (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,0,0,0"))
                                                               (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,0,0,0"))
                                                               (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,0,0,0"))
                                                               (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0,0,0"))
                                                               (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0,0,0"))
                                                               (rule "commute_or" (formula "24") (term "0,0"))
                                                               (rule "commute_or_2" (formula "24") (term "0"))
                                                               (rule "commute_or_2" (formula "24") (term "0,1,0"))
                                                               (rule "commute_or" (formula "24") (term "1,1,0"))
                                                               (rule "commute_or" (formula "24") (term "0,0,1,0"))
                                                               (rule "ifthenelse_to_or_left" (formula "21") (term "0,0,0"))
                                                               (rule "eqSymm" (formula "21") (term "1,1,0,0,0"))
                                                               (rule "nnf_notAnd" (formula "21") (term "0,0,0,0,0"))
                                                               (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,0,0,0"))
                                                               (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,0,0,0"))
                                                               (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,0,0,0"))
                                                               (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,0,0,0"))
                                                               (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,0,0,0"))
                                                               (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,0,0"))
                                                               (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,0,0"))
                                                               (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,0,0,0"))
                                                               (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0,0,0,0"))
                                                               (rule "add_zero_right" (formula "21") (term "0,0,0,0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0,0"))
                                                               (rule "commute_or" (formula "21") (term "0,0"))
                                                               (rule "commute_or_2" (formula "21") (term "0"))
                                                               (rule "commute_or_2" (formula "21") (term "0,1,0"))
                                                               (rule "commute_or" (formula "21") (term "1,1,0"))
                                                               (rule "commute_or" (formula "21") (term "0,0,1,0"))
                                                               (rule "cnf_rightDist" (formula "24") (term "1,1,0"))
                                                               (rule "cnf_rightDist" (formula "24") (term "0"))
                                                               (rule "distr_forallAnd" (formula "24"))
                                                               (rule "andLeft" (formula "24"))
                                                               (rule "commute_or" (formula "25") (term "0"))
                                                               (rule "shift_paren_or" (formula "24") (term "0"))
                                                               (rule "commute_or_2" (formula "24") (term "0,0"))
                                                               (builtin "One Step Simplification" (formula "24"))
                                                               (rule "commute_or" (formula "25") (term "1,1,0"))
                                                               (rule "shift_paren_or" (formula "24") (term "0,0"))
                                                               (rule "commute_or" (formula "24") (term "0,0,0"))
                                                               (builtin "One Step Simplification" (formula "24"))
                                                               (rule "cnf_rightDist" (formula "25") (term "0"))
                                                               (rule "distr_forallAnd" (formula "25"))
                                                               (rule "andLeft" (formula "25"))
                                                               (rule "commute_or_2" (formula "25") (term "0"))
                                                               (rule "shift_paren_or" (formula "26") (term "0"))
                                                               (rule "commute_or_2" (formula "26") (term "0,0"))
                                                               (rule "inEqSimp_or_tautInEq1" (formula "26") (term "0"))
                                                               (rule "inEqSimp_homoInEq1" (formula "26") (term "1,0"))
                                                               (rule "polySimp_pullOutFactor1" (formula "26") (term "0,1,0"))
                                                               (rule "add_literals" (formula "26") (term "1,0,1,0"))
                                                               (rule "times_zero_1" (formula "26") (term "0,1,0"))
                                                               (rule "leq_literals" (formula "26") (term "1,0"))
                                                               (builtin "One Step Simplification" (formula "26"))
                                                               (rule "true_left" (formula "26"))
                                                               (rule "shift_paren_or" (formula "25") (term "0,0"))
                                                               (rule "commute_or" (formula "25") (term "0,0,0"))
                                                               (rule "inEqSimp_or_tautInEq1" (formula "25") (term "0,0"))
                                                               (rule "add_zero_right" (formula "25") (term "1,1,0,0"))
                                                               (rule "qeq_literals" (formula "25") (term "1,0,0"))
                                                               (builtin "One Step Simplification" (formula "25"))
                                                               (rule "true_left" (formula "25"))
                                                               (rule "cnf_rightDist" (formula "21") (term "1,1,0"))
                                                               (rule "cnf_rightDist" (formula "21") (term "0"))
                                                               (rule "distr_forallAnd" (formula "21"))
                                                               (rule "andLeft" (formula "21"))
                                                               (rule "commute_or" (formula "22") (term "0"))
                                                               (rule "shift_paren_or" (formula "21") (term "0"))
                                                               (rule "commute_or_2" (formula "21") (term "0,0"))
                                                               (builtin "One Step Simplification" (formula "21"))
                                                               (rule "commute_or" (formula "22") (term "1,1,0"))
                                                               (rule "shift_paren_or" (formula "21") (term "0,0"))
                                                               (rule "commute_or" (formula "21") (term "0,0,0"))
                                                               (builtin "One Step Simplification" (formula "21"))
                                                               (rule "cnf_rightDist" (formula "22") (term "0"))
                                                               (rule "distr_forallAnd" (formula "22"))
                                                               (rule "andLeft" (formula "22"))
                                                               (rule "commute_or_2" (formula "22") (term "0"))
                                                               (rule "shift_paren_or" (formula "23") (term "0"))
                                                               (rule "commute_or_2" (formula "23") (term "0,0"))
                                                               (rule "inEqSimp_or_tautInEq1" (formula "23") (term "0"))
                                                               (rule "inEqSimp_homoInEq1" (formula "23") (term "1,0"))
                                                               (rule "polySimp_pullOutFactor1" (formula "23") (term "0,1,0"))
                                                               (rule "add_literals" (formula "23") (term "1,0,1,0"))
                                                               (rule "times_zero_1" (formula "23") (term "0,1,0"))
                                                               (rule "leq_literals" (formula "23") (term "1,0"))
                                                               (builtin "One Step Simplification" (formula "23"))
                                                               (rule "true_left" (formula "23"))
                                                               (rule "shift_paren_or" (formula "22") (term "0,0"))
                                                               (rule "commute_or" (formula "22") (term "0,0,0"))
                                                               (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0,0"))
                                                               (rule "add_zero_right" (formula "22") (term "1,1,0,0"))
                                                               (rule "qeq_literals" (formula "22") (term "1,0,0"))
                                                               (builtin "One Step Simplification" (formula "22"))
                                                               (rule "true_left" (formula "22"))
                                                               (rule "ifthenelse_split" (formula "7") (term "0"))
                                                               (branch "messages[iv_23] = msg_2 TRUE"
                                                                  (rule "referencedObjectIsCreatedRightEQ" (formula "49") (ifseqformula "7") (ifseqformula "50"))
                                                                  (rule "close" (formula "49") (ifseqformula "29"))
                                                               )
                                                               (branch "messages[iv_23] = msg_2 FALSE"
                                                                  (rule "applyEqReverse" (formula "6") (term "0,0,0,0") (ifseqformula "7"))
                                                                  (rule "applyEqReverse" (formula "8") (term "0,0,0") (ifseqformula "7"))
                                                                  (rule "hideAuxiliaryEq" (formula "7"))
                                                                  (rule "seqGetAlphaCast" (formula "52") (term "1"))
                                                                  (rule "castDel" (formula "1") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "seqGetAlphaCast" (formula "52") (term "0"))
                                                                  (rule "castDel" (formula "1") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "lenNonNegative" (formula "18") (term "0"))
                                                                  (rule "inEqSimp_commuteLeq" (formula "18"))
                                                                  (rule "applyEqRigid" (formula "18") (term "0") (ifseqformula "19"))
                                                                  (rule "qeq_literals" (formula "18"))
                                                                  (rule "true_left" (formula "18"))
                                                                  (rule "arrayLengthIsAShort" (formula "25") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "25"))
                                                                  (rule "true_left" (formula "25"))
                                                                  (rule "arrayLengthNotNegative" (formula "25") (term "0"))
                                                                  (rule "applyEq" (formula "25") (term "0") (ifseqformula "26"))
                                                                  (rule "qeq_literals" (formula "25"))
                                                                  (rule "true_left" (formula "25"))
                                                                  (rule "equalityToSeqGetAndSeqLenLeft" (formula "17") (inst "iv=iv"))
                                                                  (rule "andLeft" (formula "17"))
                                                                  (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                                                                  (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                                                                  (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                                                                  (rule "applyEq" (formula "18") (term "0,0,1,0") (ifseqformula "19"))
                                                                  (builtin "One Step Simplification" (formula "18"))
                                                                  (rule "true_left" (formula "18"))
                                                                  (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "18"))
                                                                  (builtin "One Step Simplification" (formula "17"))
                                                                  (rule "true_left" (formula "17"))
                                                                  (rule "arrayLengthIsAShort" (formula "1") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "arrayLengthNotNegative" (formula "1") (term "0"))
                                                                  (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "2"))
                                                                  (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                                                                  (rule "leq_literals" (formula "3"))
                                                                  (rule "true_left" (formula "3"))
                                                                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                                                  (rule "qeq_literals" (formula "2"))
                                                                  (rule "true_left" (formula "2"))
                                                                  (rule "onlyCreatedObjectsAreReferenced" (formula "39") (term "1,2,0,0,0") (ifseqformula "27"))
                                                                  (rule "replace_known_right" (formula "39") (term "0") (ifseqformula "43"))
                                                                  (builtin "One Step Simplification" (formula "39"))
                                                                  (rule "arrayLengthIsAShort" (formula "10") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "10"))
                                                                  (rule "true_left" (formula "10"))
                                                                  (rule "arrayLengthNotNegative" (formula "9") (term "0"))
                                                                  (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "10"))
                                                                  (rule "leq_literals" (formula "9") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "9"))
                                                                  (rule "true_left" (formula "9"))
                                                                  (rule "ifthenelse_split" (formula "7") (term "0"))
                                                                  (branch "messages[iv_23].<created> = TRUE TRUE"
                                                                     (rule "applyEqReverse" (formula "47") (term "1") (ifseqformula "8"))
                                                                     (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "8"))
                                                                     (rule "hideAuxiliaryEq" (formula "8"))
                                                                     (rule "replace_known_left" (formula "6") (term "0,0,0") (ifseqformula "7"))
                                                                     (builtin "One Step Simplification" (formula "6"))
                                                                     (rule "applyEqReverse" (formula "46") (term "0") (ifseqformula "6"))
                                                                     (builtin "One Step Simplification" (formula "46"))
                                                                     (rule "closeTrue" (formula "46"))
                                                                  )
                                                                  (branch "messages[iv_23].<created> = TRUE FALSE"
                                                                     (rule "referencedObjectIsCreatedRight" (formula "41") (ifseqformula "43"))
                                                                     (rule "close" (formula "41") (ifseqformula "27"))
                                                                  )
                                                               )
                                                            )
                                                            (branch "messages[iv_23].length >= 1 FALSE"
                                                               (rule "inEqSimp_geqRight" (formula "40"))
                                                               (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                               (rule "add_literals" (formula "1") (term "0,0"))
                                                               (rule "add_zero_left" (formula "1") (term "0"))
                                                               (rule "inEqSimp_homoInEq1" (formula "11"))
                                                               (rule "times_zero_2" (formula "11") (term "1,0"))
                                                               (rule "add_zero_right" (formula "11") (term "0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "11"))
                                                               (rule "mul_literals" (formula "11") (term "1"))
                                                               (rule "inEqSimp_contradInEq1" (formula "11") (ifseqformula "10"))
                                                               (rule "qeq_literals" (formula "11") (term "0"))
                                                               (builtin "One Step Simplification" (formula "11"))
                                                               (rule "closeFalse" (formula "11"))
                                                            )
                                                         )
                                                         (branch "messages[i_2].length >= 1 FALSE"
                                                            (rule "eqSymm" (formula "22"))
                                                            (rule "inEqSimp_geqRight" (formula "40"))
                                                            (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0"))
                                                            (rule "applyEqRigid" (formula "22") (term "1,1,0") (ifseqformula "23"))
                                                            (rule "applyEq" (formula "20") (term "0") (ifseqformula "23"))
                                                            (rule "qeq_literals" (formula "20"))
                                                            (rule "true_left" (formula "20"))
                                                            (rule "applyEqRigid" (formula "23") (term "1,1,0") (ifseqformula "22"))
                                                            (rule "applyEq" (formula "20") (term "1") (ifseqformula "22"))
                                                            (rule "commute_and" (formula "9") (term "0,0"))
                                                            (rule "commute_or" (formula "23") (term "0,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "23") (term "0"))
                                                            (rule "add_zero_right" (formula "23") (term "1,1,0"))
                                                            (rule "qeq_literals" (formula "23") (term "1,0"))
                                                            (builtin "One Step Simplification" (formula "23"))
                                                            (rule "true_left" (formula "23"))
                                                            (rule "arrayLengthNotNegative" (formula "37") (term "1,0,0,0"))
                                                            (rule "inEqSimp_antiSymm" (formula "37") (ifseqformula "1"))
                                                            (rule "applyEq" (formula "1") (term "0") (ifseqformula "37"))
                                                            (rule "leq_literals" (formula "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "applyEq" (formula "38") (term "1,0,0,0") (ifseqformula "36"))
                                                            (rule "seqDef_lower_equals_upper" (formula "38") (term "0,0,0"))
                                                            (rule "applyEq" (formula "20") (term "1,1,1,0,0,1,0,0") (ifseqformula "36"))
                                                            (rule "add_zero_right" (formula "20") (term "1,1,0,0,1,0,0"))
                                                            (rule "applyEq" (formula "39") (term "1,0,0,0,1,0,0") (ifseqformula "36"))
                                                            (rule "seqDef_lower_equals_upper" (formula "39") (term "0,0,0,1,0,0"))
                                                            (rule "eqSymm" (formula "39") (term "1,0,0"))
                                                            (rule "applyEq" (formula "37") (term "0") (ifseqformula "36"))
                                                            (rule "qeq_literals" (formula "37"))
                                                            (rule "true_left" (formula "37"))
                                                            (rule "commute_or" (formula "20") (term "0,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "20") (term "0"))
                                                            (rule "add_zero_right" (formula "20") (term "1,1,0"))
                                                            (rule "qeq_literals" (formula "20") (term "1,0"))
                                                            (builtin "One Step Simplification" (formula "20"))
                                                            (rule "true_left" (formula "20"))
                                                            (rule "commute_or" (formula "37") (term "0,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "37") (term "0"))
                                                            (rule "add_zero_right" (formula "37") (term "1,1,0"))
                                                            (rule "qeq_literals" (formula "37") (term "1,0"))
                                                            (builtin "One Step Simplification" (formula "37"))
                                                            (rule "true_left" (formula "37"))
                                                            (rule "allLeft" (formula "27") (inst "t=iv_23"))
                                                            (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                                                            (rule "inEqSimp_contradInEq1" (formula "27") (term "1") (ifseqformula "14"))
                                                            (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1"))
                                                            (rule "add_literals" (formula "27") (term "1,1,0,0,1"))
                                                            (rule "times_zero_1" (formula "27") (term "1,0,0,1"))
                                                            (rule "add_zero_right" (formula "27") (term "0,0,1"))
                                                            (rule "leq_literals" (formula "27") (term "0,1"))
                                                            (builtin "One Step Simplification" (formula "27"))
                                                            (rule "inEqSimp_contradInEq1" (formula "27") (term "1") (ifseqformula "12"))
                                                            (rule "qeq_literals" (formula "27") (term "0,1"))
                                                            (builtin "One Step Simplification" (formula "27"))
                                                            (rule "notLeft" (formula "27"))
                                                            (rule "replace_known_right" (formula "8") (term "0,1,0,0") (ifseqformula "37"))
                                                            (builtin "One Step Simplification" (formula "8"))
                                                            (rule "replace_known_right" (formula "6") (term "0,0,0,0") (ifseqformula "37"))
                                                            (builtin "One Step Simplification" (formula "6"))
                                                            (rule "ifthenelse_negated" (formula "8") (term "0"))
                                                            (rule "ifthenelse_negated" (formula "6") (term "0"))
                                                            (rule "narrowSelectArrayType" (formula "8") (term "2,0") (ifseqformula "28") (ifseqformula "37"))
                                                            (rule "narrowSelectArrayType" (formula "8") (term "1,0") (ifseqformula "24") (ifseqformula "37"))
                                                            (rule "narrowSelectArrayType" (formula "6") (term "2,0") (ifseqformula "31") (ifseqformula "37"))
                                                            (rule "ifthenelse_split" (formula "10") (term "0"))
                                                            (branch "messages[iv_23].length >= 1 TRUE"
                                                               (rule "replace_known_left" (formula "42") (term "0,0") (ifseqformula "11"))
                                                               (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "11")))
                                                               (rule "ifthenelse_split" (formula "7") (term "0"))
                                                               (branch "messages[iv_23] = msg_2 TRUE"
                                                                  (rule "referencedObjectIsCreatedRightEQ" (formula "46") (ifseqformula "7") (ifseqformula "47"))
                                                                  (rule "close" (formula "46") (ifseqformula "26"))
                                                               )
                                                               (branch "messages[iv_23] = msg_2 FALSE"
                                                                  (rule "applyEqReverse" (formula "8") (term "0,0,0") (ifseqformula "7"))
                                                                  (rule "applyEqReverse" (formula "6") (term "0,0,0,0") (ifseqformula "7"))
                                                                  (rule "hideAuxiliaryEq" (formula "7"))
                                                                  (rule "seqGetAlphaCast" (formula "49") (term "0"))
                                                                  (rule "castDel" (formula "1") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "seqGetAlphaCast" (formula "49") (term "1"))
                                                                  (rule "castDel" (formula "1") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "lenNonNegative" (formula "18") (term "0"))
                                                                  (rule "inEqSimp_commuteLeq" (formula "18"))
                                                                  (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                                                                  (rule "qeq_literals" (formula "18"))
                                                                  (rule "true_left" (formula "18"))
                                                                  (rule "arrayLengthNotNegative" (formula "22") (term "0"))
                                                                  (rule "applyEqRigid" (formula "22") (term "0") (ifseqformula "23"))
                                                                  (rule "qeq_literals" (formula "22"))
                                                                  (rule "true_left" (formula "22"))
                                                                  (rule "arrayLengthIsAShort" (formula "22") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "22"))
                                                                  (rule "true_left" (formula "22"))
                                                                  (rule "equalityToSeqGetAndSeqLenLeft" (formula "17") (inst "iv=iv"))
                                                                  (rule "andLeft" (formula "17"))
                                                                  (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                                                                  (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                                                                  (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                                                                  (rule "applyEq" (formula "18") (term "0,0,1,0,0,1,0,0") (ifseqformula "19"))
                                                                  (rule "applyEq" (formula "18") (term "0,0,1,0") (ifseqformula "19"))
                                                                  (builtin "One Step Simplification" (formula "18"))
                                                                  (rule "true_left" (formula "18"))
                                                                  (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "18"))
                                                                  (builtin "One Step Simplification" (formula "17"))
                                                                  (rule "true_left" (formula "17"))
                                                                  (rule "arrayLengthIsAShort" (formula "1") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "arrayLengthNotNegative" (formula "1") (term "0"))
                                                                  (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "2"))
                                                                  (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                                                                  (rule "leq_literals" (formula "3"))
                                                                  (rule "true_left" (formula "3"))
                                                                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                                                  (rule "qeq_literals" (formula "2"))
                                                                  (rule "true_left" (formula "2"))
                                                                  (rule "ifthenelse_split" (formula "7") (term "0"))
                                                                  (branch "messages[iv_23].<created> = TRUE TRUE"
                                                                     (rule "applyEqReverse" (formula "43") (term "1") (ifseqformula "8"))
                                                                     (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "8"))
                                                                     (rule "hideAuxiliaryEq" (formula "8"))
                                                                     (rule "replace_known_left" (formula "6") (term "0,0,0") (ifseqformula "7"))
                                                                     (builtin "One Step Simplification" (formula "6"))
                                                                     (rule "applyEqReverse" (formula "42") (term "0") (ifseqformula "6"))
                                                                     (builtin "One Step Simplification" (formula "42"))
                                                                     (rule "closeTrue" (formula "42"))
                                                                  )
                                                                  (branch "messages[iv_23].<created> = TRUE FALSE"
                                                                     (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "39"))
                                                                     (rule "close" (formula "37") (ifseqformula "24"))
                                                                  )
                                                               )
                                                            )
                                                            (branch "messages[iv_23].length >= 1 FALSE"
                                                               (rule "inEqSimp_geqRight" (formula "37"))
                                                               (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                               (rule "add_literals" (formula "1") (term "0,0"))
                                                               (rule "add_zero_left" (formula "1") (term "0"))
                                                               (rule "inEqSimp_homoInEq1" (formula "11"))
                                                               (rule "mul_literals" (formula "11") (term "1,0"))
                                                               (rule "add_zero_right" (formula "11") (term "0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "11"))
                                                               (rule "mul_literals" (formula "11") (term "1"))
                                                               (rule "inEqSimp_contradInEq1" (formula "11") (ifseqformula "10"))
                                                               (rule "qeq_literals" (formula "11") (term "0"))
                                                               (builtin "One Step Simplification" (formula "11"))
                                                               (rule "closeFalse" (formula "11"))
                                                            )
                                                         )
                                                      )
                                                   )
                                                   (branch "x_arr_2 = msg_2 FALSE"
                                                      (rule "applyEqReverse" (formula "33") (term "0,0") (ifseqformula "32"))
                                                      (builtin "One Step Simplification" (formula "33"))
                                                      (rule "hideAuxiliaryEq" (formula "32"))
                                                      (rule "lenNonNegative" (formula "31") (term "0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "31"))
                                                      (rule "applyEqRigid" (formula "31") (term "0") (ifseqformula "32"))
                                                      (rule "qeq_literals" (formula "31"))
                                                      (rule "true_left" (formula "31"))
                                                      (rule "lenNonNegative" (formula "19") (term "1"))
                                                      (rule "inEqSimp_commuteLeq" (formula "19"))
                                                      (rule "commute_or_2" (formula "39") (term "0"))
                                                      (rule "commute_or_2" (formula "21") (term "0"))
                                                      (rule "ifthenelse_split" (formula "38") (term "1"))
                                                      (branch "result_0.length >= 1 TRUE"
                                                         (rule "replace_known_left" (formula "40") (term "0,1,1,0") (ifseqformula "38"))
                                                         (builtin "One Step Simplification" (formula "40"))
                                                         (rule "allLeft" (formula "30") (inst "t=i_2"))
                                                         (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "30") (term "1,0") (ifseqformula "24"))
                                                         (rule "qeq_literals" (formula "30") (term "0,1,0"))
                                                         (builtin "One Step Simplification" (formula "30"))
                                                         (rule "inEqSimp_contradInEq1" (formula "30") (term "1") (ifseqformula "15"))
                                                         (rule "inEqSimp_homoInEq1" (formula "30") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,1"))
                                                         (rule "add_literals" (formula "30") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "30") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "30") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "30") (term "0,1"))
                                                         (builtin "One Step Simplification" (formula "30"))
                                                         (rule "notLeft" (formula "30"))
                                                         (rule "lenNonNegative" (formula "20") (term "0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "20"))
                                                         (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                                                         (rule "seqGetAlphaCast" (formula "20") (term "0,0"))
                                                         (rule "castedGetAny" (formula "20") (term "0"))
                                                         (builtin "One Step Simplification" (formula "20"))
                                                         (rule "true_left" (formula "20"))
                                                         (rule "ifthenelse_split" (formula "22") (term "0"))
                                                         (branch "messages[i_2].length >= 1 TRUE"
                                                            (rule "eqSymm" (formula "23"))
                                                            (rule "applyEq" (formula "24") (term "1,1,0") (ifseqformula "23"))
                                                            (rule "applyEq" (formula "19") (term "0") (ifseqformula "23"))
                                                            (rule "applyEq" (formula "21") (term "1,1,0") (ifseqformula "23"))
                                                            (rule "applyEq" (formula "20") (term "1") (ifseqformula "23"))
                                                            (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "22"))
                                                            (rule "leq_literals" (formula "19") (term "0"))
                                                            (builtin "One Step Simplification" (formula "19"))
                                                            (rule "true_left" (formula "19"))
                                                            (rule "commute_and" (formula "8") (term "0,0"))
                                                            (rule "commute_or" (formula "23") (term "0,0"))
                                                            (rule "lenNonNegative" (formula "39") (term "0"))
                                                            (rule "inEqSimp_commuteLeq" (formula "39"))
                                                            (rule "arrayLengthIsAShort" (formula "40") (term "1,0,0,0"))
                                                            (builtin "One Step Simplification" (formula "40"))
                                                            (rule "true_left" (formula "40"))
                                                            (rule "arrayLengthNotNegative" (formula "40") (term "1,0,0,0"))
                                                            (rule "inEqSimp_subsumption1" (formula "40") (ifseqformula "21"))
                                                            (rule "leq_literals" (formula "40") (term "0"))
                                                            (builtin "One Step Simplification" (formula "40"))
                                                            (rule "true_left" (formula "40"))
                                                            (rule "commute_or" (formula "20") (term "0,0"))
                                                            (rule "commute_or" (formula "41") (term "0,0"))
                                                            (rule "allLeft" (formula "30") (inst "t=iv_23"))
                                                            (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                                                            (rule "inEqSimp_contradInEq1" (formula "30") (term "1") (ifseqformula "14"))
                                                            (rule "inEqSimp_homoInEq1" (formula "30") (term "0,1"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,1"))
                                                            (rule "add_literals" (formula "30") (term "1,1,0,0,1"))
                                                            (rule "times_zero_1" (formula "30") (term "1,0,0,1"))
                                                            (rule "add_zero_right" (formula "30") (term "0,0,1"))
                                                            (rule "leq_literals" (formula "30") (term "0,1"))
                                                            (builtin "One Step Simplification" (formula "30"))
                                                            (rule "inEqSimp_contradInEq1" (formula "30") (term "1") (ifseqformula "12"))
                                                            (rule "qeq_literals" (formula "30") (term "0,1"))
                                                            (builtin "One Step Simplification" (formula "30"))
                                                            (rule "notLeft" (formula "30"))
                                                            (rule "replace_known_right" (formula "8") (term "0,1,0,0") (ifseqformula "42"))
                                                            (builtin "One Step Simplification" (formula "8"))
                                                            (rule "replace_known_right" (formula "6") (term "0,0,0,0") (ifseqformula "42"))
                                                            (builtin "One Step Simplification" (formula "6"))
                                                            (rule "ifthenelse_negated" (formula "8") (term "0"))
                                                            (rule "ifthenelse_negated" (formula "6") (term "0"))
                                                            (rule "narrowSelectArrayType" (formula "8") (term "1,0") (ifseqformula "27") (ifseqformula "42"))
                                                            (rule "narrowSelectArrayType" (formula "8") (term "2,0") (ifseqformula "31") (ifseqformula "42"))
                                                            (rule "narrowSelectArrayType" (formula "6") (term "2,0") (ifseqformula "34") (ifseqformula "42"))
                                                            (rule "ifthenelse_split" (formula "10") (term "0"))
                                                            (branch "messages[iv_23].length >= 1 TRUE"
                                                               (rule "replace_known_left" (formula "48") (term "0,0") (ifseqformula "11"))
                                                               (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "11")))
                                                               (rule "ifthenelse_to_or_left" (formula "24") (term "0,0,0"))
                                                               (rule "eqSymm" (formula "24") (term "1,1,0,0,0"))
                                                               (rule "nnf_notAnd" (formula "24") (term "0,0,0,0,0"))
                                                               (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,0,0,0"))
                                                               (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,0,0,0"))
                                                               (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,0,0,0"))
                                                               (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,0,0,0"))
                                                               (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,0,0,0"))
                                                               (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0,0,0"))
                                                               (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0,0,0"))
                                                               (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0,0,0,0"))
                                                               (rule "add_zero_right" (formula "24") (term "0,0,0,0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0,0"))
                                                               (rule "commute_or" (formula "24") (term "0,0"))
                                                               (rule "commute_or_2" (formula "24") (term "0"))
                                                               (rule "commute_or" (formula "24") (term "1,1,0"))
                                                               (rule "commute_or_2" (formula "24") (term "0,1,0"))
                                                               (rule "commute_or" (formula "24") (term "0,0,1,0"))
                                                               (rule "ifthenelse_split" (formula "7") (term "0"))
                                                               (branch "messages[iv_23] = x_arr_2 TRUE"
                                                                  (rule "referencedObjectIsCreatedRightEQ" (formula "54") (ifseqformula "7") (ifseqformula "55"))
                                                                  (rule "close" (formula "54") (ifseqformula "29"))
                                                               )
                                                               (branch "messages[iv_23] = x_arr_2 FALSE"
                                                                  (rule "applyEqReverse" (formula "6") (term "0,0,0,0") (ifseqformula "7"))
                                                                  (rule "applyEqReverse" (formula "8") (term "0,0,0") (ifseqformula "7"))
                                                                  (rule "hideAuxiliaryEq" (formula "7"))
                                                                  (rule "cnf_rightDist" (formula "23") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "23") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "23"))
                                                                  (rule "andLeft" (formula "23"))
                                                                  (rule "commute_or" (formula "24") (term "0"))
                                                                  (rule "shift_paren_or" (formula "23") (term "0"))
                                                                  (rule "commute_or_2" (formula "23") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "23"))
                                                                  (rule "commute_or" (formula "24") (term "1,1,0"))
                                                                  (rule "shift_paren_or" (formula "23") (term "0,0"))
                                                                  (rule "commute_or" (formula "23") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "23"))
                                                                  (rule "cnf_rightDist" (formula "24") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "24"))
                                                                  (rule "andLeft" (formula "24"))
                                                                  (rule "commute_or_2" (formula "24") (term "0"))
                                                                  (rule "shift_paren_or" (formula "25") (term "0"))
                                                                  (rule "commute_or_2" (formula "25") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "25") (term "0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "25") (term "1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "25") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "25") (term "1,0,1,0"))
                                                                  (rule "times_zero_1" (formula "25") (term "0,1,0"))
                                                                  (rule "leq_literals" (formula "25") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "25"))
                                                                  (rule "true_left" (formula "25"))
                                                                  (rule "shift_paren_or" (formula "24") (term "0,0"))
                                                                  (rule "commute_or" (formula "24") (term "0,0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "24") (term "0,0"))
                                                                  (rule "add_literals" (formula "24") (term "1,1,0,0"))
                                                                  (rule "qeq_literals" (formula "24") (term "1,0,0"))
                                                                  (builtin "One Step Simplification" (formula "24"))
                                                                  (rule "true_left" (formula "24"))
                                                                  (rule "ifthenelse_to_or_left" (formula "20") (term "0,0,0"))
                                                                  (rule "eqSymm" (formula "20") (term "1,1,0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "20") (term "0,0,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,0,0,0"))
                                                                  (rule "add_zero_left" (formula "20") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0,0,0,0"))
                                                                  (rule "add_zero_right" (formula "20") (term "0,0,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0,0"))
                                                                  (rule "commute_or" (formula "20") (term "0,0"))
                                                                  (rule "commute_or_2" (formula "20") (term "0"))
                                                                  (rule "ifthenelse_to_or_right" (formula "41") (term "0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "41") (term "0,0,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "41") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "41") (term "1,0,0,0,0,0,0,0,0"))
                                                                  (rule "add_zero_right" (formula "41") (term "0,0,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "41") (term "1,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "41") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "41") (term "1,0,0,1,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "41") (term "0,1,0,0,1,0,0,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "41") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "add_literals" (formula "41") (term "0,0,0,1,0,0,0,0,0"))
                                                                  (rule "add_zero_left" (formula "41") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "41") (term "1,1,0,0,0,0,0"))
                                                                  (rule "commute_or" (formula "41") (term "0,0"))
                                                                  (rule "commute_or_2" (formula "41") (term "0"))
                                                                  (rule "commute_or_2" (formula "20") (term "0,1,0"))
                                                                  (rule "commute_or" (formula "20") (term "1,1,0"))
                                                                  (rule "commute_or_2" (formula "41") (term "0,1,0"))
                                                                  (rule "commute_or" (formula "41") (term "1,1,0"))
                                                                  (rule "commute_or" (formula "20") (term "0,0,1,0"))
                                                                  (rule "commute_or" (formula "41") (term "0,0,1,0"))
                                                                  (rule "cnf_rightDist" (formula "20") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "20") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "20"))
                                                                  (rule "andLeft" (formula "20"))
                                                                  (rule "commute_or" (formula "21") (term "0"))
                                                                  (rule "shift_paren_or" (formula "20") (term "0"))
                                                                  (rule "commute_or_2" (formula "20") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "20"))
                                                                  (rule "commute_or" (formula "21") (term "1,1,0"))
                                                                  (rule "shift_paren_or" (formula "20") (term "0,0"))
                                                                  (rule "commute_or" (formula "20") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "20"))
                                                                  (rule "cnf_rightDist" (formula "21") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "21"))
                                                                  (rule "andLeft" (formula "21"))
                                                                  (rule "commute_or_2" (formula "21") (term "0"))
                                                                  (rule "shift_paren_or" (formula "22") (term "0"))
                                                                  (rule "commute_or_2" (formula "22") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "22") (term "1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "22") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "22") (term "1,0,1,0"))
                                                                  (rule "times_zero_1" (formula "22") (term "0,1,0"))
                                                                  (rule "leq_literals" (formula "22") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "22"))
                                                                  (rule "true_left" (formula "22"))
                                                                  (rule "shift_paren_or" (formula "21") (term "0,0"))
                                                                  (rule "commute_or" (formula "21") (term "0,0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "21") (term "0,0"))
                                                                  (rule "add_literals" (formula "21") (term "1,1,0,0"))
                                                                  (rule "qeq_literals" (formula "21") (term "1,0,0"))
                                                                  (builtin "One Step Simplification" (formula "21"))
                                                                  (rule "true_left" (formula "21"))
                                                                  (rule "cnf_rightDist" (formula "41") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "41") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "41"))
                                                                  (rule "andLeft" (formula "41"))
                                                                  (rule "commute_or" (formula "42") (term "0"))
                                                                  (rule "shift_paren_or" (formula "41") (term "0"))
                                                                  (rule "commute_or_2" (formula "41") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "41"))
                                                                  (rule "commute_or" (formula "42") (term "1,1,0"))
                                                                  (rule "shift_paren_or" (formula "41") (term "0,0"))
                                                                  (rule "commute_or" (formula "41") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "41"))
                                                                  (rule "cnf_rightDist" (formula "42") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "42"))
                                                                  (rule "andLeft" (formula "42"))
                                                                  (rule "commute_or_2" (formula "42") (term "0"))
                                                                  (rule "shift_paren_or" (formula "43") (term "0"))
                                                                  (rule "commute_or_2" (formula "43") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "43") (term "0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "43") (term "1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "43") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "43") (term "1,0,1,0"))
                                                                  (rule "times_zero_1" (formula "43") (term "0,1,0"))
                                                                  (rule "leq_literals" (formula "43") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "43"))
                                                                  (rule "true_left" (formula "43"))
                                                                  (rule "shift_paren_or" (formula "42") (term "0,0"))
                                                                  (rule "commute_or" (formula "42") (term "0,0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "42") (term "0,0"))
                                                                  (rule "add_literals" (formula "42") (term "1,1,0,0"))
                                                                  (rule "qeq_literals" (formula "42") (term "1,0,0"))
                                                                  (builtin "One Step Simplification" (formula "42"))
                                                                  (rule "true_left" (formula "42"))
                                                                  (rule "seqGetAlphaCast" (formula "57") (term "0"))
                                                                  (rule "castDel" (formula "1") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "seqGetAlphaCast" (formula "57") (term "1"))
                                                                  (rule "castDel" (formula "1") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "lenNonNegative" (formula "18") (term "0"))
                                                                  (rule "inEqSimp_commuteLeq" (formula "18"))
                                                                  (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                                                                  (rule "qeq_literals" (formula "18"))
                                                                  (rule "true_left" (formula "18"))
                                                                  (rule "arrayLengthNotNegative" (formula "1") (term "0"))
                                                                  (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "2"))
                                                                  (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                                                                  (rule "leq_literals" (formula "3"))
                                                                  (rule "true_left" (formula "3"))
                                                                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                                                  (rule "qeq_literals" (formula "2"))
                                                                  (rule "true_left" (formula "2"))
                                                                  (rule "arrayLengthIsAShort" (formula "40") (term "1"))
                                                                  (builtin "One Step Simplification" (formula "40"))
                                                                  (rule "true_left" (formula "40"))
                                                                  (rule "arrayLengthNotNegative" (formula "40") (term "1"))
                                                                  (rule "inEqSimp_subsumption1" (formula "40") (ifseqformula "38"))
                                                                  (rule "leq_literals" (formula "40") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "40"))
                                                                  (rule "true_left" (formula "40"))
                                                                  (rule "ifthenelse_split" (formula "7") (term "0"))
                                                                  (branch "messages[iv_23].<created> = TRUE TRUE"
                                                                     (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "8"))
                                                                     (rule "applyEqReverse" (formula "49") (term "1") (ifseqformula "8"))
                                                                     (rule "hideAuxiliaryEq" (formula "8"))
                                                                     (rule "replace_known_left" (formula "6") (term "0,0,0") (ifseqformula "7"))
                                                                     (builtin "One Step Simplification" (formula "6"))
                                                                     (rule "applyEqReverse" (formula "48") (term "0") (ifseqformula "6"))
                                                                     (builtin "One Step Simplification" (formula "48"))
                                                                     (rule "closeTrue" (formula "48"))
                                                                  )
                                                                  (branch "messages[iv_23].<created> = TRUE FALSE"
                                                                     (rule "referencedObjectIsCreatedRight" (formula "42") (ifseqformula "44"))
                                                                     (rule "close" (formula "42") (ifseqformula "27"))
                                                                  )
                                                               )
                                                            )
                                                            (branch "messages[iv_23].length >= 1 FALSE"
                                                               (rule "inEqSimp_geqRight" (formula "42"))
                                                               (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                               (rule "add_literals" (formula "1") (term "0,0"))
                                                               (rule "add_zero_left" (formula "1") (term "0"))
                                                               (rule "inEqSimp_homoInEq1" (formula "11"))
                                                               (rule "mul_literals" (formula "11") (term "1,0"))
                                                               (rule "add_zero_right" (formula "11") (term "0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "11"))
                                                               (rule "mul_literals" (formula "11") (term "1"))
                                                               (rule "inEqSimp_contradInEq1" (formula "11") (ifseqformula "10"))
                                                               (rule "qeq_literals" (formula "11") (term "0"))
                                                               (builtin "One Step Simplification" (formula "11"))
                                                               (rule "closeFalse" (formula "11"))
                                                            )
                                                         )
                                                         (branch "messages[i_2].length >= 1 FALSE"
                                                            (rule "eqSymm" (formula "22"))
                                                            (rule "inEqSimp_geqRight" (formula "41"))
                                                            (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0"))
                                                            (rule "applyEqRigid" (formula "22") (term "1,1,0") (ifseqformula "23"))
                                                            (rule "applyEq" (formula "20") (term "0") (ifseqformula "23"))
                                                            (rule "qeq_literals" (formula "20"))
                                                            (rule "true_left" (formula "20"))
                                                            (rule "applyEq" (formula "23") (term "1,1,0") (ifseqformula "22"))
                                                            (rule "applyEqRigid" (formula "20") (term "1") (ifseqformula "22"))
                                                            (rule "commute_and" (formula "9") (term "0,0"))
                                                            (rule "commute_or" (formula "23") (term "0,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "23") (term "0"))
                                                            (rule "add_zero_right" (formula "23") (term "1,1,0"))
                                                            (rule "qeq_literals" (formula "23") (term "1,0"))
                                                            (builtin "One Step Simplification" (formula "23"))
                                                            (rule "true_left" (formula "23"))
                                                            (rule "arrayLengthIsAShort" (formula "38") (term "1,0,0,0"))
                                                            (builtin "One Step Simplification" (formula "38"))
                                                            (rule "true_left" (formula "38"))
                                                            (rule "arrayLengthNotNegative" (formula "38") (term "1,0,0,0"))
                                                            (rule "inEqSimp_antiSymm" (formula "38") (ifseqformula "1"))
                                                            (rule "applyEq" (formula "40") (term "1,0,0,0") (ifseqformula "38"))
                                                            (rule "seqDef_lower_equals_upper" (formula "40") (term "0,0,0"))
                                                            (rule "applyEq" (formula "41") (term "1,0,0,0,1,0,0") (ifseqformula "38"))
                                                            (rule "seqDef_lower_equals_upper" (formula "41") (term "0,0,0,1,0,0"))
                                                            (rule "eqSymm" (formula "41") (term "1,0,0"))
                                                            (rule "applyEq" (formula "39") (term "0") (ifseqformula "38"))
                                                            (rule "qeq_literals" (formula "39"))
                                                            (rule "true_left" (formula "39"))
                                                            (rule "applyEq" (formula "21") (term "1,1,1,0,0,1,0,0") (ifseqformula "38"))
                                                            (rule "add_literals" (formula "21") (term "1,1,0,0,1,0,0"))
                                                            (rule "applyEq" (formula "1") (term "0") (ifseqformula "38"))
                                                            (rule "leq_literals" (formula "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "commute_or" (formula "39") (term "0,0"))
                                                            (rule "commute_or" (formula "20") (term "0,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "20") (term "0"))
                                                            (rule "add_zero_right" (formula "20") (term "1,1,0"))
                                                            (rule "qeq_literals" (formula "20") (term "1,0"))
                                                            (builtin "One Step Simplification" (formula "20"))
                                                            (rule "true_left" (formula "20"))
                                                            (rule "allLeft" (formula "27") (inst "t=iv_23"))
                                                            (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                                                            (rule "inEqSimp_contradInEq1" (formula "27") (term "1,0") (ifseqformula "12"))
                                                            (rule "qeq_literals" (formula "27") (term "0,1,0"))
                                                            (builtin "One Step Simplification" (formula "27"))
                                                            (rule "inEqSimp_contradInEq1" (formula "27") (term "1") (ifseqformula "14"))
                                                            (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1"))
                                                            (rule "add_literals" (formula "27") (term "1,1,0,0,1"))
                                                            (rule "times_zero_1" (formula "27") (term "1,0,0,1"))
                                                            (rule "add_zero_right" (formula "27") (term "0,0,1"))
                                                            (rule "leq_literals" (formula "27") (term "0,1"))
                                                            (builtin "One Step Simplification" (formula "27"))
                                                            (rule "notLeft" (formula "27"))
                                                            (rule "replace_known_right" (formula "6") (term "0,0,0,0") (ifseqformula "39"))
                                                            (builtin "One Step Simplification" (formula "6"))
                                                            (rule "replace_known_right" (formula "8") (term "0,1,0,0") (ifseqformula "39"))
                                                            (builtin "One Step Simplification" (formula "8"))
                                                            (rule "ifthenelse_negated" (formula "6") (term "0"))
                                                            (rule "ifthenelse_negated" (formula "8") (term "0"))
                                                            (rule "narrowSelectArrayType" (formula "6") (term "2,0") (ifseqformula "31") (ifseqformula "39"))
                                                            (rule "narrowSelectArrayType" (formula "8") (term "2,0") (ifseqformula "28") (ifseqformula "39"))
                                                            (rule "narrowSelectArrayType" (formula "8") (term "1,0") (ifseqformula "24") (ifseqformula "39"))
                                                            (rule "ifthenelse_split" (formula "10") (term "0"))
                                                            (branch "messages[iv_23].length >= 1 TRUE"
                                                               (rule "replace_known_left" (formula "45") (term "0,1") (ifseqformula "11"))
                                                               (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "11")))
                                                               (rule "ifthenelse_split" (formula "7") (term "0"))
                                                               (branch "messages[iv_23] = x_arr_2 TRUE"
                                                                  (rule "referencedObjectIsCreatedRightEQ" (formula "51") (ifseqformula "7") (ifseqformula "52"))
                                                                  (rule "close" (formula "51") (ifseqformula "26"))
                                                               )
                                                               (branch "messages[iv_23] = x_arr_2 FALSE"
                                                                  (rule "applyEqReverse" (formula "6") (term "0,0,0,0") (ifseqformula "7"))
                                                                  (rule "applyEqReverse" (formula "8") (term "0,0,0") (ifseqformula "7"))
                                                                  (rule "hideAuxiliaryEq" (formula "7"))
                                                                  (rule "ifthenelse_to_or_left" (formula "38") (term "0,0,0"))
                                                                  (rule "eqSymm" (formula "38") (term "1,1,0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "38") (term "0,0,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "38") (term "1,0,0,0,0,0,0,0,0"))
                                                                  (rule "add_zero_right" (formula "38") (term "0,0,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "38") (term "1,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "add_literals" (formula "38") (term "0,0,0,1,0,0,0,0,0"))
                                                                  (rule "add_zero_left" (formula "38") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0,0,0,0"))
                                                                  (rule "commute_or" (formula "38") (term "0,0"))
                                                                  (rule "commute_or_2" (formula "38") (term "0"))
                                                                  (rule "commute_or_2" (formula "38") (term "0,1,0"))
                                                                  (rule "commute_or" (formula "38") (term "1,1,0"))
                                                                  (rule "commute_or" (formula "38") (term "0,0,1,0"))
                                                                  (rule "cnf_rightDist" (formula "38") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "38") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "38"))
                                                                  (rule "andLeft" (formula "38"))
                                                                  (rule "commute_or" (formula "39") (term "0"))
                                                                  (rule "shift_paren_or" (formula "38") (term "0"))
                                                                  (rule "commute_or_2" (formula "38") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "38"))
                                                                  (rule "commute_or" (formula "39") (term "1,1,0"))
                                                                  (rule "shift_paren_or" (formula "38") (term "0,0"))
                                                                  (rule "commute_or" (formula "38") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "38"))
                                                                  (rule "cnf_rightDist" (formula "39") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "39"))
                                                                  (rule "andLeft" (formula "39"))
                                                                  (rule "commute_or_2" (formula "39") (term "0"))
                                                                  (rule "shift_paren_or" (formula "40") (term "0"))
                                                                  (rule "commute_or_2" (formula "40") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "40") (term "0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "40") (term "1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "40") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "40") (term "1,0,1,0"))
                                                                  (rule "times_zero_1" (formula "40") (term "0,1,0"))
                                                                  (rule "leq_literals" (formula "40") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "40"))
                                                                  (rule "true_left" (formula "40"))
                                                                  (rule "shift_paren_or" (formula "39") (term "0,0"))
                                                                  (rule "commute_or" (formula "39") (term "0,0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "39") (term "0,0"))
                                                                  (rule "add_zero_right" (formula "39") (term "1,1,0,0"))
                                                                  (rule "qeq_literals" (formula "39") (term "1,0,0"))
                                                                  (builtin "One Step Simplification" (formula "39"))
                                                                  (rule "true_left" (formula "39"))
                                                                  (rule "seqGetAlphaCast" (formula "54") (term "1"))
                                                                  (rule "castDel" (formula "1") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "seqGetAlphaCast" (formula "54") (term "0"))
                                                                  (rule "castDel" (formula "1") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "lenNonNegative" (formula "18") (term "0"))
                                                                  (rule "inEqSimp_commuteLeq" (formula "18"))
                                                                  (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                                                                  (rule "qeq_literals" (formula "18"))
                                                                  (rule "true_left" (formula "18"))
                                                                  (rule "arrayLengthIsAShort" (formula "1") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "arrayLengthNotNegative" (formula "1") (term "0"))
                                                                  (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "2"))
                                                                  (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "1"))
                                                                  (rule "qeq_literals" (formula "2"))
                                                                  (rule "true_left" (formula "2"))
                                                                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                                                  (rule "leq_literals" (formula "2"))
                                                                  (rule "true_left" (formula "2"))
                                                                  (rule "arrayLengthIsAShort" (formula "37") (term "1"))
                                                                  (builtin "One Step Simplification" (formula "37"))
                                                                  (rule "true_left" (formula "37"))
                                                                  (rule "arrayLengthNotNegative" (formula "37") (term "1"))
                                                                  (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "35"))
                                                                  (rule "leq_literals" (formula "37") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "37"))
                                                                  (rule "true_left" (formula "37"))
                                                                  (rule "ifthenelse_split" (formula "7") (term "0"))
                                                                  (branch "messages[iv_23].<created> = TRUE TRUE"
                                                                     (rule "applyEqReverse" (formula "46") (term "1") (ifseqformula "8"))
                                                                     (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "8"))
                                                                     (rule "hideAuxiliaryEq" (formula "8"))
                                                                     (rule "replace_known_left" (formula "6") (term "0,0,0") (ifseqformula "7"))
                                                                     (builtin "One Step Simplification" (formula "6"))
                                                                     (rule "applyEqReverse" (formula "45") (term "0") (ifseqformula "6"))
                                                                     (builtin "One Step Simplification" (formula "45"))
                                                                     (rule "closeTrue" (formula "45"))
                                                                  )
                                                                  (branch "messages[iv_23].<created> = TRUE FALSE"
                                                                     (rule "referencedObjectIsCreatedRight" (formula "39") (ifseqformula "41"))
                                                                     (rule "close" (formula "39") (ifseqformula "24"))
                                                                  )
                                                               )
                                                            )
                                                            (branch "messages[iv_23].length >= 1 FALSE"
                                                               (rule "inEqSimp_geqRight" (formula "39"))
                                                               (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                               (rule "add_literals" (formula "1") (term "0,0"))
                                                               (rule "add_zero_left" (formula "1") (term "0"))
                                                               (rule "inEqSimp_homoInEq1" (formula "11"))
                                                               (rule "times_zero_2" (formula "11") (term "1,0"))
                                                               (rule "add_zero_right" (formula "11") (term "0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "11"))
                                                               (rule "mul_literals" (formula "11") (term "1"))
                                                               (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "11"))
                                                               (rule "qeq_literals" (formula "10") (term "0"))
                                                               (builtin "One Step Simplification" (formula "10"))
                                                               (rule "closeFalse" (formula "10"))
                                                            )
                                                         )
                                                      )
                                                      (branch "result_0.length >= 1 FALSE"
                                                         (rule "replace_known_right" (formula "39") (term "0,1,1,0") (ifseqformula "40"))
                                                         (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_geqRight" (formula "40"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "allLeft" (formula "31") (inst "t=i_2"))
                                                         (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "31") (term "1,0") (ifseqformula "25"))
                                                         (rule "qeq_literals" (formula "31") (term "0,1,0"))
                                                         (builtin "One Step Simplification" (formula "31"))
                                                         (rule "inEqSimp_contradInEq1" (formula "31") (term "1") (ifseqformula "16"))
                                                         (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,1"))
                                                         (rule "add_literals" (formula "31") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "31") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "31") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "31") (term "0,1"))
                                                         (builtin "One Step Simplification" (formula "31"))
                                                         (rule "notLeft" (formula "31"))
                                                         (rule "lenNonNegative" (formula "21") (term "0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "21"))
                                                         (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                                         (rule "seqGetAlphaCast" (formula "21") (term "0,0"))
                                                         (rule "castedGetAny" (formula "21") (term "0"))
                                                         (builtin "One Step Simplification" (formula "21"))
                                                         (rule "true_left" (formula "21"))
                                                         (rule "ifthenelse_split" (formula "23") (term "0"))
                                                         (branch "messages[i_2].length >= 1 TRUE"
                                                            (rule "eqSymm" (formula "24"))
                                                            (rule "applyEq" (formula "20") (term "0") (ifseqformula "24"))
                                                            (rule "applyEq" (formula "25") (term "1,1,0") (ifseqformula "24"))
                                                            (rule "applyEq" (formula "22") (term "1,1,0") (ifseqformula "24"))
                                                            (rule "applyEq" (formula "21") (term "1") (ifseqformula "24"))
                                                            (rule "inEqSimp_subsumption1" (formula "20") (ifseqformula "23"))
                                                            (rule "leq_literals" (formula "20") (term "0"))
                                                            (builtin "One Step Simplification" (formula "20"))
                                                            (rule "true_left" (formula "20"))
                                                            (rule "commute_and" (formula "9") (term "0,0"))
                                                            (rule "commute_or" (formula "24") (term "0,0"))
                                                            (rule "lenNonNegative" (formula "39") (term "0"))
                                                            (rule "inEqSimp_commuteLeq" (formula "39"))
                                                            (rule "arrayLengthIsAShort" (formula "40") (term "1,0,0,0"))
                                                            (builtin "One Step Simplification" (formula "40"))
                                                            (rule "true_left" (formula "40"))
                                                            (rule "arrayLengthNotNegative" (formula "40") (term "1,0,0,0"))
                                                            (rule "inEqSimp_subsumption1" (formula "40") (ifseqformula "22"))
                                                            (rule "leq_literals" (formula "40") (term "0"))
                                                            (builtin "One Step Simplification" (formula "40"))
                                                            (rule "true_left" (formula "40"))
                                                            (rule "commute_or" (formula "21") (term "0,0"))
                                                            (rule "commute_or" (formula "41") (term "0,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "41") (term "0"))
                                                            (rule "add_zero_right" (formula "41") (term "1,1,0"))
                                                            (rule "qeq_literals" (formula "41") (term "1,0"))
                                                            (builtin "One Step Simplification" (formula "41"))
                                                            (rule "true_left" (formula "41"))
                                                            (rule "allLeft" (formula "31") (inst "t=iv_23"))
                                                            (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                                                            (rule "inEqSimp_contradInEq1" (formula "31") (term "1") (ifseqformula "15"))
                                                            (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,1"))
                                                            (rule "add_literals" (formula "31") (term "1,1,0,0,1"))
                                                            (rule "times_zero_1" (formula "31") (term "1,0,0,1"))
                                                            (rule "add_zero_right" (formula "31") (term "0,0,1"))
                                                            (rule "leq_literals" (formula "31") (term "0,1"))
                                                            (builtin "One Step Simplification" (formula "31"))
                                                            (rule "inEqSimp_contradInEq1" (formula "31") (term "1") (ifseqformula "13"))
                                                            (rule "qeq_literals" (formula "31") (term "0,1"))
                                                            (builtin "One Step Simplification" (formula "31"))
                                                            (rule "notLeft" (formula "31"))
                                                            (rule "replace_known_right" (formula "7") (term "0,0,0,0") (ifseqformula "41"))
                                                            (builtin "One Step Simplification" (formula "7"))
                                                            (rule "replace_known_right" (formula "9") (term "0,1,0,0") (ifseqformula "41"))
                                                            (builtin "One Step Simplification" (formula "9"))
                                                            (rule "ifthenelse_negated" (formula "7") (term "0"))
                                                            (rule "ifthenelse_negated" (formula "9") (term "0"))
                                                            (rule "narrowSelectArrayType" (formula "7") (term "2,0") (ifseqformula "35") (ifseqformula "41"))
                                                            (rule "narrowSelectArrayType" (formula "9") (term "2,0") (ifseqformula "32") (ifseqformula "41"))
                                                            (rule "narrowSelectArrayType" (formula "9") (term "1,0") (ifseqformula "28") (ifseqformula "41"))
                                                            (rule "ifthenelse_split" (formula "11") (term "0"))
                                                            (branch "messages[iv_23].length >= 1 TRUE"
                                                               (rule "replace_known_left" (formula "47") (term "0,1") (ifseqformula "12"))
                                                               (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "12")))
                                                               (rule "ifthenelse_split" (formula "8") (term "0"))
                                                               (branch "messages[iv_23] = x_arr_2 TRUE"
                                                                  (rule "referencedObjectIsCreatedRightEQ" (formula "53") (ifseqformula "8") (ifseqformula "54"))
                                                                  (rule "close" (formula "53") (ifseqformula "30"))
                                                               )
                                                               (branch "messages[iv_23] = x_arr_2 FALSE"
                                                                  (rule "applyEqReverse" (formula "7") (term "0,0,0,0") (ifseqformula "8"))
                                                                  (rule "applyEqReverse" (formula "9") (term "0,0,0") (ifseqformula "8"))
                                                                  (rule "hideAuxiliaryEq" (formula "8"))
                                                                  (rule "ifthenelse_to_or_left" (formula "24") (term "0,0,0"))
                                                                  (rule "eqSymm" (formula "24") (term "1,1,0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "24") (term "0,0,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,0,0,0"))
                                                                  (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,0,0,0"))
                                                                  (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0,0,0,0"))
                                                                  (rule "add_zero_right" (formula "24") (term "0,0,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0,0"))
                                                                  (rule "commute_or" (formula "24") (term "0,0"))
                                                                  (rule "commute_or_2" (formula "24") (term "0"))
                                                                  (rule "commute_or" (formula "24") (term "1,1,0"))
                                                                  (rule "commute_or_2" (formula "24") (term "0,1,0"))
                                                                  (rule "commute_or" (formula "24") (term "0,0,1,0"))
                                                                  (rule "ifthenelse_to_or_left" (formula "21") (term "0,0,0"))
                                                                  (rule "eqSymm" (formula "21") (term "1,1,0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "21") (term "0,0,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,0,0,0"))
                                                                  (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0,0,0,0"))
                                                                  (rule "add_zero_right" (formula "21") (term "0,0,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0,0"))
                                                                  (rule "commute_or" (formula "21") (term "0,0"))
                                                                  (rule "commute_or_2" (formula "21") (term "0"))
                                                                  (rule "commute_or" (formula "21") (term "1,1,0"))
                                                                  (rule "commute_or_2" (formula "21") (term "0,1,0"))
                                                                  (rule "commute_or" (formula "21") (term "0,0,1,0"))
                                                                  (rule "cnf_rightDist" (formula "24") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "24") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "24"))
                                                                  (rule "andLeft" (formula "24"))
                                                                  (rule "commute_or" (formula "25") (term "0"))
                                                                  (rule "shift_paren_or" (formula "24") (term "0"))
                                                                  (rule "commute_or_2" (formula "24") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "24"))
                                                                  (rule "commute_or" (formula "25") (term "1,1,0"))
                                                                  (rule "shift_paren_or" (formula "24") (term "0,0"))
                                                                  (rule "commute_or" (formula "24") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "24"))
                                                                  (rule "cnf_rightDist" (formula "25") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "25"))
                                                                  (rule "andLeft" (formula "25"))
                                                                  (rule "commute_or_2" (formula "25") (term "0"))
                                                                  (rule "shift_paren_or" (formula "26") (term "0"))
                                                                  (rule "commute_or_2" (formula "26") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "26") (term "0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "26") (term "1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "26") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "26") (term "1,0,1,0"))
                                                                  (rule "times_zero_1" (formula "26") (term "0,1,0"))
                                                                  (rule "leq_literals" (formula "26") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "26"))
                                                                  (rule "true_left" (formula "26"))
                                                                  (rule "shift_paren_or" (formula "25") (term "0,0"))
                                                                  (rule "commute_or" (formula "25") (term "0,0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "25") (term "0,0"))
                                                                  (rule "add_zero_right" (formula "25") (term "1,1,0,0"))
                                                                  (rule "qeq_literals" (formula "25") (term "1,0,0"))
                                                                  (builtin "One Step Simplification" (formula "25"))
                                                                  (rule "true_left" (formula "25"))
                                                                  (rule "cnf_rightDist" (formula "21") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "21") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "21"))
                                                                  (rule "andLeft" (formula "21"))
                                                                  (rule "commute_or" (formula "22") (term "0"))
                                                                  (rule "shift_paren_or" (formula "21") (term "0"))
                                                                  (rule "commute_or_2" (formula "21") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "21"))
                                                                  (rule "commute_or" (formula "22") (term "1,1,0"))
                                                                  (rule "shift_paren_or" (formula "21") (term "0,0"))
                                                                  (rule "commute_or" (formula "21") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "21"))
                                                                  (rule "cnf_rightDist" (formula "22") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "22"))
                                                                  (rule "andLeft" (formula "22"))
                                                                  (rule "commute_or_2" (formula "22") (term "0"))
                                                                  (rule "shift_paren_or" (formula "23") (term "0"))
                                                                  (rule "commute_or_2" (formula "23") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "23") (term "0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "23") (term "1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "23") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "23") (term "1,0,1,0"))
                                                                  (rule "times_zero_1" (formula "23") (term "0,1,0"))
                                                                  (rule "leq_literals" (formula "23") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "23"))
                                                                  (rule "true_left" (formula "23"))
                                                                  (rule "shift_paren_or" (formula "22") (term "0,0"))
                                                                  (rule "commute_or" (formula "22") (term "0,0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0,0"))
                                                                  (rule "add_literals" (formula "22") (term "1,1,0,0"))
                                                                  (rule "qeq_literals" (formula "22") (term "1,0,0"))
                                                                  (builtin "One Step Simplification" (formula "22"))
                                                                  (rule "true_left" (formula "22"))
                                                                  (rule "seqGetAlphaCast" (formula "56") (term "0"))
                                                                  (rule "castDel" (formula "1") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "seqGetAlphaCast" (formula "56") (term "1"))
                                                                  (rule "castDel" (formula "1") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "lenNonNegative" (formula "19") (term "0"))
                                                                  (rule "inEqSimp_commuteLeq" (formula "19"))
                                                                  (rule "applyEqRigid" (formula "19") (term "0") (ifseqformula "20"))
                                                                  (rule "qeq_literals" (formula "19"))
                                                                  (rule "true_left" (formula "19"))
                                                                  (rule "arrayLengthNotNegative" (formula "2") (term "0"))
                                                                  (rule "inEqSimp_antiSymm" (formula "2") (ifseqformula "3"))
                                                                  (rule "applyEq" (formula "4") (term "0") (ifseqformula "2"))
                                                                  (rule "leq_literals" (formula "4"))
                                                                  (rule "true_left" (formula "4"))
                                                                  (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
                                                                  (rule "qeq_literals" (formula "3"))
                                                                  (rule "true_left" (formula "3"))
                                                                  (rule "ifthenelse_split" (formula "8") (term "0"))
                                                                  (branch "messages[iv_23].<created> = TRUE TRUE"
                                                                     (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "9"))
                                                                     (rule "applyEqReverse" (formula "48") (term "1") (ifseqformula "9"))
                                                                     (rule "hideAuxiliaryEq" (formula "9"))
                                                                     (rule "replace_known_left" (formula "7") (term "0,0,0") (ifseqformula "8"))
                                                                     (builtin "One Step Simplification" (formula "7"))
                                                                     (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "7"))
                                                                     (builtin "One Step Simplification" (formula "47"))
                                                                     (rule "closeTrue" (formula "47"))
                                                                  )
                                                                  (branch "messages[iv_23].<created> = TRUE FALSE"
                                                                     (rule "referencedObjectIsCreatedRight" (formula "41") (ifseqformula "43"))
                                                                     (rule "close" (formula "41") (ifseqformula "28"))
                                                                  )
                                                               )
                                                            )
                                                            (branch "messages[iv_23].length >= 1 FALSE"
                                                               (rule "inEqSimp_geqRight" (formula "41"))
                                                               (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                               (rule "add_literals" (formula "1") (term "0,0"))
                                                               (rule "add_zero_left" (formula "1") (term "0"))
                                                               (rule "inEqSimp_homoInEq1" (formula "12"))
                                                               (rule "times_zero_2" (formula "12") (term "1,0"))
                                                               (rule "add_zero_right" (formula "12") (term "0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "12"))
                                                               (rule "mul_literals" (formula "12") (term "1"))
                                                               (rule "inEqSimp_contradInEq0" (formula "11") (ifseqformula "12"))
                                                               (rule "qeq_literals" (formula "11") (term "0"))
                                                               (builtin "One Step Simplification" (formula "11"))
                                                               (rule "closeFalse" (formula "11"))
                                                            )
                                                         )
                                                         (branch "messages[i_2].length >= 1 FALSE"
                                                            (rule "eqSymm" (formula "23"))
                                                            (rule "inEqSimp_geqRight" (formula "41"))
                                                            (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0"))
                                                            (rule "applyEqRigid" (formula "21") (term "0") (ifseqformula "24"))
                                                            (rule "qeq_literals" (formula "21"))
                                                            (rule "true_left" (formula "21"))
                                                            (rule "applyEq" (formula "24") (term "1,1,0") (ifseqformula "23"))
                                                            (rule "applyEq" (formula "22") (term "1,1,0") (ifseqformula "23"))
                                                            (rule "applyEqRigid" (formula "21") (term "1") (ifseqformula "23"))
                                                            (rule "commute_and" (formula "10") (term "0,0"))
                                                            (rule "commute_or" (formula "24") (term "0,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "24") (term "0"))
                                                            (rule "add_zero_right" (formula "24") (term "1,1,0"))
                                                            (rule "qeq_literals" (formula "24") (term "1,0"))
                                                            (builtin "One Step Simplification" (formula "24"))
                                                            (rule "true_left" (formula "24"))
                                                            (rule "arrayLengthNotNegative" (formula "38") (term "1,0,0,0"))
                                                            (rule "inEqSimp_antiSymm" (formula "38") (ifseqformula "1"))
                                                            (rule "applyEq" (formula "41") (term "1,0,0,0,1,0,0") (ifseqformula "38"))
                                                            (rule "seqDef_lower_equals_upper" (formula "41") (term "0,0,0,1,0,0"))
                                                            (rule "eqSymm" (formula "41") (term "1,0,0"))
                                                            (rule "applyEq" (formula "1") (term "0") (ifseqformula "38"))
                                                            (rule "leq_literals" (formula "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "applyEq" (formula "39") (term "1,0,0,0") (ifseqformula "37"))
                                                            (rule "seqDef_lower_equals_upper" (formula "39") (term "0,0,0"))
                                                            (rule "applyEq" (formula "21") (term "1,1,1,0,0,1,0,0") (ifseqformula "37"))
                                                            (rule "add_zero_right" (formula "21") (term "1,1,0,0,1,0,0"))
                                                            (rule "applyEq" (formula "38") (term "0") (ifseqformula "37"))
                                                            (rule "qeq_literals" (formula "38"))
                                                            (rule "true_left" (formula "38"))
                                                            (rule "commute_or" (formula "39") (term "0,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "39") (term "0"))
                                                            (rule "add_zero_right" (formula "39") (term "1,1,0"))
                                                            (rule "qeq_literals" (formula "39") (term "1,0"))
                                                            (builtin "One Step Simplification" (formula "39"))
                                                            (rule "true_left" (formula "39"))
                                                            (rule "commute_or" (formula "21") (term "0,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "21") (term "0"))
                                                            (rule "add_literals" (formula "21") (term "1,1,0"))
                                                            (rule "qeq_literals" (formula "21") (term "1,0"))
                                                            (builtin "One Step Simplification" (formula "21"))
                                                            (rule "true_left" (formula "21"))
                                                            (rule "allLeft" (formula "28") (inst "t=iv_23"))
                                                            (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                                                            (rule "inEqSimp_contradInEq1" (formula "28") (term "1,0") (ifseqformula "13"))
                                                            (rule "qeq_literals" (formula "28") (term "0,1,0"))
                                                            (builtin "One Step Simplification" (formula "28"))
                                                            (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "15"))
                                                            (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                                                            (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                                                            (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                                                            (rule "add_zero_right" (formula "28") (term "0,0,1"))
                                                            (rule "leq_literals" (formula "28") (term "0,1"))
                                                            (builtin "One Step Simplification" (formula "28"))
                                                            (rule "notLeft" (formula "28"))
                                                            (rule "replace_known_right" (formula "9") (term "0,1,0,0") (ifseqformula "38"))
                                                            (builtin "One Step Simplification" (formula "9"))
                                                            (rule "replace_known_right" (formula "7") (term "0,0,0,0") (ifseqformula "38"))
                                                            (builtin "One Step Simplification" (formula "7"))
                                                            (rule "ifthenelse_negated" (formula "9") (term "0"))
                                                            (rule "ifthenelse_negated" (formula "7") (term "0"))
                                                            (rule "narrowSelectArrayType" (formula "9") (term "1,0") (ifseqformula "25") (ifseqformula "38"))
                                                            (rule "narrowSelectArrayType" (formula "9") (term "2,0") (ifseqformula "29") (ifseqformula "38"))
                                                            (rule "narrowSelectArrayType" (formula "7") (term "2,0") (ifseqformula "32") (ifseqformula "38"))
                                                            (rule "ifthenelse_split" (formula "11") (term "0"))
                                                            (branch "messages[iv_23].length >= 1 TRUE"
                                                               (rule "replace_known_left" (formula "44") (term "0,1") (ifseqformula "12"))
                                                               (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "12")))
                                                               (rule "ifthenelse_split" (formula "8") (term "0"))
                                                               (branch "messages[iv_23] = x_arr_2 TRUE"
                                                                  (rule "referencedObjectIsCreatedRightEQ" (formula "50") (ifseqformula "8") (ifseqformula "51"))
                                                                  (rule "close" (formula "50") (ifseqformula "27"))
                                                               )
                                                               (branch "messages[iv_23] = x_arr_2 FALSE"
                                                                  (rule "applyEqReverse" (formula "9") (term "0,0,0") (ifseqformula "8"))
                                                                  (rule "applyEqReverse" (formula "7") (term "0,0,0,0") (ifseqformula "8"))
                                                                  (rule "hideAuxiliaryEq" (formula "8"))
                                                                  (rule "seqGetAlphaCast" (formula "53") (term "1"))
                                                                  (rule "castDel" (formula "1") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "seqGetAlphaCast" (formula "53") (term "0"))
                                                                  (rule "castDel" (formula "1") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "lenNonNegative" (formula "19") (term "0"))
                                                                  (rule "inEqSimp_commuteLeq" (formula "19"))
                                                                  (rule "applyEqRigid" (formula "19") (term "0") (ifseqformula "20"))
                                                                  (rule "qeq_literals" (formula "19"))
                                                                  (rule "true_left" (formula "19"))
                                                                  (rule "arrayLengthIsAShort" (formula "2") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "2"))
                                                                  (rule "true_left" (formula "2"))
                                                                  (rule "arrayLengthNotNegative" (formula "2") (term "0"))
                                                                  (rule "inEqSimp_antiSymm" (formula "2") (ifseqformula "3"))
                                                                  (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
                                                                  (rule "qeq_literals" (formula "3"))
                                                                  (rule "true_left" (formula "3"))
                                                                  (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "2"))
                                                                  (rule "leq_literals" (formula "3"))
                                                                  (rule "true_left" (formula "3"))
                                                                  (rule "arrayLengthIsAShort" (formula "1") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "arrayLengthNotNegative" (formula "1") (term "0"))
                                                                  (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "2"))
                                                                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                                                  (rule "qeq_literals" (formula "2"))
                                                                  (rule "true_left" (formula "2"))
                                                                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                                                  (rule "leq_literals" (formula "2"))
                                                                  (rule "true_left" (formula "2"))
                                                                  (rule "ifthenelse_split" (formula "8") (term "0"))
                                                                  (branch "messages[iv_23].<created> = TRUE TRUE"
                                                                     (rule "applyEqReverse" (formula "45") (term "1") (ifseqformula "9"))
                                                                     (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "9"))
                                                                     (rule "hideAuxiliaryEq" (formula "9"))
                                                                     (rule "replace_known_left" (formula "7") (term "0,0,0") (ifseqformula "8"))
                                                                     (builtin "One Step Simplification" (formula "7"))
                                                                     (rule "applyEqReverse" (formula "44") (term "0") (ifseqformula "7"))
                                                                     (builtin "One Step Simplification" (formula "44"))
                                                                     (rule "closeTrue" (formula "44"))
                                                                  )
                                                                  (branch "messages[iv_23].<created> = TRUE FALSE"
                                                                     (rule "referencedObjectIsCreatedRight" (formula "38") (ifseqformula "40"))
                                                                     (rule "close" (formula "38") (ifseqformula "25"))
                                                                  )
                                                               )
                                                            )
                                                            (branch "messages[iv_23].length >= 1 FALSE"
                                                               (rule "inEqSimp_geqRight" (formula "38"))
                                                               (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                               (rule "add_literals" (formula "1") (term "0,0"))
                                                               (rule "add_zero_left" (formula "1") (term "0"))
                                                               (rule "inEqSimp_homoInEq1" (formula "12"))
                                                               (rule "mul_literals" (formula "12") (term "1,0"))
                                                               (rule "add_zero_right" (formula "12") (term "0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "12"))
                                                               (rule "mul_literals" (formula "12") (term "1"))
                                                               (rule "inEqSimp_contradInEq0" (formula "11") (ifseqformula "12"))
                                                               (rule "qeq_literals" (formula "11") (term "0"))
                                                               (builtin "One Step Simplification" (formula "11"))
                                                               (rule "closeFalse" (formula "11"))
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                             (branch "CUT: mConcat(SeqseqGet_0, arrConcat(1 + i_2, array2seq2d_1)).length = mConcat(SeqseqGet_0, array2seq_1).length FALSE"
                                                (builtin "One Step Simplification" (formula "52"))
                                                (rule "false_right" (formula "52"))
                                                (rule "ifthenelse_split" (formula "15") (term "0"))
                                                (branch "msg_2.length >= 1 TRUE"
                                                   (rule "eqSymm" (formula "16"))
                                                   (rule "applyEqRigid" (formula "18") (term "1,1,0,0") (ifseqformula "16"))
                                                   (rule "applyEq" (formula "32") (term "1,1,0,0") (ifseqformula "16"))
                                                   (rule "applyEq" (formula "17") (term "1,1,0,0") (ifseqformula "16"))
                                                   (rule "applyEq" (formula "31") (term "1") (ifseqformula "16"))
                                                   (rule "commute_or_2" (formula "22") (term "0"))
                                                   (rule "ifthenelse_split" (formula "33") (term "0"))
                                                   (branch "x_arr_2 = msg_2 TRUE"
                                                      (rule "applyEqReverse" (formula "35") (term "0,0") (ifseqformula "34"))
                                                      (builtin "One Step Simplification" (formula "35"))
                                                      (rule "true_left" (formula "35"))
                                                      (rule "hideAuxiliaryEq" (formula "34"))
                                                      (rule "applyEq" (formula "35") (term "0,1,0,0,0,0") (ifseqformula "33"))
                                                      (rule "applyEq" (formula "35") (term "1,0,0,0,0,0,0,0") (ifseqformula "33"))
                                                      (rule "applyEq" (formula "14") (term "1,0,0,0,0,0,0") (ifseqformula "33"))
                                                      (rule "applyEq" (formula "17") (term "1,0,0,1,0,1,0") (ifseqformula "33"))
                                                      (rule "applyEq" (formula "17") (term "0,1,0,0,0,1,0,1,0") (ifseqformula "33"))
                                                      (rule "applyEq" (formula "18") (term "1,0,0,0,0,1,0,1,0") (ifseqformula "33"))
                                                      (rule "applyEq" (formula "14") (term "1,0,0,0,0,0") (ifseqformula "33"))
                                                      (rule "applyEq" (formula "35") (term "1,0,0,0,0,0,0,0,0") (ifseqformula "33"))
                                                      (rule "applyEq" (formula "18") (term "1,0,0,0,0,0,0,1,0,1,0") (ifseqformula "33"))
                                                      (rule "applyEq" (formula "47") (term "1,0") (ifseqformula "33"))
                                                      (rule "applyEq" (formula "35") (term "1,0,0,0") (ifseqformula "33"))
                                                      (rule "applyEq" (formula "17") (term "1,0,0,0,0,0,0,1,0,1,0") (ifseqformula "33"))
                                                      (rule "applyEq" (formula "35") (term "1,0,0,0,0,0,0") (ifseqformula "33"))
                                                      (rule "applyEq" (formula "35") (term "1,0,0,0,0,0") (ifseqformula "33"))
                                                      (rule "applyEq" (formula "40") (term "0") (ifseqformula "33"))
                                                      (rule "eqSymm" (formula "40"))
                                                      (rule "applyEq" (formula "18") (term "1,0,0,0,0,0,0,0,1,0,1,0") (ifseqformula "33"))
                                                      (rule "applyEq" (formula "14") (term "1,0,0,0,0,0,0,0") (ifseqformula "33"))
                                                      (rule "applyEq" (formula "14") (term "0,1,0,0,0,0") (ifseqformula "33"))
                                                      (rule "applyEq" (formula "18") (term "0,1,0,0,0,1,0,1,0") (ifseqformula "33"))
                                                      (rule "applyEq" (formula "17") (term "1,0,0,0,0,1,0,1,0") (ifseqformula "33"))
                                                      (rule "applyEq" (formula "18") (term "1,0,0,0,0,0,1,0,1,0") (ifseqformula "33"))
                                                      (rule "applyEq" (formula "4") (term "1,0,0") (ifseqformula "33"))
                                                      (rule "applyEq" (formula "17") (term "1,0,0,0,0,0,1,0,1,0") (ifseqformula "33"))
                                                      (rule "applyEq" (formula "25") (term "0,0") (ifseqformula "33"))
                                                      (rule "applyEq" (formula "47") (term "0") (ifseqformula "33"))
                                                      (rule "applyEq" (formula "17") (term "1,0,0,0,0,0,0,0,1,0,1,0") (ifseqformula "33"))
                                                      (rule "applyEq" (formula "18") (term "1,0,0,1,0,1,0") (ifseqformula "33"))
                                                      (rule "applyEq" (formula "24") (term "0,0") (ifseqformula "33"))
                                                      (rule "applyEq" (formula "14") (term "1,0,0,0") (ifseqformula "33"))
                                                      (rule "applyEq" (formula "14") (term "1,0,0,0,0,0,0,0,0") (ifseqformula "33"))
                                                      (rule "applyEq" (formula "17") (term "1,1,1,0,0,1,0") (ifseqformula "24"))
                                                      (rule "add_zero_right" (formula "17") (term "1,1,0,0,1,0"))
                                                      (rule "applyEqRigid" (formula "32") (term "1,1,1,0,0,1,0") (ifseqformula "24"))
                                                      (rule "add_zero_right" (formula "32") (term "1,1,0,0,1,0"))
                                                      (rule "applyEqRigid" (formula "17") (term "1,1,0,0") (ifseqformula "24"))
                                                      (rule "applyEq" (formula "18") (term "1,1,1,0,0,1,0") (ifseqformula "24"))
                                                      (rule "add_zero_right" (formula "18") (term "1,1,0,0,1,0"))
                                                      (rule "eqSymm" (formula "18") (term "1,0"))
                                                      (rule "applyEq" (formula "32") (term "1,1,0,0") (ifseqformula "24"))
                                                      (rule "applyEqRigid" (formula "15") (term "0") (ifseqformula "24"))
                                                      (rule "qeq_literals" (formula "15"))
                                                      (rule "closeFalse" (formula "15"))
                                                   )
                                                   (branch "x_arr_2 = msg_2 FALSE"
                                                      (rule "applyEqReverse" (formula "34") (term "0,0") (ifseqformula "33"))
                                                      (builtin "One Step Simplification" (formula "34"))
                                                      (rule "hideAuxiliaryEq" (formula "33"))
                                                      (rule "lenNonNegative" (formula "31") (term "0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "31"))
                                                      (rule "applyEq" (formula "31") (term "0") (ifseqformula "32"))
                                                      (rule "inEqSimp_subsumption1" (formula "31") (ifseqformula "15"))
                                                      (rule "leq_literals" (formula "31") (term "0"))
                                                      (builtin "One Step Simplification" (formula "31"))
                                                      (rule "true_left" (formula "31"))
                                                      (rule "lenNonNegative" (formula "19") (term "1"))
                                                      (rule "inEqSimp_commuteLeq" (formula "19"))
                                                      (rule "commute_or_2" (formula "40") (term "0"))
                                                      (rule "commute_or_2" (formula "21") (term "0"))
                                                      (rule "ifthenelse_to_or_left" (formula "17") (term "1,0"))
                                                      (rule "eqSymm" (formula "17") (term "1,1,1,0"))
                                                      (rule "nnf_notAnd" (formula "17") (term "0,0,1,0"))
                                                      (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0,1,0"))
                                                      (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0,1,0"))
                                                      (rule "add_literals" (formula "17") (term "0,0,0,0,0,1,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,1,0"))
                                                      (rule "mul_literals" (formula "17") (term "1,0,0,0,1,0"))
                                                      (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0,1,0"))
                                                      (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,1,0"))
                                                      (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,1,0"))
                                                      (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,1,0"))
                                                      (rule "add_zero_left" (formula "17") (term "0,0,1,0,0,1,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0,1,0"))
                                                      (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,1,0"))
                                                      (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,1,0"))
                                                      (rule "ifthenelse_to_or_left" (formula "33") (term "1,0"))
                                                      (rule "eqSymm" (formula "33") (term "1,1,1,0"))
                                                      (rule "nnf_notAnd" (formula "33") (term "0,0,1,0"))
                                                      (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0,1,0"))
                                                      (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0,1,0"))
                                                      (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0,1,0"))
                                                      (rule "add_literals" (formula "33") (term "0,0,0,1,0,0,1,0"))
                                                      (rule "add_zero_left" (formula "33") (term "0,0,1,0,0,1,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0,1,0"))
                                                      (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0,1,0"))
                                                      (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0,1,0"))
                                                      (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0,1,0"))
                                                      (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0,1,0"))
                                                      (rule "add_literals" (formula "33") (term "0,0,0,0,0,1,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0,1,0"))
                                                      (rule "mul_literals" (formula "33") (term "1,0,0,0,1,0"))
                                                      (rule "ifthenelse_to_or_left" (formula "18") (term "1,0"))
                                                      (rule "eqSymm" (formula "18") (term "1,0,1,0"))
                                                      (rule "eqSymm" (formula "18") (term "1,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "18"))
                                                      (rule "nnf_notAnd" (formula "18") (term "0,0,1,0"))
                                                      (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0,1,0"))
                                                      (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,1,0"))
                                                      (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,1,0"))
                                                      (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,1,0"))
                                                      (rule "add_zero_left" (formula "18") (term "0,0,1,0,0,1,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0,1,0"))
                                                      (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,1,0"))
                                                      (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,1,0"))
                                                      (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0,1,0"))
                                                      (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0,1,0"))
                                                      (rule "add_literals" (formula "18") (term "0,0,0,0,0,1,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,1,0"))
                                                      (rule "mul_literals" (formula "18") (term "1,0,0,0,1,0"))
                                                      (rule "nnf_notAnd" (formula "18") (term "0,1,1,1,0"))
                                                      (rule "inEqSimp_notLeq" (formula "18") (term "1,0,1,1,1,0"))
                                                      (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,1,1,1,0"))
                                                      (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,1,1,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,1,1,1,0"))
                                                      (rule "add_literals" (formula "18") (term "0,0,0,1,0,1,1,1,0"))
                                                      (rule "add_zero_left" (formula "18") (term "0,0,1,0,1,1,1,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,1,1,1,0"))
                                                      (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,1,1,1,0"))
                                                      (rule "polySimp_elimOne" (formula "18") (term "1,1,0,1,1,1,0"))
                                                      (rule "inEqSimp_notGeq" (formula "18") (term "0,0,1,1,1,0"))
                                                      (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,1,1,1,0"))
                                                      (rule "add_literals" (formula "18") (term "0,0,0,0,1,1,1,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,1,1,1,0"))
                                                      (rule "mul_literals" (formula "18") (term "1,0,0,1,1,1,0"))
                                                      (rule "ifthenelse_split" (formula "39") (term "1"))
                                                      (branch "result_0.length >= 1 TRUE"
                                                         (rule "replace_known_left" (formula "41") (term "0,1,1,0") (ifseqformula "39"))
                                                         (builtin "One Step Simplification" (formula "41"))
                                                         (rule "allLeft" (formula "30") (inst "t=i_2"))
                                                         (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "30") (term "1,0") (ifseqformula "24"))
                                                         (rule "qeq_literals" (formula "30") (term "0,1,0"))
                                                         (builtin "One Step Simplification" (formula "30"))
                                                         (rule "inEqSimp_contradInEq1" (formula "30") (term "1") (ifseqformula "12"))
                                                         (rule "inEqSimp_homoInEq1" (formula "30") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,1"))
                                                         (rule "add_literals" (formula "30") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "30") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "30") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "30") (term "0,1"))
                                                         (builtin "One Step Simplification" (formula "30"))
                                                         (rule "notLeft" (formula "30"))
                                                         (rule "seqGetAlphaCast" (formula "20") (term "0,0"))
                                                         (rule "castedGetAny" (formula "20") (term "0"))
                                                         (builtin "One Step Simplification" (formula "20"))
                                                         (rule "true_left" (formula "20"))
                                                         (rule "lenNonNegative" (formula "20") (term "0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "20"))
                                                         (rule "applyEqRigid" (formula "20") (term "0") (ifseqformula "21"))
                                                         (rule "ifthenelse_split" (formula "22") (term "0"))
                                                         (branch "messages[i_2].length >= 1 TRUE"
                                                            (rule "eqSymm" (formula "23"))
                                                            (rule "applyEq" (formula "24") (term "1,1,0") (ifseqformula "23"))
                                                            (rule "applyEq" (formula "19") (term "0") (ifseqformula "23"))
                                                            (rule "applyEq" (formula "21") (term "1,1,0") (ifseqformula "23"))
                                                            (rule "applyEq" (formula "20") (term "1") (ifseqformula "23"))
                                                            (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "22"))
                                                            (rule "leq_literals" (formula "19") (term "0"))
                                                            (builtin "One Step Simplification" (formula "19"))
                                                            (rule "true_left" (formula "19"))
                                                            (rule "commute_and" (formula "5") (term "0,0"))
                                                            (rule "commute_or" (formula "23") (term "0,0"))
                                                            (rule "commute_or" (formula "20") (term "0,0"))
                                                            (rule "arrayLengthIsAShort" (formula "40") (term "1,0,0,0"))
                                                            (builtin "One Step Simplification" (formula "40"))
                                                            (rule "true_left" (formula "40"))
                                                            (rule "arrayLengthNotNegative" (formula "40") (term "1,0,0,0"))
                                                            (rule "inEqSimp_subsumption1" (formula "40") (ifseqformula "21"))
                                                            (rule "leq_literals" (formula "40") (term "0"))
                                                            (builtin "One Step Simplification" (formula "40"))
                                                            (rule "true_left" (formula "40"))
                                                            (rule "lenNonNegative" (formula "40") (term "0"))
                                                            (rule "inEqSimp_commuteLeq" (formula "40"))
                                                            (rule "commute_or" (formula "17") (term "1,1,0"))
                                                            (rule "commute_or_2" (formula "17") (term "0,1,0"))
                                                            (rule "commute_or" (formula "33") (term "1,1,0"))
                                                            (rule "commute_or_2" (formula "33") (term "0,1,0"))
                                                            (rule "commute_or" (formula "42") (term "0,0"))
                                                            (rule "commute_or_2" (formula "18") (term "0,1,0"))
                                                            (rule "commute_or" (formula "18") (term "1,1,0"))
                                                            (rule "allLeft" (formula "30") (inst "t=iv_23"))
                                                            (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                                                            (rule "inEqSimp_contradInEq1" (formula "30") (term "1") (ifseqformula "11"))
                                                            (rule "inEqSimp_homoInEq1" (formula "30") (term "0,1"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,1"))
                                                            (rule "add_literals" (formula "30") (term "1,1,0,0,1"))
                                                            (rule "times_zero_1" (formula "30") (term "1,0,0,1"))
                                                            (rule "add_zero_right" (formula "30") (term "0,0,1"))
                                                            (rule "leq_literals" (formula "30") (term "0,1"))
                                                            (builtin "One Step Simplification" (formula "30"))
                                                            (rule "inEqSimp_contradInEq1" (formula "30") (term "1") (ifseqformula "9"))
                                                            (rule "qeq_literals" (formula "30") (term "0,1"))
                                                            (builtin "One Step Simplification" (formula "30"))
                                                            (rule "notLeft" (formula "30"))
                                                            (rule "replace_known_right" (formula "5") (term "0,1,0,0") (ifseqformula "43"))
                                                            (builtin "One Step Simplification" (formula "5"))
                                                            (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "43"))
                                                            (builtin "One Step Simplification" (formula "3"))
                                                            (rule "ifthenelse_negated" (formula "5") (term "0"))
                                                            (rule "ifthenelse_negated" (formula "3") (term "0"))
                                                            (rule "narrowSelectArrayType" (formula "5") (term "2,0") (ifseqformula "31") (ifseqformula "43"))
                                                            (rule "narrowSelectArrayType" (formula "5") (term "1,0") (ifseqformula "27") (ifseqformula "43"))
                                                            (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "35") (ifseqformula "43"))
                                                            (rule "commute_or" (formula "17") (term "0,0,1,0"))
                                                            (rule "commute_or" (formula "33") (term "0,0,1,0"))
                                                            (rule "commute_or" (formula "18") (term "0,0,1,0"))
                                                            (rule "commute_or_2" (formula "18") (term "0,1,1,0"))
                                                            (rule "ifthenelse_split" (formula "7") (term "0"))
                                                            (branch "messages[iv_23].length >= 1 TRUE"
                                                               (rule "replace_known_left" (formula "49") (term "0,1") (ifseqformula "8"))
                                                               (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "8")))
                                                               (rule "cnf_rightDist" (formula "18") (term "1,1,0"))
                                                               (rule "cnf_rightDist" (formula "18") (term "0"))
                                                               (rule "distr_forallAnd" (formula "18"))
                                                               (rule "andLeft" (formula "18"))
                                                               (rule "commute_or" (formula "19") (term "0"))
                                                               (rule "shift_paren_or" (formula "18") (term "0"))
                                                               (rule "commute_or_2" (formula "18") (term "0,0"))
                                                               (builtin "One Step Simplification" (formula "18"))
                                                               (rule "commute_or" (formula "19") (term "1,1,0"))
                                                               (rule "shift_paren_or" (formula "18") (term "0,0"))
                                                               (rule "commute_or" (formula "18") (term "0,0,0"))
                                                               (builtin "One Step Simplification" (formula "18"))
                                                               (rule "cnf_rightDist" (formula "35") (term "1,1,0"))
                                                               (rule "ifthenelse_split" (formula "4") (term "0"))
                                                               (branch "messages[iv_23] = x_arr_2 TRUE"
                                                                  (rule "referencedObjectIsCreatedRightEQ" (formula "56") (ifseqformula "4") (ifseqformula "57"))
                                                                  (rule "close" (formula "56") (ifseqformula "30"))
                                                               )
                                                               (branch "messages[iv_23] = x_arr_2 FALSE"
                                                                  (rule "applyEqReverse" (formula "5") (term "0,0,0") (ifseqformula "4"))
                                                                  (rule "applyEqReverse" (formula "3") (term "0,0,0,0") (ifseqformula "4"))
                                                                  (rule "hideAuxiliaryEq" (formula "4"))
                                                                  (rule "cnf_rightDist" (formula "18") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "18"))
                                                                  (rule "andLeft" (formula "18"))
                                                                  (rule "commute_or_2" (formula "18") (term "0"))
                                                                  (rule "shift_paren_or" (formula "19") (term "0"))
                                                                  (rule "commute_or_2" (formula "19") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "19") (term "0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "19") (term "1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "19") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "19") (term "1,0,1,0"))
                                                                  (rule "times_zero_1" (formula "19") (term "0,1,0"))
                                                                  (rule "leq_literals" (formula "19") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "19"))
                                                                  (rule "true_left" (formula "19"))
                                                                  (rule "shift_paren_or" (formula "18") (term "0,0"))
                                                                  (rule "cnf_rightDist" (formula "34") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "34"))
                                                                  (rule "andLeft" (formula "34"))
                                                                  (rule "commute_or" (formula "35") (term "0"))
                                                                  (rule "shift_paren_or" (formula "34") (term "0"))
                                                                  (rule "commute_or_2" (formula "34") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "34"))
                                                                  (rule "commute_or" (formula "18") (term "0,0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "18") (term "0,0"))
                                                                  (rule "add_literals" (formula "18") (term "1,1,0,0"))
                                                                  (rule "qeq_literals" (formula "18") (term "1,0,0"))
                                                                  (builtin "One Step Simplification" (formula "18"))
                                                                  (rule "true_left" (formula "18"))
                                                                  (rule "commute_or" (formula "34") (term "1,1,0"))
                                                                  (rule "commute_or" (formula "18") (term "0,0,1,1,0"))
                                                                  (rule "shift_paren_or" (formula "33") (term "0,0"))
                                                                  (rule "commute_or" (formula "33") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "33"))
                                                                  (rule "ifthenelse_to_or_left" (formula "23") (term "0,0,0"))
                                                                  (rule "eqSymm" (formula "23") (term "1,1,0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "23") (term "0,0,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,0,0,0"))
                                                                  (rule "add_zero_left" (formula "23") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0,0,0,0"))
                                                                  (rule "add_zero_right" (formula "23") (term "0,0,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0,0"))
                                                                  (rule "commute_or" (formula "23") (term "0,0"))
                                                                  (rule "commute_or_2" (formula "23") (term "0"))
                                                                  (rule "ifthenelse_to_or_left" (formula "20") (term "0,0,0"))
                                                                  (rule "eqSymm" (formula "20") (term "1,1,0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "20") (term "0,0,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0,0,0,0"))
                                                                  (rule "add_zero_right" (formula "20") (term "0,0,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,0,0,0"))
                                                                  (rule "add_zero_left" (formula "20") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,0,0"))
                                                                  (rule "cnf_rightDist" (formula "34") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "34"))
                                                                  (rule "andLeft" (formula "34"))
                                                                  (rule "commute_or_2" (formula "34") (term "0"))
                                                                  (rule "commute_or" (formula "20") (term "0,0"))
                                                                  (rule "commute_or_2" (formula "20") (term "0"))
                                                                  (rule "ifthenelse_to_or_right" (formula "44") (term "0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "44") (term "0,0,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "44") (term "0,0,0,0,0,0"))
                                                                  (rule "times_zero_1" (formula "44") (term "1,0,0,0,0,0,0,0,0"))
                                                                  (rule "add_zero_right" (formula "44") (term "0,0,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "44") (term "1,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "44") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "44") (term "1,0,0,1,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "44") (term "0,1,0,0,1,0,0,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "44") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "add_literals" (formula "44") (term "0,0,0,1,0,0,0,0,0"))
                                                                  (rule "add_zero_left" (formula "44") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "44") (term "1,1,0,0,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "44") (term "1,1,0,0,0,0,0"))
                                                                  (rule "commute_or_2" (formula "23") (term "0,1,0"))
                                                                  (rule "commute_or" (formula "23") (term "1,1,0"))
                                                                  (rule "shift_paren_or" (formula "35") (term "0"))
                                                                  (rule "commute_or" (formula "44") (term "0,0"))
                                                                  (rule "commute_or_2" (formula "44") (term "0"))
                                                                  (rule "shift_paren_or" (formula "34") (term "0,0"))
                                                                  (rule "commute_or_2" (formula "35") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "35") (term "0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "35") (term "1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "35") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "35") (term "1,0,1,0"))
                                                                  (rule "times_zero_1" (formula "35") (term "0,1,0"))
                                                                  (rule "leq_literals" (formula "35") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "35"))
                                                                  (rule "true_left" (formula "35"))
                                                                  (rule "commute_or" (formula "20") (term "1,1,0"))
                                                                  (rule "commute_or_2" (formula "20") (term "0,1,0"))
                                                                  (rule "cnf_rightDist" (formula "18") (term "1,1,0"))
                                                                  (rule "commute_or" (formula "43") (term "1,1,0"))
                                                                  (rule "commute_or_2" (formula "43") (term "0,1,0"))
                                                                  (rule "commute_or" (formula "34") (term "0,0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "34") (term "0,0"))
                                                                  (rule "add_zero_right" (formula "34") (term "1,1,0,0"))
                                                                  (rule "qeq_literals" (formula "34") (term "1,0,0"))
                                                                  (builtin "One Step Simplification" (formula "34"))
                                                                  (rule "true_left" (formula "34"))
                                                                  (rule "arrayLengthIsAShort" (formula "15") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "15"))
                                                                  (rule "true_left" (formula "15"))
                                                                  (rule "arrayLengthNotNegative" (formula "15") (term "0"))
                                                                  (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "16"))
                                                                  (rule "leq_literals" (formula "15") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "15"))
                                                                  (rule "true_left" (formula "15"))
                                                                  (rule "lenNonNegative" (formula "16") (term "0"))
                                                                  (rule "inEqSimp_commuteLeq" (formula "16"))
                                                                  (rule "applyEqRigid" (formula "16") (term "0") (ifseqformula "17"))
                                                                  (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "15"))
                                                                  (rule "leq_literals" (formula "16") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "16"))
                                                                  (rule "true_left" (formula "16"))
                                                                  (rule "commute_or" (formula "23") (term "0,0,1,0"))
                                                                  (rule "ifthenelse_to_or_left" (formula "18") (term "0,0,0,1,0"))
                                                                  (rule "eqSymm" (formula "18") (term "1,0,0,0,0,1,0"))
                                                                  (rule "eqSymm" (formula "18") (term "1,1,0,0,0,1,0"))
                                                                  (rule "nnf_notAnd" (formula "18") (term "0,0,0,0,0,1,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0,0,0,0,1,0"))
                                                                  (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,0,0,0,1,0"))
                                                                  (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,0,0,0,1,0"))
                                                                  (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,0,0,0,1,0"))
                                                                  (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,0,0,0,1,0"))
                                                                  (rule "add_zero_left" (formula "18") (term "0,0,1,0,0,0,0,0,1,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0,0,0,0,1,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0,0,0,1,0"))
                                                                  (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0,0,0,1,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0,0,0,0,1,0"))
                                                                  (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0,0,0,0,1,0"))
                                                                  (rule "add_zero_right" (formula "18") (term "0,0,0,0,0,0,0,0,1,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,0,0,0,1,0"))
                                                                  (rule "mul_literals" (formula "18") (term "1,0,0,0,0,0,0,1,0"))
                                                                  (rule "commute_or" (formula "20") (term "0,0,1,0"))
                                                                  (rule "commute_or_2" (formula "18") (term "0,1,1,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "18") (term "0,0,1,1,0"))
                                                                  (rule "add_literals" (formula "18") (term "1,1,0,0,1,1,0"))
                                                                  (rule "qeq_literals" (formula "18") (term "1,0,0,1,1,0"))
                                                                  (builtin "One Step Simplification" (formula "18"))
                                                                  (rule "commute_or" (formula "42") (term "0,0,1,0"))
                                                                  (rule "cnf_rightDist" (formula "23") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "20") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "42") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "23") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "23"))
                                                                  (rule "andLeft" (formula "23"))
                                                                  (rule "commute_or" (formula "24") (term "0"))
                                                                  (rule "shift_paren_or" (formula "23") (term "0"))
                                                                  (rule "commute_or_2" (formula "23") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "23"))
                                                                  (rule "commute_or" (formula "24") (term "1,1,0"))
                                                                  (rule "shift_paren_or" (formula "23") (term "0,0"))
                                                                  (rule "cnf_rightDist" (formula "20") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "20"))
                                                                  (rule "andLeft" (formula "20"))
                                                                  (rule "commute_or" (formula "21") (term "0"))
                                                                  (rule "shift_paren_or" (formula "20") (term "0"))
                                                                  (rule "commute_or_2" (formula "20") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "20"))
                                                                  (rule "commute_or" (formula "24") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "24"))
                                                                  (rule "cnf_rightDist" (formula "44") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "44"))
                                                                  (rule "andLeft" (formula "44"))
                                                                  (rule "commute_or" (formula "45") (term "0"))
                                                                  (rule "shift_paren_or" (formula "44") (term "0"))
                                                                  (rule "commute_or_2" (formula "44") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "44"))
                                                                  (rule "commute_or" (formula "21") (term "1,1,0"))
                                                                  (rule "commute_or" (formula "18") (term "0,0,1,0"))
                                                                  (rule "shift_paren_or" (formula "18") (term "1,1,0"))
                                                                  (rule "shift_paren_or" (formula "20") (term "0,0"))
                                                                  (rule "cnf_rightDist" (formula "25") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "25"))
                                                                  (rule "andLeft" (formula "25"))
                                                                  (rule "commute_or_2" (formula "25") (term "0"))
                                                                  (rule "shift_paren_or" (formula "26") (term "0"))
                                                                  (rule "commute_or_2" (formula "26") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "26") (term "0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "26") (term "1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "26") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "26") (term "1,0,1,0"))
                                                                  (rule "times_zero_1" (formula "26") (term "0,1,0"))
                                                                  (rule "leq_literals" (formula "26") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "26"))
                                                                  (rule "true_left" (formula "26"))
                                                                  (rule "commute_or" (formula "45") (term "1,1,0"))
                                                                  (rule "shift_paren_or" (formula "44") (term "0,0"))
                                                                  (rule "commute_or_2" (formula "18") (term "0,1,0"))
                                                                  (rule "commute_or" (formula "20") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "20"))
                                                                  (rule "arrayLengthIsAShort" (formula "41") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "41"))
                                                                  (rule "true_left" (formula "41"))
                                                                  (rule "arrayLengthNotNegative" (formula "41") (term "0"))
                                                                  (rule "inEqSimp_subsumption1" (formula "41") (ifseqformula "42"))
                                                                  (rule "leq_literals" (formula "41") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "41"))
                                                                  (rule "true_left" (formula "41"))
                                                                  (rule "shift_paren_or" (formula "25") (term "0,0"))
                                                                  (rule "cnf_rightDist" (formula "21") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "21"))
                                                                  (rule "andLeft" (formula "21"))
                                                                  (rule "commute_or_2" (formula "21") (term "0"))
                                                                  (rule "shift_paren_or" (formula "22") (term "0"))
                                                                  (rule "commute_or_2" (formula "22") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "22") (term "1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "22") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "22") (term "1,0,1,0"))
                                                                  (rule "times_zero_1" (formula "22") (term "0,1,0"))
                                                                  (rule "leq_literals" (formula "22") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "22"))
                                                                  (rule "true_left" (formula "22"))
                                                                  (rule "commute_or" (formula "44") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "44"))
                                                                  (rule "commute_or" (formula "18") (term "0,1,1,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "18") (term "1,1,0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "18") (term "1,1,1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "18") (term "0,1,1,1,0"))
                                                                  (rule "add_literals" (formula "18") (term "1,0,1,1,1,0"))
                                                                  (rule "times_zero_1" (formula "18") (term "0,1,1,1,0"))
                                                                  (rule "leq_literals" (formula "18") (term "1,1,1,0"))
                                                                  (builtin "One Step Simplification" (formula "18"))
                                                                  (rule "ifthenelse_split" (formula "4") (term "0"))
                                                                  (branch "messages[iv_23].<created> = TRUE TRUE"
                                                                     (rule "applyEqReverse" (formula "53") (term "1") (ifseqformula "5"))
                                                                     (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "5"))
                                                                     (rule "hideAuxiliaryEq" (formula "5"))
                                                                     (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "4"))
                                                                     (builtin "One Step Simplification" (formula "3"))
                                                                     (rule "applyEqReverse" (formula "52") (term "0") (ifseqformula "3"))
                                                                     (builtin "One Step Simplification" (formula "52"))
                                                                     (rule "closeTrue" (formula "52"))
                                                                  )
                                                                  (branch "messages[iv_23].<created> = TRUE FALSE"
                                                                     (rule "referencedObjectIsCreatedRight" (formula "46") (ifseqformula "48"))
                                                                     (rule "close" (formula "46") (ifseqformula "29"))
                                                                  )
                                                               )
                                                            )
                                                            (branch "messages[iv_23].length >= 1 FALSE"
                                                               (rule "inEqSimp_geqRight" (formula "43"))
                                                               (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                               (rule "add_literals" (formula "1") (term "0,0"))
                                                               (rule "add_zero_left" (formula "1") (term "0"))
                                                               (rule "inEqSimp_homoInEq1" (formula "8"))
                                                               (rule "times_zero_2" (formula "8") (term "1,0"))
                                                               (rule "add_zero_right" (formula "8") (term "0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "8"))
                                                               (rule "mul_literals" (formula "8") (term "1"))
                                                               (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "8"))
                                                               (rule "qeq_literals" (formula "7") (term "0"))
                                                               (builtin "One Step Simplification" (formula "7"))
                                                               (rule "closeFalse" (formula "7"))
                                                            )
                                                         )
                                                         (branch "messages[i_2].length >= 1 FALSE"
                                                            (rule "eqSymm" (formula "22"))
                                                            (rule "inEqSimp_geqRight" (formula "42"))
                                                            (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0"))
                                                            (rule "applyEqRigid" (formula "24") (term "1,1,0") (ifseqformula "23"))
                                                            (rule "applyEqRigid" (formula "20") (term "0") (ifseqformula "23"))
                                                            (rule "qeq_literals" (formula "20"))
                                                            (rule "true_left" (formula "20"))
                                                            (rule "applyEq" (formula "21") (term "1,1,0") (ifseqformula "22"))
                                                            (rule "applyEqRigid" (formula "20") (term "1") (ifseqformula "22"))
                                                            (rule "commute_and" (formula "6") (term "0,0"))
                                                            (rule "commute_or" (formula "23") (term "0,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "23") (term "0"))
                                                            (rule "add_zero_right" (formula "23") (term "1,1,0"))
                                                            (rule "qeq_literals" (formula "23") (term "1,0"))
                                                            (builtin "One Step Simplification" (formula "23"))
                                                            (rule "true_left" (formula "23"))
                                                            (rule "commute_or" (formula "21") (term "0,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "21") (term "0"))
                                                            (rule "add_zero_right" (formula "21") (term "1,1,0"))
                                                            (rule "qeq_literals" (formula "21") (term "1,0"))
                                                            (builtin "One Step Simplification" (formula "21"))
                                                            (rule "true_left" (formula "21"))
                                                            (rule "arrayLengthNotNegative" (formula "38") (term "1,0,0,0"))
                                                            (rule "inEqSimp_antiSymm" (formula "38") (ifseqformula "1"))
                                                            (rule "applyEq" (formula "39") (term "0") (ifseqformula "38"))
                                                            (rule "qeq_literals" (formula "39"))
                                                            (rule "true_left" (formula "39"))
                                                            (rule "applyEq" (formula "40") (term "1,0,0,0,1,0,0") (ifseqformula "38"))
                                                            (rule "seqDef_lower_equals_upper" (formula "40") (term "0,0,0,1,0,0"))
                                                            (rule "eqSymm" (formula "40") (term "1,0,0"))
                                                            (rule "applyEq" (formula "39") (term "1,0,0,0") (ifseqformula "38"))
                                                            (rule "seqDef_lower_equals_upper" (formula "39") (term "0,0,0"))
                                                            (rule "applyEq" (formula "1") (term "0") (ifseqformula "38"))
                                                            (rule "leq_literals" (formula "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "commute_or" (formula "17") (term "1,1,0"))
                                                            (rule "commute_or_2" (formula "17") (term "0,1,0"))
                                                            (rule "commute_or" (formula "30") (term "1,1,0"))
                                                            (rule "commute_or_2" (formula "30") (term "0,1,0"))
                                                            (rule "commute_or_2" (formula "18") (term "0,1,0"))
                                                            (rule "commute_or" (formula "18") (term "1,1,0"))
                                                            (rule "commute_or" (formula "39") (term "0,0"))
                                                            (rule "allLeft" (formula "27") (inst "t=iv_23"))
                                                            (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                                                            (rule "inEqSimp_contradInEq1" (formula "27") (term "1,0") (ifseqformula "9"))
                                                            (rule "qeq_literals" (formula "27") (term "0,1,0"))
                                                            (builtin "One Step Simplification" (formula "27"))
                                                            (rule "inEqSimp_contradInEq1" (formula "27") (term "1") (ifseqformula "11"))
                                                            (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1"))
                                                            (rule "add_literals" (formula "27") (term "1,1,0,0,1"))
                                                            (rule "times_zero_1" (formula "27") (term "1,0,0,1"))
                                                            (rule "add_zero_right" (formula "27") (term "0,0,1"))
                                                            (rule "leq_literals" (formula "27") (term "0,1"))
                                                            (builtin "One Step Simplification" (formula "27"))
                                                            (rule "notLeft" (formula "27"))
                                                            (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "40"))
                                                            (builtin "One Step Simplification" (formula "3"))
                                                            (rule "replace_known_right" (formula "5") (term "0,1,0,0") (ifseqformula "40"))
                                                            (builtin "One Step Simplification" (formula "5"))
                                                            (rule "ifthenelse_negated" (formula "3") (term "0"))
                                                            (rule "ifthenelse_negated" (formula "5") (term "0"))
                                                            (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "32") (ifseqformula "40"))
                                                            (rule "narrowSelectArrayType" (formula "5") (term "2,0") (ifseqformula "28") (ifseqformula "40"))
                                                            (rule "narrowSelectArrayType" (formula "5") (term "1,0") (ifseqformula "24") (ifseqformula "40"))
                                                            (rule "ifthenelse_split" (formula "7") (term "0"))
                                                            (branch "messages[iv_23].length >= 1 TRUE"
                                                               (rule "replace_known_left" (formula "46") (term "0,1") (ifseqformula "8"))
                                                               (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "8")))
                                                               (rule "commute_or" (formula "18") (term "0,0,1,0"))
                                                               (rule "commute_or" (formula "31") (term "0,0,1,0"))
                                                               (rule "commute_or" (formula "19") (term "0,0,1,0"))
                                                               (rule "commute_or_2" (formula "19") (term "0,1,1,0"))
                                                               (rule "ifthenelse_split" (formula "4") (term "0"))
                                                               (branch "messages[iv_23] = x_arr_2 TRUE"
                                                                  (rule "referencedObjectIsCreatedRightEQ" (formula "52") (ifseqformula "4") (ifseqformula "53"))
                                                                  (rule "close" (formula "52") (ifseqformula "26"))
                                                               )
                                                               (branch "messages[iv_23] = x_arr_2 FALSE"
                                                                  (rule "applyEqReverse" (formula "5") (term "0,0,0") (ifseqformula "4"))
                                                                  (rule "applyEqReverse" (formula "3") (term "0,0,0,0") (ifseqformula "4"))
                                                                  (rule "hideAuxiliaryEq" (formula "4"))
                                                                  (rule "cnf_rightDist" (formula "17") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "17") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "17"))
                                                                  (rule "andLeft" (formula "17"))
                                                                  (rule "commute_or" (formula "18") (term "0"))
                                                                  (rule "shift_paren_or" (formula "17") (term "0"))
                                                                  (rule "commute_or_2" (formula "17") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "17"))
                                                                  (rule "commute_or" (formula "18") (term "1,1,0"))
                                                                  (rule "shift_paren_or" (formula "17") (term "0,0"))
                                                                  (rule "commute_or" (formula "17") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "17"))
                                                                  (rule "cnf_rightDist" (formula "31") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "18") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "18"))
                                                                  (rule "andLeft" (formula "18"))
                                                                  (rule "commute_or_2" (formula "18") (term "0"))
                                                                  (rule "shift_paren_or" (formula "19") (term "0"))
                                                                  (rule "commute_or_2" (formula "19") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "19") (term "0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "19") (term "1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "19") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "19") (term "1,0,1,0"))
                                                                  (rule "times_zero_1" (formula "19") (term "0,1,0"))
                                                                  (rule "leq_literals" (formula "19") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "19"))
                                                                  (rule "true_left" (formula "19"))
                                                                  (rule "shift_paren_or" (formula "18") (term "0,0"))
                                                                  (rule "cnf_rightDist" (formula "31") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "31"))
                                                                  (rule "andLeft" (formula "31"))
                                                                  (rule "commute_or" (formula "32") (term "0"))
                                                                  (rule "shift_paren_or" (formula "31") (term "0"))
                                                                  (rule "commute_or_2" (formula "31") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "31"))
                                                                  (rule "commute_or" (formula "18") (term "0,0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "18") (term "0,0"))
                                                                  (rule "add_zero_right" (formula "18") (term "1,1,0,0"))
                                                                  (rule "qeq_literals" (formula "18") (term "1,0,0"))
                                                                  (builtin "One Step Simplification" (formula "18"))
                                                                  (rule "true_left" (formula "18"))
                                                                  (rule "commute_or" (formula "31") (term "1,1,0"))
                                                                  (rule "shift_paren_or" (formula "30") (term "0,0"))
                                                                  (rule "commute_or" (formula "18") (term "0,0,1,1,0"))
                                                                  (rule "commute_or" (formula "30") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "30"))
                                                                  (rule "cnf_rightDist" (formula "31") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "31"))
                                                                  (rule "andLeft" (formula "31"))
                                                                  (rule "commute_or_2" (formula "31") (term "0"))
                                                                  (rule "shift_paren_or" (formula "32") (term "0"))
                                                                  (rule "commute_or_2" (formula "32") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "32") (term "0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "32") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "32") (term "1,0,1,0"))
                                                                  (rule "times_zero_1" (formula "32") (term "0,1,0"))
                                                                  (rule "leq_literals" (formula "32") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "32"))
                                                                  (rule "true_left" (formula "32"))
                                                                  (rule "shift_paren_or" (formula "31") (term "0,0"))
                                                                  (rule "commute_or" (formula "31") (term "0,0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "31") (term "0,0"))
                                                                  (rule "add_zero_right" (formula "31") (term "1,1,0,0"))
                                                                  (rule "qeq_literals" (formula "31") (term "1,0,0"))
                                                                  (builtin "One Step Simplification" (formula "31"))
                                                                  (rule "true_left" (formula "31"))
                                                                  (rule "ifthenelse_to_or_left" (formula "39") (term "0,0,0"))
                                                                  (rule "eqSymm" (formula "39") (term "1,1,0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "39") (term "0,0,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "39") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "39") (term "1,0,0,1,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "39") (term "0,1,0,0,1,0,0,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "39") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "add_literals" (formula "39") (term "0,0,0,1,0,0,0,0,0"))
                                                                  (rule "add_zero_left" (formula "39") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "39") (term "1,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "39") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "39") (term "1,0,0,0,0,0,0,0,0"))
                                                                  (rule "add_zero_right" (formula "39") (term "0,0,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "39") (term "1,0,0,0,0,0,0"))
                                                                  (rule "commute_or" (formula "39") (term "0,0"))
                                                                  (rule "commute_or_2" (formula "39") (term "0"))
                                                                  (rule "commute_or_2" (formula "39") (term "0,1,0"))
                                                                  (rule "commute_or" (formula "39") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "18") (term "1,1,0"))
                                                                  (rule "arrayLengthIsAShort" (formula "15") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "15"))
                                                                  (rule "true_left" (formula "15"))
                                                                  (rule "arrayLengthNotNegative" (formula "15") (term "0"))
                                                                  (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "16"))
                                                                  (rule "leq_literals" (formula "15") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "15"))
                                                                  (rule "true_left" (formula "15"))
                                                                  (rule "lenNonNegative" (formula "16") (term "0"))
                                                                  (rule "inEqSimp_commuteLeq" (formula "16"))
                                                                  (rule "applyEqRigid" (formula "16") (term "0") (ifseqformula "17"))
                                                                  (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "15"))
                                                                  (rule "leq_literals" (formula "16") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "16"))
                                                                  (rule "true_left" (formula "16"))
                                                                  (rule "commute_or" (formula "39") (term "0,0,1,0"))
                                                                  (rule "commute_or_2" (formula "18") (term "0,1,1,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "18") (term "0,0,1,1,0"))
                                                                  (rule "add_zero_right" (formula "18") (term "1,1,0,0,1,1,0"))
                                                                  (rule "qeq_literals" (formula "18") (term "1,0,0,1,1,0"))
                                                                  (builtin "One Step Simplification" (formula "18"))
                                                                  (rule "shift_paren_or" (formula "18") (term "1,1,0"))
                                                                  (rule "commute_or" (formula "18") (term "0,1,1,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "18") (term "1,1,0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "18") (term "1,1,1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "18") (term "0,1,1,1,0"))
                                                                  (rule "add_literals" (formula "18") (term "1,0,1,1,1,0"))
                                                                  (rule "times_zero_1" (formula "18") (term "0,1,1,1,0"))
                                                                  (rule "leq_literals" (formula "18") (term "1,1,1,0"))
                                                                  (builtin "One Step Simplification" (formula "18"))
                                                                  (rule "shift_paren_or" (formula "18") (term "0"))
                                                                  (rule "commute_or_2" (formula "18") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "18"))
                                                                  (rule "shift_paren_or" (formula "18") (term "0,0"))
                                                                  (rule "commute_or" (formula "18") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "18"))
                                                                  (rule "cnf_rightDist" (formula "39") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "39") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "39"))
                                                                  (rule "andLeft" (formula "39"))
                                                                  (rule "commute_or" (formula "40") (term "0"))
                                                                  (rule "shift_paren_or" (formula "39") (term "0"))
                                                                  (rule "commute_or_2" (formula "39") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "39"))
                                                                  (rule "commute_or" (formula "40") (term "1,1,0"))
                                                                  (rule "shift_paren_or" (formula "39") (term "0,0"))
                                                                  (rule "commute_or" (formula "39") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "39"))
                                                                  (rule "cnf_rightDist" (formula "40") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "40"))
                                                                  (rule "andLeft" (formula "40"))
                                                                  (rule "commute_or_2" (formula "40") (term "0"))
                                                                  (rule "shift_paren_or" (formula "41") (term "0"))
                                                                  (rule "commute_or_2" (formula "41") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "41") (term "0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "41") (term "1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "41") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "41") (term "1,0,1,0"))
                                                                  (rule "times_zero_1" (formula "41") (term "0,1,0"))
                                                                  (rule "leq_literals" (formula "41") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "41"))
                                                                  (rule "true_left" (formula "41"))
                                                                  (rule "shift_paren_or" (formula "40") (term "0,0"))
                                                                  (rule "commute_or" (formula "40") (term "0,0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "40") (term "0,0"))
                                                                  (rule "add_literals" (formula "40") (term "1,1,0,0"))
                                                                  (rule "qeq_literals" (formula "40") (term "1,0,0"))
                                                                  (builtin "One Step Simplification" (formula "40"))
                                                                  (rule "true_left" (formula "40"))
                                                                  (rule "arrayLengthIsAShort" (formula "36") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "36"))
                                                                  (rule "true_left" (formula "36"))
                                                                  (rule "arrayLengthNotNegative" (formula "36") (term "0"))
                                                                  (rule "inEqSimp_subsumption1" (formula "36") (ifseqformula "37"))
                                                                  (rule "leq_literals" (formula "36") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "36"))
                                                                  (rule "true_left" (formula "36"))
                                                                  (rule "ifthenelse_split" (formula "4") (term "0"))
                                                                  (branch "messages[iv_23].<created> = TRUE TRUE"
                                                                     (rule "applyEqReverse" (formula "47") (term "1") (ifseqformula "5"))
                                                                     (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "5"))
                                                                     (rule "hideAuxiliaryEq" (formula "5"))
                                                                     (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "4"))
                                                                     (builtin "One Step Simplification" (formula "3"))
                                                                     (rule "applyEqReverse" (formula "46") (term "0") (ifseqformula "3"))
                                                                     (builtin "One Step Simplification" (formula "46"))
                                                                     (rule "closeTrue" (formula "46"))
                                                                  )
                                                                  (branch "messages[iv_23].<created> = TRUE FALSE"
                                                                     (rule "referencedObjectIsCreatedRight" (formula "40") (ifseqformula "42"))
                                                                     (rule "close" (formula "40") (ifseqformula "24"))
                                                                  )
                                                               )
                                                            )
                                                            (branch "messages[iv_23].length >= 1 FALSE"
                                                               (rule "inEqSimp_geqRight" (formula "40"))
                                                               (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                               (rule "add_literals" (formula "1") (term "0,0"))
                                                               (rule "add_zero_left" (formula "1") (term "0"))
                                                               (rule "inEqSimp_homoInEq1" (formula "8"))
                                                               (rule "mul_literals" (formula "8") (term "1,0"))
                                                               (rule "add_zero_right" (formula "8") (term "0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "8"))
                                                               (rule "mul_literals" (formula "8") (term "1"))
                                                               (rule "inEqSimp_contradInEq1" (formula "8") (ifseqformula "7"))
                                                               (rule "qeq_literals" (formula "8") (term "0"))
                                                               (builtin "One Step Simplification" (formula "8"))
                                                               (rule "closeFalse" (formula "8"))
                                                            )
                                                         )
                                                      )
                                                      (branch "result_0.length >= 1 FALSE"
                                                         (rule "replace_known_right" (formula "40") (term "0,1,1,0") (ifseqformula "41"))
                                                         (builtin "One Step Simplification" (formula "40"))
                                                         (rule "inEqSimp_geqRight" (formula "41"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "allLeft" (formula "31") (inst "t=i_2"))
                                                         (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "31") (term "1,0") (ifseqformula "25"))
                                                         (rule "qeq_literals" (formula "31") (term "0,1,0"))
                                                         (builtin "One Step Simplification" (formula "31"))
                                                         (rule "inEqSimp_contradInEq1" (formula "31") (term "1") (ifseqformula "13"))
                                                         (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,1"))
                                                         (rule "add_literals" (formula "31") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "31") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "31") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "31") (term "0,1"))
                                                         (builtin "One Step Simplification" (formula "31"))
                                                         (rule "notLeft" (formula "31"))
                                                         (rule "seqGetAlphaCast" (formula "21") (term "0,0"))
                                                         (rule "castedGetAny" (formula "21") (term "0"))
                                                         (builtin "One Step Simplification" (formula "21"))
                                                         (rule "true_left" (formula "21"))
                                                         (rule "lenNonNegative" (formula "21") (term "0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "21"))
                                                         (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                                         (rule "ifthenelse_split" (formula "23") (term "0"))
                                                         (branch "messages[i_2].length >= 1 TRUE"
                                                            (rule "eqSymm" (formula "24"))
                                                            (rule "applyEq" (formula "22") (term "1,1,0") (ifseqformula "24"))
                                                            (rule "applyEq" (formula "25") (term "1,1,0") (ifseqformula "24"))
                                                            (rule "applyEq" (formula "20") (term "0") (ifseqformula "24"))
                                                            (rule "applyEq" (formula "21") (term "1") (ifseqformula "24"))
                                                            (rule "inEqSimp_subsumption1" (formula "20") (ifseqformula "23"))
                                                            (rule "leq_literals" (formula "20") (term "0"))
                                                            (builtin "One Step Simplification" (formula "20"))
                                                            (rule "true_left" (formula "20"))
                                                            (rule "commute_and" (formula "6") (term "0,0"))
                                                            (rule "commute_or" (formula "24") (term "0,0"))
                                                            (rule "commute_or" (formula "21") (term "0,0"))
                                                            (rule "lenNonNegative" (formula "40") (term "0"))
                                                            (rule "inEqSimp_commuteLeq" (formula "40"))
                                                            (rule "arrayLengthIsAShort" (formula "41") (term "1,0,0,0"))
                                                            (builtin "One Step Simplification" (formula "41"))
                                                            (rule "true_left" (formula "41"))
                                                            (rule "arrayLengthNotNegative" (formula "41") (term "1,0,0,0"))
                                                            (rule "inEqSimp_subsumption1" (formula "41") (ifseqformula "22"))
                                                            (rule "leq_literals" (formula "41") (term "0"))
                                                            (builtin "One Step Simplification" (formula "41"))
                                                            (rule "true_left" (formula "41"))
                                                            (rule "commute_or" (formula "18") (term "1,1,0"))
                                                            (rule "commute_or_2" (formula "18") (term "0,1,0"))
                                                            (rule "commute_or" (formula "34") (term "1,1,0"))
                                                            (rule "commute_or_2" (formula "34") (term "0,1,0"))
                                                            (rule "commute_or" (formula "42") (term "0,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "42") (term "0"))
                                                            (rule "add_zero_right" (formula "42") (term "1,1,0"))
                                                            (rule "qeq_literals" (formula "42") (term "1,0"))
                                                            (builtin "One Step Simplification" (formula "42"))
                                                            (rule "true_left" (formula "42"))
                                                            (rule "commute_or_2" (formula "19") (term "0,1,0"))
                                                            (rule "commute_or" (formula "19") (term "1,1,0"))
                                                            (rule "allLeft" (formula "31") (inst "t=iv_23"))
                                                            (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                                                            (rule "inEqSimp_contradInEq1" (formula "31") (term "1") (ifseqformula "12"))
                                                            (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,1"))
                                                            (rule "add_literals" (formula "31") (term "1,1,0,0,1"))
                                                            (rule "times_zero_1" (formula "31") (term "1,0,0,1"))
                                                            (rule "add_zero_right" (formula "31") (term "0,0,1"))
                                                            (rule "leq_literals" (formula "31") (term "0,1"))
                                                            (builtin "One Step Simplification" (formula "31"))
                                                            (rule "inEqSimp_contradInEq1" (formula "31") (term "1") (ifseqformula "10"))
                                                            (rule "qeq_literals" (formula "31") (term "0,1"))
                                                            (builtin "One Step Simplification" (formula "31"))
                                                            (rule "notLeft" (formula "31"))
                                                            (rule "replace_known_right" (formula "6") (term "0,1,0,0") (ifseqformula "42"))
                                                            (builtin "One Step Simplification" (formula "6"))
                                                            (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "42"))
                                                            (builtin "One Step Simplification" (formula "4"))
                                                            (rule "ifthenelse_negated" (formula "6") (term "0"))
                                                            (rule "ifthenelse_negated" (formula "4") (term "0"))
                                                            (rule "narrowSelectArrayType" (formula "6") (term "2,0") (ifseqformula "32") (ifseqformula "42"))
                                                            (rule "narrowSelectArrayType" (formula "4") (term "2,0") (ifseqformula "36") (ifseqformula "42"))
                                                            (rule "narrowSelectArrayType" (formula "6") (term "1,0") (ifseqformula "28") (ifseqformula "42"))
                                                            (rule "commute_or" (formula "18") (term "0,0,1,0"))
                                                            (rule "commute_or" (formula "34") (term "0,0,1,0"))
                                                            (rule "ifthenelse_split" (formula "8") (term "0"))
                                                            (branch "messages[iv_23].length >= 1 TRUE"
                                                               (rule "replace_known_left" (formula "48") (term "0,1") (ifseqformula "9"))
                                                               (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "9")))
                                                               (rule "commute_or" (formula "20") (term "0,0,1,0"))
                                                               (rule "commute_or_2" (formula "20") (term "0,1,1,0"))
                                                               (rule "cnf_rightDist" (formula "19") (term "1,1,0"))
                                                               (rule "ifthenelse_split" (formula "5") (term "0"))
                                                               (branch "messages[iv_23] = x_arr_2 TRUE"
                                                                  (rule "referencedObjectIsCreatedRightEQ" (formula "54") (ifseqformula "5") (ifseqformula "55"))
                                                                  (rule "close" (formula "54") (ifseqformula "30"))
                                                               )
                                                               (branch "messages[iv_23] = x_arr_2 FALSE"
                                                                  (rule "applyEqReverse" (formula "4") (term "0,0,0,0") (ifseqformula "5"))
                                                                  (rule "applyEqReverse" (formula "6") (term "0,0,0") (ifseqformula "5"))
                                                                  (rule "hideAuxiliaryEq" (formula "5"))
                                                                  (rule "cnf_rightDist" (formula "18") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "18"))
                                                                  (rule "andLeft" (formula "18"))
                                                                  (rule "commute_or" (formula "19") (term "0"))
                                                                  (rule "shift_paren_or" (formula "18") (term "0"))
                                                                  (rule "commute_or_2" (formula "18") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "18"))
                                                                  (rule "commute_or" (formula "19") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "35") (term "1,1,0"))
                                                                  (rule "shift_paren_or" (formula "18") (term "0,0"))
                                                                  (rule "commute_or" (formula "18") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "18"))
                                                                  (rule "cnf_rightDist" (formula "19") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "19"))
                                                                  (rule "andLeft" (formula "19"))
                                                                  (rule "commute_or_2" (formula "19") (term "0"))
                                                                  (rule "shift_paren_or" (formula "20") (term "0"))
                                                                  (rule "commute_or_2" (formula "20") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "20") (term "0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "20") (term "1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "20") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "20") (term "1,0,1,0"))
                                                                  (rule "times_zero_1" (formula "20") (term "0,1,0"))
                                                                  (rule "leq_literals" (formula "20") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "20"))
                                                                  (rule "true_left" (formula "20"))
                                                                  (rule "shift_paren_or" (formula "19") (term "0,0"))
                                                                  (rule "cnf_rightDist" (formula "35") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "35"))
                                                                  (rule "andLeft" (formula "35"))
                                                                  (rule "commute_or" (formula "36") (term "0"))
                                                                  (rule "shift_paren_or" (formula "35") (term "0"))
                                                                  (rule "commute_or_2" (formula "35") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "35"))
                                                                  (rule "commute_or" (formula "19") (term "0,0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "19") (term "0,0"))
                                                                  (rule "add_literals" (formula "19") (term "1,1,0,0"))
                                                                  (rule "qeq_literals" (formula "19") (term "1,0,0"))
                                                                  (builtin "One Step Simplification" (formula "19"))
                                                                  (rule "true_left" (formula "19"))
                                                                  (rule "commute_or" (formula "35") (term "1,1,0"))
                                                                  (rule "shift_paren_or" (formula "34") (term "0,0"))
                                                                  (rule "commute_or" (formula "19") (term "0,0,1,1,0"))
                                                                  (rule "ifthenelse_to_or_left" (formula "24") (term "0,0,0"))
                                                                  (rule "eqSymm" (formula "24") (term "1,1,0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "24") (term "0,0,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,0,0,0"))
                                                                  (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,0,0,0"))
                                                                  (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0,0,0,0"))
                                                                  (rule "add_zero_right" (formula "24") (term "0,0,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0,0"))
                                                                  (rule "commute_or" (formula "24") (term "0,0"))
                                                                  (rule "commute_or_2" (formula "24") (term "0"))
                                                                  (rule "commute_or" (formula "34") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "34"))
                                                                  (rule "ifthenelse_to_or_left" (formula "21") (term "0,0,0"))
                                                                  (rule "eqSymm" (formula "21") (term "1,1,0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "21") (term "0,0,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,0,0,0"))
                                                                  (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0,0,0,0"))
                                                                  (rule "add_zero_right" (formula "21") (term "0,0,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,0,0,0"))
                                                                  (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,0,0"))
                                                                  (rule "cnf_rightDist" (formula "35") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "35"))
                                                                  (rule "andLeft" (formula "35"))
                                                                  (rule "commute_or_2" (formula "35") (term "0"))
                                                                  (rule "commute_or" (formula "21") (term "0,0"))
                                                                  (rule "commute_or_2" (formula "21") (term "0"))
                                                                  (rule "commute_or_2" (formula "24") (term "0,1,0"))
                                                                  (rule "commute_or" (formula "24") (term "1,1,0"))
                                                                  (rule "shift_paren_or" (formula "36") (term "0"))
                                                                  (rule "commute_or_2" (formula "36") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "36") (term "0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "36") (term "1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "36") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "36") (term "1,0,1,0"))
                                                                  (rule "times_zero_1" (formula "36") (term "0,1,0"))
                                                                  (rule "leq_literals" (formula "36") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "36"))
                                                                  (rule "true_left" (formula "36"))
                                                                  (rule "shift_paren_or" (formula "35") (term "0,0"))
                                                                  (rule "commute_or_2" (formula "21") (term "0,1,0"))
                                                                  (rule "commute_or" (formula "21") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "19") (term "1,1,0"))
                                                                  (rule "commute_or" (formula "35") (term "0,0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "35") (term "0,0"))
                                                                  (rule "add_zero_right" (formula "35") (term "1,1,0,0"))
                                                                  (rule "qeq_literals" (formula "35") (term "1,0,0"))
                                                                  (builtin "One Step Simplification" (formula "35"))
                                                                  (rule "true_left" (formula "35"))
                                                                  (rule "arrayLengthIsAShort" (formula "16") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "16"))
                                                                  (rule "true_left" (formula "16"))
                                                                  (rule "arrayLengthNotNegative" (formula "16") (term "0"))
                                                                  (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "17"))
                                                                  (rule "leq_literals" (formula "16") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "16"))
                                                                  (rule "true_left" (formula "16"))
                                                                  (rule "lenNonNegative" (formula "17") (term "0"))
                                                                  (rule "inEqSimp_commuteLeq" (formula "17"))
                                                                  (rule "applyEqRigid" (formula "17") (term "0") (ifseqformula "18"))
                                                                  (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "16"))
                                                                  (rule "leq_literals" (formula "17") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "17"))
                                                                  (rule "true_left" (formula "17"))
                                                                  (rule "commute_or" (formula "24") (term "0,0,1,0"))
                                                                  (rule "commute_or" (formula "21") (term "0,0,1,0"))
                                                                  (rule "commute_or_2" (formula "19") (term "0,1,1,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "19") (term "0,0,1,1,0"))
                                                                  (rule "add_zero_right" (formula "19") (term "1,1,0,0,1,1,0"))
                                                                  (rule "qeq_literals" (formula "19") (term "1,0,0,1,1,0"))
                                                                  (builtin "One Step Simplification" (formula "19"))
                                                                  (rule "cnf_rightDist" (formula "24") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "24") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "24"))
                                                                  (rule "andLeft" (formula "24"))
                                                                  (rule "commute_or" (formula "25") (term "0"))
                                                                  (rule "shift_paren_or" (formula "24") (term "0"))
                                                                  (rule "commute_or_2" (formula "24") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "24"))
                                                                  (rule "commute_or" (formula "25") (term "1,1,0"))
                                                                  (rule "shift_paren_or" (formula "24") (term "0,0"))
                                                                  (rule "commute_or" (formula "24") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "24"))
                                                                  (rule "cnf_rightDist" (formula "25") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "25"))
                                                                  (rule "andLeft" (formula "25"))
                                                                  (rule "commute_or_2" (formula "25") (term "0"))
                                                                  (rule "shift_paren_or" (formula "26") (term "0"))
                                                                  (rule "commute_or_2" (formula "26") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "26") (term "0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "26") (term "1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "26") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "26") (term "1,0,1,0"))
                                                                  (rule "times_zero_1" (formula "26") (term "0,1,0"))
                                                                  (rule "leq_literals" (formula "26") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "26"))
                                                                  (rule "true_left" (formula "26"))
                                                                  (rule "shift_paren_or" (formula "25") (term "0,0"))
                                                                  (rule "shift_paren_or" (formula "19") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "21") (term "1,1,0"))
                                                                  (rule "commute_or" (formula "25") (term "0,0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "25") (term "0,0"))
                                                                  (rule "add_literals" (formula "25") (term "1,1,0,0"))
                                                                  (rule "qeq_literals" (formula "25") (term "1,0,0"))
                                                                  (builtin "One Step Simplification" (formula "25"))
                                                                  (rule "true_left" (formula "25"))
                                                                  (rule "cnf_rightDist" (formula "21") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "21"))
                                                                  (rule "andLeft" (formula "21"))
                                                                  (rule "commute_or" (formula "22") (term "0"))
                                                                  (rule "shift_paren_or" (formula "21") (term "0"))
                                                                  (rule "commute_or_2" (formula "21") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "21"))
                                                                  (rule "commute_or" (formula "22") (term "1,1,0"))
                                                                  (rule "shift_paren_or" (formula "21") (term "0,0"))
                                                                  (rule "commute_or" (formula "21") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "21"))
                                                                  (rule "commute_or" (formula "19") (term "0,1,1,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "19") (term "1,1,0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "19") (term "1,1,1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "19") (term "0,1,1,1,0"))
                                                                  (rule "add_literals" (formula "19") (term "1,0,1,1,1,0"))
                                                                  (rule "times_zero_1" (formula "19") (term "0,1,1,1,0"))
                                                                  (rule "leq_literals" (formula "19") (term "1,1,1,0"))
                                                                  (builtin "One Step Simplification" (formula "19"))
                                                                  (rule "shift_paren_or" (formula "19") (term "0"))
                                                                  (rule "commute_or_2" (formula "19") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "19"))
                                                                  (rule "cnf_rightDist" (formula "22") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "22"))
                                                                  (rule "andLeft" (formula "22"))
                                                                  (rule "commute_or_2" (formula "22") (term "0"))
                                                                  (rule "shift_paren_or" (formula "23") (term "0"))
                                                                  (rule "commute_or_2" (formula "23") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "23") (term "0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "23") (term "1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "23") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "23") (term "1,0,1,0"))
                                                                  (rule "times_zero_1" (formula "23") (term "0,1,0"))
                                                                  (rule "leq_literals" (formula "23") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "23"))
                                                                  (rule "true_left" (formula "23"))
                                                                  (rule "shift_paren_or" (formula "19") (term "0,0"))
                                                                  (rule "shift_paren_or" (formula "22") (term "0,0"))
                                                                  (rule "arrayLengthIsAShort" (formula "1") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "arrayLengthNotNegative" (formula "1") (term "0"))
                                                                  (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "2"))
                                                                  (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                                                                  (rule "leq_literals" (formula "3"))
                                                                  (rule "true_left" (formula "3"))
                                                                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                                                  (rule "qeq_literals" (formula "2"))
                                                                  (rule "true_left" (formula "2"))
                                                                  (rule "commute_or" (formula "19") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "19"))
                                                                  (rule "commute_or" (formula "22") (term "0,0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0,0"))
                                                                  (rule "add_zero_right" (formula "22") (term "1,1,0,0"))
                                                                  (rule "qeq_literals" (formula "22") (term "1,0,0"))
                                                                  (builtin "One Step Simplification" (formula "22"))
                                                                  (rule "true_left" (formula "22"))
                                                                  (rule "ifthenelse_split" (formula "5") (term "0"))
                                                                  (branch "messages[iv_23].<created> = TRUE TRUE"
                                                                     (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "6"))
                                                                     (rule "applyEqReverse" (formula "49") (term "1") (ifseqformula "6"))
                                                                     (rule "hideAuxiliaryEq" (formula "6"))
                                                                     (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "5"))
                                                                     (builtin "One Step Simplification" (formula "4"))
                                                                     (rule "applyEqReverse" (formula "48") (term "0") (ifseqformula "4"))
                                                                     (builtin "One Step Simplification" (formula "48"))
                                                                     (rule "closeTrue" (formula "48"))
                                                                  )
                                                                  (branch "messages[iv_23].<created> = TRUE FALSE"
                                                                     (rule "referencedObjectIsCreatedRight" (formula "42") (ifseqformula "44"))
                                                                     (rule "close" (formula "42") (ifseqformula "28"))
                                                                  )
                                                               )
                                                            )
                                                            (branch "messages[iv_23].length >= 1 FALSE"
                                                               (rule "inEqSimp_geqRight" (formula "42"))
                                                               (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                               (rule "add_literals" (formula "1") (term "0,0"))
                                                               (rule "add_zero_left" (formula "1") (term "0"))
                                                               (rule "inEqSimp_homoInEq1" (formula "9"))
                                                               (rule "times_zero_2" (formula "9") (term "1,0"))
                                                               (rule "add_zero_right" (formula "9") (term "0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "9"))
                                                               (rule "mul_literals" (formula "9") (term "1"))
                                                               (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "9"))
                                                               (rule "qeq_literals" (formula "8") (term "0"))
                                                               (builtin "One Step Simplification" (formula "8"))
                                                               (rule "closeFalse" (formula "8"))
                                                            )
                                                         )
                                                         (branch "messages[i_2].length >= 1 FALSE"
                                                            (rule "eqSymm" (formula "23"))
                                                            (rule "inEqSimp_geqRight" (formula "42"))
                                                            (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0"))
                                                            (rule "applyEq" (formula "23") (term "1,1,0") (ifseqformula "24"))
                                                            (rule "applyEq" (formula "25") (term "1,1,0") (ifseqformula "24"))
                                                            (rule "applyEqRigid" (formula "21") (term "0") (ifseqformula "24"))
                                                            (rule "qeq_literals" (formula "21"))
                                                            (rule "true_left" (formula "21"))
                                                            (rule "applyEq" (formula "21") (term "1") (ifseqformula "23"))
                                                            (rule "commute_and" (formula "7") (term "0,0"))
                                                            (rule "commute_or" (formula "24") (term "0,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "24") (term "0"))
                                                            (rule "add_zero_right" (formula "24") (term "1,1,0"))
                                                            (rule "qeq_literals" (formula "24") (term "1,0"))
                                                            (builtin "One Step Simplification" (formula "24"))
                                                            (rule "true_left" (formula "24"))
                                                            (rule "commute_or" (formula "22") (term "0,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0"))
                                                            (rule "add_zero_right" (formula "22") (term "1,1,0"))
                                                            (rule "qeq_literals" (formula "22") (term "1,0"))
                                                            (builtin "One Step Simplification" (formula "22"))
                                                            (rule "true_left" (formula "22"))
                                                            (rule "arrayLengthNotNegative" (formula "38") (term "1,0,0,0"))
                                                            (rule "inEqSimp_antiSymm" (formula "38") (ifseqformula "1"))
                                                            (rule "applyEq" (formula "41") (term "1,0,0,0,1,0,0") (ifseqformula "38"))
                                                            (rule "seqDef_lower_equals_upper" (formula "41") (term "0,0,0,1,0,0"))
                                                            (rule "eqSymm" (formula "41") (term "1,0,0"))
                                                            (rule "applyEq" (formula "1") (term "0") (ifseqformula "38"))
                                                            (rule "leq_literals" (formula "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "applyEq" (formula "38") (term "0") (ifseqformula "37"))
                                                            (rule "qeq_literals" (formula "38"))
                                                            (rule "true_left" (formula "38"))
                                                            (rule "applyEq" (formula "38") (term "1,0,0,0") (ifseqformula "37"))
                                                            (rule "seqDef_lower_equals_upper" (formula "38") (term "0,0,0"))
                                                            (rule "commute_or" (formula "18") (term "1,1,0"))
                                                            (rule "commute_or_2" (formula "18") (term "0,1,0"))
                                                            (rule "commute_or" (formula "31") (term "1,1,0"))
                                                            (rule "commute_or_2" (formula "31") (term "0,1,0"))
                                                            (rule "commute_or_2" (formula "19") (term "0,1,0"))
                                                            (rule "commute_or" (formula "19") (term "1,1,0"))
                                                            (rule "commute_or" (formula "39") (term "0,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "39") (term "0"))
                                                            (rule "add_zero_right" (formula "39") (term "1,1,0"))
                                                            (rule "qeq_literals" (formula "39") (term "1,0"))
                                                            (builtin "One Step Simplification" (formula "39"))
                                                            (rule "true_left" (formula "39"))
                                                            (rule "allLeft" (formula "28") (inst "t=iv_23"))
                                                            (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                                                            (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "12"))
                                                            (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                                                            (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                                                            (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                                                            (rule "add_zero_right" (formula "28") (term "0,0,1"))
                                                            (rule "leq_literals" (formula "28") (term "0,1"))
                                                            (builtin "One Step Simplification" (formula "28"))
                                                            (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "10"))
                                                            (rule "qeq_literals" (formula "28") (term "0,1"))
                                                            (builtin "One Step Simplification" (formula "28"))
                                                            (rule "notLeft" (formula "28"))
                                                            (rule "replace_known_right" (formula "6") (term "0,1,0,0") (ifseqformula "39"))
                                                            (builtin "One Step Simplification" (formula "6"))
                                                            (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "39"))
                                                            (builtin "One Step Simplification" (formula "4"))
                                                            (rule "ifthenelse_negated" (formula "6") (term "0"))
                                                            (rule "ifthenelse_negated" (formula "4") (term "0"))
                                                            (rule "narrowSelectArrayType" (formula "6") (term "2,0") (ifseqformula "29") (ifseqformula "39"))
                                                            (rule "narrowSelectArrayType" (formula "4") (term "2,0") (ifseqformula "33") (ifseqformula "39"))
                                                            (rule "narrowSelectArrayType" (formula "6") (term "1,0") (ifseqformula "25") (ifseqformula "39"))
                                                            (rule "ifthenelse_split" (formula "8") (term "0"))
                                                            (branch "messages[iv_23].length >= 1 TRUE"
                                                               (rule "replace_known_left" (formula "45") (term "0,0") (ifseqformula "9"))
                                                               (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "9")))
                                                               (rule "commute_or" (formula "19") (term "0,0,1,0"))
                                                               (rule "commute_or" (formula "32") (term "0,0,1,0"))
                                                               (rule "commute_or" (formula "20") (term "0,0,1,0"))
                                                               (rule "commute_or_2" (formula "20") (term "0,1,1,0"))
                                                               (rule "ifthenelse_split" (formula "5") (term "0"))
                                                               (branch "messages[iv_23] = x_arr_2 TRUE"
                                                                  (rule "referencedObjectIsCreatedRightEQ" (formula "51") (ifseqformula "5") (ifseqformula "52"))
                                                                  (rule "close" (formula "51") (ifseqformula "27"))
                                                               )
                                                               (branch "messages[iv_23] = x_arr_2 FALSE"
                                                                  (rule "applyEqReverse" (formula "6") (term "0,0,0") (ifseqformula "5"))
                                                                  (rule "applyEqReverse" (formula "4") (term "0,0,0,0") (ifseqformula "5"))
                                                                  (rule "hideAuxiliaryEq" (formula "5"))
                                                                  (rule "cnf_rightDist" (formula "18") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "31") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "18") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "18"))
                                                                  (rule "andLeft" (formula "18"))
                                                                  (rule "commute_or" (formula "19") (term "0"))
                                                                  (rule "shift_paren_or" (formula "18") (term "0"))
                                                                  (rule "commute_or_2" (formula "18") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "18"))
                                                                  (rule "commute_or" (formula "19") (term "1,1,0"))
                                                                  (rule "shift_paren_or" (formula "18") (term "0,0"))
                                                                  (rule "commute_or" (formula "18") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "18"))
                                                                  (rule "cnf_rightDist" (formula "32") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "32"))
                                                                  (rule "andLeft" (formula "32"))
                                                                  (rule "commute_or" (formula "33") (term "0"))
                                                                  (rule "shift_paren_or" (formula "32") (term "0"))
                                                                  (rule "commute_or_2" (formula "32") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "32"))
                                                                  (rule "commute_or" (formula "33") (term "1,1,0"))
                                                                  (rule "shift_paren_or" (formula "32") (term "0,0"))
                                                                  (rule "cnf_rightDist" (formula "19") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "19"))
                                                                  (rule "andLeft" (formula "19"))
                                                                  (rule "commute_or_2" (formula "19") (term "0"))
                                                                  (rule "shift_paren_or" (formula "20") (term "0"))
                                                                  (rule "commute_or_2" (formula "20") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "20") (term "0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "20") (term "1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "20") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "20") (term "1,0,1,0"))
                                                                  (rule "times_zero_1" (formula "20") (term "0,1,0"))
                                                                  (rule "leq_literals" (formula "20") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "20"))
                                                                  (rule "true_left" (formula "20"))
                                                                  (rule "commute_or" (formula "32") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "32"))
                                                                  (rule "shift_paren_or" (formula "19") (term "0,0"))
                                                                  (rule "cnf_rightDist" (formula "33") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "33"))
                                                                  (rule "andLeft" (formula "33"))
                                                                  (rule "commute_or_2" (formula "33") (term "0"))
                                                                  (rule "shift_paren_or" (formula "34") (term "0"))
                                                                  (rule "commute_or_2" (formula "34") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "34") (term "0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "34") (term "1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "34") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "34") (term "1,0,1,0"))
                                                                  (rule "times_zero_1" (formula "34") (term "0,1,0"))
                                                                  (rule "leq_literals" (formula "34") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "34"))
                                                                  (rule "true_left" (formula "34"))
                                                                  (rule "commute_or" (formula "20") (term "0,0,1,1,0"))
                                                                  (rule "commute_or" (formula "19") (term "0,0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "19") (term "0,0"))
                                                                  (rule "add_literals" (formula "19") (term "1,1,0,0"))
                                                                  (rule "qeq_literals" (formula "19") (term "1,0,0"))
                                                                  (builtin "One Step Simplification" (formula "19"))
                                                                  (rule "true_left" (formula "19"))
                                                                  (rule "shift_paren_or" (formula "32") (term "0,0"))
                                                                  (rule "commute_or" (formula "32") (term "0,0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "32") (term "0,0"))
                                                                  (rule "add_literals" (formula "32") (term "1,1,0,0"))
                                                                  (rule "qeq_literals" (formula "32") (term "1,0,0"))
                                                                  (builtin "One Step Simplification" (formula "32"))
                                                                  (rule "true_left" (formula "32"))
                                                                  (rule "arrayLengthIsAShort" (formula "16") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "16"))
                                                                  (rule "true_left" (formula "16"))
                                                                  (rule "arrayLengthNotNegative" (formula "16") (term "0"))
                                                                  (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "17"))
                                                                  (rule "leq_literals" (formula "16") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "16"))
                                                                  (rule "true_left" (formula "16"))
                                                                  (rule "lenNonNegative" (formula "17") (term "0"))
                                                                  (rule "inEqSimp_commuteLeq" (formula "17"))
                                                                  (rule "applyEqRigid" (formula "17") (term "0") (ifseqformula "18"))
                                                                  (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "16"))
                                                                  (rule "leq_literals" (formula "17") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "17"))
                                                                  (rule "true_left" (formula "17"))
                                                                  (rule "cnf_rightDist" (formula "19") (term "1,1,0"))
                                                                  (rule "commute_or_2" (formula "19") (term "0,1,1,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "19") (term "0,0,1,1,0"))
                                                                  (rule "add_zero_right" (formula "19") (term "1,1,0,0,1,1,0"))
                                                                  (rule "qeq_literals" (formula "19") (term "1,0,0,1,1,0"))
                                                                  (builtin "One Step Simplification" (formula "19"))
                                                                  (rule "shift_paren_or" (formula "19") (term "1,1,0"))
                                                                  (rule "commute_or" (formula "19") (term "0,1,1,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "19") (term "1,1,0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "19") (term "1,1,1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "19") (term "0,1,1,1,0"))
                                                                  (rule "add_literals" (formula "19") (term "1,0,1,1,1,0"))
                                                                  (rule "times_zero_1" (formula "19") (term "0,1,1,1,0"))
                                                                  (rule "leq_literals" (formula "19") (term "1,1,1,0"))
                                                                  (builtin "One Step Simplification" (formula "19"))
                                                                  (rule "shift_paren_or" (formula "19") (term "0"))
                                                                  (rule "commute_or_2" (formula "19") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "19"))
                                                                  (rule "shift_paren_or" (formula "19") (term "0,0"))
                                                                  (rule "commute_or" (formula "19") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "19"))
                                                                  (rule "arrayLengthNotNegative" (formula "1") (term "0"))
                                                                  (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "2"))
                                                                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                                                  (rule "qeq_literals" (formula "2"))
                                                                  (rule "true_left" (formula "2"))
                                                                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                                                  (rule "leq_literals" (formula "2"))
                                                                  (rule "true_left" (formula "2"))
                                                                  (rule "ifthenelse_to_or_left" (formula "19") (term "0,0,0"))
                                                                  (rule "eqSymm" (formula "19") (term "1,0,0,0,0"))
                                                                  (rule "eqSymm" (formula "19") (term "1,1,0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "19") (term "0,0,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0,0,0,0"))
                                                                  (rule "add_zero_right" (formula "19") (term "0,0,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,0,0,0"))
                                                                  (rule "add_zero_left" (formula "19") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,0,0,0"))
                                                                  (rule "commute_or" (formula "19") (term "0,0"))
                                                                  (rule "commute_or_2" (formula "19") (term "0"))
                                                                  (rule "commute_or" (formula "19") (term "1,1,0"))
                                                                  (rule "commute_or_2" (formula "19") (term "0,1,0"))
                                                                  (rule "commute_or" (formula "19") (term "0,0,1,0"))
                                                                  (rule "cnf_rightDist" (formula "19") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "19") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "19"))
                                                                  (rule "andLeft" (formula "19"))
                                                                  (rule "commute_or" (formula "20") (term "0"))
                                                                  (rule "shift_paren_or" (formula "19") (term "0"))
                                                                  (rule "commute_or_2" (formula "19") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "19"))
                                                                  (rule "commute_or" (formula "20") (term "1,1,0"))
                                                                  (rule "shift_paren_or" (formula "19") (term "0,0"))
                                                                  (rule "commute_or" (formula "19") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "19"))
                                                                  (rule "cnf_rightDist" (formula "20") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "20"))
                                                                  (rule "andLeft" (formula "20"))
                                                                  (rule "commute_or_2" (formula "20") (term "0"))
                                                                  (rule "shift_paren_or" (formula "21") (term "0"))
                                                                  (rule "commute_or_2" (formula "21") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "21") (term "0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "21") (term "1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "21") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "21") (term "1,0,1,0"))
                                                                  (rule "times_zero_1" (formula "21") (term "0,1,0"))
                                                                  (rule "leq_literals" (formula "21") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "21"))
                                                                  (rule "true_left" (formula "21"))
                                                                  (rule "shift_paren_or" (formula "20") (term "0,0"))
                                                                  (rule "commute_or" (formula "20") (term "0,0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "20") (term "0,0"))
                                                                  (rule "add_zero_right" (formula "20") (term "1,1,0,0"))
                                                                  (rule "qeq_literals" (formula "20") (term "1,0,0"))
                                                                  (builtin "One Step Simplification" (formula "20"))
                                                                  (rule "true_left" (formula "20"))
                                                                  (rule "ifthenelse_split" (formula "5") (term "0"))
                                                                  (branch "messages[iv_23].<created> = TRUE TRUE"
                                                                     (rule "applyEqReverse" (formula "46") (term "1") (ifseqformula "6"))
                                                                     (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "6"))
                                                                     (rule "hideAuxiliaryEq" (formula "6"))
                                                                     (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "5"))
                                                                     (builtin "One Step Simplification" (formula "4"))
                                                                     (rule "applyEqReverse" (formula "45") (term "0") (ifseqformula "4"))
                                                                     (builtin "One Step Simplification" (formula "45"))
                                                                     (rule "closeTrue" (formula "45"))
                                                                  )
                                                                  (branch "messages[iv_23].<created> = TRUE FALSE"
                                                                     (rule "referencedObjectIsCreatedRight" (formula "39") (ifseqformula "41"))
                                                                     (rule "close" (formula "39") (ifseqformula "25"))
                                                                  )
                                                               )
                                                            )
                                                            (branch "messages[iv_23].length >= 1 FALSE"
                                                               (rule "inEqSimp_geqRight" (formula "39"))
                                                               (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                               (rule "add_literals" (formula "1") (term "0,0"))
                                                               (rule "add_zero_left" (formula "1") (term "0"))
                                                               (rule "inEqSimp_homoInEq1" (formula "9"))
                                                               (rule "times_zero_2" (formula "9") (term "1,0"))
                                                               (rule "add_zero_right" (formula "9") (term "0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "9"))
                                                               (rule "mul_literals" (formula "9") (term "1"))
                                                               (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "9"))
                                                               (rule "qeq_literals" (formula "8") (term "0"))
                                                               (builtin "One Step Simplification" (formula "8"))
                                                               (rule "closeFalse" (formula "8"))
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                                (branch "msg_2.length >= 1 FALSE"
                                                   (rule "eqSymm" (formula "15"))
                                                   (rule "inEqSimp_geqRight" (formula "40"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "applyEq" (formula "18") (term "1,1,0,0") (ifseqformula "16"))
                                                   (rule "applyEq" (formula "17") (term "1,1,0,0") (ifseqformula "16"))
                                                   (rule "applyEqRigid" (formula "32") (term "1,1,0,0") (ifseqformula "16"))
                                                   (rule "applyEq" (formula "31") (term "1") (ifseqformula "16"))
                                                   (rule "inEqSimp_or_tautInEq0" (formula "18") (term "0,0"))
                                                   (rule "add_literals" (formula "18") (term "1,1,0,0"))
                                                   (rule "qeq_literals" (formula "18") (term "1,0,0"))
                                                   (builtin "One Step Simplification" (formula "18"))
                                                   (rule "true_left" (formula "18"))
                                                   (rule "inEqSimp_or_tautInEq0" (formula "17") (term "0,0"))
                                                   (rule "add_zero_right" (formula "17") (term "1,1,0,0"))
                                                   (rule "qeq_literals" (formula "17") (term "1,0,0"))
                                                   (builtin "One Step Simplification" (formula "17"))
                                                   (rule "true_left" (formula "17"))
                                                   (rule "inEqSimp_or_tautInEq0" (formula "30") (term "0,0"))
                                                   (rule "add_literals" (formula "30") (term "1,1,0,0"))
                                                   (rule "qeq_literals" (formula "30") (term "1,0,0"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "true_left" (formula "30"))
                                                   (rule "commute_or_2" (formula "20") (term "0"))
                                                   (rule "ifthenelse_split" (formula "30") (term "0"))
                                                   (branch "x_arr_2 = msg_2 TRUE"
                                                      (rule "applyEqReverse" (formula "32") (term "0,0") (ifseqformula "31"))
                                                      (builtin "One Step Simplification" (formula "32"))
                                                      (rule "true_left" (formula "32"))
                                                      (rule "hideAuxiliaryEq" (formula "31"))
                                                      (rule "applyEq" (formula "32") (term "1,0,0,0,0,0") (ifseqformula "30"))
                                                      (rule "applyEq" (formula "44") (term "1,0") (ifseqformula "30"))
                                                      (rule "applyEq" (formula "15") (term "1,0,0,0,0,0") (ifseqformula "30"))
                                                      (rule "applyEq" (formula "44") (term "0") (ifseqformula "30"))
                                                      (rule "applyEq" (formula "32") (term "1,0,0,0,0,0,0,0,0") (ifseqformula "30"))
                                                      (rule "applyEq" (formula "22") (term "0,0") (ifseqformula "30"))
                                                      (rule "applyEq" (formula "32") (term "1,0,0,0,0,0,0") (ifseqformula "30"))
                                                      (rule "applyEq" (formula "32") (term "0,1,0,0,0,0") (ifseqformula "30"))
                                                      (rule "applyEq" (formula "15") (term "0,1,0,0,0,0") (ifseqformula "30"))
                                                      (rule "applyEq" (formula "23") (term "0,0") (ifseqformula "30"))
                                                      (rule "applyEq" (formula "15") (term "1,0,0,0,0,0,0,0,0") (ifseqformula "30"))
                                                      (rule "applyEq" (formula "32") (term "1,0,0,0,0,0,0,0") (ifseqformula "30"))
                                                      (rule "applyEq" (formula "15") (term "1,0,0,0,0,0,0,0") (ifseqformula "30"))
                                                      (rule "applyEq" (formula "15") (term "1,0,0,0") (ifseqformula "30"))
                                                      (rule "applyEq" (formula "37") (term "0") (ifseqformula "30"))
                                                      (rule "eqSymm" (formula "37"))
                                                      (rule "applyEq" (formula "15") (term "1,0,0,0,0,0,0") (ifseqformula "30"))
                                                      (rule "applyEq" (formula "5") (term "1,0,0") (ifseqformula "30"))
                                                      (rule "applyEq" (formula "32") (term "1,0,0,0") (ifseqformula "30"))
                                                      (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "22"))
                                                      (rule "leq_literals" (formula "1"))
                                                      (rule "true_left" (formula "1"))
                                                      (rule "lenNonNegative" (formula "28") (term "0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "28"))
                                                      (rule "applyEqRigid" (formula "28") (term "0") (ifseqformula "29"))
                                                      (rule "qeq_literals" (formula "28"))
                                                      (rule "true_left" (formula "28"))
                                                      (rule "lenNonNegative" (formula "16") (term "1"))
                                                      (rule "inEqSimp_commuteLeq" (formula "16"))
                                                      (rule "commute_or_2" (formula "36") (term "0"))
                                                      (rule "commute_or_2" (formula "18") (term "0"))
                                                      (rule "ifthenelse_split" (formula "35") (term "1"))
                                                      (branch "result_0.length >= 1 TRUE"
                                                         (rule "replace_known_left" (formula "37") (term "0,1,1,0") (ifseqformula "35"))
                                                         (builtin "One Step Simplification" (formula "37"))
                                                         (rule "allLeft" (formula "27") (inst "t=i_2"))
                                                         (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "27") (term "1") (ifseqformula "12"))
                                                         (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1"))
                                                         (rule "add_literals" (formula "27") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "27") (term "1,0,0,1"))
                                                         (rule "add_zero_right" (formula "27") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "27") (term "0,1"))
                                                         (builtin "One Step Simplification" (formula "27"))
                                                         (rule "inEqSimp_contradInEq1" (formula "27") (term "1") (ifseqformula "21"))
                                                         (rule "qeq_literals" (formula "27") (term "0,1"))
                                                         (builtin "One Step Simplification" (formula "27"))
                                                         (rule "notLeft" (formula "27"))
                                                         (rule "lenNonNegative" (formula "17") (term "0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "17"))
                                                         (rule "applyEqRigid" (formula "17") (term "0") (ifseqformula "18"))
                                                         (rule "seqGetAlphaCast" (formula "17") (term "0,0"))
                                                         (rule "castedGetAny" (formula "17") (term "0"))
                                                         (builtin "One Step Simplification" (formula "17"))
                                                         (rule "true_left" (formula "17"))
                                                         (rule "ifthenelse_split" (formula "19") (term "0"))
                                                         (branch "messages[i_2].length >= 1 TRUE"
                                                            (rule "eqSymm" (formula "20"))
                                                            (rule "applyEq" (formula "21") (term "1,1,0") (ifseqformula "20"))
                                                            (rule "applyEq" (formula "18") (term "1,1,0") (ifseqformula "20"))
                                                            (rule "applyEq" (formula "16") (term "0") (ifseqformula "20"))
                                                            (rule "applyEq" (formula "17") (term "1") (ifseqformula "20"))
                                                            (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "19"))
                                                            (rule "leq_literals" (formula "16") (term "0"))
                                                            (builtin "One Step Simplification" (formula "16"))
                                                            (rule "true_left" (formula "16"))
                                                            (rule "commute_and" (formula "5") (term "0,0"))
                                                            (rule "commute_or" (formula "20") (term "0,0"))
                                                            (rule "lenNonNegative" (formula "36") (term "0"))
                                                            (rule "inEqSimp_commuteLeq" (formula "36"))
                                                            (rule "arrayLengthIsAShort" (formula "37") (term "1,0,0,0"))
                                                            (builtin "One Step Simplification" (formula "37"))
                                                            (rule "true_left" (formula "37"))
                                                            (rule "arrayLengthNotNegative" (formula "37") (term "1,0,0,0"))
                                                            (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "18"))
                                                            (rule "leq_literals" (formula "37") (term "0"))
                                                            (builtin "One Step Simplification" (formula "37"))
                                                            (rule "true_left" (formula "37"))
                                                            (rule "commute_or" (formula "17") (term "0,0"))
                                                            (rule "commute_or" (formula "38") (term "0,0"))
                                                            (rule "allLeft" (formula "27") (inst "t=iv_23"))
                                                            (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                                                            (rule "inEqSimp_contradInEq1" (formula "27") (term "1,0") (ifseqformula "9"))
                                                            (rule "qeq_literals" (formula "27") (term "0,1,0"))
                                                            (builtin "One Step Simplification" (formula "27"))
                                                            (rule "inEqSimp_contradInEq1" (formula "27") (term "1") (ifseqformula "11"))
                                                            (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1"))
                                                            (rule "add_literals" (formula "27") (term "1,1,0,0,1"))
                                                            (rule "times_zero_1" (formula "27") (term "1,0,0,1"))
                                                            (rule "add_literals" (formula "27") (term "0,0,1"))
                                                            (rule "leq_literals" (formula "27") (term "0,1"))
                                                            (builtin "One Step Simplification" (formula "27"))
                                                            (rule "notLeft" (formula "27"))
                                                            (rule "replace_known_right" (formula "5") (term "0,1,0,0") (ifseqformula "39"))
                                                            (builtin "One Step Simplification" (formula "5"))
                                                            (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "39"))
                                                            (builtin "One Step Simplification" (formula "3"))
                                                            (rule "ifthenelse_negated" (formula "5") (term "0"))
                                                            (rule "ifthenelse_negated" (formula "3") (term "0"))
                                                            (rule "narrowSelectArrayType" (formula "5") (term "2,0") (ifseqformula "28") (ifseqformula "39"))
                                                            (rule "narrowSelectArrayType" (formula "5") (term "1,0") (ifseqformula "24") (ifseqformula "39"))
                                                            (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "31") (ifseqformula "39"))
                                                            (rule "ifthenelse_split" (formula "7") (term "0"))
                                                            (branch "messages[iv_23].length >= 1 TRUE"
                                                               (rule "replace_known_left" (formula "44") (term "0,0") (ifseqformula "8"))
                                                               (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "8")))
                                                               (rule "ifthenelse_to_or_left" (formula "21") (term "0,0,0"))
                                                               (rule "eqSymm" (formula "21") (term "1,1,0,0,0"))
                                                               (rule "nnf_notAnd" (formula "21") (term "0,0,0,0,0"))
                                                               (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,0,0,0"))
                                                               (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0,0,0,0"))
                                                               (rule "add_zero_right" (formula "21") (term "0,0,0,0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0,0"))
                                                               (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,0,0,0"))
                                                               (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,0,0,0"))
                                                               (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,0,0,0"))
                                                               (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,0,0,0"))
                                                               (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,0,0,0"))
                                                               (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,0,0"))
                                                               (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,0,0"))
                                                               (rule "commute_or" (formula "21") (term "0,0"))
                                                               (rule "commute_or_2" (formula "21") (term "0"))
                                                               (rule "commute_or" (formula "21") (term "1,1,0"))
                                                               (rule "commute_or_2" (formula "21") (term "0,1,0"))
                                                               (rule "commute_or" (formula "21") (term "0,0,1,0"))
                                                               (rule "cnf_rightDist" (formula "21") (term "1,1,0"))
                                                               (rule "cnf_rightDist" (formula "21") (term "0"))
                                                               (rule "distr_forallAnd" (formula "21"))
                                                               (rule "andLeft" (formula "21"))
                                                               (rule "commute_or" (formula "22") (term "0"))
                                                               (rule "shift_paren_or" (formula "21") (term "0"))
                                                               (rule "commute_or_2" (formula "21") (term "0,0"))
                                                               (builtin "One Step Simplification" (formula "21"))
                                                               (rule "commute_or" (formula "22") (term "1,1,0"))
                                                               (rule "shift_paren_or" (formula "21") (term "0,0"))
                                                               (rule "commute_or" (formula "21") (term "0,0,0"))
                                                               (builtin "One Step Simplification" (formula "21"))
                                                               (rule "cnf_rightDist" (formula "22") (term "0"))
                                                               (rule "distr_forallAnd" (formula "22"))
                                                               (rule "andLeft" (formula "22"))
                                                               (rule "commute_or_2" (formula "22") (term "0"))
                                                               (rule "shift_paren_or" (formula "23") (term "0"))
                                                               (rule "commute_or_2" (formula "23") (term "0,0"))
                                                               (rule "inEqSimp_or_tautInEq1" (formula "23") (term "0"))
                                                               (rule "inEqSimp_homoInEq1" (formula "23") (term "1,0"))
                                                               (rule "polySimp_pullOutFactor1" (formula "23") (term "0,1,0"))
                                                               (rule "add_literals" (formula "23") (term "1,0,1,0"))
                                                               (rule "times_zero_1" (formula "23") (term "0,1,0"))
                                                               (rule "leq_literals" (formula "23") (term "1,0"))
                                                               (builtin "One Step Simplification" (formula "23"))
                                                               (rule "true_left" (formula "23"))
                                                               (rule "shift_paren_or" (formula "22") (term "0,0"))
                                                               (rule "commute_or" (formula "22") (term "0,0,0"))
                                                               (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0,0"))
                                                               (rule "add_zero_right" (formula "22") (term "1,1,0,0"))
                                                               (rule "qeq_literals" (formula "22") (term "1,0,0"))
                                                               (builtin "One Step Simplification" (formula "22"))
                                                               (rule "true_left" (formula "22"))
                                                               (rule "ifthenelse_to_or_left" (formula "18") (term "0,0,0"))
                                                               (rule "eqSymm" (formula "18") (term "1,1,0,0,0"))
                                                               (rule "nnf_notAnd" (formula "18") (term "0,0,0,0,0"))
                                                               (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0,0,0,0"))
                                                               (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,0,0,0"))
                                                               (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,0,0,0"))
                                                               (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,0,0,0"))
                                                               (rule "add_zero_left" (formula "18") (term "0,0,1,0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0,0,0,0"))
                                                               (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0,0,0"))
                                                               (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0,0,0"))
                                                               (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "18") (term "1,0,0,0,0,0,0,0,0"))
                                                               (rule "add_zero_right" (formula "18") (term "0,0,0,0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "18") (term "1,0,0,0,0,0,0"))
                                                               (rule "commute_or" (formula "18") (term "0,0"))
                                                               (rule "commute_or_2" (formula "18") (term "0"))
                                                               (rule "ifthenelse_to_or_right" (formula "39") (term "0,0,0"))
                                                               (rule "nnf_notAnd" (formula "39") (term "0,0,0,0,0"))
                                                               (rule "inEqSimp_notLeq" (formula "39") (term "1,0,0,0,0,0"))
                                                               (rule "polySimp_rightDist" (formula "39") (term "1,0,0,1,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "39") (term "0,1,0,0,1,0,0,0,0,0"))
                                                               (rule "polySimp_addAssoc" (formula "39") (term "0,0,1,0,0,0,0,0"))
                                                               (rule "add_literals" (formula "39") (term "0,0,0,1,0,0,0,0,0"))
                                                               (rule "add_zero_left" (formula "39") (term "0,0,1,0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "1,0,0,0,0,0"))
                                                               (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0,0,0,0"))
                                                               (rule "polySimp_elimOne" (formula "39") (term "1,1,0,0,0,0,0"))
                                                               (rule "inEqSimp_notGeq" (formula "39") (term "0,0,0,0,0,0"))
                                                               (rule "times_zero_1" (formula "39") (term "1,0,0,0,0,0,0,0,0"))
                                                               (rule "add_zero_right" (formula "39") (term "0,0,0,0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "0,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "39") (term "1,0,0,0,0,0,0"))
                                                               (rule "commute_or" (formula "39") (term "0,0"))
                                                               (rule "commute_or_2" (formula "39") (term "0"))
                                                               (rule "commute_or" (formula "18") (term "1,1,0"))
                                                               (rule "commute_or_2" (formula "18") (term "0,1,0"))
                                                               (rule "commute_or_2" (formula "39") (term "0,1,0"))
                                                               (rule "commute_or" (formula "39") (term "1,1,0"))
                                                               (rule "commute_or" (formula "18") (term "0,0,1,0"))
                                                               (rule "commute_or" (formula "39") (term "0,0,1,0"))
                                                               (rule "ifthenelse_split" (formula "4") (term "0"))
                                                               (branch "messages[iv_23] = msg_2 TRUE"
                                                                  (rule "referencedObjectIsCreatedRightEQ" (formula "48") (ifseqformula "4") (ifseqformula "49"))
                                                                  (rule "close" (formula "48") (ifseqformula "26"))
                                                               )
                                                               (branch "messages[iv_23] = msg_2 FALSE"
                                                                  (rule "applyEqReverse" (formula "3") (term "0,0,0,0") (ifseqformula "4"))
                                                                  (rule "applyEqReverse" (formula "5") (term "0,0,0") (ifseqformula "4"))
                                                                  (rule "hideAuxiliaryEq" (formula "4"))
                                                                  (rule "cnf_rightDist" (formula "17") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "17") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "17"))
                                                                  (rule "andLeft" (formula "17"))
                                                                  (rule "commute_or" (formula "18") (term "0"))
                                                                  (rule "shift_paren_or" (formula "17") (term "0"))
                                                                  (rule "commute_or_2" (formula "17") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "17"))
                                                                  (rule "commute_or" (formula "18") (term "1,1,0"))
                                                                  (rule "shift_paren_or" (formula "17") (term "0,0"))
                                                                  (rule "commute_or" (formula "17") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "17"))
                                                                  (rule "cnf_rightDist" (formula "18") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "18"))
                                                                  (rule "andLeft" (formula "18"))
                                                                  (rule "commute_or_2" (formula "18") (term "0"))
                                                                  (rule "shift_paren_or" (formula "19") (term "0"))
                                                                  (rule "commute_or_2" (formula "19") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "19") (term "0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "19") (term "1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "19") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "19") (term "1,0,1,0"))
                                                                  (rule "times_zero_1" (formula "19") (term "0,1,0"))
                                                                  (rule "leq_literals" (formula "19") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "19"))
                                                                  (rule "true_left" (formula "19"))
                                                                  (rule "shift_paren_or" (formula "18") (term "0,0"))
                                                                  (rule "commute_or" (formula "18") (term "0,0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "18") (term "0,0"))
                                                                  (rule "add_zero_right" (formula "18") (term "1,1,0,0"))
                                                                  (rule "qeq_literals" (formula "18") (term "1,0,0"))
                                                                  (builtin "One Step Simplification" (formula "18"))
                                                                  (rule "true_left" (formula "18"))
                                                                  (rule "cnf_rightDist" (formula "38") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "38") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "38"))
                                                                  (rule "andLeft" (formula "38"))
                                                                  (rule "commute_or" (formula "39") (term "0"))
                                                                  (rule "shift_paren_or" (formula "38") (term "0"))
                                                                  (rule "commute_or_2" (formula "38") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "38"))
                                                                  (rule "commute_or" (formula "39") (term "1,1,0"))
                                                                  (rule "shift_paren_or" (formula "38") (term "0,0"))
                                                                  (rule "commute_or" (formula "38") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "38"))
                                                                  (rule "cnf_rightDist" (formula "39") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "39"))
                                                                  (rule "andLeft" (formula "39"))
                                                                  (rule "commute_or_2" (formula "39") (term "0"))
                                                                  (rule "shift_paren_or" (formula "40") (term "0"))
                                                                  (rule "commute_or_2" (formula "40") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "40") (term "0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "40") (term "1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "40") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "40") (term "1,0,1,0"))
                                                                  (rule "times_zero_1" (formula "40") (term "0,1,0"))
                                                                  (rule "leq_literals" (formula "40") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "40"))
                                                                  (rule "true_left" (formula "40"))
                                                                  (rule "shift_paren_or" (formula "39") (term "0,0"))
                                                                  (rule "lenNonNegative" (formula "15") (term "0"))
                                                                  (rule "inEqSimp_commuteLeq" (formula "15"))
                                                                  (rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
                                                                  (rule "qeq_literals" (formula "15"))
                                                                  (rule "true_left" (formula "15"))
                                                                  (rule "commute_or" (formula "39") (term "0,0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "39") (term "0,0"))
                                                                  (rule "add_literals" (formula "39") (term "1,1,0,0"))
                                                                  (rule "qeq_literals" (formula "39") (term "1,0,0"))
                                                                  (builtin "One Step Simplification" (formula "39"))
                                                                  (rule "true_left" (formula "39"))
                                                                  (rule "arrayLengthNotNegative" (formula "22") (term "0"))
                                                                  (rule "applyEqRigid" (formula "22") (term "0") (ifseqformula "23"))
                                                                  (rule "qeq_literals" (formula "22"))
                                                                  (rule "true_left" (formula "22"))
                                                                  (rule "arrayLengthIsAShort" (formula "22") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "22"))
                                                                  (rule "true_left" (formula "22"))
                                                                  (rule "equalityToSeqGetAndSeqLenLeft" (formula "14") (inst "iv=iv"))
                                                                  (rule "andLeft" (formula "14"))
                                                                  (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                                                                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                                                                  (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                                                                  (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "16"))
                                                                  (builtin "One Step Simplification" (formula "14"))
                                                                  (rule "true_left" (formula "14"))
                                                                  (rule "applyEq" (formula "14") (term "0,0,1,0,0,1,0,0") (ifseqformula "15"))
                                                                  (rule "applyEq" (formula "14") (term "0,0,1,0") (ifseqformula "15"))
                                                                  (builtin "One Step Simplification" (formula "14"))
                                                                  (rule "true_left" (formula "14"))
                                                                  (rule "arrayLengthIsAShort" (formula "35") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "35"))
                                                                  (rule "true_left" (formula "35"))
                                                                  (rule "arrayLengthNotNegative" (formula "37") (term "1"))
                                                                  (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "35"))
                                                                  (rule "leq_literals" (formula "37") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "37"))
                                                                  (rule "true_left" (formula "37"))
                                                                  (rule "onlyCreatedObjectsAreReferenced" (formula "37") (term "0,1,0,0,0") (ifseqformula "24"))
                                                                  (rule "replace_known_right" (formula "37") (term "0") (ifseqformula "42"))
                                                                  (builtin "One Step Simplification" (formula "37"))
                                                                  (rule "arrayLengthIsAShort" (formula "7") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "7"))
                                                                  (rule "true_left" (formula "7"))
                                                                  (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                                                  (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "7"))
                                                                  (rule "leq_literals" (formula "6") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "6"))
                                                                  (rule "true_left" (formula "6"))
                                                                  (rule "ifthenelse_split" (formula "4") (term "0"))
                                                                  (branch "messages[iv_23].<created> = TRUE TRUE"
                                                                     (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "5"))
                                                                     (rule "applyEqReverse" (formula "46") (term "1") (ifseqformula "5"))
                                                                     (rule "hideAuxiliaryEq" (formula "5"))
                                                                     (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "4"))
                                                                     (builtin "One Step Simplification" (formula "3"))
                                                                     (rule "applyEqReverse" (formula "45") (term "0") (ifseqformula "3"))
                                                                     (builtin "One Step Simplification" (formula "45"))
                                                                     (rule "closeTrue" (formula "45"))
                                                                  )
                                                                  (branch "messages[iv_23].<created> = TRUE FALSE"
                                                                     (rule "referencedObjectIsCreatedRight" (formula "40") (ifseqformula "42"))
                                                                     (rule "close" (formula "40") (ifseqformula "24"))
                                                                  )
                                                               )
                                                            )
                                                            (branch "messages[iv_23].length >= 1 FALSE"
                                                               (rule "inEqSimp_geqRight" (formula "39"))
                                                               (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                               (rule "add_literals" (formula "1") (term "0,0"))
                                                               (rule "add_zero_left" (formula "1") (term "0"))
                                                               (rule "inEqSimp_homoInEq1" (formula "8"))
                                                               (rule "times_zero_2" (formula "8") (term "1,0"))
                                                               (rule "add_zero_right" (formula "8") (term "0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "8"))
                                                               (rule "mul_literals" (formula "8") (term "1"))
                                                               (rule "inEqSimp_contradInEq1" (formula "8") (ifseqformula "7"))
                                                               (rule "qeq_literals" (formula "8") (term "0"))
                                                               (builtin "One Step Simplification" (formula "8"))
                                                               (rule "closeFalse" (formula "8"))
                                                            )
                                                         )
                                                         (branch "messages[i_2].length >= 1 FALSE"
                                                            (rule "eqSymm" (formula "19"))
                                                            (rule "inEqSimp_geqRight" (formula "38"))
                                                            (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0"))
                                                            (rule "applyEqRigid" (formula "21") (term "1,1,0") (ifseqformula "20"))
                                                            (rule "applyEq" (formula "19") (term "1,1,0") (ifseqformula "20"))
                                                            (rule "applyEqRigid" (formula "17") (term "0") (ifseqformula "20"))
                                                            (rule "qeq_literals" (formula "17"))
                                                            (rule "true_left" (formula "17"))
                                                            (rule "applyEq" (formula "17") (term "1") (ifseqformula "19"))
                                                            (rule "commute_and" (formula "6") (term "0,0"))
                                                            (rule "commute_or" (formula "20") (term "0,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "20") (term "0"))
                                                            (rule "add_literals" (formula "20") (term "1,1,0"))
                                                            (rule "qeq_literals" (formula "20") (term "1,0"))
                                                            (builtin "One Step Simplification" (formula "20"))
                                                            (rule "true_left" (formula "20"))
                                                            (rule "lenNonNegative" (formula "35") (term "0"))
                                                            (rule "inEqSimp_commuteLeq" (formula "35"))
                                                            (rule "arrayLengthNotNegative" (formula "36") (term "1,0,0,0"))
                                                            (rule "inEqSimp_antiSymm" (formula "36") (ifseqformula "1"))
                                                            (rule "applyEq" (formula "38") (term "1,0,0,0") (ifseqformula "36"))
                                                            (rule "seqDef_lower_equals_upper" (formula "38") (term "0,0,0"))
                                                            (rule "applyEq" (formula "1") (term "0") (ifseqformula "36"))
                                                            (rule "leq_literals" (formula "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "applyEq" (formula "17") (term "1,1,1,0,0,1,0,0") (ifseqformula "35"))
                                                            (rule "add_literals" (formula "17") (term "1,1,0,0,1,0,0"))
                                                            (rule "applyEq" (formula "34") (term "1,0,0,0") (ifseqformula "35"))
                                                            (rule "seqDef_lower_equals_upper" (formula "34") (term "0,0,0"))
                                                            (rule "applyEq" (formula "38") (term "1,0,0,0,1,0,0") (ifseqformula "35"))
                                                            (rule "seqDef_lower_equals_upper" (formula "38") (term "0,0,0,1,0,0"))
                                                            (rule "eqSymm" (formula "38") (term "1,0,0"))
                                                            (rule "applyEq" (formula "36") (term "0") (ifseqformula "35"))
                                                            (rule "qeq_literals" (formula "36"))
                                                            (rule "true_left" (formula "36"))
                                                            (rule "applyEq" (formula "34") (term "0") (ifseqformula "36"))
                                                            (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "33"))
                                                            (rule "leq_literals" (formula "34") (term "0"))
                                                            (builtin "One Step Simplification" (formula "34"))
                                                            (rule "true_left" (formula "34"))
                                                            (rule "commute_or" (formula "17") (term "0,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "17") (term "0"))
                                                            (rule "add_zero_right" (formula "17") (term "1,1,0"))
                                                            (rule "qeq_literals" (formula "17") (term "1,0"))
                                                            (builtin "One Step Simplification" (formula "17"))
                                                            (rule "true_left" (formula "17"))
                                                            (rule "commute_or" (formula "35") (term "0,0"))
                                                            (rule "allLeft" (formula "24") (inst "t=iv_23"))
                                                            (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                                                            (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "11"))
                                                            (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
                                                            (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
                                                            (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                                                            (rule "add_zero_right" (formula "24") (term "0,0,1"))
                                                            (rule "leq_literals" (formula "24") (term "0,1"))
                                                            (builtin "One Step Simplification" (formula "24"))
                                                            (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "9"))
                                                            (rule "qeq_literals" (formula "24") (term "0,1"))
                                                            (builtin "One Step Simplification" (formula "24"))
                                                            (rule "notLeft" (formula "24"))
                                                            (rule "replace_known_right" (formula "5") (term "0,1,0,0") (ifseqformula "36"))
                                                            (builtin "One Step Simplification" (formula "5"))
                                                            (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "36"))
                                                            (builtin "One Step Simplification" (formula "3"))
                                                            (rule "ifthenelse_negated" (formula "5") (term "0"))
                                                            (rule "ifthenelse_negated" (formula "3") (term "0"))
                                                            (rule "narrowSelectArrayType" (formula "5") (term "1,0") (ifseqformula "21") (ifseqformula "36"))
                                                            (rule "narrowSelectArrayType" (formula "5") (term "2,0") (ifseqformula "25") (ifseqformula "36"))
                                                            (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "28") (ifseqformula "36"))
                                                            (rule "ifthenelse_split" (formula "7") (term "0"))
                                                            (branch "messages[iv_23].length >= 1 TRUE"
                                                               (rule "replace_known_left" (formula "41") (term "0,0") (ifseqformula "8"))
                                                               (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "8")))
                                                               (rule "ifthenelse_to_or_left" (formula "36") (term "0,0,0"))
                                                               (rule "eqSymm" (formula "36") (term "1,1,0,0,0"))
                                                               (rule "nnf_notAnd" (formula "36") (term "0,0,0,0,0"))
                                                               (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0,0,0,0"))
                                                               (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,0,0,0"))
                                                               (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,0,0,0"))
                                                               (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,0,0,0"))
                                                               (rule "add_zero_left" (formula "36") (term "0,0,1,0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0,0,0,0"))
                                                               (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,0,0,0"))
                                                               (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0,0,0,0"))
                                                               (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "36") (term "1,0,0,0,0,0,0,0,0"))
                                                               (rule "add_literals" (formula "36") (term "0,0,0,0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "36") (term "1,0,0,0,0,0,0"))
                                                               (rule "commute_or" (formula "36") (term "0,0"))
                                                               (rule "commute_or_2" (formula "36") (term "0"))
                                                               (rule "commute_or_2" (formula "36") (term "0,1,0"))
                                                               (rule "commute_or" (formula "36") (term "1,1,0"))
                                                               (rule "commute_or" (formula "36") (term "0,0,1,0"))
                                                               (rule "cnf_rightDist" (formula "36") (term "1,1,0"))
                                                               (rule "cnf_rightDist" (formula "36") (term "0"))
                                                               (rule "distr_forallAnd" (formula "36"))
                                                               (rule "andLeft" (formula "36"))
                                                               (rule "commute_or" (formula "37") (term "0"))
                                                               (rule "shift_paren_or" (formula "36") (term "0"))
                                                               (rule "commute_or_2" (formula "36") (term "0,0"))
                                                               (builtin "One Step Simplification" (formula "36"))
                                                               (rule "commute_or" (formula "37") (term "1,1,0"))
                                                               (rule "shift_paren_or" (formula "36") (term "0,0"))
                                                               (rule "commute_or" (formula "36") (term "0,0,0"))
                                                               (builtin "One Step Simplification" (formula "36"))
                                                               (rule "cnf_rightDist" (formula "37") (term "0"))
                                                               (rule "distr_forallAnd" (formula "37"))
                                                               (rule "andLeft" (formula "37"))
                                                               (rule "commute_or_2" (formula "37") (term "0"))
                                                               (rule "shift_paren_or" (formula "38") (term "0"))
                                                               (rule "commute_or_2" (formula "38") (term "0,0"))
                                                               (rule "inEqSimp_or_tautInEq1" (formula "38") (term "0"))
                                                               (rule "inEqSimp_homoInEq1" (formula "38") (term "1,0"))
                                                               (rule "polySimp_pullOutFactor1" (formula "38") (term "0,1,0"))
                                                               (rule "add_literals" (formula "38") (term "1,0,1,0"))
                                                               (rule "times_zero_1" (formula "38") (term "0,1,0"))
                                                               (rule "leq_literals" (formula "38") (term "1,0"))
                                                               (builtin "One Step Simplification" (formula "38"))
                                                               (rule "true_left" (formula "38"))
                                                               (rule "shift_paren_or" (formula "37") (term "0,0"))
                                                               (rule "commute_or" (formula "37") (term "0,0,0"))
                                                               (rule "inEqSimp_or_tautInEq1" (formula "37") (term "0,0"))
                                                               (rule "add_zero_right" (formula "37") (term "1,1,0,0"))
                                                               (rule "qeq_literals" (formula "37") (term "1,0,0"))
                                                               (builtin "One Step Simplification" (formula "37"))
                                                               (rule "true_left" (formula "37"))
                                                               (rule "ifthenelse_split" (formula "4") (term "0"))
                                                               (branch "messages[iv_23] = msg_2 TRUE"
                                                                  (rule "referencedObjectIsCreatedRightEQ" (formula "45") (ifseqformula "4") (ifseqformula "46"))
                                                                  (rule "close" (formula "45") (ifseqformula "23"))
                                                               )
                                                               (branch "messages[iv_23] = msg_2 FALSE"
                                                                  (rule "applyEqReverse" (formula "5") (term "0,0,0") (ifseqformula "4"))
                                                                  (rule "applyEqReverse" (formula "3") (term "0,0,0,0") (ifseqformula "4"))
                                                                  (rule "hideAuxiliaryEq" (formula "4"))
                                                                  (rule "lenNonNegative" (formula "15") (term "0"))
                                                                  (rule "inEqSimp_commuteLeq" (formula "15"))
                                                                  (rule "applyEqRigid" (formula "15") (term "0") (ifseqformula "16"))
                                                                  (rule "qeq_literals" (formula "15"))
                                                                  (rule "true_left" (formula "15"))
                                                                  (rule "arrayLengthNotNegative" (formula "19") (term "0"))
                                                                  (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                                                                  (rule "qeq_literals" (formula "19"))
                                                                  (rule "true_left" (formula "19"))
                                                                  (rule "arrayLengthIsAShort" (formula "19") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "19"))
                                                                  (rule "true_left" (formula "19"))
                                                                  (rule "equalityToSeqGetAndSeqLenLeft" (formula "14") (inst "iv=iv"))
                                                                  (rule "andLeft" (formula "14"))
                                                                  (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                                                                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                                                                  (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                                                                  (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "16"))
                                                                  (builtin "One Step Simplification" (formula "14"))
                                                                  (rule "true_left" (formula "14"))
                                                                  (rule "applyEq" (formula "14") (term "0,0,1,0,0,1,0,0") (ifseqformula "15"))
                                                                  (rule "applyEq" (formula "14") (term "0,0,1,0") (ifseqformula "15"))
                                                                  (builtin "One Step Simplification" (formula "14"))
                                                                  (rule "true_left" (formula "14"))
                                                                  (rule "arrayLengthIsAShort" (formula "32") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "32"))
                                                                  (rule "true_left" (formula "32"))
                                                                  (rule "arrayLengthNotNegative" (formula "32") (term "0"))
                                                                  (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "33"))
                                                                  (rule "leq_literals" (formula "32") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "32"))
                                                                  (rule "true_left" (formula "32"))
                                                                  (rule "arrayLengthIsAShort" (formula "33") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "33"))
                                                                  (rule "true_left" (formula "33"))
                                                                  (rule "lenNonNegative" (formula "34") (term "0"))
                                                                  (rule "inEqSimp_commuteLeq" (formula "34"))
                                                                  (rule "applyEq" (formula "34") (term "0") (ifseqformula "35"))
                                                                  (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "32"))
                                                                  (rule "leq_literals" (formula "34") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "34"))
                                                                  (rule "true_left" (formula "34"))
                                                                  (rule "ifthenelse_split" (formula "4") (term "0"))
                                                                  (branch "messages[iv_23].<created> = TRUE TRUE"
                                                                     (rule "applyEqReverse" (formula "42") (term "1") (ifseqformula "5"))
                                                                     (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "5"))
                                                                     (rule "hideAuxiliaryEq" (formula "5"))
                                                                     (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "4"))
                                                                     (builtin "One Step Simplification" (formula "3"))
                                                                     (rule "applyEqReverse" (formula "41") (term "0") (ifseqformula "3"))
                                                                     (builtin "One Step Simplification" (formula "41"))
                                                                     (rule "closeTrue" (formula "41"))
                                                                  )
                                                                  (branch "messages[iv_23].<created> = TRUE FALSE"
                                                                     (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "38"))
                                                                     (rule "close" (formula "36") (ifseqformula "21"))
                                                                  )
                                                               )
                                                            )
                                                            (branch "messages[iv_23].length >= 1 FALSE"
                                                               (rule "inEqSimp_geqRight" (formula "36"))
                                                               (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                               (rule "add_literals" (formula "1") (term "0,0"))
                                                               (rule "add_zero_left" (formula "1") (term "0"))
                                                               (rule "inEqSimp_homoInEq1" (formula "8"))
                                                               (rule "mul_literals" (formula "8") (term "1,0"))
                                                               (rule "add_zero_right" (formula "8") (term "0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "8"))
                                                               (rule "mul_literals" (formula "8") (term "1"))
                                                               (rule "inEqSimp_contradInEq1" (formula "8") (ifseqformula "7"))
                                                               (rule "qeq_literals" (formula "8") (term "0"))
                                                               (builtin "One Step Simplification" (formula "8"))
                                                               (rule "closeFalse" (formula "8"))
                                                            )
                                                         )
                                                      )
                                                      (branch "result_0.length >= 1 FALSE"
                                                         (rule "replace_known_right" (formula "36") (term "0,1,1,0") (ifseqformula "37"))
                                                         (builtin "One Step Simplification" (formula "36"))
                                                         (rule "inEqSimp_geqRight" (formula "37"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "allLeft" (formula "28") (inst "t=i_2"))
                                                         (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "28") (term "1,0") (ifseqformula "22"))
                                                         (rule "qeq_literals" (formula "28") (term "0,1,0"))
                                                         (builtin "One Step Simplification" (formula "28"))
                                                         (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "13"))
                                                         (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                                                         (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                                                         (rule "add_zero_right" (formula "28") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "28") (term "0,1"))
                                                         (builtin "One Step Simplification" (formula "28"))
                                                         (rule "notLeft" (formula "28"))
                                                         (rule "seqGetAlphaCast" (formula "18") (term "0,0"))
                                                         (rule "castedGetAny" (formula "18") (term "0"))
                                                         (builtin "One Step Simplification" (formula "18"))
                                                         (rule "true_left" (formula "18"))
                                                         (rule "lenNonNegative" (formula "18") (term "0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "18"))
                                                         (rule "applyEqRigid" (formula "18") (term "0") (ifseqformula "19"))
                                                         (rule "ifthenelse_split" (formula "20") (term "0"))
                                                         (branch "messages[i_2].length >= 1 TRUE"
                                                            (rule "eqSymm" (formula "21"))
                                                            (rule "applyEq" (formula "19") (term "1,1,0") (ifseqformula "21"))
                                                            (rule "applyEq" (formula "22") (term "1,1,0") (ifseqformula "21"))
                                                            (rule "applyEq" (formula "17") (term "0") (ifseqformula "21"))
                                                            (rule "applyEq" (formula "18") (term "1") (ifseqformula "21"))
                                                            (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "20"))
                                                            (rule "leq_literals" (formula "17") (term "0"))
                                                            (builtin "One Step Simplification" (formula "17"))
                                                            (rule "true_left" (formula "17"))
                                                            (rule "commute_and" (formula "6") (term "0,0"))
                                                            (rule "commute_or" (formula "21") (term "0,0"))
                                                            (rule "arrayLengthIsAShort" (formula "36") (term "1,0,0,0"))
                                                            (builtin "One Step Simplification" (formula "36"))
                                                            (rule "true_left" (formula "36"))
                                                            (rule "lenNonNegative" (formula "36") (term "0"))
                                                            (rule "inEqSimp_commuteLeq" (formula "36"))
                                                            (rule "arrayLengthNotNegative" (formula "37") (term "1,0,0,0"))
                                                            (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "19"))
                                                            (rule "leq_literals" (formula "37") (term "0"))
                                                            (builtin "One Step Simplification" (formula "37"))
                                                            (rule "true_left" (formula "37"))
                                                            (rule "commute_or" (formula "18") (term "0,0"))
                                                            (rule "commute_or" (formula "38") (term "0,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "38") (term "0"))
                                                            (rule "add_literals" (formula "38") (term "1,1,0"))
                                                            (rule "qeq_literals" (formula "38") (term "1,0"))
                                                            (builtin "One Step Simplification" (formula "38"))
                                                            (rule "true_left" (formula "38"))
                                                            (rule "allLeft" (formula "28") (inst "t=iv_23"))
                                                            (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                                                            (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "12"))
                                                            (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                                                            (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                                                            (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                                                            (rule "add_literals" (formula "28") (term "0,0,1"))
                                                            (rule "leq_literals" (formula "28") (term "0,1"))
                                                            (builtin "One Step Simplification" (formula "28"))
                                                            (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "10"))
                                                            (rule "qeq_literals" (formula "28") (term "0,1"))
                                                            (builtin "One Step Simplification" (formula "28"))
                                                            (rule "notLeft" (formula "28"))
                                                            (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "38"))
                                                            (builtin "One Step Simplification" (formula "4"))
                                                            (rule "replace_known_right" (formula "6") (term "0,1,0,0") (ifseqformula "38"))
                                                            (builtin "One Step Simplification" (formula "6"))
                                                            (rule "ifthenelse_negated" (formula "4") (term "0"))
                                                            (rule "ifthenelse_negated" (formula "6") (term "0"))
                                                            (rule "narrowSelectArrayType" (formula "4") (term "2,0") (ifseqformula "32") (ifseqformula "38"))
                                                            (rule "narrowSelectArrayType" (formula "6") (term "1,0") (ifseqformula "25") (ifseqformula "38"))
                                                            (rule "narrowSelectArrayType" (formula "6") (term "2,0") (ifseqformula "29") (ifseqformula "38"))
                                                            (rule "ifthenelse_split" (formula "8") (term "0"))
                                                            (branch "messages[iv_23].length >= 1 TRUE"
                                                               (rule "replace_known_left" (formula "43") (term "0,0") (ifseqformula "9"))
                                                               (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "9")))
                                                               (rule "ifthenelse_to_or_left" (formula "22") (term "0,0,0"))
                                                               (rule "eqSymm" (formula "22") (term "1,1,0,0,0"))
                                                               (rule "nnf_notAnd" (formula "22") (term "0,0,0,0,0"))
                                                               (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0,0,0,0"))
                                                               (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0,0,0,0"))
                                                               (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,0,0,0"))
                                                               (rule "add_literals" (formula "22") (term "0,0,0,1,0,0,0,0,0"))
                                                               (rule "add_zero_left" (formula "22") (term "0,0,1,0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0,0,0,0"))
                                                               (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0,0,0"))
                                                               (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0,0,0"))
                                                               (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0,0,0,0"))
                                                               (rule "add_zero_right" (formula "22") (term "0,0,0,0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0,0"))
                                                               (rule "commute_or" (formula "22") (term "0,0"))
                                                               (rule "commute_or_2" (formula "22") (term "0"))
                                                               (rule "commute_or" (formula "22") (term "1,1,0"))
                                                               (rule "commute_or_2" (formula "22") (term "0,1,0"))
                                                               (rule "commute_or" (formula "22") (term "0,0,1,0"))
                                                               (rule "ifthenelse_to_or_left" (formula "19") (term "0,0,0"))
                                                               (rule "eqSymm" (formula "19") (term "1,1,0,0,0"))
                                                               (rule "nnf_notAnd" (formula "19") (term "0,0,0,0,0"))
                                                               (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0,0,0,0"))
                                                               (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,0,0,0"))
                                                               (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,0,0,0"))
                                                               (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,0,0,0"))
                                                               (rule "add_zero_left" (formula "19") (term "0,0,1,0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0,0,0,0"))
                                                               (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0,0,0"))
                                                               (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,0,0,0"))
                                                               (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0,0,0,0"))
                                                               (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0,0,0,0"))
                                                               (rule "add_zero_right" (formula "19") (term "0,0,0,0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0,0"))
                                                               (rule "commute_or" (formula "19") (term "0,0"))
                                                               (rule "commute_or_2" (formula "19") (term "0"))
                                                               (rule "commute_or" (formula "19") (term "1,1,0"))
                                                               (rule "commute_or_2" (formula "19") (term "0,1,0"))
                                                               (rule "commute_or" (formula "19") (term "0,0,1,0"))
                                                               (rule "cnf_rightDist" (formula "22") (term "1,1,0"))
                                                               (rule "cnf_rightDist" (formula "22") (term "0"))
                                                               (rule "distr_forallAnd" (formula "22"))
                                                               (rule "andLeft" (formula "22"))
                                                               (rule "commute_or" (formula "23") (term "0"))
                                                               (rule "shift_paren_or" (formula "22") (term "0"))
                                                               (rule "commute_or_2" (formula "22") (term "0,0"))
                                                               (builtin "One Step Simplification" (formula "22"))
                                                               (rule "commute_or" (formula "23") (term "1,1,0"))
                                                               (rule "shift_paren_or" (formula "22") (term "0,0"))
                                                               (rule "commute_or" (formula "22") (term "0,0,0"))
                                                               (builtin "One Step Simplification" (formula "22"))
                                                               (rule "cnf_rightDist" (formula "23") (term "0"))
                                                               (rule "distr_forallAnd" (formula "23"))
                                                               (rule "andLeft" (formula "23"))
                                                               (rule "commute_or_2" (formula "23") (term "0"))
                                                               (rule "shift_paren_or" (formula "24") (term "0"))
                                                               (rule "commute_or_2" (formula "24") (term "0,0"))
                                                               (rule "inEqSimp_or_tautInEq1" (formula "24") (term "0"))
                                                               (rule "inEqSimp_homoInEq1" (formula "24") (term "1,0"))
                                                               (rule "polySimp_pullOutFactor1" (formula "24") (term "0,1,0"))
                                                               (rule "add_literals" (formula "24") (term "1,0,1,0"))
                                                               (rule "times_zero_1" (formula "24") (term "0,1,0"))
                                                               (rule "leq_literals" (formula "24") (term "1,0"))
                                                               (builtin "One Step Simplification" (formula "24"))
                                                               (rule "true_left" (formula "24"))
                                                               (rule "shift_paren_or" (formula "23") (term "0,0"))
                                                               (rule "commute_or" (formula "23") (term "0,0,0"))
                                                               (rule "inEqSimp_or_tautInEq1" (formula "23") (term "0,0"))
                                                               (rule "add_zero_right" (formula "23") (term "1,1,0,0"))
                                                               (rule "qeq_literals" (formula "23") (term "1,0,0"))
                                                               (builtin "One Step Simplification" (formula "23"))
                                                               (rule "true_left" (formula "23"))
                                                               (rule "cnf_rightDist" (formula "19") (term "1,1,0"))
                                                               (rule "cnf_rightDist" (formula "19") (term "0"))
                                                               (rule "distr_forallAnd" (formula "19"))
                                                               (rule "andLeft" (formula "19"))
                                                               (rule "commute_or" (formula "20") (term "0"))
                                                               (rule "shift_paren_or" (formula "19") (term "0"))
                                                               (rule "commute_or_2" (formula "19") (term "0,0"))
                                                               (builtin "One Step Simplification" (formula "19"))
                                                               (rule "commute_or" (formula "20") (term "1,1,0"))
                                                               (rule "shift_paren_or" (formula "19") (term "0,0"))
                                                               (rule "commute_or" (formula "19") (term "0,0,0"))
                                                               (builtin "One Step Simplification" (formula "19"))
                                                               (rule "cnf_rightDist" (formula "20") (term "0"))
                                                               (rule "distr_forallAnd" (formula "20"))
                                                               (rule "andLeft" (formula "20"))
                                                               (rule "commute_or_2" (formula "20") (term "0"))
                                                               (rule "shift_paren_or" (formula "21") (term "0"))
                                                               (rule "commute_or_2" (formula "21") (term "0,0"))
                                                               (rule "inEqSimp_or_tautInEq1" (formula "21") (term "0"))
                                                               (rule "inEqSimp_homoInEq1" (formula "21") (term "1,0"))
                                                               (rule "polySimp_pullOutFactor1" (formula "21") (term "0,1,0"))
                                                               (rule "add_literals" (formula "21") (term "1,0,1,0"))
                                                               (rule "times_zero_1" (formula "21") (term "0,1,0"))
                                                               (rule "leq_literals" (formula "21") (term "1,0"))
                                                               (builtin "One Step Simplification" (formula "21"))
                                                               (rule "true_left" (formula "21"))
                                                               (rule "shift_paren_or" (formula "20") (term "0,0"))
                                                               (rule "commute_or" (formula "20") (term "0,0,0"))
                                                               (rule "inEqSimp_or_tautInEq1" (formula "20") (term "0,0"))
                                                               (rule "add_zero_right" (formula "20") (term "1,1,0,0"))
                                                               (rule "qeq_literals" (formula "20") (term "1,0,0"))
                                                               (builtin "One Step Simplification" (formula "20"))
                                                               (rule "true_left" (formula "20"))
                                                               (rule "ifthenelse_split" (formula "5") (term "0"))
                                                               (branch "messages[iv_23] = msg_2 TRUE"
                                                                  (rule "referencedObjectIsCreatedRightEQ" (formula "47") (ifseqformula "5") (ifseqformula "48"))
                                                                  (rule "close" (formula "47") (ifseqformula "27"))
                                                               )
                                                               (branch "messages[iv_23] = msg_2 FALSE"
                                                                  (rule "applyEqReverse" (formula "4") (term "0,0,0,0") (ifseqformula "5"))
                                                                  (rule "applyEqReverse" (formula "6") (term "0,0,0") (ifseqformula "5"))
                                                                  (rule "hideAuxiliaryEq" (formula "5"))
                                                                  (rule "lenNonNegative" (formula "16") (term "0"))
                                                                  (rule "inEqSimp_commuteLeq" (formula "16"))
                                                                  (rule "applyEqRigid" (formula "16") (term "0") (ifseqformula "17"))
                                                                  (rule "qeq_literals" (formula "16"))
                                                                  (rule "true_left" (formula "16"))
                                                                  (rule "arrayLengthNotNegative" (formula "23") (term "0"))
                                                                  (rule "applyEqRigid" (formula "23") (term "0") (ifseqformula "24"))
                                                                  (rule "qeq_literals" (formula "23"))
                                                                  (rule "true_left" (formula "23"))
                                                                  (rule "arrayLengthIsAShort" (formula "23") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "23"))
                                                                  (rule "true_left" (formula "23"))
                                                                  (rule "equalityToSeqGetAndSeqLenLeft" (formula "15") (inst "iv=iv"))
                                                                  (rule "andLeft" (formula "15"))
                                                                  (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                                                                  (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                                                                  (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                                                                  (rule "applyEq" (formula "16") (term "0,0,1,0,0,1,0,0") (ifseqformula "17"))
                                                                  (rule "applyEq" (formula "16") (term "0,0,1,0") (ifseqformula "17"))
                                                                  (builtin "One Step Simplification" (formula "16"))
                                                                  (rule "true_left" (formula "16"))
                                                                  (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "16"))
                                                                  (builtin "One Step Simplification" (formula "15"))
                                                                  (rule "true_left" (formula "15"))
                                                                  (rule "arrayLengthIsAShort" (formula "1") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "arrayLengthNotNegative" (formula "1") (term "0"))
                                                                  (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "2"))
                                                                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                                                  (rule "qeq_literals" (formula "2"))
                                                                  (rule "true_left" (formula "2"))
                                                                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                                                  (rule "leq_literals" (formula "2"))
                                                                  (rule "true_left" (formula "2"))
                                                                  (rule "onlyCreatedObjectsAreReferenced" (formula "37") (term "1,2,0,0,0") (ifseqformula "25"))
                                                                  (rule "replace_known_right" (formula "37") (term "0") (ifseqformula "41"))
                                                                  (builtin "One Step Simplification" (formula "37"))
                                                                  (rule "arrayLengthIsAShort" (formula "7") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "7"))
                                                                  (rule "true_left" (formula "7"))
                                                                  (rule "arrayLengthNotNegative" (formula "8") (term "0"))
                                                                  (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "7"))
                                                                  (rule "leq_literals" (formula "8") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "8"))
                                                                  (rule "true_left" (formula "8"))
                                                                  (rule "ifthenelse_split" (formula "5") (term "0"))
                                                                  (branch "messages[iv_23].<created> = TRUE TRUE"
                                                                     (rule "applyEqReverse" (formula "45") (term "1") (ifseqformula "6"))
                                                                     (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "6"))
                                                                     (rule "hideAuxiliaryEq" (formula "6"))
                                                                     (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "5"))
                                                                     (builtin "One Step Simplification" (formula "4"))
                                                                     (rule "applyEqReverse" (formula "44") (term "0") (ifseqformula "4"))
                                                                     (builtin "One Step Simplification" (formula "44"))
                                                                     (rule "closeTrue" (formula "44"))
                                                                  )
                                                                  (branch "messages[iv_23].<created> = TRUE FALSE"
                                                                     (rule "referencedObjectIsCreatedRight" (formula "39") (ifseqformula "41"))
                                                                     (rule "close" (formula "39") (ifseqformula "25"))
                                                                  )
                                                               )
                                                            )
                                                            (branch "messages[iv_23].length >= 1 FALSE"
                                                               (rule "inEqSimp_geqRight" (formula "38"))
                                                               (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                               (rule "add_literals" (formula "1") (term "0,0"))
                                                               (rule "add_zero_left" (formula "1") (term "0"))
                                                               (rule "inEqSimp_homoInEq1" (formula "9"))
                                                               (rule "times_zero_2" (formula "9") (term "1,0"))
                                                               (rule "add_zero_right" (formula "9") (term "0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "9"))
                                                               (rule "mul_literals" (formula "9") (term "1"))
                                                               (rule "inEqSimp_contradInEq1" (formula "9") (ifseqformula "8"))
                                                               (rule "qeq_literals" (formula "9") (term "0"))
                                                               (builtin "One Step Simplification" (formula "9"))
                                                               (rule "closeFalse" (formula "9"))
                                                            )
                                                         )
                                                         (branch "messages[i_2].length >= 1 FALSE"
                                                            (rule "eqSymm" (formula "20"))
                                                            (rule "inEqSimp_geqRight" (formula "38"))
                                                            (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0"))
                                                            (rule "applyEqRigid" (formula "18") (term "0") (ifseqformula "21"))
                                                            (rule "qeq_literals" (formula "18"))
                                                            (rule "true_left" (formula "18"))
                                                            (rule "applyEq" (formula "19") (term "1,1,0") (ifseqformula "20"))
                                                            (rule "applyEq" (formula "21") (term "1,1,0") (ifseqformula "20"))
                                                            (rule "applyEq" (formula "18") (term "1") (ifseqformula "20"))
                                                            (rule "commute_and" (formula "7") (term "0,0"))
                                                            (rule "commute_or" (formula "21") (term "0,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "21") (term "0"))
                                                            (rule "add_zero_right" (formula "21") (term "1,1,0"))
                                                            (rule "qeq_literals" (formula "21") (term "1,0"))
                                                            (builtin "One Step Simplification" (formula "21"))
                                                            (rule "true_left" (formula "21"))
                                                            (rule "arrayLengthNotNegative" (formula "35") (term "1,0,0,0"))
                                                            (rule "inEqSimp_antiSymm" (formula "35") (ifseqformula "1"))
                                                            (rule "applyEq" (formula "1") (term "0") (ifseqformula "35"))
                                                            (rule "leq_literals" (formula "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "applyEq" (formula "36") (term "1,0,0,0") (ifseqformula "34"))
                                                            (rule "seqDef_lower_equals_upper" (formula "36") (term "0,0,0"))
                                                            (rule "applyEq" (formula "18") (term "1,1,1,0,0,1,0,0") (ifseqformula "34"))
                                                            (rule "add_zero_right" (formula "18") (term "1,1,0,0,1,0,0"))
                                                            (rule "applyEq" (formula "35") (term "0") (ifseqformula "34"))
                                                            (rule "qeq_literals" (formula "35"))
                                                            (rule "true_left" (formula "35"))
                                                            (rule "applyEq" (formula "36") (term "1,0,0,0,1,0,0") (ifseqformula "34"))
                                                            (rule "seqDef_lower_equals_upper" (formula "36") (term "0,0,0,1,0,0"))
                                                            (rule "eqSymm" (formula "36") (term "1,0,0"))
                                                            (rule "commute_or" (formula "18") (term "0,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "18") (term "0"))
                                                            (rule "add_zero_right" (formula "18") (term "1,1,0"))
                                                            (rule "qeq_literals" (formula "18") (term "1,0"))
                                                            (builtin "One Step Simplification" (formula "18"))
                                                            (rule "true_left" (formula "18"))
                                                            (rule "commute_or" (formula "35") (term "0,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "35") (term "0"))
                                                            (rule "add_literals" (formula "35") (term "1,1,0"))
                                                            (rule "qeq_literals" (formula "35") (term "1,0"))
                                                            (builtin "One Step Simplification" (formula "35"))
                                                            (rule "true_left" (formula "35"))
                                                            (rule "allLeft" (formula "25") (inst "t=iv_23"))
                                                            (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                                                            (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "12"))
                                                            (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                                                            (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                                                            (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                                                            (rule "add_zero_right" (formula "25") (term "0,0,1"))
                                                            (rule "leq_literals" (formula "25") (term "0,1"))
                                                            (builtin "One Step Simplification" (formula "25"))
                                                            (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "10"))
                                                            (rule "qeq_literals" (formula "25") (term "0,1"))
                                                            (builtin "One Step Simplification" (formula "25"))
                                                            (rule "notLeft" (formula "25"))
                                                            (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "35"))
                                                            (builtin "One Step Simplification" (formula "4"))
                                                            (rule "replace_known_right" (formula "6") (term "0,1,0,0") (ifseqformula "35"))
                                                            (builtin "One Step Simplification" (formula "6"))
                                                            (rule "ifthenelse_negated" (formula "4") (term "0"))
                                                            (rule "ifthenelse_negated" (formula "6") (term "0"))
                                                            (rule "narrowSelectArrayType" (formula "6") (term "1,0") (ifseqformula "22") (ifseqformula "35"))
                                                            (rule "narrowSelectArrayType" (formula "4") (term "2,0") (ifseqformula "29") (ifseqformula "35"))
                                                            (rule "narrowSelectArrayType" (formula "6") (term "2,0") (ifseqformula "26") (ifseqformula "35"))
                                                            (rule "ifthenelse_split" (formula "8") (term "0"))
                                                            (branch "messages[iv_23].length >= 1 TRUE"
                                                               (rule "replace_known_left" (formula "40") (term "0,1") (ifseqformula "9"))
                                                               (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "9")))
                                                               (rule "ifthenelse_split" (formula "5") (term "0"))
                                                               (branch "messages[iv_23] = msg_2 TRUE"
                                                                  (rule "referencedObjectIsCreatedRightEQ" (formula "44") (ifseqformula "5") (ifseqformula "45"))
                                                                  (rule "close" (formula "44") (ifseqformula "24"))
                                                               )
                                                               (branch "messages[iv_23] = msg_2 FALSE"
                                                                  (rule "applyEqReverse" (formula "6") (term "0,0,0") (ifseqformula "5"))
                                                                  (rule "applyEqReverse" (formula "4") (term "0,0,0,0") (ifseqformula "5"))
                                                                  (rule "hideAuxiliaryEq" (formula "5"))
                                                                  (rule "lenNonNegative" (formula "16") (term "0"))
                                                                  (rule "inEqSimp_commuteLeq" (formula "16"))
                                                                  (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
                                                                  (rule "qeq_literals" (formula "16"))
                                                                  (rule "true_left" (formula "16"))
                                                                  (rule "arrayLengthIsAShort" (formula "20") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "20"))
                                                                  (rule "true_left" (formula "20"))
                                                                  (rule "arrayLengthNotNegative" (formula "20") (term "0"))
                                                                  (rule "applyEqRigid" (formula "20") (term "0") (ifseqformula "21"))
                                                                  (rule "qeq_literals" (formula "20"))
                                                                  (rule "true_left" (formula "20"))
                                                                  (rule "equalityToSeqGetAndSeqLenLeft" (formula "15") (inst "iv=iv"))
                                                                  (rule "andLeft" (formula "15"))
                                                                  (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                                                                  (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                                                                  (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                                                                  (rule "applyEq" (formula "16") (term "0,0,1,0,0,1,0,0") (ifseqformula "17"))
                                                                  (rule "applyEq" (formula "16") (term "0,0,1,0") (ifseqformula "17"))
                                                                  (builtin "One Step Simplification" (formula "16"))
                                                                  (rule "true_left" (formula "16"))
                                                                  (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "16"))
                                                                  (builtin "One Step Simplification" (formula "15"))
                                                                  (rule "true_left" (formula "15"))
                                                                  (rule "arrayLengthNotNegative" (formula "1") (term "0"))
                                                                  (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "2"))
                                                                  (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                                                                  (rule "leq_literals" (formula "3"))
                                                                  (rule "true_left" (formula "3"))
                                                                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                                                  (rule "qeq_literals" (formula "2"))
                                                                  (rule "true_left" (formula "2"))
                                                                  (rule "ifthenelse_split" (formula "5") (term "0"))
                                                                  (branch "messages[iv_23].<created> = TRUE TRUE"
                                                                     (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "6"))
                                                                     (rule "applyEqReverse" (formula "41") (term "1") (ifseqformula "6"))
                                                                     (rule "hideAuxiliaryEq" (formula "6"))
                                                                     (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "5"))
                                                                     (builtin "One Step Simplification" (formula "4"))
                                                                     (rule "applyEqReverse" (formula "40") (term "0") (ifseqformula "4"))
                                                                     (builtin "One Step Simplification" (formula "40"))
                                                                     (rule "closeTrue" (formula "40"))
                                                                  )
                                                                  (branch "messages[iv_23].<created> = TRUE FALSE"
                                                                     (rule "referencedObjectIsCreatedRight" (formula "35") (ifseqformula "37"))
                                                                     (rule "close" (formula "35") (ifseqformula "22"))
                                                                  )
                                                               )
                                                            )
                                                            (branch "messages[iv_23].length >= 1 FALSE"
                                                               (rule "inEqSimp_geqRight" (formula "35"))
                                                               (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                               (rule "add_literals" (formula "1") (term "0,0"))
                                                               (rule "add_zero_left" (formula "1") (term "0"))
                                                               (rule "inEqSimp_homoInEq1" (formula "9"))
                                                               (rule "times_zero_2" (formula "9") (term "1,0"))
                                                               (rule "add_zero_right" (formula "9") (term "0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "9"))
                                                               (rule "mul_literals" (formula "9") (term "1"))
                                                               (rule "inEqSimp_contradInEq1" (formula "9") (ifseqformula "8"))
                                                               (rule "qeq_literals" (formula "9") (term "0"))
                                                               (builtin "One Step Simplification" (formula "9"))
                                                               (rule "closeFalse" (formula "9"))
                                                            )
                                                         )
                                                      )
                                                   )
                                                   (branch "x_arr_2 = msg_2 FALSE"
                                                      (rule "applyEqReverse" (formula "31") (term "0,0") (ifseqformula "30"))
                                                      (builtin "One Step Simplification" (formula "31"))
                                                      (rule "hideAuxiliaryEq" (formula "30"))
                                                      (rule "lenNonNegative" (formula "29") (term "0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "29"))
                                                      (rule "applyEqRigid" (formula "29") (term "0") (ifseqformula "30"))
                                                      (rule "qeq_literals" (formula "29"))
                                                      (rule "true_left" (formula "29"))
                                                      (rule "lenNonNegative" (formula "17") (term "1"))
                                                      (rule "inEqSimp_commuteLeq" (formula "17"))
                                                      (rule "commute_or_2" (formula "37") (term "0"))
                                                      (rule "commute_or_2" (formula "19") (term "0"))
                                                      (rule "ifthenelse_split" (formula "36") (term "1"))
                                                      (branch "result_0.length >= 1 TRUE"
                                                         (rule "replace_known_left" (formula "38") (term "0,1,1,0") (ifseqformula "36"))
                                                         (builtin "One Step Simplification" (formula "38"))
                                                         (rule "allLeft" (formula "28") (inst "t=i_2"))
                                                         (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "13"))
                                                         (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                                                         (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "28") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "28") (term "0,1"))
                                                         (builtin "One Step Simplification" (formula "28"))
                                                         (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "22"))
                                                         (rule "qeq_literals" (formula "28") (term "0,1"))
                                                         (builtin "One Step Simplification" (formula "28"))
                                                         (rule "notLeft" (formula "28"))
                                                         (rule "lenNonNegative" (formula "18") (term "0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "18"))
                                                         (rule "applyEqRigid" (formula "18") (term "0") (ifseqformula "19"))
                                                         (rule "seqGetAlphaCast" (formula "18") (term "0,0"))
                                                         (rule "castedGetAny" (formula "18") (term "0"))
                                                         (builtin "One Step Simplification" (formula "18"))
                                                         (rule "true_left" (formula "18"))
                                                         (rule "ifthenelse_split" (formula "20") (term "0"))
                                                         (branch "messages[i_2].length >= 1 TRUE"
                                                            (rule "eqSymm" (formula "21"))
                                                            (rule "applyEq" (formula "22") (term "1,1,0") (ifseqformula "21"))
                                                            (rule "applyEq" (formula "19") (term "1,1,0") (ifseqformula "21"))
                                                            (rule "applyEq" (formula "17") (term "0") (ifseqformula "21"))
                                                            (rule "applyEq" (formula "18") (term "1") (ifseqformula "21"))
                                                            (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "20"))
                                                            (rule "leq_literals" (formula "17") (term "0"))
                                                            (builtin "One Step Simplification" (formula "17"))
                                                            (rule "true_left" (formula "17"))
                                                            (rule "commute_and" (formula "6") (term "0,0"))
                                                            (rule "commute_or" (formula "21") (term "0,0"))
                                                            (rule "commute_or" (formula "18") (term "0,0"))
                                                            (rule "arrayLengthNotNegative" (formula "37") (term "1,0,0,0"))
                                                            (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "19"))
                                                            (rule "leq_literals" (formula "37") (term "0"))
                                                            (builtin "One Step Simplification" (formula "37"))
                                                            (rule "true_left" (formula "37"))
                                                            (rule "commute_or" (formula "38") (term "0,0"))
                                                            (rule "lenNonNegative" (formula "37") (term "0"))
                                                            (rule "inEqSimp_commuteLeq" (formula "37"))
                                                            (rule "arrayLengthIsAShort" (formula "38") (term "1,0,0,0"))
                                                            (builtin "One Step Simplification" (formula "38"))
                                                            (rule "true_left" (formula "38"))
                                                            (rule "allLeft" (formula "28") (inst "t=iv_23"))
                                                            (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                                                            (rule "inEqSimp_contradInEq1" (formula "28") (term "1,0") (ifseqformula "10"))
                                                            (rule "qeq_literals" (formula "28") (term "0,1,0"))
                                                            (builtin "One Step Simplification" (formula "28"))
                                                            (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "12"))
                                                            (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                                                            (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                                                            (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                                                            (rule "add_zero_right" (formula "28") (term "0,0,1"))
                                                            (rule "leq_literals" (formula "28") (term "0,1"))
                                                            (builtin "One Step Simplification" (formula "28"))
                                                            (rule "notLeft" (formula "28"))
                                                            (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "40"))
                                                            (builtin "One Step Simplification" (formula "4"))
                                                            (rule "replace_known_right" (formula "6") (term "0,1,0,0") (ifseqformula "40"))
                                                            (builtin "One Step Simplification" (formula "6"))
                                                            (rule "ifthenelse_negated" (formula "4") (term "0"))
                                                            (rule "ifthenelse_negated" (formula "6") (term "0"))
                                                            (rule "narrowSelectArrayType" (formula "4") (term "2,0") (ifseqformula "32") (ifseqformula "40"))
                                                            (rule "narrowSelectArrayType" (formula "6") (term "1,0") (ifseqformula "25") (ifseqformula "40"))
                                                            (rule "narrowSelectArrayType" (formula "6") (term "2,0") (ifseqformula "29") (ifseqformula "40"))
                                                            (rule "ifthenelse_split" (formula "8") (term "0"))
                                                            (branch "messages[iv_23].length >= 1 TRUE"
                                                               (rule "replace_known_left" (formula "46") (term "0,1") (ifseqformula "9"))
                                                               (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "9")))
                                                               (rule "ifthenelse_to_or_left" (formula "22") (term "0,0,0"))
                                                               (rule "eqSymm" (formula "22") (term "1,1,0,0,0"))
                                                               (rule "nnf_notAnd" (formula "22") (term "0,0,0,0,0"))
                                                               (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0,0,0,0"))
                                                               (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0,0,0,0"))
                                                               (rule "add_zero_right" (formula "22") (term "0,0,0,0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0,0"))
                                                               (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0,0,0,0"))
                                                               (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0,0,0,0"))
                                                               (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,0,0,0"))
                                                               (rule "add_literals" (formula "22") (term "0,0,0,1,0,0,0,0,0"))
                                                               (rule "add_zero_left" (formula "22") (term "0,0,1,0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0,0,0,0"))
                                                               (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0,0,0"))
                                                               (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0,0,0"))
                                                               (rule "commute_or" (formula "22") (term "0,0"))
                                                               (rule "commute_or_2" (formula "22") (term "0"))
                                                               (rule "commute_or" (formula "22") (term "1,1,0"))
                                                               (rule "commute_or_2" (formula "22") (term "0,1,0"))
                                                               (rule "commute_or" (formula "22") (term "0,0,1,0"))
                                                               (rule "ifthenelse_to_or_left" (formula "19") (term "0,0,0"))
                                                               (rule "eqSymm" (formula "19") (term "1,1,0,0,0"))
                                                               (rule "nnf_notAnd" (formula "19") (term "0,0,0,0,0"))
                                                               (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0,0,0,0"))
                                                               (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,0,0,0"))
                                                               (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,0,0,0"))
                                                               (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,0,0,0"))
                                                               (rule "add_zero_left" (formula "19") (term "0,0,1,0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0,0,0,0"))
                                                               (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0,0,0"))
                                                               (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,0,0,0"))
                                                               (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0,0,0,0"))
                                                               (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0,0,0,0"))
                                                               (rule "add_zero_right" (formula "19") (term "0,0,0,0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0,0"))
                                                               (rule "commute_or" (formula "19") (term "0,0"))
                                                               (rule "commute_or_2" (formula "19") (term "0"))
                                                               (rule "commute_or" (formula "19") (term "1,1,0"))
                                                               (rule "commute_or_2" (formula "19") (term "0,1,0"))
                                                               (rule "commute_or" (formula "19") (term "0,0,1,0"))
                                                               (rule "ifthenelse_to_or_right" (formula "40") (term "0,0,0"))
                                                               (rule "nnf_notAnd" (formula "40") (term "0,0,0,0,0"))
                                                               (rule "inEqSimp_notGeq" (formula "40") (term "0,0,0,0,0,0"))
                                                               (rule "times_zero_1" (formula "40") (term "1,0,0,0,0,0,0,0,0"))
                                                               (rule "add_zero_right" (formula "40") (term "0,0,0,0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "0,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "40") (term "1,0,0,0,0,0,0"))
                                                               (rule "inEqSimp_notLeq" (formula "40") (term "1,0,0,0,0,0"))
                                                               (rule "polySimp_rightDist" (formula "40") (term "1,0,0,1,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "40") (term "0,1,0,0,1,0,0,0,0,0"))
                                                               (rule "polySimp_addAssoc" (formula "40") (term "0,0,1,0,0,0,0,0"))
                                                               (rule "add_literals" (formula "40") (term "0,0,0,1,0,0,0,0,0"))
                                                               (rule "add_zero_left" (formula "40") (term "0,0,1,0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "1,0,0,0,0,0"))
                                                               (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0,0,0,0"))
                                                               (rule "polySimp_elimOne" (formula "40") (term "1,1,0,0,0,0,0"))
                                                               (rule "commute_or" (formula "40") (term "0,0"))
                                                               (rule "commute_or_2" (formula "40") (term "0"))
                                                               (rule "commute_or_2" (formula "40") (term "0,1,0"))
                                                               (rule "commute_or" (formula "40") (term "1,1,0"))
                                                               (rule "cnf_rightDist" (formula "22") (term "1,1,0"))
                                                               (rule "cnf_rightDist" (formula "22") (term "0"))
                                                               (rule "distr_forallAnd" (formula "22"))
                                                               (rule "andLeft" (formula "22"))
                                                               (rule "commute_or" (formula "23") (term "0"))
                                                               (rule "shift_paren_or" (formula "22") (term "0"))
                                                               (rule "commute_or_2" (formula "22") (term "0,0"))
                                                               (builtin "One Step Simplification" (formula "22"))
                                                               (rule "commute_or" (formula "23") (term "1,1,0"))
                                                               (rule "shift_paren_or" (formula "22") (term "0,0"))
                                                               (rule "commute_or" (formula "22") (term "0,0,0"))
                                                               (builtin "One Step Simplification" (formula "22"))
                                                               (rule "ifthenelse_split" (formula "5") (term "0"))
                                                               (branch "messages[iv_23] = x_arr_2 TRUE"
                                                                  (rule "referencedObjectIsCreatedRightEQ" (formula "53") (ifseqformula "5") (ifseqformula "54"))
                                                                  (rule "close" (formula "53") (ifseqformula "28"))
                                                               )
                                                               (branch "messages[iv_23] = x_arr_2 FALSE"
                                                                  (rule "applyEqReverse" (formula "4") (term "0,0,0,0") (ifseqformula "5"))
                                                                  (rule "applyEqReverse" (formula "6") (term "0,0,0") (ifseqformula "5"))
                                                                  (rule "hideAuxiliaryEq" (formula "5"))
                                                                  (rule "cnf_rightDist" (formula "22") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "22"))
                                                                  (rule "andLeft" (formula "22"))
                                                                  (rule "commute_or_2" (formula "22") (term "0"))
                                                                  (rule "shift_paren_or" (formula "23") (term "0"))
                                                                  (rule "commute_or_2" (formula "23") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "23") (term "0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "23") (term "1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "23") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "23") (term "1,0,1,0"))
                                                                  (rule "times_zero_1" (formula "23") (term "0,1,0"))
                                                                  (rule "leq_literals" (formula "23") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "23"))
                                                                  (rule "true_left" (formula "23"))
                                                                  (rule "commute_or" (formula "40") (term "0,0,1,0"))
                                                                  (rule "shift_paren_or" (formula "22") (term "0,0"))
                                                                  (rule "cnf_rightDist" (formula "18") (term "1,1,0"))
                                                                  (rule "commute_or" (formula "22") (term "0,0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0,0"))
                                                                  (rule "add_literals" (formula "22") (term "1,1,0,0"))
                                                                  (rule "qeq_literals" (formula "22") (term "1,0,0"))
                                                                  (builtin "One Step Simplification" (formula "22"))
                                                                  (rule "true_left" (formula "22"))
                                                                  (rule "cnf_rightDist" (formula "18") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "18"))
                                                                  (rule "andLeft" (formula "18"))
                                                                  (rule "commute_or" (formula "19") (term "0"))
                                                                  (rule "shift_paren_or" (formula "18") (term "0"))
                                                                  (rule "commute_or_2" (formula "18") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "18"))
                                                                  (rule "commute_or" (formula "19") (term "1,1,0"))
                                                                  (rule "shift_paren_or" (formula "18") (term "0,0"))
                                                                  (rule "commute_or" (formula "18") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "18"))
                                                                  (rule "cnf_rightDist" (formula "40") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "19") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "19"))
                                                                  (rule "andLeft" (formula "19"))
                                                                  (rule "commute_or_2" (formula "19") (term "0"))
                                                                  (rule "shift_paren_or" (formula "20") (term "0"))
                                                                  (rule "commute_or_2" (formula "20") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "20") (term "0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "20") (term "1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "20") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "20") (term "1,0,1,0"))
                                                                  (rule "times_zero_1" (formula "20") (term "0,1,0"))
                                                                  (rule "leq_literals" (formula "20") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "20"))
                                                                  (rule "true_left" (formula "20"))
                                                                  (rule "shift_paren_or" (formula "19") (term "0,0"))
                                                                  (rule "cnf_rightDist" (formula "40") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "40"))
                                                                  (rule "andLeft" (formula "40"))
                                                                  (rule "commute_or" (formula "41") (term "0"))
                                                                  (rule "shift_paren_or" (formula "40") (term "0"))
                                                                  (rule "commute_or_2" (formula "40") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "40"))
                                                                  (rule "commute_or" (formula "19") (term "0,0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "19") (term "0,0"))
                                                                  (rule "add_literals" (formula "19") (term "1,1,0,0"))
                                                                  (rule "qeq_literals" (formula "19") (term "1,0,0"))
                                                                  (builtin "One Step Simplification" (formula "19"))
                                                                  (rule "true_left" (formula "19"))
                                                                  (rule "commute_or" (formula "40") (term "1,1,0"))
                                                                  (rule "shift_paren_or" (formula "39") (term "0,0"))
                                                                  (rule "commute_or" (formula "39") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "39"))
                                                                  (rule "cnf_rightDist" (formula "40") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "40"))
                                                                  (rule "andLeft" (formula "40"))
                                                                  (rule "commute_or_2" (formula "40") (term "0"))
                                                                  (rule "shift_paren_or" (formula "41") (term "0"))
                                                                  (rule "commute_or_2" (formula "41") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "41") (term "0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "41") (term "1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "41") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "41") (term "1,0,1,0"))
                                                                  (rule "times_zero_1" (formula "41") (term "0,1,0"))
                                                                  (rule "leq_literals" (formula "41") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "41"))
                                                                  (rule "true_left" (formula "41"))
                                                                  (rule "shift_paren_or" (formula "40") (term "0,0"))
                                                                  (rule "commute_or" (formula "40") (term "0,0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "40") (term "0,0"))
                                                                  (rule "add_literals" (formula "40") (term "1,1,0,0"))
                                                                  (rule "qeq_literals" (formula "40") (term "1,0,0"))
                                                                  (builtin "One Step Simplification" (formula "40"))
                                                                  (rule "true_left" (formula "40"))
                                                                  (rule "lenNonNegative" (formula "16") (term "0"))
                                                                  (rule "inEqSimp_commuteLeq" (formula "16"))
                                                                  (rule "applyEqRigid" (formula "16") (term "0") (ifseqformula "17"))
                                                                  (rule "qeq_literals" (formula "16"))
                                                                  (rule "true_left" (formula "16"))
                                                                  (rule "arrayLengthNotNegative" (formula "1") (term "0"))
                                                                  (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "2"))
                                                                  (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "1"))
                                                                  (rule "qeq_literals" (formula "2"))
                                                                  (rule "true_left" (formula "2"))
                                                                  (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "1"))
                                                                  (rule "leq_literals" (formula "2"))
                                                                  (rule "true_left" (formula "2"))
                                                                  (rule "arrayLengthNotNegative" (formula "36") (term "0"))
                                                                  (rule "inEqSimp_subsumption1" (formula "36") (ifseqformula "37"))
                                                                  (rule "leq_literals" (formula "36") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "36"))
                                                                  (rule "true_left" (formula "36"))
                                                                  (rule "arrayLengthIsAShort" (formula "36") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "36"))
                                                                  (rule "true_left" (formula "36"))
                                                                  (rule "onlyCreatedObjectsAreReferenced" (formula "38") (term "1,2,0,0,0") (ifseqformula "25"))
                                                                  (rule "replace_known_right" (formula "38") (term "0") (ifseqformula "43"))
                                                                  (builtin "One Step Simplification" (formula "38"))
                                                                  (rule "ifthenelse_split" (formula "5") (term "0"))
                                                                  (branch "messages[iv_23].<created> = TRUE TRUE"
                                                                     (rule "applyEqReverse" (formula "48") (term "1") (ifseqformula "6"))
                                                                     (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "6"))
                                                                     (rule "hideAuxiliaryEq" (formula "6"))
                                                                     (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "5"))
                                                                     (builtin "One Step Simplification" (formula "4"))
                                                                     (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "4"))
                                                                     (builtin "One Step Simplification" (formula "47"))
                                                                     (rule "closeTrue" (formula "47"))
                                                                  )
                                                                  (branch "messages[iv_23].<created> = TRUE FALSE"
                                                                     (rule "referencedObjectIsCreatedRight" (formula "41") (ifseqformula "43"))
                                                                     (rule "close" (formula "41") (ifseqformula "25"))
                                                                  )
                                                               )
                                                            )
                                                            (branch "messages[iv_23].length >= 1 FALSE"
                                                               (rule "inEqSimp_geqRight" (formula "40"))
                                                               (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                               (rule "add_literals" (formula "1") (term "0,0"))
                                                               (rule "add_zero_left" (formula "1") (term "0"))
                                                               (rule "inEqSimp_homoInEq1" (formula "9"))
                                                               (rule "times_zero_2" (formula "9") (term "1,0"))
                                                               (rule "add_zero_right" (formula "9") (term "0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "9"))
                                                               (rule "mul_literals" (formula "9") (term "1"))
                                                               (rule "inEqSimp_contradInEq1" (formula "9") (ifseqformula "8"))
                                                               (rule "qeq_literals" (formula "9") (term "0"))
                                                               (builtin "One Step Simplification" (formula "9"))
                                                               (rule "closeFalse" (formula "9"))
                                                            )
                                                         )
                                                         (branch "messages[i_2].length >= 1 FALSE"
                                                            (rule "eqSymm" (formula "20"))
                                                            (rule "inEqSimp_geqRight" (formula "39"))
                                                            (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0"))
                                                            (rule "applyEqRigid" (formula "18") (term "0") (ifseqformula "21"))
                                                            (rule "qeq_literals" (formula "18"))
                                                            (rule "true_left" (formula "18"))
                                                            (rule "applyEq" (formula "19") (term "1,1,0") (ifseqformula "20"))
                                                            (rule "applyEqRigid" (formula "21") (term "1,1,0") (ifseqformula "20"))
                                                            (rule "applyEqRigid" (formula "18") (term "1") (ifseqformula "20"))
                                                            (rule "commute_and" (formula "7") (term "0,0"))
                                                            (rule "commute_or" (formula "21") (term "0,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "21") (term "0"))
                                                            (rule "add_zero_right" (formula "21") (term "1,1,0"))
                                                            (rule "qeq_literals" (formula "21") (term "1,0"))
                                                            (builtin "One Step Simplification" (formula "21"))
                                                            (rule "true_left" (formula "21"))
                                                            (rule "commute_or" (formula "19") (term "0,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "19") (term "0"))
                                                            (rule "add_zero_right" (formula "19") (term "1,1,0"))
                                                            (rule "qeq_literals" (formula "19") (term "1,0"))
                                                            (builtin "One Step Simplification" (formula "19"))
                                                            (rule "true_left" (formula "19"))
                                                            (rule "arrayLengthNotNegative" (formula "35") (term "1,0,0,0"))
                                                            (rule "inEqSimp_antiSymm" (formula "35") (ifseqformula "1"))
                                                            (rule "applyEq" (formula "36") (term "0") (ifseqformula "35"))
                                                            (rule "qeq_literals" (formula "36"))
                                                            (rule "true_left" (formula "36"))
                                                            (rule "applyEq" (formula "37") (term "1,0,0,0,1,0,0") (ifseqformula "35"))
                                                            (rule "seqDef_lower_equals_upper" (formula "37") (term "0,0,0,1,0,0"))
                                                            (rule "eqSymm" (formula "37") (term "1,0,0"))
                                                            (rule "applyEq" (formula "36") (term "1,0,0,0") (ifseqformula "35"))
                                                            (rule "seqDef_lower_equals_upper" (formula "36") (term "0,0,0"))
                                                            (rule "applyEq" (formula "1") (term "0") (ifseqformula "35"))
                                                            (rule "leq_literals" (formula "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "commute_or" (formula "36") (term "0,0"))
                                                            (rule "allLeft" (formula "25") (inst "t=iv_23"))
                                                            (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                                                            (rule "inEqSimp_contradInEq1" (formula "25") (term "1,0") (ifseqformula "10"))
                                                            (rule "qeq_literals" (formula "25") (term "0,1,0"))
                                                            (builtin "One Step Simplification" (formula "25"))
                                                            (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "12"))
                                                            (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                                                            (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                                                            (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                                                            (rule "add_zero_right" (formula "25") (term "0,0,1"))
                                                            (rule "leq_literals" (formula "25") (term "0,1"))
                                                            (builtin "One Step Simplification" (formula "25"))
                                                            (rule "notLeft" (formula "25"))
                                                            (rule "replace_known_right" (formula "6") (term "0,1,0,0") (ifseqformula "37"))
                                                            (builtin "One Step Simplification" (formula "6"))
                                                            (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "37"))
                                                            (builtin "One Step Simplification" (formula "4"))
                                                            (rule "ifthenelse_negated" (formula "6") (term "0"))
                                                            (rule "ifthenelse_negated" (formula "4") (term "0"))
                                                            (rule "narrowSelectArrayType" (formula "6") (term "1,0") (ifseqformula "22") (ifseqformula "37"))
                                                            (rule "narrowSelectArrayType" (formula "4") (term "2,0") (ifseqformula "29") (ifseqformula "37"))
                                                            (rule "narrowSelectArrayType" (formula "6") (term "2,0") (ifseqformula "26") (ifseqformula "37"))
                                                            (rule "ifthenelse_split" (formula "8") (term "0"))
                                                            (branch "messages[iv_23].length >= 1 TRUE"
                                                               (rule "replace_known_left" (formula "43") (term "0,1") (ifseqformula "9"))
                                                               (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "9")))
                                                               (rule "ifthenelse_split" (formula "5") (term "0"))
                                                               (branch "messages[iv_23] = x_arr_2 TRUE"
                                                                  (rule "referencedObjectIsCreatedRightEQ" (formula "49") (ifseqformula "5") (ifseqformula "50"))
                                                                  (rule "close" (formula "49") (ifseqformula "24"))
                                                               )
                                                               (branch "messages[iv_23] = x_arr_2 FALSE"
                                                                  (rule "applyEqReverse" (formula "4") (term "0,0,0,0") (ifseqformula "5"))
                                                                  (rule "applyEqReverse" (formula "6") (term "0,0,0") (ifseqformula "5"))
                                                                  (rule "hideAuxiliaryEq" (formula "5"))
                                                                  (rule "ifthenelse_to_or_left" (formula "36") (term "0,0,0"))
                                                                  (rule "eqSymm" (formula "36") (term "1,1,0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "36") (term "0,0,0,0,0"))
                                                                  (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,0,0,0"))
                                                                  (rule "add_zero_left" (formula "36") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0,0,0,0"))
                                                                  (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0,0,0,0"))
                                                                  (rule "times_zero_1" (formula "36") (term "1,0,0,0,0,0,0,0,0"))
                                                                  (rule "add_zero_right" (formula "36") (term "0,0,0,0,0,0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0,0,0,0"))
                                                                  (rule "mul_literals" (formula "36") (term "1,0,0,0,0,0,0"))
                                                                  (rule "commute_or" (formula "36") (term "0,0"))
                                                                  (rule "commute_or_2" (formula "36") (term "0"))
                                                                  (rule "commute_or_2" (formula "36") (term "0,1,0"))
                                                                  (rule "commute_or" (formula "36") (term "1,1,0"))
                                                                  (rule "commute_or" (formula "36") (term "0,0,1,0"))
                                                                  (rule "cnf_rightDist" (formula "36") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "36") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "36"))
                                                                  (rule "andLeft" (formula "36"))
                                                                  (rule "commute_or" (formula "37") (term "0"))
                                                                  (rule "shift_paren_or" (formula "36") (term "0"))
                                                                  (rule "commute_or_2" (formula "36") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "36"))
                                                                  (rule "commute_or" (formula "37") (term "1,1,0"))
                                                                  (rule "shift_paren_or" (formula "36") (term "0,0"))
                                                                  (rule "commute_or" (formula "36") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "36"))
                                                                  (rule "cnf_rightDist" (formula "37") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "37"))
                                                                  (rule "andLeft" (formula "37"))
                                                                  (rule "commute_or_2" (formula "37") (term "0"))
                                                                  (rule "shift_paren_or" (formula "38") (term "0"))
                                                                  (rule "commute_or_2" (formula "38") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "38") (term "0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "38") (term "1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "38") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "38") (term "1,0,1,0"))
                                                                  (rule "times_zero_1" (formula "38") (term "0,1,0"))
                                                                  (rule "leq_literals" (formula "38") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "38"))
                                                                  (rule "true_left" (formula "38"))
                                                                  (rule "shift_paren_or" (formula "37") (term "0,0"))
                                                                  (rule "commute_or" (formula "37") (term "0,0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "37") (term "0,0"))
                                                                  (rule "add_zero_right" (formula "37") (term "1,1,0,0"))
                                                                  (rule "qeq_literals" (formula "37") (term "1,0,0"))
                                                                  (builtin "One Step Simplification" (formula "37"))
                                                                  (rule "true_left" (formula "37"))
                                                                  (rule "lenNonNegative" (formula "16") (term "0"))
                                                                  (rule "inEqSimp_commuteLeq" (formula "16"))
                                                                  (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
                                                                  (rule "qeq_literals" (formula "16"))
                                                                  (rule "true_left" (formula "16"))
                                                                  (rule "arrayLengthNotNegative" (formula "1") (term "0"))
                                                                  (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "2"))
                                                                  (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "1"))
                                                                  (rule "qeq_literals" (formula "2"))
                                                                  (rule "true_left" (formula "2"))
                                                                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                                                  (rule "leq_literals" (formula "2"))
                                                                  (rule "true_left" (formula "2"))
                                                                  (rule "arrayLengthNotNegative" (formula "35") (term "1"))
                                                                  (rule "inEqSimp_subsumption1" (formula "35") (ifseqformula "33"))
                                                                  (rule "leq_literals" (formula "35") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "35"))
                                                                  (rule "true_left" (formula "35"))
                                                                  (rule "arrayLengthIsAShort" (formula "33") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "33"))
                                                                  (rule "true_left" (formula "33"))
                                                                  (rule "ifthenelse_split" (formula "5") (term "0"))
                                                                  (branch "messages[iv_23].<created> = TRUE TRUE"
                                                                     (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "6"))
                                                                     (rule "applyEqReverse" (formula "44") (term "1") (ifseqformula "6"))
                                                                     (rule "hideAuxiliaryEq" (formula "6"))
                                                                     (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "5"))
                                                                     (builtin "One Step Simplification" (formula "4"))
                                                                     (rule "applyEqReverse" (formula "43") (term "0") (ifseqformula "4"))
                                                                     (builtin "One Step Simplification" (formula "43"))
                                                                     (rule "closeTrue" (formula "43"))
                                                                  )
                                                                  (branch "messages[iv_23].<created> = TRUE FALSE"
                                                                     (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "39"))
                                                                     (rule "close" (formula "37") (ifseqformula "22"))
                                                                  )
                                                               )
                                                            )
                                                            (branch "messages[iv_23].length >= 1 FALSE"
                                                               (rule "inEqSimp_geqRight" (formula "37"))
                                                               (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                               (rule "add_literals" (formula "1") (term "0,0"))
                                                               (rule "add_zero_left" (formula "1") (term "0"))
                                                               (rule "inEqSimp_homoInEq1" (formula "9"))
                                                               (rule "times_zero_2" (formula "9") (term "1,0"))
                                                               (rule "add_zero_right" (formula "9") (term "0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "9"))
                                                               (rule "mul_literals" (formula "9") (term "1"))
                                                               (rule "inEqSimp_contradInEq1" (formula "9") (ifseqformula "8"))
                                                               (rule "qeq_literals" (formula "9") (term "0"))
                                                               (builtin "One Step Simplification" (formula "9"))
                                                               (rule "closeFalse" (formula "9"))
                                                            )
                                                         )
                                                      )
                                                      (branch "result_0.length >= 1 FALSE"
                                                         (rule "replace_known_right" (formula "37") (term "0,1,1,0") (ifseqformula "38"))
                                                         (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_geqRight" (formula "38"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "allLeft" (formula "29") (inst "t=i_2"))
                                                         (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "29") (term "1,0") (ifseqformula "23"))
                                                         (rule "qeq_literals" (formula "29") (term "0,1,0"))
                                                         (builtin "One Step Simplification" (formula "29"))
                                                         (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "14"))
                                                         (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                                                         (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "29") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "29") (term "0,1"))
                                                         (builtin "One Step Simplification" (formula "29"))
                                                         (rule "notLeft" (formula "29"))
                                                         (rule "seqGetAlphaCast" (formula "19") (term "0,0"))
                                                         (rule "castedGetAny" (formula "19") (term "0"))
                                                         (builtin "One Step Simplification" (formula "19"))
                                                         (rule "true_left" (formula "19"))
                                                         (rule "lenNonNegative" (formula "19") (term "0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "19"))
                                                         (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                                                         (rule "ifthenelse_split" (formula "21") (term "0"))
                                                         (branch "messages[i_2].length >= 1 TRUE"
                                                            (rule "eqSymm" (formula "22"))
                                                            (rule "applyEq" (formula "23") (term "1,1,0") (ifseqformula "22"))
                                                            (rule "applyEq" (formula "20") (term "1,1,0") (ifseqformula "22"))
                                                            (rule "applyEq" (formula "18") (term "0") (ifseqformula "22"))
                                                            (rule "applyEq" (formula "19") (term "1") (ifseqformula "22"))
                                                            (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "21"))
                                                            (rule "leq_literals" (formula "18") (term "0"))
                                                            (builtin "One Step Simplification" (formula "18"))
                                                            (rule "true_left" (formula "18"))
                                                            (rule "commute_and" (formula "7") (term "0,0"))
                                                            (rule "commute_or" (formula "22") (term "0,0"))
                                                            (rule "commute_or" (formula "19") (term "0,0"))
                                                            (rule "arrayLengthNotNegative" (formula "37") (term "1,0,0,0"))
                                                            (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "20"))
                                                            (rule "leq_literals" (formula "37") (term "0"))
                                                            (builtin "One Step Simplification" (formula "37"))
                                                            (rule "true_left" (formula "37"))
                                                            (rule "commute_or" (formula "38") (term "0,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "38") (term "0"))
                                                            (rule "add_zero_right" (formula "38") (term "1,1,0"))
                                                            (rule "qeq_literals" (formula "38") (term "1,0"))
                                                            (builtin "One Step Simplification" (formula "38"))
                                                            (rule "true_left" (formula "38"))
                                                            (rule "lenNonNegative" (formula "37") (term "0"))
                                                            (rule "inEqSimp_commuteLeq" (formula "37"))
                                                            (rule "arrayLengthIsAShort" (formula "38") (term "1,0,0,0"))
                                                            (builtin "One Step Simplification" (formula "38"))
                                                            (rule "true_left" (formula "38"))
                                                            (rule "allLeft" (formula "29") (inst "t=iv_23"))
                                                            (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                                            (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "13"))
                                                            (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                                                            (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                                                            (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                                                            (rule "add_zero_right" (formula "29") (term "0,0,1"))
                                                            (rule "leq_literals" (formula "29") (term "0,1"))
                                                            (builtin "One Step Simplification" (formula "29"))
                                                            (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "11"))
                                                            (rule "qeq_literals" (formula "29") (term "0,1"))
                                                            (builtin "One Step Simplification" (formula "29"))
                                                            (rule "notLeft" (formula "29"))
                                                            (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "39"))
                                                            (builtin "One Step Simplification" (formula "5"))
                                                            (rule "replace_known_right" (formula "7") (term "0,1,0,0") (ifseqformula "39"))
                                                            (builtin "One Step Simplification" (formula "7"))
                                                            (rule "ifthenelse_negated" (formula "5") (term "0"))
                                                            (rule "ifthenelse_negated" (formula "7") (term "0"))
                                                            (rule "narrowSelectArrayType" (formula "7") (term "2,0") (ifseqformula "30") (ifseqformula "39"))
                                                            (rule "narrowSelectArrayType" (formula "5") (term "2,0") (ifseqformula "33") (ifseqformula "39"))
                                                            (rule "narrowSelectArrayType" (formula "7") (term "1,0") (ifseqformula "26") (ifseqformula "39"))
                                                            (rule "ifthenelse_split" (formula "9") (term "0"))
                                                            (branch "messages[iv_23].length >= 1 TRUE"
                                                               (rule "replace_known_left" (formula "45") (term "0,1") (ifseqformula "10"))
                                                               (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "10")))
                                                               (rule "ifthenelse_to_or_left" (formula "23") (term "0,0,0"))
                                                               (rule "eqSymm" (formula "23") (term "1,1,0,0,0"))
                                                               (rule "nnf_notAnd" (formula "23") (term "0,0,0,0,0"))
                                                               (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0,0,0,0"))
                                                               (rule "add_zero_right" (formula "23") (term "0,0,0,0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0,0"))
                                                               (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0,0,0,0"))
                                                               (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0,0,0,0"))
                                                               (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,0,0,0"))
                                                               (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,0,0,0"))
                                                               (rule "add_zero_left" (formula "23") (term "0,0,1,0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0,0,0,0"))
                                                               (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,0,0,0"))
                                                               (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,0,0,0"))
                                                               (rule "commute_or" (formula "23") (term "0,0"))
                                                               (rule "commute_or_2" (formula "23") (term "0"))
                                                               (rule "commute_or_2" (formula "23") (term "0,1,0"))
                                                               (rule "commute_or" (formula "23") (term "1,1,0"))
                                                               (rule "commute_or" (formula "23") (term "0,0,1,0"))
                                                               (rule "ifthenelse_to_or_left" (formula "20") (term "0,0,0"))
                                                               (rule "eqSymm" (formula "20") (term "1,1,0,0,0"))
                                                               (rule "nnf_notAnd" (formula "20") (term "0,0,0,0,0"))
                                                               (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0,0,0,0"))
                                                               (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,0,0,0"))
                                                               (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,0,0,0"))
                                                               (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,0,0,0"))
                                                               (rule "add_zero_left" (formula "20") (term "0,0,1,0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0,0,0,0"))
                                                               (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,0,0"))
                                                               (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,0,0"))
                                                               (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,0,0,0"))
                                                               (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0,0,0,0"))
                                                               (rule "add_zero_right" (formula "20") (term "0,0,0,0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0,0"))
                                                               (rule "commute_or" (formula "20") (term "0,0"))
                                                               (rule "commute_or_2" (formula "20") (term "0"))
                                                               (rule "commute_or" (formula "20") (term "1,1,0"))
                                                               (rule "commute_or_2" (formula "20") (term "0,1,0"))
                                                               (rule "commute_or" (formula "20") (term "0,0,1,0"))
                                                               (rule "ifthenelse_split" (formula "6") (term "0"))
                                                               (branch "messages[iv_23] = x_arr_2 TRUE"
                                                                  (rule "referencedObjectIsCreatedRightEQ" (formula "51") (ifseqformula "6") (ifseqformula "52"))
                                                                  (rule "close" (formula "51") (ifseqformula "28"))
                                                               )
                                                               (branch "messages[iv_23] = x_arr_2 FALSE"
                                                                  (rule "applyEqReverse" (formula "5") (term "0,0,0,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "7") (term "0,0,0") (ifseqformula "6"))
                                                                  (rule "hideAuxiliaryEq" (formula "6"))
                                                                  (rule "cnf_rightDist" (formula "22") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "22") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "22"))
                                                                  (rule "andLeft" (formula "22"))
                                                                  (rule "commute_or" (formula "23") (term "0"))
                                                                  (rule "shift_paren_or" (formula "22") (term "0"))
                                                                  (rule "commute_or_2" (formula "22") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "22"))
                                                                  (rule "commute_or" (formula "23") (term "1,1,0"))
                                                                  (rule "shift_paren_or" (formula "22") (term "0,0"))
                                                                  (rule "commute_or" (formula "22") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "22"))
                                                                  (rule "cnf_rightDist" (formula "23") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "23"))
                                                                  (rule "andLeft" (formula "23"))
                                                                  (rule "commute_or_2" (formula "23") (term "0"))
                                                                  (rule "shift_paren_or" (formula "24") (term "0"))
                                                                  (rule "commute_or_2" (formula "24") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "24") (term "0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "24") (term "1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "24") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "24") (term "1,0,1,0"))
                                                                  (rule "times_zero_1" (formula "24") (term "0,1,0"))
                                                                  (rule "leq_literals" (formula "24") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "24"))
                                                                  (rule "true_left" (formula "24"))
                                                                  (rule "shift_paren_or" (formula "23") (term "0,0"))
                                                                  (rule "commute_or" (formula "23") (term "0,0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "23") (term "0,0"))
                                                                  (rule "add_zero_right" (formula "23") (term "1,1,0,0"))
                                                                  (rule "qeq_literals" (formula "23") (term "1,0,0"))
                                                                  (builtin "One Step Simplification" (formula "23"))
                                                                  (rule "true_left" (formula "23"))
                                                                  (rule "cnf_rightDist" (formula "19") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "19") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "19"))
                                                                  (rule "andLeft" (formula "19"))
                                                                  (rule "commute_or" (formula "20") (term "0"))
                                                                  (rule "shift_paren_or" (formula "19") (term "0"))
                                                                  (rule "commute_or_2" (formula "19") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "19"))
                                                                  (rule "commute_or" (formula "20") (term "1,1,0"))
                                                                  (rule "shift_paren_or" (formula "19") (term "0,0"))
                                                                  (rule "commute_or" (formula "19") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "19"))
                                                                  (rule "cnf_rightDist" (formula "20") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "20"))
                                                                  (rule "andLeft" (formula "20"))
                                                                  (rule "commute_or_2" (formula "20") (term "0"))
                                                                  (rule "shift_paren_or" (formula "21") (term "0"))
                                                                  (rule "commute_or_2" (formula "21") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "21") (term "0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "21") (term "1,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "21") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "21") (term "1,0,1,0"))
                                                                  (rule "times_zero_1" (formula "21") (term "0,1,0"))
                                                                  (rule "leq_literals" (formula "21") (term "1,0"))
                                                                  (builtin "One Step Simplification" (formula "21"))
                                                                  (rule "true_left" (formula "21"))
                                                                  (rule "shift_paren_or" (formula "20") (term "0,0"))
                                                                  (rule "commute_or" (formula "20") (term "0,0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "20") (term "0,0"))
                                                                  (rule "add_zero_right" (formula "20") (term "1,1,0,0"))
                                                                  (rule "qeq_literals" (formula "20") (term "1,0,0"))
                                                                  (builtin "One Step Simplification" (formula "20"))
                                                                  (rule "true_left" (formula "20"))
                                                                  (rule "lenNonNegative" (formula "17") (term "0"))
                                                                  (rule "inEqSimp_commuteLeq" (formula "17"))
                                                                  (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
                                                                  (rule "qeq_literals" (formula "17"))
                                                                  (rule "true_left" (formula "17"))
                                                                  (rule "arrayLengthIsAShort" (formula "2") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "2"))
                                                                  (rule "true_left" (formula "2"))
                                                                  (rule "arrayLengthNotNegative" (formula "2") (term "0"))
                                                                  (rule "inEqSimp_antiSymm" (formula "2") (ifseqformula "3"))
                                                                  (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "2"))
                                                                  (rule "qeq_literals" (formula "3"))
                                                                  (rule "true_left" (formula "3"))
                                                                  (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "2"))
                                                                  (rule "leq_literals" (formula "3"))
                                                                  (rule "true_left" (formula "3"))
                                                                  (rule "arrayLengthIsAShort" (formula "1") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "arrayLengthNotNegative" (formula "1") (term "0"))
                                                                  (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "2"))
                                                                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                                                  (rule "qeq_literals" (formula "2"))
                                                                  (rule "true_left" (formula "2"))
                                                                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                                                  (rule "leq_literals" (formula "2"))
                                                                  (rule "true_left" (formula "2"))
                                                                  (rule "onlyCreatedObjectsAreReferenced" (formula "38") (term "1,2,0,0,0") (ifseqformula "26"))
                                                                  (rule "replace_known_right" (formula "38") (term "0") (ifseqformula "42"))
                                                                  (builtin "One Step Simplification" (formula "38"))
                                                                  (rule "ifthenelse_split" (formula "6") (term "0"))
                                                                  (branch "messages[iv_23].<created> = TRUE TRUE"
                                                                     (rule "applyEqReverse" (formula "47") (term "1") (ifseqformula "7"))
                                                                     (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "7"))
                                                                     (rule "hideAuxiliaryEq" (formula "7"))
                                                                     (rule "replace_known_left" (formula "5") (term "0,0,0") (ifseqformula "6"))
                                                                     (builtin "One Step Simplification" (formula "5"))
                                                                     (rule "applyEqReverse" (formula "46") (term "0") (ifseqformula "5"))
                                                                     (builtin "One Step Simplification" (formula "46"))
                                                                     (rule "closeTrue" (formula "46"))
                                                                  )
                                                                  (branch "messages[iv_23].<created> = TRUE FALSE"
                                                                     (rule "referencedObjectIsCreatedRight" (formula "40") (ifseqformula "42"))
                                                                     (rule "close" (formula "40") (ifseqformula "26"))
                                                                  )
                                                               )
                                                            )
                                                            (branch "messages[iv_23].length >= 1 FALSE"
                                                               (rule "inEqSimp_geqRight" (formula "39"))
                                                               (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                               (rule "add_literals" (formula "1") (term "0,0"))
                                                               (rule "add_zero_left" (formula "1") (term "0"))
                                                               (rule "inEqSimp_homoInEq1" (formula "10"))
                                                               (rule "times_zero_2" (formula "10") (term "1,0"))
                                                               (rule "add_zero_right" (formula "10") (term "0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "10"))
                                                               (rule "mul_literals" (formula "10") (term "1"))
                                                               (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "10"))
                                                               (rule "qeq_literals" (formula "9") (term "0"))
                                                               (builtin "One Step Simplification" (formula "9"))
                                                               (rule "closeFalse" (formula "9"))
                                                            )
                                                         )
                                                         (branch "messages[i_2].length >= 1 FALSE"
                                                            (rule "eqSymm" (formula "21"))
                                                            (rule "inEqSimp_geqRight" (formula "39"))
                                                            (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0"))
                                                            (rule "applyEq" (formula "21") (term "1,1,0") (ifseqformula "22"))
                                                            (rule "applyEqRigid" (formula "19") (term "0") (ifseqformula "22"))
                                                            (rule "qeq_literals" (formula "19"))
                                                            (rule "true_left" (formula "19"))
                                                            (rule "applyEq" (formula "22") (term "1,1,0") (ifseqformula "21"))
                                                            (rule "applyEq" (formula "19") (term "1") (ifseqformula "21"))
                                                            (rule "commute_and" (formula "8") (term "0,0"))
                                                            (rule "commute_or" (formula "22") (term "0,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0"))
                                                            (rule "add_zero_right" (formula "22") (term "1,1,0"))
                                                            (rule "qeq_literals" (formula "22") (term "1,0"))
                                                            (builtin "One Step Simplification" (formula "22"))
                                                            (rule "true_left" (formula "22"))
                                                            (rule "commute_or" (formula "20") (term "0,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "20") (term "0"))
                                                            (rule "add_zero_right" (formula "20") (term "1,1,0"))
                                                            (rule "qeq_literals" (formula "20") (term "1,0"))
                                                            (builtin "One Step Simplification" (formula "20"))
                                                            (rule "true_left" (formula "20"))
                                                            (rule "commute_or" (formula "36") (term "0,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "36") (term "0"))
                                                            (rule "add_zero_right" (formula "36") (term "1,1,0"))
                                                            (rule "qeq_literals" (formula "36") (term "1,0"))
                                                            (builtin "One Step Simplification" (formula "36"))
                                                            (rule "true_left" (formula "36"))
                                                            (rule "arrayLengthIsAShort" (formula "35") (term "1,0,0,0"))
                                                            (builtin "One Step Simplification" (formula "35"))
                                                            (rule "true_left" (formula "35"))
                                                            (rule "arrayLengthNotNegative" (formula "35") (term "1,0,0,0"))
                                                            (rule "inEqSimp_antiSymm" (formula "35") (ifseqformula "1"))
                                                            (rule "applyEq" (formula "36") (term "0") (ifseqformula "35"))
                                                            (rule "qeq_literals" (formula "36"))
                                                            (rule "true_left" (formula "36"))
                                                            (rule "applyEq" (formula "36") (term "1,0,0,0") (ifseqformula "35"))
                                                            (rule "seqDef_lower_equals_upper" (formula "36") (term "0,0,0"))
                                                            (rule "applyEq" (formula "1") (term "0") (ifseqformula "35"))
                                                            (rule "leq_literals" (formula "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "allLeft" (formula "26") (inst "t=iv_23"))
                                                            (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                                                            (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "13"))
                                                            (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                                                            (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                                                            (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                                                            (rule "add_zero_right" (formula "26") (term "0,0,1"))
                                                            (rule "leq_literals" (formula "26") (term "0,1"))
                                                            (builtin "One Step Simplification" (formula "26"))
                                                            (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "11"))
                                                            (rule "qeq_literals" (formula "26") (term "0,1"))
                                                            (builtin "One Step Simplification" (formula "26"))
                                                            (rule "notLeft" (formula "26"))
                                                            (rule "replace_known_right" (formula "7") (term "0,1,0,0") (ifseqformula "36"))
                                                            (builtin "One Step Simplification" (formula "7"))
                                                            (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "36"))
                                                            (builtin "One Step Simplification" (formula "5"))
                                                            (rule "ifthenelse_negated" (formula "7") (term "0"))
                                                            (rule "ifthenelse_negated" (formula "5") (term "0"))
                                                            (rule "narrowSelectArrayType" (formula "7") (term "1,0") (ifseqformula "23") (ifseqformula "36"))
                                                            (rule "narrowSelectArrayType" (formula "7") (term "2,0") (ifseqformula "27") (ifseqformula "36"))
                                                            (rule "narrowSelectArrayType" (formula "5") (term "2,0") (ifseqformula "30") (ifseqformula "36"))
                                                            (rule "ifthenelse_split" (formula "9") (term "0"))
                                                            (branch "messages[iv_23].length >= 1 TRUE"
                                                               (rule "replace_known_left" (formula "42") (term "0,1") (ifseqformula "10"))
                                                               (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "10")))
                                                               (rule "ifthenelse_split" (formula "6") (term "0"))
                                                               (branch "messages[iv_23] = x_arr_2 TRUE"
                                                                  (rule "referencedObjectIsCreatedRightEQ" (formula "48") (ifseqformula "6") (ifseqformula "49"))
                                                                  (rule "close" (formula "48") (ifseqformula "25"))
                                                               )
                                                               (branch "messages[iv_23] = x_arr_2 FALSE"
                                                                  (rule "applyEqReverse" (formula "5") (term "0,0,0,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "7") (term "0,0,0") (ifseqformula "6"))
                                                                  (rule "hideAuxiliaryEq" (formula "6"))
                                                                  (rule "lenNonNegative" (formula "17") (term "0"))
                                                                  (rule "inEqSimp_commuteLeq" (formula "17"))
                                                                  (rule "applyEqRigid" (formula "17") (term "0") (ifseqformula "18"))
                                                                  (rule "qeq_literals" (formula "17"))
                                                                  (rule "true_left" (formula "17"))
                                                                  (rule "arrayLengthNotNegative" (formula "2") (term "0"))
                                                                  (rule "inEqSimp_antiSymm" (formula "2") (ifseqformula "3"))
                                                                  (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "2"))
                                                                  (rule "leq_literals" (formula "4"))
                                                                  (rule "true_left" (formula "4"))
                                                                  (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "2"))
                                                                  (rule "qeq_literals" (formula "3"))
                                                                  (rule "true_left" (formula "3"))
                                                                  (rule "arrayLengthNotNegative" (formula "1") (term "0"))
                                                                  (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "2"))
                                                                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                                                  (rule "qeq_literals" (formula "2"))
                                                                  (rule "true_left" (formula "2"))
                                                                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                                                  (rule "leq_literals" (formula "2"))
                                                                  (rule "true_left" (formula "2"))
                                                                  (rule "ifthenelse_split" (formula "6") (term "0"))
                                                                  (branch "messages[iv_23].<created> = TRUE TRUE"
                                                                     (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "7"))
                                                                     (rule "applyEqReverse" (formula "43") (term "1") (ifseqformula "7"))
                                                                     (rule "hideAuxiliaryEq" (formula "7"))
                                                                     (rule "replace_known_left" (formula "5") (term "0,0,0") (ifseqformula "6"))
                                                                     (builtin "One Step Simplification" (formula "5"))
                                                                     (rule "applyEqReverse" (formula "42") (term "0") (ifseqformula "5"))
                                                                     (builtin "One Step Simplification" (formula "42"))
                                                                     (rule "closeTrue" (formula "42"))
                                                                  )
                                                                  (branch "messages[iv_23].<created> = TRUE FALSE"
                                                                     (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "38"))
                                                                     (rule "close" (formula "36") (ifseqformula "23"))
                                                                  )
                                                               )
                                                            )
                                                            (branch "messages[iv_23].length >= 1 FALSE"
                                                               (rule "inEqSimp_geqRight" (formula "36"))
                                                               (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                               (rule "add_literals" (formula "1") (term "0,0"))
                                                               (rule "add_zero_left" (formula "1") (term "0"))
                                                               (rule "inEqSimp_homoInEq1" (formula "10"))
                                                               (rule "mul_literals" (formula "10") (term "1,0"))
                                                               (rule "add_zero_right" (formula "10") (term "0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "10"))
                                                               (rule "mul_literals" (formula "10") (term "1"))
                                                               (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "9"))
                                                               (rule "qeq_literals" (formula "10") (term "0"))
                                                               (builtin "One Step Simplification" (formula "10"))
                                                               (rule "closeFalse" (formula "10"))
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                          (branch "messages.length >= 1 FALSE"
                                             (rule "inEqSimp_geqRight" (formula "33"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_homoInEq1" (formula "4"))
                                             (rule "mul_literals" (formula "4") (term "1,0"))
                                             (rule "add_zero_right" (formula "4") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                             (rule "mul_literals" (formula "4") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "3"))
                                             (rule "qeq_literals" (formula "4") (term "0"))
                                             (builtin "One Step Simplification" (formula "4"))
                                             (rule "closeFalse" (formula "4"))
                                          )
                                       )
                                    )
                                    (branch
                                       (rule "applyEqReverse" (formula "25") (term "0") (ifseqformula "1") (userinteraction))
                                       (rule "applyEqReverse" (formula "25") (term "1") (ifseqformula "17") (userinteraction))
                                       (rule "equalityToSeqGetAndSeqLenRight" (formula "25") (inst "iv=iv") (userinteraction))
                                       (rule "andRight" (formula "25") (userinteraction))
                                       (branch "Case 1"
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "1") (ifseqformula "21"))
                                          (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "28")) (ifInst ""  (formula "26")) (ifInst ""  (formula "27")))
                                          (rule "translateJavaUnaryMinusInt" (formula "15") (term "0"))
                                          (rule "neg_literal" (formula "15") (term "0"))
                                          (rule "eqSymm" (formula "18"))
                                          (rule "eqSymm" (formula "36"))
                                          (rule "eqSymm" (formula "24"))
                                          (rule "eqSymm" (formula "25"))
                                          (rule "eqSymm" (formula "37"))
                                          (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "30"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "polySimp_addComm0" (formula "18") (term "0,0"))
                                          (rule "polySimp_addComm0" (formula "37") (term "0,1,0"))
                                          (rule "dismissNonSelectedField" (formula "26") (term "0"))
                                          (rule "inEqSimp_ltRight" (formula "35"))
                                          (rule "mul_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_leqRight" (formula "34"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "dismissNonSelectedField" (formula "20") (term "0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "17"))
                                          (rule "polySimp_mulComm0" (formula "17") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "17") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "16"))
                                          (rule "applyEq" (formula "36") (term "0,0") (ifseqformula "3"))
                                          (rule "eqSymm" (formula "36"))
                                          (rule "applyEq" (formula "7") (term "0") (ifseqformula "8"))
                                          (rule "qeq_literals" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "applyEq" (formula "18") (term "1,2,1,0,0,0,1,0") (ifseqformula "7"))
                                          (rule "add_literals" (formula "18") (term "2,1,0,0,0,1,0"))
                                          (rule "applyEq" (formula "24") (term "1,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "25") (term "0,1") (ifseqformula "2"))
                                          (rule "applyEq" (formula "19") (term "1,2,1,0,0,0") (ifseqformula "7"))
                                          (rule "add_literals" (formula "19") (term "2,1,0,0,0"))
                                          (rule "applyEq" (formula "21") (term "1,2,1,0,0,0,0") (ifseqformula "7"))
                                          (rule "add_zero_right" (formula "21") (term "2,1,0,0,0,0"))
                                          (rule "applyEq" (formula "17") (term "1,2,1,0,0,0,0") (ifseqformula "7"))
                                          (rule "add_literals" (formula "17") (term "2,1,0,0,0,0"))
                                          (rule "applyEq" (formula "26") (term "1,2,1,0,0") (ifseqformula "7"))
                                          (rule "add_zero_right" (formula "26") (term "2,1,0,0"))
                                          (rule "applyEqRigid" (formula "5") (term "1") (ifseqformula "3"))
                                          (rule "applyEq" (formula "25") (term "1,2,1,0,0,0,0,0") (ifseqformula "7"))
                                          (rule "add_literals" (formula "25") (term "2,1,0,0,0,0,0"))
                                          (rule "applyEq" (formula "24") (term "1,2,1,0,0,0,1,0,0") (ifseqformula "7"))
                                          (rule "add_zero_right" (formula "24") (term "2,1,0,0,0,1,0,0"))
                                          (rule "applyEq" (formula "5") (term "1,2,1,0,0,0,1,0") (ifseqformula "7"))
                                          (rule "add_literals" (formula "5") (term "2,1,0,0,0,1,0"))
                                          (rule "applyEq" (formula "25") (term "0,0") (ifseqformula "17"))
                                          (rule "eqSymm" (formula "25"))
                                          (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "3"))
                                          (rule "eqSymm" (formula "35"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                          (rule "mul_literals" (formula "1") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "16"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                                          (rule "polySimp_elimOne" (formula "16") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "6"))
                                          (rule "leq_literals" (formula "15") (term "0"))
                                          (builtin "One Step Simplification" (formula "15"))
                                          (rule "true_left" (formula "15"))
                                          (rule "array2seqDef" (formula "2") (term "0") (inst "u=u"))
                                          (rule "lenOfSeqDefEQ" (formula "23") (term "0") (ifseqformula "2"))
                                          (rule "polySimp_elimSub" (formula "23") (term "1,0"))
                                          (rule "mul_literals" (formula "23") (term "1,1,0"))
                                          (rule "add_zero_right" (formula "23") (term "1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0"))
                                          (rule "array2seqDef" (formula "22") (term "1") (inst "u=u"))
                                          (rule "eqSymm" (formula "22"))
                                          (rule "array2seqDef" (formula "15") (term "0") (inst "u=u"))
                                          (rule "lenOfSeqDefEQ" (formula "23") (term "1") (ifseqformula "15"))
                                          (rule "eqSymm" (formula "23"))
                                          (rule "polySimp_elimSub" (formula "23") (term "1,0"))
                                          (rule "times_zero_2" (formula "23") (term "1,1,0"))
                                          (rule "add_zero_right" (formula "23") (term "1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "23"))
                                          (rule "closeTrue" (formula "23"))
                                       )
                                       (branch "Case 2"
                                          (rule "allRight" (formula "25") (inst "sk=iv_20") (userinteraction))
                                          (rule "impRight" (formula "25") (userinteraction))
                                          (rule "getOfArray2seq" (formula "26") (term "0") (userinteraction))
                                          (branch "Case 1"
                                             (rule "getOfArray2seq" (formula "26") (term "1") (userinteraction))
                                             (branch "Case 1"
                                                (rule "selectOfAnon" (formula "26") (term "1") (userinteraction))
                                                (rule "selectOfAnonEQ" (formula "26") (term "0") (ifseqformula "22") (userinteraction))
                                                (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "31")) (ifInst ""  (formula "31")))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "24") (term "1") (ifseqformula "22"))
                                                (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "29")) (ifInst ""  (formula "27")) (ifInst ""  (formula "28")))
                                                (rule "translateJavaUnaryMinusInt" (formula "16") (term "0"))
                                                (rule "neg_literal" (formula "16") (term "0"))
                                                (rule "andLeft" (formula "1"))
                                                (rule "eqSymm" (formula "20"))
                                                (rule "eqSymm" (formula "38"))
                                                (rule "eqSymm" (formula "26"))
                                                (rule "eqSymm" (formula "39"))
                                                (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "32"))
                                                (builtin "One Step Simplification" (formula "21"))
                                                (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "21"))
                                                (builtin "One Step Simplification" (formula "27"))
                                                (rule "eqSymm" (formula "27"))
                                                (rule "polySimp_addComm0" (formula "20") (term "0,0"))
                                                (rule "polySimp_addComm0" (formula "39") (term "0,1,0"))
                                                (rule "dismissNonSelectedField" (formula "28") (term "0"))
                                                (rule "inEqSimp_leqRight" (formula "36"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                (rule "inEqSimp_ltRight" (formula "37"))
                                                (rule "mul_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "dismissNonSelectedField" (formula "22") (term "0,0"))
                                                (rule "dismissNonSelectedField" (formula "28") (term "0,0,0,0"))
                                                (rule "dismissNonSelectedField" (formula "28") (term "2,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "19"))
                                                (rule "polySimp_mulComm0" (formula "19") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "19") (term "0"))
                                                (rule "narrowSelectArrayType" (formula "28") (term "1,0") (ifseqformula "17") (ifseqformula "33"))
                                                (rule "inEqSimp_ltToLeq" (formula "3"))
                                                (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                (rule "ifthenelse_negated" (formula "28") (term "0"))
                                                (rule "inEqSimp_commuteLeq" (formula "18"))
                                                (rule "inEqSimp_commuteLeq" (formula "2"))
                                                (rule "applyEqRigid" (formula "3") (term "0,0,1,0") (ifseqformula "4"))
                                                (rule "applyEq" (formula "28") (term "1,2,1,0,0,0,0") (ifseqformula "10"))
                                                (rule "add_literals" (formula "28") (term "2,1,0,0,0,0"))
                                                (rule "applyEq" (formula "38") (term "0,0") (ifseqformula "5"))
                                                (rule "eqSymm" (formula "38"))
                                                (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                                                (rule "qeq_literals" (formula "9"))
                                                (rule "true_left" (formula "9"))
                                                (rule "applyEq" (formula "7") (term "1") (ifseqformula "5"))
                                                (rule "applyEq" (formula "26") (term "1,0") (ifseqformula "4"))
                                                (rule "applyEq" (formula "23") (term "1,2,1,0,0,0,0") (ifseqformula "9"))
                                                (rule "add_zero_right" (formula "23") (term "2,1,0,0,0,0"))
                                                (rule "applyEq" (formula "28") (term "1,2,1,0,0") (ifseqformula "9"))
                                                (rule "add_zero_right" (formula "28") (term "2,1,0,0"))
                                                (rule "applyEq" (formula "7") (term "1,2,1,0,0,0,1,0") (ifseqformula "9"))
                                                (rule "add_literals" (formula "7") (term "2,1,0,0,0,1,0"))
                                                (rule "applyEq" (formula "19") (term "1,2,1,0,0,0,0") (ifseqformula "9"))
                                                (rule "add_zero_right" (formula "19") (term "2,1,0,0,0,0"))
                                                (rule "applyEq" (formula "27") (term "1,2,1,0,1,0") (ifseqformula "9"))
                                                (rule "add_literals" (formula "27") (term "2,1,0,1,0"))
                                                (rule "applyEq" (formula "26") (term "1,2,1,0,0,0,1,0,0") (ifseqformula "9"))
                                                (rule "add_zero_right" (formula "26") (term "2,1,0,0,0,1,0,0"))
                                                (rule "applyEq" (formula "21") (term "1,2,1,0,0,0") (ifseqformula "9"))
                                                (rule "add_zero_right" (formula "21") (term "2,1,0,0,0"))
                                                (rule "applyEq" (formula "20") (term "1,2,1,0,0,0,1,0") (ifseqformula "9"))
                                                (rule "add_zero_right" (formula "20") (term "2,1,0,0,0,1,0"))
                                                (rule "applyEq" (formula "27") (term "1,2,1,0,0,0,1") (ifseqformula "9"))
                                                (rule "add_zero_right" (formula "27") (term "2,1,0,0,0,1"))
                                                (rule "applyEq" (formula "37") (term "0,0") (ifseqformula "5"))
                                                (rule "eqSymm" (formula "37"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                (rule "mul_literals" (formula "1") (term "0,1"))
                                                (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "18"))
                                                (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                                                (rule "polySimp_elimOne" (formula "18") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                                                (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "8"))
                                                (rule "leq_literals" (formula "17") (term "0"))
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "true_left" (formula "17"))
                                                (rule "array2seqDef" (formula "4") (term "0") (inst "u=u"))
                                                (rule "lenOfSeqDefEQ" (formula "3") (term "0") (ifseqformula "4"))
                                                (rule "polySimp_elimSub" (formula "3") (term "1,0"))
                                                (rule "times_zero_2" (formula "3") (term "1,1,0"))
                                                (rule "add_zero_right" (formula "3") (term "1,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0"))
                                                (rule "array2seqDef" (formula "24") (term "1") (inst "u=u"))
                                                (rule "eqSymm" (formula "24"))
                                                (rule "array2seqDef" (formula "7") (term "0") (inst "u=u"))
                                                (rule "array2seqDef" (formula "17") (term "0") (inst "u=u"))
                                                (rule "equalityToSeqGetAndSeqLenRight" (formula "35") (inst "iv=iv"))
                                                (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,1"))
                                                (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0,1"))
                                                (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,1"))
                                                (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1"))
                                                (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1"))
                                                (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1"))
                                                (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1"))
                                                (rule "array2seqDef" (formula "24") (term "0,1") (inst "u=u"))
                                                (rule "eqSymm" (formula "24"))
                                                (rule "eqSeqDef2" (formula "18") (inst "iv=iv") (ifseqformula "17"))
                                                (rule "andLeft" (formula "18"))
                                                (rule "eqSymm" (formula "18"))
                                                (rule "eqSymm" (formula "19") (term "1,0"))
                                                (rule "lenOfSeqDef" (formula "18") (term "0"))
                                                (rule "polySimp_elimSub" (formula "18") (term "1,0"))
                                                (rule "times_zero_2" (formula "18") (term "1,1,0"))
                                                (rule "add_zero_right" (formula "18") (term "1,0"))
                                                (rule "getOfSeqDef" (formula "19") (term "0,1,0"))
                                                (rule "castDel" (formula "19") (term "1,0,1,0"))
                                                (rule "castDel" (formula "19") (term "2,0,1,0"))
                                                (rule "add_zero_right" (formula "19") (term "0,2,1,0,1,0"))
                                                (rule "polySimp_elimSub" (formula "19") (term "1,1,0,0,1,0"))
                                                (rule "mul_literals" (formula "19") (term "1,1,1,0,0,1,0"))
                                                (rule "add_zero_right" (formula "19") (term "1,1,0,0,1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0"))
                                                (rule "add_zero_right" (formula "18") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,1,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                                                (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,0"))
                                                (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0"))
                                                (rule "polySimp_elimOne" (formula "18") (term "0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,1,0"))
                                                (rule "mul_literals" (formula "19") (term "0,1,1,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,1,0"))
                                                (rule "eqSeqDef2" (formula "6") (inst "iv=iv") (ifseqformula "7"))
                                                (rule "andLeft" (formula "6"))
                                                (rule "eqSymm" (formula "7") (term "1,0"))
                                                (rule "eqSymm" (formula "6"))
                                                (rule "getOfSeqDef" (formula "7") (term "0,1,0"))
                                                (rule "castDel" (formula "7") (term "1,0,1,0"))
                                                (rule "castDel" (formula "7") (term "2,0,1,0"))
                                                (rule "add_zero_right" (formula "7") (term "0,2,1,0,1,0"))
                                                (rule "polySimp_elimSub" (formula "7") (term "1,1,0,0,1,0"))
                                                (rule "mul_literals" (formula "7") (term "1,1,1,0,0,1,0"))
                                                (rule "add_zero_right" (formula "7") (term "1,1,0,0,1,0"))
                                                (rule "lenOfSeqDef" (formula "6") (term "0"))
                                                (rule "polySimp_elimSub" (formula "6") (term "1,0"))
                                                (rule "times_zero_2" (formula "6") (term "1,1,0"))
                                                (rule "add_zero_right" (formula "6") (term "1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0,1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0"))
                                                (rule "add_zero_right" (formula "6") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
                                                (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0,1,0"))
                                                (rule "mul_literals" (formula "7") (term "0,1,1,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0,1,0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,0"))
                                                (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0"))
                                                (rule "polySimp_elimOne" (formula "6") (term "0,0,0"))
                                                (rule "eqSeqDef2" (formula "5") (inst "iv=iv") (ifseqformula "8"))
                                                (rule "andLeft" (formula "5"))
                                                (rule "eqSymm" (formula "5"))
                                                (rule "eqSymm" (formula "6") (term "1,0"))
                                                (rule "lenOfSeqDef" (formula "5") (term "0"))
                                                (rule "polySimp_elimSub" (formula "5") (term "1,0"))
                                                (rule "times_zero_2" (formula "5") (term "1,1,0"))
                                                (rule "add_zero_right" (formula "5") (term "1,0"))
                                                (rule "getOfSeqDef" (formula "6") (term "0,1,0"))
                                                (rule "castDel" (formula "6") (term "1,0,1,0"))
                                                (rule "castDel" (formula "6") (term "2,0,1,0"))
                                                (rule "add_zero_right" (formula "6") (term "0,2,1,0,1,0"))
                                                (rule "polySimp_elimSub" (formula "6") (term "1,1,0,0,1,0"))
                                                (rule "times_zero_2" (formula "6") (term "1,1,1,0,0,1,0"))
                                                (rule "add_zero_right" (formula "6") (term "1,1,0,0,1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0"))
                                                (rule "add_zero_right" (formula "5") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,1,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
                                                (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,0"))
                                                (rule "polySimp_mulLiterals" (formula "5") (term "0,0,0"))
                                                (rule "polySimp_elimOne" (formula "5") (term "0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,1,0"))
                                                (rule "mul_literals" (formula "6") (term "0,1,1,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,1,0"))
                                                (rule "eqSeqDef2" (formula "4") (inst "iv=iv") (ifseqformula "4"))
                                                (builtin "One Step Simplification" (formula "4"))
                                                (rule "true_left" (formula "4"))
                                                (rule "eqSeqDef2" (formula "8") (inst "iv=iv") (ifseqformula "8"))
                                                (builtin "One Step Simplification" (formula "8"))
                                                (rule "true_left" (formula "8"))
                                                (rule "eqSeqDef" (formula "25") (inst "iv=iv"))
                                                (rule "andLeft" (formula "25"))
                                                (rule "lenOfSeqDef" (formula "25") (term "1"))
                                                (rule "polySimp_elimSub" (formula "25") (term "1,1"))
                                                (rule "times_zero_2" (formula "25") (term "1,1,1"))
                                                (rule "add_zero_right" (formula "25") (term "1,1"))
                                                (rule "getOfSeqDef" (formula "26") (term "1,1,0"))
                                                (rule "castDel" (formula "26") (term "1,1,1,0"))
                                                (rule "castDel" (formula "26") (term "2,1,1,0"))
                                                (rule "add_zero_right" (formula "26") (term "0,2,1,1,1,0"))
                                                (rule "polySimp_elimSub" (formula "26") (term "1,1,0,1,1,0"))
                                                (rule "times_zero_2" (formula "26") (term "1,1,1,0,1,1,0"))
                                                (rule "add_zero_right" (formula "26") (term "1,1,0,1,1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
                                                (rule "polySimp_addComm1" (formula "26") (term "0,1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "25") (term "0,1"))
                                                (rule "add_zero_right" (formula "25") (term "0,0,1"))
                                                (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1"))
                                                (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,1,1,0"))
                                                (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,1,1,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,1,1,0"))
                                                (rule "apply_eq_monomials" (formula "26") (term "1,0,1,0,0") (ifseqformula "25"))
                                                (rule "polySimp_rightDist" (formula "26") (term "0,1,0,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,0,1,0,0"))
                                                (rule "polySimp_pullOutFactor0b" (formula "26") (term "1,0,1,0,0"))
                                                (rule "add_literals" (formula "26") (term "1,1,1,0,1,0,0"))
                                                (rule "times_zero_1" (formula "26") (term "1,1,0,1,0,0"))
                                                (rule "add_zero_right" (formula "26") (term "1,0,1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "26") (term "1,0,1,0,0"))
                                                (rule "polySimp_addComm1" (formula "26") (term "0,1,0,0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,1"))
                                                (rule "polySimp_mulLiterals" (formula "25") (term "0,0,1"))
                                                (rule "polySimp_elimOne" (formula "25") (term "0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,1,1,0"))
                                                (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,1,1,0"))
                                                (rule "polySimp_rightDist" (formula "26") (term "1,1,0,1,1,0"))
                                                (rule "mul_literals" (formula "26") (term "0,1,1,0,1,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,1,1,0"))
                                                (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,1,1,0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,0,1,0,0,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "26") (term "0,0,0,1,0,0,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "26") (term "0,0,0,1,0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
                                                (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
                                                (rule "eqSeqDef2" (formula "17") (inst "iv=iv") (ifseqformula "17"))
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "true_left" (formula "17"))
                                                (rule "pullOutSelect" (formula "26") (term "0,0,0") (inst "selectSK=java_lang_Object_created__85"))
                                                (rule "applyEq" (formula "20") (term "0,0") (ifseqformula "1"))
                                                (rule "simplifySelectOfMemset" (formula "1"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "simplifySelectOfStore" (formula "1"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "simplifySelectOfStore" (formula "1"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "simplifySelectOfStore" (formula "1"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "simplifySelectOfCreate" (formula "1"))
                                                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "34")))
                                                (rule "castDel" (formula "1") (term "1,0"))
                                                (rule "apply_eq_boolean" (formula "1") (term "2,0") (ifseqformula "31"))
                                                (rule "pullOutSelect" (formula "28") (term "0") (inst "selectSK=java_lang_Object_created__86"))
                                                (rule "simplifySelectOfMemset" (formula "1"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "simplifySelectOfStore" (formula "1"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "simplifySelectOfStore" (formula "1"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "simplifySelectOfStore" (formula "1"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "simplifySelectOfCreate" (formula "1"))
                                                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "35")))
                                                (rule "castDel" (formula "1") (term "1,0"))
                                                (rule "apply_eq_boolean_rigid" (formula "1") (term "1") (ifseqformula "29"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "orRight" (formula "27"))
                                                (rule "pullOutSelect" (formula "29") (term "1,0") (inst "selectSK=arr_350"))
                                                (rule "simplifySelectOfMemset" (formula "1"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
                                                (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                                                (rule "eqSymm" (formula "1") (term "0,0,0,0"))
                                                (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
                                                (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,0"))
                                                (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "4"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "1") (term "1,0,0") (ifseqformula "4"))
                                                (rule "qeq_literals" (formula "1") (term "0,1,0,0"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "simplifySelectOfCreate" (formula "1"))
                                                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "37")))
                                                (rule "applyEqReverse" (formula "30") (term "1,0") (ifseqformula "1"))
                                                (rule "hideAuxiliaryEq" (formula "1"))
                                                (rule "narrowSelectArrayType" (formula "29") (term "1,0") (ifseqformula "12") (ifseqformula "34"))
                                                (rule "eqSymm" (formula "29"))
                                                (rule "pullOutSelect" (formula "8") (term "1,1,0,1,0") (inst "selectSK=arr_351"))
                                                (rule "applyEq" (formula "26") (term "0,1,0,0,0") (ifseqformula "8"))
                                                (rule "applyEq" (formula "27") (term "1,2,0,0,0,1,0") (ifseqformula "8"))
                                                (rule "applyEq" (formula "6") (term "1,1,0,1,0") (ifseqformula "8"))
                                                (rule "applyEq" (formula "9") (term "0,1,1,1,0,0,1,0") (ifseqformula "8"))
                                                (rule "applyEq" (formula "7") (term "0,1,0") (ifseqformula "8"))
                                                (rule "applyEq" (formula "5") (term "0,0,0,0") (ifseqformula "8"))
                                                (rule "applyEq" (formula "5") (term "0,1,0") (ifseqformula "8"))
                                                (rule "applyEq" (formula "27") (term "0,1,0,0,0,1,0") (ifseqformula "8"))
                                                (rule "applyEq" (formula "7") (term "0,0,0,0") (ifseqformula "8"))
                                                (rule "applyEq" (formula "26") (term "1,2,0,0,0") (ifseqformula "8"))
                                                (rule "applyEq" (formula "6") (term "0,1,1,1,0,0,1,0") (ifseqformula "8"))
                                                (rule "simplifySelectOfAnon" (formula "8"))
                                                (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "38")))
                                                (rule "dismissNonSelectedField" (formula "8") (term "2,0"))
                                                (rule "dismissNonSelectedField" (formula "8") (term "0,0,0,0"))
                                                (rule "ifthenelse_negated" (formula "8") (term "0"))
                                                (rule "applyEq" (formula "7") (term "0") (ifseqformula "5"))
                                                (rule "eqSymm" (formula "7"))
                                                (rule "applyEq" (formula "9") (term "1,1,1,0,0") (ifseqformula "7"))
                                                (rule "pullOutSelect" (formula "30") (term "0") (inst "selectSK=arr_352"))
                                                (rule "simplifySelectOfAnon" (formula "1"))
                                                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "36")))
                                                (rule "eqSymm" (formula "31"))
                                                (rule "dismissNonSelectedField" (formula "1") (term "0,0,0,0"))
                                                (rule "replaceKnownSelect_taclet0011011000001001_0" (formula "1") (term "0,0,0,0"))
                                                (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
                                                (rule "replaceKnownSelect_taclet0011011000001001_10" (formula "1") (term "2,0"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet0011011000001001_12" (formula "1") (term "2,0"))
                                                (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "19") (ifseqformula "36"))
                                                (rule "ifthenelse_negated" (formula "1") (term "0"))
                                                (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "14") (ifseqformula "36"))
                                                (rule "close" (formula "31") (ifseqformula "1"))
                                             )
                                             (branch "Case 2"
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "24") (term "1") (ifseqformula "22"))
                                                (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "30")) (ifInst ""  (formula "28")) (ifInst ""  (formula "29")))
                                                (rule "translateJavaUnaryMinusInt" (formula "16") (term "0"))
                                                (rule "neg_literal" (formula "16") (term "0"))
                                                (rule "andLeft" (formula "1"))
                                                (rule "eqSymm" (formula "26"))
                                                (rule "eqSymm" (formula "20"))
                                                (rule "eqSymm" (formula "39"))
                                                (rule "eqSymm" (formula "40"))
                                                (rule "replace_known_left" (formula "27") (term "0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "27"))
                                                (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "33"))
                                                (builtin "One Step Simplification" (formula "21"))
                                                (rule "polySimp_addComm0" (formula "20") (term "0,0"))
                                                (rule "polySimp_addComm0" (formula "40") (term "0,1,0"))
                                                (rule "dismissNonSelectedField" (formula "29") (term "0"))
                                                (rule "inEqSimp_ltRight" (formula "38"))
                                                (rule "times_zero_1" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "inEqSimp_leqRight" (formula "37"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                (rule "dismissNonSelectedField" (formula "22") (term "0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "19"))
                                                (rule "polySimp_mulComm0" (formula "19") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "19") (term "0"))
                                                (rule "inEqSimp_ltRight" (formula "28"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                                (rule "polySimp_addComm0" (formula "1") (term "0"))
                                                (rule "inEqSimp_ltToLeq" (formula "4"))
                                                (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "4") (term "0"))
                                                (rule "inEqSimp_commuteLeq" (formula "19"))
                                                (rule "inEqSimp_commuteLeq" (formula "3"))
                                                (rule "applyEq" (formula "29") (term "0,1") (ifseqformula "21"))
                                                (rule "applyEq" (formula "30") (term "1,2,1,0,0") (ifseqformula "11"))
                                                (rule "add_zero_right" (formula "30") (term "2,1,0,0"))
                                                (rule "applyEq" (formula "10") (term "0") (ifseqformula "11"))
                                                (rule "qeq_literals" (formula "10"))
                                                (rule "true_left" (formula "10"))
                                                (rule "applyEq" (formula "21") (term "1,2,1,0,0,0,1,0") (ifseqformula "10"))
                                                (rule "add_zero_right" (formula "21") (term "2,1,0,0,0,1,0"))
                                                (rule "applyEqRigid" (formula "27") (term "1,0") (ifseqformula "5"))
                                                (rule "applyEq" (formula "8") (term "1,2,1,0,0,0,1,0") (ifseqformula "10"))
                                                (rule "add_zero_right" (formula "8") (term "2,1,0,0,0,1,0"))
                                                (rule "applyEqRigid" (formula "38") (term "0,1") (ifseqformula "6"))
                                                (rule "applyEq" (formula "22") (term "1,2,1,0,0,0") (ifseqformula "10"))
                                                (rule "add_literals" (formula "22") (term "2,1,0,0,0"))
                                                (rule "applyEq" (formula "38") (term "0,0") (ifseqformula "6"))
                                                (rule "applyEq" (formula "8") (term "1") (ifseqformula "6"))
                                                (rule "applyEq" (formula "20") (term "1,2,1,0,0,0,0") (ifseqformula "10"))
                                                (rule "add_zero_right" (formula "20") (term "2,1,0,0,0,0"))
                                                (rule "applyEq" (formula "27") (term "1,2,1,0,0,0,1,0,0") (ifseqformula "10"))
                                                (rule "add_zero_right" (formula "27") (term "2,1,0,0,0,1,0,0"))
                                                (rule "applyEq" (formula "24") (term "1,2,1,0,0,0,0") (ifseqformula "10"))
                                                (rule "add_zero_right" (formula "24") (term "2,1,0,0,0,0"))
                                                (rule "applyEqRigid" (formula "4") (term "0,0,1,0") (ifseqformula "5"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                (rule "mul_literals" (formula "2") (term "0,1"))
                                                (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "19"))
                                                (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                                                (rule "polySimp_elimOne" (formula "19") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                                                (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                                (rule "polySimp_elimOne" (formula "4") (term "0"))
                                                (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "9"))
                                                (rule "leq_literals" (formula "18") (term "0"))
                                                (builtin "One Step Simplification" (formula "18"))
                                                (rule "true_left" (formula "18"))
                                                (rule "array2seqDef" (formula "5") (term "0") (inst "u=u"))
                                                (rule "lenOfSeqDefEQ" (formula "4") (term "0") (ifseqformula "5"))
                                                (rule "polySimp_elimSub" (formula "4") (term "1,0"))
                                                (rule "mul_literals" (formula "4") (term "1,1,0"))
                                                (rule "add_zero_right" (formula "4") (term "1,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0"))
                                                (rule "array2seqDef" (formula "25") (term "1") (inst "u=u"))
                                                (rule "eqSymm" (formula "25"))
                                                (rule "array2seqDef" (formula "8") (term "0") (inst "u=u"))
                                                (rule "equalityToSeqGetAndSeqLenRight" (formula "36") (inst "iv=iv"))
                                                (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0,1"))
                                                (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0,1"))
                                                (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0,1"))
                                                (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,1"))
                                                (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,1"))
                                                (rule "mul_literals" (formula "36") (term "0,1,1,0,0,1"))
                                                (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0,1"))
                                                (rule "array2seqDef" (formula "18") (term "0") (inst "u=u"))
                                                (rule "array2seqDef" (formula "25") (term "0,1") (inst "u=u"))
                                                (rule "eqSymm" (formula "25"))
                                                (rule "eqSeqDef2" (formula "8") (inst "iv=iv") (ifseqformula "8"))
                                                (builtin "One Step Simplification" (formula "8"))
                                                (rule "true_left" (formula "8"))
                                                (rule "getOfSeqDefEQ" (formula "25") (term "1") (ifseqformula "17"))
                                                (rule "castDel" (formula "25") (term "2,1"))
                                                (rule "castDel" (formula "25") (term "1,1"))
                                                (rule "add_zero_right" (formula "25") (term "0,2,1,1"))
                                                (rule "eqSymm" (formula "25"))
                                                (rule "polySimp_elimSub" (formula "25") (term "1,1,0,0"))
                                                (rule "mul_literals" (formula "25") (term "1,1,1,0,0"))
                                                (rule "add_zero_right" (formula "25") (term "1,1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                                                (rule "polySimp_addComm1" (formula "25") (term "0,1,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                                                (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "25"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,0"))
                                                (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0"))
                                                (rule "polySimp_elimOne" (formula "25") (term "0,0,0"))
                                                (rule "inEqSimp_contradInEq0" (formula "25") (term "0,0") (ifseqformula "1"))
                                                (rule "inEqSimp_homoInEq1" (formula "25") (term "0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,0,0"))
                                                (rule "add_literals" (formula "25") (term "1,1,0,0,0,0"))
                                                (rule "times_zero_1" (formula "25") (term "1,0,0,0,0"))
                                                (rule "add_zero_right" (formula "25") (term "0,0,0,0"))
                                                (rule "leq_literals" (formula "25") (term "0,0,0"))
                                                (builtin "One Step Simplification" (formula "25"))
                                                (rule "eqSymm" (formula "25"))
                                                (rule "eqSeqDef2" (formula "18") (inst "iv=iv") (ifseqformula "17"))
                                                (rule "andLeft" (formula "18"))
                                                (rule "eqSymm" (formula "19") (term "1,0"))
                                                (rule "eqSymm" (formula "18"))
                                                (rule "getOfSeqDef" (formula "19") (term "0,1,0"))
                                                (rule "castDel" (formula "19") (term "2,0,1,0"))
                                                (rule "castDel" (formula "19") (term "1,0,1,0"))
                                                (rule "add_zero_right" (formula "19") (term "0,2,1,0,1,0"))
                                                (rule "polySimp_elimSub" (formula "19") (term "1,1,0,0,1,0"))
                                                (rule "times_zero_2" (formula "19") (term "1,1,1,0,0,1,0"))
                                                (rule "add_zero_right" (formula "19") (term "1,1,0,0,1,0"))
                                                (rule "lenOfSeqDef" (formula "18") (term "0"))
                                                (rule "polySimp_elimSub" (formula "18") (term "1,0"))
                                                (rule "times_zero_2" (formula "18") (term "1,1,0"))
                                                (rule "add_zero_right" (formula "18") (term "1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0"))
                                                (rule "add_zero_right" (formula "18") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                                                (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,1,0"))
                                                (rule "mul_literals" (formula "19") (term "0,1,1,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,1,0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,0"))
                                                (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0"))
                                                (rule "polySimp_elimOne" (formula "18") (term "0,0,0"))
                                                (rule "eqSeqDef2" (formula "5") (inst "iv=iv") (ifseqformula "5"))
                                                (builtin "One Step Simplification" (formula "5"))
                                                (rule "true_left" (formula "5"))
                                                (rule "eqSeqDef" (formula "24") (inst "iv=iv"))
                                                (rule "andLeft" (formula "24"))
                                                (rule "getOfSeqDef" (formula "25") (term "1,1,0"))
                                                (rule "castDel" (formula "25") (term "2,1,1,0"))
                                                (rule "castDel" (formula "25") (term "1,1,1,0"))
                                                (rule "add_zero_right" (formula "25") (term "0,2,1,1,1,0"))
                                                (rule "polySimp_elimSub" (formula "25") (term "1,1,0,1,1,0"))
                                                (rule "times_zero_2" (formula "25") (term "1,1,1,0,1,1,0"))
                                                (rule "add_zero_right" (formula "25") (term "1,1,0,1,1,0"))
                                                (rule "lenOfSeqDef" (formula "24") (term "1"))
                                                (rule "polySimp_elimSub" (formula "24") (term "1,1"))
                                                (rule "times_zero_2" (formula "24") (term "1,1,1"))
                                                (rule "add_zero_right" (formula "24") (term "1,1"))
                                                (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                                                (rule "polySimp_addComm1" (formula "25") (term "0,1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,1,1,0"))
                                                (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,1,1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "24") (term "0,1"))
                                                (rule "add_zero_right" (formula "24") (term "0,0,1"))
                                                (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1"))
                                                (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,1,1,0"))
                                                (rule "apply_eq_monomials" (formula "25") (term "1,0,1,0,0") (ifseqformula "24"))
                                                (rule "polySimp_rightDist" (formula "25") (term "0,1,0,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1,0,1,0,0"))
                                                (rule "polySimp_pullOutFactor0b" (formula "25") (term "1,0,1,0,0"))
                                                (rule "add_literals" (formula "25") (term "1,1,1,0,1,0,0"))
                                                (rule "times_zero_1" (formula "25") (term "1,1,0,1,0,0"))
                                                (rule "add_zero_right" (formula "25") (term "1,0,1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "25") (term "1,0,1,0,0"))
                                                (rule "polySimp_addComm1" (formula "25") (term "0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,1,1,0"))
                                                (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,1,1,0"))
                                                (rule "polySimp_rightDist" (formula "25") (term "1,1,0,1,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,1,1,0"))
                                                (rule "mul_literals" (formula "25") (term "0,1,1,0,1,1,0"))
                                                (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,1,1,0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0,1"))
                                                (rule "polySimp_mulLiterals" (formula "24") (term "0,0,1"))
                                                (rule "polySimp_elimOne" (formula "24") (term "0,0,1"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,0,1,0,0,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0,1,0,0,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "25") (term "0,0,0,1,0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                                                (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                                                (rule "eqSeqDef2" (formula "16") (inst "iv=iv") (ifseqformula "16"))
                                                (builtin "One Step Simplification" (formula "16"))
                                                (rule "true_left" (formula "16"))
                                                (rule "pullOutSelect" (formula "26") (term "0") (inst "selectSK=java_lang_Object_created__87"))
                                                (rule "simplifySelectOfMemset" (formula "1"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "simplifySelectOfStore" (formula "1"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "simplifySelectOfStore" (formula "1"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "simplifySelectOfStore" (formula "1"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "simplifySelectOfCreate" (formula "1"))
                                                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "33")))
                                                (rule "castDel" (formula "1") (term "1,0"))
                                                (rule "apply_eq_boolean" (formula "1") (term "1") (ifseqformula "27"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "orRight" (formula "25"))
                                                (rule "pullOutSelect" (formula "18") (term "0,0") (inst "selectSK=java_lang_Object_created__88"))
                                                (rule "simplifySelectOfMemset" (formula "18"))
                                                (builtin "One Step Simplification" (formula "18"))
                                                (rule "simplifySelectOfStore" (formula "18"))
                                                (builtin "One Step Simplification" (formula "18"))
                                                (rule "simplifySelectOfStore" (formula "18"))
                                                (builtin "One Step Simplification" (formula "18"))
                                                (rule "simplifySelectOfStore" (formula "18"))
                                                (builtin "One Step Simplification" (formula "18"))
                                                (rule "simplifySelectOfCreate" (formula "18"))
                                                (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "35")))
                                                (rule "castDel" (formula "18") (term "1,0"))
                                                (rule "apply_eq_boolean" (formula "18") (term "2,0") (ifseqformula "32"))
                                                (rule "pullOutSelect" (formula "28") (term "0") (inst "selectSK=arr_353"))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                                                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "34")))
                                                (rule "eqSymm" (formula "29"))
                                                (rule "ifthenelse_negated" (formula "1") (term "0"))
                                                (rule "dismissNonSelectedField" (formula "1") (term "0,0,0,0"))
                                                (rule "replaceKnownSelect_taclet1011011000001001_5" (formula "1") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "20"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "simplifySelectOfAnon" (formula "1"))
                                                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "34")))
                                                (rule "dismissNonSelectedField" (formula "1") (term "0,0,0,0"))
                                                (rule "replaceKnownSelect_taclet1011011000001001_5" (formula "1") (term "0,0,0,0"))
                                                (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
                                                (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "16") (ifseqformula "34"))
                                                (rule "ifthenelse_negated" (formula "1") (term "0"))
                                                (rule "pullOutSelect" (formula "25") (term "0,1,0,0,0") (inst "selectSK=arr_354"))
                                                (rule "applyEq" (formula "26") (term "1,2,0,0,0") (ifseqformula "25"))
                                                (rule "applyEq" (formula "27") (term "1,2,0,0,0,1,0") (ifseqformula "25"))
                                                (rule "applyEq" (formula "27") (term "0,1,0,0,0,1,0") (ifseqformula "25"))
                                                (rule "simplifySelectOfAnon" (formula "25"))
                                                (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "38")))
                                                (rule "ifthenelse_negated" (formula "25") (term "0"))
                                                (rule "dismissNonSelectedField" (formula "25") (term "1,0"))
                                                (rule "dismissNonSelectedField" (formula "25") (term "0,0,0"))
                                                (rule "pullOutSelect" (formula "1") (term "1,0") (inst "selectSK=arr_355"))
                                                (rule "simplifySelectOfMemset" (formula "1"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                                                (rule "eqSymm" (formula "1") (term "0,0,0,0"))
                                                (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
                                                (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
                                                (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,0"))
                                                (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "5"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "1") (term "1,0,0") (ifseqformula "5"))
                                                (rule "qeq_literals" (formula "1") (term "0,1,0,0"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "simplifySelectOfCreate" (formula "1"))
                                                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "38")))
                                                (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "1"))
                                                (rule "hideAuxiliaryEq" (formula "1"))
                                                (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "11") (ifseqformula "35"))
                                                (rule "pullOutSelect" (formula "25") (term "1,0") (inst "selectSK=arr_356"))
                                                (rule "simplifySelectOfMemset" (formula "25"))
                                                (builtin "One Step Simplification" (formula "25"))
                                                (rule "dismissNonSelectedField" (formula "25") (term "2,0"))
                                                (rule "elementOfArrayRangeConcrete" (formula "25") (term "0,0"))
                                                (rule "eqSymm" (formula "25") (term "0,0,0,0"))
                                                (rule "dismissNonSelectedField" (formula "25") (term "2,0"))
                                                (rule "sortsDisjointModuloNull" (formula "25") (term "0,0,0,0"))
                                                (rule "replace_known_right" (formula "25") (term "0,0,0,0,0") (ifseqformula "38"))
                                                (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "39")))
                                                (rule "simplifySelectOfStore" (formula "25"))
                                                (builtin "One Step Simplification" (formula "25"))
                                                (rule "simplifySelectOfCreate" (formula "25"))
                                                (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "38")))
                                                (rule "applyEqReverse" (formula "26") (term "1,0") (ifseqformula "25"))
                                                (rule "hideAuxiliaryEq" (formula "25"))
                                                (rule "pullOutSelect" (formula "25") (term "0,0,0") (inst "selectSK=java_lang_Object_created__89"))
                                                (rule "simplifySelectOfMemset" (formula "25"))
                                                (builtin "One Step Simplification" (formula "25"))
                                                (rule "simplifySelectOfStore" (formula "25"))
                                                (builtin "One Step Simplification" (formula "25"))
                                                (rule "simplifySelectOfStore" (formula "25"))
                                                (builtin "One Step Simplification" (formula "25"))
                                                (rule "simplifySelectOfStore" (formula "25"))
                                                (builtin "One Step Simplification" (formula "25"))
                                                (rule "simplifySelectOfCreate" (formula "25"))
                                                (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "38")))
                                                (rule "castDel" (formula "25") (term "1,0"))
                                                (rule "sortsDisjointModuloNull" (formula "25") (term "0,0"))
                                                (rule "replace_known_right" (formula "25") (term "0,0,0") (ifseqformula "38"))
                                                (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "39")))
                                                (rule "applyEqReverse" (formula "26") (term "0,0,0") (ifseqformula "25"))
                                                (rule "hideAuxiliaryEq" (formula "25"))
                                                (rule "replace_known_left" (formula "25") (term "0,0") (ifseqformula "12"))
                                                (builtin "One Step Simplification" (formula "25"))
                                                (rule "applyEqReverse" (formula "26") (term "1,2,0,0,0") (ifseqformula "25"))
                                                (rule "applyEqReverse" (formula "27") (term "1,2,0,0,0,1,0") (ifseqformula "25"))
                                                (rule "applyEqReverse" (formula "26") (term "0,1,0,0,0") (ifseqformula "25"))
                                                (rule "applyEqReverse" (formula "27") (term "0,1,0,0,0,1,0") (ifseqformula "25"))
                                                (rule "hideAuxiliaryEq" (formula "25"))
                                                (rule "nnf_imp2or" (formula "39") (term "0,1"))
                                                (rule "nnf_imp2or" (formula "18") (term "0"))
                                                (rule "hideAuxiliaryEqConcrete2" (formula "30"))
                                                (rule "nnf_imp2or" (formula "26") (term "0"))
                                                (rule "nnf_notAnd" (formula "18") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "18") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                                                (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                                                (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                                (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "26") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                                (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "38") (term "0,0,1"))
                                                (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0,1"))
                                                (rule "times_zero_1" (formula "38") (term "1,0,0,0,0,0,1"))
                                                (rule "add_literals" (formula "38") (term "0,0,0,0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0,1"))
                                                (rule "mul_literals" (formula "38") (term "1,0,0,0,1"))
                                                (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0,1"))
                                                (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,1"))
                                                (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,1"))
                                                (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,1"))
                                                (rule "add_literals" (formula "38") (term "0,0,0,1,0,0,1"))
                                                (rule "add_zero_left" (formula "38") (term "0,0,1,0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,1"))
                                                (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0,1"))
                                                (rule "equalityToSeqGetAndSeqLenLeft" (formula "7") (inst "iv=iv"))
                                                (rule "andLeft" (formula "7"))
                                                (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                                                (rule "applyEq" (formula "8") (term "0,0,1,0,0,1,0,0") (ifseqformula "9"))
                                                (rule "applyEq" (formula "8") (term "0,0,1,0") (ifseqformula "9"))
                                                (builtin "One Step Simplification" (formula "8"))
                                                (rule "true_left" (formula "8"))
                                                (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "8"))
                                                (builtin "One Step Simplification" (formula "7"))
                                                (rule "true_left" (formula "7"))
                                                (rule "equalityToSeqGetAndSeqLenLeft" (formula "6") (inst "iv=iv"))
                                                (rule "andLeft" (formula "6"))
                                                (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
                                                (rule "applyEqRigid" (formula "7") (term "0,0,1,0,0,1,0,0") (ifseqformula "8"))
                                                (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "8"))
                                                (builtin "One Step Simplification" (formula "6"))
                                                (rule "true_left" (formula "6"))
                                                (rule "applyEqRigid" (formula "6") (term "0,0,1,0") (ifseqformula "7"))
                                                (builtin "One Step Simplification" (formula "6"))
                                                (rule "true_left" (formula "6"))
                                                (rule "arrayLengthNotNegative" (formula "14") (term "0"))
                                                (rule "seqGetAlphaCast" (formula "7") (term "0"))
                                                (rule "castedGetAny" (formula "7") (term "0"))
                                                (builtin "One Step Simplification" (formula "7"))
                                                (rule "true_left" (formula "7"))
                                                (rule "arrayLengthNotNegative" (formula "9") (term "0"))
                                                (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                                                (rule "qeq_literals" (formula "9"))
                                                (rule "true_left" (formula "9"))
                                                (rule "arrayLengthIsAShort" (formula "9") (term "0"))
                                                (builtin "One Step Simplification" (formula "9"))
                                                (rule "true_left" (formula "9"))
                                                (rule "arrayLengthIsAShort" (formula "14") (term "0"))
                                                (builtin "One Step Simplification" (formula "14"))
                                                (rule "true_left" (formula "14"))
                                                (rule "ifthenelse_split" (formula "5") (term "0"))
                                                (branch "msg_2.length >= 0 TRUE"
                                                   (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "2"))
                                                   (rule "andLeft" (formula "6"))
                                                   (rule "inEqSimp_homoInEq1" (formula "6"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "6") (term "0"))
                                                   (rule "add_literals" (formula "6") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "6") (term "1,0"))
                                                   (rule "add_literals" (formula "6") (term "0"))
                                                   (rule "leq_literals" (formula "6"))
                                                   (rule "closeFalse" (formula "6"))
                                                )
                                                (branch "msg_2.length >= 0 FALSE"
                                                   (rule "inEqSimp_geqRight" (formula "27"))
                                                   (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                                   (rule "add_zero_right" (formula "1") (term "0,0"))
                                                   (rule "inEqSimp_homoInEq1" (formula "6"))
                                                   (rule "mul_literals" (formula "6") (term "1,0"))
                                                   (rule "add_zero_right" (formula "6") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                   (rule "mul_literals" (formula "1") (term "1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                                                   (rule "mul_literals" (formula "6") (term "1"))
                                                   (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "6"))
                                                   (rule "qeq_literals" (formula "5") (term "0"))
                                                   (builtin "One Step Simplification" (formula "5"))
                                                   (rule "closeFalse" (formula "5"))
                                                )
                                             )
                                          )
                                          (branch "Case 2"
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "24") (term "1") (ifseqformula "22"))
                                             (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "30")) (ifInst ""  (formula "28")) (ifInst ""  (formula "29")))
                                             (rule "translateJavaUnaryMinusInt" (formula "16") (term "0"))
                                             (rule "neg_literal" (formula "16") (term "0"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "eqSymm" (formula "28"))
                                             (rule "eqSymm" (formula "40"))
                                             (rule "eqSymm" (formula "39"))
                                             (rule "eqSymm" (formula "20"))
                                             (rule "eqSymm" (formula "26"))
                                             (rule "replace_known_left" (formula "27") (term "0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "27"))
                                             (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "33"))
                                             (builtin "One Step Simplification" (formula "21"))
                                             (rule "polySimp_addComm0" (formula "40") (term "0,1,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "0,0"))
                                             (rule "dismissNonSelectedField" (formula "29") (term "0"))
                                             (rule "inEqSimp_ltRight" (formula "38"))
                                             (rule "mul_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_leqRight" (formula "37"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                             (rule "dismissNonSelectedField" (formula "22") (term "0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "19"))
                                             (rule "polySimp_mulComm0" (formula "19") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "19") (term "0"))
                                             (rule "inEqSimp_ltRight" (formula "28"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                             (rule "polySimp_addComm0" (formula "1") (term "0"))
                                             (rule "inEqSimp_ltToLeq" (formula "4"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "4") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "19"))
                                             (rule "inEqSimp_commuteLeq" (formula "3"))
                                             (rule "applyEq" (formula "4") (term "0,0,1,0") (ifseqformula "5"))
                                             (rule "applyEq" (formula "21") (term "1,2,1,0,0,0,0") (ifseqformula "11"))
                                             (rule "add_literals" (formula "21") (term "2,1,0,0,0,0"))
                                             (rule "applyEq" (formula "30") (term "1,2,1,0,0") (ifseqformula "11"))
                                             (rule "add_literals" (formula "30") (term "2,1,0,0"))
                                             (rule "applyEq" (formula "39") (term "0,1") (ifseqformula "6"))
                                             (rule "applyEqRigid" (formula "39") (term "0,0") (ifseqformula "6"))
                                             (rule "applyEq" (formula "28") (term "1,2,1,0,0,0,1,0,0") (ifseqformula "11"))
                                             (rule "add_zero_right" (formula "28") (term "2,1,0,0,0,1,0,0"))
                                             (rule "applyEq" (formula "22") (term "1,2,1,0,0,0,1,0") (ifseqformula "11"))
                                             (rule "add_zero_right" (formula "22") (term "2,1,0,0,0,1,0"))
                                             (rule "applyEq" (formula "8") (term "1,2,1,0,0,0,1,0") (ifseqformula "11"))
                                             (rule "add_zero_right" (formula "8") (term "2,1,0,0,0,1,0"))
                                             (rule "applyEqRigid" (formula "29") (term "0,1") (ifseqformula "5"))
                                             (rule "applyEqRigid" (formula "28") (term "1,0") (ifseqformula "5"))
                                             (rule "applyEq" (formula "25") (term "1,2,1,0,0,0,0") (ifseqformula "11"))
                                             (rule "add_literals" (formula "25") (term "2,1,0,0,0,0"))
                                             (rule "applyEq" (formula "23") (term "1,2,1,0,0,0") (ifseqformula "11"))
                                             (rule "add_zero_right" (formula "23") (term "2,1,0,0,0"))
                                             (rule "applyEq" (formula "29") (term "1,2,1,0,0,0,0,0") (ifseqformula "11"))
                                             (rule "add_zero_right" (formula "29") (term "2,1,0,0,0,0,0"))
                                             (rule "applyEq" (formula "8") (term "1") (ifseqformula "6"))
                                             (rule "applyEq" (formula "10") (term "0") (ifseqformula "11"))
                                             (rule "qeq_literals" (formula "10"))
                                             (rule "true_left" (formula "10"))
                                             (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "20"))
                                             (rule "eqSymm" (formula "28"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                             (rule "polySimp_rightDist" (formula "2") (term "1"))
                                             (rule "mul_literals" (formula "2") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "19"))
                                             (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                                             (rule "polySimp_elimOne" (formula "19") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                             (rule "polySimp_elimOne" (formula "1") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                                             (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                             (rule "polySimp_elimOne" (formula "4") (term "0"))
                                             (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "9"))
                                             (rule "leq_literals" (formula "18") (term "0"))
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "true_left" (formula "18"))
                                             (rule "array2seqDef" (formula "5") (term "0") (inst "u=u"))
                                             (rule "lenOfSeqDefEQ" (formula "4") (term "0") (ifseqformula "5"))
                                             (rule "polySimp_elimSub" (formula "4") (term "1,0"))
                                             (rule "times_zero_2" (formula "4") (term "1,1,0"))
                                             (rule "add_zero_right" (formula "4") (term "1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0"))
                                             (rule "array2seqDef" (formula "25") (term "1") (inst "u=u"))
                                             (rule "eqSymm" (formula "25"))
                                             (rule "array2seqDef" (formula "18") (term "0") (inst "u=u"))
                                             (rule "equalityToSeqGetAndSeqLenRight" (formula "36") (inst "iv=iv"))
                                             (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0,1"))
                                             (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0,1"))
                                             (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0,1"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0,1"))
                                             (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,1"))
                                             (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,1"))
                                             (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,1"))
                                             (rule "mul_literals" (formula "36") (term "0,1,1,0,0,1"))
                                             (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0,1"))
                                             (rule "array2seqDef" (formula "8") (term "0") (inst "u=u"))
                                             (rule "array2seqDef" (formula "25") (term "0,1") (inst "u=u"))
                                             (rule "eqSymm" (formula "25"))
                                             (rule "eqSeqDef2" (formula "19") (inst "iv=iv") (ifseqformula "18"))
                                             (rule "andLeft" (formula "19"))
                                             (rule "eqSymm" (formula "20") (term "1,0"))
                                             (rule "eqSymm" (formula "19"))
                                             (rule "getOfSeqDef" (formula "20") (term "0,1,0"))
                                             (rule "castDel" (formula "20") (term "1,0,1,0"))
                                             (rule "castDel" (formula "20") (term "2,0,1,0"))
                                             (rule "add_zero_right" (formula "20") (term "0,2,1,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "20") (term "1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "20") (term "1,1,1,0,0,1,0"))
                                             (rule "add_zero_right" (formula "20") (term "1,1,0,0,1,0"))
                                             (rule "lenOfSeqDef" (formula "19") (term "0"))
                                             (rule "polySimp_elimSub" (formula "19") (term "1,0"))
                                             (rule "times_zero_2" (formula "19") (term "1,1,0"))
                                             (rule "add_zero_right" (formula "19") (term "1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0"))
                                             (rule "add_zero_right" (formula "19") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "20") (term "0,1,1,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,1,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "19") (term "0,0,0"))
                                             (rule "polySimp_elimOne" (formula "19") (term "0,0,0"))
                                             (rule "eqSeqDef2" (formula "6") (inst "iv=iv") (ifseqformula "8"))
                                             (rule "andLeft" (formula "6"))
                                             (rule "eqSymm" (formula "6"))
                                             (rule "eqSymm" (formula "7") (term "1,0"))
                                             (rule "lenOfSeqDef" (formula "6") (term "0"))
                                             (rule "polySimp_elimSub" (formula "6") (term "1,0"))
                                             (rule "times_zero_2" (formula "6") (term "1,1,0"))
                                             (rule "add_zero_right" (formula "6") (term "1,0"))
                                             (rule "getOfSeqDef" (formula "7") (term "0,1,0"))
                                             (rule "castDel" (formula "7") (term "1,0,1,0"))
                                             (rule "castDel" (formula "7") (term "2,0,1,0"))
                                             (rule "add_zero_right" (formula "7") (term "0,2,1,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "7") (term "1,1,0,0,1,0"))
                                             (rule "times_zero_2" (formula "7") (term "1,1,1,0,0,1,0"))
                                             (rule "add_zero_right" (formula "7") (term "1,1,0,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0"))
                                             (rule "add_zero_right" (formula "6") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0"))
                                             (rule "polySimp_elimOne" (formula "6") (term "0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "7") (term "0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0,1,0"))
                                             (rule "getOfSeqDefEQ" (formula "28") (term "0") (ifseqformula "5"))
                                             (rule "castDel" (formula "28") (term "1,0"))
                                             (rule "castDel" (formula "28") (term "2,0"))
                                             (rule "add_zero_right" (formula "28") (term "0,2,1,0"))
                                             (rule "polySimp_elimSub" (formula "28") (term "1,1,0,0"))
                                             (rule "times_zero_2" (formula "28") (term "1,1,1,0,0"))
                                             (rule "add_zero_right" (formula "28") (term "1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0"))
                                             (rule "polySimp_addComm1" (formula "28") (term "0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0"))
                                             (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "28"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "28") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "28") (term "0,0,0"))
                                             (rule "polySimp_elimOne" (formula "28") (term "0,0,0"))
                                             (rule "inEqSimp_contradInEq0" (formula "28") (term "0,0") (ifseqformula "1"))
                                             (rule "inEqSimp_homoInEq1" (formula "28") (term "0,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,0,0"))
                                             (rule "add_literals" (formula "28") (term "1,1,0,0,0,0"))
                                             (rule "times_zero_1" (formula "28") (term "1,0,0,0,0"))
                                             (rule "add_literals" (formula "28") (term "0,0,0,0"))
                                             (rule "leq_literals" (formula "28") (term "0,0,0"))
                                             (builtin "One Step Simplification" (formula "28"))
                                             (rule "eqSymm" (formula "28"))
                                             (rule "eqSeqDef2" (formula "8") (inst "iv=iv") (ifseqformula "9"))
                                             (rule "andLeft" (formula "8"))
                                             (rule "eqSymm" (formula "8"))
                                             (rule "eqSymm" (formula "9") (term "1,0"))
                                             (rule "lenOfSeqDef" (formula "8") (term "0"))
                                             (rule "polySimp_elimSub" (formula "8") (term "1,0"))
                                             (rule "times_zero_2" (formula "8") (term "1,1,0"))
                                             (rule "add_zero_right" (formula "8") (term "1,0"))
                                             (rule "getOfSeqDef" (formula "9") (term "0,1,0"))
                                             (rule "castDel" (formula "9") (term "1,0,1,0"))
                                             (rule "castDel" (formula "9") (term "2,0,1,0"))
                                             (rule "add_zero_right" (formula "9") (term "0,2,1,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "9") (term "1,1,0,0,1,0"))
                                             (rule "times_zero_2" (formula "9") (term "1,1,1,0,0,1,0"))
                                             (rule "add_zero_right" (formula "9") (term "1,1,0,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0"))
                                             (rule "add_zero_right" (formula "8") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "0,0,0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "9") (term "0,1,1,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,1,0"))
                                             (rule "eqSeqDef2" (formula "5") (inst "iv=iv") (ifseqformula "5"))
                                             (builtin "One Step Simplification" (formula "5"))
                                             (rule "true_left" (formula "5"))
                                             (rule "eqSeqDef2" (formula "19") (inst "iv=iv") (ifseqformula "19"))
                                             (builtin "One Step Simplification" (formula "19"))
                                             (rule "true_left" (formula "19"))
                                             (rule "eqSeqDef" (formula "26") (inst "iv=iv"))
                                             (rule "andLeft" (formula "26"))
                                             (rule "getOfSeqDef" (formula "27") (term "1,1,0"))
                                             (rule "castDel" (formula "27") (term "1,1,1,0"))
                                             (rule "castDel" (formula "27") (term "2,1,1,0"))
                                             (rule "add_zero_right" (formula "27") (term "0,2,1,1,1,0"))
                                             (rule "polySimp_elimSub" (formula "27") (term "1,1,0,1,1,0"))
                                             (rule "times_zero_2" (formula "27") (term "1,1,1,0,1,1,0"))
                                             (rule "add_zero_right" (formula "27") (term "1,1,0,1,1,0"))
                                             (rule "lenOfSeqDef" (formula "26") (term "1"))
                                             (rule "polySimp_elimSub" (formula "26") (term "1,1"))
                                             (rule "times_zero_2" (formula "26") (term "1,1,1"))
                                             (rule "add_zero_right" (formula "26") (term "1,1"))
                                             (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
                                             (rule "polySimp_addComm1" (formula "27") (term "0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,1,1,0"))
                                             (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,1,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "26") (term "0,1"))
                                             (rule "add_zero_right" (formula "26") (term "0,0,1"))
                                             (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1"))
                                             (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,1,1,0"))
                                             (rule "apply_eq_monomials" (formula "27") (term "1,0,1,0,0") (ifseqformula "26"))
                                             (rule "polySimp_rightDist" (formula "27") (term "0,1,0,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,0,1,0,0"))
                                             (rule "polySimp_pullOutFactor0b" (formula "27") (term "1,0,1,0,0"))
                                             (rule "add_literals" (formula "27") (term "1,1,1,0,1,0,0"))
                                             (rule "times_zero_1" (formula "27") (term "1,1,0,1,0,0"))
                                             (rule "add_zero_right" (formula "27") (term "1,0,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "27") (term "1,0,1,0,0"))
                                             (rule "polySimp_addComm1" (formula "27") (term "0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,1,1,0"))
                                             (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,1,1,0"))
                                             (rule "polySimp_rightDist" (formula "27") (term "1,1,0,1,1,0"))
                                             (rule "mul_literals" (formula "27") (term "0,1,1,0,1,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,1,1,0"))
                                             (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,1,1,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "26") (term "0,0,1"))
                                             (rule "polySimp_elimOne" (formula "26") (term "0,0,1"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,0,1,0,0,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "0,0,0,1,0,0,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "27") (term "0,0,0,1,0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
                                             (rule "pullOutSelect" (formula "29") (term "0") (inst "selectSK=java_lang_Object_created__90"))
                                             (rule "simplifySelectOfMemset" (formula "1"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "simplifySelectOfStore" (formula "1"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "simplifySelectOfStore" (formula "1"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "simplifySelectOfStore" (formula "1"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "simplifySelectOfCreate" (formula "1"))
                                             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "36")))
                                             (rule "castDel" (formula "1") (term "1,0"))
                                             (rule "apply_eq_boolean_rigid" (formula "1") (term "1") (ifseqformula "30"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "orRight" (formula "28"))
                                             (rule "eqSeqDef2" (formula "9") (inst "iv=iv") (ifseqformula "9"))
                                             (builtin "One Step Simplification" (formula "9"))
                                             (rule "true_left" (formula "9"))
                                             (rule "pullOutSelect" (formula "20") (term "0,0") (inst "selectSK=java_lang_Object_created__91"))
                                             (rule "simplifySelectOfMemset" (formula "20"))
                                             (builtin "One Step Simplification" (formula "20"))
                                             (rule "simplifySelectOfStore" (formula "20"))
                                             (builtin "One Step Simplification" (formula "20"))
                                             (rule "simplifySelectOfStore" (formula "20"))
                                             (builtin "One Step Simplification" (formula "20"))
                                             (rule "simplifySelectOfStore" (formula "20"))
                                             (builtin "One Step Simplification" (formula "20"))
                                             (rule "simplifySelectOfCreate" (formula "20"))
                                             (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "37")))
                                             (rule "castDel" (formula "20") (term "1,0"))
                                             (rule "apply_eq_boolean" (formula "20") (term "2,0") (ifseqformula "34"))
                                             (rule "pullOutSelect" (formula "5") (term "0,1,0") (inst "selectSK=arr_357"))
                                             (rule "applyEq" (formula "7") (term "1,1,0,1,0") (ifseqformula "5"))
                                             (rule "applyEq" (formula "27") (term "0,1,0,0,0") (ifseqformula "5"))
                                             (rule "applyEq" (formula "28") (term "0,1,0,0,0,1,0") (ifseqformula "5"))
                                             (rule "applyEq" (formula "28") (term "1,2,0,0,0,1,0") (ifseqformula "5"))
                                             (rule "applyEq" (formula "9") (term "0,1,1,1,0,0,1,0") (ifseqformula "5"))
                                             (rule "applyEq" (formula "8") (term "0,1,0") (ifseqformula "5"))
                                             (rule "applyEq" (formula "9") (term "1,1,0,1,0") (ifseqformula "5"))
                                             (rule "applyEq" (formula "7") (term "0,1,1,1,0,0,1,0") (ifseqformula "5"))
                                             (rule "applyEq" (formula "27") (term "1,2,0,0,0") (ifseqformula "5"))
                                             (rule "applyEq" (formula "6") (term "0,0,0,0") (ifseqformula "5"))
                                             (rule "applyEq" (formula "8") (term "0,0,0,0") (ifseqformula "5"))
                                             (rule "simplifySelectOfAnon" (formula "5"))
                                             (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "39")))
                                             (rule "dismissNonSelectedField" (formula "5") (term "2,0"))
                                             (rule "dismissNonSelectedField" (formula "5") (term "0,0,0,0"))
                                             (rule "ifthenelse_negated" (formula "5") (term "0"))
                                             (rule "applyEq" (formula "8") (term "0") (ifseqformula "6"))
                                             (rule "eqSymm" (formula "8"))
                                             (rule "applyEq" (formula "9") (term "1,1,1,0,0") (ifseqformula "8"))
                                             (rule "pullOutSelect" (formula "5") (term "1,0") (inst "selectSK=arr_358"))
                                             (rule "simplifySelectOfMemset" (formula "5"))
                                             (builtin "One Step Simplification" (formula "5"))
                                             (rule "elementOfArrayRangeConcrete" (formula "5") (term "0,0"))
                                             (rule "eqSymm" (formula "5") (term "0,0,0,0"))
                                             (rule "dismissNonSelectedField" (formula "5") (term "2,0"))
                                             (rule "sortsDisjointModuloNull" (formula "5") (term "0,0,0,0"))
                                             (rule "replace_known_right" (formula "5") (term "0,0,0,0,0") (ifseqformula "39"))
                                             (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "40")))
                                             (rule "simplifySelectOfStore" (formula "5"))
                                             (builtin "One Step Simplification" (formula "5"))
                                             (rule "simplifySelectOfStore" (formula "5"))
                                             (builtin "One Step Simplification" (formula "5"))
                                             (rule "simplifySelectOfCreate" (formula "5"))
                                             (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "39")))
                                             (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                             (rule "hideAuxiliaryEq" (formula "5"))
                                             (rule "pullOutSelect" (formula "5") (term "0,0,0") (inst "selectSK=java_lang_Object_created__92"))
                                             (rule "simplifySelectOfMemset" (formula "5"))
                                             (builtin "One Step Simplification" (formula "5"))
                                             (rule "simplifySelectOfStore" (formula "5"))
                                             (builtin "One Step Simplification" (formula "5"))
                                             (rule "simplifySelectOfStore" (formula "5"))
                                             (builtin "One Step Simplification" (formula "5"))
                                             (rule "simplifySelectOfStore" (formula "5"))
                                             (builtin "One Step Simplification" (formula "5"))
                                             (rule "simplifySelectOfCreate" (formula "5"))
                                             (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "39")))
                                             (rule "castDel" (formula "5") (term "1,0"))
                                             (rule "sortsDisjointModuloNull" (formula "5") (term "0,0"))
                                             (rule "replace_known_right" (formula "5") (term "1,0,0") (ifseqformula "40"))
                                             (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "39")))
                                             (rule "applyEqReverse" (formula "6") (term "0,0,0") (ifseqformula "5"))
                                             (rule "hideAuxiliaryEq" (formula "5"))
                                             (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "14"))
                                             (builtin "One Step Simplification" (formula "5"))
                                             (rule "applyEqReverse" (formula "6") (term "0,1,0") (ifseqformula "5"))
                                             (rule "applyEqReverse" (formula "6") (term "0,0,0,0") (ifseqformula "5"))
                                             (rule "applyEqReverse" (formula "28") (term "0,1,0,0,0,1,0") (ifseqformula "5"))
                                             (rule "applyEqReverse" (formula "9") (term "0,1,1,1,0,0,1,0") (ifseqformula "5"))
                                             (rule "applyEqReverse" (formula "7") (term "0,1,1,1,0,0,1,0") (ifseqformula "5"))
                                             (rule "applyEqReverse" (formula "28") (term "1,2,0,0,0,1,0") (ifseqformula "5"))
                                             (rule "applyEqReverse" (formula "27") (term "0,1,0,0,0") (ifseqformula "5"))
                                             (rule "applyEqReverse" (formula "7") (term "1,1,0,1,0") (ifseqformula "5"))
                                             (rule "applyEqReverse" (formula "9") (term "1,1,0,1,0") (ifseqformula "5"))
                                             (rule "applyEqReverse" (formula "27") (term "1,2,0,0,0") (ifseqformula "5"))
                                             (rule "hideAuxiliaryEq" (formula "5"))
                                             (rule "nnf_imp2or" (formula "40") (term "0,1"))
                                             (rule "nnf_imp2or" (formula "19") (term "0"))
                                             (rule "hideAuxiliaryEqConcrete2" (formula "31"))
                                             (rule "nnf_imp2or" (formula "27") (term "0"))
                                             (rule "nnf_imp2or" (formula "6") (term "0"))
                                             (rule "nnf_imp2or" (formula "8") (term "0"))
                                             (rule "nnf_notAnd" (formula "19") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                                             (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "27") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "27") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                                             (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "6") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "6") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
                                             (rule "mul_literals" (formula "6") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "8") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                                             (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "39") (term "0,0,1"))
                                             (rule "inEqSimp_notGeq" (formula "39") (term "0,0,0,1"))
                                             (rule "mul_literals" (formula "39") (term "1,0,0,0,0,0,1"))
                                             (rule "add_zero_right" (formula "39") (term "0,0,0,0,0,1"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "0,0,0,1"))
                                             (rule "mul_literals" (formula "39") (term "1,0,0,0,1"))
                                             (rule "inEqSimp_notLeq" (formula "39") (term "1,0,0,1"))
                                             (rule "polySimp_rightDist" (formula "39") (term "1,0,0,1,0,0,1"))
                                             (rule "mul_literals" (formula "39") (term "0,1,0,0,1,0,0,1"))
                                             (rule "polySimp_addAssoc" (formula "39") (term "0,0,1,0,0,1"))
                                             (rule "add_literals" (formula "39") (term "0,0,0,1,0,0,1"))
                                             (rule "add_zero_left" (formula "39") (term "0,0,1,0,0,1"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "1,0,0,1"))
                                             (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0,1"))
                                             (rule "polySimp_elimOne" (formula "39") (term "1,1,0,0,1"))
                                             (rule "arrayLengthIsAShort" (formula "16") (term "1,1,0"))
                                             (builtin "One Step Simplification" (formula "16"))
                                             (rule "true_left" (formula "16"))
                                             (rule "arrayLengthNotNegative" (formula "10") (term "0"))
                                             (rule "applyEq" (formula "10") (term "0") (ifseqformula "11"))
                                             (rule "qeq_literals" (formula "10"))
                                             (rule "true_left" (formula "10"))
                                             (rule "arrayLengthNotNegative" (formula "16") (term "1,1,0"))
                                             (rule "arrayLengthIsAShort" (formula "10") (term "0"))
                                             (builtin "One Step Simplification" (formula "10"))
                                             (rule "true_left" (formula "10"))
                                             (rule "lenNonNegative" (formula "38") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "1"))
                                             (rule "ifthenelse_split" (formula "5") (term "0"))
                                             (branch "msg_2.length >= 0 TRUE"
                                                (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "6"))
                                                (rule "andLeft" (formula "2"))
                                                (rule "inEqSimp_homoInEq1" (formula "2"))
                                                (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                (rule "add_literals" (formula "2") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "2") (term "1,0"))
                                                (rule "add_zero_right" (formula "2") (term "0"))
                                                (rule "leq_literals" (formula "2"))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                             (branch "msg_2.length >= 0 FALSE"
                                                (rule "inEqSimp_geqRight" (formula "29"))
                                                (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "1") (term "0,0"))
                                                (rule "inEqSimp_homoInEq1" (formula "6"))
                                                (rule "mul_literals" (formula "6") (term "1,0"))
                                                (rule "add_zero_right" (formula "6") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                (rule "mul_literals" (formula "1") (term "1"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                                                (rule "mul_literals" (formula "6") (term "1"))
                                                (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "6"))
                                                (rule "qeq_literals" (formula "5") (term "0"))
                                                (builtin "One Step Simplification" (formula "5"))
                                                (rule "closeFalse" (formula "5"))
                                             )
                                          )
                                       )
                                    )
                                 )
                                 (branch
                                    (rule "applyEqReverse" (formula "22") (term "0") (ifseqformula "2") (userinteraction))
                                    (rule "seqSelfDefinition" (formula "22") (term "1") (inst "s=s") (inst "u=u") (userinteraction))
                                    (rule "applyEqReverse" (formula "23") (term "1") (ifseqformula "2") (userinteraction))
                                    (rule "array2seq2dDef" (formula "23") (term "0,1") (inst "u=u") (userinteraction))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "1") (ifseqformula "19"))
                                    (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "26")) (ifInst ""  (formula "24")) (ifInst ""  (formula "25")))
                                    (rule "translateJavaUnaryMinusInt" (formula "14") (term "0"))
                                    (rule "neg_literal" (formula "14") (term "0"))
                                    (rule "eqSymm" (formula "23"))
                                    (rule "eqSymm" (formula "1") (term "0"))
                                    (rule "eqSymm" (formula "22"))
                                    (rule "eqSymm" (formula "34"))
                                    (rule "eqSymm" (formula "16"))
                                    (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "28"))
                                    (builtin "One Step Simplification" (formula "17"))
                                    (rule "polySimp_addComm0" (formula "35") (term "0,1,1"))
                                    (rule "polySimp_addComm0" (formula "16") (term "0,0"))
                                    (rule "dismissNonSelectedField" (formula "24") (term "0"))
                                    (rule "getOfSeqDef" (formula "23") (term "0"))
                                    (rule "castDel" (formula "23") (term "1,0"))
                                    (rule "add_zero_right" (formula "23") (term "0,2,1,1,0"))
                                    (rule "polySimp_elimSub" (formula "23") (term "1,1,0,0"))
                                    (rule "times_zero_2" (formula "23") (term "1,1,1,0,0"))
                                    (rule "add_zero_right" (formula "23") (term "1,1,0,0"))
                                    (rule "replace_known_left" (formula "23") (term "1,0,0") (ifseqformula "15"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "inEqSimp_leqRight" (formula "32"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "inEqSimp_ltRight" (formula "33"))
                                    (rule "times_zero_1" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "dismissNonSelectedField" (formula "18") (term "0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "16"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "16") (term "0"))
                                    (rule "inEqSimp_commuteLeq" (formula "15"))
                                    (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0"))
                                    (rule "replace_known_left" (formula "24") (term "0,0") (ifseqformula "5"))
                                    (builtin "One Step Simplification" (formula "24"))
                                    (rule "eqSymm" (formula "24"))
                                    (rule "applyEq" (formula "24") (term "1,2,1,0,0,0,1,0") (ifseqformula "7"))
                                    (rule "add_zero_right" (formula "24") (term "2,1,0,0,0,1,0"))
                                    (rule "applyEq" (formula "18") (term "1,2,1,0,0,0") (ifseqformula "7"))
                                    (rule "add_zero_right" (formula "18") (term "2,1,0,0,0"))
                                    (rule "applyEq" (formula "25") (term "1,2,1,0,0") (ifseqformula "7"))
                                    (rule "add_zero_right" (formula "25") (term "2,1,0,0"))
                                    (rule "applyEq" (formula "23") (term "1,2,1,0,0,0,1,0,0") (ifseqformula "7"))
                                    (rule "add_zero_right" (formula "23") (term "2,1,0,0,0,1,0,0"))
                                    (rule "applyEq" (formula "17") (term "1,2,1,0,0,0,1,0") (ifseqformula "7"))
                                    (rule "add_zero_right" (formula "17") (term "2,1,0,0,0,1,0"))
                                    (rule "eqSymm" (formula "17"))
                                    (rule "applyEq" (formula "4") (term "1,2,1,0,0,0,1,0") (ifseqformula "7"))
                                    (rule "add_zero_right" (formula "4") (term "2,1,0,0,0,1,0"))
                                    (rule "applyEq" (formula "6") (term "0") (ifseqformula "7"))
                                    (rule "qeq_literals" (formula "6"))
                                    (rule "true_left" (formula "6"))
                                    (rule "applyEq" (formula "19") (term "1,2,1,0,0,0,0") (ifseqformula "6"))
                                    (rule "add_zero_right" (formula "19") (term "2,1,0,0,0,0"))
                                    (rule "applyEq" (formula "16") (term "1,2,1,0,0,0,0") (ifseqformula "6"))
                                    (rule "add_literals" (formula "16") (term "2,1,0,0,0,0"))
                                    (rule "eqSymm" (formula "16"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "15"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                                    (rule "polySimp_elimOne" (formula "15") (term "0"))
                                    (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "5"))
                                    (rule "leq_literals" (formula "14") (term "0"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "true_left" (formula "14"))
                                    (rule "array2seqDef" (formula "31") (term "1,0") (inst "u=u"))
                                    (rule "seqDefOfSeq" (formula "2") (term "0,0") (inst "v=v"))
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "true_left" (formula "2"))
                                    (rule "array2seqDef" (formula "19") (term "1") (inst "u=u"))
                                    (rule "eqSymm" (formula "19"))
                                    (rule "array2seqDef" (formula "20") (term "1") (inst "u=u"))
                                    (rule "eqSymm" (formula "20"))
                                    (rule "array2seqDef" (formula "3") (term "0") (inst "u=u"))
                                    (rule "array2seqDef" (formula "13") (term "1") (inst "u=u"))
                                    (rule "eqSymm" (formula "13"))
                                    (rule "equalityToSeqGetAndSeqLenRight" (formula "30") (inst "iv=iv"))
                                    (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0,1"))
                                    (rule "polySimp_addComm1" (formula "30") (term "0,1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "30") (term "1,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "30") (term "0,1,0,0,1"))
                                    (rule "polySimp_elimOne" (formula "30") (term "0,1,0,0,1"))
                                    (rule "array2seqDef" (formula "19") (term "0,1") (inst "u=u"))
                                    (rule "eqSymm" (formula "19"))
                                    (rule "equalityToSeqGetAndSeqLenRight" (formula "20") (inst "iv=iv"))
                                    (rule "lenOfSeqDef" (formula "20") (term "1,1,0,0,1"))
                                    (rule "polySimp_elimSub" (formula "20") (term "1,1,1,0,0,1"))
                                    (rule "times_zero_2" (formula "20") (term "1,1,1,1,0,0,1"))
                                    (rule "add_zero_right" (formula "20") (term "1,1,1,0,0,1"))
                                    (rule "getOfSeqDef" (formula "20") (term "0,1,0,1"))
                                    (rule "castDel" (formula "20") (term "1,0,1,0,1"))
                                    (rule "castDel" (formula "20") (term "2,0,1,0,1"))
                                    (rule "add_zero_right" (formula "20") (term "0,2,1,0,1,0,1"))
                                    (rule "polySimp_elimSub" (formula "20") (term "1,1,0,0,1,0,1"))
                                    (rule "times_zero_2" (formula "20") (term "1,1,1,0,0,1,0,1"))
                                    (rule "add_zero_right" (formula "20") (term "1,1,0,0,1,0,1"))
                                    (rule "lenOfSeqDef" (formula "20") (term "0,0"))
                                    (rule "polySimp_elimSub" (formula "20") (term "1,0,0"))
                                    (rule "mul_literals" (formula "20") (term "1,1,0,0"))
                                    (rule "add_zero_right" (formula "20") (term "1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "20") (term "0,1,1,0,0,1"))
                                    (rule "add_zero_right" (formula "20") (term "0,0,1,1,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,1,0,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,0,1"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,1,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,0"))
                                    (rule "add_zero_right" (formula "20") (term "0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1,0,1"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,1,0,1"))
                                    (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,1,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,1,0,1"))
                                    (rule "mul_literals" (formula "20") (term "0,1,1,0,0,1,0,1"))
                                    (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,1,0,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "20") (term "0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "20") (term "0,0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,0,1,0,0,1,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "20") (term "0,0,0,1,0,0,1,0,0,1"))
                                    (rule "polySimp_elimOne" (formula "20") (term "0,0,0,1,0,0,1,0,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,1"))
                                    (rule "mul_literals" (formula "20") (term "0,1,1,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,1"))
                                    (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,1"))
                                    (rule "eqSeqDef2" (formula "3") (inst "iv=iv") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "true_left" (formula "3"))
                                    (rule "eqSeqDef" (formula "18") (inst "iv=iv"))
                                    (rule "andLeft" (formula "18"))
                                    (rule "getOfSeqDef" (formula "19") (term "1,1,0"))
                                    (rule "castDel" (formula "19") (term "2,1,1,0"))
                                    (rule "castDel" (formula "19") (term "1,1,1,0"))
                                    (rule "add_zero_right" (formula "19") (term "0,2,1,1,1,0"))
                                    (rule "polySimp_elimSub" (formula "19") (term "1,1,0,1,1,0"))
                                    (rule "mul_literals" (formula "19") (term "1,1,1,0,1,1,0"))
                                    (rule "add_zero_right" (formula "19") (term "1,1,0,1,1,0"))
                                    (rule "lenOfSeqDef" (formula "18") (term "1"))
                                    (rule "polySimp_elimSub" (formula "18") (term "1,1"))
                                    (rule "times_zero_2" (formula "18") (term "1,1,1"))
                                    (rule "add_zero_right" (formula "18") (term "1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "19") (term "0,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,1,1,0"))
                                    (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,1,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "18") (term "0,1"))
                                    (rule "add_zero_right" (formula "18") (term "0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,1,1,0"))
                                    (rule "apply_eq_monomials" (formula "19") (term "1,0,1,0,0") (ifseqformula "18"))
                                    (rule "polySimp_rightDist" (formula "19") (term "0,1,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "19") (term "1,0,1,0,1,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "19") (term "1,0,1,0,0"))
                                    (rule "add_literals" (formula "19") (term "1,1,1,0,1,0,0"))
                                    (rule "times_zero_1" (formula "19") (term "1,1,0,1,0,0"))
                                    (rule "add_zero_right" (formula "19") (term "1,0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "19") (term "1,0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "19") (term "0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,1,1,0"))
                                    (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,1,1,0"))
                                    (rule "polySimp_rightDist" (formula "19") (term "1,1,0,1,1,0"))
                                    (rule "mul_literals" (formula "19") (term "0,1,1,0,1,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,1,1,0"))
                                    (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,1,1,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "18") (term "0,0,1"))
                                    (rule "polySimp_elimOne" (formula "18") (term "0,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,1,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "19") (term "0,0,1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "19") (term "0,0,1,1,1,0,0"))
                                    (rule "array2seqDef" (formula "20") (term "0,1,0") (inst "u=u"))
                                    (rule "eqSymm" (formula "20") (term "0"))
                                    (rule "lenOfSeqDef" (formula "20") (term "0,0"))
                                    (rule "polySimp_elimSub" (formula "20") (term "1,0,0"))
                                    (rule "mul_literals" (formula "20") (term "1,1,0,0"))
                                    (rule "add_zero_right" (formula "20") (term "1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,0"))
                                    (rule "add_zero_right" (formula "20") (term "0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "20") (term "0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "20") (term "0,0,0,0"))
                                    (rule "array2seqDef" (formula "20") (term "0,1,1,0,1") (inst "u=u"))
                                    (rule "eqSymm" (formula "20") (term "1,0,1"))
                                    (rule "getOfSeqDef" (formula "20") (term "0,1,0,1"))
                                    (rule "castDel" (formula "20") (term "1,0,1,0,1"))
                                    (rule "castDel" (formula "20") (term "2,0,1,0,1"))
                                    (rule "add_zero_right" (formula "20") (term "0,2,1,0,1,0,1"))
                                    (rule "polySimp_elimSub" (formula "20") (term "1,1,0,0,1,0,1"))
                                    (rule "mul_literals" (formula "20") (term "1,1,1,0,0,1,0,1"))
                                    (rule "add_zero_right" (formula "20") (term "1,1,0,0,1,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,0,1"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,1,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1,0,1"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,1,0,1"))
                                    (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,1,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,1,0,1"))
                                    (rule "mul_literals" (formula "20") (term "0,1,1,0,0,1,0,1"))
                                    (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,1,0,1"))
                                    (rule "eqSeqDef2" (formula "12") (inst "iv=iv") (ifseqformula "12"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "true_left" (formula "12"))
                                    (rule "pullOutSelect" (formula "12") (term "0,0") (inst "selectSK=java_lang_Object_created__38"))
                                    (rule "simplifySelectOfMemset" (formula "12"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "simplifySelectOfStore" (formula "12"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "simplifySelectOfStore" (formula "12"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "simplifySelectOfStore" (formula "12"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "simplifySelectOfCreate" (formula "12"))
                                    (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "27")))
                                    (rule "castDel" (formula "12") (term "1,0"))
                                    (rule "apply_eq_boolean" (formula "12") (term "2,0") (ifseqformula "24"))
                                    (rule "array2seqDef" (formula "18") (term "1,0,0") (inst "u=u"))
                                    (rule "pullOutSelect" (formula "21") (term "0") (inst "selectSK=java_lang_Object_created__39"))
                                    (rule "simplifySelectOfMemset" (formula "1"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfStore" (formula "1"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfStore" (formula "1"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfStore" (formula "1"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfCreate" (formula "1"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "28")))
                                    (rule "castDel" (formula "1") (term "1,0"))
                                    (rule "apply_eq_boolean" (formula "1") (term "1") (ifseqformula "22"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "orRight" (formula "20"))
                                    (rule "array2seqDef" (formula "19") (term "1,0,0,1,0") (inst "u=u"))
                                    (rule "pullOutSelect" (formula "22") (term "0,0,0,1,1,1,0,0,1") (inst "selectSK=arr_58"))
                                    (rule "applyEq" (formula "23") (term "0,1,1,1,1,0,0,1") (ifseqformula "1"))
                                    (rule "applyEq" (formula "23") (term "1,1,1,1,0,1") (ifseqformula "1"))
                                    (rule "applyEq" (formula "23") (term "0,0,0,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "23") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "1"))
                                    (rule "applyEq" (formula "23") (term "0,1,1,0") (ifseqformula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "31")))
                                    (rule "ifthenelse_negated" (formula "1") (term "0"))
                                    (rule "dismissNonSelectedField" (formula "1") (term "0,0,0,0"))
                                    (rule "pullOutSelect" (formula "20") (term "1,2,0,0,0,1,0") (inst "selectSK=arr_59"))
                                    (rule "applyEq" (formula "19") (term "0,1,0,0,0") (ifseqformula "20"))
                                    (rule "applyEq" (formula "24") (term "0,1,0,0") (ifseqformula "20"))
                                    (rule "applyEq" (formula "24") (term "0,0,0,0,0") (ifseqformula "20"))
                                    (rule "applyEq" (formula "21") (term "0,1,0,0,0,1,0") (ifseqformula "20"))
                                    (rule "applyEq" (formula "24") (term "1,1,0,1,0,1") (ifseqformula "20"))
                                    (rule "applyEq" (formula "24") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "20"))
                                    (rule "applyEq" (formula "19") (term "1,2,0,0,0") (ifseqformula "20"))
                                    (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "20"))
                                    (rule "simplifySelectOfAnon" (formula "20"))
                                    (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "32")))
                                    (rule "dismissNonSelectedField" (formula "20") (term "2,0"))
                                    (rule "dismissNonSelectedField" (formula "20") (term "0,0,0,0"))
                                    (rule "ifthenelse_negated" (formula "20") (term "0"))
                                    (rule "pullOutSelect" (formula "1") (term "0,0,0,0") (inst "selectSK=java_lang_Object_created__40"))
                                    (rule "applyEq" (formula "21") (term "0,0,0") (ifseqformula "1"))
                                    (rule "simplifySelectOfMemset" (formula "1"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfStore" (formula "1"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfStore" (formula "1"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfStore" (formula "1"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfCreate" (formula "1"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "32")))
                                    (rule "castDel" (formula "1") (term "1,0"))
                                    (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
                                    (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "32"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "33")))
                                    (rule "applyEqReverse" (formula "21") (term "0,0,0") (ifseqformula "1"))
                                    (rule "applyEqReverse" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "8"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "applyEqReverse" (formula "24") (term "0,1,1,1,1,0,0,1") (ifseqformula "1"))
                                    (rule "applyEqReverse" (formula "24") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "1"))
                                    (rule "applyEqReverse" (formula "24") (term "1,1,1,1,0,1") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "24"))
                                    (rule "applyEqReverse" (formula "24") (term "0,0,0,1") (ifseqformula "1"))
                                    (rule "applyEqReverse" (formula "24") (term "0,1,1") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "24"))
                                    (rule "closeTrue" (formula "24"))
                                 )
                              )
                           )
                        )
                        (branch "Case 2"
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "1") (ifseqformula "16"))
                           (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "22")) (ifInst ""  (formula "20")) (ifInst ""  (formula "21")))
                           (rule "translateJavaUnaryMinusInt" (formula "11") (term "0"))
                           (rule "translateJavaAddInt" (formula "13") (term "0,1"))
                           (rule "neg_literal" (formula "11") (term "0"))
                           (rule "eqSymm" (formula "19"))
                           (rule "eqSymm" (formula "13"))
                           (rule "replace_known_right" (formula "30") (term "0,1") (ifseqformula "22"))
                           (builtin "One Step Simplification" (formula "30"))
                           (rule "notRight" (formula "30"))
                           (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "25"))
                           (builtin "One Step Simplification" (formula "15"))
                           (rule "polySimp_addComm0" (formula "14") (term "0,0"))
                           (rule "dismissNonSelectedField" (formula "21") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "29"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_ltRight" (formula "30"))
                           (rule "times_zero_1" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "dismissNonSelectedField" (formula "16") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "14"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "14") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "13"))
                           (rule "applyEq" (formula "16") (term "1,2,1,0,0,0") (ifseqformula "5"))
                           (rule "add_zero_right" (formula "16") (term "2,1,0,0,0"))
                           (rule "applyEq" (formula "15") (term "1,2,1,0,0,0,1,0") (ifseqformula "5"))
                           (rule "add_zero_right" (formula "15") (term "2,1,0,0,0,1,0"))
                           (rule "eqSymm" (formula "15"))
                           (rule "applyEq" (formula "18") (term "1,2,1,0,0,0,0") (ifseqformula "5"))
                           (rule "add_zero_right" (formula "18") (term "2,1,0,0,0,0"))
                           (rule "applyEq" (formula "4") (term "0") (ifseqformula "5"))
                           (rule "qeq_literals" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "applyEq" (formula "21") (term "1,2,1,0,0") (ifseqformula "4"))
                           (rule "add_zero_right" (formula "21") (term "2,1,0,0"))
                           (rule "applyEq" (formula "20") (term "1,2,1,0,0,0,1,0,0") (ifseqformula "4"))
                           (rule "add_literals" (formula "20") (term "2,1,0,0,0,1,0,0"))
                           (rule "applyEq" (formula "14") (term "1,2,1,0,0,0,0") (ifseqformula "4"))
                           (rule "add_zero_right" (formula "14") (term "2,1,0,0,0,0"))
                           (rule "eqSymm" (formula "14"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1"))
                           (rule "polySimp_rightDist" (formula "1") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                           (rule "mul_literals" (formula "1") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "13"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                           (rule "polySimp_elimOne" (formula "13") (term "0"))
                           (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "3"))
                           (rule "leq_literals" (formula "12") (term "0"))
                           (builtin "One Step Simplification" (formula "12"))
                           (rule "true_left" (formula "12"))
                           (rule "array2seqDef" (formula "18") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "18"))
                           (rule "array2seqDef" (formula "12") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "12"))
                           (rule "array2seqDef" (formula "18") (term "0,1") (inst "u=u"))
                           (rule "eqSymm" (formula "18"))
                           (rule "array2seqDef" (formula "18") (term "1,0") (inst "u=u"))
                           (rule "eqSeqDef2" (formula "12") (inst "iv=iv") (ifseqformula "12"))
                           (builtin "One Step Simplification" (formula "12"))
                           (rule "true_left" (formula "12"))
                           (rule "eqSeqDef" (formula "17") (inst "iv=iv"))
                           (rule "andLeft" (formula "17"))
                           (rule "getOfSeqDef" (formula "18") (term "1,1,0"))
                           (rule "castDel" (formula "18") (term "1,1,1,0"))
                           (rule "castDel" (formula "18") (term "2,1,1,0"))
                           (rule "add_zero_right" (formula "18") (term "0,2,1,1,1,0"))
                           (rule "polySimp_elimSub" (formula "18") (term "1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "18") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "18") (term "1,1,0,1,1,0"))
                           (rule "lenOfSeqDef" (formula "17") (term "1"))
                           (rule "polySimp_elimSub" (formula "17") (term "1,1"))
                           (rule "times_zero_2" (formula "17") (term "1,1,1"))
                           (rule "add_zero_right" (formula "17") (term "1,1"))
                           (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "18") (term "0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "17") (term "0,1"))
                           (rule "add_zero_right" (formula "17") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,1,1,0"))
                           (rule "apply_eq_monomials" (formula "18") (term "1,0,1,0,0") (ifseqformula "17"))
                           (rule "polySimp_rightDist" (formula "18") (term "0,1,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,0,1,0,1,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "18") (term "1,0,1,0,0"))
                           (rule "add_literals" (formula "18") (term "1,1,1,0,1,0,0"))
                           (rule "times_zero_1" (formula "18") (term "1,1,0,1,0,0"))
                           (rule "add_zero_right" (formula "18") (term "1,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "18") (term "0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "18") (term "1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "18") (term "0,1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "17") (term "0,0,1"))
                           (rule "polySimp_elimOne" (formula "17") (term "0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,1,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "0,0,1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "18") (term "0,0,1,1,1,0,0"))
                           (rule "pullOutSelect" (formula "12") (term "0,0") (inst "selectSK=java_lang_Object_created__9"))
                           (rule "simplifySelectOfMemset" (formula "12"))
                           (builtin "One Step Simplification" (formula "12"))
                           (rule "simplifySelectOfStore" (formula "12"))
                           (builtin "One Step Simplification" (formula "12"))
                           (rule "simplifySelectOfStore" (formula "12"))
                           (builtin "One Step Simplification" (formula "12"))
                           (rule "simplifySelectOfStore" (formula "12"))
                           (builtin "One Step Simplification" (formula "12"))
                           (rule "simplifySelectOfCreate" (formula "12"))
                           (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "26")))
                           (rule "castDel" (formula "12") (term "1,0"))
                           (rule "apply_eq_boolean" (formula "12") (term "2,0") (ifseqformula "23"))
                           (rule "pullOutSelect" (formula "20") (term "0") (inst "selectSK=java_lang_Object_created__10"))
                           (rule "simplifySelectOfMemset" (formula "1"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "simplifySelectOfStore" (formula "1"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "simplifySelectOfStore" (formula "1"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "simplifySelectOfStore" (formula "1"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "simplifySelectOfCreate" (formula "1"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "27")))
                           (rule "castDel" (formula "1") (term "1,0"))
                           (rule "apply_eq_boolean_rigid" (formula "1") (term "1") (ifseqformula "21"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                     (branch "Case 2"
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "1") (ifseqformula "16"))
                        (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "22")) (ifInst ""  (formula "20")) (ifInst ""  (formula "21")))
                        (rule "translateJavaUnaryMinusInt" (formula "11") (term "0"))
                        (rule "translateJavaAddInt" (formula "13") (term "0,1"))
                        (rule "neg_literal" (formula "11") (term "0"))
                        (rule "allRight" (formula "30") (inst "sk=f_1"))
                        (rule "allRight" (formula "30") (inst "sk=o_1"))
                        (rule "orRight" (formula "30"))
                        (rule "eqSymm" (formula "19"))
                        (rule "eqSymm" (formula "13"))
                        (rule "eqSymm" (formula "31"))
                        (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "24"))
                        (builtin "One Step Simplification" (formula "14"))
                        (rule "polySimp_addComm0" (formula "13") (term "0,0"))
                        (rule "dismissNonSelectedField" (formula "20") (term "0"))
                        (rule "dismissNonSelectedField" (formula "30") (term "0,0,1"))
                        (rule "inEqSimp_ltRight" (formula "29"))
                        (rule "times_zero_1" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "28"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "dismissNonSelectedField" (formula "15") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "13"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "13") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "12"))
                        (rule "applyEq" (formula "29") (term "1,2,1,0,0,0,1") (ifseqformula "4"))
                        (rule "add_zero_right" (formula "29") (term "2,1,0,0,0,1"))
                        (rule "applyEq" (formula "20") (term "1,2,1,0,0,0,1,0,0") (ifseqformula "4"))
                        (rule "add_zero_right" (formula "20") (term "2,1,0,0,0,1,0,0"))
                        (rule "applyEq" (formula "17") (term "1,2,1,0,0,0,0") (ifseqformula "4"))
                        (rule "add_zero_right" (formula "17") (term "2,1,0,0,0,0"))
                        (rule "applyEq" (formula "3") (term "0") (ifseqformula "4"))
                        (rule "qeq_literals" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "applyEq" (formula "13") (term "1,2,1,0,0,0,1,0") (ifseqformula "3"))
                        (rule "add_literals" (formula "13") (term "2,1,0,0,0,1,0"))
                        (rule "eqSymm" (formula "13"))
                        (rule "applyEq" (formula "14") (term "1,2,1,0,0,0") (ifseqformula "3"))
                        (rule "add_literals" (formula "14") (term "2,1,0,0,0"))
                        (rule "applyEq" (formula "20") (term "1,2,1,0,0") (ifseqformula "3"))
                        (rule "add_literals" (formula "20") (term "2,1,0,0"))
                        (rule "applyEq" (formula "29") (term "1,2,1,0,0,0") (ifseqformula "3"))
                        (rule "add_zero_right" (formula "29") (term "2,1,0,0,0"))
                        (rule "applyEq" (formula "13") (term "1,2,1,0,0,0,0") (ifseqformula "3"))
                        (rule "add_literals" (formula "13") (term "2,1,0,0,0,0"))
                        (rule "eqSymm" (formula "13"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1"))
                        (rule "mul_literals" (formula "1") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "12"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                        (rule "polySimp_elimOne" (formula "12") (term "0"))
                        (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "2"))
                        (rule "leq_literals" (formula "11") (term "0"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "true_left" (formula "11"))
                        (rule "array2seqDef" (formula "17") (term "1") (inst "u=u"))
                        (rule "eqSymm" (formula "17"))
                        (rule "array2seqDef" (formula "11") (term "1") (inst "u=u"))
                        (rule "eqSymm" (formula "11"))
                        (rule "array2seqDef" (formula "17") (term "0,1") (inst "u=u"))
                        (rule "eqSymm" (formula "17"))
                        (rule "array2seqDef" (formula "17") (term "1,0") (inst "u=u"))
                        (rule "eqSeqDef2" (formula "11") (inst "iv=iv") (ifseqformula "11"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "true_left" (formula "11"))
                        (rule "eqSeqDef" (formula "16") (inst "iv=iv"))
                        (rule "andLeft" (formula "16"))
                        (rule "getOfSeqDef" (formula "17") (term "1,1,0"))
                        (rule "castDel" (formula "17") (term "1,1,1,0"))
                        (rule "castDel" (formula "17") (term "2,1,1,0"))
                        (rule "add_zero_right" (formula "17") (term "0,2,1,1,1,0"))
                        (rule "polySimp_elimSub" (formula "17") (term "1,1,0,1,1,0"))
                        (rule "mul_literals" (formula "17") (term "1,1,1,0,1,1,0"))
                        (rule "add_zero_right" (formula "17") (term "1,1,0,1,1,0"))
                        (rule "lenOfSeqDef" (formula "16") (term "1"))
                        (rule "polySimp_elimSub" (formula "16") (term "1,1"))
                        (rule "times_zero_2" (formula "16") (term "1,1,1"))
                        (rule "add_zero_right" (formula "16") (term "1,1"))
                        (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                        (rule "polySimp_addComm1" (formula "17") (term "0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,1,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "16") (term "0,1"))
                        (rule "add_zero_right" (formula "16") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,1,1,0"))
                        (rule "apply_eq_monomials" (formula "17") (term "1,0,1,0,0") (ifseqformula "16"))
                        (rule "polySimp_rightDist" (formula "17") (term "0,1,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,0,1,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "17") (term "1,0,1,0,1,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "17") (term "1,0,1,0,0"))
                        (rule "add_literals" (formula "17") (term "1,1,1,0,1,0,0"))
                        (rule "times_zero_1" (formula "17") (term "1,1,0,1,0,0"))
                        (rule "add_zero_right" (formula "17") (term "1,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,1,0,0"))
                        (rule "polySimp_addComm1" (formula "17") (term "0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,1,1,0"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,1,0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,1,1,0"))
                        (rule "mul_literals" (formula "17") (term "0,1,1,0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,1,1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "0,0,1"))
                        (rule "polySimp_elimOne" (formula "16") (term "0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,1,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "0,0,1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "17") (term "0,0,1,1,1,0,0"))
                        (rule "pullOutSelect" (formula "27") (term "1") (inst "selectSK=f_1_0"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "dismissNonSelectedField" (formula "1") (term "0,0,0,1,0,0"))
                        (rule "pullOutSelect" (formula "27") (term "0,0,1") (inst "selectSK=java_lang_Object_created__3"))
                        (rule "applyEq" (formula "2") (term "0,0,0,1,0,0") (ifseqformula "1"))
                        (rule "simplifySelectOfMemset" (formula "1"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "simplifySelectOfCreate" (formula "1"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "0,0"))
                        (rule "pullOutSelect" (formula "13") (term "0,0") (inst "selectSK=java_lang_Object_created__4"))
                        (rule "simplifySelectOfMemset" (formula "13"))
                        (builtin "One Step Simplification" (formula "13"))
                        (rule "simplifySelectOfStore" (formula "13"))
                        (builtin "One Step Simplification" (formula "13"))
                        (rule "simplifySelectOfStore" (formula "13"))
                        (builtin "One Step Simplification" (formula "13"))
                        (rule "simplifySelectOfStore" (formula "13"))
                        (builtin "One Step Simplification" (formula "13"))
                        (rule "simplifySelectOfCreate" (formula "13"))
                        (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "27")))
                        (rule "castDel" (formula "13") (term "1,0"))
                        (rule "apply_eq_boolean" (formula "13") (term "2,0") (ifseqformula "24"))
                        (rule "pullOutSelect" (formula "21") (term "0") (inst "selectSK=java_lang_Object_created__7"))
                        (rule "simplifySelectOfMemset" (formula "1"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "simplifySelectOfCreate" (formula "1"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "28")))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "apply_eq_boolean" (formula "1") (term "1") (ifseqformula "22"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "orRight" (formula "21"))
                        (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=f_1_1"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "pullOutSelect" (formula "20") (term "1,2,0,0,0") (inst "selectSK=arr_1"))
                        (rule "applyEq" (formula "21") (term "0,1,0,0,0") (ifseqformula "20"))
                        (rule "applyEq" (formula "22") (term "1,2,0,0,0,1,0") (ifseqformula "20"))
                        (rule "applyEq" (formula "22") (term "0,1,0,0,0,1,0") (ifseqformula "20"))
                        (rule "simplifySelectOfAnon" (formula "20"))
                        (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "32")))
                        (rule "dismissNonSelectedField" (formula "20") (term "2,0"))
                        (rule "dismissNonSelectedField" (formula "20") (term "0,0,0,0"))
                        (rule "ifthenelse_negated" (formula "20") (term "0"))
                        (rule "pullOutSelect" (formula "3") (term "2,0") (inst "selectSK=f_1_2"))
                        (rule "simplifySelectOfAnon" (formula "3"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "replaceKnownSelect_taclet10001001_16" (formula "3") (term "2,0"))
                        (rule "dismissNonSelectedField" (formula "3") (term "0,0,1,0,0"))
                        (rule "replaceKnownSelect_taclet10001001_1" (formula "3") (term "0,0,1,0,0"))
                        (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "34"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_1_3"))
                        (rule "simplifySelectOfMemset" (formula "1"))
                        (rule "elementOfArrayRange" (formula "1") (term "0,0,0") (inst "iv=iv"))
                        (rule "eqSymm" (formula "1") (term "0,0,0,1,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1,0,0,0"))
                        (rule "pullOutSelect" (formula "21") (term "0,0,0") (inst "selectSK=java_lang_Object_created__8"))
                        (rule "simplifySelectOfMemset" (formula "21"))
                        (builtin "One Step Simplification" (formula "21"))
                        (rule "simplifySelectOfStore" (formula "21"))
                        (builtin "One Step Simplification" (formula "21"))
                        (rule "simplifySelectOfStore" (formula "21"))
                        (builtin "One Step Simplification" (formula "21"))
                        (rule "simplifySelectOfStore" (formula "21"))
                        (builtin "One Step Simplification" (formula "21"))
                        (rule "simplifySelectOfCreate" (formula "21"))
                        (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "33")))
                        (rule "castDel" (formula "21") (term "1,0"))
                        (rule "sortsDisjointModuloNull" (formula "21") (term "0,0"))
                        (rule "replace_known_right" (formula "21") (term "1,0,0") (ifseqformula "34"))
                        (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "33")))
                        (rule "applyEqReverse" (formula "22") (term "0,0,0") (ifseqformula "21"))
                        (rule "hideAuxiliaryEq" (formula "21"))
                        (rule "replace_known_left" (formula "21") (term "0,0") (ifseqformula "10"))
                        (builtin "One Step Simplification" (formula "21"))
                        (rule "simplifySelectOfMemset" (formula "21"))
                        (builtin "One Step Simplification" (formula "21"))
                        (rule "dismissNonSelectedField" (formula "21") (term "2,0"))
                        (rule "elementOfArrayRangeConcrete" (formula "21") (term "0,0"))
                        (rule "eqSymm" (formula "21") (term "0,0,0,0"))
                        (rule "dismissNonSelectedField" (formula "21") (term "2,0"))
                        (rule "sortsDisjointModuloNull" (formula "21") (term "0,0,0,0"))
                        (rule "replace_known_right" (formula "21") (term "0,0,0,0,0") (ifseqformula "32"))
                        (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "33")))
                        (rule "simplifySelectOfStore" (formula "21"))
                        (builtin "One Step Simplification" (formula "21"))
                        (rule "simplifySelectOfCreate" (formula "21"))
                        (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "32")))
                        (rule "applyEqReverse" (formula "22") (term "0,1,0,0,0") (ifseqformula "21"))
                        (rule "applyEqReverse" (formula "23") (term "1,2,0,0,0,1,0") (ifseqformula "21"))
                        (rule "applyEqReverse" (formula "22") (term "1,2,0,0,0") (ifseqformula "21"))
                        (rule "applyEqReverse" (formula "23") (term "0,1,0,0,0,1,0") (ifseqformula "21"))
                        (rule "hideAuxiliaryEq" (formula "21"))
                        (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_1_4"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_1_5"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_1_6"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_1_7"))
                        (rule "simplifySelectOfCreate" (formula "1"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,1,0,0,0") (ifseqformula "35"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "hideAuxiliaryEqConcrete2" (formula "29"))
                        (rule "nnf_imp2or" (formula "26") (term "0"))
                        (rule "nnf_notAnd" (formula "26") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                        (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                        (rule "add_literals" (formula "26") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                        (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                        (rule "commute_and" (formula "36"))
                        (rule "commute_and" (formula "6") (term "0,0"))
                        (rule "commute_or_2" (formula "26") (term "0"))
                        (rule "commute_or" (formula "26") (term "0,0"))
                        (rule "commute_and" (formula "4") (term "0,0"))
                        (rule "commute_and" (formula "3") (term "0,0"))
                        (rule "commute_and" (formula "2") (term "0,0"))
                        (rule "commute_and_2" (formula "5") (term "0,1,0,0,0"))
                        (rule "inEqSimp_and_contradInEq1" (formula "5") (term "0,1,0,0,0"))
                        (rule "qeq_literals" (formula "5") (term "1,0,1,0,0,0"))
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                        (rule "hideAuxiliaryEq" (formula "5"))
                        (rule "commute_and" (formula "1") (term "0,0"))
                        (rule "arrayLengthNotNegative" (formula "16") (term "1,1,0"))
                        (rule "arrayLengthIsAShort" (formula "15") (term "0"))
                        (builtin "One Step Simplification" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "arrayLengthIsAShort" (formula "10") (term "0"))
                        (builtin "One Step Simplification" (formula "10"))
                        (rule "true_left" (formula "10"))
                        (rule "arrayLengthNotNegative" (formula "10") (term "0"))
                        (rule "applyEq" (formula "10") (term "0") (ifseqformula "11"))
                        (rule "qeq_literals" (formula "10"))
                        (rule "true_left" (formula "10"))
                        (rule "ifthenelse_split" (formula "24") (term "1"))
                        (branch "result_0.length >= 1 TRUE"
                           (rule "replace_known_left" (formula "26") (term "0,1,1,0") (ifseqformula "24"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "ifthenelse_split" (formula "6") (term "0"))
                           (branch "o_1 = x_arr_2 TRUE"
                              (rule "applyEqReverse" (formula "8") (term "0,0,0,1,0,0") (ifseqformula "7"))
                              (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "38")))
                              (rule "closeFalse" (formula "8"))
                           )
                           (branch "o_1 = x_arr_2 FALSE"
                              (rule "applyEqReverse" (formula "7") (term "0,0,0,1,0,0") (ifseqformula "6"))
                              (rule "applyEqReverse" (formula "37") (term "0,0,0") (ifseqformula "6"))
                              (rule "hideAuxiliaryEq" (formula "6"))
                              (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "26"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "25"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "24"))
                              (builtin "One Step Simplification" (formula "2"))
                              (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "23"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "22"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "commute_and" (formula "31"))
                              (rule "arrayLengthNotNegative" (formula "19") (term "1,1,0,0"))
                              (rule "arrayLengthIsAShort" (formula "20") (term "1,1,0,0"))
                              (builtin "One Step Simplification" (formula "20"))
                              (rule "true_left" (formula "20"))
                              (rule "ifthenelse_split" (formula "12") (term "0"))
                              (branch "x_arr_2 = msg_2 TRUE"
                                 (rule "applyEqReverse" (formula "14") (term "0,0") (ifseqformula "13"))
                                 (builtin "One Step Simplification" (formula "14"))
                                 (rule "true_left" (formula "14"))
                                 (rule "hideAuxiliaryEq" (formula "13"))
                                 (rule "applyEq" (formula "14") (term "1,0,0,0,0,0,0") (ifseqformula "12"))
                                 (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "12"))
                                 (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "12"))
                                 (rule "applyEq" (formula "14") (term "1,0,0,0,0,0") (ifseqformula "12"))
                                 (rule "applyEq" (formula "22") (term "0") (ifseqformula "12"))
                                 (rule "eqSymm" (formula "22"))
                                 (rule "applyEq" (formula "14") (term "1,0,0,0,0,0,0,0,0") (ifseqformula "12"))
                                 (rule "applyEq" (formula "28") (term "1,0") (ifseqformula "12"))
                                 (rule "applyEq" (formula "14") (term "1,0,0,0") (ifseqformula "12"))
                                 (rule "applyEq" (formula "14") (term "1,0,0,0,0,0,0,0") (ifseqformula "12"))
                                 (rule "applyEq" (formula "14") (term "0,1,0,0,0,0") (ifseqformula "12"))
                                 (rule "applyEq" (formula "21") (term "1") (ifseqformula "12"))
                                 (rule "applyEq" (formula "28") (term "0") (ifseqformula "12"))
                                 (rule "applyEq" (formula "20") (term "1,1,0,0,0,0,0") (ifseqformula "4"))
                                 (rule "seqDef_lower_equals_upper" (formula "20") (term "1,0,0,0,0,0"))
                                 (rule "applyEqRigid" (formula "18") (term "0") (ifseqformula "4"))
                                 (rule "qeq_literals" (formula "18"))
                                 (rule "true_left" (formula "18"))
                                 (rule "applyEq" (formula "18") (term "1,1,0,0") (ifseqformula "4"))
                                 (rule "seqDef_lower_equals_upper" (formula "18") (term "1,0,0"))
                                 (rule "ifthenelse_to_or_right" (formula "19") (term "0,0,0"))
                                 (rule "nnf_notAnd" (formula "19") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "19") (term "0,0,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0,0,0,0"))
                                 (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "19") (term "0,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0,0"))
                                 (rule "commute_or" (formula "19") (term "0,0"))
                                 (rule "commute_or_2" (formula "19") (term "0"))
                                 (rule "commute_or_2" (formula "19") (term "0,1,0"))
                                 (rule "commute_or" (formula "19") (term "1,1,0"))
                                 (rule "commute_or" (formula "19") (term "0,0,1,0"))
                                 (rule "cnf_rightDist" (formula "19") (term "1,1,0"))
                                 (rule "cnf_rightDist" (formula "19") (term "0"))
                                 (rule "distr_forallAnd" (formula "19"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "commute_or" (formula "20") (term "0"))
                                 (rule "shift_paren_or" (formula "19") (term "0"))
                                 (rule "commute_or_2" (formula "19") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "commute_or" (formula "20") (term "1,1,0"))
                                 (rule "shift_paren_or" (formula "19") (term "0,0"))
                                 (rule "commute_or" (formula "19") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "cnf_rightDist" (formula "20") (term "0"))
                                 (rule "distr_forallAnd" (formula "20"))
                                 (rule "andLeft" (formula "20"))
                                 (rule "commute_or_2" (formula "20") (term "0"))
                                 (rule "shift_paren_or" (formula "21") (term "0"))
                                 (rule "commute_or_2" (formula "21") (term "0,0"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "21") (term "0"))
                                 (rule "inEqSimp_homoInEq1" (formula "21") (term "1,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "21") (term "0,1,0"))
                                 (rule "add_literals" (formula "21") (term "1,0,1,0"))
                                 (rule "times_zero_1" (formula "21") (term "0,1,0"))
                                 (rule "leq_literals" (formula "21") (term "1,0"))
                                 (builtin "One Step Simplification" (formula "21"))
                                 (rule "true_left" (formula "21"))
                                 (rule "shift_paren_or" (formula "20") (term "0,0"))
                                 (rule "commute_or" (formula "20") (term "0,0,0"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "20") (term "0,0"))
                                 (rule "add_zero_right" (formula "20") (term "1,1,0,0"))
                                 (rule "qeq_literals" (formula "20") (term "1,0,0"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "true_left" (formula "20"))
                                 (rule "allLeft" (formula "10") (inst "t=i_2"))
                                 (rule "inEqSimp_commuteGeq" (formula "10") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "2"))
                                 (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                                 (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                                 (rule "add_literals" (formula "10") (term "0,0,1"))
                                 (rule "leq_literals" (formula "10") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "3"))
                                 (rule "qeq_literals" (formula "10") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "notLeft" (formula "10"))
                                 (rule "arrayLengthIsAShort" (formula "18") (term "1,0,0,0"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "true_left" (formula "18"))
                                 (rule "arrayLengthNotNegative" (formula "18") (term "1,0,0,0"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch " !o_1 = null & !( o_1.<created> = TRUE | o_1.<created>@anon_heap_LOOP_1<<anonHeapFunction>> = TRUE) TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "orRight" (formula "22"))
                                    (rule "applyEqReverse" (formula "34") (term "1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "eqSymm" (formula "33"))
                                    (rule "replace_known_right" (formula "32") (term "0,1") (ifseqformula "21"))
                                    (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "20")))
                                    (rule "closeTrue" (formula "32"))
                                 )
                                 (branch " !o_1 = null & !( o_1.<created> = TRUE | o_1.<created>@anon_heap_LOOP_1<<anonHeapFunction>> = TRUE) FALSE"
                                    (rule "close" (formula "32") (ifseqformula "1"))
                                 )
                              )
                              (branch "x_arr_2 = msg_2 FALSE"
                                 (rule "applyEqReverse" (formula "13") (term "0,0") (ifseqformula "12"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "hideAuxiliaryEq" (formula "12"))
                                 (rule "ifthenelse_to_or_right" (formula "20") (term "0,0,0"))
                                 (rule "nnf_notAnd" (formula "20") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "20") (term "0,0,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,0,0,0"))
                                 (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "20") (term "0,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0,0"))
                                 (rule "commute_or" (formula "20") (term "0,0"))
                                 (rule "commute_or_2" (formula "20") (term "0"))
                                 (rule "commute_or_2" (formula "20") (term "0,1,0"))
                                 (rule "commute_or" (formula "20") (term "1,1,0"))
                                 (rule "commute_or" (formula "20") (term "0,0,1,0"))
                                 (rule "cnf_rightDist" (formula "20") (term "1,1,0"))
                                 (rule "cnf_rightDist" (formula "20") (term "0"))
                                 (rule "distr_forallAnd" (formula "20"))
                                 (rule "andLeft" (formula "20"))
                                 (rule "commute_or" (formula "21") (term "0"))
                                 (rule "shift_paren_or" (formula "20") (term "0"))
                                 (rule "commute_or_2" (formula "20") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "commute_or" (formula "21") (term "1,1,0"))
                                 (rule "shift_paren_or" (formula "20") (term "0,0"))
                                 (rule "commute_or" (formula "20") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "cnf_rightDist" (formula "21") (term "0"))
                                 (rule "distr_forallAnd" (formula "21"))
                                 (rule "andLeft" (formula "21"))
                                 (rule "commute_or_2" (formula "21") (term "0"))
                                 (rule "shift_paren_or" (formula "22") (term "0"))
                                 (rule "commute_or_2" (formula "22") (term "0,0"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0"))
                                 (rule "inEqSimp_homoInEq1" (formula "22") (term "1,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "22") (term "0,1,0"))
                                 (rule "add_literals" (formula "22") (term "1,0,1,0"))
                                 (rule "times_zero_1" (formula "22") (term "0,1,0"))
                                 (rule "leq_literals" (formula "22") (term "1,0"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "true_left" (formula "22"))
                                 (rule "shift_paren_or" (formula "21") (term "0,0"))
                                 (rule "commute_or" (formula "21") (term "0,0,0"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "21") (term "0,0"))
                                 (rule "add_zero_right" (formula "21") (term "1,1,0,0"))
                                 (rule "qeq_literals" (formula "21") (term "1,0,0"))
                                 (builtin "One Step Simplification" (formula "21"))
                                 (rule "true_left" (formula "21"))
                                 (rule "allLeft" (formula "10") (inst "t=i_2"))
                                 (rule "inEqSimp_commuteGeq" (formula "10") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "2"))
                                 (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                                 (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "10") (term "0,0,1"))
                                 (rule "leq_literals" (formula "10") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "3"))
                                 (rule "qeq_literals" (formula "10") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "notLeft" (formula "10"))
                                 (rule "arrayLengthIsAShort" (formula "19") (term "1,0,0,0"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "true_left" (formula "19"))
                                 (rule "arrayLengthNotNegative" (formula "19") (term "1,0,0,0"))
                                 (rule "lenNonNegative" (formula "20") (term "0"))
                                 (rule "inEqSimp_commuteLeq" (formula "20"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch " !o_1 = null & !( o_1.<created> = TRUE | o_1.<created>@anon_heap_LOOP_1<<anonHeapFunction>> = TRUE) TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "orRight" (formula "24"))
                                    (rule "applyEqReverse" (formula "39") (term "1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "eqSymm" (formula "38"))
                                    (rule "replace_known_right" (formula "37") (term "0,1") (ifseqformula "23"))
                                    (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "22")))
                                    (rule "closeTrue" (formula "37"))
                                 )
                                 (branch " !o_1 = null & !( o_1.<created> = TRUE | o_1.<created>@anon_heap_LOOP_1<<anonHeapFunction>> = TRUE) FALSE"
                                    (rule "close" (formula "37") (ifseqformula "1"))
                                 )
                              )
                           )
                        )
                        (branch "result_0.length >= 1 FALSE"
                           (rule "replace_known_right" (formula "25") (term "0,1,1,0") (ifseqformula "26"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "inEqSimp_geqRight" (formula "26"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_or_tautInEq1" (formula "26") (term "0"))
                           (rule "add_literals" (formula "26") (term "1,1,0"))
                           (rule "qeq_literals" (formula "26") (term "1,0"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "true_left" (formula "26"))
                           (rule "ifthenelse_split" (formula "7") (term "0"))
                           (branch "o_1 = x_arr_2 TRUE"
                              (rule "applyEqReverse" (formula "36") (term "0,0,0") (ifseqformula "8"))
                              (builtin "One Step Simplification" (formula "36"))
                              (rule "false_right" (formula "36"))
                              (rule "applyEqReverse" (formula "9") (term "0,0,0,1,0,0") (ifseqformula "8"))
                              (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "36")))
                              (rule "closeFalse" (formula "9"))
                           )
                           (branch "o_1 = x_arr_2 FALSE"
                              (rule "applyEqReverse" (formula "8") (term "0,0,0,1,0,0") (ifseqformula "7"))
                              (rule "applyEqReverse" (formula "36") (term "0,0,0") (ifseqformula "7"))
                              (rule "hideAuxiliaryEq" (formula "7"))
                              (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "25"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "24"))
                              (builtin "One Step Simplification" (formula "2"))
                              (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "23"))
                              (builtin "One Step Simplification" (formula "2"))
                              (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "22"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "3"))
                              (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "21"))
                              (builtin "One Step Simplification" (formula "2"))
                              (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                              (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "2"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "commute_and" (formula "30"))
                              (rule "arrayLengthNotNegative" (formula "19") (term "1,1,0,0"))
                              (rule "arrayLengthIsAShort" (formula "20") (term "1,1,0,0"))
                              (builtin "One Step Simplification" (formula "20"))
                              (rule "true_left" (formula "20"))
                              (rule "ifthenelse_split" (formula "13") (term "0"))
                              (branch "x_arr_2 = msg_2 TRUE"
                                 (rule "applyEqReverse" (formula "15") (term "0,0") (ifseqformula "14"))
                                 (builtin "One Step Simplification" (formula "15"))
                                 (rule "true_left" (formula "15"))
                                 (rule "hideAuxiliaryEq" (formula "14"))
                                 (rule "applyEq" (formula "21") (term "0") (ifseqformula "13"))
                                 (rule "eqSymm" (formula "21"))
                                 (rule "applyEq" (formula "15") (term "1,0,0,0,0,0") (ifseqformula "13"))
                                 (rule "applyEq" (formula "15") (term "1,0,0,0,0,0,0,0,0") (ifseqformula "13"))
                                 (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "13"))
                                 (rule "applyEq" (formula "15") (term "0,1,0,0,0,0") (ifseqformula "13"))
                                 (rule "applyEq" (formula "27") (term "1,0") (ifseqformula "13"))
                                 (rule "applyEq" (formula "20") (term "1") (ifseqformula "13"))
                                 (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "13"))
                                 (rule "applyEq" (formula "27") (term "0") (ifseqformula "13"))
                                 (rule "applyEq" (formula "15") (term "1,0,0,0,0,0,0,0") (ifseqformula "13"))
                                 (rule "applyEq" (formula "15") (term "1,0,0,0,0,0,0") (ifseqformula "13"))
                                 (rule "applyEq" (formula "15") (term "1,0,0,0") (ifseqformula "13"))
                                 (rule "applyEqRigid" (formula "19") (term "1,1,0,0") (ifseqformula "5"))
                                 (rule "seqDef_lower_equals_upper" (formula "19") (term "1,0,0"))
                                 (rule "applyEqRigid" (formula "18") (term "0") (ifseqformula "5"))
                                 (rule "qeq_literals" (formula "18"))
                                 (rule "true_left" (formula "18"))
                                 (rule "allLeft" (formula "11") (inst "t=i_2"))
                                 (rule "inEqSimp_commuteGeq" (formula "11") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0") (ifseqformula "4"))
                                 (rule "qeq_literals" (formula "11") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "inEqSimp_contradInEq1" (formula "11") (term "1") (ifseqformula "3"))
                                 (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1"))
                                 (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
                                 (rule "add_literals" (formula "11") (term "0,0,1"))
                                 (rule "leq_literals" (formula "11") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "notLeft" (formula "11"))
                                 (rule "arrayLengthNotNegative" (formula "18") (term "1,0,0,0"))
                                 (rule "arrayLengthIsAShort" (formula "19") (term "1,0,0,0"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "true_left" (formula "19"))
                                 (rule "ifthenelse_split" (formula "2") (term "0"))
                                 (branch " !o_1 = null & !( o_1.<created> = TRUE | o_1.<created>@anon_heap_LOOP_1<<anonHeapFunction>> = TRUE) TRUE"
                                    (rule "andLeft" (formula "2"))
                                    (rule "notLeft" (formula "3"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "orRight" (formula "21"))
                                    (rule "applyEqReverse" (formula "33") (term "1") (ifseqformula "2"))
                                    (rule "hideAuxiliaryEq" (formula "2"))
                                    (rule "eqSymm" (formula "32"))
                                    (rule "replace_known_right" (formula "31") (term "0,0") (ifseqformula "19"))
                                    (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "20")))
                                    (rule "closeTrue" (formula "31"))
                                 )
                                 (branch " !o_1 = null & !( o_1.<created> = TRUE | o_1.<created>@anon_heap_LOOP_1<<anonHeapFunction>> = TRUE) FALSE"
                                    (rule "close" (formula "31") (ifseqformula "2"))
                                 )
                              )
                              (branch "x_arr_2 = msg_2 FALSE"
                                 (rule "applyEqReverse" (formula "14") (term "0,0") (ifseqformula "13"))
                                 (builtin "One Step Simplification" (formula "14"))
                                 (rule "hideAuxiliaryEq" (formula "13"))
                                 (rule "allLeft" (formula "11") (inst "t=i_2"))
                                 (rule "inEqSimp_commuteGeq" (formula "11") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0") (ifseqformula "4"))
                                 (rule "qeq_literals" (formula "11") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "inEqSimp_contradInEq1" (formula "11") (term "1") (ifseqformula "3"))
                                 (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1"))
                                 (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "11") (term "0,0,1"))
                                 (rule "leq_literals" (formula "11") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "notLeft" (formula "11"))
                                 (rule "arrayLengthIsAShort" (formula "19") (term "1,0,0,0"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "true_left" (formula "19"))
                                 (rule "arrayLengthNotNegative" (formula "19") (term "1,0,0,0"))
                                 (rule "lenNonNegative" (formula "20") (term "0"))
                                 (rule "inEqSimp_commuteLeq" (formula "20"))
                                 (rule "ifthenelse_split" (formula "2") (term "0"))
                                 (branch " !o_1 = null & !( o_1.<created> = TRUE | o_1.<created>@anon_heap_LOOP_1<<anonHeapFunction>> = TRUE) TRUE"
                                    (rule "andLeft" (formula "2"))
                                    (rule "notLeft" (formula "3"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "orRight" (formula "23"))
                                    (rule "applyEqReverse" (formula "38") (term "1") (ifseqformula "2"))
                                    (rule "hideAuxiliaryEq" (formula "2"))
                                    (rule "eqSymm" (formula "37"))
                                    (rule "replace_known_right" (formula "36") (term "0,1") (ifseqformula "22"))
                                    (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "21")))
                                    (rule "closeTrue" (formula "36"))
                                 )
                                 (branch " !o_1 = null & !( o_1.<created> = TRUE | o_1.<created>@anon_heap_LOOP_1<<anonHeapFunction>> = TRUE) FALSE"
                                    (rule "close" (formula "36") (ifseqformula "2"))
                                 )
                              )
                           )
                        )
                     )
                  )
                  (branch "Case 2"
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "1") (ifseqformula "16"))
                     (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "22")) (ifInst ""  (formula "20")) (ifInst ""  (formula "21")))
                     (rule "translateJavaUnaryMinusInt" (formula "11") (term "0"))
                     (rule "translateJavaAddInt" (formula "13") (term "0,1"))
                     (rule "translateJavaAddInt" (formula "30") (term "0"))
                     (rule "translateJavaAddInt" (formula "30") (term "1"))
                     (rule "translateJavaSubInt" (formula "30") (term "0,0"))
                     (rule "neg_literal" (formula "11") (term "0"))
                     (rule "eqSymm" (formula "19"))
                     (rule "eqSymm" (formula "13"))
                     (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "24"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "polySimp_elimSub" (formula "30") (term "0,0"))
                     (rule "mul_literals" (formula "30") (term "1,0,0"))
                     (rule "polySimp_addLiterals" (formula "30") (term "0"))
                     (rule "add_zero_right" (formula "30") (term "0"))
                     (rule "polySimp_addComm0" (formula "30") (term "1"))
                     (rule "polySimp_addComm0" (formula "13") (term "0,0"))
                     (rule "dismissNonSelectedField" (formula "20") (term "0"))
                     (rule "inEqSimp_leqRight" (formula "28"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "inEqSimp_ltRight" (formula "29"))
                     (rule "times_zero_1" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "dismissNonSelectedField" (formula "15") (term "0,0"))
                     (rule "precOfInt" (formula "29"))
                     (rule "inEqSimp_ltToLeq" (formula "13"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "13") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "29") (term "1"))
                     (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1"))
                     (rule "mul_literals" (formula "29") (term "0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "29") (term "0,0,1"))
                     (rule "add_literals" (formula "29") (term "0,0,0,1"))
                     (rule "add_zero_left" (formula "29") (term "0,0,1"))
                     (rule "polySimp_pullOutFactor2" (formula "29") (term "0,1"))
                     (rule "add_literals" (formula "29") (term "1,0,1"))
                     (rule "times_zero_1" (formula "29") (term "0,1"))
                     (rule "leq_literals" (formula "29") (term "1"))
                     (builtin "One Step Simplification" (formula "29"))
                     (rule "inEqSimp_leqRight" (formula "29"))
                     (rule "add_zero_right" (formula "1") (term "0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "13"))
                     (rule "applyEq" (formula "16") (term "1,2,1,0,0,0") (ifseqformula "5"))
                     (rule "add_zero_right" (formula "16") (term "2,1,0,0,0"))
                     (rule "applyEq" (formula "4") (term "0") (ifseqformula "5"))
                     (rule "qeq_literals" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "applyEq" (formula "14") (term "1,2,1,0,0,0,1,0") (ifseqformula "4"))
                     (rule "add_literals" (formula "14") (term "2,1,0,0,0,1,0"))
                     (rule "eqSymm" (formula "14"))
                     (rule "applyEq" (formula "20") (term "1,2,1,0,0,0,1,0,0") (ifseqformula "4"))
                     (rule "add_literals" (formula "20") (term "2,1,0,0,0,1,0,0"))
                     (rule "applyEq" (formula "21") (term "1,2,1,0,0") (ifseqformula "4"))
                     (rule "add_literals" (formula "21") (term "2,1,0,0"))
                     (rule "applyEq" (formula "17") (term "1,2,1,0,0,0,0") (ifseqformula "4"))
                     (rule "add_literals" (formula "17") (term "2,1,0,0,0,0"))
                     (rule "applyEq" (formula "14") (term "1,2,1,0,0,0,0") (ifseqformula "4"))
                     (rule "add_literals" (formula "14") (term "2,1,0,0,0,0"))
                     (rule "eqSymm" (formula "14"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1"))
                     (rule "mul_literals" (formula "2") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "13"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                     (rule "polySimp_elimOne" (formula "13") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "3") (term "0"))
                     (builtin "One Step Simplification" (formula "3"))
                     (rule "closeFalse" (formula "3"))
                  )
               )
               (branch "Exceptional Post (concatenate)"
                  (builtin "One Step Simplification" (formula "13"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "translateJavaUnaryMinusInt" (formula "11") (term "0,0,0,0,0"))
                  (rule "translateJavaAddInt" (formula "11") (term "0,1,1,0,0"))
                  (rule "translateJavaAddInt" (formula "19") (term "0,1,1,1,0,1"))
                  (rule "translateJavaAddInt" (formula "19") (term "0,1,1,1,0,0,0"))
                  (rule "translateJavaAddInt" (formula "19") (term "0,1,1,0,0,0,1,1,0,1"))
                  (rule "translateJavaUnaryMinusInt" (formula "19") (term "0,0,0,0,0,0,1,1,0,1"))
                  (rule "neg_literal" (formula "11") (term "0,0,0,0,0"))
                  (rule "neg_literal" (formula "19") (term "0,0,0,0,0,0,1,1,0,1"))
                  (rule "andLeft" (formula "13"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "1,0") (ifseqformula "13"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "andLeft" (formula "11"))
                  (rule "andLeft" (formula "15"))
                  (rule "andLeft" (formula "11"))
                  (rule "andLeft" (formula "16"))
                  (rule "andLeft" (formula "18"))
                  (rule "andLeft" (formula "11"))
                  (rule "andLeft" (formula "13"))
                  (rule "notLeft" (formula "18"))
                  (rule "close" (formula "21") (ifseqformula "20"))
               )
               (branch "Pre (concatenate)"
                  (builtin "One Step Simplification" (formula "17"))
                  (rule "wellFormedAnon" (formula "17") (term "0,0,1"))
                  (rule "wellFormedStorePrimitive" (formula "17") (term "0,0,0,1"))
                  (rule "translateJavaUnaryMinusInt" (formula "11") (term "0,0,0,0,0"))
                  (rule "translateJavaAddInt" (formula "11") (term "0,1,1,0,0"))
                  (rule "neg_literal" (formula "11") (term "0,0,0,0,0"))
                  (rule "andLeft" (formula "11"))
                  (rule "andLeft" (formula "11"))
                  (rule "andLeft" (formula "12"))
                  (rule "andLeft" (formula "11"))
                  (rule "notLeft" (formula "14"))
                  (rule "notLeft" (formula "13"))
                  (rule "andLeft" (formula "11"))
                  (rule "eqSymm" (formula "13"))
                  (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "16"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "replace_known_left" (formula "22") (term "1,0,0,1") (ifseqformula "10"))
                  (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "16")) (ifInst ""  (formula "16")) (ifInst ""  (formula "14")))
                  (rule "polySimp_addComm0" (formula "13") (term "0,0"))
                  (rule "inEqSimp_leqRight" (formula "20"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "inEqSimp_ltRight" (formula "21"))
                  (rule "mul_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "dismissNonSelectedField" (formula "15") (term "0,0"))
                  (rule "dismissNonSelectedField" (formula "21") (term "0,0,1,1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "13"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "13") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "12"))
                  (rule "applyEq" (formula "21") (term "1,2,1,0,0,0,1,1,1") (ifseqformula "4"))
                  (rule "add_zero_right" (formula "21") (term "2,1,0,0,0,1,1,1"))
                  (rule "applyEq" (formula "21") (term "1,2,1,0,0,0,1,0,0,1,1,1") (ifseqformula "4"))
                  (rule "add_zero_right" (formula "21") (term "2,1,0,0,0,1,0,0,1,1,1"))
                  (rule "applyEq" (formula "15") (term "1,2,1,0,0,0") (ifseqformula "4"))
                  (rule "add_zero_right" (formula "15") (term "2,1,0,0,0"))
                  (rule "applyEq" (formula "21") (term "1,2,1,0,0,0,0,0,0") (ifseqformula "4"))
                  (rule "add_zero_right" (formula "21") (term "2,1,0,0,0,0,0,0"))
                  (rule "applyEq" (formula "14") (term "1,2,1,0,0,0,1,0") (ifseqformula "4"))
                  (rule "add_literals" (formula "14") (term "2,1,0,0,0,1,0"))
                  (rule "eqSymm" (formula "14"))
                  (rule "applyEq" (formula "21") (term "1,2,1,0,0,0,0,0,1,1") (ifseqformula "4"))
                  (rule "add_zero_right" (formula "21") (term "2,1,0,0,0,0,0,1,1"))
                  (rule "applyEq" (formula "21") (term "1,2,1,0,0,1") (ifseqformula "4"))
                  (rule "add_literals" (formula "21") (term "2,1,0,0,1"))
                  (rule "applyEq" (formula "21") (term "1,2,1,0,0,0,1,0,1,1,1,1") (ifseqformula "4"))
                  (rule "add_zero_right" (formula "21") (term "2,1,0,0,0,1,0,1,1,1,1"))
                  (rule "applyEq" (formula "3") (term "0") (ifseqformula "4"))
                  (rule "qeq_literals" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "applyEq" (formula "13") (term "1,2,1,0,0,0,0") (ifseqformula "3"))
                  (rule "add_literals" (formula "13") (term "2,1,0,0,0,0"))
                  (rule "eqSymm" (formula "13"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "mul_literals" (formula "1") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "12"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                  (rule "polySimp_elimOne" (formula "12") (term "0"))
                  (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "2"))
                  (rule "leq_literals" (formula "11") (term "0"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "true_left" (formula "11"))
                  (rule "wellFormedMemsetArrayPrimitive" (formula "18") (term "0,1"))
                  (rule "wellFormedStorePrimitive" (formula "18") (term "0,1"))
                  (rule "wellFormedStorePrimitive" (formula "18") (term "0,1"))
                  (rule "wellFormedStorePrimitive" (formula "18") (term "0,1"))
                  (rule "wellFormedCreate" (formula "18") (term "0,1"))
                  (rule "replace_known_left" (formula "18") (term "0,1") (ifseqformula "5"))
                  (builtin "One Step Simplification" (formula "18"))
                  (rule "array2seqDef" (formula "11") (term "1") (inst "u=u"))
                  (rule "eqSymm" (formula "11"))
                  (rule "eqSeqDef2" (formula "11") (inst "iv=iv") (ifseqformula "11"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "true_left" (formula "11"))
                  (rule "pullOutSelect" (formula "11") (term "0,0") (inst "selectSK=java_lang_Object_created__0"))
                  (rule "simplifySelectOfMemset" (formula "11"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "simplifySelectOfStore" (formula "11"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "simplifySelectOfStore" (formula "11"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "simplifySelectOfStore" (formula "11"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "simplifySelectOfCreate" (formula "11"))
                  (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "16")))
                  (rule "castDel" (formula "11") (term "1,0"))
                  (rule "apply_eq_boolean" (formula "11") (term "2,0") (ifseqformula "13"))
                  (rule "pullOutSelect" (formula "18") (term "0,0,1,1") (inst "selectSK=java_lang_Object_created__1"))
                  (rule "simplifySelectOfMemset" (formula "1"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "simplifySelectOfStore" (formula "1"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "simplifySelectOfStore" (formula "1"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "simplifySelectOfStore" (formula "1"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "simplifySelectOfCreate" (formula "1"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
                  (rule "castDel" (formula "1") (term "1,0"))
                  (rule "eqSymm" (formula "1") (term "0,0"))
                  (rule "pullOutSelect" (formula "19") (term "0,0,1") (inst "selectSK=arr_0"))
                  (rule "applyEq" (formula "2") (term "0,0,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "20") (term "1,0,1,1,1") (ifseqformula "1"))
                  (rule "applyEq" (formula "20") (term "0,0,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "2") (term "1,2,0") (ifseqformula "1"))
                  (rule "simplifySelectOfAnon" (formula "1"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")))
                  (rule "eqSymm" (formula "2") (term "0,0"))
                  (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
                  (rule "dismissNonSelectedField" (formula "1") (term "0,0,0,0"))
                  (rule "ifthenelse_negated" (formula "1") (term "0"))
                  (rule "pullOutSelect" (formula "1") (term "0,0,0") (inst "selectSK=java_lang_Object_created__2"))
                  (rule "simplifySelectOfMemset" (formula "1"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "simplifySelectOfStore" (formula "1"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "simplifySelectOfStore" (formula "1"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "simplifySelectOfStore" (formula "1"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "simplifySelectOfCreate" (formula "1"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")))
                  (rule "castDel" (formula "1") (term "1,0"))
                  (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
                  (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "19"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
                  (rule "applyEqReverse" (formula "2") (term "0,0,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "8"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "simplifySelectOfMemset" (formula "1"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
                  (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                  (rule "eqSymm" (formula "1") (term "0,0,0,0"))
                  (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
                  (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0,0"))
                  (rule "replace_known_right" (formula "1") (term "0,0,0,0,0") (ifseqformula "18"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")))
                  (rule "simplifySelectOfStore" (formula "1"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "simplifySelectOfCreate" (formula "1"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
                  (rule "applyEqReverse" (formula "2") (term "1,0,0") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "2") (term "1,2,0") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "20") (term "1,0,1,1,1") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "20") (term "0,0,1") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "20") (term "0,0,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "0,0"))
                  (rule "shift_paren_or" (formula "19") (term "1"))
                  (rule "commute_or" (formula "19") (term "0,1"))
                  (rule "arrayLengthNotNegative" (formula "9") (term "0"))
                  (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                  (rule "applyEq" (formula "4") (term "0") (ifseqformula "5"))
                  (rule "qeq_literals" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "arrayLengthIsAShort" (formula "10") (term "1,1,0"))
                  (builtin "One Step Simplification" (formula "10"))
                  (rule "true_left" (formula "10"))
                  (rule "arrayLengthIsAShort" (formula "4") (term "0"))
                  (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "ifthenelse_split" (formula "12") (term "0"))
                  (branch "x_arr_2 = msg_2 TRUE"
                     (rule "applyEqReverse" (formula "14") (term "0,0") (ifseqformula "13"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "true_left" (formula "14"))
                     (rule "hideAuxiliaryEq" (formula "13"))
                     (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "12"))
                     (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "12"))
                     (rule "applyEq" (formula "15") (term "0") (ifseqformula "12"))
                     (rule "applyEq" (formula "1") (term "1,0,0") (ifseqformula "12"))
                     (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "12"))
                     (rule "allLeft" (formula "10") (inst "t=i_2"))
                     (rule "inEqSimp_commuteGeq" (formula "10") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "10") (term "1,0") (ifseqformula "3"))
                     (rule "qeq_literals" (formula "10") (term "0,1,0"))
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                     (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "10") (term "0,0,1"))
                     (rule "leq_literals" (formula "10") (term "0,1"))
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "notLeft" (formula "10"))
                     (rule "replace_known_right" (formula "17") (term "0,0") (ifseqformula "13"))
                     (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "13")))
                     (rule "orRight" (formula "17"))
                     (rule "apply_eq_boolean_rigid" (formula "1") (term "1") (ifseqformula "17"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "orRight" (formula "12"))
                     (rule "referencedObjectIsCreatedRight" (formula "13") (ifseqformula "14"))
                     (rule "close" (formula "13") (ifseqformula "5"))
                  )
                  (branch "x_arr_2 = msg_2 FALSE"
                     (rule "applyEqReverse" (formula "13") (term "0,0") (ifseqformula "12"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "hideAuxiliaryEq" (formula "12"))
                     (rule "allLeft" (formula "10") (inst "t=i_2"))
                     (rule "inEqSimp_commuteGeq" (formula "10") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                     (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                     (rule "add_literals" (formula "10") (term "0,0,1"))
                     (rule "leq_literals" (formula "10") (term "0,1"))
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "3"))
                     (rule "qeq_literals" (formula "10") (term "0,1"))
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "notLeft" (formula "10"))
                     (rule "replace_known_right" (formula "20") (term "1,0,1") (ifseqformula "13"))
                     (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "13")))
                     (rule "orRight" (formula "20"))
                     (rule "apply_eq_boolean_rigid" (formula "1") (term "1") (ifseqformula "20"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "orRight" (formula "12"))
                     (rule "referencedObjectIsCreatedRight" (formula "13") (ifseqformula "14"))
                     (rule "close" (formula "13") (ifseqformula "5"))
                  )
               )
            )
            (branch "Null Reference (_messages = null)"
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
               (rule "closeFalse" (formula "1"))
            )
            (branch "Index Out of Bounds (_messages != null, but i Out of Bounds!)"
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
               (rule "translateJavaAddInt" (formula "16") (term "0,1,1,1,0,0"))
               (rule "translateJavaUnaryMinusInt" (formula "16") (term "0,0,0,0,0,0,1,1,0,1"))
               (rule "translateJavaAddInt" (formula "16") (term "0,1,1,0,0,0,1,1,0,1"))
               (rule "translateJavaAddInt" (formula "16") (term "0,1,1,1,0,1"))
               (rule "translateJavaUnaryMinusInt" (formula "12") (term "0,0,0,0,0"))
               (rule "translateJavaAddInt" (formula "12") (term "0,1,1,0,0"))
               (rule "neg_literal" (formula "16") (term "0,0,0,0,0,0,1,1,0,1"))
               (rule "neg_literal" (formula "12") (term "0,0,0,0,0"))
               (rule "andLeft" (formula "12"))
               (rule "andLeft" (formula "12"))
               (rule "andLeft" (formula "12"))
               (rule "andLeft" (formula "14"))
               (rule "andLeft" (formula "12"))
               (rule "notLeft" (formula "16"))
               (rule "notLeft" (formula "15"))
               (rule "eqSymm" (formula "21") (term "1,0,0,1,0,1,1,0,1"))
               (rule "eqSymm" (formula "21") (term "1,0,0,0,1,1,0,1"))
               (rule "eqSymm" (formula "14"))
               (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "17"))
               (builtin "One Step Simplification" (formula "15"))
               (rule "polySimp_addComm0" (formula "21") (term "0,1,1,1,0,0"))
               (rule "polySimp_addComm0" (formula "21") (term "0,1,1,1,0,1"))
               (rule "polySimp_addComm0" (formula "21") (term "0,0,1,0,0,0,1,1,0,1"))
               (rule "polySimp_addComm0" (formula "14") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,0,0,1,1,0,1"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,0,0,1,1,0,1"))
               (rule "polySimp_addComm1" (formula "21") (term "0,1,0,0,0,0,1,1,0,1"))
               (rule "dismissNonSelectedField" (formula "15") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "1") (term "0,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "13"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "13") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,0,0,1,1,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "12"))
               (rule "applyEq" (formula "21") (term "1,2,1,0,0,0,1,0,1,1,0,0") (ifseqformula "4"))
               (rule "add_zero_right" (formula "21") (term "2,1,0,0,0,1,0,1,1,0,0"))
               (rule "applyEq" (formula "15") (term "1,2,1,0,0,0") (ifseqformula "4"))
               (rule "add_literals" (formula "15") (term "2,1,0,0,0"))
               (rule "applyEq" (formula "21") (term "1,2,1,0,0,0,1,0,0") (ifseqformula "4"))
               (rule "add_zero_right" (formula "21") (term "2,1,0,0,0,1,0,0"))
               (rule "applyEq" (formula "14") (term "1,2,1,0,0,0,1,0") (ifseqformula "4"))
               (rule "add_zero_right" (formula "14") (term "2,1,0,0,0,1,0"))
               (rule "eqSymm" (formula "14"))
               (rule "applyEq" (formula "3") (term "0") (ifseqformula "4"))
               (rule "qeq_literals" (formula "3"))
               (rule "true_left" (formula "3"))
               (rule "applyEq" (formula "13") (term "1,2,1,0,0,0,0") (ifseqformula "3"))
               (rule "add_literals" (formula "13") (term "2,1,0,0,0,0"))
               (rule "eqSymm" (formula "13"))
               (rule "blockThrow" (formula "20") (term "1,0,0,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "1,0,0,0,0,1,1,0,1"))
               (rule "polySimp_mulLiterals" (formula "20") (term "0,1,0,0,0,0,1,1,0,1"))
               (rule "polySimp_elimOne" (formula "20") (term "0,1,0,0,0,0,1,1,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
               (rule "mul_literals" (formula "1") (term "1,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "12"))
               (rule "polySimp_mulLiterals" (formula "12") (term "0"))
               (rule "polySimp_elimOne" (formula "12") (term "0"))
               (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "12"))
               (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
               (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0,0"))
               (rule "leq_literals" (formula "1") (term "0,0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "2"))
               (rule "leq_literals" (formula "11") (term "0"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "true_left" (formula "11"))
               (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
               (rule "qeq_literals" (formula "2") (term "0"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "closeFalse" (formula "2"))
            )
         )
         (branch "Use Case"
            (builtin "One Step Simplification" (formula "14"))
            (rule "variableDeclarationAssign" (formula "14") (term "1") (userinteraction))
            (rule "variableDeclaration" (formula "14") (term "1") (newnames "b_3_1") (userinteraction))
            (rule "greater_equal_than_comparison_simple" (formula "14") (term "1") (userinteraction))
            (rule "methodCallEmpty" (formula "14") (term "1,1") (userinteraction))
            (rule "emptyModality" (formula "14") (term "1,1") (userinteraction))
            (builtin "One Step Simplification" (formula "14"))
            (rule "methodCallReturn" (formula "14") (term "1,1") (userinteraction))
            (rule "assignment" (formula "14") (term "1,1") (userinteraction))
            (rule "methodCallEmpty" (formula "14") (term "1,1,1") (userinteraction))
            (rule "tryEmpty" (formula "14") (term "1,1,1") (userinteraction))
            (rule "emptyModality" (formula "14") (term "1,1,1") (userinteraction))
            (builtin "One Step Simplification" (formula "14"))
            (rule "impRight" (formula "14") (userinteraction))
            (rule "notLeft" (formula "1") (userinteraction))
            (builtin "One Step Simplification" (formula "10"))
            (rule "andRight" (formula "15") (userinteraction))
            (branch "Case 1"
               (rule "andRight" (formula "15") (userinteraction))
               (branch "Case 1"
                  (rule "andLeft" (formula "10") (userinteraction))
                  (rule "andLeft" (formula "10") (userinteraction))
                  (rule "andLeft" (formula "10") (userinteraction))
                  (rule "translateJavaAddInt" (formula "11") (term "0,1") (userinteraction))
                  (rule "translateJavaUnaryMinusInt" (formula "10") (term "0,0") (userinteraction))
                  (rule "neg_literal" (formula "10") (term "0,0") (userinteraction))
                  (rule "cut" (inst "cutFormula=i_2 = Z(neglit(1(#)))") (userinteraction))
                  (branch "CUT: i_2 = -1 TRUE"
                     (rule "applyEqRigid" (formula "12") (term "0,0,1") (ifseqformula "1") (userinteraction))
                     (rule "add_literals" (formula "12") (term "0,1") (userinteraction))
                     (rule "andLeft" (formula "13"))
                     (rule "andLeft" (formula "11"))
                     (rule "notLeft" (formula "15"))
                     (rule "notLeft" (formula "14"))
                     (rule "eqSymm" (formula "13"))
                     (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "16"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "dismissNonSelectedField" (formula "14") (term "0,0"))
                     (rule "inEqSimp_geqRight" (formula "17"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "13"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "13") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "12"))
                     (rule "applyEq" (formula "12") (term "0") (ifseqformula "2"))
                     (rule "qeq_literals" (formula "12"))
                     (rule "true_left" (formula "12"))
                     (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "2"))
                     (rule "add_literals" (formula "1") (term "0"))
                     (rule "leq_literals" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "applyEq" (formula "13") (term "1,2,1,0,0,0") (ifseqformula "3"))
                     (rule "add_zero_right" (formula "13") (term "2,1,0,0,0"))
                     (rule "applyEq" (formula "19") (term "1") (ifseqformula "12"))
                     (rule "applyEq" (formula "12") (term "1,2,1,0,0,0,1,0") (ifseqformula "3"))
                     (rule "add_zero_right" (formula "12") (term "2,1,0,0,0,1,0"))
                     (rule "eqSymm" (formula "12"))
                     (rule "applyEq" (formula "19") (term "1,2,1,0,0,0,2,0") (ifseqformula "3"))
                     (rule "add_zero_right" (formula "19") (term "2,1,0,0,0,2,0"))
                     (rule "applyEq" (formula "2") (term "0") (ifseqformula "3"))
                     (rule "qeq_literals" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "applyEq" (formula "11") (term "1,2,1,0,0,0,0") (ifseqformula "2"))
                     (rule "add_literals" (formula "11") (term "2,1,0,0,0,0"))
                     (rule "eqSymm" (formula "11"))
                     (rule "applyEq" (formula "10") (term "1,0,0") (ifseqformula "1"))
                     (rule "add_literals" (formula "10") (term "0,0"))
                     (rule "add_zero_left" (formula "10") (term "0"))
                     (rule "applyEq" (formula "18") (term "1,2,1,0,0,0,1") (ifseqformula "2"))
                     (rule "add_zero_right" (formula "18") (term "2,1,0,0,0,1"))
                     (rule "inEqSimp_invertInEq0" (formula "10"))
                     (rule "times_zero_2" (formula "10") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                     (rule "polySimp_elimOne" (formula "10") (term "0"))
                     (rule "array2seqDef" (formula "10") (term "1") (inst "u=u"))
                     (rule "eqSymm" (formula "10"))
                     (rule "array2seqDef" (formula "17") (term "1") (inst "u=u"))
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "closeTrue" (formula "17"))
                  )
                  (branch "CUT: i_2 = -1 FALSE"
                     (rule "andLeft" (formula "12"))
                     (rule "andLeft" (formula "10"))
                     (rule "notLeft" (formula "14"))
                     (rule "notLeft" (formula "13"))
                     (rule "eqSymm" (formula "12"))
                     (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "15"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "polySimp_addComm0" (formula "12") (term "0,0"))
                     (rule "dismissNonSelectedField" (formula "13") (term "0,0"))
                     (rule "inEqSimp_geqRight" (formula "17"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "12"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "12") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "11"))
                     (rule "applyEq" (formula "14") (term "1,2,1,0,0,0") (ifseqformula "3"))
                     (rule "add_zero_right" (formula "14") (term "2,1,0,0,0"))
                     (rule "applyEq" (formula "13") (term "1,2,1,0,0,0,1,0") (ifseqformula "3"))
                     (rule "add_zero_right" (formula "13") (term "2,1,0,0,0,1,0"))
                     (rule "eqSymm" (formula "13"))
                     (rule "applyEq" (formula "2") (term "0") (ifseqformula "3"))
                     (rule "qeq_literals" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "applyEq" (formula "20") (term "1,2,1,0,0,0,2,0") (ifseqformula "2"))
                     (rule "add_zero_right" (formula "20") (term "2,1,0,0,0,2,0"))
                     (rule "applyEq" (formula "20") (term "1,2,1,0,0,0,1,1") (ifseqformula "2"))
                     (rule "add_literals" (formula "20") (term "2,1,0,0,0,1,1"))
                     (rule "applyEq" (formula "12") (term "1,2,1,0,0,0,0") (ifseqformula "2"))
                     (rule "add_zero_right" (formula "12") (term "2,1,0,0,0,0"))
                     (rule "eqSymm" (formula "12"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "11"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                     (rule "polySimp_elimOne" (formula "11") (term "0"))
                     (rule "inEqSimp_strengthen1" (formula "10") (ifseqformula "16"))
                     (rule "add_literals" (formula "10") (term "1"))
                     (rule "inEqSimp_contradEq7" (formula "16") (ifseqformula "10"))
                     (rule "mul_literals" (formula "16") (term "1,0,0"))
                     (rule "add_literals" (formula "16") (term "0,0"))
                     (rule "leq_literals" (formula "16") (term "0"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "false_right" (formula "16"))
                     (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "10") (term "0"))
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "closeFalse" (formula "10"))
                  )
               )
               (branch "Case 2"
                  (rule "translateJavaUnaryMinusInt" (formula "10") (term "0,0,0,0,0"))
                  (rule "translateJavaAddInt" (formula "10") (term "0,1,1,0,0"))
                  (rule "neg_literal" (formula "10") (term "0,0,0,0,0"))
                  (rule "andLeft" (formula "10"))
                  (rule "andLeft" (formula "10"))
                  (rule "close" (formula "17") (ifseqformula "11"))
               )
            )
            (branch "Case 2"
               (rule "translateJavaUnaryMinusInt" (formula "10") (term "0,0,0,0,0"))
               (rule "translateJavaAddInt" (formula "10") (term "0,1,1,0,0"))
               (rule "neg_literal" (formula "10") (term "0,0,0,0,0"))
               (rule "andLeft" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "andLeft" (formula "11"))
               (rule "andLeft" (formula "10"))
               (rule "notLeft" (formula "13"))
               (rule "notLeft" (formula "12"))
               (rule "andLeft" (formula "10"))
               (rule "allRight" (formula "20") (inst "sk=f_0"))
               (rule "allRight" (formula "20") (inst "sk=o_0"))
               (rule "orRight" (formula "20"))
               (rule "eqSymm" (formula "12"))
               (rule "eqSymm" (formula "21"))
               (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "15"))
               (builtin "One Step Simplification" (formula "13"))
               (rule "polySimp_addComm0" (formula "12") (term "0,0"))
               (rule "inEqSimp_geqRight" (formula "16"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "dismissNonSelectedField" (formula "14") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "12"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "12") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "11"))
               (rule "applyEq" (formula "2") (term "0") (ifseqformula "3"))
               (rule "qeq_literals" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "applyEq" (formula "20") (term "1,2,1,0,0,0,0") (ifseqformula "2"))
               (rule "add_zero_right" (formula "20") (term "2,1,0,0,0,0"))
               (rule "applyEq" (formula "12") (term "1,2,1,0,0,0,1,0") (ifseqformula "2"))
               (rule "add_zero_right" (formula "12") (term "2,1,0,0,0,1,0"))
               (rule "eqSymm" (formula "12"))
               (rule "applyEq" (formula "13") (term "1,2,1,0,0,0") (ifseqformula "2"))
               (rule "add_zero_right" (formula "13") (term "2,1,0,0,0"))
               (rule "applyEq" (formula "12") (term "1,2,1,0,0,0,0") (ifseqformula "2"))
               (rule "add_zero_right" (formula "12") (term "2,1,0,0,0,0"))
               (rule "eqSymm" (formula "12"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "11"))
               (rule "polySimp_mulLiterals" (formula "11") (term "0"))
               (rule "polySimp_elimOne" (formula "11") (term "0"))
               (rule "array2seqDef" (formula "12") (term "1") (inst "u=u"))
               (rule "eqSymm" (formula "12"))
               (rule "eqSeqDef2" (formula "12") (inst "iv=iv") (ifseqformula "12"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "true_left" (formula "12"))
               (rule "inEqSimp_antiSymm" (formula "10") (ifseqformula "1"))
               (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "10"))
               (rule "leq_literals" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "applyEq" (formula "10") (term "0") (ifseqformula "9"))
               (rule "qeq_literals" (formula "10"))
               (rule "true_left" (formula "10"))
               (rule "applyEqRigid" (formula "10") (term "1,1") (ifseqformula "9"))
               (rule "add_literals" (formula "10") (term "1"))
               (rule "pullOutSelect" (formula "17") (term "0") (inst "selectSK=f_0_0"))
               (rule "simplifySelectOfAnon" (formula "1"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "eqSymm" (formula "18"))
               (rule "dismissNonSelectedField" (formula "1") (term "0,0,1,0,0"))
               (rule "pullOutSelect" (formula "11") (term "0,0") (inst "selectSK=java_lang_Object_created__5"))
               (rule "simplifySelectOfMemset" (formula "11"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "simplifySelectOfStore" (formula "11"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "simplifySelectOfStore" (formula "11"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "simplifySelectOfStore" (formula "11"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "simplifySelectOfCreate" (formula "11"))
               (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "16")))
               (rule "castDel" (formula "11") (term "1,0"))
               (rule "apply_eq_boolean" (formula "11") (term "2,0") (ifseqformula "13"))
               (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
               (rule "simplifySelectOfStore" (formula "1"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "eqSymm" (formula "1") (term "0,0,0"))
               (rule "eqSymm" (formula "1") (term "1,0,0"))
               (rule "pullOutSelect" (formula "2") (term "0,0,1,0,0") (inst "selectSK=java_lang_Object_created__6"))
               (rule "simplifySelectOfMemset" (formula "2"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "simplifySelectOfStore" (formula "2"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "simplifySelectOfStore" (formula "2"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "simplifySelectOfStore" (formula "2"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "simplifySelectOfCreate" (formula "2"))
               (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "18")))
               (rule "castDel" (formula "2") (term "1,0"))
               (rule "eqSymm" (formula "2") (term "0,0"))
               (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_2"))
               (rule "simplifySelectOfMemset" (formula "1"))
               (rule "elementOfArrayRange" (formula "1") (term "0,0,0") (inst "iv=iv"))
               (rule "eqSymm" (formula "1") (term "0,0,0,1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1,0,0,0"))
               (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_3"))
               (rule "simplifySelectOfStore" (formula "1"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "eqSymm" (formula "1") (term "1,0,0"))
               (rule "eqSymm" (formula "1") (term "0,0,0"))
               (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_4"))
               (rule "simplifySelectOfStore" (formula "1"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "eqSymm" (formula "1") (term "1,0,0"))
               (rule "eqSymm" (formula "1") (term "0,0,0"))
               (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_5"))
               (rule "simplifySelectOfStore" (formula "1"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "eqSymm" (formula "1") (term "0,0,0"))
               (rule "eqSymm" (formula "1") (term "1,0,0"))
               (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_6"))
               (rule "simplifySelectOfCreate" (formula "1"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "eqSymm" (formula "1") (term "0,0,0,0"))
               (rule "replace_known_right" (formula "1") (term "0,1,0,0,0") (ifseqformula "23"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "commute_and" (formula "6") (term "0,0"))
               (rule "commute_and" (formula "8") (term "0,0"))
               (rule "commute_and" (formula "4") (term "0,0"))
               (rule "commute_and" (formula "3") (term "0,0"))
               (rule "commute_and" (formula "2") (term "0,0"))
               (rule "commute_and" (formula "1") (term "0,0"))
               (rule "commute_and_2" (formula "5") (term "0,1,0,0,0"))
               (rule "inEqSimp_and_contradInEq1" (formula "5") (term "0,1,0,0,0"))
               (rule "qeq_literals" (formula "5") (term "1,0,1,0,0,0"))
               (builtin "One Step Simplification" (formula "5"))
               (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
               (rule "hideAuxiliaryEq" (formula "5"))
               (rule "ifthenelse_split" (formula "17") (term "0"))
               (branch "x_arr_2 = msg_2 TRUE"
                  (rule "applyEqReverse" (formula "19") (term "0,0") (ifseqformula "18"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "true_left" (formula "19"))
                  (rule "hideAuxiliaryEq" (formula "18"))
                  (rule "applyEq" (formula "2") (term "1,1,0,0") (ifseqformula "17"))
                  (rule "applyEq" (formula "20") (term "1,0") (ifseqformula "17"))
                  (rule "applyEq" (formula "4") (term "1,1,0,0") (ifseqformula "17"))
                  (rule "applyEq" (formula "8") (term "0,0") (ifseqformula "17"))
                  (rule "applyEq" (formula "6") (term "1,0,0") (ifseqformula "17"))
                  (rule "applyEq" (formula "3") (term "1,1,0,0") (ifseqformula "17"))
                  (rule "applyEq" (formula "1") (term "1,1,0,0") (ifseqformula "17"))
                  (rule "applyEq" (formula "20") (term "0") (ifseqformula "17"))
                  (rule "applyEq" (formula "5") (term "1,1,0,0") (ifseqformula "17"))
                  (rule "applyEq" (formula "9") (term "0,0") (ifseqformula "17"))
                  (rule "cut_direct" (formula "21") (term "0,0"))
                  (branch "CUT: o_0 = null TRUE"
                     (builtin "One Step Simplification" (formula "22"))
                     (rule "false_right" (formula "22"))
                     (rule "replace_known_left" (formula "8") (term "0,1,0,0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "8"))
                     (rule "applyEqReverse" (formula "22") (term "1") (ifseqformula "8"))
                     (rule "hideAuxiliaryEq" (formula "8"))
                     (rule "applyEqRigid" (formula "7") (term "0,0,0") (ifseqformula "1"))
                     (rule "eqSymm" (formula "7") (term "0,0"))
                     (rule "replace_known_right" (formula "7") (term "0,0") (ifseqformula "19"))
                     (builtin "One Step Simplification" (formula "7"))
                     (rule "hideAuxiliaryEq" (formula "7"))
                     (rule "applyEq" (formula "3") (term "0,1,0,0") (ifseqformula "1"))
                     (rule "eqSymm" (formula "3") (term "1,0,0"))
                     (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "18"))
                     (builtin "One Step Simplification" (formula "3"))
                     (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "applyEqRigid" (formula "5") (term "0,1,0,0") (ifseqformula "1"))
                     (rule "eqSymm" (formula "5") (term "1,0,0"))
                     (rule "replace_known_right" (formula "5") (term "1,0,0") (ifseqformula "17"))
                     (builtin "One Step Simplification" (formula "5"))
                     (rule "applyEqReverse" (formula "19") (term "1") (ifseqformula "5"))
                     (rule "hideAuxiliaryEq" (formula "5"))
                     (rule "applyEqRigid" (formula "18") (term "1,0") (ifseqformula "1"))
                     (rule "applyEqRigid" (formula "2") (term "1,2,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "3") (term "0,1,0,0") (ifseqformula "1"))
                     (rule "eqSymm" (formula "3") (term "1,0,0"))
                     (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "16"))
                     (builtin "One Step Simplification" (formula "3"))
                     (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "applyEqRigid" (formula "3") (term "0,1,0,0") (ifseqformula "1"))
                     (rule "eqSymm" (formula "3") (term "1,0,0"))
                     (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "15"))
                     (builtin "One Step Simplification" (formula "3"))
                     (rule "applyEqReverse" (formula "17") (term "1") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "applyEq" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                     (rule "eqSymm" (formula "2") (term "1,0,0"))
                     (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "14"))
                     (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "16")))
                     (rule "closeFalse" (formula "2"))
                  )
                  (branch "CUT: o_0 = null FALSE"
                     (builtin "One Step Simplification" (formula "22"))
                     (rule "notRight" (formula "22"))
                     (rule "replace_known_right" (formula "8") (term "0,1,0,0") (ifseqformula "22"))
                     (builtin "One Step Simplification" (formula "8"))
                     (rule "ifthenelse_negated" (formula "8") (term "0"))
                     (rule "applyEq" (formula "7") (term "2,0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "7"))
                     (rule "applyEqReverse" (formula "8") (term "0,0,0") (ifseqformula "7"))
                     (builtin "One Step Simplification" (formula "8"))
                     (rule "applyEqReverse" (formula "23") (term "1") (ifseqformula "8"))
                     (rule "hideAuxiliaryEq" (formula "7"))
                     (rule "hideAuxiliaryEq" (formula "7"))
                     (rule "ifthenelse_split" (formula "2") (term "0"))
                     (branch "f_0 = java.lang.Object::<created> & o_0 = msg_2 TRUE"
                        (rule "andLeft" (formula "2"))
                        (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "6"))
                        (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "replace_known_left" (formula "7") (term "1,0,0") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "7"))
                        (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "2"))
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                        (rule "hideAuxiliaryEq" (formula "5"))
                        (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                        (rule "close" (formula "17") (ifseqformula "1"))
                     )
                     (branch "f_0 = java.lang.Object::<created> & o_0 = msg_2 FALSE"
                        (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                        (rule "hideAuxiliaryEq" (formula "2"))
                        (rule "ifthenelse_split" (formula "2") (term "0"))
                        (branch "f_0 = java.lang.Object::<transient> & o_0 = msg_2 TRUE"
                           (rule "andLeft" (formula "2"))
                           (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                           (rule "hideAuxiliaryEq" (formula "4"))
                           (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "5"))
                           (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "replace_known_left" (formula "17") (term "1") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "17"))
                           (rule "applyEq" (formula "21") (term "0") (ifseqformula "3"))
                           (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                           (rule "hideAuxiliaryEq" (formula "4"))
                           (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                           (rule "hideAuxiliaryEq" (formula "4"))
                           (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                           (rule "close" (formula "16") (ifseqformula "1"))
                        )
                        (branch "f_0 = java.lang.Object::<transient> & o_0 = msg_2 FALSE"
                           (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                           (rule "hideAuxiliaryEq" (formula "2"))
                           (rule "ifthenelse_split" (formula "2") (term "0"))
                           (branch " f_0 = java.lang.Object::<transactionConditionallyUpdated> & o_0 = msg_2 TRUE"
                              (rule "andLeft" (formula "2"))
                              (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                              (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "3")))
                              (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                              (rule "hideAuxiliaryEq" (formula "4"))
                              (rule "hideAuxiliaryEq" (formula "4"))
                              (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "replace_known_left" (formula "16") (term "1") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "replace_known_left" (formula "15") (term "1") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "15"))
                              (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "applyEqReverse" (formula "21") (term "1") (ifseqformula "4"))
                              (rule "hideAuxiliaryEq" (formula "4"))
                              (rule "applyEqRigid" (formula "20") (term "2,0") (ifseqformula "2"))
                              (rule "narrowSelectType" (formula "20") (term "0") (ifseqformula "6"))
                              (builtin "One Step Simplification" (formula "20"))
                              (rule "notRight" (formula "20"))
                              (rule "applyEq" (formula "20") (term "0") (ifseqformula "4"))
                              (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "4"))
                              (rule "close" (formula "17") (ifseqformula "2"))
                           )
                           (branch " f_0 = java.lang.Object::<transactionConditionallyUpdated> & o_0 = msg_2 FALSE"
                              (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "ifthenelse_split" (formula "2") (term "0"))
                              (branch "f_0 = java.lang.Object::<initialized> & o_0 = msg_2 TRUE"
                                 (rule "andLeft" (formula "2"))
                                 (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "3")))
                                 (rule "applyEqReverse" (formula "22") (term "1") (ifseqformula "4"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "replace_known_left" (formula "15") (term "1") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "15"))
                                 (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "14"))
                                 (rule "replace_known_left" (formula "16") (term "1") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "16"))
                                 (rule "applyEqRigid" (formula "20") (term "0") (ifseqformula "3"))
                                 (rule "applyEqRigid" (formula "1") (term "1,0") (ifseqformula "3"))
                                 (rule "close" (formula "17") (ifseqformula "1"))
                              )
                              (branch "f_0 = java.lang.Object::<initialized> & o_0 = msg_2 FALSE"
                                 (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "13"))
                                 (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "21")))
                                 (rule "closeFalse" (formula "2"))
                              )
                           )
                        )
                     )
                  )
               )
               (branch "x_arr_2 = msg_2 FALSE"
                  (rule "applyEqReverse" (formula "18") (term "0,0") (ifseqformula "17"))
                  (builtin "One Step Simplification" (formula "18"))
                  (rule "hideAuxiliaryEq" (formula "17"))
                  (rule "cut_direct" (formula "24") (term "0,0"))
                  (branch "CUT: o_0 = null TRUE"
                     (builtin "One Step Simplification" (formula "25"))
                     (rule "false_right" (formula "25"))
                     (rule "replace_known_left" (formula "8") (term "0,1,0,0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "8"))
                     (rule "applyEqReverse" (formula "25") (term "1") (ifseqformula "8"))
                     (rule "hideAuxiliaryEq" (formula "8"))
                     (rule "applyEq" (formula "24") (term "1,0") (ifseqformula "1"))
                     (rule "applyEqRigid" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                     (rule "eqSymm" (formula "2") (term "1,0,0"))
                     (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "22"))
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                     (rule "hideAuxiliaryEq" (formula "2"))
                     (rule "applyEqRigid" (formula "3") (term "0,1,0,0") (ifseqformula "1"))
                     (rule "eqSymm" (formula "3") (term "1,0,0"))
                     (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "21"))
                     (builtin "One Step Simplification" (formula "3"))
                     (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "applyEq" (formula "5") (term "1,2,0") (ifseqformula "1"))
                     (rule "applyEqRigid" (formula "4") (term "0,1,0,0") (ifseqformula "1"))
                     (rule "eqSymm" (formula "4") (term "1,0,0"))
                     (rule "replace_known_right" (formula "4") (term "1,0,0") (ifseqformula "20"))
                     (builtin "One Step Simplification" (formula "4"))
                     (rule "applyEqReverse" (formula "22") (term "1") (ifseqformula "4"))
                     (rule "hideAuxiliaryEq" (formula "4"))
                     (rule "applyEq" (formula "3") (term "0,1,0,0") (ifseqformula "1"))
                     (rule "eqSymm" (formula "3") (term "1,0,0"))
                     (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "19"))
                     (builtin "One Step Simplification" (formula "3"))
                     (rule "applyEqReverse" (formula "21") (term "1") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "applyEqRigid" (formula "3") (term "0,0,0") (ifseqformula "1"))
                     (rule "eqSymm" (formula "3") (term "0,0"))
                     (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "18"))
                     (builtin "One Step Simplification" (formula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "applyEqRigid" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                     (rule "eqSymm" (formula "2") (term "1,0,0"))
                     (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "17"))
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "applyEqReverse" (formula "19") (term "1") (ifseqformula "2"))
                     (rule "hideAuxiliaryEq" (formula "2"))
                     (rule "eqSymm" (formula "18"))
                     (rule "applyEq" (formula "18") (term "1,0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "closeTrue" (formula "18"))
                  )
                  (branch "CUT: o_0 = null FALSE"
                     (builtin "One Step Simplification" (formula "25"))
                     (rule "notRight" (formula "25"))
                     (rule "replace_known_right" (formula "8") (term "0,1,0,0") (ifseqformula "25"))
                     (builtin "One Step Simplification" (formula "8"))
                     (rule "ifthenelse_negated" (formula "8") (term "0"))
                     (rule "applyEq" (formula "7") (term "2,0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "7"))
                     (rule "applyEqReverse" (formula "8") (term "0,0,0") (ifseqformula "7"))
                     (builtin "One Step Simplification" (formula "8"))
                     (rule "applyEqReverse" (formula "26") (term "1") (ifseqformula "8"))
                     (rule "hideAuxiliaryEq" (formula "7"))
                     (rule "hideAuxiliaryEq" (formula "7"))
                     (rule "ifthenelse_split" (formula "2") (term "0"))
                     (branch "f_0 = java.lang.Object::<created> & o_0 = x_arr_2 TRUE"
                        (rule "andLeft" (formula "2"))
                        (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "6"))
                        (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "replace_known_left" (formula "7") (term "1,0,0") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "7"))
                        (rule "applyEqRigid" (formula "6") (term "0,0,0") (ifseqformula "2"))
                        (builtin "One Step Simplification" (formula "6"))
                        (rule "applyEqReverse" (formula "7") (term "2,0") (ifseqformula "6"))
                        (rule "hideAuxiliaryEq" (formula "6"))
                        (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "2"))
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                        (rule "hideAuxiliaryEq" (formula "5"))
                        (rule "applyEqRigid" (formula "23") (term "2,0") (ifseqformula "2"))
                        (rule "narrowSelectType" (formula "23") (term "0") (ifseqformula "8"))
                        (rule "eqSymm" (formula "23"))
                        (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                        (rule "close" (formula "19") (ifseqformula "1"))
                     )
                     (branch "f_0 = java.lang.Object::<created> & o_0 = x_arr_2 FALSE"
                        (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                        (rule "hideAuxiliaryEq" (formula "2"))
                        (rule "ifthenelse_split" (formula "2") (term "0"))
                        (branch "f_0 = java.lang.Object::<transient> & o_0 = x_arr_2 TRUE"
                           (rule "andLeft" (formula "2"))
                           (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                           (rule "hideAuxiliaryEq" (formula "4"))
                           (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "5"))
                           (rule "replace_known_left" (formula "17") (term "1") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "17"))
                           (rule "applyEq" (formula "25") (term "2,0") (ifseqformula "2"))
                           (rule "narrowSelectType" (formula "25") (term "0") (ifseqformula "9"))
                           (rule "eqSymm" (formula "25"))
                           (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                           (rule "hideAuxiliaryEq" (formula "4"))
                           (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                           (rule "close" (formula "20") (ifseqformula "1"))
                        )
                        (branch "f_0 = java.lang.Object::<transient> & o_0 = x_arr_2 FALSE"
                           (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                           (rule "hideAuxiliaryEq" (formula "2"))
                           (rule "ifthenelse_split" (formula "2") (term "0"))
                           (branch " f_0 = java.lang.Object::<transactionConditionallyUpdated> & o_0 = x_arr_2 TRUE"
                              (rule "andLeft" (formula "2"))
                              (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                              (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "3")))
                              (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                              (rule "hideAuxiliaryEq" (formula "4"))
                              (rule "hideAuxiliaryEq" (formula "4"))
                              (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "replace_known_left" (formula "16") (term "1") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "replace_known_left" (formula "15") (term "1") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "15"))
                              (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "applyEqReverse" (formula "24") (term "1") (ifseqformula "4"))
                              (rule "hideAuxiliaryEq" (formula "4"))
                              (rule "applyEq" (formula "15") (term "0") (ifseqformula "2"))
                              (builtin "One Step Simplification" (formula "15"))
                              (rule "false_right" (formula "15"))
                              (rule "applyEq" (formula "14") (term "0") (ifseqformula "2"))
                              (builtin "One Step Simplification" (formula "14"))
                              (rule "false_right" (formula "14"))
                              (rule "applyEq" (formula "21") (term "2,0") (ifseqformula "2"))
                              (rule "narrowSelectType" (formula "21") (term "0") (ifseqformula "6"))
                              (builtin "One Step Simplification" (formula "21"))
                              (rule "notRight" (formula "21"))
                              (rule "applyEq" (formula "21") (term "0") (ifseqformula "4"))
                              (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "4"))
                              (rule "close" (formula "18") (ifseqformula "2"))
                           )
                           (branch " f_0 = java.lang.Object::<transactionConditionallyUpdated> & o_0 = x_arr_2 FALSE"
                              (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "ifthenelse_split" (formula "2") (term "0"))
                              (branch "f_0 = java.lang.Object::<initialized> & o_0 = x_arr_2 TRUE"
                                 (rule "andLeft" (formula "2"))
                                 (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "2")))
                                 (rule "applyEqReverse" (formula "25") (term "1") (ifseqformula "4"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "14"))
                                 (rule "replace_known_left" (formula "15") (term "1") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "15"))
                                 (rule "replace_known_left" (formula "16") (term "1") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "16"))
                                 (rule "applyEqRigid" (formula "14") (term "0") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "14"))
                                 (rule "false_right" (formula "14"))
                                 (rule "applyEq" (formula "23") (term "2,0") (ifseqformula "2"))
                                 (rule "narrowSelectType" (formula "23") (term "0") (ifseqformula "6"))
                                 (rule "applyEqRigid" (formula "14") (term "0") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "14"))
                                 (rule "false_right" (formula "14"))
                                 (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                 (rule "close" (formula "18") (ifseqformula "1"))
                              )
                              (branch "f_0 = java.lang.Object::<initialized> & o_0 = x_arr_2 FALSE"
                                 (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "13"))
                                 (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "24")))
                                 (rule "closeFalse" (formula "2"))
                              )
                           )
                        )
                     )
                  )
               )
            )
         )
      )
      (branch "Null Reference (_messages = null)"
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Null Reference (newObject = null)"
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
      (rule "closeFalse" (formula "1"))
   )
)
)

}
