\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Jul 10 16:59:45 CEST 2017
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=80000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , permissions-permissions\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Mon Jul 10 16:59:45 CEST 2017
name=verif.selectvoting.system.core.ConservativeExtension[verif.selectvoting.system.core.ConservativeExtension\\:\\:storeMessages([[B)].JML normal_behavior operation contract.0
contract=verif.selectvoting.system.core.ConservativeExtension[verif.selectvoting.system.core.ConservativeExtension\\:\\:storeMessages([[B)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mihai" ) (keyVersion "0814267c8a184b1e7da1309b7a9875095ca72975"))

(autoModeTime "2925")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "msg,exc,heapAtPre,o,f") (userinteraction))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "nonNull" (formula "4") (inst "i=i") (userinteraction))
(rule "greater_literals" (formula "4") (term "0,1") (userinteraction))
(builtin "One Step Simplification" (formula "4"))
(rule "andLeft" (formula "4") (userinteraction))
(rule "notLeft" (formula "4") (userinteraction))
(rule "assignment" (formula "6") (term "1") (userinteraction))
(rule "methodBodyExpand" (formula "6") (term "1,1") (newnames "heapBefore_storeMessages,savedHeapBefore_storeMessages") (userinteraction))
(builtin "One Step Simplification" (formula "6"))
(builtin "Use Operation Contract" (formula "6") (newnames "heapBefore_copyOf,result,exc_0,heapAfter_copyOf,anon_heap_copyOf") (contract "verif.selectvoting.system.core.ConservativeExtension[verif.selectvoting.system.core.ConservativeExtension::copyOf([[B)].JML normal_behavior operation contract.0"))
(branch
   (builtin "One Step Simplification" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "notLeft" (formula "10"))
   (rule "notLeft" (formula "9"))
   (rule "activeUseStaticFieldWriteAccess" (formula "14") (term "1,1") (inst "#v0=x_arr_arr") (userinteraction))
   (rule "variableDeclarationAssign" (formula "14") (term "1,1") (userinteraction))
   (rule "variableDeclaration" (formula "14") (term "1,1") (newnames "x_arr_arr_1") (userinteraction))
   (rule "assignment" (formula "14") (term "1,1") (userinteraction))
   (rule "assignment_write_static_attribute" (formula "14") (term "1,1,1") (userinteraction))
   (rule "methodCallEmpty" (formula "14") (term "1,1,1,1") (userinteraction))
   (rule "tryEmpty" (formula "14") (term "1,1,1,1") (userinteraction))
   (rule "emptyModality" (formula "14") (term "1,1,1,1") (userinteraction))
   (builtin "One Step Simplification" (formula "14"))
   (rule "andRight" (formula "14") (userinteraction))
   (branch "Case 1"
      (rule "andRight" (formula "14") (userinteraction))
      (branch "Case 1"
         (rule "array2seq2dDef" (formula "14") (term "0") (inst "u=u") (userinteraction))
         (rule "array2seq2dDef" (formula "14") (term "1") (inst "u=u") (userinteraction))
         (rule "equalityToSeqGetAndSeqLenRight" (formula "14") (inst "iv=iv") (userinteraction))
         (rule "array2seq2dDef" (formula "8") (term "0") (inst "u=u") (userinteraction))
         (rule "array2seq2dDef" (formula "8") (term "1") (inst "u=u") (userinteraction))
         (rule "equalityToSeqGetAndSeqLen" (formula "8") (inst "iv=iv") (userinteraction))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "7") (term "1") (ifseqformula "6"))
         (rule "sub_literals" (formula "4") (term "2,1,0"))
         (builtin "One Step Simplification" (formula "4"))
         (rule "andLeft" (formula "8"))
         (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "14"))
         (builtin "One Step Simplification" (formula "2"))
         (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "13"))
         (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "12")))
         (rule "lenOfSeqDef" (formula "15") (term "1,1,0,0,1"))
         (rule "polySimp_elimSub" (formula "15") (term "1,1,1,0,0,1"))
         (rule "times_zero_2" (formula "15") (term "1,1,1,1,0,0,1"))
         (rule "add_zero_right" (formula "15") (term "1,1,1,0,0,1"))
         (rule "dismissNonSelectedField" (formula "15") (term "1,2,0,0,0"))
         (rule "dismissNonSelectedField" (formula "15") (term "1,2,0,1,1,0,1"))
         (rule "lenOfSeqDef" (formula "15") (term "1,0"))
         (rule "polySimp_elimSub" (formula "15") (term "1,1,0"))
         (rule "times_zero_2" (formula "15") (term "1,1,1,0"))
         (rule "add_zero_right" (formula "15") (term "1,1,0"))
         (rule "getOfSeqDef" (formula "15") (term "0,1,0,1"))
         (rule "castDel" (formula "15") (term "2,0,1,0,1"))
         (rule "castDel" (formula "15") (term "1,0,1,0,1"))
         (rule "add_zero_right" (formula "15") (term "0,2,1,1,0,1,0,1"))
         (rule "eqSymm" (formula "15") (term "1,0,1"))
         (rule "polySimp_elimSub" (formula "15") (term "1,1,0,1,1,0,1"))
         (rule "times_zero_2" (formula "15") (term "1,1,1,0,1,1,0,1"))
         (rule "add_zero_right" (formula "15") (term "1,1,0,1,1,0,1"))
         (rule "lenOfSeqDef" (formula "8") (term "1"))
         (rule "polySimp_elimSub" (formula "8") (term "1,1"))
         (rule "times_zero_2" (formula "8") (term "1,1,1"))
         (rule "add_zero_right" (formula "8") (term "1,1"))
         (rule "getOfSeqDef" (formula "9") (term "1,1,0"))
         (rule "castDel" (formula "9") (term "2,1,1,0"))
         (rule "castDel" (formula "9") (term "1,1,1,0"))
         (rule "add_zero_right" (formula "9") (term "0,2,1,1,1,1,0"))
         (rule "polySimp_elimSub" (formula "9") (term "1,1,0,1,1,0"))
         (rule "mul_literals" (formula "9") (term "1,1,1,0,1,1,0"))
         (rule "add_zero_right" (formula "9") (term "1,1,0,1,1,0"))
         (rule "getOfSeqDef" (formula "9") (term "0,1,0"))
         (rule "castDel" (formula "9") (term "1,0,1,0"))
         (rule "castDel" (formula "9") (term "2,0,1,0"))
         (rule "add_zero_right" (formula "9") (term "0,2,1,1,0,1,0"))
         (rule "polySimp_elimSub" (formula "9") (term "1,1,0,0,1,0"))
         (rule "times_zero_2" (formula "9") (term "1,1,1,0,0,1,0"))
         (rule "add_zero_right" (formula "9") (term "1,1,0,0,1,0"))
         (rule "lenOfSeqDef" (formula "9") (term "1,1,0,0"))
         (rule "polySimp_elimSub" (formula "9") (term "1,1,1,0,0"))
         (rule "times_zero_2" (formula "9") (term "1,1,1,1,0,0"))
         (rule "add_zero_right" (formula "9") (term "1,1,1,0,0"))
         (rule "lenOfSeqDef" (formula "8") (term "0"))
         (rule "polySimp_elimSub" (formula "8") (term "1,0"))
         (rule "times_zero_2" (formula "8") (term "1,1,0"))
         (rule "add_zero_right" (formula "8") (term "1,0"))
         (rule "lenOfSeqDef" (formula "15") (term "0,0"))
         (rule "polySimp_elimSub" (formula "15") (term "1,0,0"))
         (rule "times_zero_2" (formula "15") (term "1,1,0,0"))
         (rule "add_zero_right" (formula "15") (term "1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
         (rule "dismissNonSelectedField" (formula "15") (term "1,1,1,1,0,1"))
         (rule "getOfSeqDef" (formula "15") (term "0,1,0,1"))
         (rule "castDel" (formula "15") (term "1,0,1,0,1"))
         (rule "castDel" (formula "15") (term "2,0,1,0,1"))
         (rule "add_zero_right" (formula "15") (term "0,2,1,1,0,1,0,1"))
         (rule "eqSymm" (formula "15") (term "1,0,1"))
         (rule "polySimp_elimSub" (formula "15") (term "1,1,0,1,1,0,1"))
         (rule "times_zero_2" (formula "15") (term "1,1,1,0,1,1,0,1"))
         (rule "add_zero_right" (formula "15") (term "1,1,0,1,1,0,1"))
         (rule "narrowSelectArrayType" (formula "4") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "14"))
         (rule "inEqSimp_ltToLeq" (formula "15") (term "0,1,1,0,0,1"))
         (rule "add_zero_right" (formula "15") (term "0,0,1,1,0,0,1"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,1,0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "15") (term "0,1,0"))
         (rule "add_zero_right" (formula "15") (term "0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "8") (term "0,1"))
         (rule "add_zero_right" (formula "8") (term "0,0,1"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "0,1,1,0,0"))
         (rule "add_zero_right" (formula "9") (term "0,0,1,1,0,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0"))
         (rule "add_zero_right" (formula "8") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0"))
         (rule "add_zero_right" (formula "15") (term "0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0,1"))
         (rule "eqSymm" (formula "15") (term "1,0,1"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,1,1,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0,1"))
         (rule "eqSymm" (formula "15") (term "1,0,1"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,1,1,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,1,1,0,1"))
         (rule "applyEq" (formula "9") (term "0,1,0,0,1,0,0") (ifseqformula "8"))
         (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0"))
         (rule "mul_literals" (formula "4") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,1,0"))
         (rule "polySimp_mulLiterals" (formula "15") (term "0,0,1,0"))
         (rule "polySimp_elimOne" (formula "15") (term "0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "8") (term "0,0,1"))
         (rule "polySimp_elimOne" (formula "8") (term "0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,1,1,0"))
         (rule "polySimp_rightDist" (formula "9") (term "1,1,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,1,1,0"))
         (rule "mul_literals" (formula "9") (term "0,1,1,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,1,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,1,0"))
         (rule "mul_literals" (formula "9") (term "0,1,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "8") (term "0,0,0"))
         (rule "polySimp_elimOne" (formula "8") (term "0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,0"))
         (rule "polySimp_elimOne" (formula "15") (term "0,0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,1,0,0,1,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1,0,0,1,0,0,1"))
         (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1,0,0,1,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,0,1"))
         (rule "eqSymm" (formula "15") (term "1,0,1"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,1,1,0,1"))
         (rule "polySimp_rightDist" (formula "15") (term "1,1,0,1,1,0,1"))
         (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,1,1,0,1"))
         (rule "mul_literals" (formula "15") (term "0,1,1,0,1,1,0,1"))
         (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,1,1,0,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0,1,0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0,1,0,0,1,0,0"))
         (rule "polySimp_elimOne" (formula "9") (term "0,0,0,1,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1"))
         (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1"))
         (rule "mul_literals" (formula "15") (term "0,1,1,0,0,1"))
         (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,0,1"))
         (rule "eqSymm" (formula "15") (term "1,0,1"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,1,1,0,1"))
         (rule "polySimp_rightDist" (formula "15") (term "1,1,0,1,1,0,1"))
         (rule "mul_literals" (formula "15") (term "0,1,1,0,1,1,0,1"))
         (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,1,1,0,1"))
         (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,1,1,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
         (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "10") (inst "i=i"))
         (rule "greater_literals" (formula "10") (term "0,1"))
         (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "13")))
         (rule "sub_literals" (formula "10") (term "2,1,0"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
         (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
         (rule "array2seqDef" (formula "9") (term "1,1,1,0") (inst "u=u"))
         (rule "eqSymm" (formula "9") (term "1,0"))
         (rule "pullOutSelect" (formula "15") (term "0,1,0,0") (inst "selectSK=verif_selectvoting_system_core_ConservativeExtension_messages_2"))
         (rule "applyEq" (formula "16") (term "0,0,0,0,0") (ifseqformula "1"))
         (rule "applyEq" (formula "16") (term "1,1,1,0,1,0,1") (ifseqformula "1"))
         (rule "applyEq" (formula "16") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
         (rule "applyEq" (formula "16") (term "0,1,1,1,1,0,0,1") (ifseqformula "1"))
         (rule "applyEq" (formula "16") (term "0,0,0,1,1,1,0,0,1") (ifseqformula "1"))
         (rule "simplifySelectOfStore" (formula "1"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "castDel" (formula "1") (term "0"))
         (rule "applyEqReverse" (formula "16") (term "0,1,0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "16") (term "0,0,0,0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "16") (term "1,1,1,0,1,0,1") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "16") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "16") (term "0,1,1,1,1,0,0,1") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "16") (term "0,0,0,1,1,1,0,0,1") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "replace_known_left" (formula "15") (term "0") (ifseqformula "8"))
         (builtin "One Step Simplification" (formula "15"))
         (rule "allRight" (formula "15") (inst "sk=iv_1"))
         (rule "impRight" (formula "15"))
         (rule "andLeft" (formula "1"))
         (rule "replace_known_left" (formula "17") (term "0,0,0") (ifseqformula "1"))
         (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "1")))
         (rule "inEqSimp_homoInEq0" (formula "2"))
         (rule "polySimp_addComm1" (formula "2") (term "0"))
         (rule "inEqSimp_homoInEq0" (formula "17") (term "0,1"))
         (rule "polySimp_addComm1" (formula "17") (term "0,0,1"))
         (rule "inEqSimp_homoInEq0" (formula "17") (term "0,0"))
         (rule "polySimp_addComm1" (formula "17") (term "0,0,0"))
         (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "10"))
         (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "0,1"))
         (rule "polySimp_mulComm0" (formula "17") (term "1,0,1"))
         (rule "polySimp_rightDist" (formula "17") (term "1,0,1"))
         (rule "mul_literals" (formula "17") (term "0,1,0,1"))
         (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,1"))
         (rule "polySimp_elimOne" (formula "17") (term "1,1,0,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "0,0"))
         (rule "polySimp_mulComm0" (formula "17") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "17") (term "1,0,0"))
         (rule "mul_literals" (formula "17") (term "0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1"))
         (rule "polySimp_rightDist" (formula "2") (term "1"))
         (rule "mul_literals" (formula "2") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
         (rule "polySimp_elimOne" (formula "2") (term "1,1"))
         (rule "array2seqDef" (formula "11") (term "1,1,1,0") (inst "u=u"))
         (rule "eqSymm" (formula "11") (term "1,0"))
         (rule "array2seqDef" (formula "17") (term "1,0") (inst "u=u"))
         (rule "dismissNonSelectedField" (formula "17") (term "2,1,0"))
         (rule "array2seqDef" (formula "17") (term "1,1") (inst "u=u"))
         (rule "dismissNonSelectedField" (formula "17") (term "2,1,1"))
         (rule "pullOutSelect" (formula "17") (term "0,1,1,0") (inst "selectSK=arr_4"))
         (rule "applyEq" (formula "18") (term "1,2,1,0") (ifseqformula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")) (ifInst ""  (formula "15")))
         (rule "applyEqReverse" (formula "18") (term "0,1,1,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "18") (term "1,2,1,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "17") (term "0,1,1,1") (inst "selectSK=arr_5"))
         (rule "applyEq" (formula "18") (term "1,2,1,1") (ifseqformula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")) (ifInst ""  (formula "5")))
         (rule "applyEqReverse" (formula "18") (term "0,1,1,1") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "18") (term "1,2,1,1") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "nnf_imp2or" (formula "6") (term "0"))
         (rule "nnf_imp2or" (formula "12") (term "0"))
         (rule "nnf_imp2or" (formula "11") (term "0"))
         (rule "nnf_notAnd" (formula "6") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
         (rule "mul_literals" (formula "6") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "6") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
         (rule "mul_literals" (formula "6") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "12") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
         (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
         (rule "mul_literals" (formula "12") (term "1,0,0,0"))
         (rule "nnf_notAnd" (formula "11") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
         (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
         (rule "mul_literals" (formula "11") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
         (rule "commute_or_2" (formula "6") (term "0"))
         (rule "commute_or_2" (formula "12") (term "0"))
         (rule "commute_or_2" (formula "11") (term "0"))
         (rule "commute_or" (formula "6") (term "0,0"))
         (rule "commute_or" (formula "12") (term "0,0"))
         (rule "commute_or" (formula "11") (term "0,0"))
         (rule "arrayLengthIsAShort" (formula "10") (term "1,1"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "true_left" (formula "10"))
         (rule "arrayLengthNotNegative" (formula "10") (term "1,1"))
         (rule "ifthenelse_split" (formula "11") (term "1"))
         (branch "msg.length ≥ 1 TRUE"
            (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "11"))
            (builtin "One Step Simplification" (formula "2"))
            (rule "replace_known_left" (formula "13") (term "0,1,1,0") (ifseqformula "11"))
            (builtin "One Step Simplification" (formula "13"))
            (rule "replace_known_left" (formula "19") (term "0,1") (ifseqformula "2"))
            (builtin "One Step Simplification" (formula "19"))
            (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "11"))
            (rule "leq_literals" (formula "10") (term "0"))
            (builtin "One Step Simplification" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "arrayLengthNotNegative" (formula "11") (term "1,0"))
            (rule "arrayLengthIsAShort" (formula "12") (term "1,0"))
            (builtin "One Step Simplification" (formula "12"))
            (rule "true_left" (formula "12"))
            (rule "ifthenelse_split" (formula "12") (term "0"))
            (branch "result.length ≥ 1 TRUE"
               (rule "applyEq" (formula "14") (term "1,1,1,0,0,0,0,0") (ifseqformula "13"))
               (rule "applyEq" (formula "20") (term "0,0,0") (ifseqformula "13"))
               (rule "replace_known_left" (formula "20") (term "0,0") (ifseqformula "2"))
               (builtin "One Step Simplification" (formula "20"))
               (rule "applyEq" (formula "11") (term "0") (ifseqformula "13"))
               (rule "applyEq" (formula "15") (term "1,1,0") (ifseqformula "13"))
               (rule "applyEq" (formula "12") (term "0") (ifseqformula "13"))
               (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "10"))
               (rule "leq_literals" (formula "11") (term "0"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "true_left" (formula "11"))
               (rule "eqSeqDef" (formula "18") (inst "iv=iv"))
               (rule "getOfSeqDef" (formula "18") (term "0,1,0,1"))
               (rule "castDel" (formula "18") (term "2,0,1,0,1"))
               (rule "castDel" (formula "18") (term "1,0,1,0,1"))
               (rule "add_zero_right" (formula "18") (term "0,2,1,0,1,0,1"))
               (rule "eqSymm" (formula "18") (term "1,0,1"))
               (rule "polySimp_elimSub" (formula "18") (term "1,1,0,1,1,0,1"))
               (rule "times_zero_2" (formula "18") (term "1,1,1,0,1,1,0,1"))
               (rule "add_zero_right" (formula "18") (term "1,1,0,1,1,0,1"))
               (rule "lenOfSeqDef" (formula "18") (term "0,0"))
               (rule "eqSymm" (formula "18") (term "0"))
               (rule "polySimp_elimSub" (formula "18") (term "1,1,0"))
               (rule "times_zero_2" (formula "18") (term "1,1,1,0"))
               (rule "add_zero_right" (formula "18") (term "1,1,0"))
               (rule "lenOfSeqDef" (formula "18") (term "1,1,0,0,1"))
               (rule "polySimp_elimSub" (formula "18") (term "1,1,1,0,0,1"))
               (rule "times_zero_2" (formula "18") (term "1,1,1,1,0,0,1"))
               (rule "add_zero_right" (formula "18") (term "1,1,1,0,0,1"))
               (rule "getOfSeqDef" (formula "18") (term "0,1,0,1"))
               (rule "castDel" (formula "18") (term "1,0,1,0,1"))
               (rule "castDel" (formula "18") (term "2,0,1,0,1"))
               (rule "add_zero_right" (formula "18") (term "0,2,1,0,1,0,1"))
               (rule "eqSymm" (formula "18") (term "1,0,1"))
               (rule "polySimp_elimSub" (formula "18") (term "1,1,0,1,1,0,1"))
               (rule "mul_literals" (formula "18") (term "1,1,1,0,1,1,0,1"))
               (rule "add_zero_right" (formula "18") (term "1,1,0,1,1,0,1"))
               (rule "lenOfSeqDef" (formula "18") (term "0,0"))
               (rule "eqSymm" (formula "18") (term "0"))
               (rule "polySimp_elimSub" (formula "18") (term "1,1,0"))
               (rule "times_zero_2" (formula "18") (term "1,1,1,0"))
               (rule "add_zero_right" (formula "18") (term "1,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "18") (term "0,1,1,0,0,1"))
               (rule "add_zero_right" (formula "18") (term "0,0,1,1,0,0,1"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,1,0,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,1,0,1"))
               (rule "eqSymm" (formula "18") (term "1,0,1"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,1,1,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "18") (term "0,1,0"))
               (rule "add_zero_right" (formula "18") (term "0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0"))
               (rule "add_zero_right" (formula "18") (term "0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,1"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,1,0,1"))
               (rule "eqSymm" (formula "18") (term "1,0,1"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,1,1,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,1,1,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1,0,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,1,0"))
               (rule "polySimp_mulLiterals" (formula "18") (term "0,0,1,0"))
               (rule "polySimp_elimOne" (formula "18") (term "0,0,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0,0"))
               (rule "polySimp_elimOne" (formula "18") (term "0,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,0,1,0,0,1,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0,1,0,0,1,0,0,1"))
               (rule "polySimp_elimOne" (formula "18") (term "0,0,0,1,0,0,1,0,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,1,0,1"))
               (rule "eqSymm" (formula "18") (term "1,0,1"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,1,1,0,1"))
               (rule "polySimp_rightDist" (formula "18") (term "1,1,0,1,1,0,1"))
               (rule "mul_literals" (formula "18") (term "0,1,1,0,1,1,0,1"))
               (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,1,1,0,1"))
               (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,1,1,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,1"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,1"))
               (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,1"))
               (rule "mul_literals" (formula "18") (term "0,1,1,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,1"))
               (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,1,0,1"))
               (rule "eqSymm" (formula "18") (term "1,0,1"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,1,1,0,1"))
               (rule "polySimp_rightDist" (formula "18") (term "1,1,0,1,1,0,1"))
               (rule "mul_literals" (formula "18") (term "0,1,1,0,1,1,0,1"))
               (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,1,1,0,1"))
               (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,1,1,0,1"))
               (rule "nnf_imp2or" (formula "18") (term "0,1"))
               (rule "nnf_notAnd" (formula "18") (term "0,0,1"))
               (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0,1"))
               (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,1"))
               (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,1"))
               (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,1"))
               (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,1"))
               (rule "add_zero_left" (formula "18") (term "0,0,1,0,0,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,1"))
               (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,1"))
               (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0,1"))
               (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0,1"))
               (rule "add_zero_right" (formula "18") (term "0,0,0,0,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,1"))
               (rule "mul_literals" (formula "18") (term "1,0,0,0,1"))
               (rule "ifthenelse_to_or_left" (formula "12") (term "0,0,0"))
               (rule "eqSymm" (formula "12") (term "1,0,0,0,0"))
               (rule "eqSymm" (formula "12") (term "1,1,0,0,0"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "nnf_notAnd" (formula "12") (term "0,0,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,0,0,0"))
               (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0,0"))
               (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0,0,0"))
               (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0,0,0"))
               (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,0,0"))
               (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0"))
               (rule "nnf_notAnd" (formula "12") (term "0,1,1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "12") (term "1,0,1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,1,1,0,0,0"))
               (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,1,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,1,1,0,0,0"))
               (rule "add_literals" (formula "12") (term "0,0,0,1,0,1,1,0,0,0"))
               (rule "add_zero_left" (formula "12") (term "0,0,1,0,1,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,0,1,1,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "12") (term "0,0,1,1,0,0,0"))
               (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,1,1,0,0,0"))
               (rule "add_zero_right" (formula "12") (term "0,0,0,0,1,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,1,1,0,0,0"))
               (rule "mul_literals" (formula "12") (term "1,0,0,1,1,0,0,0"))
               (rule "commute_or" (formula "12") (term "0,0"))
               (rule "commute_or_2" (formula "12") (term "0"))
               (rule "commute_or_2" (formula "12") (term "0,1,0"))
               (rule "commute_or" (formula "12") (term "1,1,0"))
               (rule "commute_or" (formula "12") (term "0,0,1,0"))
               (rule "commute_or_2" (formula "12") (term "0,1,1,0"))
               (rule "commute_or" (formula "12") (term "0,0,1,1,0"))
               (rule "cnf_rightDist" (formula "12") (term "1,1,0"))
               (rule "commute_or_2" (formula "12") (term "0,1,1,0"))
               (rule "inEqSimp_or_tautInEq1" (formula "12") (term "0,0,1,1,0"))
               (rule "add_zero_right" (formula "12") (term "1,1,0,0,1,1,0"))
               (rule "qeq_literals" (formula "12") (term "1,0,0,1,1,0"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "shift_paren_or" (formula "12") (term "1,1,0"))
               (rule "commute_or" (formula "12") (term "0,1,1,0"))
               (rule "inEqSimp_or_tautInEq1" (formula "12") (term "1,1,0"))
               (rule "inEqSimp_homoInEq1" (formula "12") (term "1,1,1,0"))
               (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,1,1,0"))
               (rule "add_literals" (formula "12") (term "1,0,1,1,1,0"))
               (rule "times_zero_1" (formula "12") (term "0,1,1,1,0"))
               (rule "leq_literals" (formula "12") (term "1,1,1,0"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "shift_paren_or" (formula "12") (term "0"))
               (rule "commute_or_2" (formula "12") (term "0,0"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "shift_paren_or" (formula "12") (term "0,0"))
               (rule "commute_or" (formula "12") (term "0,0,0"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "ifthenelse_to_or_left" (formula "12") (term "0,0,0"))
               (rule "eqSymm" (formula "12") (term "1,0,0,0,0"))
               (rule "eqSymm" (formula "12") (term "1,1,0,0,0"))
               (rule "eqSeqDef" (formula "12") (term "1,0,0,0,0") (inst "iv=iv_1"))
               (rule "getOfSeqDef" (formula "12") (term "1,1,0,1,1,0,0,0,0"))
               (rule "castDel" (formula "12") (term "1,1,1,0,1,1,0,0,0,0"))
               (rule "castDel" (formula "12") (term "2,1,1,0,1,1,0,0,0,0"))
               (rule "add_zero_right" (formula "12") (term "0,2,1,1,1,0,1,1,0,0,0,0"))
               (rule "polySimp_elimSub" (formula "12") (term "1,1,0,1,1,0,1,1,0,0,0,0"))
               (rule "times_zero_2" (formula "12") (term "1,1,1,0,1,1,0,1,1,0,0,0,0"))
               (rule "add_zero_right" (formula "12") (term "1,1,0,1,1,0,1,1,0,0,0,0"))
               (rule "lenOfSeqDef" (formula "12") (term "1,0,1,0,0,0,0"))
               (rule "polySimp_elimSub" (formula "12") (term "1,1,0,1,0,0,0,0"))
               (rule "times_zero_2" (formula "12") (term "1,1,1,0,1,0,0,0,0"))
               (rule "add_zero_right" (formula "12") (term "1,1,0,1,0,0,0,0"))
               (rule "lenOfSeqDef" (formula "12") (term "1,1,0,0,1,1,0,0,0,0"))
               (rule "polySimp_elimSub" (formula "12") (term "1,1,1,0,0,1,1,0,0,0,0"))
               (rule "mul_literals" (formula "12") (term "1,1,1,1,0,0,1,1,0,0,0,0"))
               (rule "add_zero_right" (formula "12") (term "1,1,1,0,0,1,1,0,0,0,0"))
               (rule "lenOfSeqDef" (formula "12") (term "0,0,1,0,0,0,0"))
               (rule "polySimp_elimSub" (formula "12") (term "1,0,0,1,0,0,0,0"))
               (rule "mul_literals" (formula "12") (term "1,1,0,0,1,0,0,0,0"))
               (rule "add_zero_right" (formula "12") (term "1,0,0,1,0,0,0,0"))
               (rule "getOfSeqDef" (formula "12") (term "0,1,0,1,1,0,0,0,0"))
               (rule "castDel" (formula "12") (term "1,0,1,0,1,1,0,0,0,0"))
               (rule "castDel" (formula "12") (term "2,0,1,0,1,1,0,0,0,0"))
               (rule "add_zero_right" (formula "12") (term "0,2,1,0,1,0,1,1,0,0,0,0"))
               (rule "polySimp_elimSub" (formula "12") (term "1,1,0,0,1,0,1,1,0,0,0,0"))
               (rule "times_zero_2" (formula "12") (term "1,1,1,0,0,1,0,1,1,0,0,0,0"))
               (rule "add_zero_right" (formula "12") (term "1,1,0,0,1,0,1,1,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,1,1,0,1,1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,1,1,0,1,1,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "12") (term "0,1,0,1,0,0,0,0"))
               (rule "add_zero_right" (formula "12") (term "0,0,1,0,1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,1,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "12") (term "0,1,1,0,0,1,1,0,0,0,0"))
               (rule "add_zero_right" (formula "12") (term "0,0,1,1,0,0,1,1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,1,0,0,1,1,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,1,0,0,0,0"))
               (rule "add_zero_right" (formula "12") (term "0,0,0,0,1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,1,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,0,1,1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,1,0,1,1,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,1,1,0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1,1,0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,1,1,0,1,1,0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1,0,1,1,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,1,1,0,1,1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,1,1,0,1,1,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,1,0,1,1,0,1,1,0,0,0,0"))
               (rule "mul_literals" (formula "12") (term "0,1,1,0,1,1,0,1,1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,1,1,0,1,1,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,1,1,0,1,1,0,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,1,0,1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "0,0,1,0,1,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "12") (term "0,0,1,0,1,0,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0,0,1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,0,1,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "12") (term "0,0,0,0,1,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,1,0,1,1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,1,0,1,1,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,1,0,1,1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,1,0,1,1,0,0,0,0"))
               (rule "mul_literals" (formula "12") (term "0,1,1,0,0,1,0,1,1,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,1,0,1,1,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,1,1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,1,1,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,1,1,0,0,0,0"))
               (rule "mul_literals" (formula "12") (term "0,1,1,0,0,1,1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,1,1,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,1,1,0,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,1,1,1,0,0,1,1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "0,0,1,1,1,0,0,1,1,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "12") (term "0,0,1,1,1,0,0,1,1,0,0,0,0"))
               (rule "nnf_notAnd" (formula "12") (term "0,0,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0,0,0"))
               (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0,0,0"))
               (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,0,0"))
               (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,0,0,0"))
               (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0,0"))
               (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0,0"))
               (rule "nnf_imp2or" (formula "12") (term "0,1,1,0,0,0,0"))
               (rule "nnf_notAnd" (formula "12") (term "0,0,1,1,0,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,1,1,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,1,1,0,0,0,0"))
               (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,1,1,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,1,1,0,0,0,0"))
               (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,1,1,0,0,0,0"))
               (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,1,1,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,1,1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1,1,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,1,1,0,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,1,1,0,0,0,0"))
               (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,1,1,0,0,0,0"))
               (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,1,1,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,1,1,0,0,0,0"))
               (rule "mul_literals" (formula "12") (term "1,0,0,0,1,1,0,0,0,0"))
               (rule "commute_or" (formula "12") (term "1,0,0,0"))
               (rule "commute_or" (formula "12") (term "0,0"))
               (rule "commute_or_2" (formula "12") (term "0"))
               (rule "ifthenelse_split" (formula "18") (term "1,0"))
               (branch "msg[iv_1].length ≥ 1 TRUE"
                  (rule "ifthenelse_split" (formula "19") (term "0,0"))
                  (branch " result[iv_1]@anon_heap_copyOf«anonHeapFunction».length ≥ 1 TRUE"
                     (rule "replace_known_left" (formula "20") (term "0,1,1,0,0,1") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "20"))
                     (rule "cnf_rightDist" (formula "14") (term "1,1,0"))
                     (rule "commute_or" (formula "14") (term "1,1,1,0"))
                     (rule "commute_or_2" (formula "14") (term "0,1,1,0,1,0"))
                     (rule "allLeft" (formula "8") (inst "t=iv_1"))
                     (rule "inEqSimp_commuteGeq" (formula "8") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "8") (term "1,0") (ifseqformula "3"))
                     (rule "qeq_literals" (formula "8") (term "0,1,0"))
                     (builtin "One Step Simplification" (formula "8"))
                     (rule "inEqSimp_contradInEq1" (formula "8") (term "1") (ifseqformula "4"))
                     (rule "inEqSimp_homoInEq1" (formula "8") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1"))
                     (rule "add_literals" (formula "8") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "8") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "8") (term "0,0,1"))
                     (rule "leq_literals" (formula "8") (term "0,1"))
                     (builtin "One Step Simplification" (formula "8"))
                     (rule "notLeft" (formula "8"))
                     (rule "allLeft" (formula "15") (inst "t=iv_1"))
                     (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "4"))
                     (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
                     (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "15") (term "0,0,1"))
                     (rule "leq_literals" (formula "15") (term "0,1"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "3"))
                     (rule "qeq_literals" (formula "15") (term "0,1"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "notLeft" (formula "15"))
                     (rule "pullOutSelect" (formula "17") (term "0") (inst "selectSK=arr_8"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "11"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")) (ifInst ""  (formula "20")))
                     (rule "applyEqReverse" (formula "18") (term "0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "narrowSelectArrayType" (formula "17") (term "0") (ifseqformula "9") (ifseqformula "20"))
                     (rule "commute_or" (formula "14") (term "0,0,1,1,0,1,0"))
                     (rule "ifthenelse_to_or_right" (formula "14") (term "0,1,0,1,0"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "inEqSimp_notGeq" (formula "14") (term "0,1,1,0,1,0,1,0"))
                     (rule "mul_literals" (formula "14") (term "1,0,0,0,1,1,0,1,0,1,0"))
                     (rule "add_literals" (formula "14") (term "0,0,0,1,1,0,1,0,1,0"))
                     (rule "add_zero_left" (formula "14") (term "0,0,1,1,0,1,0,1,0"))
                     (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,1,0,1,0"))
                     (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0,1,0,1,0"))
                     (rule "add_literals" (formula "14") (term "0,0,0,0,0,1,0,1,0"))
                     (rule "add_zero_left" (formula "14") (term "0,0,0,0,1,0,1,0"))
                     (rule "shift_paren_or" (formula "14") (term "1,0,1,0,1,0"))
                     (rule "all_pull_out1" (formula "14") (term "1,0,1,0"))
                     (rule "all_pull_out3" (formula "14") (term "0,1,0"))
                     (rule "cnf_rightDist" (formula "14") (term "0,0,1,0"))
                     (rule "commute_or_2" (formula "14") (term "1,0,0,1,0"))
                     (rule "commute_or_2" (formula "14") (term "0,1,0,0,1,0"))
                     (rule "cnf_rightDist" (formula "14") (term "0,0,0,1,0"))
                     (rule "commute_or_2" (formula "14") (term "1,0,0,0,1,0"))
                     (rule "shift_paren_or" (formula "14") (term "0,0,0,0,1,0"))
                     (rule "commute_or_2" (formula "14") (term "0,1,0,0,0,1,0"))
                     (rule "shift_paren_or" (formula "14") (term "0,0,1,0,0,1,0"))
                     (rule "commute_or" (formula "14") (term "0,0,1,0,0,0,1,0"))
                     (rule "all_pull_out0" (formula "14") (term "1,0"))
                     (rule "shift_paren_and" (formula "14") (term "0,1,0"))
                     (rule "all_pull_out3" (formula "14") (term "0"))
                     (rule "cnf_rightDist" (formula "14") (term "0,0"))
                     (rule "distr_forallAnd" (formula "14") (term "0"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "distr_forallAnd" (formula "14"))
                     (rule "andLeft" (formula "14"))
                     (rule "shift_paren_or" (formula "15") (term "0"))
                     (rule "commute_or_2" (formula "15") (term "0,0"))
                     (rule "inEqSimp_or_tautInEq1" (formula "15") (term "0"))
                     (rule "inEqSimp_homoInEq1" (formula "15") (term "1,0"))
                     (rule "polySimp_pullOutFactor1" (formula "15") (term "0,1,0"))
                     (rule "add_literals" (formula "15") (term "1,0,1,0"))
                     (rule "times_zero_1" (formula "15") (term "0,1,0"))
                     (rule "leq_literals" (formula "15") (term "1,0"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "true_left" (formula "15"))
                     (rule "cnf_rightDist" (formula "14") (term "0,0"))
                     (rule "distr_forallAnd" (formula "14") (term "0"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "distr_forallAnd" (formula "14"))
                     (rule "andLeft" (formula "14"))
                     (rule "shift_paren_or" (formula "15") (term "0"))
                     (rule "inEqSimp_or_tautInEq3" (formula "15") (term "0,0"))
                     (rule "add_zero_right" (formula "15") (term "1,1,0,0"))
                     (rule "qeq_literals" (formula "15") (term "1,0,0"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "true_left" (formula "15"))
                     (rule "cnf_rightDist" (formula "14") (term "0,0"))
                     (rule "distr_forallAnd" (formula "14") (term "0"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "distr_forallAnd" (formula "14"))
                     (rule "andLeft" (formula "14"))
                     (rule "commute_or_2" (formula "15") (term "0,0"))
                     (rule "commute_or_2" (formula "15") (term "0,0,0"))
                     (rule "cnf_rightDist" (formula "14") (term "0"))
                     (rule "distr_forallAnd" (formula "14"))
                     (rule "andLeft" (formula "14"))
                     (rule "commute_or_2" (formula "15") (term "0"))
                     (rule "shift_paren_or" (formula "14") (term "0"))
                     (rule "commute_or_2" (formula "15") (term "0,0"))
                     (rule "shift_paren_or" (formula "14") (term "0,0"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "commute_or_2" (formula "15") (term "0,0,0"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "shift_paren_or" (formula "16") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "16") (term "0,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "ifthenelse_to_or_left" (formula "14") (term "1,0"))
                     (rule "eqSymm" (formula "14") (term "1,1,1,0"))
                     (rule "inEqSimp_notGeq" (formula "14") (term "0,0,1,0"))
                     (rule "mul_literals" (formula "14") (term "1,0,0,0,0,1,0"))
                     (rule "add_literals" (formula "14") (term "0,0,0,0,1,0"))
                     (rule "add_zero_left" (formula "14") (term "0,0,0,1,0"))
                     (rule "commute_or" (formula "14") (term "1,1,0"))
                     (rule "cnf_rightDist" (formula "14") (term "0"))
                     (rule "distr_forallAnd" (formula "14"))
                     (rule "andLeft" (formula "14"))
                     (rule "commute_or_2" (formula "15") (term "0"))
                     (rule "shift_paren_or" (formula "14") (term "0"))
                     (rule "commute_or" (formula "15") (term "0,0"))
                     (rule "ifthenelse_to_or_right" (formula "17") (term "0,0,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "nnf_notAnd" (formula "17") (term "0,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "17") (term "1,0,0,0,0,0,0,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "17") (term "0,0,0,0,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "17") (term "1,0,0,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0,0,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,0,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,0,0,0,0,0,0"))
                     (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "17") (term "0,0,1,0,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0,0,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0,0,0,0,0,0"))
                     (rule "nnf_notAnd" (formula "17") (term "0,1,1,0,0,0,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "17") (term "1,0,1,1,0,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,1,1,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,1,1,0,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,1,1,0,0,0,0,0,0"))
                     (rule "add_literals" (formula "17") (term "0,0,0,1,0,1,1,0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "17") (term "0,0,1,0,1,1,0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,1,1,0,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,1,1,0,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "17") (term "1,1,0,1,1,0,0,0,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "17") (term "0,0,1,1,0,0,0,0,0,0"))
                     (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,1,1,0,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "17") (term "0,0,0,0,1,1,0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,1,1,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "17") (term "1,0,0,1,1,0,0,0,0,0,0"))
                     (rule "commute_or" (formula "17") (term "0,0,0,0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,0"))
                     (rule "commute_or" (formula "17") (term "1,1,0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,1,0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,1,1,0,0"))
                     (rule "commute_or" (formula "17") (term "0,0,1,0,0"))
                     (rule "commute_or" (formula "17") (term "0,0,1,1,0,0"))
                     (rule "cnf_rightDist" (formula "17") (term "1,1,0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,1,1,0,0"))
                     (rule "inEqSimp_or_tautInEq1" (formula "17") (term "0,0,1,1,0,0"))
                     (rule "add_zero_right" (formula "17") (term "1,1,0,0,1,1,0,0"))
                     (rule "qeq_literals" (formula "17") (term "1,0,0,1,1,0,0"))
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "shift_paren_or" (formula "17") (term "1,1,0,0"))
                     (rule "commute_or" (formula "17") (term "0,1,1,0,0"))
                     (rule "cnf_rightDist" (formula "17") (term "0,0"))
                     (rule "distr_forallAnd" (formula "17") (term "0"))
                     (rule "distr_forallAnd" (formula "17"))
                     (rule "andLeft" (formula "17"))
                     (rule "commute_or_2" (formula "17") (term "0,0"))
                     (rule "shift_paren_or" (formula "18") (term "0,0"))
                     (rule "commute_or_2" (formula "18") (term "0,0,0"))
                     (rule "shift_paren_or" (formula "17") (term "0,0,0"))
                     (rule "commute_or_2" (formula "18") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "17") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "commute_or_2" (formula "17") (term "0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "18") (term "0,0,0,0,0"))
                     (rule "commute_or" (formula "17") (term "0,0,0,0,0,0"))
                     (rule "commute_or_2" (formula "18") (term "0,0,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "shift_paren_or" (formula "18") (term "0,0,0,0,0,0"))
                     (rule "arrayLengthNotNegative" (formula "2") (term "0"))
                     (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "3"))
                     (rule "leq_literals" (formula "2") (term "0"))
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "arrayLengthIsAShort" (formula "2") (term "0"))
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "arrayLengthIsAShort" (formula "1") (term "0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "arrayLengthNotNegative" (formula "1") (term "0"))
                     (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "2"))
                     (rule "leq_literals" (formula "1") (term "0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "ifthenelse_to_or_left" (formula "17") (term "0,0,0,0,0,0,0"))
                     (rule "eqSymm" (formula "17") (term "1,1,0,0,0,0,0,0,0"))
                     (rule "nnf_notAnd" (formula "17") (term "0,0,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0,0,0,0,0,0,0,0"))
                     (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0,0,0,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "17") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,0,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "17") (term "1,0,0,0,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0,0,0,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,0,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,0,0,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
                     (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,0,0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "17") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0,0,0,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,0,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0,0,0,0,0,0,0"))
                     (rule "commute_or" (formula "17") (term "0,0,0,0,0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,0,0,0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,0"))
                     (rule "commute_or" (formula "17") (term "1,1,0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,1,0,0"))
                     (rule "commute_or" (formula "17") (term "0,0,1,0,0"))
                     (rule "cnf_rightDist" (formula "17") (term "1,1,0,0"))
                     (rule "cnf_rightDist" (formula "17") (term "0,0"))
                     (rule "distr_forallAnd" (formula "17") (term "0"))
                     (rule "distr_forallAnd" (formula "17"))
                     (rule "andLeft" (formula "17"))
                     (rule "commute_or_2" (formula "17") (term "0,0"))
                     (rule "commute_or" (formula "18") (term "0,0"))
                     (rule "shift_paren_or" (formula "17") (term "0,0,0"))
                     (rule "commute_or" (formula "18") (term "1,1,0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,0,0,0"))
                     (rule "cnf_rightDist" (formula "18") (term "0,0"))
                     (rule "distr_forallAnd" (formula "18") (term "0"))
                     (rule "distr_forallAnd" (formula "18"))
                     (rule "andLeft" (formula "18"))
                     (rule "commute_or_2" (formula "18") (term "0,0"))
                     (rule "shift_paren_or" (formula "19") (term "0,0"))
                     (rule "commute_or_2" (formula "18") (term "0,0,0"))
                     (rule "commute_or_2" (formula "19") (term "0,0,0"))
                     (rule "shift_paren_or" (formula "18") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "19") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "18") (term "0,0,0,0,0"))
                     (rule "inEqSimp_or_tautInEq1" (formula "18") (term "0,0,0,0"))
                     (rule "add_zero_right" (formula "18") (term "1,1,0,0,0,0"))
                     (rule "qeq_literals" (formula "18") (term "1,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "true_left" (formula "18"))
                     (rule "shift_paren_or" (formula "17") (term "0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "18") (term "0,0,0,0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,0,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "commute_or_2" (formula "17") (term "0,0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "18") (term "0,0,0,0,0,0"))
                     (rule "commute_or" (formula "17") (term "0,0,0,0,0,0,0"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "1") (term "0,0") (ifseqformula "9"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "23"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "3") (term "0,0") (ifseqformula "6"))
                     (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "25"))
                     (builtin "One Step Simplification" (formula "3"))
                     (rule "allLeft" (formula "18") (inst "t=iv_1"))
                     (rule "replaceKnownSelect_taclet000_2" (formula "18") (term "0,0,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "18") (term "0,0,1"))
                     (rule "replaceKnownSelect_taclet000_2" (formula "18") (term "0,0,1,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "18") (term "0,0,1,0"))
                     (rule "replaceKnownSelect_taclet000_4" (formula "18") (term "0,0,1,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet000_5" (formula "18") (term "0,0,1,0,0"))
                     (rule "replace_known_left" (formula "18") (term "1,0,0") (ifseqformula "4"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "true_left" (formula "18"))
                     (rule "allLeft" (formula "16") (inst "t=iv_1"))
                     (rule "replaceKnownSelect_taclet000_4" (formula "16") (term "0,1,1"))
                     (rule "replaceKnownSelect_taclet000_2" (formula "16") (term "0,0,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet000_5" (formula "16") (term "0,1,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "16") (term "0,0,1"))
                     (rule "replaceKnownSelect_taclet000_2" (formula "16") (term "0,0,1,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "16") (term "0,0,1,0"))
                     (rule "replaceKnownSelect_taclet000_4" (formula "16") (term "0,0,1,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet000_5" (formula "16") (term "0,0,1,0,0"))
                     (rule "inEqSimp_commuteGeq" (formula "16") (term "1,0,0,0"))
                     (rule "inEqSimp_contradInEq1" (formula "16") (term "1,0") (ifseqformula "2"))
                     (rule "qeq_literals" (formula "16") (term "0,1,0"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "inEqSimp_contradInEq1" (formula "16") (term "1,0,0") (ifseqformula "6"))
                     (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "16") (term "1,1,0,0,1,0,0"))
                     (rule "times_zero_1" (formula "16") (term "1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "16") (term "0,0,1,0,0"))
                     (rule "leq_literals" (formula "16") (term "0,1,0,0"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "inEqSimp_contradInEq1" (formula "16") (term "1,0") (ifseqformula "4"))
                     (rule "qeq_literals" (formula "16") (term "0,1,0"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "inEqSimp_contradInEq1" (formula "16") (term "0") (ifseqformula "5"))
                     (rule "qeq_literals" (formula "16") (term "0,0"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "16"))
                     (builtin "One Step Simplification" (formula "30"))
                     (rule "allRight" (formula "30") (inst "sk=iv_3"))
                     (rule "orRight" (formula "30"))
                     (rule "orRight" (formula "30"))
                     (rule "inEqSimp_geqRight" (formula "31"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_leqRight" (formula "31"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "replace_known_left" (formula "32") (term "0,0,0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "1")))
                     (rule "inEqSimp_homoInEq0" (formula "32") (term "0,0"))
                     (rule "eqSymm" (formula "32"))
                     (rule "polySimp_addComm1" (formula "32") (term "0,0,1"))
                     (rule "inEqSimp_homoInEq0" (formula "32") (term "0,0"))
                     (rule "eqSymm" (formula "32"))
                     (rule "polySimp_addComm1" (formula "32") (term "0,0,1"))
                     (rule "applyEq" (formula "32") (term "1,0,0,0") (ifseqformula "18"))
                     (rule "applyEq" (formula "4") (term "0") (ifseqformula "18"))
                     (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "17"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "31") (term "1,0,1"))
                     (rule "polySimp_rightDist" (formula "31") (term "1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,1"))
                     (rule "mul_literals" (formula "31") (term "0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "31") (term "1,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "31") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "31") (term "1,0,0"))
                     (rule "mul_literals" (formula "31") (term "0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0"))
                     (rule "replace_known_left" (formula "31") (term "0,1") (ifseqformula "2"))
                     (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "2")))
                     (rule "pullOutSelect" (formula "31") (term "0") (inst "selectSK=arr_9"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "27")))
                     (rule "eqSymm" (formula "32"))
                     (rule "ifthenelse_negated" (formula "1") (term "0"))
                     (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "9") (ifseqformula "27"))
                     (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "13") (ifseqformula "27"))
                     (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=arr_10"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")) (ifInst ""  (formula "6")))
                     (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "narrowSelectArrayType" (formula "32") (term "0") (ifseqformula "9") (ifseqformula "28"))
                     (rule "eqSymm" (formula "32"))
                     (rule "ifthenelse_split" (formula "1") (term "0"))
                     (branch " (result[iv_1]@anon_heap_copyOf«anonHeapFunction»).<created> = TRUE TRUE"
                        (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "2"))
                        (rule "hideAuxiliaryEq" (formula "2"))
                        (rule "allLeft" (formula "20") (inst "t=iv_1"))
                        (rule "replaceKnownSelect_taclet000_2" (formula "20") (term "0,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "20") (term "0,0,1"))
                        (rule "replaceKnownSelect_taclet000_4" (formula "20") (term "0,0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet000_5" (formula "20") (term "0,0,1,0"))
                        (rule "replaceKnownSelect_taclet000_4" (formula "20") (term "0,0,1,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet000_5" (formula "20") (term "0,0,1,0,0"))
                        (rule "inEqSimp_commuteGeq" (formula "20") (term "1,0,0,0"))
                        (rule "applyEq" (formula "20") (term "0,1") (ifseqformula "18"))
                        (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "6"))
                        (builtin "One Step Simplification" (formula "20"))
                        (rule "true_left" (formula "20"))
                        (rule "allLeft" (formula "23") (inst "t=iv_1"))
                        (rule "replaceKnownSelect_taclet000_2" (formula "23") (term "0,1,1,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "23") (term "0,1,1,1,0"))
                        (rule "replaceKnownSelect_taclet000_4" (formula "23") (term "0,1,1,0,0,0"))
                        (rule "replaceKnownSelect_taclet000_2" (formula "23") (term "0,1,1,1,0,0"))
                        (rule "replaceKnownSelect_taclet000_2" (formula "23") (term "0,0,0,1,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet000_5" (formula "23") (term "0,1,1,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "23") (term "0,1,1,1,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "23") (term "0,0,0,1,1,0"))
                        (rule "replaceKnownSelect_taclet000_4" (formula "23") (term "1,0,0,0,0,0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet000_5" (formula "23") (term "1,0,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_commuteGeq" (formula "23") (term "1,0,0,0,0,0"))
                        (rule "applyEq" (formula "23") (term "1,1,1,0") (ifseqformula "18"))
                        (rule "applyEq" (formula "23") (term "0,0,1,1,0") (ifseqformula "18"))
                        (rule "replace_known_left" (formula "23") (term "0,1,1,0") (ifseqformula "6"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "applyEq" (formula "23") (term "1,1,1,0,0") (ifseqformula "18"))
                        (rule "inEqSimp_contradInEq1" (formula "23") (term "1,0,0,0,0,0") (ifseqformula "8"))
                        (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1,0,0,0,0,0"))
                        (rule "add_literals" (formula "23") (term "1,1,0,0,1,0,0,0,0,0"))
                        (rule "times_zero_1" (formula "23") (term "1,0,0,1,0,0,0,0,0"))
                        (rule "add_literals" (formula "23") (term "0,0,1,0,0,0,0,0"))
                        (rule "leq_literals" (formula "23") (term "0,1,0,0,0,0,0"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "inEqSimp_contradInEq1" (formula "23") (term "1,0,0,0,0,0") (ifseqformula "7"))
                        (rule "qeq_literals" (formula "23") (term "0,1,0,0,0,0,0"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "inEqSimp_or_tautInEq3" (formula "23") (term "0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "23") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor1" (formula "23") (term "0,1,0,0"))
                        (rule "add_literals" (formula "23") (term "1,0,1,0,0"))
                        (rule "times_zero_1" (formula "23") (term "0,1,0,0"))
                        (rule "leq_literals" (formula "23") (term "1,0,0"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "true_left" (formula "23"))
                        (rule "allLeft" (formula "24") (inst "t=iv_1"))
                        (rule "replaceKnownSelect_taclet000_2" (formula "24") (term "0,1,1,0,0"))
                        (rule "replaceKnownSelect_taclet000_2" (formula "24") (term "0,1,1,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "24") (term "0,1,1,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "24") (term "0,1,1,1,0"))
                        (rule "replaceKnownSelect_taclet000_2" (formula "24") (term "0,0,0,1,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "24") (term "0,0,0,1,1,0"))
                        (rule "replaceKnownSelect_taclet000_4" (formula "24") (term "0,1,1,1,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet000_5" (formula "24") (term "0,1,1,1,0,0,0"))
                        (rule "replaceKnownSelect_taclet000_2" (formula "24") (term "1,0,0,0,0,0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "24") (term "1,0,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_commuteGeq" (formula "24") (term "1,0,0,0,0,0"))
                        (rule "applyEq" (formula "24") (term "0,0,1,1,0") (ifseqformula "18"))
                        (rule "replace_known_left" (formula "24") (term "0,1,1,0") (ifseqformula "6"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "applyEq" (formula "24") (term "1,1,0") (ifseqformula "18"))
                        (rule "inEqSimp_contradInEq1" (formula "24") (term "1,0,0,0,0,0") (ifseqformula "7"))
                        (rule "qeq_literals" (formula "24") (term "0,1,0,0,0,0,0"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "inEqSimp_contradInEq1" (formula "24") (term "1,0,0,0,0") (ifseqformula "8"))
                        (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "24") (term "1,1,0,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "24") (term "1,0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "24") (term "0,0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "24") (term "0,1,0,0,0,0"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "inEqSimp_or_tautInEq1" (formula "24") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "24") (term "1,0"))
                        (rule "polySimp_pullOutFactor1" (formula "24") (term "0,1,0"))
                        (rule "add_literals" (formula "24") (term "1,0,1,0"))
                        (rule "times_zero_1" (formula "24") (term "0,1,0"))
                        (rule "leq_literals" (formula "24") (term "1,0"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "true_left" (formula "24"))
                        (rule "allLeft" (formula "22") (inst "t=iv_1"))
                        (rule "replaceKnownSelect_taclet000_2" (formula "22") (term "0,1,1,0,0"))
                        (rule "replaceKnownSelect_taclet000_2" (formula "22") (term "0,1,1,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "22") (term "0,1,1,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "22") (term "0,1,1,1,0"))
                        (rule "replaceKnownSelect_taclet000_4" (formula "22") (term "0,1,1,0,0,0"))
                        (rule "replaceKnownSelect_taclet000_2" (formula "22") (term "0,0,0,1,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet000_5" (formula "22") (term "0,1,1,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "22") (term "0,0,0,1,1,0"))
                        (rule "replaceKnownSelect_taclet000_2" (formula "22") (term "1,0,0,0,0,0,0,0,0"))
                        (rule "replaceKnownSelect_taclet000_4" (formula "22") (term "1,1,0,0,0,0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "22") (term "1,0,0,0,0,0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet000_5" (formula "22") (term "1,1,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_commuteGeq" (formula "22") (term "1,0,0,0,0,0"))
                        (rule "applyEq" (formula "22") (term "1,1,0,0") (ifseqformula "18"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "applyEq" (formula "22") (term "1,1,1,0") (ifseqformula "18"))
                        (rule "applyEq" (formula "22") (term "0,0,1,1,0") (ifseqformula "18"))
                        (rule "replace_known_left" (formula "22") (term "0,1,1,0") (ifseqformula "6"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "inEqSimp_contradInEq1" (formula "22") (term "1,0,0,0") (ifseqformula "8"))
                        (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "22") (term "1,1,0,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "22") (term "1,0,0,1,0,0,0"))
                        (rule "add_literals" (formula "22") (term "0,0,1,0,0,0"))
                        (rule "leq_literals" (formula "22") (term "0,1,0,0,0"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "inEqSimp_contradInEq1" (formula "22") (term "1,0,0,0") (ifseqformula "7"))
                        (rule "qeq_literals" (formula "22") (term "0,1,0,0,0"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "allLeft" (formula "22") (inst "t=iv_3"))
                        (rule "replaceKnownSelect_taclet0000000_8" (formula "22") (term "0,0,0"))
                        (rule "replaceKnownSelect_taclet0000000_9" (formula "22") (term "1,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet00000000_11" (formula "22") (term "0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0000000_10" (formula "22") (term "1,0,0"))
                        (rule "eqSymm" (formula "22") (term "0,0"))
                        (rule "narrowSelectArrayType" (formula "22") (term "0,0,0") (ifseqformula "9") (ifseqformula "30"))
                        (rule "eqSymm" (formula "22") (term "0,0"))
                        (rule "replace_known_right" (formula "22") (term "0,0") (ifseqformula "34"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1"))
                        (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
                        (rule "add_literals" (formula "22") (term "0,0,1"))
                        (rule "leq_literals" (formula "22") (term "0,1"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "inEqSimp_contradInEq1" (formula "22") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "22") (term "0"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "closeFalse" (formula "22"))
                     )
                     (branch " (result[iv_1]@anon_heap_copyOf«anonHeapFunction»).<created> = TRUE FALSE"
                        (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "allLeft" (formula "19") (inst "t=iv_1"))
                        (rule "replaceKnownSelect_taclet000_2" (formula "19") (term "0,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "19") (term "0,0,1"))
                        (rule "replaceKnownSelect_taclet000_4" (formula "19") (term "0,0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet000_5" (formula "19") (term "0,0,1,0"))
                        (rule "replaceKnownSelect_taclet000_4" (formula "19") (term "0,0,1,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet000_5" (formula "19") (term "0,0,1,0,0"))
                        (rule "inEqSimp_commuteGeq" (formula "19") (term "1,0,0,0"))
                        (rule "applyEq" (formula "19") (term "0,1") (ifseqformula "17"))
                        (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "5"))
                        (builtin "One Step Simplification" (formula "19"))
                        (rule "true_left" (formula "19"))
                        (rule "allLeft" (formula "22") (inst "t=iv_1"))
                        (rule "replaceKnownSelect_taclet000_2" (formula "22") (term "0,1,1,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "22") (term "0,1,1,1,0"))
                        (rule "replaceKnownSelect_taclet000_4" (formula "22") (term "0,1,1,0,0,0"))
                        (rule "replaceKnownSelect_taclet000_2" (formula "22") (term "0,0,0,1,1,0"))
                        (rule "replaceKnownSelect_taclet000_2" (formula "22") (term "0,1,1,1,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet000_5" (formula "22") (term "0,1,1,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "22") (term "0,0,0,1,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "22") (term "0,1,1,1,0,0"))
                        (rule "replaceKnownSelect_taclet000_4" (formula "22") (term "1,0,0,0,0,0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet000_5" (formula "22") (term "1,0,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_commuteGeq" (formula "22") (term "1,0,0,0,0,0"))
                        (rule "applyEq" (formula "22") (term "1,1,1,0") (ifseqformula "17"))
                        (rule "applyEq" (formula "22") (term "0,0,1,1,0") (ifseqformula "17"))
                        (rule "replace_known_left" (formula "22") (term "0,1,1,0") (ifseqformula "5"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "applyEq" (formula "22") (term "1,1,1,0,0") (ifseqformula "17"))
                        (rule "inEqSimp_contradInEq1" (formula "22") (term "1,0,0,0,0,0,0") (ifseqformula "6"))
                        (rule "qeq_literals" (formula "22") (term "0,1,0,0,0,0,0,0"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "inEqSimp_contradInEq1" (formula "22") (term "1,0,0,0,0,0") (ifseqformula "7"))
                        (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1,0,0,0,0,0"))
                        (rule "add_literals" (formula "22") (term "1,1,0,0,1,0,0,0,0,0"))
                        (rule "times_zero_1" (formula "22") (term "1,0,0,1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "22") (term "0,0,1,0,0,0,0,0"))
                        (rule "leq_literals" (formula "22") (term "0,1,0,0,0,0,0"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "22") (term "1,0"))
                        (rule "polySimp_pullOutFactor1" (formula "22") (term "0,1,0"))
                        (rule "add_literals" (formula "22") (term "1,0,1,0"))
                        (rule "times_zero_1" (formula "22") (term "0,1,0"))
                        (rule "leq_literals" (formula "22") (term "1,0"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "true_left" (formula "22"))
                        (rule "allLeft" (formula "23") (inst "t=iv_1"))
                        (rule "replaceKnownSelect_taclet000_2" (formula "23") (term "0,1,1,1,0"))
                        (rule "replaceKnownSelect_taclet000_2" (formula "23") (term "0,1,1,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "23") (term "0,1,1,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "23") (term "0,1,1,0,0"))
                        (rule "replaceKnownSelect_taclet000_2" (formula "23") (term "0,0,0,1,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "23") (term "0,0,0,1,1,0"))
                        (rule "replaceKnownSelect_taclet000_4" (formula "23") (term "0,1,1,1,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet000_5" (formula "23") (term "0,1,1,1,0,0,0"))
                        (rule "replaceKnownSelect_taclet000_2" (formula "23") (term "1,0,0,0,0,0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "23") (term "1,0,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_commuteGeq" (formula "23") (term "1,0,0,0,0,0"))
                        (rule "applyEq" (formula "23") (term "0,0,1,1,0") (ifseqformula "17"))
                        (rule "replace_known_left" (formula "23") (term "0,1,1,0") (ifseqformula "5"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "applyEq" (formula "23") (term "1,1,0") (ifseqformula "17"))
                        (rule "inEqSimp_contradInEq1" (formula "23") (term "1,0,0,0,0,0") (ifseqformula "6"))
                        (rule "qeq_literals" (formula "23") (term "0,1,0,0,0,0,0"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "inEqSimp_contradInEq1" (formula "23") (term "1,0,0,0,0") (ifseqformula "7"))
                        (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "23") (term "1,1,0,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "23") (term "1,0,0,1,0,0,0,0"))
                        (rule "add_zero_right" (formula "23") (term "0,0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "23") (term "0,1,0,0,0,0"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "inEqSimp_or_tautInEq1" (formula "23") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "23") (term "1,0"))
                        (rule "polySimp_pullOutFactor1" (formula "23") (term "0,1,0"))
                        (rule "add_literals" (formula "23") (term "1,0,1,0"))
                        (rule "times_zero_1" (formula "23") (term "0,1,0"))
                        (rule "leq_literals" (formula "23") (term "1,0"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "true_left" (formula "23"))
                        (rule "allLeft" (formula "21") (inst "t=iv_1"))
                        (rule "replaceKnownSelect_taclet000_2" (formula "21") (term "0,1,1,1,0"))
                        (rule "replaceKnownSelect_taclet000_2" (formula "21") (term "0,1,1,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "21") (term "0,1,1,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "21") (term "0,1,1,0,0"))
                        (rule "replaceKnownSelect_taclet000_2" (formula "21") (term "0,0,0,1,1,0"))
                        (rule "replaceKnownSelect_taclet000_4" (formula "21") (term "0,1,1,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "21") (term "0,0,0,1,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet000_5" (formula "21") (term "0,1,1,0,0,0"))
                        (rule "replaceKnownSelect_taclet000_2" (formula "21") (term "1,0,0,0,0,0,0,0,0"))
                        (rule "replaceKnownSelect_taclet000_4" (formula "21") (term "1,1,0,0,0,0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "21") (term "1,0,0,0,0,0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet000_5" (formula "21") (term "1,1,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_commuteGeq" (formula "21") (term "1,0,0,0,0,0"))
                        (rule "applyEq" (formula "21") (term "0,0,1,1,0") (ifseqformula "17"))
                        (rule "replace_known_left" (formula "21") (term "0,1,1,0") (ifseqformula "5"))
                        (builtin "One Step Simplification" (formula "21"))
                        (rule "applyEq" (formula "21") (term "1,1,0") (ifseqformula "17"))
                        (builtin "One Step Simplification" (formula "21"))
                        (rule "inEqSimp_contradInEq1" (formula "21") (term "1,0,0,0") (ifseqformula "7"))
                        (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "21") (term "1,1,0,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "21") (term "1,0,0,1,0,0,0"))
                        (rule "add_zero_right" (formula "21") (term "0,0,1,0,0,0"))
                        (rule "leq_literals" (formula "21") (term "0,1,0,0,0"))
                        (builtin "One Step Simplification" (formula "21"))
                        (rule "inEqSimp_contradInEq1" (formula "21") (term "1,0,0,0") (ifseqformula "6"))
                        (rule "qeq_literals" (formula "21") (term "0,1,0,0,0"))
                        (builtin "One Step Simplification" (formula "21"))
                        (rule "allLeft" (formula "21") (inst "t=iv_3"))
                        (rule "replaceKnownSelect_taclet0000000_9" (formula "21") (term "1,0,0"))
                        (rule "replaceKnownSelect_taclet0000000_8" (formula "21") (term "0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0000000_10" (formula "21") (term "1,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10000000_11" (formula "21") (term "0,0,0"))
                        (rule "eqSymm" (formula "21") (term "0,0"))
                        (rule "narrowSelectArrayType" (formula "21") (term "0,0,0") (ifseqformula "8") (ifseqformula "30"))
                        (rule "eqSymm" (formula "21") (term "0,0"))
                        (rule "replace_known_right" (formula "21") (term "0,0") (ifseqformula "34"))
                        (builtin "One Step Simplification" (formula "21"))
                        (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
                        (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "21") (term "0,0,1"))
                        (rule "leq_literals" (formula "21") (term "0,1"))
                        (builtin "One Step Simplification" (formula "21"))
                        (rule "inEqSimp_contradInEq1" (formula "21") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "21") (term "0"))
                        (builtin "One Step Simplification" (formula "21"))
                        (rule "closeFalse" (formula "21"))
                     )
                  )
                  (branch " result[iv_1]@anon_heap_copyOf«anonHeapFunction».length ≥ 1 FALSE"
                     (rule "eqSymm" (formula "20") (term "0"))
                     (rule "replace_known_right" (formula "20") (term "0,1,1,0,0,1") (ifseqformula "19"))
                     (builtin "One Step Simplification" (formula "20"))
                     (rule "inEqSimp_geqRight" (formula "19"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_contradEq7" (formula "20") (term "0") (ifseqformula "2"))
                     (rule "times_zero_1" (formula "20") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "20") (term "0,0,0"))
                     (rule "leq_literals" (formula "20") (term "0,0"))
                     (builtin "One Step Simplification" (formula "20"))
                     (rule "false_right" (formula "20"))
                     (rule "cnf_rightDist" (formula "14") (term "1,1,0"))
                     (rule "commute_or" (formula "14") (term "1,1,1,0"))
                     (rule "commute_or_2" (formula "14") (term "0,1,1,0,1,0"))
                     (rule "allLeft" (formula "8") (inst "t=iv_1"))
                     (rule "inEqSimp_commuteGeq" (formula "8") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "8") (term "1") (ifseqformula "4"))
                     (rule "inEqSimp_homoInEq1" (formula "8") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1"))
                     (rule "add_literals" (formula "8") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "8") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "8") (term "0,0,1"))
                     (rule "leq_literals" (formula "8") (term "0,1"))
                     (builtin "One Step Simplification" (formula "8"))
                     (rule "inEqSimp_contradInEq1" (formula "8") (term "1") (ifseqformula "3"))
                     (rule "qeq_literals" (formula "8") (term "0,1"))
                     (builtin "One Step Simplification" (formula "8"))
                     (rule "notLeft" (formula "8"))
                     (rule "allLeft" (formula "15") (inst "t=iv_1"))
                     (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "15") (term "1,0") (ifseqformula "3"))
                     (rule "qeq_literals" (formula "15") (term "0,1,0"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "4"))
                     (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
                     (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "15") (term "0,0,1"))
                     (rule "leq_literals" (formula "15") (term "0,1"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "notLeft" (formula "15"))
                     (rule "pullOutSelect" (formula "17") (term "0") (inst "selectSK=arr_7"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "11"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")) (ifInst ""  (formula "20")))
                     (rule "applyEqReverse" (formula "18") (term "0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "narrowSelectArrayType" (formula "17") (term "0") (ifseqformula "9") (ifseqformula "20"))
                     (rule "commute_or" (formula "14") (term "0,0,1,1,0,1,0"))
                     (rule "ifthenelse_to_or_left" (formula "14") (term "0,1,0,1,0"))
                     (rule "eqSymm" (formula "14") (term "1,1,0,1,0,1,0"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "eqSymm" (formula "14") (term "1,0,0,1,0,1,0"))
                     (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,1,0,1,0"))
                     (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0,1,0,1,0"))
                     (rule "add_literals" (formula "14") (term "0,0,0,0,0,1,0,1,0"))
                     (rule "add_zero_left" (formula "14") (term "0,0,0,0,1,0,1,0"))
                     (rule "inEqSimp_notGeq" (formula "14") (term "0,1,1,0,1,0,1,0"))
                     (rule "mul_literals" (formula "14") (term "1,0,0,0,1,1,0,1,0,1,0"))
                     (rule "add_literals" (formula "14") (term "0,0,0,1,1,0,1,0,1,0"))
                     (rule "add_zero_left" (formula "14") (term "0,0,1,1,0,1,0,1,0"))
                     (rule "commute_or" (formula "14") (term "1,0,1,0,1,0"))
                     (rule "all_pull_out1" (formula "14") (term "1,0,1,0"))
                     (rule "all_pull_out3" (formula "14") (term "0,1,0"))
                     (rule "cnf_rightDist" (formula "14") (term "0,0,1,0"))
                     (rule "commute_or_2" (formula "14") (term "1,0,0,1,0"))
                     (rule "commute_or_2" (formula "14") (term "0,1,0,0,1,0"))
                     (rule "cnf_rightDist" (formula "14") (term "0,0,0,1,0"))
                     (rule "commute_or_2" (formula "14") (term "1,0,0,0,1,0"))
                     (rule "shift_paren_or" (formula "14") (term "0,0,0,0,1,0"))
                     (rule "commute_or_2" (formula "14") (term "0,1,0,0,0,1,0"))
                     (rule "shift_paren_or" (formula "14") (term "0,0,1,0,0,1,0"))
                     (rule "commute_or" (formula "14") (term "0,0,1,0,0,0,1,0"))
                     (rule "all_pull_out0" (formula "14") (term "1,0"))
                     (rule "shift_paren_and" (formula "14") (term "0,1,0"))
                     (rule "all_pull_out3" (formula "14") (term "0"))
                     (rule "cnf_rightDist" (formula "14") (term "0,0"))
                     (rule "distr_forallAnd" (formula "14") (term "0"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "distr_forallAnd" (formula "14"))
                     (rule "andLeft" (formula "14"))
                     (rule "shift_paren_or" (formula "15") (term "0"))
                     (rule "commute_or_2" (formula "15") (term "0,0"))
                     (rule "inEqSimp_or_tautInEq1" (formula "15") (term "0"))
                     (rule "inEqSimp_homoInEq1" (formula "15") (term "1,0"))
                     (rule "polySimp_pullOutFactor1" (formula "15") (term "0,1,0"))
                     (rule "add_literals" (formula "15") (term "1,0,1,0"))
                     (rule "times_zero_1" (formula "15") (term "0,1,0"))
                     (rule "leq_literals" (formula "15") (term "1,0"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "true_left" (formula "15"))
                     (rule "cnf_rightDist" (formula "14") (term "0,0"))
                     (rule "distr_forallAnd" (formula "14") (term "0"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "distr_forallAnd" (formula "14"))
                     (rule "andLeft" (formula "14"))
                     (rule "shift_paren_or" (formula "15") (term "0"))
                     (rule "inEqSimp_or_tautInEq3" (formula "15") (term "0,0"))
                     (rule "add_literals" (formula "15") (term "1,1,0,0"))
                     (rule "qeq_literals" (formula "15") (term "1,0,0"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "true_left" (formula "15"))
                     (rule "cnf_rightDist" (formula "14") (term "0,0"))
                     (rule "distr_forallAnd" (formula "14") (term "0"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "distr_forallAnd" (formula "14"))
                     (rule "andLeft" (formula "14"))
                     (rule "commute_or_2" (formula "15") (term "0,0"))
                     (rule "commute_or_2" (formula "15") (term "0,0,0"))
                     (rule "cnf_rightDist" (formula "14") (term "0"))
                     (rule "distr_forallAnd" (formula "14"))
                     (rule "andLeft" (formula "14"))
                     (rule "commute_or_2" (formula "15") (term "0"))
                     (rule "shift_paren_or" (formula "14") (term "0"))
                     (rule "commute_or_2" (formula "15") (term "0,0"))
                     (rule "shift_paren_or" (formula "14") (term "0,0"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "commute_or_2" (formula "15") (term "0,0,0"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "shift_paren_or" (formula "16") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "16") (term "0,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "ifthenelse_to_or_left" (formula "14") (term "1,0"))
                     (rule "eqSymm" (formula "14") (term "1,0,1,0"))
                     (rule "eqSymm" (formula "14") (term "1,1,1,0"))
                     (rule "inEqSimp_notGeq" (formula "14") (term "0,0,1,0"))
                     (rule "mul_literals" (formula "14") (term "1,0,0,0,0,1,0"))
                     (rule "add_literals" (formula "14") (term "0,0,0,0,1,0"))
                     (rule "add_zero_left" (formula "14") (term "0,0,0,1,0"))
                     (rule "cnf_rightDist" (formula "14") (term "0"))
                     (rule "distr_forallAnd" (formula "14"))
                     (rule "andLeft" (formula "14"))
                     (rule "commute_or_2" (formula "15") (term "0"))
                     (rule "shift_paren_or" (formula "14") (term "0"))
                     (rule "commute_or_2" (formula "14") (term "0,0"))
                     (rule "shift_paren_or" (formula "15") (term "0,0"))
                     (rule "commute_or" (formula "15") (term "0,0,0"))
                     (rule "ifthenelse_to_or_left" (formula "17") (term "0,0,0,0,0,0"))
                     (rule "eqSymm" (formula "17") (term "1,1,0,0,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "eqSymm" (formula "17") (term "1,0,0,0,0,0,0,0"))
                     (rule "nnf_notAnd" (formula "17") (term "0,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "17") (term "1,0,0,0,0,0,0,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "17") (term "0,0,0,0,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "17") (term "1,0,0,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0,0,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,0,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,0,0,0,0,0,0"))
                     (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "17") (term "0,0,1,0,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0,0,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0,0,0,0,0,0"))
                     (rule "nnf_notAnd" (formula "17") (term "0,1,1,0,0,0,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "17") (term "0,0,1,1,0,0,0,0,0,0"))
                     (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,1,1,0,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "17") (term "0,0,0,0,1,1,0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,1,1,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "17") (term "1,0,0,1,1,0,0,0,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "17") (term "1,0,1,1,0,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,1,1,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,1,1,0,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,1,1,0,0,0,0,0,0"))
                     (rule "add_literals" (formula "17") (term "0,0,0,1,0,1,1,0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "17") (term "0,0,1,0,1,1,0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,1,1,0,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,1,1,0,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "17") (term "1,1,0,1,1,0,0,0,0,0,0"))
                     (rule "commute_or" (formula "17") (term "0,0,0,0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,0"))
                     (rule "commute_or" (formula "17") (term "1,1,0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,1,0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,1,1,0,0"))
                     (rule "commute_or" (formula "17") (term "0,0,1,0,0"))
                     (rule "commute_or" (formula "17") (term "0,0,1,1,0,0"))
                     (rule "cnf_rightDist" (formula "17") (term "1,1,0,0"))
                     (rule "commute_or" (formula "17") (term "1,1,1,0,0"))
                     (rule "cnf_rightDist" (formula "17") (term "0,0"))
                     (rule "distr_forallAnd" (formula "17") (term "0"))
                     (rule "distr_forallAnd" (formula "17"))
                     (rule "andLeft" (formula "17"))
                     (rule "commute_or" (formula "18") (term "0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,0"))
                     (rule "commute_or_2" (formula "18") (term "0,1,0,0"))
                     (rule "inEqSimp_or_tautInEq1" (formula "18") (term "0,0,1,0,0"))
                     (rule "add_zero_right" (formula "18") (term "1,1,0,0,1,0,0"))
                     (rule "qeq_literals" (formula "18") (term "1,0,0,1,0,0"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "commute_or_2" (formula "18") (term "0,0"))
                     (rule "shift_paren_or" (formula "17") (term "0,0,0"))
                     (rule "shift_paren_or" (formula "18") (term "0,0,0"))
                     (rule "shift_paren_or" (formula "17") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "18") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "commute_or_2" (formula "17") (term "0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "18") (term "0,0,0,0,0"))
                     (rule "commute_or" (formula "17") (term "0,0,0,0,0,0"))
                     (rule "commute_or_2" (formula "18") (term "0,0,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "commute_or_2" (formula "18") (term "0,0,0,0,0,0"))
                     (rule "commute_or" (formula "18") (term "0,0,0,0,0,0,0"))
                     (rule "arrayLengthNotNegative" (formula "2") (term "0"))
                     (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "3"))
                     (rule "leq_literals" (formula "2") (term "0"))
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "arrayLengthIsAShort" (formula "2") (term "0"))
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "arrayLengthNotNegative" (formula "1") (term "0"))
                     (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "2"))
                     (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                     (rule "leq_literals" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "ifthenelse_to_or_left" (formula "17") (term "0,0,0,0,0,0,0"))
                     (rule "eqSymm" (formula "17") (term "1,0,0,0,0,0,0,0,0"))
                     (rule "eqSymm" (formula "17") (term "1,1,0,0,0,0,0,0,0"))
                     (rule "nnf_notAnd" (formula "17") (term "0,0,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0,0,0,0,0,0,0,0"))
                     (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0,0,0,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "17") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,0,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "17") (term "1,0,0,0,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0,0,0,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,0,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,0,0,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
                     (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,0,0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "17") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0,0,0,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,0,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0,0,0,0,0,0,0"))
                     (rule "commute_or" (formula "17") (term "0,0,0,0,0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,0,0,0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,0"))
                     (rule "commute_or" (formula "17") (term "1,1,0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,1,0,0"))
                     (rule "commute_or" (formula "17") (term "0,0,1,0,0"))
                     (rule "cnf_rightDist" (formula "17") (term "1,1,0,0"))
                     (rule "cnf_rightDist" (formula "17") (term "0,0"))
                     (rule "distr_forallAnd" (formula "17") (term "0"))
                     (rule "distr_forallAnd" (formula "17"))
                     (rule "andLeft" (formula "17"))
                     (rule "commute_or" (formula "18") (term "0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,0,0"))
                     (rule "commute_or" (formula "18") (term "1,1,0,0"))
                     (rule "cnf_rightDist" (formula "18") (term "0,0"))
                     (rule "distr_forallAnd" (formula "18") (term "0"))
                     (rule "distr_forallAnd" (formula "18"))
                     (rule "andLeft" (formula "18"))
                     (rule "commute_or_2" (formula "18") (term "0,0"))
                     (rule "shift_paren_or" (formula "19") (term "0,0"))
                     (rule "commute_or_2" (formula "18") (term "0,0,0"))
                     (rule "shift_paren_or" (formula "19") (term "0,0,0"))
                     (rule "commute_or_2" (formula "19") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "17") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "18") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "18") (term "0,0,0,0,0"))
                     (rule "inEqSimp_or_tautInEq1" (formula "18") (term "0,0,0,0"))
                     (rule "add_zero_right" (formula "18") (term "1,1,0,0,0,0"))
                     (rule "qeq_literals" (formula "18") (term "1,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "true_left" (formula "18"))
                     (rule "shift_paren_or" (formula "18") (term "0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "17") (term "0,0,0,0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,0,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "commute_or_2" (formula "17") (term "0,0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "18") (term "0,0,0,0,0,0"))
                     (rule "commute_or" (formula "17") (term "0,0,0,0,0,0,0"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "2") (term "0,0") (ifseqformula "5"))
                     (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "24"))
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "arrayLengthIsAShort" (formula "1") (term "0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "23") (term "0") (ifseqformula "10"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "24"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "allLeft" (formula "16") (inst "t=iv_1"))
                     (rule "replaceKnownSelect_taclet000_2" (formula "16") (term "0,0,1"))
                     (rule "replaceKnownSelect_taclet000_4" (formula "16") (term "0,1,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "16") (term "0,0,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet000_5" (formula "16") (term "0,1,1"))
                     (rule "replaceKnownSelect_taclet000_2" (formula "16") (term "0,0,1,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "16") (term "0,0,1,0"))
                     (rule "replaceKnownSelect_taclet000_4" (formula "16") (term "0,0,1,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet000_5" (formula "16") (term "0,0,1,0,0"))
                     (rule "inEqSimp_commuteGeq" (formula "16") (term "1,0,0,0"))
                     (rule "applyEq" (formula "16") (term "0,1,0") (ifseqformula "2"))
                     (rule "leq_literals" (formula "16") (term "1,0"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "true_left" (formula "16"))
                     (rule "allLeft" (formula "17") (inst "t=iv_1"))
                     (rule "replaceKnownSelect_taclet000_2" (formula "17") (term "0,0,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "17") (term "0,0,1"))
                     (rule "replaceKnownSelect_taclet000_2" (formula "17") (term "0,0,1,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "17") (term "0,0,1,0"))
                     (rule "replaceKnownSelect_taclet000_4" (formula "17") (term "0,0,1,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet000_5" (formula "17") (term "0,0,1,0,0"))
                     (rule "replace_known_left" (formula "17") (term "1,0,0") (ifseqformula "4"))
                     (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "2")))
                     (rule "true_left" (formula "17"))
                     (rule "allLeft" (formula "18") (inst "t=iv_1"))
                     (rule "replaceKnownSelect_taclet000_2" (formula "18") (term "0,0,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "18") (term "0,0,1"))
                     (rule "replaceKnownSelect_taclet000_4" (formula "18") (term "0,0,1,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet000_5" (formula "18") (term "0,0,1,0"))
                     (rule "replaceKnownSelect_taclet000_4" (formula "18") (term "0,0,1,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet000_5" (formula "18") (term "0,0,1,0,0"))
                     (rule "inEqSimp_commuteGeq" (formula "18") (term "1,0,0,0"))
                     (rule "applyEq" (formula "18") (term "0,1") (ifseqformula "2"))
                     (rule "qeq_literals" (formula "18") (term "1"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_contradEq7" (formula "18") (term "1") (ifseqformula "4"))
                     (rule "times_zero_1" (formula "18") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "18") (term "0,0,1"))
                     (rule "leq_literals" (formula "18") (term "0,1"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_contradInEq1" (formula "18") (term "1") (ifseqformula "4"))
                     (rule "qeq_literals" (formula "18") (term "0,1"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_contradInEq1" (formula "18") (term "1") (ifseqformula "6"))
                     (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1"))
                     (rule "add_literals" (formula "18") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "18") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "18") (term "0,0,1"))
                     (rule "leq_literals" (formula "18") (term "0,1"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_contradInEq1" (formula "18") (ifseqformula "5"))
                     (rule "qeq_literals" (formula "18") (term "0"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "closeFalse" (formula "18"))
                  )
               )
               (branch "msg[iv_1].length ≥ 1 FALSE"
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "inEqSimp_geqRight" (formula "18"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_notGeq" (formula "19") (term "0,0"))
                  (rule "mul_literals" (formula "19") (term "1,0,0,0,0"))
                  (rule "add_literals" (formula "19") (term "0,0,0,0"))
                  (rule "add_zero_left" (formula "19") (term "0,0,0"))
                  (rule "cnf_rightDist" (formula "13") (term "1,1,0"))
                  (rule "commute_or" (formula "13") (term "1,1,1,0"))
                  (rule "commute_or_2" (formula "13") (term "0,1,1,0,1,0"))
                  (rule "allLeft" (formula "7") (inst "t=iv_1"))
                  (rule "inEqSimp_commuteGeq" (formula "7") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "7") (term "1") (ifseqformula "3"))
                  (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1"))
                  (rule "add_literals" (formula "7") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "7") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "7") (term "0,0,1"))
                  (rule "leq_literals" (formula "7") (term "0,1"))
                  (builtin "One Step Simplification" (formula "7"))
                  (rule "inEqSimp_contradInEq1" (formula "7") (term "1") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "7") (term "0,1"))
                  (builtin "One Step Simplification" (formula "7"))
                  (rule "notLeft" (formula "7"))
                  (rule "allLeft" (formula "14") (inst "t=iv_1"))
                  (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "14") (term "1,0") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "14") (term "0,1,0"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "3"))
                  (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1"))
                  (rule "add_literals" (formula "14") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "14") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "14") (term "0,0,1"))
                  (rule "leq_literals" (formula "14") (term "0,1"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "notLeft" (formula "14"))
                  (rule "pullOutSelect" (formula "16") (term "0") (inst "selectSK=arr_6"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "10"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")) (ifInst ""  (formula "19")))
                  (rule "applyEqReverse" (formula "17") (term "0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "narrowSelectArrayType" (formula "16") (term "0") (ifseqformula "8") (ifseqformula "19"))
                  (rule "commute_or" (formula "13") (term "0,0,1,1,0,1,0"))
                  (rule "ifthenelse_to_or_left" (formula "13") (term "0,1,0,1,0"))
                  (rule "eqSymm" (formula "13") (term "1,1,0,1,0,1,0"))
                  (builtin "One Step Simplification" (formula "13"))
                  (rule "eqSymm" (formula "13") (term "1,0,0,1,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,1,0,1,0"))
                  (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,1,0,1,0"))
                  (rule "add_literals" (formula "13") (term "0,0,0,0,0,1,0,1,0"))
                  (rule "add_zero_left" (formula "13") (term "0,0,0,0,1,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "13") (term "0,1,1,0,1,0,1,0"))
                  (rule "mul_literals" (formula "13") (term "1,0,0,0,1,1,0,1,0,1,0"))
                  (rule "add_literals" (formula "13") (term "0,0,0,1,1,0,1,0,1,0"))
                  (rule "add_zero_left" (formula "13") (term "0,0,1,1,0,1,0,1,0"))
                  (rule "commute_or" (formula "13") (term "1,0,1,0,1,0"))
                  (rule "ifthenelse_split" (formula "21") (term "1,1,0,0,1"))
                  (branch " result[iv_1]@anon_heap_copyOf«anonHeapFunction».length ≥ 1 TRUE"
                     (rule "inEqSimp_contradEq7" (formula "22") (term "1,0") (ifseqformula "1"))
                     (rule "times_zero_1" (formula "22") (term "1,0,0,1,0"))
                     (rule "add_zero_right" (formula "22") (term "0,0,1,0"))
                     (rule "leq_literals" (formula "22") (term "0,1,0"))
                     (builtin "One Step Simplification" (formula "22"))
                     (rule "inEqSimp_contradInEq1" (formula "22") (term "0") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "22") (term "0,0"))
                     (builtin "One Step Simplification" (formula "22"))
                     (rule "false_right" (formula "22"))
                     (rule "all_pull_out1" (formula "14") (term "1,0,1,0"))
                     (rule "all_pull_out3" (formula "14") (term "0,1,0"))
                     (rule "cnf_rightDist" (formula "14") (term "0,0,1,0"))
                     (rule "commute_or_2" (formula "14") (term "1,0,0,1,0"))
                     (rule "commute_or_2" (formula "14") (term "0,1,0,0,1,0"))
                     (rule "cnf_rightDist" (formula "14") (term "0,0,0,1,0"))
                     (rule "commute_or_2" (formula "14") (term "1,0,0,0,1,0"))
                     (rule "shift_paren_or" (formula "14") (term "0,0,0,0,1,0"))
                     (rule "commute_or_2" (formula "14") (term "0,1,0,0,0,1,0"))
                     (rule "shift_paren_or" (formula "14") (term "0,0,1,0,0,1,0"))
                     (rule "commute_or" (formula "14") (term "0,0,1,0,0,0,1,0"))
                     (rule "all_pull_out0" (formula "14") (term "1,0"))
                     (rule "shift_paren_and" (formula "14") (term "0,1,0"))
                     (rule "all_pull_out3" (formula "14") (term "0"))
                     (rule "cnf_rightDist" (formula "14") (term "0,0"))
                     (rule "distr_forallAnd" (formula "14") (term "0"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "distr_forallAnd" (formula "14"))
                     (rule "andLeft" (formula "14"))
                     (rule "shift_paren_or" (formula "15") (term "0"))
                     (rule "commute_or_2" (formula "15") (term "0,0"))
                     (rule "inEqSimp_or_tautInEq1" (formula "15") (term "0"))
                     (rule "inEqSimp_homoInEq1" (formula "15") (term "1,0"))
                     (rule "polySimp_pullOutFactor1" (formula "15") (term "0,1,0"))
                     (rule "add_literals" (formula "15") (term "1,0,1,0"))
                     (rule "times_zero_1" (formula "15") (term "0,1,0"))
                     (rule "leq_literals" (formula "15") (term "1,0"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "true_left" (formula "15"))
                     (rule "cnf_rightDist" (formula "14") (term "0,0"))
                     (rule "distr_forallAnd" (formula "14") (term "0"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "distr_forallAnd" (formula "14"))
                     (rule "andLeft" (formula "14"))
                     (rule "shift_paren_or" (formula "15") (term "0"))
                     (rule "inEqSimp_or_tautInEq3" (formula "15") (term "0,0"))
                     (rule "add_literals" (formula "15") (term "1,1,0,0"))
                     (rule "qeq_literals" (formula "15") (term "1,0,0"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "true_left" (formula "15"))
                     (rule "cnf_rightDist" (formula "14") (term "0,0"))
                     (rule "distr_forallAnd" (formula "14") (term "0"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "distr_forallAnd" (formula "14"))
                     (rule "andLeft" (formula "14"))
                     (rule "commute_or_2" (formula "15") (term "0,0"))
                     (rule "commute_or_2" (formula "15") (term "0,0,0"))
                     (rule "cnf_rightDist" (formula "14") (term "0"))
                     (rule "distr_forallAnd" (formula "14"))
                     (rule "andLeft" (formula "14"))
                     (rule "commute_or_2" (formula "15") (term "0"))
                     (rule "shift_paren_or" (formula "14") (term "0"))
                     (rule "commute_or_2" (formula "15") (term "0,0"))
                     (rule "shift_paren_or" (formula "14") (term "0,0"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "commute_or_2" (formula "15") (term "0,0,0"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "shift_paren_or" (formula "16") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "16") (term "0,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "ifthenelse_to_or_left" (formula "14") (term "1,0"))
                     (rule "eqSymm" (formula "14") (term "1,0,1,0"))
                     (rule "eqSymm" (formula "14") (term "1,1,1,0"))
                     (rule "inEqSimp_notGeq" (formula "14") (term "0,0,1,0"))
                     (rule "mul_literals" (formula "14") (term "1,0,0,0,0,1,0"))
                     (rule "add_literals" (formula "14") (term "0,0,0,0,1,0"))
                     (rule "add_zero_left" (formula "14") (term "0,0,0,1,0"))
                     (rule "cnf_rightDist" (formula "14") (term "0"))
                     (rule "distr_forallAnd" (formula "14"))
                     (rule "andLeft" (formula "14"))
                     (rule "commute_or_2" (formula "15") (term "0"))
                     (rule "shift_paren_or" (formula "14") (term "0"))
                     (rule "commute_or_2" (formula "14") (term "0,0"))
                     (rule "shift_paren_or" (formula "15") (term "0,0"))
                     (rule "commute_or" (formula "15") (term "0,0,0"))
                     (rule "ifthenelse_to_or_left" (formula "17") (term "0,0,0,0,0,0"))
                     (rule "eqSymm" (formula "17") (term "1,1,0,0,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "eqSymm" (formula "17") (term "1,0,0,0,0,0,0,0"))
                     (rule "nnf_notAnd" (formula "17") (term "0,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "17") (term "1,0,0,0,0,0,0,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "17") (term "0,0,0,0,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "17") (term "1,0,0,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0,0,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,0,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,0,0,0,0,0,0"))
                     (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "17") (term "0,0,1,0,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0,0,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0,0,0,0,0,0"))
                     (rule "nnf_notAnd" (formula "17") (term "0,1,1,0,0,0,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "17") (term "0,0,1,1,0,0,0,0,0,0"))
                     (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,1,1,0,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "17") (term "0,0,0,0,1,1,0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,1,1,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "17") (term "1,0,0,1,1,0,0,0,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "17") (term "1,0,1,1,0,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,1,1,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,1,1,0,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,1,1,0,0,0,0,0,0"))
                     (rule "add_literals" (formula "17") (term "0,0,0,1,0,1,1,0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "17") (term "0,0,1,0,1,1,0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,1,1,0,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,1,1,0,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "17") (term "1,1,0,1,1,0,0,0,0,0,0"))
                     (rule "commute_or" (formula "17") (term "0,0,0,0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,0"))
                     (rule "commute_or" (formula "17") (term "1,1,0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,1,0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,1,1,0,0"))
                     (rule "commute_or" (formula "17") (term "0,0,1,0,0"))
                     (rule "commute_or" (formula "17") (term "0,0,1,1,0,0"))
                     (rule "cnf_rightDist" (formula "17") (term "1,1,0,0"))
                     (rule "commute_or" (formula "17") (term "1,1,1,0,0"))
                     (rule "cnf_rightDist" (formula "17") (term "0,0"))
                     (rule "distr_forallAnd" (formula "17") (term "0"))
                     (rule "distr_forallAnd" (formula "17"))
                     (rule "andLeft" (formula "17"))
                     (rule "commute_or" (formula "18") (term "0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,0"))
                     (rule "commute_or_2" (formula "18") (term "0,1,0,0"))
                     (rule "inEqSimp_or_tautInEq1" (formula "18") (term "0,0,1,0,0"))
                     (rule "add_zero_right" (formula "18") (term "1,1,0,0,1,0,0"))
                     (rule "qeq_literals" (formula "18") (term "1,0,0,1,0,0"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "commute_or_2" (formula "18") (term "0,0"))
                     (rule "shift_paren_or" (formula "17") (term "0,0,0"))
                     (rule "shift_paren_or" (formula "18") (term "0,0,0"))
                     (rule "shift_paren_or" (formula "17") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "18") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "commute_or_2" (formula "17") (term "0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "18") (term "0,0,0,0,0"))
                     (rule "commute_or" (formula "17") (term "0,0,0,0,0,0"))
                     (rule "commute_or_2" (formula "18") (term "0,0,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "commute_or_2" (formula "18") (term "0,0,0,0,0,0"))
                     (rule "commute_or" (formula "18") (term "0,0,0,0,0,0,0"))
                     (rule "arrayLengthIsAShort" (formula "2") (term "0"))
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "arrayLengthNotNegative" (formula "2") (term "0"))
                     (rule "inEqSimp_antiSymm" (formula "2") (ifseqformula "3"))
                     (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
                     (rule "qeq_literals" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
                     (rule "leq_literals" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "arrayLengthNotNegative" (formula "1") (term "0"))
                     (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "2"))
                     (rule "leq_literals" (formula "1") (term "0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "arrayLengthIsAShort" (formula "1") (term "0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "ifthenelse_to_or_left" (formula "17") (term "0,0,0,0,0,0,0"))
                     (rule "eqSymm" (formula "17") (term "1,0,0,0,0,0,0,0,0"))
                     (rule "eqSymm" (formula "17") (term "1,1,0,0,0,0,0,0,0"))
                     (rule "nnf_notAnd" (formula "17") (term "0,0,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0,0,0,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,0,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,0,0,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
                     (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,0,0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "17") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0,0,0,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,0,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0,0,0,0,0,0,0,0"))
                     (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0,0,0,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "17") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,0,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "17") (term "1,0,0,0,0,0,0,0,0,0,0"))
                     (rule "commute_or" (formula "17") (term "0,0,0,0,0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,0,0,0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,0"))
                     (rule "commute_or" (formula "17") (term "1,1,0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,1,0,0"))
                     (rule "commute_or" (formula "17") (term "0,0,1,0,0"))
                     (rule "cnf_rightDist" (formula "17") (term "1,1,0,0"))
                     (rule "cnf_rightDist" (formula "17") (term "0,0"))
                     (rule "distr_forallAnd" (formula "17") (term "0"))
                     (rule "distr_forallAnd" (formula "17"))
                     (rule "andLeft" (formula "17"))
                     (rule "commute_or" (formula "18") (term "0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,0,0"))
                     (rule "commute_or" (formula "18") (term "1,1,0,0"))
                     (rule "cnf_rightDist" (formula "18") (term "0,0"))
                     (rule "distr_forallAnd" (formula "18") (term "0"))
                     (rule "distr_forallAnd" (formula "18"))
                     (rule "andLeft" (formula "18"))
                     (rule "commute_or_2" (formula "18") (term "0,0"))
                     (rule "shift_paren_or" (formula "19") (term "0,0"))
                     (rule "commute_or_2" (formula "18") (term "0,0,0"))
                     (rule "shift_paren_or" (formula "19") (term "0,0,0"))
                     (rule "commute_or_2" (formula "19") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "17") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "18") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "18") (term "0,0,0,0,0"))
                     (rule "inEqSimp_or_tautInEq1" (formula "18") (term "0,0,0,0"))
                     (rule "add_zero_right" (formula "18") (term "1,1,0,0,0,0"))
                     (rule "qeq_literals" (formula "18") (term "1,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "true_left" (formula "18"))
                     (rule "shift_paren_or" (formula "18") (term "0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "17") (term "0,0,0,0,0"))
                     (rule "commute_or_2" (formula "17") (term "0,0,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "commute_or_2" (formula "17") (term "0,0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "18") (term "0,0,0,0,0,0"))
                     (rule "commute_or" (formula "17") (term "0,0,0,0,0,0,0"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "1") (term "0,0") (ifseqformula "9"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "23"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "0") (ifseqformula "6"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "25"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "allLeft" (formula "16") (inst "t=iv_1"))
                     (rule "replaceKnownSelect_taclet000_2" (formula "16") (term "0,0,1"))
                     (rule "replaceKnownSelect_taclet000_4" (formula "16") (term "0,1,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "16") (term "0,0,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet000_5" (formula "16") (term "0,1,1"))
                     (rule "replaceKnownSelect_taclet000_2" (formula "16") (term "0,0,1,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "16") (term "0,0,1,0"))
                     (rule "replaceKnownSelect_taclet000_4" (formula "16") (term "0,0,1,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet000_5" (formula "16") (term "0,0,1,0,0"))
                     (rule "inEqSimp_commuteGeq" (formula "16") (term "1,0,0,0"))
                     (rule "applyEq" (formula "16") (term "0,1,0,0") (ifseqformula "4"))
                     (rule "leq_literals" (formula "16") (term "1,0,0"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "true_left" (formula "16"))
                     (rule "allLeft" (formula "17") (inst "t=iv_1"))
                     (rule "replaceKnownSelect_taclet000_2" (formula "17") (term "0,0,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "17") (term "0,0,1"))
                     (rule "replaceKnownSelect_taclet000_2" (formula "17") (term "0,0,1,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "17") (term "0,0,1,0"))
                     (rule "replaceKnownSelect_taclet000_4" (formula "17") (term "0,0,1,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet000_5" (formula "17") (term "0,0,1,0,0"))
                     (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0,0,0"))
                     (rule "applyEq" (formula "17") (term "0,1,0,0") (ifseqformula "4"))
                     (rule "qeq_literals" (formula "17") (term "1,0,0"))
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "inEqSimp_contradEq7" (formula "17") (term "1") (ifseqformula "3"))
                     (rule "times_zero_1" (formula "17") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "17") (term "0,0,1"))
                     (rule "leq_literals" (formula "17") (term "0,1"))
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "inEqSimp_contradInEq1" (formula "17") (term "0,0") (ifseqformula "5"))
                     (rule "qeq_literals" (formula "17") (term "0,0,0"))
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "inEqSimp_contradInEq1" (formula "17") (term "1") (ifseqformula "3"))
                     (rule "qeq_literals" (formula "17") (term "0,1"))
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "17"))
                     (rule "andLeft" (formula "6"))
                     (rule "inEqSimp_homoInEq1" (formula "6"))
                     (rule "polySimp_pullOutFactor1b" (formula "6") (term "0"))
                     (rule "add_literals" (formula "6") (term "1,1,0"))
                     (rule "times_zero_1" (formula "6") (term "1,0"))
                     (rule "add_literals" (formula "6") (term "0"))
                     (rule "leq_literals" (formula "6"))
                     (rule "closeFalse" (formula "6"))
                  )
                  (branch " result[iv_1]@anon_heap_copyOf«anonHeapFunction».length ≥ 1 FALSE"
                     (rule "inEqSimp_geqRight" (formula "21"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "replace_known_left" (formula "22") (term "0,0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "22"))
                     (rule "allRight" (formula "22") (inst "sk=iv_2"))
                     (rule "orRight" (formula "22"))
                     (rule "orRight" (formula "22"))
                     (rule "replace_known_right" (formula "24") (term "0,0,1") (ifseqformula "23"))
                     (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "23")))
                     (rule "closeTrue" (formula "24"))
                  )
               )
            )
            (branch "result.length ≥ 1 FALSE"
               (rule "eqSymm" (formula "12"))
               (rule "inEqSimp_geqRight" (formula "16"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "applyEq" (formula "14") (term "1,1,0") (ifseqformula "13"))
               (rule "applyEq" (formula "11") (term "0") (ifseqformula "13"))
               (rule "qeq_literals" (formula "11"))
               (rule "closeFalse" (formula "11"))
            )
         )
         (branch "msg.length ≥ 1 FALSE"
            (builtin "One Step Simplification" (formula "11"))
            (rule "replace_known_right" (formula "12") (term "0,1,1,0") (ifseqformula "15"))
            (builtin "One Step Simplification" (formula "12"))
            (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "15"))
            (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_geqRight" (formula "15"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_homoInEq1" (formula "3"))
            (rule "times_zero_2" (formula "3") (term "1,0"))
            (rule "add_zero_right" (formula "3") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "3"))
            (rule "mul_literals" (formula "3") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "2"))
            (rule "qeq_literals" (formula "3") (term "0"))
            (builtin "One Step Simplification" (formula "3"))
            (rule "closeFalse" (formula "3"))
         )
      )
      (branch "Case 2"
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "7") (term "1") (ifseqformula "6"))
         (rule "sub_literals" (formula "4") (term "2,1,0"))
         (builtin "One Step Simplification" (formula "4"))
         (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "13"))
         (builtin "One Step Simplification" (formula "2"))
         (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "12"))
         (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "11")))
         (rule "dismissNonSelectedField" (formula "14") (term "0,0,1,0,0,1"))
         (rule "narrowSelectArrayType" (formula "4") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "13"))
         (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,0,1"))
         (rule "mul_literals" (formula "14") (term "0,1,1,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "4") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "9") (inst "i=i"))
         (rule "greater_literals" (formula "9") (term "0,1"))
         (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "12")))
         (rule "sub_literals" (formula "9") (term "2,1,0"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
         (rule "pullOutSelect" (formula "14") (term "1,0,0,0,1,1") (inst "selectSK=verif_selectvoting_system_core_ConservativeExtension_messages_1"))
         (rule "applyEq" (formula "15") (term "0,0,0") (ifseqformula "1"))
         (rule "applyEq" (formula "15") (term "0,1,1,1,0,0,0,1") (ifseqformula "1"))
         (rule "applyEq" (formula "15") (term "0,0,1,1,1") (ifseqformula "1"))
         (rule "applyEq" (formula "15") (term "1,0,0,1,0,0,1") (ifseqformula "1"))
         (rule "simplifySelectOfStore" (formula "1"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "castDel" (formula "1") (term "0"))
         (rule "applyEqReverse" (formula "15") (term "1,0,0,0,1,1") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "15") (term "0,0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "15") (term "0,1,1,1,0,0,0,1") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "15") (term "0,0,1,1,1") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "15") (term "1,0,0,1,0,0,1") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "replace_known_right" (formula "14") (term "0,0,1,1") (ifseqformula "11"))
         (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "12")) (ifInst ""  (formula "12")))
         (rule "allRight" (formula "14") (inst "sk=i_2"))
         (rule "impRight" (formula "14"))
         (rule "notRight" (formula "15"))
         (rule "andLeft" (formula "2"))
         (rule "inEqSimp_homoInEq0" (formula "3"))
         (rule "polySimp_addComm1" (formula "3") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "3"))
         (rule "polySimp_mulComm0" (formula "3") (term "1"))
         (rule "polySimp_rightDist" (formula "3") (term "1"))
         (rule "mul_literals" (formula "3") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
         (rule "polySimp_elimOne" (formula "3") (term "1,1"))
         (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=arr_2"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "10"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")) (ifInst ""  (formula "15")))
         (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "nnf_imp2or" (formula "7") (term "0"))
         (rule "nnf_imp2or" (formula "12") (term "0"))
         (rule "nnf_notAnd" (formula "7") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
         (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
         (rule "mul_literals" (formula "7") (term "1,0,0,0"))
         (rule "nnf_notAnd" (formula "12") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
         (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
         (rule "mul_literals" (formula "12") (term "1,0,0,0"))
         (rule "commute_or_2" (formula "7") (term "0"))
         (rule "commute_or_2" (formula "12") (term "0"))
         (rule "commute_or" (formula "7") (term "0,0"))
         (rule "commute_or" (formula "12") (term "0,0"))
         (rule "equalityToSeqGetAndSeqLenLeft" (formula "11") (inst "iv=iv"))
         (rule "andLeft" (formula "11"))
         (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
         (rule "applyEq" (formula "12") (term "0,0,1,0,0,1,0,0") (ifseqformula "13"))
         (rule "applyEq" (formula "12") (term "0,0,1,0") (ifseqformula "13"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "true_left" (formula "12"))
         (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "12"))
         (builtin "One Step Simplification" (formula "11"))
         (rule "true_left" (formula "11"))
         (rule "allLeft" (formula "12") (inst "t=i_2"))
         (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
         (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "3"))
         (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1"))
         (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
         (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
         (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "12") (term "0,0,1"))
         (rule "leq_literals" (formula "12") (term "0,1"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "2"))
         (rule "qeq_literals" (formula "12") (term "0,1"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "notLeft" (formula "12"))
         (rule "pullOutSelect" (formula "14") (term "0") (inst "selectSK=arr_3"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "10"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")) (ifInst ""  (formula "16")))
         (rule "applyEqReverse" (formula "15") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "narrowSelectArrayType" (formula "14") (term "0") (ifseqformula "8") (ifseqformula "16"))
         (rule "close" (formula "14") (ifseqformula "1"))
      )
   )
   (branch "Case 2"
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "7") (term "1") (ifseqformula "6"))
      (rule "sub_literals" (formula "4") (term "2,1,0"))
      (builtin "One Step Simplification" (formula "4"))
      (rule "allRight" (formula "14") (inst "sk=f_1"))
      (rule "allRight" (formula "14") (inst "sk=o_1"))
      (rule "orRight" (formula "14"))
      (rule "orRight" (formula "14"))
      (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "13"))
      (builtin "One Step Simplification" (formula "2"))
      (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "12"))
      (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "11")))
      (rule "elementOfSingleton" (formula "14"))
      (rule "narrowSelectArrayType" (formula "4") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "13"))
      (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "4") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0"))
      (rule "nonNull" (formula "9") (inst "i=i"))
      (rule "greater_literals" (formula "9") (term "0,1"))
      (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "12")))
      (rule "sub_literals" (formula "9") (term "2,1,0"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
      (rule "pullOutSelect" (formula "16") (term "0") (inst "selectSK=f_1_0"))
      (rule "simplifySelectOfStore" (formula "1"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "castDel" (formula "1") (term "1,0"))
      (rule "eqSymm" (formula "17"))
      (rule "eqSymm" (formula "1") (term "1,0,0"))
      (rule "eqSymm" (formula "1") (term "0,0,0"))
      (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "15"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "7"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")) (ifInst ""  (formula "17")))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Exceptional Post (copyOf)"
   (builtin "One Step Simplification" (formula "6"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "sub_literals" (formula "4") (term "2,1,0"))
   (builtin "One Step Simplification" (formula "4"))
   (rule "andLeft" (formula "6"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "7") (term "1,0") (ifseqformula "6"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "9"))
   (rule "notLeft" (formula "7"))
   (rule "close" (formula "10") (ifseqformula "9"))
)
(branch "Pre (copyOf)"
   (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "5")) (ifInst ""  (formula "1")) (ifInst ""  (formula "5")))
   (rule "sub_literals" (formula "4") (term "2,1,0"))
   (builtin "One Step Simplification" (formula "4"))
   (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "5"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "replace_known_left" (formula "6") (term "1") (ifseqformula "2"))
   (builtin "One Step Simplification" (formula "6"))
   (rule "narrowSelectArrayType" (formula "4") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "5"))
   (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0"))
   (rule "mul_literals" (formula "4") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0"))
   (rule "nonNull" (formula "6") (inst "i=i"))
   (rule "greater_literals" (formula "6") (term "0,1"))
   (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "5")))
   (rule "sub_literals" (formula "6") (term "2,1,0"))
   (builtin "One Step Simplification" (formula "6"))
   (rule "allRight" (formula "6") (inst "sk=i_0"))
   (rule "impRight" (formula "6"))
   (rule "notRight" (formula "7"))
   (rule "andLeft" (formula "2"))
   (rule "narrowSelectArrayType" (formula "1") (term "0") (ifseqformula "4") (ifseqformula "8"))
   (rule "inEqSimp_ltToLeq" (formula "3"))
   (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "3") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "2"))
   (rule "inEqSimp_sepNegMonomial0" (formula "3"))
   (rule "polySimp_mulLiterals" (formula "3") (term "0"))
   (rule "polySimp_elimOne" (formula "3") (term "0"))
   (rule "nnf_imp2or" (formula "7") (term "0"))
   (rule "nnf_notAnd" (formula "7") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
   (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
   (rule "mul_literals" (formula "7") (term "1,0,0,0"))
   (rule "commute_or_2" (formula "7") (term "0"))
   (rule "commute_or" (formula "7") (term "0,0"))
   (rule "allLeft" (formula "7") (inst "t=i_0"))
   (rule "replace_known_left" (formula "7") (term "0,0,0") (ifseqformula "1"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "inEqSimp_commuteGeq" (formula "7") (term "1"))
   (rule "inEqSimp_contradInEq1" (formula "7") (term "1") (ifseqformula "3"))
   (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1"))
   (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1"))
   (rule "add_literals" (formula "7") (term "1,1,0,0,1"))
   (rule "times_zero_1" (formula "7") (term "1,0,0,1"))
   (rule "add_zero_right" (formula "7") (term "0,0,1"))
   (rule "leq_literals" (formula "7") (term "0,1"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "7"))
   (rule "qeq_literals" (formula "2") (term "0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "closeFalse" (formula "2"))
)
)

}
