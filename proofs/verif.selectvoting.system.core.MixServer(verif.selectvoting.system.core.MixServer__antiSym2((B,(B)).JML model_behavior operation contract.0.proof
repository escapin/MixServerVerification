\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Apr 12 14:52:23 CEST 2016
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=8000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Tue Apr 12 14:52:23 CEST 2016
name=verif.selectvoting.system.core.MixServer[verif.selectvoting.system.core.MixServer\\:\\:antiSym2([B,[B)].JML model_behavior operation contract.0
contract=verif.selectvoting.system.core.MixServer[verif.selectvoting.system.core.MixServer\\:\\:antiSym2([B,[B)].JML model_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mihai" ) (keyVersion "6bc7ade97061383f11985e24decf735b7f2f0af2"))

(autoModeTime "23302")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "a,b,result,heapAtPre,heapBefore,heapAtPreBefore,o,f,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "8"))
(rule "notLeft" (formula "7"))
(builtin "One Step Simplification" (formula "9"))
(rule "rotate_and" (formula "9") (userinteraction))
(rule "commute_and" (formula "9") (userinteraction))
(rule "rotate_and" (formula "9") (term "0") (userinteraction))
(rule "commute_and" (formula "9") (userinteraction))
(rule "commute_and" (formula "9") (userinteraction))
(rule "commute_and_2" (formula "9") (userinteraction))
(rule "cut_direct" (formula "9") (term "0") (userinteraction))
(branch "CUT: verif.selectvoting.system.core.Utils.compare(a, b) ≤ 0 ∧ verif.selectvoting.system.core.Utils.compare(b, a) ≤ 0 TRUE"
   (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "1")))
   (rule "closeTrue" (formula "10") (userinteraction))
)
(branch "CUT: verif.selectvoting.system.core.Utils.compare(a, b) ≤ 0 ∧ verif.selectvoting.system.core.Utils.compare(b, a) ≤ 0 FALSE"
   (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "9")))
   (rule "false_right" (formula "10") (userinteraction))
   (rule "array2seqDef" (formula "6") (term "0") (inst "u=u") (userinteraction))
   (rule "array2seqDef" (formula "6") (term "1") (inst "u=u") (userinteraction))
   (rule "andRight" (formula "9") (userinteraction))
   (branch "Case 1"
      (builtin "Evaluate Query" (formula "9") (term "0") (newnames "a1_0,a2_0,callee,queryResult,res_compare_0"))
      (rule "notLeft" (formula "1") (userinteraction))
      (rule "variableDeclaration" (formula "7") (term "1") (newnames "queryResult") (userinteraction))
      (builtin "Use Operation Contract" (formula "7") (newnames "heapBefore_compare,result_0,exc") (contract "verif.selectvoting.system.core.Utils[verif.selectvoting.system.core.Utils::compare([B,[B)].JML normal_behavior operation contract.0"))
      (branch
         (rule "assignment" (formula "8") (term "1") (userinteraction))
         (rule "methodCallEmpty" (formula "8") (term "1,1") (userinteraction))
         (builtin "One Step Simplification" (formula "8"))
         (rule "emptyModality" (formula "8") (term "1") (userinteraction))
         (builtin "One Step Simplification" (formula "8"))
         (rule "notRight" (formula "8") (userinteraction))
         (builtin "One Step Simplification" (formula "8"))
         (rule "applyEq" (formula "8") (term "0,1,0,1") (ifseqformula "1") (userinteraction))
         (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_compare(heap,a,b)_01_0" (formula "11") (term "0") (userinteraction))
         (rule "replace_known_right" (formula "8") (term "1,0,1") (ifseqformula "11") (userinteraction))
         (builtin "One Step Simplification" (formula "8"))
         (rule "andLeft" (formula "8") (userinteraction))
         (rule "andLeft" (formula "9") (userinteraction))
         (rule "notLeft" (formula "9") (userinteraction))
         (builtin "Evaluate Query" (formula "9") (term "1,1,0,0,0") (newnames "a_0,b_0,callee,queryResult_0,res_min"))
         (rule "notLeft" (formula "1") (userinteraction))
         (rule "variableDeclaration" (formula "9") (term "1") (newnames "queryResult_0") (userinteraction))
         (builtin "Use Operation Contract" (formula "9") (newnames "heapBefore_min,result_1,exc_0") (contract "verif.selectvoting.system.core.Utils[verif.selectvoting.system.core.Utils::min(int,int)].JML normal_behavior operation contract.0"))
         (branch "Post (min)"
            (rule "assignment" (formula "10") (term "1") (userinteraction))
            (builtin "One Step Simplification" (formula "9"))
            (builtin "One Step Simplification" (formula "10"))
            (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_min(heap,length(a),length(b))_001_1" (formula "11") (term "1,1,0,0,0"))
            (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_min(heap,length(a),length(b))_001_1" (formula "11") (term "1,1,0,0,0,1"))
            (rule "andLeft" (formula "9"))
            (rule "orRight" (formula "12"))
            (rule "andLeft" (formula "10"))
            (rule "andLeft" (formula "10"))
            (rule "eqSymm" (formula "7"))
            (rule "eqSymm" (formula "12") (term "0,0,1"))
            (rule "eqSymm" (formula "14") (term "1,0,0"))
            (rule "eqSymm" (formula "13") (term "1,0,1,1,0"))
            (rule "eqSymm" (formula "11") (term "0,1,1"))
            (rule "eqSymm" (formula "11") (term "0,1"))
            (rule "eqSymm" (formula "10") (term "1"))
            (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "16"))
            (builtin "One Step Simplification" (formula "5"))
            (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "15"))
            (builtin "One Step Simplification" (formula "4"))
            (rule "inEqSimp_leqRight" (formula "17"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0"))
            (rule "narrowSelectArrayType" (formula "8") (term "2,1") (ifseqformula "3") (ifseqformula "16"))
            (rule "narrowSelectArrayType" (formula "8") (term "2,0") (ifseqformula "3") (ifseqformula "17"))
            (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,1,0"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "14") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,1,0"))
            (rule "polySimp_addComm1" (formula "14") (term "0,0,1,0"))
            (rule "inEqSimp_gtToGeq" (formula "12") (term "0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
            (rule "polySimp_addComm1" (formula "12") (term "0,0"))
            (rule "inEqSimp_commuteLeq" (formula "15") (term "1"))
            (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "15") (term "0,1,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
            (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,1,0"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,1,0"))
            (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,1,0"))
            (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,1,0"))
            (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,1,0"))
            (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,1,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,1,0"))
            (rule "polySimp_mulLiterals" (formula "14") (term "0,0,1,0"))
            (rule "polySimp_elimOne" (formula "14") (term "0,0,1,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "12") (term "0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "0,0"))
            (rule "eqSeqDef" (formula "8") (inst "iv=iv"))
            (rule "andLeft" (formula "8"))
            (rule "lenOfSeqDef" (formula "8") (term "1"))
            (rule "polySimp_elimSub" (formula "8") (term "1,1"))
            (rule "times_zero_2" (formula "8") (term "1,1,1"))
            (rule "add_zero_right" (formula "8") (term "1,1"))
            (rule "getOfSeqDef" (formula "9") (term "1,1,0"))
            (rule "castDel" (formula "9") (term "2,1,1,0"))
            (rule "castDel" (formula "9") (term "1,1,1,0"))
            (rule "add_zero_right" (formula "9") (term "0,2,1,1,1,0"))
            (rule "polySimp_elimSub" (formula "9") (term "1,1,0,1,1,0"))
            (rule "mul_literals" (formula "9") (term "1,1,1,0,1,1,0"))
            (rule "add_zero_right" (formula "9") (term "1,1,0,1,1,0"))
            (rule "getOfSeqDef" (formula "9") (term "0,1,0"))
            (rule "castDel" (formula "9") (term "1,0,1,0"))
            (rule "castDel" (formula "9") (term "2,0,1,0"))
            (rule "add_zero_right" (formula "9") (term "0,2,1,0,1,0"))
            (rule "polySimp_elimSub" (formula "9") (term "1,1,0,0,1,0"))
            (rule "times_zero_2" (formula "9") (term "1,1,1,0,0,1,0"))
            (rule "add_zero_right" (formula "9") (term "1,1,0,0,1,0"))
            (rule "lenOfSeqDef" (formula "9") (term "1,1,0,0"))
            (rule "polySimp_elimSub" (formula "9") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "9") (term "1,1,1,1,0,0"))
            (rule "add_zero_right" (formula "9") (term "1,1,1,0,0"))
            (rule "lenOfSeqDef" (formula "8") (term "0"))
            (rule "polySimp_elimSub" (formula "8") (term "1,0"))
            (rule "times_zero_2" (formula "8") (term "1,1,0"))
            (rule "add_zero_right" (formula "8") (term "1,0"))
            (rule "inEqSimp_ltToLeq" (formula "8") (term "0,1"))
            (rule "add_zero_right" (formula "8") (term "0,0,1"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,1,1,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,1,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "9") (term "0,1,1,0,0"))
            (rule "add_zero_right" (formula "9") (term "0,0,1,1,0,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0"))
            (rule "add_zero_right" (formula "8") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,1,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1,0"))
            (rule "applyEq" (formula "9") (term "0,1,0,0,1,0,0") (ifseqformula "8"))
            (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "8") (term "0,0,1"))
            (rule "polySimp_elimOne" (formula "8") (term "0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,1,1,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,1,1,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,1,0,1,1,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,1,1,0"))
            (rule "mul_literals" (formula "9") (term "0,1,1,0,1,1,0"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,1,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,1,0"))
            (rule "mul_literals" (formula "9") (term "0,1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,1,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "0,0,0"))
            (rule "polySimp_elimOne" (formula "8") (term "0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "9") (term "0,0,0,1,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
            (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
            (rule "nnf_ex2all" (formula "15"))
            (rule "nnf_imp2or" (formula "16") (term "0,0"))
            (rule "nnf_imp2or" (formula "10") (term "0"))
            (rule "nnf_notAnd" (formula "1") (term "0"))
            (rule "nnf_notAnd" (formula "10") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
            (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
            (rule "mul_literals" (formula "10") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
            (rule "mul_literals" (formula "1") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "1,0"))
            (rule "inEqSimp_notGeq" (formula "1") (term "0,1,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,1,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,0,1,0"))
            (rule "add_zero_left" (formula "1") (term "0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,1,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0"))
            (rule "nnf_notAnd" (formula "16") (term "0,0,0"))
            (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0,0"))
            (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0,0"))
            (rule "add_zero_right" (formula "16") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0"))
            (rule "mul_literals" (formula "16") (term "1,0,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0,0"))
            (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,0"))
            (rule "add_literals" (formula "16") (term "0,0,0,1,0,0,0"))
            (rule "add_zero_left" (formula "16") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0"))
            (rule "nnf_notAll" (formula "1") (term "1,1,0"))
            (rule "nnf_imp2or" (formula "1") (term "0,0,1,1,0"))
            (rule "nnf_notOr" (formula "1") (term "0,1,1,0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "methodCallEmpty" (formula "15") (term "1"))
            (builtin "One Step Simplification" (formula "15"))
            (rule "commute_or_2" (formula "10") (term "0"))
            (rule "commute_or" (formula "10") (term "0,0"))
            (rule "emptyModality" (formula "15") (term "1"))
            (builtin "One Step Simplification" (formula "15"))
            (rule "notRight" (formula "15"))
            (rule "eqSymm" (formula "1"))
            (rule "applyEq" (formula "15") (term "1,0,1") (ifseqformula "1"))
            (rule "applyEq" (formula "14") (term "1,1") (ifseqformula "1"))
            (rule "arrayLengthIsAShort" (formula "15") (term "1,0,1,1"))
            (builtin "One Step Simplification" (formula "15"))
            (rule "true_left" (formula "15"))
            (rule "arrayLengthNotNegative" (formula "15") (term "0,0,1,1"))
            (rule "arrayLengthIsAShort" (formula "16") (term "0,0,1,1"))
            (builtin "One Step Simplification" (formula "16"))
            (rule "true_left" (formula "16"))
            (rule "arrayLengthNotNegative" (formula "16") (term "1,0,1,1"))
            (rule "ifthenelse_to_or_left" (formula "11") (term "0,0,0"))
            (rule "eqSymm" (formula "11") (term "1,1,0,0,0"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "eqSymm" (formula "11") (term "1,0,0,0,0"))
            (rule "nnf_notAnd" (formula "11") (term "0,0,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,0,0,0"))
            (rule "add_zero_left" (formula "11") (term "0,0,1,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,0,0,0"))
            (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,0,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,0,0"))
            (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0,0"))
            (rule "nnf_notAnd" (formula "11") (term "0,1,1,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "11") (term "0,0,1,1,0,0,0"))
            (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,1,1,0,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,0,0,1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,1,1,0,0,0"))
            (rule "mul_literals" (formula "11") (term "1,0,0,1,1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "11") (term "1,0,1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,1,1,0,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,1,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,1,1,0,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,0,1,0,1,1,0,0,0"))
            (rule "add_zero_left" (formula "11") (term "0,0,1,0,1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,1,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,0,1,1,0,0,0"))
            (rule "commute_or" (formula "11") (term "0,0"))
            (rule "commute_or_2" (formula "11") (term "0"))
            (rule "commute_or" (formula "11") (term "1,1,0"))
            (rule "commute_or_2" (formula "11") (term "0,1,0"))
            (rule "commute_or_2" (formula "11") (term "0,1,1,0"))
            (rule "commute_or" (formula "11") (term "0,0,1,0"))
            (rule "commute_or" (formula "11") (term "0,0,1,1,0"))
            (rule "cnf_rightDist" (formula "11") (term "1,1,0"))
            (rule "commute_or" (formula "11") (term "1,1,1,0"))
            (rule "cnf_rightDist" (formula "11") (term "0"))
            (rule "distr_forallAnd" (formula "11"))
            (rule "andLeft" (formula "11"))
            (rule "commute_or" (formula "12") (term "0"))
            (rule "commute_or_2" (formula "11") (term "0"))
            (rule "commute_or_2" (formula "12") (term "0,1,0"))
            (rule "inEqSimp_or_tautInEq1" (formula "12") (term "0,0,1,0"))
            (rule "add_zero_right" (formula "12") (term "1,1,0,0,1,0"))
            (rule "qeq_literals" (formula "12") (term "1,0,0,1,0"))
            (builtin "One Step Simplification" (formula "12"))
            (rule "commute_or_2" (formula "12") (term "0"))
            (rule "shift_paren_or" (formula "11") (term "0,0"))
            (rule "shift_paren_or" (formula "12") (term "0,0"))
            (rule "shift_paren_or" (formula "11") (term "0,0,0"))
            (rule "shift_paren_or" (formula "12") (term "0,0,0"))
            (rule "commute_or" (formula "11") (term "0,0,0,0"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "shift_paren_or" (formula "12") (term "0,0,0,0"))
            (rule "commute_or" (formula "12") (term "0,0,0,0,0"))
            (builtin "One Step Simplification" (formula "12"))
            (rule "cut_direct" (formula "19") (term "1"))
            (branch "CUT: b.length ≥ a.length TRUE"
               (builtin "One Step Simplification" (formula "20"))
               (rule "allRight" (formula "20") (inst "sk=j_36"))
               (rule "orRight" (formula "20"))
               (rule "orRight" (formula "20"))
               (rule "replace_known_left" (formula "16") (term "0") (ifseqformula "1"))
               (builtin "One Step Simplification" (formula "16"))
               (rule "inEqSimp_geqRight" (formula "21"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_leqRight" (formula "21"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "applyEq" (formula "14") (term "0,0,1,1,0") (ifseqformula "18"))
               (rule "applyEq" (formula "21") (term "1,1,0") (ifseqformula "18"))
               (rule "applyEq" (formula "15") (term "1,1,1,0") (ifseqformula "18"))
               (rule "applyEq" (formula "15") (term "1,1,0,0,0") (ifseqformula "18"))
               (rule "applyEq" (formula "3") (term "1") (ifseqformula "18"))
               (rule "applyEq" (formula "20") (term "0") (ifseqformula "18"))
               (rule "applyEq" (formula "14") (term "1,1,1,0") (ifseqformula "18"))
               (rule "applyEq" (formula "15") (term "0,0,1,1,0") (ifseqformula "18"))
               (rule "applyEq" (formula "14") (term "1,1,1,0,0,0,0,0,0") (ifseqformula "18"))
               (rule "applyEq" (formula "13") (term "0,0,1") (ifseqformula "18"))
               (rule "applyEq" (formula "21") (term "1,0,1,1") (ifseqformula "18"))
               (builtin "One Step Simplification" (formula "21"))
               (rule "notLeft" (formula "21"))
               (rule "inEqSimp_leqRight" (formula "21"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0"))
               (rule "applyEq" (formula "14") (term "1,1") (ifseqformula "19"))
               (rule "inEqSimp_sepNegMonomial0" (formula "3"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
               (rule "polySimp_elimOne" (formula "3") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1"))
               (rule "polySimp_elimOne" (formula "1") (term "1"))
               (rule "ifthenelse_split" (formula "13") (term "0"))
               (branch "b.length ≥ 1 TRUE"
                  (rule "eqSymm" (formula "14"))
                  (rule "applyEq" (formula "15") (term "1,1,0") (ifseqformula "14"))
                  (builtin "One Step Simplification" (formula "15"))
                  (rule "applyEq" (formula "16") (term "1,1,0") (ifseqformula "14"))
                  (rule "inEqSimp_subsumption1" (formula "20") (ifseqformula "13"))
                  (rule "leq_literals" (formula "20") (term "0"))
                  (builtin "One Step Simplification" (formula "20"))
                  (rule "true_left" (formula "20"))
                  (rule "inEqSimp_or_tautInEq1" (formula "16") (term "0"))
                  (rule "inEqSimp_homoInEq1" (formula "16") (term "1,0"))
                  (rule "polySimp_pullOutFactor1" (formula "16") (term "0,1,0"))
                  (rule "add_literals" (formula "16") (term "1,0,1,0"))
                  (rule "times_zero_1" (formula "16") (term "0,1,0"))
                  (rule "leq_literals" (formula "16") (term "1,0"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "true_left" (formula "16"))
                  (rule "ex_pull_out3" (formula "5") (term "1,0"))
                  (rule "cnf_rightDist" (formula "5") (term "0,1,0"))
                  (rule "commute_or" (formula "5") (term "1,0,1,0"))
                  (rule "cnf_rightDist" (formula "5") (term "0,0,1,0"))
                  (rule "commute_or" (formula "5") (term "1,0,0,1,0"))
                  (rule "ifthenelse_to_or_left" (formula "15") (term "0,0,0"))
                  (rule "eqSymm" (formula "15") (term "1,0,0,0,0"))
                  (rule "eqSymm" (formula "15") (term "1,1,0,0,0"))
                  (rule "nnf_notAnd" (formula "15") (term "0,0,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,0,0,0"))
                  (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,0,0,0"))
                  (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0,0,0,0"))
                  (rule "add_literals" (formula "15") (term "0,0,0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0,0"))
                  (rule "commute_or" (formula "15") (term "0,0"))
                  (rule "commute_or_2" (formula "15") (term "0"))
                  (rule "commute_or" (formula "15") (term "1,1,0"))
                  (rule "cnf_rightDist" (formula "15") (term "1,1,0"))
                  (rule "cnf_rightDist" (formula "15") (term "0"))
                  (rule "distr_forallAnd" (formula "15"))
                  (rule "andLeft" (formula "15"))
                  (rule "commute_or" (formula "16") (term "0"))
                  (rule "shift_paren_or" (formula "15") (term "0"))
                  (rule "commute_or_2" (formula "15") (term "0,0"))
                  (rule "commute_or" (formula "16") (term "1,1,0"))
                  (rule "cnf_rightDist" (formula "16") (term "0"))
                  (rule "distr_forallAnd" (formula "16"))
                  (rule "andLeft" (formula "16"))
                  (rule "commute_or_2" (formula "16") (term "0"))
                  (rule "shift_paren_or" (formula "17") (term "0"))
                  (rule "commute_or_2" (formula "17") (term "0,0"))
                  (rule "shift_paren_or" (formula "16") (term "0,0"))
                  (rule "commute_or" (formula "16") (term "0,0,0"))
                  (rule "inEqSimp_or_tautInEq1" (formula "16") (term "0,0"))
                  (rule "add_zero_right" (formula "16") (term "1,1,0,0"))
                  (rule "qeq_literals" (formula "16") (term "1,0,0"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "true_left" (formula "16"))
                  (rule "shift_paren_or" (formula "15") (term "0,0,0"))
                  (builtin "One Step Simplification" (formula "15"))
                  (rule "ex_pull_out3" (formula "5") (term "0"))
                  (rule "cnf_rightDist" (formula "5") (term "0,0"))
                  (rule "commute_or_2" (formula "5") (term "1,0,0"))
                  (rule "commute_or" (formula "5") (term "0,1,0,0"))
                  (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                  (rule "commute_or_2" (formula "5") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
                  (rule "commute_or" (formula "5") (term "0,1,0,0,0"))
                  (rule "ifthenelse_split" (formula "14") (term "0"))
                  (branch "res_min ≥ 1 TRUE"
                     (rule "eqSymm" (formula "15"))
                     (rule "applyEq" (formula "17") (term "1,1,0") (ifseqformula "15"))
                     (rule "applyEq" (formula "13") (term "0") (ifseqformula "15"))
                     (rule "applyEq" (formula "3") (term "0") (ifseqformula "14"))
                     (rule "inEqSimp_homoInEq1" (formula "3"))
                     (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
                     (rule "add_literals" (formula "3") (term "1,0"))
                     (rule "times_zero_1" (formula "3") (term "0"))
                     (rule "leq_literals" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "applyEq" (formula "14") (term "1,1,0,0") (ifseqformula "13"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "12"))
                     (rule "leq_literals" (formula "19") (term "0"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "true_left" (formula "19"))
                     (rule "inEqSimp_or_tautInEq1" (formula "15") (term "0"))
                     (rule "inEqSimp_homoInEq1" (formula "15") (term "1,0"))
                     (rule "polySimp_pullOutFactor1" (formula "15") (term "0,1,0"))
                     (rule "add_literals" (formula "15") (term "1,0,1,0"))
                     (rule "times_zero_1" (formula "15") (term "0,1,0"))
                     (rule "leq_literals" (formula "15") (term "1,0"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "true_left" (formula "15"))
                     (rule "commute_and_2" (formula "4") (term "0,0"))
                     (rule "allLeft" (formula "14") (inst "t=j_36"))
                     (rule "replace_known_right" (formula "14") (term "1") (ifseqformula "19"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "14") (term "0") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "14") (term "0,0"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "inEqSimp_contradInEq1" (formula "14") (ifseqformula "2"))
                     (rule "andLeft" (formula "14"))
                     (rule "inEqSimp_homoInEq1" (formula "14"))
                     (rule "polySimp_pullOutFactor1b" (formula "14") (term "0"))
                     (rule "add_literals" (formula "14") (term "1,1,0"))
                     (rule "times_zero_1" (formula "14") (term "1,0"))
                     (rule "add_literals" (formula "14") (term "0"))
                     (rule "leq_literals" (formula "14"))
                     (rule "closeFalse" (formula "14"))
                  )
                  (branch "res_min ≥ 1 FALSE"
                     (rule "eqSymm" (formula "14"))
                     (rule "inEqSimp_geqRight" (formula "21"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "applyEq" (formula "17") (term "1,1,0") (ifseqformula "15"))
                     (rule "applyEq" (formula "14") (term "0") (ifseqformula "15"))
                     (rule "qeq_literals" (formula "14"))
                     (rule "closeFalse" (formula "14"))
                  )
               )
               (branch "b.length ≥ 1 FALSE"
                  (rule "eqSymm" (formula "13"))
                  (builtin "One Step Simplification" (formula "13"))
                  (rule "inEqSimp_geqRight" (formula "21"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_antiSymm" (formula "20") (ifseqformula "1"))
                  (rule "applyEq" (formula "4") (term "0") (ifseqformula "20"))
                  (rule "inEqSimp_commuteGeq" (formula "4"))
                  (rule "applyEq" (formula "21") (term "0") (ifseqformula "20"))
                  (rule "qeq_literals" (formula "21"))
                  (rule "true_left" (formula "21"))
                  (rule "applyEq" (formula "15") (term "1,1,0,0") (ifseqformula "20"))
                  (rule "applyEq" (formula "16") (term "1,1,1,0,0") (ifseqformula "20"))
                  (rule "add_zero_right" (formula "16") (term "1,1,0,0"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "20"))
                  (rule "leq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "inEqSimp_contradInEq0" (formula "13") (term "0,0") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "13") (term "0,0,0"))
                  (builtin "One Step Simplification" (formula "13"))
                  (rule "true_left" (formula "13"))
                  (rule "inEqSimp_contradInEq0" (formula "13") (term "0,1,1,0") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "13") (term "0,0,1,1,0"))
                  (builtin "One Step Simplification" (formula "13"))
                  (rule "inEqSimp_contradInEq0" (formula "14") (term "0,1,1,0") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "14") (term "0,0,1,1,0"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "inEqSimp_antiSymm" (formula "19") (ifseqformula "3"))
                  (rule "applyEqRigid" (formula "14") (term "1,1,0,0,0") (ifseqformula "19"))
                  (rule "applyEq" (formula "20") (term "0") (ifseqformula "19"))
                  (rule "qeq_literals" (formula "20"))
                  (rule "true_left" (formula "20"))
                  (rule "applyEq" (formula "3") (term "0") (ifseqformula "19"))
                  (rule "leq_literals" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "applyEq" (formula "4") (term "1,1,0,0") (ifseqformula "18"))
                  (rule "applyEqRigid" (formula "12") (term "1,1,1,0,0,0,0,0") (ifseqformula "18"))
                  (rule "add_zero_right" (formula "12") (term "1,1,0,0,0,0,0"))
                  (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "18"))
                  (rule "inEqSimp_homoInEq1" (formula "2"))
                  (rule "times_zero_2" (formula "2") (term "1,0"))
                  (rule "add_zero_right" (formula "2") (term "0"))
                  (rule "applyEq" (formula "16") (term "1") (ifseqformula "18"))
                  (rule "applyEqRigid" (formula "3") (term "1") (ifseqformula "18"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                  (rule "mul_literals" (formula "2") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "2") (term "0"))
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "closeFalse" (formula "2"))
               )
            )
            (branch "CUT: b.length ≥ a.length FALSE"
               (builtin "One Step Simplification" (formula "20"))
               (rule "false_right" (formula "20"))
               (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "19"))
               (builtin "One Step Simplification" (formula "15"))
               (rule "notLeft" (formula "15"))
               (rule "inEqSimp_geqRight" (formula "19"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "mul_literals" (formula "1") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "1"))
               (builtin "One Step Simplification" (formula "18"))
               (rule "andLeft" (formula "18"))
               (rule "notLeft" (formula "19"))
               (rule "applyEq" (formula "1") (term "0") (ifseqformula "18"))
               (rule "inEqSimp_homoInEq0" (formula "1"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "18"))
               (rule "eqSymm" (formula "11"))
               (rule "applyEq" (formula "16") (term "0") (ifseqformula "18"))
               (rule "applyEq" (formula "12") (term "1,1,0,0") (ifseqformula "18"))
               (rule "applyEq" (formula "19") (term "0") (ifseqformula "18"))
               (rule "eqSymm" (formula "19"))
               (rule "applyEq" (formula "13") (term "1,1,1,0,0") (ifseqformula "18"))
               (rule "applyEq" (formula "12") (term "1,1,0") (ifseqformula "11"))
               (rule "applyEq" (formula "13") (term "1,1,0") (ifseqformula "11"))
               (rule "applyEq" (formula "12") (term "1,1,1,0") (ifseqformula "18"))
               (rule "applyEq" (formula "13") (term "1,1,1,0") (ifseqformula "18"))
               (rule "applyEq" (formula "11") (term "1,1") (ifseqformula "18"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "mul_literals" (formula "1") (term "0,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "inEqSimp_contradEq7" (formula "19") (ifseqformula "1"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0"))
               (rule "add_literals" (formula "19") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "19") (term "1,0,0"))
               (rule "add_zero_right" (formula "19") (term "0,0"))
               (rule "leq_literals" (formula "19") (term "0"))
               (builtin "One Step Simplification" (formula "19"))
               (rule "false_right" (formula "19"))
               (rule "commute_or_2" (formula "13") (term "0,0"))
               (rule "ex_pull_out3" (formula "3") (term "1,0"))
               (rule "cnf_rightDist" (formula "3") (term "0,1,0"))
               (rule "commute_or" (formula "3") (term "1,0,1,0"))
               (rule "ifthenelse_to_or_left" (formula "12") (term "0,0,0,0"))
               (rule "eqSymm" (formula "12") (term "1,0,0,0,0,0"))
               (rule "eqSymm" (formula "12") (term "1,1,0,0,0,0"))
               (rule "nnf_notAnd" (formula "12") (term "0,0,0,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0,0,0,0"))
               (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,0,0,0,0"))
               (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0,0,0"))
               (rule "commute_or" (formula "12") (term "0,0,0"))
               (rule "commute_or_2" (formula "12") (term "0,0"))
               (rule "commute_or_2" (formula "12") (term "0"))
               (rule "commute_or" (formula "12") (term "1,1,0"))
               (rule "cnf_rightDist" (formula "3") (term "0,0,1,0"))
               (rule "commute_or" (formula "3") (term "1,0,0,1,0"))
               (rule "cnf_rightDist" (formula "12") (term "1,1,0"))
               (rule "cnf_rightDist" (formula "12") (term "0"))
               (rule "distr_forallAnd" (formula "12"))
               (rule "andLeft" (formula "12"))
               (rule "commute_or" (formula "13") (term "0"))
               (rule "shift_paren_or" (formula "12") (term "0"))
               (rule "commute_or_2" (formula "12") (term "0,0"))
               (rule "commute_or" (formula "13") (term "1,1,0"))
               (rule "cnf_rightDist" (formula "13") (term "0"))
               (rule "distr_forallAnd" (formula "13"))
               (rule "andLeft" (formula "13"))
               (rule "commute_or_2" (formula "13") (term "0"))
               (rule "shift_paren_or" (formula "14") (term "0"))
               (rule "commute_or_2" (formula "13") (term "0,0"))
               (rule "commute_or_2" (formula "14") (term "0,0"))
               (rule "shift_paren_or" (formula "12") (term "0,0,0"))
               (rule "shift_paren_or" (formula "13") (term "0,0,0"))
               (rule "shift_paren_or" (formula "14") (term "0,0,0"))
               (rule "commute_or_2" (formula "12") (term "0,0,0,0"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "commute_or" (formula "13") (term "0,0,0,0"))
               (rule "inEqSimp_or_tautInEq1" (formula "13") (term "0,0,0"))
               (rule "add_zero_right" (formula "13") (term "1,1,0,0,0"))
               (rule "qeq_literals" (formula "13") (term "1,0,0,0"))
               (builtin "One Step Simplification" (formula "13"))
               (rule "true_left" (formula "13"))
               (rule "ifthenelse_split" (formula "11") (term "0"))
               (branch "a.length ≥ 1 TRUE"
                  (rule "eqSymm" (formula "12"))
                  (rule "applyEq" (formula "13") (term "1,1,0,0") (ifseqformula "12"))
                  (builtin "One Step Simplification" (formula "13"))
                  (rule "applyEq" (formula "14") (term "1,1,0") (ifseqformula "12"))
                  (rule "applyEq" (formula "15") (term "1,1,0") (ifseqformula "12"))
                  (builtin "One Step Simplification" (formula "15"))
                  (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "11"))
                  (rule "leq_literals" (formula "19") (term "0"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "true_left" (formula "19"))
                  (rule "inEqSimp_or_tautInEq1" (formula "14") (term "0"))
                  (rule "inEqSimp_homoInEq1" (formula "14") (term "1,0"))
                  (rule "polySimp_pullOutFactor1" (formula "14") (term "0,1,0"))
                  (rule "add_literals" (formula "14") (term "1,0,1,0"))
                  (rule "times_zero_1" (formula "14") (term "0,1,0"))
                  (rule "leq_literals" (formula "14") (term "1,0"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "true_left" (formula "14"))
                  (rule "ex_pull_out3" (formula "3") (term "0"))
                  (rule "cnf_rightDist" (formula "3") (term "0,0"))
                  (rule "commute_or_2" (formula "3") (term "1,0,0"))
                  (rule "commute_or" (formula "3") (term "0,1,0,0"))
                  (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                  (rule "commute_or_2" (formula "3") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                  (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
                  (rule "ifthenelse_split" (formula "12") (term "0"))
                  (branch "res_min ≥ 1 TRUE"
                     (rule "eqSymm" (formula "13"))
                     (rule "applyEq" (formula "14") (term "1,1,0,0") (ifseqformula "13"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "applyEq" (formula "1") (term "0") (ifseqformula "13"))
                     (rule "inEqSimp_homoInEq1" (formula "1"))
                     (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "1,1,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0"))
                     (rule "add_zero_right" (formula "1") (term "0"))
                     (rule "leq_literals" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "res_min ≥ 1 FALSE"
                     (rule "eqSymm" (formula "12"))
                     (rule "inEqSimp_geqRight" (formula "19"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "applyEq" (formula "14") (term "1,1,0,0") (ifseqformula "13"))
                     (rule "applyEq" (formula "15") (term "1,1,0") (ifseqformula "13"))
                     (rule "applyEq" (formula "2") (term "0") (ifseqformula "13"))
                     (rule "inEqSimp_homoInEq1" (formula "2"))
                     (rule "times_zero_2" (formula "2") (term "1,0"))
                     (rule "add_zero_right" (formula "2") (term "0"))
                     (rule "applyEq" (formula "12") (term "0") (ifseqformula "13"))
                     (rule "qeq_literals" (formula "12"))
                     (rule "closeFalse" (formula "12"))
                  )
               )
               (branch "a.length ≥ 1 FALSE"
                  (rule "eqSymm" (formula "11"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "inEqSimp_geqRight" (formula "20"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_antiSymm" (formula "19") (ifseqformula "1"))
                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "19"))
                  (rule "inEqSimp_homoInEq1" (formula "2"))
                  (rule "mul_literals" (formula "2") (term "1,0"))
                  (rule "add_zero_right" (formula "2") (term "0"))
                  (rule "applyEq" (formula "20") (term "0") (ifseqformula "19"))
                  (rule "qeq_literals" (formula "20"))
                  (rule "true_left" (formula "20"))
                  (rule "applyEq" (formula "13") (term "1,1,0,0,0") (ifseqformula "19"))
                  (rule "applyEq" (formula "15") (term "1,1,0,0") (ifseqformula "19"))
                  (rule "applyEq" (formula "14") (term "1,1,1,0,0") (ifseqformula "19"))
                  (rule "add_zero_right" (formula "14") (term "1,1,0,0"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "19"))
                  (rule "leq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "inEqSimp_contradEq3" (formula "11") (term "1") (ifseqformula "1"))
                  (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "11") (term "0,0,1"))
                  (rule "qeq_literals" (formula "11") (term "0,1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "notLeft" (formula "11"))
                  (rule "replace_known_right" (formula "12") (term "0,1,1,0") (ifseqformula "19"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "replace_known_right" (formula "11") (term "0,1,1,0,0") (ifseqformula "19"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "replace_known_right" (formula "13") (term "0,1,1,0") (ifseqformula "19"))
                  (builtin "One Step Simplification" (formula "13"))
                  (rule "inEqSimp_geqRight" (formula "19"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_contradInEq0" (formula "17") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "17") (term "0"))
                  (builtin "One Step Simplification" (formula "17"))
                  (rule "closeFalse" (formula "17"))
               )
            )
         )
         (branch "Exceptional Post (min)"
            (builtin "One Step Simplification" (formula "9"))
            (builtin "One Step Simplification" (formula "10"))
            (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_min(heap,length(a),length(b))_001_1" (formula "11") (term "1,1,0,0,0"))
            (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_min(heap,length(a),length(b))_001_1" (formula "11") (term "1,1,0,0,0,1"))
            (rule "andLeft" (formula "9"))
            (rule "orRight" (formula "12"))
            (rule "andLeft" (formula "10"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "11"))
            (rule "notLeft" (formula "9"))
            (rule "close" (formula "13") (ifseqformula "12"))
         )
         (branch "Pre (min)"
            (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "2")))
            (rule "closeTrue" (formula "9"))
         )
      )
      (branch "Exceptional Post (compare)"
         (builtin "One Step Simplification" (formula "7"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_compare(heap,a,b)_01_0" (formula "11") (term "0"))
         (rule "andLeft" (formula "7"))
         (rule "andLeft" (formula "7"))
         (rule "andLeft" (formula "9"))
         (rule "notLeft" (formula "7"))
         (rule "close" (formula "10") (ifseqformula "9"))
      )
      (branch "Pre (compare)"
         (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "8")) (ifInst ""  (formula "9")) (ifInst ""  (formula "1")) (ifInst ""  (formula "8")) (ifInst ""  (formula "9")))
         (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_compare(heap,a,b)_01_0" (formula "10") (term "0"))
         (rule "eqSymm" (formula "6"))
         (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "8"))
         (builtin "One Step Simplification" (formula "3"))
         (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "9"))
         (builtin "One Step Simplification" (formula "4"))
         (rule "replace_known_left" (formula "7") (term "0") (ifseqformula "3"))
         (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "4")))
         (rule "closeTrue" (formula "7"))
      )
   )
   (branch "Case 2"
      (builtin "Evaluate Query" (formula "9") (term "0") (newnames "a1_1,a2_1,callee,queryResult_1,res_compare_1"))
      (rule "notLeft" (formula "1") (userinteraction))
      (rule "variableDeclaration" (formula "7") (term "1") (newnames "queryResult_1") (userinteraction))
      (builtin "Use Operation Contract" (formula "7") (newnames "heapBefore_compare_0,result_2,exc_1") (contract "verif.selectvoting.system.core.Utils[verif.selectvoting.system.core.Utils::compare([B,[B)].JML normal_behavior operation contract.0"))
      (branch "Post (compare)"
         (builtin "One Step Simplification" (formula "7"))
         (builtin "Evaluate Query" (formula "7") (term "1,1,0,0,0,0,0,1") (newnames "a_1,b_1,callee,queryResult_2,res_min_0"))
         (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_compare(heap,b,a)_11_0" (formula "12") (term "0") (userinteraction))
         (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_min(heap,length(b),length(a))_011_1" (formula "8") (term "1,1,0,0,0,0,0,1") (userinteraction))
         (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_min(heap,length(b),length(a))_011_1" (formula "8") (term "1,1,0,0,0,1,0,0,1") (userinteraction))
         (rule "variableDeclaration" (formula "1") (term "1,0") (newnames "queryResult_2") (userinteraction))
         (rule "notLeft" (formula "1") (userinteraction))
         (builtin "Use Operation Contract" (formula "8") (newnames "heapBefore_min_0,result_3,exc_2") (contract "verif.selectvoting.system.core.Utils[verif.selectvoting.system.core.Utils::min(int,int)].JML normal_behavior operation contract.0"))
         (branch "Post (min)"
            (builtin "One Step Simplification" (formula "8"))
            (builtin "One Step Simplification" (formula "10"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "andLeft" (formula "7"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "10"))
            (rule "andLeft" (formula "10"))
            (rule "eqSymm" (formula "6"))
            (rule "eqSymm" (formula "13") (term "0,0,1"))
            (rule "eqSymm" (formula "12") (term "0,0,1"))
            (rule "eqSymm" (formula "11") (term "0,1"))
            (rule "eqSymm" (formula "10") (term "1"))
            (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "14"))
            (builtin "One Step Simplification" (formula "3"))
            (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "15"))
            (builtin "One Step Simplification" (formula "4"))
            (rule "inEqSimp_leqRight" (formula "16"))
            (rule "times_zero_1" (formula "1") (term "1,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0"))
            (rule "narrowSelectArrayType" (formula "7") (term "2,0") (ifseqformula "2") (ifseqformula "16"))
            (rule "eqSymm" (formula "7"))
            (rule "narrowSelectArrayType" (formula "7") (term "2,0") (ifseqformula "2") (ifseqformula "15"))
            (rule "eqSymm" (formula "7"))
            (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1,1,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "9") (term "0,1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,1,0,0,0"))
            (rule "inEqSimp_gtToGeq" (formula "12") (term "0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1,1,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,0,1,0"))
            (rule "assignment" (formula "14") (term "1"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "assignment" (formula "13") (term "1"))
            (builtin "One Step Simplification" (formula "13"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,0,1,0"))
            (rule "mul_literals" (formula "9") (term "0,1,1,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,1,1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,1,1,0,0,0"))
            (rule "mul_literals" (formula "9") (term "0,1,1,0,0,1,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,0,0"))
            (rule "mul_literals" (formula "9") (term "0,1,1,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0,1,0,0,0"))
            (rule "mul_literals" (formula "9") (term "0,1,0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,0"))
            (rule "eqSeqDef" (formula "7") (inst "iv=iv"))
            (rule "andLeft" (formula "7"))
            (rule "lenOfSeqDef" (formula "7") (term "1"))
            (rule "polySimp_elimSub" (formula "7") (term "1,1"))
            (rule "times_zero_2" (formula "7") (term "1,1,1"))
            (rule "add_zero_right" (formula "7") (term "1,1"))
            (rule "getOfSeqDef" (formula "8") (term "1,1,0"))
            (rule "castDel" (formula "8") (term "2,1,1,0"))
            (rule "castDel" (formula "8") (term "1,1,1,0"))
            (rule "add_zero_right" (formula "8") (term "0,2,1,1,1,0"))
            (rule "polySimp_elimSub" (formula "8") (term "1,1,0,1,1,0"))
            (rule "mul_literals" (formula "8") (term "1,1,1,0,1,1,0"))
            (rule "add_zero_right" (formula "8") (term "1,1,0,1,1,0"))
            (rule "lenOfSeqDef" (formula "8") (term "1,1,0,0"))
            (rule "polySimp_elimSub" (formula "8") (term "1,1,1,0,0"))
            (rule "times_zero_2" (formula "8") (term "1,1,1,1,0,0"))
            (rule "add_zero_right" (formula "8") (term "1,1,1,0,0"))
            (rule "getOfSeqDef" (formula "8") (term "0,1,0"))
            (rule "castDel" (formula "8") (term "2,0,1,0"))
            (rule "castDel" (formula "8") (term "1,0,1,0"))
            (rule "add_zero_right" (formula "8") (term "0,2,1,0,1,0"))
            (rule "polySimp_elimSub" (formula "8") (term "1,1,0,0,1,0"))
            (rule "times_zero_2" (formula "8") (term "1,1,1,0,0,1,0"))
            (rule "add_zero_right" (formula "8") (term "1,1,0,0,1,0"))
            (rule "lenOfSeqDef" (formula "7") (term "0"))
            (rule "polySimp_elimSub" (formula "7") (term "1,0"))
            (rule "times_zero_2" (formula "7") (term "1,1,0"))
            (rule "add_zero_right" (formula "7") (term "1,0"))
            (rule "inEqSimp_ltToLeq" (formula "7") (term "0,1"))
            (rule "add_zero_right" (formula "7") (term "0,0,1"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,1,1,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,1,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "8") (term "0,1,1,0,0"))
            (rule "add_zero_right" (formula "8") (term "0,0,1,1,0,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0"))
            (rule "add_zero_right" (formula "7") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,1,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,1,0"))
            (rule "applyEq" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "7"))
            (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "7") (term "0,0,1"))
            (rule "polySimp_elimOne" (formula "7") (term "0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,1,1,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,1,1,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,1,0,1,1,0"))
            (rule "mul_literals" (formula "8") (term "0,1,1,0,1,1,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,1,1,0"))
            (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,1,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,1,0"))
            (rule "mul_literals" (formula "8") (term "0,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,1,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0"))
            (rule "polySimp_elimOne" (formula "7") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
            (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,1,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "0,0,1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "8") (term "0,0,1,1,1,0,0"))
            (rule "nnf_imp2or" (formula "10") (term "0,0,1,0"))
            (rule "nnf_imp2or" (formula "10") (term "0,1,1,0,0,0"))
            (rule "nnf_imp2or" (formula "8") (term "0"))
            (rule "nnf_notAnd" (formula "8") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
            (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
            (rule "mul_literals" (formula "8") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "10") (term "0,0,0,1,0"))
            (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0,1,0"))
            (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0,1,0"))
            (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0,1,0"))
            (rule "add_zero_left" (formula "10") (term "0,0,1,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,1,0"))
            (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,0,1,0"))
            (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0,0,1,0"))
            (rule "add_zero_right" (formula "10") (term "0,0,0,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0,1,0"))
            (rule "mul_literals" (formula "10") (term "1,0,0,0,0,1,0"))
            (rule "nnf_notAnd" (formula "10") (term "0,0,1,1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,1,1,0,0,0"))
            (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,1,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,1,1,0,0,0"))
            (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,1,1,0,0,0"))
            (rule "add_zero_left" (formula "10") (term "0,0,1,0,0,1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,1,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,1,1,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,1,1,0,0,0"))
            (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0,1,1,0,0,0"))
            (rule "add_zero_right" (formula "10") (term "0,0,0,0,0,1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,1,1,0,0,0"))
            (rule "mul_literals" (formula "10") (term "1,0,0,0,1,1,0,0,0"))
            (rule "commute_or_2" (formula "8") (term "0"))
            (rule "methodCallEmpty" (formula "15") (term "1"))
            (builtin "One Step Simplification" (formula "15"))
            (rule "methodCallEmpty" (formula "14") (term "1"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "commute_or" (formula "8") (term "0,0"))
            (rule "emptyModality" (formula "15") (term "1"))
            (builtin "One Step Simplification" (formula "15"))
            (rule "notRight" (formula "15"))
            (rule "eqSymm" (formula "1"))
            (rule "applyEq" (formula "11") (term "0,1") (ifseqformula "1"))
            (rule "inEqSimp_contradInEq1" (formula "11") (term "1") (ifseqformula "2"))
            (rule "qeq_literals" (formula "11") (term "0,1"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "notLeft" (formula "11"))
            (rule "orRight" (formula "14"))
            (rule "nnf_ex2all" (formula "14"))
            (rule "nnf_notAnd" (formula "1") (term "0"))
            (rule "nnf_notAnd" (formula "1") (term "1,0"))
            (rule "inEqSimp_notLeq" (formula "1") (term "0,1,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,1,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,0,1,0"))
            (rule "add_zero_left" (formula "1") (term "0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,1,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
            (rule "mul_literals" (formula "1") (term "1,0,0,0"))
            (rule "nnf_notAll" (formula "1") (term "1,1,0"))
            (rule "nnf_notOr" (formula "1") (term "0,1,1,0"))
            (rule "nnf_notOr" (formula "1") (term "0,0,1,1,0"))
            (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0,1,1,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,1,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1,1,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,1,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,1,0"))
            (rule "mul_literals" (formula "1") (term "0,1,1,0,0,1,1,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,1,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,1,0"))
            (rule "inEqSimp_notLeq" (formula "1") (term "0,0,0,1,1,0"))
            (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0,1,1,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,0,0,1,1,0"))
            (rule "add_zero_left" (formula "1") (term "0,0,0,0,1,1,0"))
            (rule "emptyModality" (formula "16") (term "1"))
            (builtin "One Step Simplification" (formula "16"))
            (rule "notRight" (formula "16"))
            (rule "eqSymm" (formula "1"))
            (rule "applyEq" (formula "14") (term "1,1") (ifseqformula "1"))
            (rule "applyEq" (formula "15") (term "1,0,1") (ifseqformula "1"))
            (rule "arrayLengthIsAShort" (formula "15") (term "0,0,1,1"))
            (builtin "One Step Simplification" (formula "15"))
            (rule "true_left" (formula "15"))
            (rule "arrayLengthNotNegative" (formula "15") (term "1,0,1,1"))
            (rule "arrayLengthNotNegative" (formula "16") (term "0,0,1,1"))
            (rule "arrayLengthIsAShort" (formula "17") (term "1,0,1,1"))
            (builtin "One Step Simplification" (formula "17"))
            (rule "true_left" (formula "17"))
            (rule "ifthenelse_to_or_left" (formula "11") (term "0,0,0"))
            (rule "eqSymm" (formula "11") (term "1,1,0,0,0"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "eqSymm" (formula "11") (term "1,0,0,0,0"))
            (rule "nnf_notAnd" (formula "11") (term "0,0,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,0,0,0"))
            (rule "add_zero_left" (formula "11") (term "0,0,1,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,0,0,0"))
            (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,0,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,0,0"))
            (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0,0"))
            (rule "nnf_notAnd" (formula "11") (term "0,1,1,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "11") (term "0,0,1,1,0,0,0"))
            (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,1,1,0,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,0,0,1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,1,1,0,0,0"))
            (rule "mul_literals" (formula "11") (term "1,0,0,1,1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "11") (term "1,0,1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,1,1,0,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,1,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,1,1,0,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,0,1,0,1,1,0,0,0"))
            (rule "add_zero_left" (formula "11") (term "0,0,1,0,1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,1,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,0,1,1,0,0,0"))
            (rule "commute_or" (formula "11") (term "0,0"))
            (rule "commute_or_2" (formula "11") (term "0"))
            (rule "commute_or" (formula "11") (term "1,1,0"))
            (rule "commute_or_2" (formula "11") (term "0,1,0"))
            (rule "commute_or_2" (formula "11") (term "0,1,1,0"))
            (rule "commute_or" (formula "11") (term "0,0,1,0"))
            (rule "ifthenelse_split" (formula "10") (term "1"))
            (branch "a.length ≥ 1 TRUE"
               (rule "replace_known_left" (formula "12") (term "0,1,1,0,0") (ifseqformula "10"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "10"))
               (rule "leq_literals" (formula "16") (term "0"))
               (builtin "One Step Simplification" (formula "16"))
               (rule "true_left" (formula "16"))
               (rule "commute_or" (formula "12") (term "0,0,1,1,0"))
               (rule "ifthenelse_split" (formula "11") (term "0"))
               (branch "b.length ≥ 1 TRUE"
                  (rule "replace_known_left" (formula "18") (term "0,1,1") (ifseqformula "12"))
                  (builtin "One Step Simplification" (formula "18"))
                  (rule "notLeft" (formula "18"))
                  (rule "inEqSimp_geqRight" (formula "18"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0"))
                  (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "13"))
                  (rule "inEqSimp_homoInEq0" (formula "17") (term "0"))
                  (rule "polySimp_pullOutFactor1" (formula "17") (term "0,0"))
                  (rule "add_literals" (formula "17") (term "1,0,0"))
                  (rule "times_zero_1" (formula "17") (term "0,0"))
                  (rule "qeq_literals" (formula "17") (term "0"))
                  (builtin "One Step Simplification" (formula "17"))
                  (rule "applyEq" (formula "19") (term "0,1") (ifseqformula "13"))
                  (rule "inEqSimp_homoInEq0" (formula "19") (term "1"))
                  (rule "polySimp_pullOutFactor1" (formula "19") (term "0,1"))
                  (rule "add_literals" (formula "19") (term "1,0,1"))
                  (rule "times_zero_1" (formula "19") (term "0,1"))
                  (rule "qeq_literals" (formula "19") (term "1"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "allRight" (formula "19") (inst "sk=j_38"))
                  (rule "orRight" (formula "19"))
                  (rule "orRight" (formula "19"))
                  (rule "inEqSimp_leqRight" (formula "19"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_geqRight" (formula "20"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "applyEq" (formula "16") (term "1,1,0,1,0") (ifseqformula "15"))
                  (rule "applyEq" (formula "16") (term "1,1,1,1,1,1,0") (ifseqformula "15"))
                  (rule "applyEq" (formula "20") (term "0") (ifseqformula "15"))
                  (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "15"))
                  (rule "polySimp_pullOutFactor2" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "1,0"))
                  (rule "times_zero_1" (formula "3") (term "0"))
                  (rule "leq_literals" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "applyEq" (formula "13") (term "0") (ifseqformula "14"))
                  (rule "applyEq" (formula "13") (term "0") (ifseqformula "17"))
                  (rule "eqSymm" (formula "13"))
                  (rule "applyEq" (formula "18") (term "0") (ifseqformula "13"))
                  (rule "applyEq" (formula "14") (term "1,1,0,1,0") (ifseqformula "13"))
                  (rule "applyEq" (formula "14") (term "1,1,1,1,1,1,0") (ifseqformula "13"))
                  (rule "applyEq" (formula "14") (term "1,1,1,0,0,0,0,0,1,0") (ifseqformula "13"))
                  (rule "applyEq" (formula "14") (term "1,1,0,0") (ifseqformula "13"))
                  (rule "applyEq" (formula "12") (term "0") (ifseqformula "13"))
                  (rule "applyEq" (formula "14") (term "1,1,0,1,1,0") (ifseqformula "13"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "12"))
                  (rule "leq_literals" (formula "18") (term "0"))
                  (builtin "One Step Simplification" (formula "18"))
                  (rule "true_left" (formula "18"))
                  (rule "ex_pull_out3" (formula "4") (term "1,0"))
                  (rule "cnf_rightDist" (formula "14") (term "1,1,0"))
                  (rule "commute_or_2" (formula "14") (term "0,1,1,0"))
                  (rule "inEqSimp_or_tautInEq1" (formula "14") (term "0,0,1,1,0"))
                  (rule "add_zero_right" (formula "14") (term "1,1,0,0,1,1,0"))
                  (rule "qeq_literals" (formula "14") (term "1,0,0,1,1,0"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "shift_paren_or" (formula "14") (term "1,1,0"))
                  (rule "commute_or" (formula "14") (term "0,1,1,0"))
                  (rule "inEqSimp_or_tautInEq1" (formula "14") (term "1,1,0"))
                  (rule "inEqSimp_homoInEq1" (formula "14") (term "1,1,1,0"))
                  (rule "polySimp_pullOutFactor1" (formula "14") (term "0,1,1,1,0"))
                  (rule "add_literals" (formula "14") (term "1,0,1,1,1,0"))
                  (rule "times_zero_1" (formula "14") (term "0,1,1,1,0"))
                  (rule "leq_literals" (formula "14") (term "1,1,1,0"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "shift_paren_or" (formula "14") (term "0"))
                  (rule "commute_or_2" (formula "14") (term "0,0"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "shift_paren_or" (formula "14") (term "0,0"))
                  (rule "commute_or" (formula "14") (term "0,0,0"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "cnf_rightDist" (formula "4") (term "0,1,0"))
                  (rule "commute_or" (formula "4") (term "1,0,1,0"))
                  (rule "cnf_rightDist" (formula "4") (term "0,0,1,0"))
                  (rule "commute_or" (formula "4") (term "1,0,0,1,0"))
                  (rule "ifthenelse_to_or_left" (formula "14") (term "0,0,0"))
                  (rule "eqSymm" (formula "14") (term "1,1,0,0,0"))
                  (rule "eqSymm" (formula "14") (term "1,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "14") (term "0,0,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,0,0,0"))
                  (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,0,0,0"))
                  (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0,0,0,0"))
                  (rule "add_literals" (formula "14") (term "0,0,0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0,0"))
                  (rule "commute_or" (formula "14") (term "0,0"))
                  (rule "commute_or_2" (formula "14") (term "0"))
                  (rule "commute_or" (formula "14") (term "1,1,0"))
                  (rule "cnf_rightDist" (formula "14") (term "1,1,0"))
                  (rule "cnf_rightDist" (formula "14") (term "0"))
                  (rule "distr_forallAnd" (formula "14"))
                  (rule "andLeft" (formula "14"))
                  (rule "commute_or" (formula "15") (term "0"))
                  (rule "shift_paren_or" (formula "14") (term "0"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "commute_or" (formula "15") (term "1,1,0"))
                  (rule "cnf_rightDist" (formula "15") (term "0"))
                  (rule "distr_forallAnd" (formula "15"))
                  (rule "andLeft" (formula "15"))
                  (rule "commute_or_2" (formula "15") (term "0"))
                  (rule "shift_paren_or" (formula "16") (term "0"))
                  (rule "commute_or_2" (formula "16") (term "0,0"))
                  (rule "inEqSimp_or_tautInEq1" (formula "16") (term "0"))
                  (rule "inEqSimp_homoInEq1" (formula "16") (term "1,0"))
                  (rule "polySimp_pullOutFactor1" (formula "16") (term "0,1,0"))
                  (rule "add_literals" (formula "16") (term "1,0,1,0"))
                  (rule "times_zero_1" (formula "16") (term "0,1,0"))
                  (rule "leq_literals" (formula "16") (term "1,0"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "true_left" (formula "16"))
                  (rule "shift_paren_or" (formula "15") (term "0,0"))
                  (rule "commute_or" (formula "15") (term "0,0,0"))
                  (rule "inEqSimp_or_tautInEq1" (formula "15") (term "0,0"))
                  (rule "add_zero_right" (formula "15") (term "1,1,0,0"))
                  (rule "qeq_literals" (formula "15") (term "1,0,0"))
                  (builtin "One Step Simplification" (formula "15"))
                  (rule "true_left" (formula "15"))
                  (rule "ex_pull_out3" (formula "4") (term "0"))
                  (rule "cnf_rightDist" (formula "4") (term "0,0"))
                  (rule "commute_or_2" (formula "4") (term "1,0,0"))
                  (rule "commute_or" (formula "4") (term "0,1,0,0"))
                  (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                  (rule "commute_or_2" (formula "4") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                  (rule "commute_or" (formula "4") (term "0,1,0,0,0"))
                  (rule "allLeft" (formula "14") (inst "t=j_38"))
                  (rule "replace_known_right" (formula "14") (term "1") (ifseqformula "19"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1"))
                  (rule "add_literals" (formula "14") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "14") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "14") (term "0,0,1"))
                  (rule "leq_literals" (formula "14") (term "0,1"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "inEqSimp_contradInEq1" (formula "14") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "14") (term "0"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "closeFalse" (formula "14"))
               )
               (branch "b.length ≥ 1 FALSE"
                  (rule "eqSymm" (formula "11"))
                  (rule "inEqSimp_geqRight" (formula "18"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "12"))
                  (rule "replace_known_left" (formula "16") (term "0") (ifseqformula "1"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "applyEq" (formula "18") (term "0,0,1") (ifseqformula "12"))
                  (rule "eqSymm" (formula "18") (term "0,1"))
                  (rule "applyEq" (formula "13") (term "1,1,0,1,1,0") (ifseqformula "12"))
                  (rule "applyEq" (formula "11") (term "0") (ifseqformula "12"))
                  (rule "qeq_literals" (formula "11"))
                  (rule "closeFalse" (formula "11"))
               )
            )
            (branch "a.length ≥ 1 FALSE"
               (builtin "One Step Simplification" (formula "10"))
               (rule "replace_known_right" (formula "11") (term "0,1,1,0,0") (ifseqformula "18"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "inEqSimp_geqRight" (formula "18"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_antiSymm" (formula "16") (ifseqformula "1"))
               (rule "applyEq" (formula "12") (term "1,1,0,1,1,0") (ifseqformula "16"))
               (rule "applyEq" (formula "12") (term "1,1,1,0,0,0,0,0,1,0") (ifseqformula "16"))
               (rule "add_zero_right" (formula "12") (term "1,1,0,0,0,0,0,1,0"))
               (rule "applyEq" (formula "1") (term "0") (ifseqformula "16"))
               (rule "leq_literals" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "applyEq" (formula "14") (term "1,0") (ifseqformula "15"))
               (rule "applyEq" (formula "18") (term "0,0,1") (ifseqformula "15"))
               (rule "eqSymm" (formula "18") (term "0,1"))
               (rule "applyEq" (formula "19") (term "1,1") (ifseqformula "15"))
               (rule "applyEq" (formula "18") (term "1,1,0") (ifseqformula "15"))
               (rule "add_zero_right" (formula "18") (term "1,0"))
               (rule "applyEq" (formula "16") (term "0") (ifseqformula "15"))
               (rule "qeq_literals" (formula "16"))
               (rule "true_left" (formula "16"))
               (rule "applyEq" (formula "17") (term "1,0,1,1") (ifseqformula "15"))
               (rule "inEqSimp_notGeq" (formula "10") (term "0"))
               (rule "mul_literals" (formula "10") (term "1,0,0,0"))
               (rule "add_literals" (formula "10") (term "0,0,0"))
               (rule "add_zero_left" (formula "10") (term "0,0"))
               (rule "inEqSimp_or_tautInEq0" (formula "11") (term "0,0"))
               (rule "add_zero_right" (formula "11") (term "1,1,0,0"))
               (rule "qeq_literals" (formula "11") (term "1,0,0"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "true_left" (formula "11"))
               (rule "ex_pull_out3" (formula "2") (term "1,0"))
               (rule "cnf_rightDist" (formula "2") (term "0,1,0"))
               (rule "commute_or" (formula "2") (term "1,0,1,0"))
               (rule "cnf_rightDist" (formula "2") (term "0,0,1,0"))
               (rule "commute_or" (formula "2") (term "1,0,0,1,0"))
               (rule "ex_pull_out3" (formula "2") (term "0"))
               (rule "cnf_rightDist" (formula "2") (term "0,0"))
               (rule "commute_or_2" (formula "2") (term "1,0,0"))
               (rule "commute_or" (formula "2") (term "0,1,0,0"))
               (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
               (rule "commute_or_2" (formula "2") (term "1,0,0,0"))
               (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
               (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
               (rule "commute_and_2" (formula "2") (term "0,0"))
               (rule "equiv_left" (formula "13"))
               (branch "Case 1"
                  (rule "replace_known_left" (formula "10") (term "0") (ifseqformula "13"))
                  (builtin "One Step Simplification" (formula "10"))
                  (rule "true_left" (formula "10"))
                  (rule "replace_known_left" (formula "17") (term "1") (ifseqformula "12"))
                  (builtin "One Step Simplification" (formula "17"))
                  (rule "allRight" (formula "17") (inst "sk=j_37"))
                  (rule "orRight" (formula "17"))
                  (rule "orRight" (formula "17"))
                  (rule "inEqSimp_geqRight" (formula "18"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_leqRight" (formula "18"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "applyEq" (formula "14") (term "0") (ifseqformula "15"))
                  (rule "applyEq" (formula "17") (term "0") (ifseqformula "15"))
                  (rule "applyEq" (formula "18") (term "0,0,1,1") (ifseqformula "15"))
                  (builtin "One Step Simplification" (formula "18"))
                  (rule "notLeft" (formula "18"))
                  (rule "inEqSimp_geqRight" (formula "18"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                  (rule "polySimp_elimOne" (formula "3") (term "0"))
                  (rule "inEqSimp_antiSymm" (formula "18") (ifseqformula "15"))
                  (rule "applyEq" (formula "5") (term "1,1,0,0,1,0,0,0") (ifseqformula "18"))
                  (rule "applyEq" (formula "15") (term "0") (ifseqformula "18"))
                  (rule "leq_literals" (formula "15"))
                  (rule "true_left" (formula "15"))
                  (rule "applyEqRigid" (formula "5") (term "1,1,0,0,1,0,0") (ifseqformula "17"))
                  (rule "applyEq" (formula "18") (term "0") (ifseqformula "17"))
                  (rule "qeq_literals" (formula "18"))
                  (rule "true_left" (formula "18"))
                  (rule "applyEq" (formula "5") (term "1,1,0,0,0,0,0,0") (ifseqformula "17"))
                  (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "17"))
                  (rule "inEqSimp_homoInEq1" (formula "3"))
                  (rule "times_zero_2" (formula "3") (term "1,0"))
                  (rule "add_zero_right" (formula "3") (term "0"))
                  (rule "applyEq" (formula "15") (term "1") (ifseqformula "17"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "15"))
                  (rule "leq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "applyEqRigid" (formula "3") (term "1") (ifseqformula "16"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                  (rule "mul_literals" (formula "2") (term "1"))
                  (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "1") (term "0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "Case 2"
                  (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "16"))
                  (builtin "One Step Simplification" (formula "10"))
                  (rule "replace_known_right" (formula "18") (term "1") (ifseqformula "16"))
                  (builtin "One Step Simplification" (formula "18"))
                  (rule "false_right" (formula "18"))
                  (rule "replace_known_left" (formula "15") (term "0,1,1") (ifseqformula "10"))
                  (builtin "One Step Simplification" (formula "15"))
                  (rule "notLeft" (formula "15"))
                  (rule "inEqSimp_leqRight" (formula "16"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0"))
                  (rule "inEqSimp_geqRight" (formula "16"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "applyEq" (formula "17") (term "0") (ifseqformula "12"))
                  (rule "eqSymm" (formula "17"))
                  (rule "applyEq" (formula "16") (term "0") (ifseqformula "12"))
                  (rule "qeq_literals" (formula "16"))
                  (rule "true_left" (formula "16"))
                  (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "12"))
                  (rule "add_zero_right" (formula "2") (term "0"))
                  (rule "qeq_literals" (formula "2"))
                  (rule "closeFalse" (formula "2"))
               )
            )
         )
         (branch "Exceptional Post (min)"
            (builtin "One Step Simplification" (formula "8"))
            (builtin "One Step Simplification" (formula "10"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "andLeft" (formula "7"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "11"))
            (rule "notLeft" (formula "9"))
            (rule "close" (formula "12") (ifseqformula "11"))
         )
         (branch "Pre (min)"
            (builtin "One Step Simplification" (formula "9"))
            (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "1")))
            (rule "closeTrue" (formula "8"))
         )
      )
      (branch "Exceptional Post (compare)"
         (builtin "One Step Simplification" (formula "7"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_compare(heap,b,a)_11_0" (formula "11") (term "0"))
         (rule "andLeft" (formula "7"))
         (rule "andLeft" (formula "7"))
         (rule "andLeft" (formula "9"))
         (rule "notLeft" (formula "7"))
         (rule "close" (formula "10") (ifseqformula "9"))
      )
      (branch "Pre (compare)"
         (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "9")) (ifInst ""  (formula "8")) (ifInst ""  (formula "1")) (ifInst ""  (formula "9")) (ifInst ""  (formula "8")))
         (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_compare(heap,b,a)_11_0" (formula "10") (term "0"))
         (rule "eqSymm" (formula "6"))
         (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "8"))
         (builtin "One Step Simplification" (formula "3"))
         (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "9"))
         (builtin "One Step Simplification" (formula "4"))
         (rule "replace_known_left" (formula "7") (term "1") (ifseqformula "3"))
         (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "4")))
         (rule "closeTrue" (formula "7"))
      )
   )
)
)

}
