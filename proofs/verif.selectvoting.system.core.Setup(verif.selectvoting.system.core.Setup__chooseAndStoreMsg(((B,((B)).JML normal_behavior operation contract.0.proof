\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sun Mar 20 18:45:03 CET 2016
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=5000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Sun Mar 20 18:45:03 CET 2016
name=verif.selectvoting.system.core.Setup[verif.selectvoting.system.core.Setup\\:\\:chooseAndStoreMsg([[B,[[B)].JML normal_behavior operation contract.0
contract=verif.selectvoting.system.core.Setup[verif.selectvoting.system.core.Setup\\:\\:chooseAndStoreMsg([[B,[[B)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mihai" ) (keyVersion "6bc7ade97061383f11985e24decf735b7f2f0af2"))

(autoModeTime "4719")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1") (newnames "msg1,msg2,result,exc,heapAtPre,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "2"))
(rule "eqSymm" (formula "9") (term "1,0,0,1,0,1"))
(rule "eqSymm" (formula "5") (term "1,0"))
(rule "elementOfSingleton" (formula "9") (term "0,0,0,0,1,0,1"))
(rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
(rule "assignment" (formula "9") (term "1"))
(builtin "One Step Simplification" (formula "9"))
(rule "nonNull" (formula "7") (inst "i=i"))
(rule "greater_literals" (formula "7") (term "0,1"))
(builtin "One Step Simplification" (formula "7"))
(rule "sub_literals" (formula "7") (term "2,1,0,1"))
(builtin "One Step Simplification" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "notLeft" (formula "7"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "9"))
(builtin "One Step Simplification" (formula "2"))
(rule "narrowSelectArrayType" (formula "7") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "9"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
(rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
(rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
(rule "nonNull" (formula "8") (inst "i=i"))
(rule "sub_literals" (formula "8") (term "2,1,0,1,1"))
(builtin "One Step Simplification" (formula "8"))
(rule "greater_literals" (formula "8") (term "0,1"))
(builtin "One Step Simplification" (formula "8"))
(rule "andLeft" (formula "8"))
(rule "notLeft" (formula "8"))
(rule "replace_known_right" (formula "3") (term "0") (ifseqformula "9"))
(builtin "One Step Simplification" (formula "3"))
(rule "narrowSelectArrayType" (formula "8") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "9"))
(rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
(rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
(rule "nonNull" (formula "11") (term "1,1,1,0,0,0,1") (inst "i=i"))
(rule "greater_literals" (formula "11") (term "0,1,1,1,1,0,0,0,1"))
(builtin "One Step Simplification" (formula "11"))
(rule "sub_literals" (formula "11") (term "2,1,0,1,1,1,1,0,0,0,1"))
(builtin "One Step Simplification" (formula "11"))
(rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "0,1,1,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,1,1,1,0,0,0,1"))
(rule "nnf_imp2or" (formula "5") (term "0"))
(rule "nnf_imp2or" (formula "7") (term "0"))
(rule "nnf_imp2or" (formula "8") (term "0"))
(rule "nnf_notAnd" (formula "5") (term "0,0"))
(rule "inEqSimp_notLeq" (formula "5") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "5") (term "1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0"))
(rule "mul_literals" (formula "5") (term "0,1,1,0,0"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0"))
(rule "inEqSimp_notGeq" (formula "5") (term "0,0,0"))
(rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "5") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
(rule "mul_literals" (formula "5") (term "1,0,0,0"))
(rule "nnf_notAnd" (formula "7") (term "0,0"))
(rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
(rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
(rule "mul_literals" (formula "7") (term "1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
(rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
(rule "nnf_notAnd" (formula "8") (term "0,0"))
(rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
(rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
(rule "mul_literals" (formula "8") (term "1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
(rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
(rule "nnf_imp2or" (formula "11") (term "0,1,1,1,1,0,0,0,1"))
(rule "nnf_notAnd" (formula "11") (term "0,0,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,1,1,1,1,0,0,0,1"))
(rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,1,1,1,1,0,0,0,1"))
(rule "add_zero_right" (formula "11") (term "0,0,0,0,0,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "1,0,0,0,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,1,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,1,1,1,1,0,0,0,1"))
(rule "add_literals" (formula "11") (term "0,0,0,1,0,0,1,1,1,1,0,0,0,1"))
(rule "add_zero_left" (formula "11") (term "0,0,1,0,0,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,1,1,1,1,0,0,0,1"))
(rule "commute_or_2" (formula "7") (term "0"))
(rule "commute_or_2" (formula "8") (term "0"))
(rule "commute_or" (formula "7") (term "0,0"))
(rule "commute_or" (formula "8") (term "0,0"))
(rule "methodBodyExpand" (formula "11") (term "1") (newnames "heapBefore_chooseAndStoreMsg,savedHeapBefore_chooseAndStoreMsg"))
(builtin "One Step Simplification" (formula "11"))
(rule "ifUnfold" (formula "11") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "11") (term "1") (newnames "x"))
(rule "compound_assignment_2" (formula "11") (term "1") (inst "#v=x_1"))
(rule "variableDeclarationAssign" (formula "11") (term "1"))
(rule "variableDeclaration" (formula "11") (term "1") (newnames "x_1"))
(builtin "Use Operation Contract" (formula "11") (newnames "heapBefore_setEquality,result_0,exc_0,heapAfter_setEquality,anon_heap_setEquality") (contract "verif.selectvoting.system.core.Setup[verif.selectvoting.system.core.Setup::setEquality([[B,[[B)].JML normal_behavior operation contract.0"))
(branch "Post (setEquality)"
   (builtin "One Step Simplification" (formula "10"))
   (builtin "One Step Simplification" (formula "13"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "12"))
   (rule "eqSymm" (formula "12"))
   (rule "assignment" (formula "15") (term "1"))
   (builtin "One Step Simplification" (formula "15"))
   (rule "compound_assignment_1_new" (formula "15") (term "1"))
   (builtin "One Step Simplification" (formula "15"))
   (rule "arrayLengthNotNegative" (formula "5") (term "1,1,1,0,0"))
   (rule "arrayLengthIsAShort" (formula "6") (term "1,1,1,0,0"))
   (builtin "One Step Simplification" (formula "6"))
   (rule "true_left" (formula "6"))
   (rule "ifSplit" (formula "16"))
   (branch "if x true"
      (builtin "One Step Simplification" (formula "17"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "blockThrow" (formula "17") (term "1"))
      (rule "apply_eq_boolean" (formula "13") (term "1") (ifseqformula "14"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "notLeft" (formula "13"))
      (rule "throwUnfold" (formula "17") (term "1") (inst "#v0=t"))
      (rule "variableDeclarationAssign" (formula "17") (term "1"))
      (rule "variableDeclaration" (formula "17") (term "1") (newnames "t"))
      (builtin "Use Operation Contract" (formula "17") (newnames "heapBefore_Throwable,self,exc_3,heapAfter_Throwable,anon_heap_Throwable") (contract "java.lang.Throwable[java.lang.Throwable::Throwable()].JML normal_behavior operation contract.0"))
      (branch "Post (Throwable)"
         (builtin "One Step Simplification" (formula "14"))
         (builtin "One Step Simplification" (formula "19"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "0,0,1,0,1,0,1") (ifseqformula "11"))
         (rule "andLeft" (formula "14"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "1,1,0,1,0") (ifseqformula "14"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "0,1,1,0,1,0") (ifseqformula "11"))
         (rule "andLeft" (formula "15"))
         (rule "andLeft" (formula "16"))
         (rule "andLeft" (formula "15"))
         (rule "andLeft" (formula "16"))
         (rule "andLeft" (formula "15"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "15"))
         (rule "notLeft" (formula "15"))
         (rule "andLeft" (formula "15"))
         (rule "notLeft" (formula "15"))
         (rule "orRight" (formula "21"))
         (rule "replace_known_right" (formula "15") (term "0,0") (ifseqformula "21"))
         (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "22")))
         (rule "assignment" (formula "28") (term "1"))
         (builtin "One Step Simplification" (formula "28"))
         (rule "pullOutSelect" (formula "18") (term "0") (inst "selectSK=java_lang_Throwable_cause_0"))
         (rule "simplifySelectOfAnonEQ" (formula "18") (ifseqformula "14"))
         (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "24")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "0,1,0,0") (ifseqformula "11"))
         (rule "replace_known_right" (formula "18") (term "1,0,1,0,0") (ifseqformula "23"))
         (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "22")))
         (rule "hideAuxiliaryEq" (formula "18"))
         (rule "replaceKnownAuxiliaryConstant_taclet000_1" (formula "18") (term "0"))
         (rule "pullOutSelect" (formula "17") (term "0") (inst "selectSK=java_lang_Throwable_message_0"))
         (rule "simplifySelectOfAnonEQ" (formula "17") (ifseqformula "14"))
         (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "24")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "17") (term "0,1,0,0") (ifseqformula "11"))
         (rule "replace_known_right" (formula "17") (term "0,0,1,0,0") (ifseqformula "22"))
         (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "23")))
         (rule "hideAuxiliaryEq" (formula "17"))
         (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "17") (term "0"))
         (rule "commuteUnion" (formula "14") (term "1,0"))
         (rule "methodCallParamThrow" (formula "28") (term "1"))
         (builtin "One Step Simplification" (formula "28"))
         (rule "tryCatchThrow" (formula "28") (term "1"))
         (rule "ifElseUnfold" (formula "28") (term "1") (inst "#boolv=x"))
         (rule "variableDeclaration" (formula "28") (term "1") (newnames "x_2"))
         (rule "equality_comparison_simple" (formula "28") (term "1"))
         (builtin "One Step Simplification" (formula "28"))
         (rule "replace_known_right" (formula "28") (term "0,0,1,0") (ifseqformula "23"))
         (builtin "One Step Simplification" (formula "28"))
         (rule "arrayLengthNotNegative" (formula "9") (term "1,1,0"))
         (rule "arrayLengthIsAShort" (formula "10") (term "1,1,0"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "true_left" (formula "10"))
         (rule "ifElseSplit" (formula "29"))
         (branch "if x_2 true"
            (builtin "One Step Simplification" (formula "30"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if x_2 false"
            (builtin "One Step Simplification" (formula "30"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "ifElseSplit" (formula "29"))
            (branch "if t instanceof java.lang.Throwable true"
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")))
               (rule "true_left" (formula "1"))
               (rule "variableDeclaration" (formula "29") (term "1") (newnames "e"))
               (rule "reference_type_cast" (formula "29") (term "1"))
               (branch "Normal Execution (t instanceof java.lang.Throwable)"
                  (builtin "One Step Simplification" (formula "30"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "assignment" (formula "29") (term "1"))
                  (builtin "One Step Simplification" (formula "29"))
                  (rule "emptyModality" (formula "29") (term "1"))
                  (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "24")))
                  (rule "cut" (inst "cutFormula=  array2seq2d(heapAfter_setEquality, msg1)
= array2seq2d(heap, msg1)") (userinteraction))
                  (branch "CUT: array2seq2d(heapAfter_setEquality, msg1) = array2seq2d(heap, msg1) TRUE"
                     (rule "applyEqReverse" (formula "8") (term "0") (ifseqformula "1") (userinteraction))
                     (rule "cut" (inst "cutFormula=  array2seq2d(heapAfter_setEquality, msg2)
= array2seq2d(heap, msg2)") (userinteraction))
                     (branch "CUT: array2seq2d(heapAfter_setEquality, msg2) = array2seq2d(heap, msg2) TRUE"
                        (rule "false_right" (formula "31"))
                        (rule "applyEq" (formula "27") (term "1") (ifseqformula "1"))
                        (rule "close" (formula "27") (ifseqformula "9"))
                     )
                     (branch "CUT: array2seq2d(heapAfter_setEquality, msg2) = array2seq2d(heap, msg2) FALSE"
                        (rule "array2seq2dDef" (formula "23") (term "0") (inst "u=u") (userinteraction))
                        (rule "array2seq2dDef" (formula "23") (term "1") (inst "u=u") (userinteraction))
                        (rule "false_right" (formula "31"))
                        (rule "applyEq" (formula "27") (term "0") (ifseqformula "1"))
                        (rule "applyEq" (formula "8") (term "0") (ifseqformula "1"))
                        (rule "array2seqDef" (formula "23") (term "2,0") (inst "u=u_1"))
                        (rule "array2seqDef" (formula "23") (term "2,1") (inst "u=u_1"))
                        (rule "eqSeqDef" (formula "23") (inst "iv=iv"))
                        (rule "lenOfSeqDef" (formula "23") (term "0,0"))
                        (rule "eqSymm" (formula "23") (term "0"))
                        (rule "polySimp_elimSub" (formula "23") (term "1,1,0"))
                        (rule "times_zero_2" (formula "23") (term "1,1,1,0"))
                        (rule "add_zero_right" (formula "23") (term "1,1,0"))
                        (rule "getOfSeqDef" (formula "23") (term "0,1,0,1"))
                        (rule "castDel" (formula "23") (term "2,0,1,0,1"))
                        (rule "castDel" (formula "23") (term "1,0,1,0,1"))
                        (rule "add_zero_right" (formula "23") (term "0,2,1,2,1,0,1,0,1"))
                        (rule "add_zero_right" (formula "23") (term "0,2,0,1,1,0,1,0,1"))
                        (rule "polySimp_elimSub" (formula "23") (term "1,1,0,0,1,0,1"))
                        (rule "times_zero_2" (formula "23") (term "1,1,1,0,0,1,0,1"))
                        (rule "add_zero_right" (formula "23") (term "1,1,0,0,1,0,1"))
                        (rule "lenOfSeqDef" (formula "23") (term "1,1,0,0,1"))
                        (rule "polySimp_elimSub" (formula "23") (term "1,1,1,0,0,1"))
                        (rule "mul_literals" (formula "23") (term "1,1,1,1,0,0,1"))
                        (rule "add_zero_right" (formula "23") (term "1,1,1,0,0,1"))
                        (rule "getOfSeqDef" (formula "23") (term "1,1,0,1"))
                        (rule "castDel" (formula "23") (term "1,1,1,0,1"))
                        (rule "castDel" (formula "23") (term "2,1,1,0,1"))
                        (rule "add_zero_right" (formula "23") (term "0,2,1,2,1,1,1,0,1"))
                        (rule "add_zero_right" (formula "23") (term "0,2,0,1,1,1,1,0,1"))
                        (rule "eqSymm" (formula "23") (term "1,0,1"))
                        (rule "polySimp_elimSub" (formula "23") (term "1,1,0,0,1,0,1"))
                        (rule "mul_literals" (formula "23") (term "1,1,1,0,0,1,0,1"))
                        (rule "add_zero_right" (formula "23") (term "1,1,0,0,1,0,1"))
                        (rule "eqSymm" (formula "23") (term "1,0,1"))
                        (rule "lenOfSeqDef" (formula "23") (term "0,0"))
                        (rule "polySimp_elimSub" (formula "23") (term "1,0,0"))
                        (rule "times_zero_2" (formula "23") (term "1,1,0,0"))
                        (rule "add_zero_right" (formula "23") (term "1,0,0"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "allRight" (formula "23") (inst "sk=iv_6"))
                        (rule "impRight" (formula "23"))
                        (rule "andLeft" (formula "1"))
                        (rule "replace_known_left" (formula "25") (term "0,0,1") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "1")))
                        (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1"))
                        (rule "add_zero_right" (formula "2") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0"))
                        (rule "eqSymm" (formula "25"))
                        (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1"))
                        (rule "polySimp_addComm1" (formula "25") (term "0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0"))
                        (rule "eqSymm" (formula "25"))
                        (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1"))
                        (rule "eqSymm" (formula "25"))
                        (rule "polySimp_addComm1" (formula "25") (term "0,0,0"))
                        (rule "eqSymm" (formula "25"))
                        (rule "inEqSimp_commuteLeq" (formula "1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0"))
                        (rule "eqSymm" (formula "25"))
                        (rule "polySimp_elimOne" (formula "25") (term "0,0,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "25") (term "0,0,0"))
                        (rule "eqSymm" (formula "25"))
                        (rule "pullOutSelect" (formula "25") (term "1,2,1,0") (inst "selectSK=arr_9"))
                        (rule "applyEq" (formula "26") (term "0,1,1,0") (ifseqformula "1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "32")) (ifInst ""  (formula "7")))
                        (rule "applyEqReverse" (formula "26") (term "1,2,1,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "26") (term "0,1,1,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "ifthenelse_split" (formula "25") (term "1"))
                        (branch "msg2.length >= 1 + iv_6 TRUE"
                           (rule "replace_known_left" (formula "26") (term "0,0") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "eqSeqDef" (formula "26") (inst "iv=iv"))
                           (rule "getOfSeqDef" (formula "26") (term "0,1,0,1"))
                           (rule "castDel" (formula "26") (term "2,0,1,0,1"))
                           (rule "castDel" (formula "26") (term "1,0,1,0,1"))
                           (rule "add_zero_right" (formula "26") (term "0,2,1,0,1,0,1"))
                           (rule "eqSymm" (formula "26") (term "1,0,1"))
                           (rule "polySimp_elimSub" (formula "26") (term "1,1,0,1,1,0,1"))
                           (rule "times_zero_2" (formula "26") (term "1,1,1,0,1,1,0,1"))
                           (rule "add_zero_right" (formula "26") (term "1,1,0,1,1,0,1"))
                           (rule "lenOfSeqDef" (formula "26") (term "1,0"))
                           (rule "polySimp_elimSub" (formula "26") (term "1,1,0"))
                           (rule "times_zero_2" (formula "26") (term "1,1,1,0"))
                           (rule "add_zero_right" (formula "26") (term "1,1,0"))
                           (rule "lenOfSeqDef" (formula "26") (term "1,1,0,0,1"))
                           (rule "polySimp_elimSub" (formula "26") (term "1,1,1,0,0,1"))
                           (rule "times_zero_2" (formula "26") (term "1,1,1,1,0,0,1"))
                           (rule "add_zero_right" (formula "26") (term "1,1,1,0,0,1"))
                           (rule "lenOfSeqDef" (formula "26") (term "0,0"))
                           (rule "polySimp_elimSub" (formula "26") (term "1,0,0"))
                           (rule "times_zero_2" (formula "26") (term "1,1,0,0"))
                           (rule "add_zero_right" (formula "26") (term "1,0,0"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "allRight" (formula "26") (inst "sk=iv_7"))
                           (rule "impRight" (formula "26"))
                           (rule "andLeft" (formula "1"))
                           (rule "replace_known_left" (formula "28") (term "0,0,1") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "28"))
                           (rule "getOfSeqDef" (formula "28") (term "0"))
                           (rule "castDel" (formula "28") (term "1,0"))
                           (rule "castDel" (formula "28") (term "2,0"))
                           (rule "add_zero_right" (formula "28") (term "0,2,1,0"))
                           (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "28"))
                           (rule "polySimp_elimSub" (formula "28") (term "1,0,0"))
                           (rule "times_zero_2" (formula "28") (term "1,1,0,0"))
                           (rule "add_zero_right" (formula "28") (term "1,0,0"))
                           (rule "eqSymm" (formula "28"))
                           (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1"))
                           (rule "add_zero_right" (formula "2") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "28") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,1"))
                           (rule "polySimp_addComm1" (formula "28") (term "0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0"))
                           (rule "eqSymm" (formula "28"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,1"))
                           (rule "eqSymm" (formula "28"))
                           (rule "polySimp_addComm1" (formula "28") (term "0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "28") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "0,0,1"))
                           (rule "polySimp_elimOne" (formula "28") (term "0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "28") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "0,0,0"))
                           (rule "polySimp_elimOne" (formula "28") (term "0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "pullOutSelect" (formula "28") (term "1,0") (inst "selectSK=arr_10"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "eqSymm" (formula "29"))
                           (rule "ifthenelse_split" (formula "6") (term "0"))
                           (branch "msg2.length >= 1 TRUE"
                              (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "6"))
                              (rule "leq_literals" (formula "16") (term "0"))
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "true_left" (formula "16"))
                              (rule "equalityToSeqGetAndSeqLenLeft" (formula "7") (inst "iv=iv"))
                              (rule "andLeft" (formula "7"))
                              (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                              (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "9"))
                              (builtin "One Step Simplification" (formula "7"))
                              (rule "true_left" (formula "7"))
                              (rule "applyEq" (formula "7") (term "0,0,1,0") (ifseqformula "8"))
                              (builtin "One Step Simplification" (formula "7"))
                              (rule "true_left" (formula "7"))
                              (rule "allLeft" (formula "16") (inst "t=iv_6"))
                              (rule "inEqSimp_commuteGeq" (formula "16") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "4"))
                              (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
                              (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
                              (rule "add_literals" (formula "16") (term "0,0,1"))
                              (rule "leq_literals" (formula "16") (term "0,1"))
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "5"))
                              (rule "qeq_literals" (formula "16") (term "0,1"))
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "notLeft" (formula "16"))
                              (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "28"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "ifthenelse_negated" (formula "1") (term "0"))
                              (rule "narrowSelectArrayType" (formula "29") (term "1,0") (ifseqformula "8") (ifseqformula "28"))
                              (rule "eqSymm" (formula "29"))
                              (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "17") (ifseqformula "28"))
                              (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "8") (ifseqformula "28"))
                              (rule "ifthenelse_split" (formula "3") (term "0"))
                              (branch "msg2[iv_6].length >= 1 TRUE"
                                 (rule "replace_known_left" (formula "30") (term "0,0") (ifseqformula "4"))
                                 (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "4")))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch "msg2[iv_6].<created> = TRUE TRUE"
                                    (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "2"))
                                    (builtin "One Step Simplification" (formula "31"))
                                    (rule "closeTrue" (formula "31"))
                                 )
                                 (branch "msg2[iv_6].<created> = TRUE FALSE"
                                    (rule "referencedObjectIsCreatedRight" (formula "29") (ifseqformula "30"))
                                    (rule "close" (formula "29") (ifseqformula "9"))
                                 )
                              )
                              (branch "msg2[iv_6].length >= 1 FALSE"
                                 (rule "inEqSimp_geqRight" (formula "28"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_homoInEq1" (formula "4"))
                                 (rule "mul_literals" (formula "4") (term "1,0"))
                                 (rule "add_zero_right" (formula "4") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                 (rule "mul_literals" (formula "4") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "3"))
                                 (rule "qeq_literals" (formula "4") (term "0"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "closeFalse" (formula "4"))
                              )
                           )
                           (branch "msg2.length >= 1 FALSE"
                              (rule "inEqSimp_geqRight" (formula "29"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "7"))
                              (rule "mul_literals" (formula "7") (term "1,0"))
                              (rule "add_zero_right" (formula "7") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "7"))
                              (rule "mul_literals" (formula "7") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "7") (ifseqformula "6"))
                              (rule "qeq_literals" (formula "7") (term "0"))
                              (builtin "One Step Simplification" (formula "7"))
                              (rule "closeFalse" (formula "7"))
                           )
                        )
                        (branch "msg2.length >= 1 + iv_6 FALSE"
                           (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "25")))
                           (rule "closeTrue" (formula "26"))
                        )
                     )
                  )
                  (branch "CUT: array2seq2d(heapAfter_setEquality, msg1) = array2seq2d(heap, msg1) FALSE"
                     (rule "array2seq2dDef" (formula "22") (term "0") (inst "u=u") (userinteraction))
                     (rule "array2seq2dDef" (formula "22") (term "1") (inst "u=u") (userinteraction))
                     (rule "false_right" (formula "30"))
                     (rule "array2seqDef" (formula "22") (term "2,0") (inst "u=u_1"))
                     (rule "array2seqDef" (formula "22") (term "2,1") (inst "u=u_1"))
                     (rule "eqSeqDef" (formula "22") (inst "iv=iv"))
                     (rule "lenOfSeqDef" (formula "22") (term "0,0"))
                     (rule "eqSymm" (formula "22") (term "0"))
                     (rule "polySimp_elimSub" (formula "22") (term "1,1,0"))
                     (rule "mul_literals" (formula "22") (term "1,1,1,0"))
                     (rule "add_zero_right" (formula "22") (term "1,1,0"))
                     (rule "getOfSeqDef" (formula "22") (term "0,1,0,1"))
                     (rule "castDel" (formula "22") (term "2,0,1,0,1"))
                     (rule "castDel" (formula "22") (term "1,0,1,0,1"))
                     (rule "add_zero_right" (formula "22") (term "0,2,0,1,1,0,1,0,1"))
                     (rule "add_zero_right" (formula "22") (term "0,2,1,2,1,0,1,0,1"))
                     (rule "polySimp_elimSub" (formula "22") (term "1,1,0,0,1,0,1"))
                     (rule "mul_literals" (formula "22") (term "1,1,1,0,0,1,0,1"))
                     (rule "add_zero_right" (formula "22") (term "1,1,0,0,1,0,1"))
                     (rule "lenOfSeqDef" (formula "22") (term "1,1,0,0,1"))
                     (rule "polySimp_elimSub" (formula "22") (term "1,1,1,0,0,1"))
                     (rule "times_zero_2" (formula "22") (term "1,1,1,1,0,0,1"))
                     (rule "add_zero_right" (formula "22") (term "1,1,1,0,0,1"))
                     (rule "getOfSeqDef" (formula "22") (term "1,1,0,1"))
                     (rule "castDel" (formula "22") (term "1,1,1,0,1"))
                     (rule "castDel" (formula "22") (term "2,1,1,0,1"))
                     (rule "add_zero_right" (formula "22") (term "0,2,0,1,1,1,1,0,1"))
                     (rule "add_zero_right" (formula "22") (term "0,2,1,2,1,1,1,0,1"))
                     (rule "eqSymm" (formula "22") (term "1,0,1"))
                     (rule "polySimp_elimSub" (formula "22") (term "1,1,0,0,1,0,1"))
                     (rule "times_zero_2" (formula "22") (term "1,1,1,0,0,1,0,1"))
                     (rule "add_zero_right" (formula "22") (term "1,1,0,0,1,0,1"))
                     (rule "eqSymm" (formula "22") (term "1,0,1"))
                     (rule "lenOfSeqDef" (formula "22") (term "0,0"))
                     (rule "polySimp_elimSub" (formula "22") (term "1,0,0"))
                     (rule "times_zero_2" (formula "22") (term "1,1,0,0"))
                     (rule "add_zero_right" (formula "22") (term "1,0,0"))
                     (builtin "One Step Simplification" (formula "22"))
                     (rule "allRight" (formula "22") (inst "sk=iv_4"))
                     (rule "impRight" (formula "22"))
                     (rule "andLeft" (formula "1"))
                     (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "1")))
                     (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1"))
                     (rule "add_zero_right" (formula "2") (term "0,0,1"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0"))
                     (rule "eqSymm" (formula "24"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,1"))
                     (rule "polySimp_addComm1" (formula "24") (term "0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "2") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0"))
                     (rule "eqSymm" (formula "24"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,1"))
                     (rule "eqSymm" (formula "24"))
                     (rule "polySimp_addComm1" (formula "24") (term "0,0,0"))
                     (rule "eqSymm" (formula "24"))
                     (rule "inEqSimp_commuteLeq" (formula "1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "0,0,0"))
                     (rule "eqSymm" (formula "24"))
                     (rule "polySimp_elimOne" (formula "24") (term "0,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "0,0,0"))
                     (rule "polySimp_elimOne" (formula "24") (term "0,0,0"))
                     (rule "eqSymm" (formula "24"))
                     (rule "pullOutSelect" (formula "24") (term "0,1,1,0") (inst "selectSK=arr_7"))
                     (rule "applyEq" (formula "25") (term "1,2,1,0") (ifseqformula "1"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "32")) (ifInst ""  (formula "5")))
                     (rule "applyEqReverse" (formula "25") (term "0,1,1,0") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "25") (term "1,2,1,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "ifthenelse_split" (formula "24") (term "1"))
                     (branch "msg1.length >= 1 + iv_4 TRUE"
                        (rule "replace_known_left" (formula "25") (term "0,0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "25"))
                        (rule "eqSeqDef" (formula "25") (inst "iv=iv"))
                        (rule "lenOfSeqDef" (formula "25") (term "1,1,0,0,1"))
                        (rule "polySimp_elimSub" (formula "25") (term "1,1,1,0,0,1"))
                        (rule "times_zero_2" (formula "25") (term "1,1,1,1,0,0,1"))
                        (rule "add_zero_right" (formula "25") (term "1,1,1,0,0,1"))
                        (rule "getOfSeqDef" (formula "25") (term "1,1,0,1"))
                        (rule "castDel" (formula "25") (term "1,1,1,0,1"))
                        (rule "castDel" (formula "25") (term "2,1,1,0,1"))
                        (rule "add_zero_right" (formula "25") (term "0,2,1,1,1,0,1"))
                        (rule "polySimp_elimSub" (formula "25") (term "1,1,0,1,1,0,1"))
                        (rule "times_zero_2" (formula "25") (term "1,1,1,0,1,1,0,1"))
                        (rule "add_zero_right" (formula "25") (term "1,1,0,1,1,0,1"))
                        (rule "getOfSeqDef" (formula "25") (term "0,1,0,1"))
                        (rule "castDel" (formula "25") (term "2,0,1,0,1"))
                        (rule "castDel" (formula "25") (term "1,0,1,0,1"))
                        (rule "add_zero_right" (formula "25") (term "0,2,1,0,1,0,1"))
                        (rule "polySimp_elimSub" (formula "25") (term "1,1,0,0,1,0,1"))
                        (rule "times_zero_2" (formula "25") (term "1,1,1,0,0,1,0,1"))
                        (rule "add_zero_right" (formula "25") (term "1,1,0,0,1,0,1"))
                        (rule "lenOfSeqDef" (formula "25") (term "1,0"))
                        (rule "polySimp_elimSub" (formula "25") (term "1,1,0"))
                        (rule "mul_literals" (formula "25") (term "1,1,1,0"))
                        (rule "add_zero_right" (formula "25") (term "1,1,0"))
                        (rule "lenOfSeqDef" (formula "25") (term "0,0"))
                        (rule "polySimp_elimSub" (formula "25") (term "1,0,0"))
                        (rule "times_zero_2" (formula "25") (term "1,1,0,0"))
                        (rule "add_zero_right" (formula "25") (term "1,0,0"))
                        (builtin "One Step Simplification" (formula "25"))
                        (rule "allRight" (formula "25") (inst "sk=iv_5"))
                        (rule "impRight" (formula "25"))
                        (rule "andLeft" (formula "1"))
                        (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "1")))
                        (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1"))
                        (rule "add_zero_right" (formula "2") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "27") (term "0,0"))
                        (rule "eqSymm" (formula "27"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,1"))
                        (rule "polySimp_addComm1" (formula "27") (term "0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "27") (term "0,0"))
                        (rule "eqSymm" (formula "27"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,1"))
                        (rule "eqSymm" (formula "27"))
                        (rule "polySimp_addComm1" (formula "27") (term "0,0,0"))
                        (rule "eqSymm" (formula "27"))
                        (rule "inEqSimp_commuteLeq" (formula "1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "27") (term "0,0,1"))
                        (rule "polySimp_elimOne" (formula "27") (term "0,0,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "27") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "27") (term "0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "pullOutSelect" (formula "27") (term "1,0") (inst "selectSK=arr_8"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "28"))
                        (rule "ifthenelse_split" (formula "6") (term "0"))
                        (branch "msg1.length >= 1 TRUE"
                           (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "6"))
                           (rule "leq_literals" (formula "11") (term "0"))
                           (builtin "One Step Simplification" (formula "11"))
                           (rule "true_left" (formula "11"))
                           (rule "allLeft" (formula "13") (inst "t=iv_4"))
                           (rule "inEqSimp_commuteGeq" (formula "13") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "13") (term "1") (ifseqformula "4"))
                           (rule "inEqSimp_homoInEq1" (formula "13") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1"))
                           (rule "add_literals" (formula "13") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "13") (term "1,0,0,1"))
                           (rule "add_literals" (formula "13") (term "0,0,1"))
                           (rule "leq_literals" (formula "13") (term "0,1"))
                           (builtin "One Step Simplification" (formula "13"))
                           (rule "inEqSimp_contradInEq1" (formula "13") (term "1") (ifseqformula "5"))
                           (rule "qeq_literals" (formula "13") (term "0,1"))
                           (builtin "One Step Simplification" (formula "13"))
                           (rule "notLeft" (formula "13"))
                           (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "27"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "ifthenelse_negated" (formula "1") (term "0"))
                           (rule "narrowSelectArrayType" (formula "28") (term "1,0") (ifseqformula "7") (ifseqformula "27"))
                           (rule "eqSymm" (formula "28"))
                           (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "16") (ifseqformula "27"))
                           (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "7") (ifseqformula "27"))
                           (rule "allLeft" (formula "11") (inst "t=iv_4"))
                           (rule "inEqSimp_homoInEq1" (formula "11") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "11") (term "0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,1,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0"))
                           (rule "inEqSimp_contradInEq1" (formula "11") (term "0,0") (ifseqformula "5"))
                           (rule "qeq_literals" (formula "11") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "11"))
                           (rule "inEqSimp_contradInEq1" (formula "11") (term "0") (ifseqformula "4"))
                           (rule "inEqSimp_homoInEq1" (formula "11") (term "0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "11") (term "0,0,0,0"))
                           (rule "add_literals" (formula "11") (term "0,0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,0"))
                           (rule "add_literals" (formula "11") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "11") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "11") (term "0,0,0"))
                           (rule "leq_literals" (formula "11") (term "0,0"))
                           (builtin "One Step Simplification" (formula "11"))
                           (rule "ifthenelse_split" (formula "3") (term "0"))
                           (branch "msg1[iv_4].length >= 1 TRUE"
                              (rule "replace_known_left" (formula "30") (term "0,1") (ifseqformula "4"))
                              (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "4")))
                              (rule "ifthenelse_split" (formula "1") (term "0"))
                              (branch "msg1[iv_4].<created> = TRUE TRUE"
                                 (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "closeTrue" (formula "31"))
                              )
                              (branch "msg1[iv_4].<created> = TRUE FALSE"
                                 (rule "referencedObjectIsCreatedRight" (formula "29") (ifseqformula "30"))
                                 (rule "close" (formula "29") (ifseqformula "8"))
                              )
                           )
                           (branch "msg1[iv_4].length >= 1 FALSE"
                              (rule "inEqSimp_geqRight" (formula "28"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "4"))
                              (rule "times_zero_2" (formula "4") (term "1,0"))
                              (rule "add_zero_right" (formula "4") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                              (rule "mul_literals" (formula "4") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "3"))
                              (rule "qeq_literals" (formula "4") (term "0"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "closeFalse" (formula "4"))
                           )
                        )
                        (branch "msg1.length >= 1 FALSE"
                           (rule "inEqSimp_geqRight" (formula "28"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "7"))
                           (rule "mul_literals" (formula "7") (term "1,0"))
                           (rule "add_zero_right" (formula "7") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "7"))
                           (rule "mul_literals" (formula "7") (term "1"))
                           (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "7"))
                           (rule "qeq_literals" (formula "6") (term "0"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "closeFalse" (formula "6"))
                        )
                     )
                     (branch "msg1.length >= 1 + iv_4 FALSE"
                        (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "24")))
                        (rule "closeTrue" (formula "25"))
                     )
                  )
               )
               (branch "ClassCastException (!(t instanceof java.lang.Throwable))"
                  (builtin "One Step Simplification" (formula "30"))
                  (builtin "One Step Simplification" (formula "29"))
                  (rule "closeTrue" (formula "29"))
               )
            )
            (branch "if t instanceof java.lang.Throwable false"
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")))
               (rule "closeFalse" (formula "1"))
            )
         )
      )
      (branch "Exceptional Post (Throwable)"
         (builtin "One Step Simplification" (formula "14"))
         (builtin "One Step Simplification" (formula "19"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "0,0,1,0,1,0,1") (ifseqformula "11"))
         (rule "andLeft" (formula "14"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "1,0,0") (ifseqformula "14"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "0,1,0,0") (ifseqformula "11"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "1,1,0,1,0") (ifseqformula "14"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "0,1,1,0,1,0") (ifseqformula "11"))
         (rule "andLeft" (formula "15"))
         (rule "andLeft" (formula "16"))
         (rule "andLeft" (formula "15"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "16"))
         (rule "andLeft" (formula "15"))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "17"))
         (rule "notLeft" (formula "15"))
         (rule "close" (formula "23") (ifseqformula "22"))
      )
      (branch "Pre (Throwable)"
         (builtin "One Step Simplification" (formula "17"))
         (rule "wellFormedAnonEQ" (formula "17") (ifseqformula "11"))
         (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "1"))
         (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "10")))
         (rule "closeTrue" (formula "17"))
      )
   )
   (branch "if x false"
      (builtin "One Step Simplification" (formula "1"))
      (builtin "One Step Simplification" (formula "17"))
      (builtin "Use Operation Contract" (formula "17") (newnames "heapBefore_storeMessages,exc_1,heapAfter_storeMessages,anon_heap_storeMessages") (contract "verif.selectvoting.system.core.ConservativeExtension[verif.selectvoting.system.core.ConservativeExtension::storeMessages([[B)].JML normal_behavior operation contract.0"))
      (branch "Post (storeMessages)"
         (builtin "One Step Simplification" (formula "19"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "andLeft" (formula "16"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "18"))
         (rule "variableDeclarationAssign" (formula "21") (term "1"))
         (rule "variableDeclaration" (formula "21") (term "1") (newnames "chosen"))
         (rule "pullOutSelect" (formula "18") (term "1,0") (inst "selectSK=verif_selectvoting_system_core_ConservativeExtension_messages_0"))
         (rule "simplifySelectOfAnonEQ" (formula "18") (ifseqformula "16"))
         (builtin "One Step Simplification" (formula "18"))
         (rule "elementOfSingleton" (formula "18") (term "0,0"))
         (builtin "One Step Simplification" (formula "18"))
         (rule "hideAuxiliaryEq" (formula "18"))
         (rule "replaceKnownAuxiliaryConstant_taclet010_1" (formula "18") (term "1,0"))
         (builtin "Use Operation Contract" (formula "21") (newnames "heapBefore_chooseMsg,result_1,exc_2,heapAfter_chooseMsg,anon_heap_chooseMsg") (contract "verif.selectvoting.system.core.Setup[verif.selectvoting.system.core.Setup::chooseMsg([[B,[[B)].JML normal_behavior operation contract.0"))
         (branch "Post (chooseMsg)"
            (builtin "One Step Simplification" (formula "23"))
            (builtin "One Step Simplification" (formula "20"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,0,0,1,1,0,1,1") (ifseqformula "16"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,0,0,0,1,1,0,1,1") (ifseqformula "12"))
            (rule "andLeft" (formula "20"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "1,1,0") (ifseqformula "20"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "0,1,1,0") (ifseqformula "16"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "0,0,1,1,0") (ifseqformula "12"))
            (rule "andLeft" (formula "21"))
            (rule "andLeft" (formula "21"))
            (rule "andLeft" (formula "23"))
            (rule "andLeft" (formula "23"))
            (rule "andLeft" (formula "24"))
            (rule "andLeft" (formula "25"))
            (rule "andLeft" (formula "25"))
            (rule "notLeft" (formula "26"))
            (rule "notLeft" (formula "25"))
            (rule "orRight" (formula "26"))
            (rule "orRight" (formula "26"))
            (rule "replace_known_right" (formula "22") (term "1,0,1") (ifseqformula "28"))
            (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "29")) (ifInst ""  (formula "26")) (ifInst ""  (formula "27")))
            (rule "assignment" (formula "32") (term "1"))
            (builtin "One Step Simplification" (formula "32"))
            (rule "nonNull" (formula "25") (inst "i=i"))
            (rule "greater_literals" (formula "25") (term "0,1"))
            (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "29")))
            (rule "sub_literals" (formula "25") (term "2,1,0"))
            (builtin "One Step Simplification" (formula "25"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
            (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
            (rule "pullOutSelect" (formula "23") (term "0,0") (inst "selectSK=verif_selectvoting_system_core_Setup_secret_0"))
            (rule "simplifySelectOfAnonEQ" (formula "23") (ifseqformula "20"))
            (builtin "One Step Simplification" (formula "23"))
            (rule "replaceKnownSelect_taclet0010_2" (formula "25") (term "0,0,0"))
            (rule "simplifySelectOfAnonEQ" (formula "23") (ifseqformula "16"))
            (builtin "One Step Simplification" (formula "23"))
            (rule "elementOfSingleton" (formula "23") (term "0,0"))
            (builtin "One Step Simplification" (formula "23"))
            (rule "simplifySelectOfAnonEQ" (formula "23") (ifseqformula "12"))
            (builtin "One Step Simplification" (formula "23"))
            (rule "hideAuxiliaryEq" (formula "23"))
            (rule "replaceKnownAuxiliaryConstant_taclet0010_5" (formula "23") (term "0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet0010_5" (formula "24") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "25") (term "0"))
            (rule "nnf_notAnd" (formula "25") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
            (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
            (rule "mul_literals" (formula "25") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
            (rule "commute_or_2" (formula "25") (term "0"))
            (rule "commute_or" (formula "25") (term "0,0"))
            (rule "methodCallReturn" (formula "32") (term "1"))
            (rule "assignment" (formula "32") (term "1"))
            (builtin "One Step Simplification" (formula "32"))
            (rule "methodCallEmpty" (formula "32") (term "1"))
            (rule "tryEmpty" (formula "32") (term "1"))
            (rule "emptyModality" (formula "32") (term "1"))
            (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "29")))
            (rule "andRight" (formula "32") (userinteraction))
            (branch "Case 1"
               (rule "andRight" (formula "32") (userinteraction))
               (branch
                  (rule "cut" (inst "cutFormula=  array2seq2d(heapAfter_storeMessages,
              byte[][]::select(anon_heap_storeMessages<<anonHeapFunction>>,
                               null,
                               verif.selectvoting.system.core.ConservativeExtension::$messages))
= array2seq2d(heapAfter_chooseMsg,
              byte[][]::select(heapAfter_chooseMsg,
                               null,
                               verif.selectvoting.system.core.ConservativeExtension::$messages))") (userinteraction))
                  (branch
                     (rule "cut" (inst "cutFormula=  array2seq2d(heapAfter_chooseMsg, msg1)
= array2seq2d(heapAfter_storeMessages, msg1)") (userinteraction))
                     (branch "CUT: array2seq2d(heapAfter_chooseMsg, msg1) = array2seq2d(heapAfter_storeMessages, msg1) TRUE"
                        (rule "eqSymm" (formula "1"))
                        (rule "applyEq" (formula "20") (term "1") (ifseqformula "1"))
                        (rule "applyEqRigid" (formula "20") (term "0") (ifseqformula "2"))
                        (rule "close" (formula "34") (ifseqformula "20"))
                     )
                     (branch "CUT: array2seq2d(heapAfter_chooseMsg, msg1) = array2seq2d(heapAfter_storeMessages, msg1) FALSE"
                        (rule "array2seq2dDef" (formula "27") (term "0") (inst "u=u") (userinteraction))
                        (rule "array2seq2dDef" (formula "27") (term "1") (inst "u=u") (userinteraction))
                        (rule "eqSymm" (formula "27"))
                        (rule "applyEq" (formula "1") (term "0") (ifseqformula "19"))
                        (rule "applyEq" (formula "15") (term "1") (ifseqformula "2"))
                        (builtin "One Step Simplification" (formula "15"))
                        (rule "applyEq" (formula "19") (term "1") (ifseqformula "1"))
                        (rule "equalityToSeqGetAndSeqLenRight" (formula "34") (inst "iv=iv"))
                        (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,1"))
                        (rule "mul_literals" (formula "34") (term "0,1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,1"))
                        (rule "array2seqDef" (formula "27") (term "2,1") (inst "u=u_1"))
                        (rule "eqSymm" (formula "27"))
                        (rule "eqSeqDef" (formula "27") (inst "iv=iv"))
                        (rule "getOfSeqDef" (formula "27") (term "1,1,0,1"))
                        (rule "castDel" (formula "27") (term "1,1,1,0,1"))
                        (rule "castDel" (formula "27") (term "2,1,1,0,1"))
                        (rule "add_zero_right" (formula "27") (term "0,2,1,1,1,1,0,1"))
                        (rule "polySimp_elimSub" (formula "27") (term "1,1,0,1,1,0,1"))
                        (rule "times_zero_2" (formula "27") (term "1,1,1,0,1,1,0,1"))
                        (rule "add_zero_right" (formula "27") (term "1,1,0,1,1,0,1"))
                        (rule "getOfSeqDef" (formula "27") (term "0,1,0,1"))
                        (rule "castDel" (formula "27") (term "2,0,1,0,1"))
                        (rule "castDel" (formula "27") (term "1,0,1,0,1"))
                        (rule "add_zero_right" (formula "27") (term "0,2,0,1,1,0,1,0,1"))
                        (rule "add_zero_right" (formula "27") (term "0,2,1,2,1,0,1,0,1"))
                        (rule "polySimp_elimSub" (formula "27") (term "1,1,0,0,1,0,1"))
                        (rule "mul_literals" (formula "27") (term "1,1,1,0,0,1,0,1"))
                        (rule "add_zero_right" (formula "27") (term "1,1,0,0,1,0,1"))
                        (rule "lenOfSeqDef" (formula "27") (term "1,0"))
                        (rule "polySimp_elimSub" (formula "27") (term "1,1,0"))
                        (rule "times_zero_2" (formula "27") (term "1,1,1,0"))
                        (rule "add_zero_right" (formula "27") (term "1,1,0"))
                        (rule "lenOfSeqDef" (formula "27") (term "0,0"))
                        (rule "polySimp_elimSub" (formula "27") (term "1,0,0"))
                        (rule "times_zero_2" (formula "27") (term "1,1,0,0"))
                        (rule "add_zero_right" (formula "27") (term "1,0,0"))
                        (builtin "One Step Simplification" (formula "27"))
                        (rule "allRight" (formula "27") (inst "sk=iv_18"))
                        (rule "impRight" (formula "27"))
                        (rule "andLeft" (formula "1"))
                        (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "1")))
                        (rule "lenOfSeqDef" (formula "2") (term "1"))
                        (rule "polySimp_elimSub" (formula "2") (term "1,1"))
                        (rule "mul_literals" (formula "2") (term "1,1,1"))
                        (rule "add_zero_right" (formula "2") (term "1,1"))
                        (rule "inEqSimp_ltToLeq" (formula "29") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "29") (term "0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "29") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,1"))
                        (rule "polySimp_addComm1" (formula "29") (term "0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1"))
                        (rule "add_zero_right" (formula "2") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "29") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "29") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "29") (term "0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "29") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "29") (term "0,0,1"))
                        (rule "polySimp_elimOne" (formula "29") (term "0,0,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0,0,0"))
                        (rule "array2seqDef" (formula "29") (term "1,1") (inst "u=u"))
                        (rule "pullOutSelect" (formula "3") (term "1,1") (inst "selectSK=verif_selectvoting_system_core_ConservativeExtension_messages_5"))
                        (rule "applyEq" (formula "22") (term "1,1") (ifseqformula "3"))
                        (rule "applyEq" (formula "37") (term "1,0,0,1,0,1") (ifseqformula "3"))
                        (rule "applyEq" (formula "37") (term "1,0,0,0") (ifseqformula "3"))
                        (rule "applyEq" (formula "37") (term "1,0,1,1,1,0,0,1") (ifseqformula "3"))
                        (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "24"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "replaceKnownSelect_taclet010_0" (formula "3") (term "0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet010_1" (formula "3") (term "0"))
                        (rule "applyEqReverse" (formula "4") (term "1,1") (ifseqformula "3"))
                        (rule "applyEqReverse" (formula "22") (term "1,1") (ifseqformula "3"))
                        (rule "applyEqReverse" (formula "37") (term "1,0,0,1,0,1") (ifseqformula "3"))
                        (rule "applyEqReverse" (formula "37") (term "1,0,0,0") (ifseqformula "3"))
                        (rule "applyEqReverse" (formula "37") (term "1,0,1,1,1,0,0,1") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "pullOutSelect" (formula "29") (term "0,1,1,0") (inst "selectSK=arr_37"))
                        (rule "applyEq" (formula "30") (term "1,2,1,0") (ifseqformula "1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "36")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "20"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "16"))
                        (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "7"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEq" (formula "30") (term "0,1,1,1") (ifseqformula "1"))
                        (rule "applyEq" (formula "30") (term "1,2,1,1") (ifseqformula "1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "36")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "16"))
                        (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "7"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfSingleton" (formula "1") (term "0,0"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "36")))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "36")) (ifInst ""  (formula "7")))
                        (rule "applyEqReverse" (formula "30") (term "1,2,1,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "30") (term "0,1,1,1") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "30") (term "0,1,1,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "30") (term "1,2,1,1") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "nnf_imp2or" (formula "36") (term "0,1"))
                        (rule "nnf_notAnd" (formula "36") (term "0,0,1"))
                        (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,1"))
                        (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,1"))
                        (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,1"))
                        (rule "add_zero_left" (formula "36") (term "0,0,1,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0,1"))
                        (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0,1"))
                        (rule "mul_literals" (formula "36") (term "1,0,0,0,0,0,1"))
                        (rule "add_literals" (formula "36") (term "0,0,0,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0,1"))
                        (rule "mul_literals" (formula "36") (term "1,0,0,0,1"))
                        (rule "cut_direct" (formula "27") (term "0,0"))
                        (branch "CUT: verif.selectvoting.system.core.Setup.secret = TRUE TRUE"
                           (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "replace_known_left" (formula "26") (term "0") (ifseqformula "27"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "arrayLengthNotNegative" (formula "28") (term "1,1,0"))
                           (rule "arrayLengthIsAShort" (formula "13") (term "1,1,0"))
                           (builtin "One Step Simplification" (formula "13"))
                           (rule "true_left" (formula "13"))
                           (rule "arrayLengthNotNegative" (formula "13") (term "1,1,0"))
                           (rule "arrayLengthIsAShort" (formula "30") (term "1,1,0"))
                           (builtin "One Step Simplification" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "ifthenelse_split" (formula "2") (term "0"))
                           (branch "msg1.length >= 1 TRUE"
                              (rule "replace_known_left" (formula "32") (term "0,0") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "3")))
                              (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "2"))
                              (rule "leq_literals" (formula "10") (term "0"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "true_left" (formula "10"))
                              (rule "equalityToSeqGetAndSeqLenRight" (formula "31") (inst "iv=iv"))
                              (rule "lenOfSeqDef" (formula "31") (term "0,0"))
                              (rule "eqSymm" (formula "31") (term "0"))
                              (rule "polySimp_elimSub" (formula "31") (term "1,1,0"))
                              (rule "times_zero_2" (formula "31") (term "1,1,1,0"))
                              (rule "add_zero_right" (formula "31") (term "1,1,0"))
                              (rule "getOfSeqDef" (formula "31") (term "0,1,0,1"))
                              (rule "castDel" (formula "31") (term "1,0,1,0,1"))
                              (rule "castDel" (formula "31") (term "2,0,1,0,1"))
                              (rule "add_zero_right" (formula "31") (term "0,2,1,0,1,0,1"))
                              (rule "eqSymm" (formula "31") (term "1,0,1"))
                              (rule "polySimp_elimSub" (formula "31") (term "1,1,0,1,1,0,1"))
                              (rule "mul_literals" (formula "31") (term "1,1,1,0,1,1,0,1"))
                              (rule "add_zero_right" (formula "31") (term "1,1,0,1,1,0,1"))
                              (rule "lenOfSeqDef" (formula "31") (term "1,1,0,0,1"))
                              (rule "polySimp_elimSub" (formula "31") (term "1,1,1,0,0,1"))
                              (rule "times_zero_2" (formula "31") (term "1,1,1,1,0,0,1"))
                              (rule "add_zero_right" (formula "31") (term "1,1,1,0,0,1"))
                              (rule "lenOfSeqDef" (formula "31") (term "0,0"))
                              (rule "polySimp_elimSub" (formula "31") (term "1,0,0"))
                              (rule "times_zero_2" (formula "31") (term "1,1,0,0"))
                              (rule "add_zero_right" (formula "31") (term "1,0,0"))
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "allRight" (formula "31") (inst "sk=iv_20"))
                              (rule "impRight" (formula "31"))
                              (rule "andLeft" (formula "1"))
                              (rule "replace_known_left" (formula "33") (term "0,0,1") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "33"))
                              (rule "getOfSeqDef" (formula "33") (term "0"))
                              (rule "castDel" (formula "33") (term "2,0"))
                              (rule "castDel" (formula "33") (term "1,0"))
                              (rule "add_zero_right" (formula "33") (term "0,2,1,0"))
                              (rule "replace_known_left" (formula "33") (term "0,0,0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "33"))
                              (rule "polySimp_elimSub" (formula "33") (term "1,0,0"))
                              (rule "times_zero_2" (formula "33") (term "1,1,0,0"))
                              (rule "add_zero_right" (formula "33") (term "1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "2") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "33") (term "0,1"))
                              (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,0,1"))
                              (rule "polySimp_addComm1" (formula "33") (term "0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "33") (term "0,0"))
                              (rule "eqSymm" (formula "33"))
                              (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,0,1"))
                              (rule "eqSymm" (formula "33"))
                              (rule "polySimp_addComm1" (formula "33") (term "0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,1,0"))
                              (rule "add_zero_right" (formula "2") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "33") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "33") (term "0,0,1"))
                              (rule "polySimp_elimOne" (formula "33") (term "0,0,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "33") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "33") (term "0,0,0"))
                              (rule "polySimp_elimOne" (formula "33") (term "0,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0,0,0"))
                              (rule "pullOutSelect" (formula "33") (term "1,1") (inst "selectSK=arr_41"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "23"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "19"))
                              (rule "pullOutSelect" (formula "34") (term "1,0") (inst "selectSK=arr_42"))
                              (rule "applyEq" (formula "2") (term "2,0") (ifseqformula "1"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "20"))
                              (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=arr_43"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "lenNonNegative" (formula "43") (term "1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "1"))
                              (rule "equalityToSeqGetAndSeqLenLeft" (formula "10") (inst "iv=iv"))
                              (rule "andLeft" (formula "10"))
                              (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                              (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "12"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "true_left" (formula "10"))
                              (rule "applyEq" (formula "10") (term "0,0,1,0,0,1,0,0") (ifseqformula "11"))
                              (rule "applyEq" (formula "10") (term "0,0,1,0") (ifseqformula "11"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "true_left" (formula "10"))
                              (rule "equalityToSeqGetAndSeqLenLeft" (formula "28") (inst "iv=iv"))
                              (rule "andLeft" (formula "28"))
                              (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
                              (rule "applyEqRigid" (formula "29") (term "0,0,1,0,0,1,0,0") (ifseqformula "30"))
                              (rule "applyEqRigid" (formula "28") (term "0,0") (ifseqformula "30"))
                              (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "applyEq" (formula "28") (term "0,0,1,0") (ifseqformula "29"))
                              (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "lenNonNegative" (formula "44") (term "0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "1"))
                              (rule "equalityToSeqGetAndSeqLenLeft" (formula "34") (inst "iv=iv"))
                              (rule "andLeft" (formula "34"))
                              (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0"))
                              (rule "applyEq" (formula "35") (term "0,0,1,0") (ifseqformula "36"))
                              (builtin "One Step Simplification" (formula "35"))
                              (rule "true_left" (formula "35"))
                              (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "35"))
                              (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "29") (term "1,0") (ifseqformula "26"))
                              (rule "ifthenelse_split" (formula "7") (term "0"))
                              (branch "msg1[iv_18].length >= 1 TRUE"
                                 (rule "replace_known_left" (formula "40") (term "0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "8")))
                                 (rule "allLeft" (formula "20") (inst "t=iv_18"))
                                 (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "20") (term "1,0") (ifseqformula "9"))
                                 (rule "qeq_literals" (formula "20") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "11"))
                                 (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                                 (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "20") (term "0,0,1"))
                                 (rule "leq_literals" (formula "20") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "notLeft" (formula "20"))
                                 (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "40"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "40"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "40"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "ifthenelse_negated" (formula "4") (term "0"))
                                 (rule "ifthenelse_negated" (formula "5") (term "0"))
                                 (rule "ifthenelse_negated" (formula "3") (term "0"))
                                 (rule "narrowSelectArrayType" (formula "4") (term "2,0") (ifseqformula "27") (ifseqformula "40"))
                                 (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "23") (ifseqformula "40"))
                                 (rule "narrowSelectArrayType" (formula "5") (term "2,0") (ifseqformula "32") (ifseqformula "40"))
                                 (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "14") (ifseqformula "40"))
                                 (rule "allLeft" (formula "18") (inst "t=iv_18"))
                                 (rule "inEqSimp_homoInEq1" (formula "18") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "18") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "18") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "18") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "18") (term "0,0") (ifseqformula "9"))
                                 (rule "qeq_literals" (formula "18") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "inEqSimp_contradInEq1" (formula "18") (term "0") (ifseqformula "11"))
                                 (rule "inEqSimp_homoInEq1" (formula "18") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "18") (term "0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "18") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "18") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "18") (term "0,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,0"))
                                 (rule "add_literals" (formula "18") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "18") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "18") (term "0,0,0"))
                                 (rule "leq_literals" (formula "18") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "ifthenelse_split" (formula "3") (term "0"))
                                 (branch "msg1[iv_18].<created> = TRUE TRUE"
                                    (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                    (rule "hideAuxiliaryEq" (formula "4"))
                                    (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "applyEqReverse" (formula "42") (term "0") (ifseqformula "4"))
                                    (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                    (rule "hideAuxiliaryEq" (formula "4"))
                                    (rule "eqSymm" (formula "41"))
                                    (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "applyEqReverse" (formula "41") (term "0") (ifseqformula "4"))
                                    (builtin "One Step Simplification" (formula "41"))
                                    (rule "closeTrue" (formula "41"))
                                 )
                                 (branch "msg1[iv_18].<created> = TRUE FALSE"
                                    (rule "referencedObjectIsCreatedRight" (formula "41") (ifseqformula "42"))
                                    (rule "close" (formula "41") (ifseqformula "14"))
                                 )
                              )
                              (branch "msg1[iv_18].length >= 1 FALSE"
                                 (rule "inEqSimp_geqRight" (formula "39"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_homoInEq1" (formula "8"))
                                 (rule "times_zero_2" (formula "8") (term "1,0"))
                                 (rule "add_zero_right" (formula "8") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "8"))
                                 (rule "mul_literals" (formula "8") (term "1"))
                                 (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "8"))
                                 (rule "qeq_literals" (formula "7") (term "0"))
                                 (builtin "One Step Simplification" (formula "7"))
                                 (rule "closeFalse" (formula "7"))
                              )
                           )
                           (branch "msg1.length >= 1 FALSE"
                              (rule "inEqSimp_geqRight" (formula "31"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "3"))
                              (rule "times_zero_2" (formula "3") (term "1,0"))
                              (rule "add_zero_right" (formula "3") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                              (rule "mul_literals" (formula "3") (term "1"))
                              (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "3"))
                              (rule "qeq_literals" (formula "2") (term "0"))
                              (builtin "One Step Simplification" (formula "2"))
                              (rule "closeFalse" (formula "2"))
                           )
                        )
                        (branch "CUT: verif.selectvoting.system.core.Setup.secret = TRUE FALSE"
                           (builtin "One Step Simplification" (formula "27"))
                           (rule "replace_known_right" (formula "26") (term "0") (ifseqformula "29"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "true_left" (formula "26"))
                           (rule "arrayLengthNotNegative" (formula "27") (term "1,1,0"))
                           (rule "arrayLengthIsAShort" (formula "13") (term "1,1,0"))
                           (builtin "One Step Simplification" (formula "13"))
                           (rule "true_left" (formula "13"))
                           (rule "arrayLengthNotNegative" (formula "13") (term "1,1,0"))
                           (rule "arrayLengthIsAShort" (formula "29") (term "1,1,0"))
                           (builtin "One Step Simplification" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "ifthenelse_split" (formula "2") (term "0"))
                           (branch "msg1.length >= 1 TRUE"
                              (rule "replace_known_left" (formula "32") (term "0,0") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "3")))
                              (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "2"))
                              (rule "leq_literals" (formula "10") (term "0"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "true_left" (formula "10"))
                              (rule "eqSeqDef" (formula "31") (inst "iv=iv"))
                              (rule "getOfSeqDef" (formula "31") (term "0,1,0,1"))
                              (rule "castDel" (formula "31") (term "1,0,1,0,1"))
                              (rule "castDel" (formula "31") (term "2,0,1,0,1"))
                              (rule "add_zero_right" (formula "31") (term "0,2,1,0,1,0,1"))
                              (rule "eqSymm" (formula "31") (term "1,0,1"))
                              (rule "polySimp_elimSub" (formula "31") (term "1,1,0,1,1,0,1"))
                              (rule "mul_literals" (formula "31") (term "1,1,1,0,1,1,0,1"))
                              (rule "add_zero_right" (formula "31") (term "1,1,0,1,1,0,1"))
                              (rule "lenOfSeqDef" (formula "31") (term "1,0"))
                              (rule "polySimp_elimSub" (formula "31") (term "1,1,0"))
                              (rule "times_zero_2" (formula "31") (term "1,1,1,0"))
                              (rule "add_zero_right" (formula "31") (term "1,1,0"))
                              (rule "lenOfSeqDef" (formula "31") (term "1,1,0,0,1"))
                              (rule "polySimp_elimSub" (formula "31") (term "1,1,1,0,0,1"))
                              (rule "times_zero_2" (formula "31") (term "1,1,1,1,0,0,1"))
                              (rule "add_zero_right" (formula "31") (term "1,1,1,0,0,1"))
                              (rule "lenOfSeqDef" (formula "31") (term "0,0"))
                              (rule "polySimp_elimSub" (formula "31") (term "1,0,0"))
                              (rule "times_zero_2" (formula "31") (term "1,1,0,0"))
                              (rule "add_zero_right" (formula "31") (term "1,0,0"))
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "allRight" (formula "31") (inst "sk=iv_19"))
                              (rule "impRight" (formula "31"))
                              (rule "andLeft" (formula "1"))
                              (rule "replace_known_left" (formula "33") (term "0,0,1") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "33"))
                              (rule "getOfSeqDef" (formula "33") (term "0"))
                              (rule "castDel" (formula "33") (term "1,0"))
                              (rule "castDel" (formula "33") (term "2,0"))
                              (rule "add_zero_right" (formula "33") (term "0,2,1,0"))
                              (rule "replace_known_left" (formula "33") (term "0,0,0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "33"))
                              (rule "polySimp_elimSub" (formula "33") (term "1,0,0"))
                              (rule "times_zero_2" (formula "33") (term "1,1,0,0"))
                              (rule "add_zero_right" (formula "33") (term "1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1"))
                              (rule "add_zero_right" (formula "2") (term "0,0,1"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "33") (term "0,1"))
                              (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,0,1"))
                              (rule "polySimp_addComm1" (formula "33") (term "0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "33") (term "0,0"))
                              (rule "eqSymm" (formula "33"))
                              (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,0,1"))
                              (rule "eqSymm" (formula "33"))
                              (rule "polySimp_addComm1" (formula "33") (term "0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "2") (term "0"))
                              (rule "inEqSimp_commuteLeq" (formula "1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "33") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "33") (term "0,0,1"))
                              (rule "polySimp_elimOne" (formula "33") (term "0,0,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "33") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "33") (term "0,0,0"))
                              (rule "polySimp_elimOne" (formula "33") (term "0,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "pullOutSelect" (formula "33") (term "1,0") (inst "selectSK=arr_38"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "19"))
                              (rule "eqSymm" (formula "34"))
                              (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "pullOutSelect" (formula "34") (term "1,0") (inst "selectSK=arr_39"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "replaceKnownSelect_taclet0110000010_12" (formula "1") (term "2,0"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "24"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "20"))
                              (rule "pullOutSelect" (formula "2") (term "2,0") (inst "selectSK=arr_40"))
                              (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "21"))
                              (builtin "One Step Simplification" (formula "2"))
                              (rule "lenNonNegative" (formula "43") (term "1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "1"))
                              (rule "equalityToSeqGetAndSeqLenLeft" (formula "10") (inst "iv=iv"))
                              (rule "andLeft" (formula "10"))
                              (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                              (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "12"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "true_left" (formula "10"))
                              (rule "applyEq" (formula "10") (term "0,0,1,0,0,1,0,0") (ifseqformula "11"))
                              (rule "applyEq" (formula "10") (term "0,0,1,0") (ifseqformula "11"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "true_left" (formula "10"))
                              (rule "equalityToSeqGetAndSeqLenLeft" (formula "28") (inst "iv=iv"))
                              (rule "andLeft" (formula "28"))
                              (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
                              (rule "applyEqRigid" (formula "28") (term "0,0") (ifseqformula "30"))
                              (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "applyEq" (formula "28") (term "0,0,1,0,0,1,0,0") (ifseqformula "29"))
                              (rule "applyEqRigid" (formula "28") (term "0,0,1,0") (ifseqformula "29"))
                              (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "lenNonNegative" (formula "44") (term "0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "1"))
                              (rule "equalityToSeqGetAndSeqLenLeft" (formula "34") (inst "iv=iv"))
                              (rule "andLeft" (formula "34"))
                              (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0"))
                              (rule "applyEq" (formula "35") (term "0,0,1,0,0,1,0,0") (ifseqformula "36"))
                              (rule "applyEq" (formula "35") (term "0,0,1,0") (ifseqformula "36"))
                              (builtin "One Step Simplification" (formula "35"))
                              (rule "true_left" (formula "35"))
                              (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "35"))
                              (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "29") (term "1,0") (ifseqformula "26"))
                              (rule "ifthenelse_split" (formula "7") (term "0"))
                              (branch "msg1[iv_18].length >= 1 TRUE"
                                 (rule "replace_known_left" (formula "40") (term "0,1") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "8")))
                                 (rule "allLeft" (formula "18") (inst "t=iv_18"))
                                 (rule "inEqSimp_homoInEq1" (formula "18") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "18") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "18") (term "1,1,0"))
                                 (rule "mul_literals" (formula "18") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "18") (term "0,0") (ifseqformula "9"))
                                 (rule "qeq_literals" (formula "18") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "inEqSimp_contradInEq1" (formula "18") (term "0") (ifseqformula "11"))
                                 (rule "inEqSimp_homoInEq1" (formula "18") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "18") (term "0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "18") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "18") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "18") (term "0,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,0"))
                                 (rule "add_literals" (formula "18") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "18") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "18") (term "0,0,0"))
                                 (rule "leq_literals" (formula "18") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "allLeft" (formula "21") (inst "t=iv_18"))
                                 (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "11"))
                                 (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
                                 (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "21") (term "0,0,1"))
                                 (rule "leq_literals" (formula "21") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "21"))
                                 (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "9"))
                                 (rule "qeq_literals" (formula "21") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "21"))
                                 (rule "notLeft" (formula "21"))
                                 (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "40"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "40"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "40"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "ifthenelse_negated" (formula "5") (term "0"))
                                 (rule "ifthenelse_negated" (formula "4") (term "0"))
                                 (rule "ifthenelse_negated" (formula "3") (term "0"))
                                 (rule "narrowSelectArrayType" (formula "5") (term "2,0") (ifseqformula "28") (ifseqformula "40"))
                                 (rule "narrowSelectArrayType" (formula "4") (term "2,0") (ifseqformula "24") (ifseqformula "40"))
                                 (rule "narrowSelectArrayType" (formula "4") (term "1,0") (ifseqformula "14") (ifseqformula "40"))
                                 (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "33") (ifseqformula "40"))
                                 (rule "ifthenelse_split" (formula "4") (term "0"))
                                 (branch "msg1[iv_18].<created> = TRUE TRUE"
                                    (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                    (rule "hideAuxiliaryEq" (formula "5"))
                                    (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "4"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "applyEqReverse" (formula "42") (term "0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "42"))
                                    (rule "closeTrue" (formula "42"))
                                 )
                                 (branch "msg1[iv_18].<created> = TRUE FALSE"
                                    (rule "referencedObjectIsCreatedRight" (formula "40") (ifseqformula "41"))
                                    (rule "close" (formula "40") (ifseqformula "14"))
                                 )
                              )
                              (branch "msg1[iv_18].length >= 1 FALSE"
                                 (rule "inEqSimp_geqRight" (formula "38"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_homoInEq1" (formula "8"))
                                 (rule "mul_literals" (formula "8") (term "1,0"))
                                 (rule "add_zero_right" (formula "8") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "8"))
                                 (rule "mul_literals" (formula "8") (term "1"))
                                 (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "8"))
                                 (rule "qeq_literals" (formula "7") (term "0"))
                                 (builtin "One Step Simplification" (formula "7"))
                                 (rule "closeFalse" (formula "7"))
                              )
                           )
                           (branch "msg1.length >= 1 FALSE"
                              (rule "inEqSimp_geqRight" (formula "30"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "3"))
                              (rule "times_zero_2" (formula "3") (term "1,0"))
                              (rule "add_zero_right" (formula "3") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                              (rule "mul_literals" (formula "3") (term "1"))
                              (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "3"))
                              (rule "qeq_literals" (formula "2") (term "0"))
                              (builtin "One Step Simplification" (formula "2"))
                              (rule "closeFalse" (formula "2"))
                           )
                        )
                     )
                  )
                  (branch "CUT: array2seq2d(heapAfter_storeMessages, verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>) = array2seq2d(heapAfter_chooseMsg, verif.selectvoting.system.core.ConservativeExtension.messages@heapAfter_chooseMsg) FALSE"
                     (rule "array2seq2dDef" (formula "26") (term "0") (inst "u=u") (userinteraction))
                     (rule "array2seq2dDef" (formula "26") (term "1") (inst "u=u") (userinteraction))
                     (rule "eqSymm" (formula "26"))
                     (rule "applyEq" (formula "14") (term "1") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "equalityToSeqGetAndSeqLenRight" (formula "33") (inst "iv=iv"))
                     (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,1"))
                     (rule "mul_literals" (formula "33") (term "0,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0,1"))
                     (rule "array2seqDef" (formula "26") (term "2,1") (inst "u=u_1"))
                     (rule "eqSymm" (formula "26"))
                     (rule "equalityToSeqGetAndSeqLenRight" (formula "26") (inst "iv=iv"))
                     (rule "lenOfSeqDef" (formula "26") (term "1,1,0,0,1"))
                     (rule "polySimp_elimSub" (formula "26") (term "1,1,1,0,0,1"))
                     (rule "times_zero_2" (formula "26") (term "1,1,1,1,0,0,1"))
                     (rule "add_zero_right" (formula "26") (term "1,1,1,0,0,1"))
                     (rule "lenOfSeqDef" (formula "26") (term "0,0"))
                     (rule "eqSymm" (formula "26") (term "0"))
                     (rule "polySimp_elimSub" (formula "26") (term "1,1,0"))
                     (rule "times_zero_2" (formula "26") (term "1,1,1,0"))
                     (rule "add_zero_right" (formula "26") (term "1,1,0"))
                     (rule "getOfSeqDef" (formula "26") (term "0,1,0,1"))
                     (rule "castDel" (formula "26") (term "2,0,1,0,1"))
                     (rule "castDel" (formula "26") (term "1,0,1,0,1"))
                     (rule "add_zero_right" (formula "26") (term "0,2,1,2,1,0,1,0,1"))
                     (rule "add_zero_right" (formula "26") (term "0,2,0,1,1,0,1,0,1"))
                     (rule "polySimp_elimSub" (formula "26") (term "1,1,0,0,1,0,1"))
                     (rule "times_zero_2" (formula "26") (term "1,1,1,0,0,1,0,1"))
                     (rule "add_zero_right" (formula "26") (term "1,1,0,0,1,0,1"))
                     (rule "getOfSeqDef" (formula "26") (term "1,1,0,1"))
                     (rule "castDel" (formula "26") (term "2,1,1,0,1"))
                     (rule "castDel" (formula "26") (term "1,1,1,0,1"))
                     (rule "add_zero_right" (formula "26") (term "0,2,1,1,1,1,0,1"))
                     (rule "polySimp_elimSub" (formula "26") (term "1,1,0,1,1,0,1"))
                     (rule "times_zero_2" (formula "26") (term "1,1,1,0,1,1,0,1"))
                     (rule "add_zero_right" (formula "26") (term "1,1,0,1,1,0,1"))
                     (rule "lenOfSeqDef" (formula "26") (term "0,0"))
                     (rule "polySimp_elimSub" (formula "26") (term "1,0,0"))
                     (rule "times_zero_2" (formula "26") (term "1,1,0,0"))
                     (rule "add_zero_right" (formula "26") (term "1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "26") (term "0,1,1,0,0,1"))
                     (rule "add_zero_right" (formula "26") (term "0,0,1,1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,1,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "26") (term "0,1,0"))
                     (rule "add_zero_right" (formula "26") (term "0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,1,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,1,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,1,1,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "26") (term "0,0,0"))
                     (rule "add_zero_right" (formula "26") (term "0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,1,1,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "26") (term "0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1,0,1"))
                     (rule "mul_literals" (formula "26") (term "0,1,1,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,1,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,1,1,0,1"))
                     (rule "polySimp_rightDist" (formula "26") (term "1,1,0,1,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,1,1,0,1"))
                     (rule "mul_literals" (formula "26") (term "0,1,1,0,1,1,0,1"))
                     (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,1,1,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "26") (term "0,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,0,1,0,0,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "0,0,0,1,0,0,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "26") (term "0,0,0,1,0,0,1,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1"))
                     (rule "mul_literals" (formula "26") (term "0,1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,1"))
                     (rule "array2seqDef" (formula "26") (term "1,1,1,0,1") (inst "u=u"))
                     (rule "pullOutSelect" (formula "33") (term "1,0,0,1,0,1") (inst "selectSK=verif_selectvoting_system_core_ConservativeExtension_messages_3"))
                     (rule "applyEq" (formula "27") (term "1,1,2,1,1,1,0,1") (ifseqformula "1"))
                     (rule "applyEq" (formula "34") (term "1,0,1,1,1,0,0,1") (ifseqformula "1"))
                     (rule "applyEq" (formula "27") (term "0,1,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "27") (term "1,0,1,1,1,1,0,1") (ifseqformula "1"))
                     (rule "applyEq" (formula "27") (term "0,0,0,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "34") (term "1,0,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "27") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "1"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "replaceKnownSelect_taclet010_0" (formula "1") (term "0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet010_1" (formula "1") (term "0"))
                     (rule "applyEqReverse" (formula "34") (term "1,0,0,1,0,1") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "27") (term "1,1,2,1,1,1,0,1") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "34") (term "1,0,1,1,1,0,0,1") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "27") (term "0,1,0,0") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "27") (term "1,0,1,1,1,1,0,1") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "27") (term "0,0,0,0,0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "27"))
                     (rule "allRight" (formula "27") (inst "sk=iv_10"))
                     (rule "impRight" (formula "27"))
                     (rule "andLeft" (formula "1"))
                     (rule "applyEqReverse" (formula "36") (term "1,0,0,0") (ifseqformula "3"))
                     (rule "applyEqReverse" (formula "29") (term "0,1,1,1,0,1") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "replace_known_left" (formula "28") (term "0,0,1") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "1")))
                     (rule "inEqSimp_homoInEq0" (formula "2"))
                     (rule "polySimp_addComm1" (formula "2") (term "0"))
                     (rule "inEqSimp_homoInEq0" (formula "28") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "28") (term "0,0,0"))
                     (rule "inEqSimp_homoInEq0" (formula "28") (term "0,1"))
                     (rule "polySimp_addComm1" (formula "28") (term "0,0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1"))
                     (rule "mul_literals" (formula "2") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "28") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "28") (term "1,0,0"))
                     (rule "mul_literals" (formula "28") (term "0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "28") (term "1,0,1"))
                     (rule "polySimp_rightDist" (formula "28") (term "1,0,1"))
                     (rule "mul_literals" (formula "28") (term "0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,1"))
                     (rule "polySimp_elimOne" (formula "28") (term "1,1,0,1"))
                     (rule "pullOutSelect" (formula "28") (term "0,1,1,1") (inst "selectSK=arr_16"))
                     (rule "applyEq" (formula "29") (term "1,2,1,1") (ifseqformula "1"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "19"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "15"))
                     (rule "pullOutSelect" (formula "29") (term "0,1,1,0") (inst "selectSK=arr_17"))
                     (rule "applyEq" (formula "2") (term "2,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "30") (term "1,2,1,0") (ifseqformula "1"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "16"))
                     (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=arr_18"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "nnf_imp2or" (formula "38") (term "0,1"))
                     (rule "nnf_notAnd" (formula "38") (term "0,0,1"))
                     (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,1"))
                     (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,1"))
                     (rule "add_literals" (formula "38") (term "0,0,0,1,0,0,1"))
                     (rule "add_zero_left" (formula "38") (term "0,0,1,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0,1"))
                     (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0,1"))
                     (rule "times_zero_1" (formula "38") (term "1,0,0,0,0,0,1"))
                     (rule "add_zero_right" (formula "38") (term "0,0,0,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0,1"))
                     (rule "mul_literals" (formula "38") (term "1,0,0,0,1"))
                     (rule "cut_direct" (formula "28") (term "0"))
                     (branch "CUT: verif.selectvoting.system.core.Setup.secret = TRUE TRUE"
                        (builtin "One Step Simplification" (formula "29"))
                        (rule "replace_known_left" (formula "30") (term "0,0") (ifseqformula "28"))
                        (builtin "One Step Simplification" (formula "30"))
                        (rule "true_left" (formula "30"))
                        (rule "arrayLengthIsAShort" (formula "15") (term "1,1,0"))
                        (builtin "One Step Simplification" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "arrayLengthNotNegative" (formula "30") (term "1,1,0"))
                        (rule "equalityToSeqGetAndSeqLenLeft" (formula "23") (inst "iv=iv"))
                        (rule "andLeft" (formula "23"))
                        (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                        (rule "applyEq" (formula "24") (term "0,0,1,0,0,1,0,0") (ifseqformula "25"))
                        (rule "applyEq" (formula "23") (term "0,0") (ifseqformula "25"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "true_left" (formula "23"))
                        (rule "applyEq" (formula "23") (term "0,0,1,0") (ifseqformula "24"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "true_left" (formula "23"))
                        (rule "arrayLengthNotNegative" (formula "15") (term "1,1,0"))
                        (rule "arrayLengthIsAShort" (formula "32") (term "1,1,0"))
                        (builtin "One Step Simplification" (formula "32"))
                        (rule "true_left" (formula "32"))
                        (rule "lenNonNegative" (formula "40") (term "1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "1"))
                        (rule "ifthenelse_split" (formula "6") (term "0"))
                        (branch " verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>.length >= 1 TRUE"
                           (rule "replace_known_left" (formula "35") (term "0,0") (ifseqformula "7"))
                           (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "7")))
                           (rule "eqSeqDef" (formula "35") (inst "iv=iv"))
                           (rule "lenOfSeqDef" (formula "35") (term "0,0"))
                           (rule "eqSymm" (formula "35") (term "0"))
                           (rule "polySimp_elimSub" (formula "35") (term "1,1,0"))
                           (rule "mul_literals" (formula "35") (term "1,1,1,0"))
                           (rule "add_zero_right" (formula "35") (term "1,1,0"))
                           (rule "getOfSeqDef" (formula "35") (term "1,1,0,1"))
                           (rule "castDel" (formula "35") (term "1,1,1,0,1"))
                           (rule "castDel" (formula "35") (term "2,1,1,0,1"))
                           (rule "add_zero_right" (formula "35") (term "0,2,1,1,1,0,1"))
                           (rule "polySimp_elimSub" (formula "35") (term "1,1,0,1,1,0,1"))
                           (rule "times_zero_2" (formula "35") (term "1,1,1,0,1,1,0,1"))
                           (rule "add_zero_right" (formula "35") (term "1,1,0,1,1,0,1"))
                           (rule "lenOfSeqDef" (formula "35") (term "1,1,0,0,1"))
                           (rule "polySimp_elimSub" (formula "35") (term "1,1,1,0,0,1"))
                           (rule "times_zero_2" (formula "35") (term "1,1,1,1,0,0,1"))
                           (rule "add_zero_right" (formula "35") (term "1,1,1,0,0,1"))
                           (rule "getOfSeqDef" (formula "35") (term "0,1,0,1"))
                           (rule "castDel" (formula "35") (term "1,0,1,0,1"))
                           (rule "castDel" (formula "35") (term "2,0,1,0,1"))
                           (rule "add_zero_right" (formula "35") (term "0,2,1,0,1,0,1"))
                           (rule "polySimp_elimSub" (formula "35") (term "1,1,0,0,1,0,1"))
                           (rule "mul_literals" (formula "35") (term "1,1,1,0,0,1,0,1"))
                           (rule "add_zero_right" (formula "35") (term "1,1,0,0,1,0,1"))
                           (rule "lenOfSeqDef" (formula "35") (term "0,0"))
                           (rule "eqSymm" (formula "35") (term "0"))
                           (rule "polySimp_elimSub" (formula "35") (term "1,1,0"))
                           (rule "times_zero_2" (formula "35") (term "1,1,1,0"))
                           (rule "add_zero_right" (formula "35") (term "1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,1,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,1,1,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "35") (term "0,1,1,0,0,1"))
                           (rule "add_zero_right" (formula "35") (term "0,0,1,1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0,1,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "35") (term "0,0,0"))
                           (rule "add_zero_right" (formula "35") (term "0,0,0,0"))
                           (rule "eqSymm" (formula "35") (term "0"))
                           (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "35") (term "0,0,0"))
                           (rule "add_zero_right" (formula "35") (term "0,0,0,0"))
                           (rule "eqSymm" (formula "35") (term "0"))
                           (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,1,1,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,1,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,1,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,1,1,0,1"))
                           (rule "polySimp_rightDist" (formula "35") (term "1,1,0,1,1,0,1"))
                           (rule "mul_literals" (formula "35") (term "0,1,1,0,1,1,0,1"))
                           (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,1,1,0,1"))
                           (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,1,1,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1,0,1"))
                           (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1,0,1"))
                           (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1,0,1"))
                           (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1,0,1"))
                           (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1"))
                           (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "35") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "35") (term "0,0,0,0"))
                           (rule "eqSymm" (formula "35") (term "0"))
                           (rule "polySimp_elimOne" (formula "35") (term "0,0,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "35") (term "0,1,1,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "35") (term "0,0,1,1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "35") (term "0,0,1,1,1,0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "35") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "35") (term "0,0,0,0"))
                           (rule "eqSymm" (formula "35") (term "0"))
                           (rule "polySimp_elimOne" (formula "35") (term "0,0,1,0"))
                           (rule "nnf_imp2or" (formula "35") (term "0,1"))
                           (rule "nnf_notAnd" (formula "35") (term "0,0,1"))
                           (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1"))
                           (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1"))
                           (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,1"))
                           (rule "add_zero_left" (formula "35") (term "0,0,1,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,1"))
                           (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,1"))
                           (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0,1"))
                           (rule "add_zero_right" (formula "35") (term "0,0,0,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,1"))
                           (rule "mul_literals" (formula "35") (term "1,0,0,0,1"))
                           (rule "ifthenelse_split" (formula "2") (term "0"))
                           (branch " ! verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>> = null & ! (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>).<created> = TRUE TRUE"
                              (rule "andLeft" (formula "2"))
                              (rule "notLeft" (formula "2"))
                              (rule "notLeft" (formula "2"))
                              (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "replace_known_right" (formula "3") (term "0,0,0,1,0,0") (ifseqformula "34"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "35")))
                              (rule "replace_known_right" (formula "2") (term "0,0,1,0,0") (ifseqformula "34"))
                              (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "35")))
                              (rule "ifthenelse_negated" (formula "3") (term "0"))
                              (rule "ifthenelse_negated" (formula "2") (term "0"))
                              (rule "lenNonNegative" (formula "43") (term "0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "1"))
                              (rule "equalityToSeqGetAndSeqLenLeft" (formula "32") (inst "iv=iv"))
                              (rule "andLeft" (formula "32"))
                              (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0"))
                              (rule "applyEq" (formula "33") (term "0,0,1,0,0,1,0,0") (ifseqformula "34"))
                              (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "34"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "true_left" (formula "32"))
                              (rule "applyEq" (formula "32") (term "0,0,1,0") (ifseqformula "33"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "true_left" (formula "32"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "26") (term "1,0") (ifseqformula "23"))
                              (rule "replace_known_right" (formula "26") (term "0") (ifseqformula "37"))
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "26"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "applyEqReverse" (formula "38") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "4"))
                              (rule "applyEqReverse" (formula "38") (term "0,1,1,0") (ifseqformula "4"))
                              (rule "applyEqReverse" (formula "38") (term "1,1,1,1,0,1") (ifseqformula "4"))
                              (rule "applyEqReverse" (formula "38") (term "0,0,0,1,0") (ifseqformula "4"))
                              (builtin "One Step Simplification" (formula "38"))
                              (rule "allRight" (formula "38") (inst "sk=iv_15"))
                              (rule "orRight" (formula "38"))
                              (rule "orRight" (formula "38"))
                              (rule "hideAuxiliaryEq" (formula "4"))
                              (rule "inEqSimp_geqRight" (formula "38"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_leqRight" (formula "38"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "1")))
                              (rule "inEqSimp_homoInEq0" (formula "39") (term "0,0"))
                              (rule "eqSymm" (formula "39"))
                              (rule "polySimp_addComm1" (formula "39") (term "0,0,1"))
                              (rule "inEqSimp_homoInEq0" (formula "39") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "39") (term "0,0,0"))
                              (rule "eqSymm" (formula "39"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "0,0"))
                              (rule "eqSymm" (formula "39"))
                              (rule "polySimp_mulComm0" (formula "39") (term "1,0,1"))
                              (rule "polySimp_rightDist" (formula "39") (term "1,0,1"))
                              (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,1"))
                              (rule "mul_literals" (formula "39") (term "0,1,0,1"))
                              (rule "polySimp_elimOne" (formula "39") (term "1,1,0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "39") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "39") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "39") (term "0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "39") (term "1,1,0,0"))
                              (rule "eqSymm" (formula "39"))
                              (rule "pullOutSelect" (formula "39") (term "1,1") (inst "selectSK=arr_32"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "26"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "22"))
                              (rule "pullOutSelect" (formula "40") (term "1,0") (inst "selectSK=arr_33"))
                              (rule "applyEq" (formula "2") (term "2,0") (ifseqformula "1"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "23"))
                              (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=arr_34"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "arrayLengthNotNegative" (formula "10") (term "0"))
                              (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "11"))
                              (rule "leq_literals" (formula "10") (term "0"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "true_left" (formula "10"))
                              (rule "arrayLengthIsAShort" (formula "11") (term "0"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "true_left" (formula "11"))
                              (rule "ifthenelse_split" (formula "8") (term "0"))
                              (branch " (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>).<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE TRUE"
                                 (rule "applyEqReverse" (formula "3") (term "1,1,0") (ifseqformula "9"))
                                 (rule "applyEqReverse" (formula "5") (term "0,1,0") (ifseqformula "9"))
                                 (rule "applyEqReverse" (formula "1") (term "0,0,0,0,0") (ifseqformula "9"))
                                 (rule "applyEqReverse" (formula "2") (term "0,0,0,0,0") (ifseqformula "9"))
                                 (rule "applyEqReverse" (formula "3") (term "0,0,0,0,0") (ifseqformula "9"))
                                 (rule "applyEqReverse" (formula "43") (term "0,0,0,0") (ifseqformula "9"))
                                 (rule "applyEqReverse" (formula "3") (term "1,0,0,0,0,1,0,0") (ifseqformula "9"))
                                 (rule "applyEqReverse" (formula "5") (term "0,0,0,0") (ifseqformula "9"))
                                 (rule "applyEqReverse" (formula "2") (term "1,0,1,0,1,0,0") (ifseqformula "9"))
                                 (rule "applyEqReverse" (formula "2") (term "1,1,0") (ifseqformula "9"))
                                 (rule "applyEqReverse" (formula "3") (term "1,0,1,0,1,0,0") (ifseqformula "9"))
                                 (rule "applyEqReverse" (formula "3") (term "1,0,1,0,0,1,0,0") (ifseqformula "9"))
                                 (rule "applyEqReverse" (formula "1") (term "1,1,0") (ifseqformula "9"))
                                 (rule "applyEqReverse" (formula "43") (term "0,0,0,1") (ifseqformula "9"))
                                 (rule "applyEqReverse" (formula "1") (term "1,2,0") (ifseqformula "9"))
                                 (rule "applyEqReverse" (formula "1") (term "1,0,0,1,0,0") (ifseqformula "9"))
                                 (rule "applyEqReverse" (formula "2") (term "1,0,0,0,1,0,0") (ifseqformula "9"))
                                 (rule "hideAuxiliaryEq" (formula "9"))
                                 (rule "allLeft" (formula "22") (inst "t=iv_10"))
                                 (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "22") (term "1,0") (ifseqformula "9"))
                                 (rule "qeq_literals" (formula "22") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "allLeft" (formula "40") (inst "t=iv_10"))
                                 (rule "inEqSimp_commuteGeq" (formula "40") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "40") (term "1,0") (ifseqformula "9"))
                                 (rule "qeq_literals" (formula "40") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "40"))
                                 (rule "pullOutSelect" (formula "40") (term "0,0,0") (inst "selectSK=arr_36"))
                                 (rule "simplifySelectOfAnonEQ" (formula "40") (ifseqformula "34"))
                                 (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "49")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "0,0,0") (ifseqformula "29"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "0,0,0,0") (ifseqformula "25"))
                                 (rule "replace_known_right" (formula "40") (term "1,0,0,0,0") (ifseqformula "47"))
                                 (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "46")) (ifInst ""  (formula "48")))
                                 (rule "applyEqReverse" (formula "41") (term "0,0,0") (ifseqformula "40"))
                                 (rule "hideAuxiliaryEq" (formula "40"))
                                 (rule "narrowSelectArrayType" (formula "40") (term "0,0,0") (ifseqformula "33") (ifseqformula "48"))
                                 (rule "allLeft" (formula "20") (inst "t=iv_10"))
                                 (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "20") (term "1,0") (ifseqformula "9"))
                                 (rule "qeq_literals" (formula "20") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "allLeft" (formula "18") (inst "t=iv_10"))
                                 (rule "inEqSimp_homoInEq1" (formula "18") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "18") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "18") (term "1,1,0"))
                                 (rule "mul_literals" (formula "18") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "18") (term "0,0") (ifseqformula "9"))
                                 (rule "qeq_literals" (formula "18") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "ifthenelse_split" (formula "5") (term "0"))
                                 (branch " (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@anon_heap_setEquality<<anonHeapFunction>>.length >= 1 TRUE"
                                    (rule "replace_known_left" (formula "47") (term "0,0") (ifseqformula "6"))
                                    (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "6")))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ! (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@anon_heap_setEquality<<anonHeapFunction>> = null & ! ((verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@anon_heap_setEquality<<anonHeapFunction>>).<created> = TRUE TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "replace_known_right" (formula "2") (term "0,0,0,1,0,0") (ifseqformula "45"))
                                       (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "44")))
                                       (rule "replace_known_right" (formula "1") (term "0,0,1,0,0") (ifseqformula "45"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")))
                                       (rule "ifthenelse_negated" (formula "2") (term "0"))
                                       (rule "ifthenelse_negated" (formula "1") (term "0"))
                                       (rule "narrowSelectArrayType" (formula "2") (term "2,0") (ifseqformula "35") (ifseqformula "44"))
                                       (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "26") (ifseqformula "44"))
                                       (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "30") (ifseqformula "44"))
                                       (rule "ifthenelse_split" (formula "1") (term "0"))
                                       (branch " (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10].<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE TRUE"
                                          (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                          (rule "applyEqReverse" (formula "49") (term "0") (ifseqformula "2"))
                                          (rule "hideAuxiliaryEq" (formula "2"))
                                          (rule "eqSymm" (formula "48"))
                                          (rule "replace_known_left" (formula "2") (term "0,0,0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "2"))
                                          (rule "applyEqReverse" (formula "48") (term "0") (ifseqformula "2"))
                                          (builtin "One Step Simplification" (formula "48"))
                                          (rule "closeTrue" (formula "48"))
                                       )
                                       (branch " (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10].<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE FALSE"
                                          (rule "referencedObjectIsCreatedRight" (formula "44") (ifseqformula "45"))
                                          (rule "close" (formula "44") (ifseqformula "26"))
                                       )
                                    )
                                    (branch " ! (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@anon_heap_setEquality<<anonHeapFunction>> = null & ! ((verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@anon_heap_setEquality<<anonHeapFunction>>).<created> = TRUE FALSE"
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "ifthenelse_split" (formula "1") (term "0"))
                                       (branch " ! (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@anon_heap_setEquality<<anonHeapFunction>> = null & !( ((verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@anon_heap_setEquality<<anonHeapFunction>>).<created> = TRUE | (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10].<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE) TRUE"
                                          (rule "andLeft" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "orRight" (formula "44"))
                                          (rule "referencedObjectIsCreatedRight" (formula "45") (ifseqformula "46"))
                                          (rule "close" (formula "45") (ifseqformula "26"))
                                       )
                                       (branch " ! (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@anon_heap_setEquality<<anonHeapFunction>> = null & !( ((verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@anon_heap_setEquality<<anonHeapFunction>>).<created> = TRUE | (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10].<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE) FALSE"
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "applyEqReverse" (formula "48") (term "0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "ifthenelse_split" (formula "1") (term "0"))
                                          (branch " ! (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@anon_heap_setEquality<<anonHeapFunction>> = null & !( ((verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@anon_heap_setEquality<<anonHeapFunction>>).<created> = TRUE | (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10].<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE | ((verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@anon_heap_setEquality<<anonHeapFunction>>).<created>@anon_heap_storeMessages<<anonHeapFunction>> = TRUE) TRUE"
                                             (rule "andLeft" (formula "1"))
                                             (rule "notLeft" (formula "2"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "orRight" (formula "44"))
                                             (rule "orRight" (formula "44"))
                                             (rule "referencedObjectIsCreatedRight" (formula "45") (ifseqformula "43"))
                                             (rule "close" (formula "45") (ifseqformula "25"))
                                          )
                                          (branch " ! (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@anon_heap_setEquality<<anonHeapFunction>> = null & !( ((verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@anon_heap_setEquality<<anonHeapFunction>>).<created> = TRUE | (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10].<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE | ((verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@anon_heap_setEquality<<anonHeapFunction>>).<created>@anon_heap_storeMessages<<anonHeapFunction>> = TRUE) FALSE"
                                             (rule "close" (formula "48") (ifseqformula "1"))
                                          )
                                       )
                                    )
                                 )
                                 (branch " (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@anon_heap_setEquality<<anonHeapFunction>>.length >= 1 FALSE"
                                    (rule "inEqSimp_geqRight" (formula "44"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_homoInEq1" (formula "6"))
                                    (rule "times_zero_2" (formula "6") (term "1,0"))
                                    (rule "add_zero_right" (formula "6") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                                    (rule "mul_literals" (formula "6") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "6") (ifseqformula "5"))
                                    (rule "qeq_literals" (formula "6") (term "0"))
                                    (builtin "One Step Simplification" (formula "6"))
                                    (rule "closeFalse" (formula "6"))
                                 )
                              )
                              (branch " (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>).<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE FALSE"
                                 (rule "applyEqReverse" (formula "5") (term "0,0,0,0") (ifseqformula "8"))
                                 (rule "applyEqReverse" (formula "2") (term "0,0,0,0,0") (ifseqformula "8"))
                                 (rule "applyEqReverse" (formula "3") (term "1,0,1,0,1,0,0") (ifseqformula "8"))
                                 (rule "applyEqReverse" (formula "2") (term "1,0,1,0,1,0,0") (ifseqformula "8"))
                                 (rule "applyEqReverse" (formula "43") (term "0,0,0,0") (ifseqformula "8"))
                                 (rule "applyEqReverse" (formula "5") (term "0,1,0") (ifseqformula "8"))
                                 (rule "applyEqReverse" (formula "3") (term "1,0,1,0,0,1,0,0") (ifseqformula "8"))
                                 (rule "applyEqReverse" (formula "2") (term "1,1,0") (ifseqformula "8"))
                                 (rule "applyEqReverse" (formula "3") (term "1,1,0") (ifseqformula "8"))
                                 (rule "applyEqReverse" (formula "3") (term "1,0,0,0,0,1,0,0") (ifseqformula "8"))
                                 (rule "applyEqReverse" (formula "2") (term "1,0,0,0,1,0,0") (ifseqformula "8"))
                                 (rule "applyEqReverse" (formula "1") (term "1,0,0,1,0,0") (ifseqformula "8"))
                                 (rule "applyEqReverse" (formula "1") (term "1,2,0") (ifseqformula "8"))
                                 (rule "applyEqReverse" (formula "1") (term "0,0,0,0,0") (ifseqformula "8"))
                                 (rule "applyEqReverse" (formula "1") (term "1,1,0") (ifseqformula "8"))
                                 (rule "applyEqReverse" (formula "43") (term "0,0,0,1") (ifseqformula "8"))
                                 (rule "applyEqReverse" (formula "3") (term "0,0,0,0,0") (ifseqformula "8"))
                                 (rule "hideAuxiliaryEq" (formula "8"))
                                 (rule "allLeft" (formula "21") (inst "t=iv_10"))
                                 (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "21") (term "1,0") (ifseqformula "8"))
                                 (rule "qeq_literals" (formula "21") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "21"))
                                 (rule "allLeft" (formula "39") (inst "t=iv_10"))
                                 (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "39") (term "1,0") (ifseqformula "8"))
                                 (rule "qeq_literals" (formula "39") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "39"))
                                 (rule "pullOutSelect" (formula "39") (term "0,0,0") (inst "selectSK=arr_35"))
                                 (rule "simplifySelectOfAnonEQ" (formula "39") (ifseqformula "33"))
                                 (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "49")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "39") (term "0,0,0") (ifseqformula "28"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "39") (term "0,0,0,0") (ifseqformula "24"))
                                 (rule "replace_known_right" (formula "39") (term "1,0,0,0,0") (ifseqformula "47"))
                                 (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "46")) (ifInst ""  (formula "48")))
                                 (rule "applyEqReverse" (formula "40") (term "0,0,0") (ifseqformula "39"))
                                 (rule "hideAuxiliaryEq" (formula "39"))
                                 (rule "narrowSelectArrayType" (formula "39") (term "0,0,0") (ifseqformula "32") (ifseqformula "48"))
                                 (rule "allLeft" (formula "17") (inst "t=iv_10"))
                                 (rule "inEqSimp_homoInEq1" (formula "17") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "17") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "17") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "17") (term "1,1,0"))
                                 (rule "mul_literals" (formula "17") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "17") (term "0,0") (ifseqformula "8"))
                                 (rule "qeq_literals" (formula "17") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "17"))
                                 (rule "allLeft" (formula "20") (inst "t=iv_10"))
                                 (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "20") (term "1,0") (ifseqformula "8"))
                                 (rule "qeq_literals" (formula "20") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "ifthenelse_split" (formula "5") (term "0"))
                                 (branch " verif.selectvoting.system.core.ConservativeExtension.messages[iv_10]@anon_heap_storeMessages<<anonHeapFunction>>.length >= 1 TRUE"
                                    (rule "replace_known_left" (formula "47") (term "0,1") (ifseqformula "6"))
                                    (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "6")))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ! verif.selectvoting.system.core.ConservativeExtension.messages[iv_10]@anon_heap_storeMessages<<anonHeapFunction>> = null & ! (verif.selectvoting.system.core.ConservativeExtension.messages[iv_10]@anon_heap_storeMessages<<anonHeapFunction>>).<created> = TRUE TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "replace_known_right" (formula "2") (term "0,0,0,1,0,0") (ifseqformula "44"))
                                       (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "43")))
                                       (rule "replace_known_right" (formula "1") (term "0,0,1,0,0") (ifseqformula "44"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")))
                                       (rule "ifthenelse_negated" (formula "2") (term "0"))
                                       (rule "ifthenelse_negated" (formula "1") (term "0"))
                                       (rule "narrowSelectArrayType" (formula "2") (term "2,0") (ifseqformula "34") (ifseqformula "43"))
                                       (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "25") (ifseqformula "43"))
                                       (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "29") (ifseqformula "43"))
                                       (rule "ifthenelse_split" (formula "1") (term "0"))
                                       (branch " (verif.selectvoting.system.core.ConservativeExtension.messages[iv_10]@anon_heap_storeMessages<<anonHeapFunction>>).<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE TRUE"
                                          (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                          (rule "applyEqReverse" (formula "49") (term "0") (ifseqformula "2"))
                                          (rule "hideAuxiliaryEq" (formula "2"))
                                          (rule "eqSymm" (formula "48"))
                                          (rule "replace_known_left" (formula "2") (term "0,0,0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "2"))
                                          (rule "applyEqReverse" (formula "48") (term "0") (ifseqformula "2"))
                                          (builtin "One Step Simplification" (formula "48"))
                                          (rule "closeTrue" (formula "48"))
                                       )
                                       (branch " (verif.selectvoting.system.core.ConservativeExtension.messages[iv_10]@anon_heap_storeMessages<<anonHeapFunction>>).<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE FALSE"
                                          (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "1"))
                                          (rule "applyEqReverse" (formula "49") (term "0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "eqSymm" (formula "48"))
                                          (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "42"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "ifthenelse_split" (formula "1") (term "0"))
                                          (branch " verif.selectvoting.system.core.ConservativeExtension.messages[iv_10].<created>@anon_heap_storeMessages<<anonHeapFunction>> = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "49") (term "0") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "49"))
                                             (rule "closeTrue" (formula "49"))
                                          )
                                          (branch " verif.selectvoting.system.core.ConservativeExtension.messages[iv_10].<created>@anon_heap_storeMessages<<anonHeapFunction>> = TRUE FALSE"
                                             (rule "referencedObjectIsCreatedRight" (formula "42") (ifseqformula "44"))
                                             (rule "close" (formula "42") (ifseqformula "28"))
                                          )
                                       )
                                    )
                                    (branch " ! verif.selectvoting.system.core.ConservativeExtension.messages[iv_10]@anon_heap_storeMessages<<anonHeapFunction>> = null & ! (verif.selectvoting.system.core.ConservativeExtension.messages[iv_10]@anon_heap_storeMessages<<anonHeapFunction>>).<created> = TRUE FALSE"
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "ifthenelse_split" (formula "1") (term "0"))
                                       (branch " ! verif.selectvoting.system.core.ConservativeExtension.messages[iv_10]@anon_heap_storeMessages<<anonHeapFunction>> = null & !( (verif.selectvoting.system.core.ConservativeExtension.messages[iv_10]@anon_heap_storeMessages<<anonHeapFunction>>).<created> = TRUE | (verif.selectvoting.system.core.ConservativeExtension.messages[iv_10]@anon_heap_storeMessages<<anonHeapFunction>>).<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE) TRUE"
                                          (rule "andLeft" (formula "1"))
                                          (rule "notLeft" (formula "2"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "orRight" (formula "44"))
                                          (rule "applyEqReverse" (formula "50") (term "0") (ifseqformula "1"))
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "replace_known_right" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "43"))
                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "42")) (ifInst ""  (formula "44")))
                                          (rule "replace_known_right" (formula "45") (term "0,0") (ifseqformula "42"))
                                          (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "43")))
                                          (rule "closeTrue" (formula "45"))
                                       )
                                       (branch " ! verif.selectvoting.system.core.ConservativeExtension.messages[iv_10]@anon_heap_storeMessages<<anonHeapFunction>> = null & !( (verif.selectvoting.system.core.ConservativeExtension.messages[iv_10]@anon_heap_storeMessages<<anonHeapFunction>>).<created> = TRUE | (verif.selectvoting.system.core.ConservativeExtension.messages[iv_10]@anon_heap_storeMessages<<anonHeapFunction>>).<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE) FALSE"
                                          (rule "applyEqReverse" (formula "48") (term "0") (ifseqformula "1"))
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "ifthenelse_split" (formula "1") (term "0"))
                                          (branch " ! verif.selectvoting.system.core.ConservativeExtension.messages[iv_10]@anon_heap_storeMessages<<anonHeapFunction>> = null & !( (verif.selectvoting.system.core.ConservativeExtension.messages[iv_10]@anon_heap_storeMessages<<anonHeapFunction>>).<created> = TRUE | (verif.selectvoting.system.core.ConservativeExtension.messages[iv_10]@anon_heap_storeMessages<<anonHeapFunction>>).<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE | verif.selectvoting.system.core.ConservativeExtension.messages[iv_10].<created>@anon_heap_storeMessages<<anonHeapFunction>> = TRUE) TRUE"
                                             (rule "andLeft" (formula "1"))
                                             (rule "notLeft" (formula "2"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "orRight" (formula "43"))
                                             (rule "referencedObjectIsCreatedRight" (formula "44") (ifseqformula "42"))
                                             (rule "close" (formula "44") (ifseqformula "28"))
                                          )
                                          (branch " ! verif.selectvoting.system.core.ConservativeExtension.messages[iv_10]@anon_heap_storeMessages<<anonHeapFunction>> = null & !( (verif.selectvoting.system.core.ConservativeExtension.messages[iv_10]@anon_heap_storeMessages<<anonHeapFunction>>).<created> = TRUE | (verif.selectvoting.system.core.ConservativeExtension.messages[iv_10]@anon_heap_storeMessages<<anonHeapFunction>>).<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE | verif.selectvoting.system.core.ConservativeExtension.messages[iv_10].<created>@anon_heap_storeMessages<<anonHeapFunction>> = TRUE) FALSE"
                                             (rule "close" (formula "48") (ifseqformula "1"))
                                          )
                                       )
                                    )
                                 )
                                 (branch " verif.selectvoting.system.core.ConservativeExtension.messages[iv_10]@anon_heap_storeMessages<<anonHeapFunction>>.length >= 1 FALSE"
                                    (rule "inEqSimp_geqRight" (formula "43"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_homoInEq1" (formula "6"))
                                    (rule "times_zero_2" (formula "6") (term "1,0"))
                                    (rule "add_zero_right" (formula "6") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                                    (rule "mul_literals" (formula "6") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "6") (ifseqformula "5"))
                                    (rule "qeq_literals" (formula "6") (term "0"))
                                    (builtin "One Step Simplification" (formula "6"))
                                    (rule "closeFalse" (formula "6"))
                                 )
                              )
                           )
                           (branch " ! verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>> = null & ! (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>).<created> = TRUE FALSE"
                              (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "lenNonNegative" (formula "42") (term "0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "1"))
                              (rule "equalityToSeqGetAndSeqLenLeft" (formula "32") (inst "iv=iv"))
                              (rule "andLeft" (formula "32"))
                              (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0"))
                              (rule "applyEq" (formula "33") (term "0,0,1,0,0,1,0,0") (ifseqformula "34"))
                              (rule "applyEq" (formula "33") (term "0,0,1,0") (ifseqformula "34"))
                              (builtin "One Step Simplification" (formula "33"))
                              (rule "true_left" (formula "33"))
                              (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "33"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "true_left" (formula "32"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "26") (term "1,0") (ifseqformula "23"))
                              (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                              (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "7"))
                              (rule "leq_literals" (formula "6") (term "0"))
                              (builtin "One Step Simplification" (formula "6"))
                              (rule "true_left" (formula "6"))
                              (rule "arrayLengthIsAShort" (formula "6") (term "0"))
                              (builtin "One Step Simplification" (formula "6"))
                              (rule "true_left" (formula "6"))
                              (rule "ifthenelse_split" (formula "3") (term "0"))
                              (branch " ! verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>> = null & !( (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>).<created> = TRUE | (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>).<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE) TRUE"
                                 (rule "andLeft" (formula "3"))
                                 (rule "notLeft" (formula "4"))
                                 (rule "notLeft" (formula "3"))
                                 (rule "orRight" (formula "37"))
                                 (rule "applyEqReverse" (formula "40") (term "0,1,1,1,0,0,1") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "40") (term "0,1,0,0") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "40") (term "0,0,0,0,0") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "40") (term "0,0,0,1,1,0,0,1") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "40") (term "1,1,0,1,0,1") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "40") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "35"))
                                 (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "36")) (ifInst ""  (formula "37")))
                                 (rule "replace_known_right" (formula "38") (term "0,0") (ifseqformula "35"))
                                 (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "36")))
                                 (rule "closeTrue" (formula "38"))
                              )
                              (branch " ! verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>> = null & !( (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>).<created> = TRUE | (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>).<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE) FALSE"
                                 (rule "applyEqReverse" (formula "38") (term "1,1,0,1,0,1") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "38") (term "0,0,0,1,1,0,0,1") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "38") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "38") (term "0,1,1,1,0,0,1") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "38") (term "0,0,0,0,0") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "38") (term "0,1,0,0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "ifthenelse_split" (formula "37") (term "0,0"))
                                 (branch " (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10].length >= 1 TRUE"
                                    (rule "eqSymm" (formula "38") (term "0"))
                                    (rule "replace_known_left" (formula "38") (term "0,1,1,0,0,1") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "38"))
                                    (rule "ifthenelse_split" (formula "4") (term "0"))
                                    (branch " ! verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>> = null & !( (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>).<created> = TRUE | (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>).<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE | verif.selectvoting.system.core.ConservativeExtension.messages.<created>@anon_heap_storeMessages<<anonHeapFunction>> = TRUE) TRUE"
                                       (rule "andLeft" (formula "4"))
                                       (rule "notLeft" (formula "5"))
                                       (rule "notLeft" (formula "4"))
                                       (rule "orRight" (formula "37"))
                                       (rule "referencedObjectIsCreatedRight" (formula "38") (ifseqformula "36"))
                                       (rule "close" (formula "38") (ifseqformula "23"))
                                    )
                                    (branch " ! verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>> = null & !( (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>).<created> = TRUE | (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>).<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE | verif.selectvoting.system.core.ConservativeExtension.messages.<created>@anon_heap_storeMessages<<anonHeapFunction>> = TRUE) FALSE"
                                       (rule "applyEqReverse" (formula "39") (term "1,1,1,1,0,1") (ifseqformula "4"))
                                       (rule "applyEqReverse" (formula "39") (term "0,0,0,0,0") (ifseqformula "4"))
                                       (rule "applyEqReverse" (formula "39") (term "0,1,0,0") (ifseqformula "4"))
                                       (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "1")))
                                       (rule "allRight" (formula "39") (inst "sk=iv_14"))
                                       (rule "orRight" (formula "39"))
                                       (rule "orRight" (formula "39"))
                                       (rule "applyEqReverse" (formula "41") (term "0,1,1,1,0,1") (ifseqformula "4"))
                                       (rule "hideAuxiliaryEq" (formula "4"))
                                       (rule "inEqSimp_geqRight" (formula "39"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "inEqSimp_leqRight" (formula "39"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "replace_known_left" (formula "40") (term "0,0,1") (ifseqformula "1"))
                                       (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "1")))
                                       (rule "inEqSimp_homoInEq0" (formula "40") (term "0,1"))
                                       (rule "polySimp_addComm1" (formula "40") (term "0,0,1"))
                                       (rule "inEqSimp_homoInEq0" (formula "40") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "40") (term "0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "0,1"))
                                       (rule "polySimp_mulComm0" (formula "40") (term "1,0,1"))
                                       (rule "polySimp_rightDist" (formula "40") (term "1,0,1"))
                                       (rule "mul_literals" (formula "40") (term "0,1,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,1"))
                                       (rule "polySimp_elimOne" (formula "40") (term "1,1,0,1"))
                                       (rule "replace_known_left" (formula "40") (term "0,1") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "40"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "40") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "40") (term "1,0,0"))
                                       (rule "mul_literals" (formula "40") (term "0,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "40") (term "1,1,0,0"))
                                       (rule "replace_known_left" (formula "40") (term "0,0") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "40"))
                                       (rule "pullOutSelect" (formula "40") (term "1") (inst "selectSK=arr_28"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "26"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "22"))
                                       (rule "pullOutSelect" (formula "41") (term "0") (inst "selectSK=arr_29"))
                                       (rule "applyEq" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "23"))
                                       (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=arr_30"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "allLeft" (formula "20") (inst "t=iv_10"))
                                       (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "20") (term "1,0") (ifseqformula "9"))
                                       (rule "qeq_literals" (formula "20") (term "0,1,0"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "allLeft" (formula "23") (inst "t=iv_10"))
                                       (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "23") (term "1,0") (ifseqformula "9"))
                                       (rule "qeq_literals" (formula "23") (term "0,1,0"))
                                       (builtin "One Step Simplification" (formula "23"))
                                       (rule "allLeft" (formula "18") (inst "t=iv_10"))
                                       (rule "inEqSimp_homoInEq1" (formula "18") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "18") (term "0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "18") (term "1,1,0"))
                                       (rule "polySimp_rightDist" (formula "18") (term "1,1,0"))
                                       (rule "mul_literals" (formula "18") (term "0,1,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0"))
                                       (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "18") (term "0,0") (ifseqformula "9"))
                                       (rule "qeq_literals" (formula "18") (term "0,0,0"))
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "allLeft" (formula "42") (inst "t=iv_10"))
                                       (rule "inEqSimp_commuteGeq" (formula "42") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "42") (term "1,0") (ifseqformula "9"))
                                       (rule "qeq_literals" (formula "42") (term "0,1,0"))
                                       (builtin "One Step Simplification" (formula "42"))
                                       (rule "pullOutSelect" (formula "42") (term "0,0,0") (inst "selectSK=arr_31"))
                                       (rule "simplifySelectOfAnonEQ" (formula "42") (ifseqformula "36"))
                                       (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "52")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "42") (term "0,0,0") (ifseqformula "31"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "42") (term "0,0,0,0") (ifseqformula "27"))
                                       (rule "replace_known_right" (formula "42") (term "1,0,0,0,0") (ifseqformula "50"))
                                       (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "49")) (ifInst ""  (formula "51")))
                                       (rule "applyEqReverse" (formula "43") (term "0,0,0") (ifseqformula "42"))
                                       (rule "hideAuxiliaryEq" (formula "42"))
                                       (rule "narrowSelectArrayType" (formula "42") (term "0,0,0") (ifseqformula "35") (ifseqformula "51"))
                                       (rule "ifthenelse_split" (formula "1") (term "0"))
                                       (branch " ! (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10] = null & ! (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10].<created> = TRUE TRUE"
                                          (rule "andLeft" (formula "1"))
                                          (rule "notLeft" (formula "2"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "referencedObjectIsCreatedRight" (formula "45") (ifseqformula "44"))
                                          (rule "close" (formula "45") (ifseqformula "13"))
                                       )
                                       (branch " ! (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10] = null & ! (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10].<created> = TRUE FALSE"
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "arrayLengthNotNegative" (formula "5") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "6"))
                                          (rule "leq_literals" (formula "5") (term "0"))
                                          (builtin "One Step Simplification" (formula "5"))
                                          (rule "true_left" (formula "5"))
                                          (rule "arrayLengthIsAShort" (formula "5") (term "0"))
                                          (builtin "One Step Simplification" (formula "5"))
                                          (rule "true_left" (formula "5"))
                                          (rule "ifthenelse_split" (formula "1") (term "0"))
                                          (branch " ! (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10] = null & !( (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10].<created> = TRUE | ((verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@heap).<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE) TRUE"
                                             (rule "andLeft" (formula "1"))
                                             (rule "notLeft" (formula "2"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "orRight" (formula "44"))
                                             (rule "referencedObjectIsCreatedRight" (formula "44") (ifseqformula "43"))
                                             (rule "close" (formula "44") (ifseqformula "12"))
                                          )
                                          (branch " ! (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10] = null & !( (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10].<created> = TRUE | ((verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@heap).<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE) FALSE"
                                             (rule "applyEqReverse" (formula "48") (term "0") (ifseqformula "1"))
                                             (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "ifthenelse_split" (formula "1") (term "0"))
                                             (branch " ! (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10] = null & !( (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10].<created> = TRUE | ((verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@heap).<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE | ((verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@heap).<created>@anon_heap_storeMessages<<anonHeapFunction>> = TRUE) TRUE"
                                                (rule "andLeft" (formula "1"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "orRight" (formula "42"))
                                                (rule "orRight" (formula "42"))
                                                (rule "referencedObjectIsCreatedRight" (formula "42") (ifseqformula "45"))
                                                (rule "close" (formula "42") (ifseqformula "11"))
                                             )
                                             (branch " ! (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10] = null & !( (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10].<created> = TRUE | ((verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@heap).<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE | ((verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@heap).<created>@anon_heap_storeMessages<<anonHeapFunction>> = TRUE) FALSE"
                                                (rule "close" (formula "48") (ifseqformula "1"))
                                             )
                                          )
                                       )
                                    )
                                 )
                                 (branch " (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10].length >= 1 FALSE"
                                    (rule "eqSymm" (formula "38") (term "0"))
                                    (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "37")))
                                    (rule "inEqSimp_geqRight" (formula "37"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_or_tautInEq0" (formula "38") (term "0,0,1"))
                                    (rule "add_zero_right" (formula "38") (term "1,1,0,0,1"))
                                    (rule "qeq_literals" (formula "38") (term "1,0,0,1"))
                                    (builtin "One Step Simplification" (formula "38"))
                                    (rule "orRight" (formula "38"))
                                    (rule "notRight" (formula "38"))
                                    (rule "inEqSimp_contradEq7" (formula "39") (ifseqformula "1"))
                                    (rule "times_zero_1" (formula "39") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "39") (term "0,0"))
                                    (rule "leq_literals" (formula "39") (term "0"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "false_right" (formula "39"))
                                    (rule "ifthenelse_split" (formula "5") (term "0"))
                                    (branch " ! verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>> = null & !( (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>).<created> = TRUE | (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>).<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE | verif.selectvoting.system.core.ConservativeExtension.messages.<created>@anon_heap_storeMessages<<anonHeapFunction>> = TRUE) TRUE"
                                       (rule "andLeft" (formula "5"))
                                       (rule "notLeft" (formula "6"))
                                       (rule "notLeft" (formula "5"))
                                       (rule "orRight" (formula "38"))
                                       (rule "referencedObjectIsCreatedRight" (formula "39") (ifseqformula "37"))
                                       (rule "close" (formula "39") (ifseqformula "24"))
                                    )
                                    (branch " ! verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>> = null & !( (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>).<created> = TRUE | (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>).<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE | verif.selectvoting.system.core.ConservativeExtension.messages.<created>@anon_heap_storeMessages<<anonHeapFunction>> = TRUE) FALSE"
                                       (rule "applyEqReverse" (formula "1") (term "0,0") (ifseqformula "5"))
                                       (rule "hideAuxiliaryEq" (formula "5"))
                                       (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "2") (term "0"))
                                       (builtin "One Step Simplification" (formula "2"))
                                       (rule "closeFalse" (formula "2"))
                                    )
                                 )
                              )
                           )
                        )
                        (branch " verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>.length >= 1 FALSE"
                           (rule "inEqSimp_geqRight" (formula "34"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "7"))
                           (rule "mul_literals" (formula "7") (term "1,0"))
                           (rule "add_zero_right" (formula "7") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "7"))
                           (rule "mul_literals" (formula "7") (term "1"))
                           (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "7"))
                           (rule "qeq_literals" (formula "6") (term "0"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "closeFalse" (formula "6"))
                        )
                     )
                     (branch "CUT: verif.selectvoting.system.core.Setup.secret = TRUE FALSE"
                        (builtin "One Step Simplification" (formula "28"))
                        (rule "true_left" (formula "28"))
                        (rule "replace_known_right" (formula "28") (term "0,0") (ifseqformula "30"))
                        (builtin "One Step Simplification" (formula "28"))
                        (rule "arrayLengthIsAShort" (formula "15") (term "1,1,0"))
                        (builtin "One Step Simplification" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "arrayLengthNotNegative" (formula "29") (term "1,1,0"))
                        (rule "equalityToSeqGetAndSeqLenLeft" (formula "23") (inst "iv=iv"))
                        (rule "andLeft" (formula "23"))
                        (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                        (rule "applyEq" (formula "24") (term "0,0,1,0") (ifseqformula "25"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "true_left" (formula "24"))
                        (rule "applyEq" (formula "23") (term "0,0") (ifseqformula "24"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "true_left" (formula "23"))
                        (rule "arrayLengthNotNegative" (formula "15") (term "1,1,0"))
                        (rule "arrayLengthIsAShort" (formula "31") (term "1,1,0"))
                        (builtin "One Step Simplification" (formula "31"))
                        (rule "true_left" (formula "31"))
                        (rule "lenNonNegative" (formula "40") (term "1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "1"))
                        (rule "ifthenelse_split" (formula "6") (term "0"))
                        (branch " verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>.length >= 1 TRUE"
                           (rule "replace_known_left" (formula "35") (term "0,1") (ifseqformula "7"))
                           (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "7")))
                           (rule "eqSeqDef" (formula "35") (inst "iv=iv"))
                           (rule "lenOfSeqDef" (formula "35") (term "1,0"))
                           (rule "polySimp_elimSub" (formula "35") (term "1,1,0"))
                           (rule "mul_literals" (formula "35") (term "1,1,1,0"))
                           (rule "add_zero_right" (formula "35") (term "1,1,0"))
                           (rule "getOfSeqDef" (formula "35") (term "1,1,0,1"))
                           (rule "castDel" (formula "35") (term "1,1,1,0,1"))
                           (rule "castDel" (formula "35") (term "2,1,1,0,1"))
                           (rule "add_zero_right" (formula "35") (term "0,2,1,1,1,0,1"))
                           (rule "polySimp_elimSub" (formula "35") (term "1,1,0,1,1,0,1"))
                           (rule "times_zero_2" (formula "35") (term "1,1,1,0,1,1,0,1"))
                           (rule "add_zero_right" (formula "35") (term "1,1,0,1,1,0,1"))
                           (rule "lenOfSeqDef" (formula "35") (term "0,0"))
                           (rule "polySimp_elimSub" (formula "35") (term "1,0,0"))
                           (rule "mul_literals" (formula "35") (term "1,1,0,0"))
                           (rule "add_zero_right" (formula "35") (term "1,0,0"))
                           (rule "getOfSeqDef" (formula "35") (term "0,1,0,1"))
                           (rule "castDel" (formula "35") (term "2,0,1,0,1"))
                           (rule "castDel" (formula "35") (term "1,0,1,0,1"))
                           (rule "add_zero_right" (formula "35") (term "0,2,1,0,1,0,1"))
                           (rule "polySimp_elimSub" (formula "35") (term "1,1,0,0,1,0,1"))
                           (rule "times_zero_2" (formula "35") (term "1,1,1,0,0,1,0,1"))
                           (rule "add_zero_right" (formula "35") (term "1,1,0,0,1,0,1"))
                           (rule "lenOfSeqDef" (formula "35") (term "1,1,0,0,1"))
                           (rule "polySimp_elimSub" (formula "35") (term "1,1,1,0,0,1"))
                           (rule "times_zero_2" (formula "35") (term "1,1,1,1,0,0,1"))
                           (rule "add_zero_right" (formula "35") (term "1,1,1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "35") (term "0,1,0"))
                           (rule "add_zero_right" (formula "35") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,1,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,1,1,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "35") (term "0,0,0"))
                           (rule "add_zero_right" (formula "35") (term "0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0,1,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "35") (term "0,1,1,0,0,1"))
                           (rule "add_zero_right" (formula "35") (term "0,0,1,1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,1,1,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,1,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "35") (term "0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "35") (term "0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "35") (term "0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,1,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,1,1,0,1"))
                           (rule "polySimp_rightDist" (formula "35") (term "1,1,0,1,1,0,1"))
                           (rule "mul_literals" (formula "35") (term "0,1,1,0,1,1,0,1"))
                           (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,1,1,0,1"))
                           (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,1,1,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "35") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "35") (term "0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "35") (term "0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1,0,1"))
                           (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1,0,1"))
                           (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1,0,1"))
                           (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1,0,1"))
                           (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "35") (term "0,0,1,0,0,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "35") (term "0,0,0,1,0,0,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "35") (term "0,0,0,1,0,0,1,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1"))
                           (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1"))
                           (rule "nnf_imp2or" (formula "35") (term "0,1"))
                           (rule "nnf_notAnd" (formula "35") (term "0,0,1"))
                           (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1"))
                           (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1"))
                           (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,1"))
                           (rule "add_zero_left" (formula "35") (term "0,0,1,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,1"))
                           (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,1"))
                           (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0,1"))
                           (rule "add_zero_right" (formula "35") (term "0,0,0,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,1"))
                           (rule "mul_literals" (formula "35") (term "1,0,0,0,1"))
                           (rule "ifthenelse_split" (formula "2") (term "0"))
                           (branch " ! verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>> = null & ! (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>).<created> = TRUE TRUE"
                              (rule "andLeft" (formula "2"))
                              (rule "notLeft" (formula "2"))
                              (rule "notLeft" (formula "2"))
                              (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "replace_known_right" (formula "3") (term "0,0,0,1,0,0") (ifseqformula "33"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "34")))
                              (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "34"))
                              (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "33")))
                              (rule "ifthenelse_negated" (formula "3") (term "0"))
                              (rule "ifthenelse_negated" (formula "2") (term "0"))
                              (rule "lenNonNegative" (formula "43") (term "0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "1"))
                              (rule "equalityToSeqGetAndSeqLenLeft" (formula "31") (inst "iv=iv"))
                              (rule "andLeft" (formula "31"))
                              (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0"))
                              (rule "applyEq" (formula "32") (term "0,0,1,0") (ifseqformula "33"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "true_left" (formula "32"))
                              (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "32"))
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "true_left" (formula "31"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "26") (term "1,0") (ifseqformula "23"))
                              (rule "replace_known_right" (formula "26") (term "0") (ifseqformula "36"))
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "26"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "applyEqReverse" (formula "38") (term "0,1,1,0") (ifseqformula "4"))
                              (rule "applyEqReverse" (formula "38") (term "0,0,0,1,0") (ifseqformula "4"))
                              (builtin "One Step Simplification" (formula "38"))
                              (rule "allRight" (formula "38") (inst "sk=iv_13"))
                              (rule "orRight" (formula "38"))
                              (rule "orRight" (formula "38"))
                              (rule "applyEqReverse" (formula "40") (term "1,1,1") (ifseqformula "4"))
                              (rule "applyEqReverse" (formula "40") (term "0,1,1,1,0,1") (ifseqformula "4"))
                              (rule "hideAuxiliaryEq" (formula "4"))
                              (rule "inEqSimp_geqRight" (formula "38"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_leqRight" (formula "38"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "1")))
                              (rule "inEqSimp_homoInEq0" (formula "39") (term "0,0"))
                              (rule "eqSymm" (formula "39"))
                              (rule "polySimp_addComm1" (formula "39") (term "0,0,1"))
                              (rule "inEqSimp_homoInEq0" (formula "39") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "39") (term "0,0,0"))
                              (rule "eqSymm" (formula "39"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "0,1"))
                              (rule "polySimp_mulComm0" (formula "39") (term "1,0,1"))
                              (rule "polySimp_rightDist" (formula "39") (term "1,0,1"))
                              (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,1"))
                              (rule "mul_literals" (formula "39") (term "0,1,0,1"))
                              (rule "polySimp_elimOne" (formula "39") (term "1,1,0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "39") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "39") (term "1,0,0"))
                              (rule "mul_literals" (formula "39") (term "0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "39") (term "1,1,0,0"))
                              (rule "pullOutSelect" (formula "39") (term "1,0") (inst "selectSK=arr_23"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "22"))
                              (rule "eqSymm" (formula "40"))
                              (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "pullOutSelect" (formula "40") (term "1,0") (inst "selectSK=arr_24"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "32"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "replaceKnownSelect_taclet0011000010_13" (formula "1") (term "2,0"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "27"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "23"))
                              (rule "pullOutSelect" (formula "2") (term "2,0") (inst "selectSK=arr_25"))
                              (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "24"))
                              (builtin "One Step Simplification" (formula "2"))
                              (rule "arrayLengthNotNegative" (formula "11") (term "0"))
                              (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "10"))
                              (rule "leq_literals" (formula "11") (term "0"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "true_left" (formula "11"))
                              (rule "arrayLengthIsAShort" (formula "11") (term "0"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "true_left" (formula "11"))
                              (rule "ifthenelse_split" (formula "8") (term "0"))
                              (branch " (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>).<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE TRUE"
                                 (rule "applyEqReverse" (formula "3") (term "1,0,0,0,1,0,0") (ifseqformula "9"))
                                 (rule "applyEqReverse" (formula "43") (term "0,0,0,1") (ifseqformula "9"))
                                 (rule "applyEqReverse" (formula "43") (term "0,0,0,0") (ifseqformula "9"))
                                 (rule "applyEqReverse" (formula "1") (term "1,0,1,0,0,1,0,0") (ifseqformula "9"))
                                 (rule "applyEqReverse" (formula "1") (term "1,0,1,0,1,0,0") (ifseqformula "9"))
                                 (rule "applyEqReverse" (formula "2") (term "1,1,0") (ifseqformula "9"))
                                 (rule "applyEqReverse" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "9"))
                                 (rule "applyEqReverse" (formula "5") (term "0,0,0,0") (ifseqformula "9"))
                                 (rule "applyEqReverse" (formula "2") (term "0,0,0,0,0") (ifseqformula "9"))
                                 (rule "applyEqReverse" (formula "5") (term "0,1,0") (ifseqformula "9"))
                                 (rule "applyEqReverse" (formula "3") (term "1,0,1,0,1,0,0") (ifseqformula "9"))
                                 (rule "applyEqReverse" (formula "1") (term "0,0,0,0,0") (ifseqformula "9"))
                                 (rule "applyEqReverse" (formula "3") (term "0,0,0,0,0") (ifseqformula "9"))
                                 (rule "applyEqReverse" (formula "3") (term "1,1,0") (ifseqformula "9"))
                                 (rule "applyEqReverse" (formula "1") (term "1,0,0,0,0,1,0,0") (ifseqformula "9"))
                                 (rule "applyEqReverse" (formula "1") (term "1,1,0") (ifseqformula "9"))
                                 (rule "applyEqReverse" (formula "2") (term "1,2,0") (ifseqformula "9"))
                                 (rule "hideAuxiliaryEq" (formula "9"))
                                 (rule "allLeft" (formula "18") (inst "t=iv_10"))
                                 (rule "inEqSimp_homoInEq1" (formula "18") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "18") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "18") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "18") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "18") (term "0,0") (ifseqformula "9"))
                                 (rule "qeq_literals" (formula "18") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "allLeft" (formula "39") (inst "t=iv_10"))
                                 (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "39") (term "1,0") (ifseqformula "9"))
                                 (rule "qeq_literals" (formula "39") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "39"))
                                 (rule "pullOutSelect" (formula "39") (term "0,0,0") (inst "selectSK=arr_27"))
                                 (rule "simplifySelectOfAnonEQ" (formula "39") (ifseqformula "34"))
                                 (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "49")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "39") (term "0,0,0") (ifseqformula "29"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "39") (term "0,0,0,0") (ifseqformula "25"))
                                 (rule "replace_known_right" (formula "39") (term "0,0,0,0,0") (ifseqformula "46"))
                                 (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "47")) (ifInst ""  (formula "48")))
                                 (rule "applyEqReverse" (formula "40") (term "0,0,0") (ifseqformula "39"))
                                 (rule "hideAuxiliaryEq" (formula "39"))
                                 (rule "narrowSelectArrayType" (formula "39") (term "0,0,0") (ifseqformula "33") (ifseqformula "48"))
                                 (rule "allLeft" (formula "23") (inst "t=iv_10"))
                                 (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "23") (term "1,0") (ifseqformula "9"))
                                 (rule "qeq_literals" (formula "23") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "23"))
                                 (rule "allLeft" (formula "21") (inst "t=iv_10"))
                                 (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "21") (term "1,0") (ifseqformula "9"))
                                 (rule "qeq_literals" (formula "21") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "21"))
                                 (rule "ifthenelse_split" (formula "5") (term "0"))
                                 (branch " (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@anon_heap_setEquality<<anonHeapFunction>>.length >= 1 TRUE"
                                    (rule "replace_known_left" (formula "47") (term "0,0") (ifseqformula "6"))
                                    (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "6")))
                                    (rule "ifthenelse_split" (formula "2") (term "0"))
                                    (branch " ! (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@anon_heap_setEquality<<anonHeapFunction>> = null & ! ((verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@anon_heap_setEquality<<anonHeapFunction>>).<created> = TRUE TRUE"
                                       (rule "andLeft" (formula "2"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                       (rule "hideAuxiliaryEq" (formula "2"))
                                       (rule "replace_known_right" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "43"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")))
                                       (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "44"))
                                       (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "43")))
                                       (rule "ifthenelse_negated" (formula "1") (term "0"))
                                       (rule "ifthenelse_negated" (formula "2") (term "0"))
                                       (rule "narrowSelectArrayType" (formula "2") (term "1,0") (ifseqformula "26") (ifseqformula "44"))
                                       (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "35") (ifseqformula "44"))
                                       (rule "narrowSelectArrayType" (formula "2") (term "2,0") (ifseqformula "30") (ifseqformula "44"))
                                       (rule "ifthenelse_split" (formula "2") (term "0"))
                                       (branch " (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10].<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE TRUE"
                                          (rule "applyEqReverse" (formula "49") (term "1") (ifseqformula "3"))
                                          (rule "applyEqReverse" (formula "1") (term "1,0") (ifseqformula "3"))
                                          (rule "hideAuxiliaryEq" (formula "3"))
                                          (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "2"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "applyEqReverse" (formula "48") (term "0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "48"))
                                          (rule "closeTrue" (formula "48"))
                                       )
                                       (branch " (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10].<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE FALSE"
                                          (rule "referencedObjectIsCreatedRight" (formula "43") (ifseqformula "45"))
                                          (rule "close" (formula "43") (ifseqformula "26"))
                                       )
                                    )
                                    (branch " ! (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@anon_heap_setEquality<<anonHeapFunction>> = null & ! ((verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@anon_heap_setEquality<<anonHeapFunction>>).<created> = TRUE FALSE"
                                       (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                       (rule "hideAuxiliaryEq" (formula "2"))
                                       (rule "ifthenelse_split" (formula "2") (term "0"))
                                       (branch " ! (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@anon_heap_setEquality<<anonHeapFunction>> = null & !( ((verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@anon_heap_setEquality<<anonHeapFunction>>).<created> = TRUE | (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10].<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE) TRUE"
                                          (rule "andLeft" (formula "2"))
                                          (rule "notLeft" (formula "2"))
                                          (rule "notLeft" (formula "2"))
                                          (rule "orRight" (formula "43"))
                                          (rule "referencedObjectIsCreatedRight" (formula "44") (ifseqformula "45"))
                                          (rule "close" (formula "44") (ifseqformula "26"))
                                       )
                                       (branch " ! (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@anon_heap_setEquality<<anonHeapFunction>> = null & !( ((verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@anon_heap_setEquality<<anonHeapFunction>>).<created> = TRUE | (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10].<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE) FALSE"
                                          (rule "applyEqReverse" (formula "48") (term "1") (ifseqformula "2"))
                                          (rule "applyEqReverse" (formula "1") (term "2,0") (ifseqformula "2"))
                                          (rule "hideAuxiliaryEq" (formula "2"))
                                          (rule "eqSymm" (formula "47"))
                                          (rule "ifthenelse_split" (formula "1") (term "0"))
                                          (branch " ! (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@anon_heap_setEquality<<anonHeapFunction>> = null & !( ((verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@anon_heap_setEquality<<anonHeapFunction>>).<created> = TRUE | (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10].<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE | ((verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@anon_heap_setEquality<<anonHeapFunction>>).<created>@anon_heap_storeMessages<<anonHeapFunction>> = TRUE) TRUE"
                                             (rule "andLeft" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "orRight" (formula "42"))
                                             (rule "orRight" (formula "42"))
                                             (rule "referencedObjectIsCreatedRight" (formula "43") (ifseqformula "45"))
                                             (rule "close" (formula "43") (ifseqformula "25"))
                                          )
                                          (branch " ! (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@anon_heap_setEquality<<anonHeapFunction>> = null & !( ((verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@anon_heap_setEquality<<anonHeapFunction>>).<created> = TRUE | (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10].<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE | ((verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@anon_heap_setEquality<<anonHeapFunction>>).<created>@anon_heap_storeMessages<<anonHeapFunction>> = TRUE) FALSE"
                                             (rule "close" (formula "48") (ifseqformula "1"))
                                          )
                                       )
                                    )
                                 )
                                 (branch " (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@anon_heap_setEquality<<anonHeapFunction>>.length >= 1 FALSE"
                                    (rule "inEqSimp_geqRight" (formula "43"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_homoInEq1" (formula "6"))
                                    (rule "times_zero_2" (formula "6") (term "1,0"))
                                    (rule "add_zero_right" (formula "6") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                                    (rule "mul_literals" (formula "6") (term "1"))
                                    (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "6"))
                                    (rule "qeq_literals" (formula "5") (term "0"))
                                    (builtin "One Step Simplification" (formula "5"))
                                    (rule "closeFalse" (formula "5"))
                                 )
                              )
                              (branch " (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>).<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE FALSE"
                                 (rule "applyEqReverse" (formula "1") (term "1,1,0") (ifseqformula "8"))
                                 (rule "applyEqReverse" (formula "2") (term "1,2,0") (ifseqformula "8"))
                                 (rule "applyEqReverse" (formula "1") (term "0,0,0,0,0") (ifseqformula "8"))
                                 (rule "applyEqReverse" (formula "3") (term "1,0,1,0,1,0,0") (ifseqformula "8"))
                                 (rule "applyEqReverse" (formula "5") (term "0,1,0") (ifseqformula "8"))
                                 (rule "applyEqReverse" (formula "43") (term "0,0,0,0") (ifseqformula "8"))
                                 (rule "applyEqReverse" (formula "2") (term "1,1,0") (ifseqformula "8"))
                                 (rule "applyEqReverse" (formula "1") (term "1,0,1,0,0,1,0,0") (ifseqformula "8"))
                                 (rule "applyEqReverse" (formula "1") (term "1,0,1,0,1,0,0") (ifseqformula "8"))
                                 (rule "applyEqReverse" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "8"))
                                 (rule "applyEqReverse" (formula "1") (term "1,0,0,0,0,1,0,0") (ifseqformula "8"))
                                 (rule "applyEqReverse" (formula "3") (term "0,0,0,0,0") (ifseqformula "8"))
                                 (rule "applyEqReverse" (formula "2") (term "0,0,0,0,0") (ifseqformula "8"))
                                 (rule "applyEqReverse" (formula "5") (term "0,0,0,0") (ifseqformula "8"))
                                 (rule "applyEqReverse" (formula "3") (term "1,1,0") (ifseqformula "8"))
                                 (rule "applyEqReverse" (formula "43") (term "0,0,0,1") (ifseqformula "8"))
                                 (rule "applyEqReverse" (formula "3") (term "1,0,0,0,1,0,0") (ifseqformula "8"))
                                 (rule "hideAuxiliaryEq" (formula "8"))
                                 (rule "allLeft" (formula "37") (inst "t=iv_10"))
                                 (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "37") (term "1,0") (ifseqformula "8"))
                                 (rule "qeq_literals" (formula "37") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "37"))
                                 (rule "pullOutSelect" (formula "37") (term "0,0,0") (inst "selectSK=arr_26"))
                                 (rule "simplifySelectOfAnonEQ" (formula "37") (ifseqformula "32"))
                                 (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "48")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "37") (term "0,0,0") (ifseqformula "27"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "37") (term "0,0,0,0") (ifseqformula "23"))
                                 (rule "replace_known_right" (formula "37") (term "1,0,0,0,0") (ifseqformula "46"))
                                 (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "45")) (ifInst ""  (formula "47")))
                                 (rule "applyEqReverse" (formula "38") (term "0,0,0") (ifseqformula "37"))
                                 (rule "hideAuxiliaryEq" (formula "37"))
                                 (rule "narrowSelectArrayType" (formula "37") (term "0,0,0") (ifseqformula "31") (ifseqformula "47"))
                                 (rule "allLeft" (formula "17") (inst "t=iv_10"))
                                 (rule "inEqSimp_homoInEq1" (formula "17") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "17") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "17") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "17") (term "1,1,0"))
                                 (rule "mul_literals" (formula "17") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "17") (term "0,0") (ifseqformula "8"))
                                 (rule "qeq_literals" (formula "17") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "17"))
                                 (rule "allLeft" (formula "22") (inst "t=iv_10"))
                                 (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "22") (term "1,0") (ifseqformula "8"))
                                 (rule "qeq_literals" (formula "22") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "allLeft" (formula "20") (inst "t=iv_10"))
                                 (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "20") (term "1,0") (ifseqformula "8"))
                                 (rule "qeq_literals" (formula "20") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "ifthenelse_split" (formula "2") (term "0"))
                                 (branch " ! verif.selectvoting.system.core.ConservativeExtension.messages[iv_10]@anon_heap_storeMessages<<anonHeapFunction>> = null & ! (verif.selectvoting.system.core.ConservativeExtension.messages[iv_10]@anon_heap_storeMessages<<anonHeapFunction>>).<created> = TRUE TRUE"
                                    (rule "andLeft" (formula "2"))
                                    (rule "notLeft" (formula "3"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                    (rule "hideAuxiliaryEq" (formula "2"))
                                    (rule "replace_known_right" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "42"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")))
                                    (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "41"))
                                    (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "42")))
                                    (rule "ifthenelse_negated" (formula "1") (term "0"))
                                    (rule "ifthenelse_negated" (formula "2") (term "0"))
                                    (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "33") (ifseqformula "41"))
                                    (rule "narrowSelectArrayType" (formula "2") (term "1,0") (ifseqformula "24") (ifseqformula "41"))
                                    (rule "narrowSelectArrayType" (formula "2") (term "2,0") (ifseqformula "28") (ifseqformula "41"))
                                    (rule "ifthenelse_split" (formula "4") (term "0"))
                                    (branch " verif.selectvoting.system.core.ConservativeExtension.messages[iv_10]@anon_heap_storeMessages<<anonHeapFunction>>.length >= 1 TRUE"
                                       (rule "replace_known_left" (formula "48") (term "0,1") (ifseqformula "5"))
                                       (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "5")))
                                       (rule "ifthenelse_split" (formula "2") (term "0"))
                                       (branch " (verif.selectvoting.system.core.ConservativeExtension.messages[iv_10]@anon_heap_storeMessages<<anonHeapFunction>>).<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE TRUE"
                                          (rule "applyEqReverse" (formula "1") (term "1,0") (ifseqformula "3"))
                                          (rule "applyEqReverse" (formula "49") (term "1") (ifseqformula "3"))
                                          (rule "hideAuxiliaryEq" (formula "3"))
                                          (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "2"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "applyEqReverse" (formula "48") (term "0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "48"))
                                          (rule "closeTrue" (formula "48"))
                                       )
                                       (branch " (verif.selectvoting.system.core.ConservativeExtension.messages[iv_10]@anon_heap_storeMessages<<anonHeapFunction>>).<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE FALSE"
                                          (rule "applyEqReverse" (formula "49") (term "1") (ifseqformula "2"))
                                          (rule "applyEqReverse" (formula "1") (term "1,0") (ifseqformula "2"))
                                          (rule "hideAuxiliaryEq" (formula "2"))
                                          (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "41"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "ifthenelse_split" (formula "1") (term "0"))
                                          (branch " verif.selectvoting.system.core.ConservativeExtension.messages[iv_10].<created>@anon_heap_storeMessages<<anonHeapFunction>> = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "49") (term "0") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "49"))
                                             (rule "closeTrue" (formula "49"))
                                          )
                                          (branch " verif.selectvoting.system.core.ConservativeExtension.messages[iv_10].<created>@anon_heap_storeMessages<<anonHeapFunction>> = TRUE FALSE"
                                             (rule "referencedObjectIsCreatedRight" (formula "41") (ifseqformula "43"))
                                             (rule "close" (formula "41") (ifseqformula "28"))
                                          )
                                       )
                                    )
                                    (branch " verif.selectvoting.system.core.ConservativeExtension.messages[iv_10]@anon_heap_storeMessages<<anonHeapFunction>>.length >= 1 FALSE"
                                       (rule "inEqSimp_geqRight" (formula "41"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_homoInEq1" (formula "5"))
                                       (rule "times_zero_2" (formula "5") (term "1,0"))
                                       (rule "add_zero_right" (formula "5") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                       (rule "mul_literals" (formula "5") (term "1"))
                                       (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "5"))
                                       (rule "qeq_literals" (formula "4") (term "0"))
                                       (builtin "One Step Simplification" (formula "4"))
                                       (rule "closeFalse" (formula "4"))
                                    )
                                 )
                                 (branch " ! verif.selectvoting.system.core.ConservativeExtension.messages[iv_10]@anon_heap_storeMessages<<anonHeapFunction>> = null & ! (verif.selectvoting.system.core.ConservativeExtension.messages[iv_10]@anon_heap_storeMessages<<anonHeapFunction>>).<created> = TRUE FALSE"
                                    (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                    (rule "hideAuxiliaryEq" (formula "2"))
                                    (rule "ifthenelse_split" (formula "4") (term "0"))
                                    (branch " verif.selectvoting.system.core.ConservativeExtension.messages[iv_10]@anon_heap_storeMessages<<anonHeapFunction>>.length >= 1 TRUE"
                                       (rule "replace_known_left" (formula "47") (term "0,1") (ifseqformula "5"))
                                       (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "5")))
                                       (rule "ifthenelse_split" (formula "2") (term "0"))
                                       (branch " ! verif.selectvoting.system.core.ConservativeExtension.messages[iv_10]@anon_heap_storeMessages<<anonHeapFunction>> = null & !( (verif.selectvoting.system.core.ConservativeExtension.messages[iv_10]@anon_heap_storeMessages<<anonHeapFunction>>).<created> = TRUE | (verif.selectvoting.system.core.ConservativeExtension.messages[iv_10]@anon_heap_storeMessages<<anonHeapFunction>>).<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE) TRUE"
                                          (rule "andLeft" (formula "2"))
                                          (rule "notLeft" (formula "3"))
                                          (rule "notLeft" (formula "2"))
                                          (rule "orRight" (formula "43"))
                                          (rule "applyEqReverse" (formula "1") (term "2,0") (ifseqformula "2"))
                                          (rule "applyEqReverse" (formula "50") (term "1") (ifseqformula "2"))
                                          (rule "hideAuxiliaryEq" (formula "2"))
                                          (rule "eqSymm" (formula "49"))
                                          (rule "replace_known_right" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "42"))
                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")) (ifInst ""  (formula "43")))
                                          (rule "replace_known_right" (formula "44") (term "0,0") (ifseqformula "41"))
                                          (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "42")))
                                          (rule "closeTrue" (formula "44"))
                                       )
                                       (branch " ! verif.selectvoting.system.core.ConservativeExtension.messages[iv_10]@anon_heap_storeMessages<<anonHeapFunction>> = null & !( (verif.selectvoting.system.core.ConservativeExtension.messages[iv_10]@anon_heap_storeMessages<<anonHeapFunction>>).<created> = TRUE | (verif.selectvoting.system.core.ConservativeExtension.messages[iv_10]@anon_heap_storeMessages<<anonHeapFunction>>).<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE) FALSE"
                                          (rule "applyEqReverse" (formula "1") (term "2,0") (ifseqformula "2"))
                                          (rule "applyEqReverse" (formula "48") (term "1") (ifseqformula "2"))
                                          (rule "hideAuxiliaryEq" (formula "2"))
                                          (rule "eqSymm" (formula "47"))
                                          (rule "ifthenelse_split" (formula "1") (term "0"))
                                          (branch " ! verif.selectvoting.system.core.ConservativeExtension.messages[iv_10]@anon_heap_storeMessages<<anonHeapFunction>> = null & !( (verif.selectvoting.system.core.ConservativeExtension.messages[iv_10]@anon_heap_storeMessages<<anonHeapFunction>>).<created> = TRUE | (verif.selectvoting.system.core.ConservativeExtension.messages[iv_10]@anon_heap_storeMessages<<anonHeapFunction>>).<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE | verif.selectvoting.system.core.ConservativeExtension.messages[iv_10].<created>@anon_heap_storeMessages<<anonHeapFunction>> = TRUE) TRUE"
                                             (rule "andLeft" (formula "1"))
                                             (rule "notLeft" (formula "2"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "orRight" (formula "42"))
                                             (rule "referencedObjectIsCreatedRight" (formula "43") (ifseqformula "41"))
                                             (rule "close" (formula "43") (ifseqformula "28"))
                                          )
                                          (branch " ! verif.selectvoting.system.core.ConservativeExtension.messages[iv_10]@anon_heap_storeMessages<<anonHeapFunction>> = null & !( (verif.selectvoting.system.core.ConservativeExtension.messages[iv_10]@anon_heap_storeMessages<<anonHeapFunction>>).<created> = TRUE | (verif.selectvoting.system.core.ConservativeExtension.messages[iv_10]@anon_heap_storeMessages<<anonHeapFunction>>).<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE | verif.selectvoting.system.core.ConservativeExtension.messages[iv_10].<created>@anon_heap_storeMessages<<anonHeapFunction>> = TRUE) FALSE"
                                             (rule "close" (formula "48") (ifseqformula "1"))
                                          )
                                       )
                                    )
                                    (branch " verif.selectvoting.system.core.ConservativeExtension.messages[iv_10]@anon_heap_storeMessages<<anonHeapFunction>>.length >= 1 FALSE"
                                       (rule "inEqSimp_geqRight" (formula "41"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_homoInEq1" (formula "5"))
                                       (rule "mul_literals" (formula "5") (term "1,0"))
                                       (rule "add_zero_right" (formula "5") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                       (rule "mul_literals" (formula "5") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "4"))
                                       (rule "qeq_literals" (formula "5") (term "0"))
                                       (builtin "One Step Simplification" (formula "5"))
                                       (rule "closeFalse" (formula "5"))
                                    )
                                 )
                              )
                           )
                           (branch " ! verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>> = null & ! (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>).<created> = TRUE FALSE"
                              (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "lenNonNegative" (formula "42") (term "0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "26") (term "1,0") (ifseqformula "23"))
                              (rule "equalityToSeqGetAndSeqLenLeft" (formula "32") (inst "iv=iv"))
                              (rule "andLeft" (formula "32"))
                              (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0"))
                              (rule "applyEq" (formula "33") (term "0,0,1,0,0,1,0,0") (ifseqformula "34"))
                              (rule "applyEq" (formula "33") (term "0,0,1,0") (ifseqformula "34"))
                              (builtin "One Step Simplification" (formula "33"))
                              (rule "true_left" (formula "33"))
                              (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "33"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "true_left" (formula "32"))
                              (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                              (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "6"))
                              (rule "leq_literals" (formula "7") (term "0"))
                              (builtin "One Step Simplification" (formula "7"))
                              (rule "true_left" (formula "7"))
                              (rule "arrayLengthIsAShort" (formula "7") (term "0"))
                              (builtin "One Step Simplification" (formula "7"))
                              (rule "true_left" (formula "7"))
                              (rule "arrayLengthIsAShort" (formula "37") (term "1,1,0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                              (rule "ifthenelse_split" (formula "4") (term "0"))
                              (branch " ! verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>> = null & !( (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>).<created> = TRUE | (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>).<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE) TRUE"
                                 (rule "andLeft" (formula "4"))
                                 (rule "notLeft" (formula "4"))
                                 (rule "notLeft" (formula "4"))
                                 (rule "orRight" (formula "36"))
                                 (rule "applyEqReverse" (formula "41") (term "0,1,1,1,0,0,1") (ifseqformula "4"))
                                 (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                 (rule "applyEqReverse" (formula "41") (term "1,1,0,1,0,1") (ifseqformula "4"))
                                 (rule "applyEqReverse" (formula "41") (term "0,0,0,1,1,0,0,1") (ifseqformula "4"))
                                 (rule "applyEqReverse" (formula "41") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "4"))
                                 (rule "applyEqReverse" (formula "41") (term "0,0,0,0,0") (ifseqformula "4"))
                                 (rule "applyEqReverse" (formula "41") (term "0,1,0,0") (ifseqformula "4"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "37"))
                                 (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "35")) (ifInst ""  (formula "36")))
                                 (rule "replace_known_right" (formula "26") (term "0") (ifseqformula "37"))
                                 (builtin "One Step Simplification" (formula "26"))
                                 (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "26"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "applyEqReverse" (formula "40") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "4"))
                                 (rule "applyEqReverse" (formula "40") (term "1,1,1,1,0,1") (ifseqformula "4"))
                                 (rule "applyEqReverse" (formula "1") (term "0,0") (ifseqformula "4"))
                                 (rule "applyEqReverse" (formula "40") (term "0,0,0,1,0") (ifseqformula "4"))
                                 (rule "applyEqReverse" (formula "40") (term "0,1,1,0") (ifseqformula "4"))
                                 (builtin "One Step Simplification" (formula "40"))
                                 (rule "allRight" (formula "40") (inst "sk=iv_12"))
                                 (rule "orRight" (formula "40"))
                                 (rule "orRight" (formula "40"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "replace_known_right" (formula "37") (term "0,1") (ifseqformula "34"))
                                 (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "36")))
                                 (rule "closeTrue" (formula "37"))
                              )
                              (branch " ! verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>> = null & !( (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>).<created> = TRUE | (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>).<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE) FALSE"
                                 (rule "applyEqReverse" (formula "39") (term "0,0,0,1,1,0,0,1") (ifseqformula "4"))
                                 (rule "applyEqReverse" (formula "39") (term "1,1,0,1,0,1") (ifseqformula "4"))
                                 (rule "applyEqReverse" (formula "39") (term "0,1,1,1,0,0,1") (ifseqformula "4"))
                                 (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                 (rule "applyEqReverse" (formula "39") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "4"))
                                 (rule "applyEqReverse" (formula "39") (term "0,0,0,0,0") (ifseqformula "4"))
                                 (rule "applyEqReverse" (formula "39") (term "0,1,0,0") (ifseqformula "4"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "ifthenelse_split" (formula "38") (term "0,0"))
                                 (branch " (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10].length >= 1 TRUE"
                                    (rule "eqSymm" (formula "39") (term "0"))
                                    (rule "replace_known_left" (formula "39") (term "0,1,1,0,0,1") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "ifthenelse_split" (formula "5") (term "0"))
                                    (branch " ! verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>> = null & !( (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>).<created> = TRUE | (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>).<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE | verif.selectvoting.system.core.ConservativeExtension.messages.<created>@anon_heap_storeMessages<<anonHeapFunction>> = TRUE) TRUE"
                                       (rule "andLeft" (formula "5"))
                                       (rule "notLeft" (formula "6"))
                                       (rule "notLeft" (formula "5"))
                                       (rule "orRight" (formula "37"))
                                       (rule "referencedObjectIsCreatedRight" (formula "38") (ifseqformula "36"))
                                       (rule "close" (formula "38") (ifseqformula "24"))
                                    )
                                    (branch " ! verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>> = null & !( (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>).<created> = TRUE | (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>).<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE | verif.selectvoting.system.core.ConservativeExtension.messages.<created>@anon_heap_storeMessages<<anonHeapFunction>> = TRUE) FALSE"
                                       (rule "applyEqReverse" (formula "40") (term "0,1,0,0") (ifseqformula "5"))
                                       (builtin "One Step Simplification" (formula "40"))
                                       (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "5"))
                                       (rule "applyEqReverse" (formula "40") (term "0,0,0,0") (ifseqformula "5"))
                                       (rule "applyEqReverse" (formula "40") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "5"))
                                       (rule "applyEqReverse" (formula "40") (term "1,1,1,1,0,1") (ifseqformula "5"))
                                       (rule "hideAuxiliaryEq" (formula "5"))
                                       (rule "eqSymm" (formula "39") (term "1,0"))
                                       (rule "replace_known_left" (formula "39") (term "0,0") (ifseqformula "1"))
                                       (builtin "One Step Simplification" (formula "39"))
                                       (rule "allRight" (formula "39") (inst "sk=iv_11"))
                                       (rule "orRight" (formula "39"))
                                       (rule "orRight" (formula "39"))
                                       (rule "inEqSimp_leqRight" (formula "39"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "replace_known_left" (formula "41") (term "0,0,1") (ifseqformula "1"))
                                       (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "1")))
                                       (rule "inEqSimp_geqRight" (formula "40"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "inEqSimp_homoInEq0" (formula "41") (term "0,1"))
                                       (rule "polySimp_addComm1" (formula "41") (term "0,0,1"))
                                       (rule "inEqSimp_homoInEq0" (formula "41") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "41") (term "0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "0,1"))
                                       (rule "polySimp_mulComm0" (formula "41") (term "1,0,1"))
                                       (rule "polySimp_rightDist" (formula "41") (term "1,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,1"))
                                       (rule "mul_literals" (formula "41") (term "0,1,0,1"))
                                       (rule "polySimp_elimOne" (formula "41") (term "1,1,0,1"))
                                       (rule "replace_known_left" (formula "41") (term "0,1") (ifseqformula "1"))
                                       (builtin "One Step Simplification" (formula "41"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "41") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "41") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "41") (term "0,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "41") (term "1,1,0,0"))
                                       (rule "replace_known_left" (formula "41") (term "0,0") (ifseqformula "1"))
                                       (builtin "One Step Simplification" (formula "41"))
                                       (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "3"))
                                       (rule "leq_literals" (formula "4") (term "0"))
                                       (builtin "One Step Simplification" (formula "4"))
                                       (rule "true_left" (formula "4"))
                                       (rule "pullOutSelect" (formula "40") (term "1") (inst "selectSK=arr_19"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "26"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "22"))
                                       (rule "pullOutSelect" (formula "41") (term "0") (inst "selectSK=arr_20"))
                                       (rule "applyEq" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "23"))
                                       (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=arr_21"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "allLeft" (formula "38") (inst "t=iv_10"))
                                       (rule "inEqSimp_commuteGeq" (formula "38") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "38") (term "1,0") (ifseqformula "9"))
                                       (rule "qeq_literals" (formula "38") (term "0,1,0"))
                                       (builtin "One Step Simplification" (formula "38"))
                                       (rule "pullOutSelect" (formula "38") (term "0,0,0") (inst "selectSK=arr_22"))
                                       (rule "simplifySelectOfAnonEQ" (formula "38") (ifseqformula "33"))
                                       (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "49")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "38") (term "0,0,0") (ifseqformula "28"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "38") (term "0,0,0,0") (ifseqformula "24"))
                                       (rule "replace_known_right" (formula "38") (term "1,0,0,0") (ifseqformula "48"))
                                       (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "46")) (ifInst ""  (formula "47")))
                                       (rule "applyEqReverse" (formula "39") (term "0,0,0") (ifseqformula "38"))
                                       (rule "hideAuxiliaryEq" (formula "38"))
                                       (rule "narrowSelectArrayType" (formula "38") (term "0,0,0") (ifseqformula "32") (ifseqformula "48"))
                                       (rule "allLeft" (formula "18") (inst "t=iv_10"))
                                       (rule "inEqSimp_homoInEq1" (formula "18") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "18") (term "0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "18") (term "1,1,0"))
                                       (rule "polySimp_rightDist" (formula "18") (term "1,1,0"))
                                       (rule "mul_literals" (formula "18") (term "0,1,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0"))
                                       (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "18") (term "0,0") (ifseqformula "9"))
                                       (rule "qeq_literals" (formula "18") (term "0,0,0"))
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "allLeft" (formula "21") (inst "t=iv_10"))
                                       (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "21") (term "1,0") (ifseqformula "9"))
                                       (rule "qeq_literals" (formula "21") (term "0,1,0"))
                                       (builtin "One Step Simplification" (formula "21"))
                                       (rule "allLeft" (formula "24") (inst "t=iv_10"))
                                       (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "24") (term "1,0") (ifseqformula "9"))
                                       (rule "qeq_literals" (formula "24") (term "0,1,0"))
                                       (builtin "One Step Simplification" (formula "24"))
                                       (rule "ifthenelse_split" (formula "1") (term "0"))
                                       (branch " ! (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10] = null & ! (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10].<created> = TRUE TRUE"
                                          (rule "andLeft" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "referencedObjectIsCreatedRight" (formula "43") (ifseqformula "44"))
                                          (rule "close" (formula "43") (ifseqformula "13"))
                                       )
                                       (branch " ! (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10] = null & ! (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10].<created> = TRUE FALSE"
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "arrayLengthIsAShort" (formula "5") (term "0"))
                                          (builtin "One Step Simplification" (formula "5"))
                                          (rule "true_left" (formula "5"))
                                          (rule "arrayLengthNotNegative" (formula "5") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "6"))
                                          (rule "leq_literals" (formula "5") (term "0"))
                                          (builtin "One Step Simplification" (formula "5"))
                                          (rule "true_left" (formula "5"))
                                          (rule "ifthenelse_split" (formula "1") (term "0"))
                                          (branch " ! (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10] = null & !( (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10].<created> = TRUE | ((verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@heap).<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE) TRUE"
                                             (rule "andLeft" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "orRight" (formula "42"))
                                             (rule "referencedObjectIsCreatedRight" (formula "42") (ifseqformula "44"))
                                             (rule "close" (formula "42") (ifseqformula "12"))
                                          )
                                          (branch " ! (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10] = null & !( (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10].<created> = TRUE | ((verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@heap).<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE) FALSE"
                                             (rule "applyEqReverse" (formula "48") (term "0") (ifseqformula "1"))
                                             (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "ifthenelse_split" (formula "1") (term "0"))
                                             (branch " ! (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10] = null & !( (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10].<created> = TRUE | ((verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@heap).<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE | ((verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@heap).<created>@anon_heap_storeMessages<<anonHeapFunction>> = TRUE) TRUE"
                                                (rule "andLeft" (formula "1"))
                                                (rule "notLeft" (formula "2"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "orRight" (formula "42"))
                                                (rule "orRight" (formula "42"))
                                                (rule "referencedObjectIsCreatedRight" (formula "42") (ifseqformula "41"))
                                                (rule "close" (formula "42") (ifseqformula "11"))
                                             )
                                             (branch " ! (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10] = null & !( (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10].<created> = TRUE | ((verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@heap).<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE | ((verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10]@heap).<created>@anon_heap_storeMessages<<anonHeapFunction>> = TRUE) FALSE"
                                                (rule "close" (formula "48") (ifseqformula "1"))
                                             )
                                          )
                                       )
                                    )
                                 )
                                 (branch " (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>)[iv_10].length >= 1 FALSE"
                                    (rule "eqSymm" (formula "39") (term "0"))
                                    (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "38")))
                                    (rule "inEqSimp_geqRight" (formula "38"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_notGeq" (formula "39") (term "0,0"))
                                    (rule "mul_literals" (formula "39") (term "1,0,0,0,0"))
                                    (rule "add_literals" (formula "39") (term "0,0,0,0"))
                                    (rule "add_zero_left" (formula "39") (term "0,0,0"))
                                    (rule "inEqSimp_or_tautInEq0" (formula "39") (term "0,0,1"))
                                    (rule "add_zero_right" (formula "39") (term "1,1,0,0,1"))
                                    (rule "qeq_literals" (formula "39") (term "1,0,0,1"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "orRight" (formula "39"))
                                    (rule "inEqSimp_leqRight" (formula "39"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "mul_literals" (formula "1") (term "1"))
                                    (rule "inEqSimp_contradEq7" (formula "40") (ifseqformula "1"))
                                    (rule "times_zero_1" (formula "40") (term "1,0,0"))
                                    (rule "add_literals" (formula "40") (term "0,0"))
                                    (rule "leq_literals" (formula "40") (term "0"))
                                    (builtin "One Step Simplification" (formula "40"))
                                    (rule "false_right" (formula "40"))
                                    (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "1"))
                                    (rule "leq_literals" (formula "3") (term "0"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "true_left" (formula "3"))
                                    (rule "ifthenelse_split" (formula "5") (term "0"))
                                    (branch " ! verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>> = null & !( (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>).<created> = TRUE | (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>).<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE | verif.selectvoting.system.core.ConservativeExtension.messages.<created>@anon_heap_storeMessages<<anonHeapFunction>> = TRUE) TRUE"
                                       (rule "andLeft" (formula "5"))
                                       (rule "notLeft" (formula "6"))
                                       (rule "notLeft" (formula "5"))
                                       (rule "orRight" (formula "37"))
                                       (rule "referencedObjectIsCreatedRight" (formula "38") (ifseqformula "36"))
                                       (rule "close" (formula "38") (ifseqformula "24"))
                                    )
                                    (branch " ! verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>> = null & !( (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>).<created> = TRUE | (verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>).<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE | verif.selectvoting.system.core.ConservativeExtension.messages.<created>@anon_heap_storeMessages<<anonHeapFunction>> = TRUE) FALSE"
                                       (rule "applyEqReverse" (formula "1") (term "0,0") (ifseqformula "5"))
                                       (rule "hideAuxiliaryEq" (formula "5"))
                                       (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
                                       (rule "qeq_literals" (formula "1") (term "0"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                 )
                              )
                           )
                        )
                        (branch " verif.selectvoting.system.core.ConservativeExtension.messages@anon_heap_storeMessages<<anonHeapFunction>>.length >= 1 FALSE"
                           (rule "inEqSimp_geqRight" (formula "33"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "7"))
                           (rule "mul_literals" (formula "7") (term "1,0"))
                           (rule "add_zero_right" (formula "7") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "7"))
                           (rule "mul_literals" (formula "7") (term "1"))
                           (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "7"))
                           (rule "qeq_literals" (formula "6") (term "0"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "closeFalse" (formula "6"))
                        )
                     )
                  )
               )
               (branch "Case 2"
                  (rule "andRight" (formula "32") (userinteraction))
                  (branch "Case 1"
                     (rule "replaceKnownSelect_taclet0010_2" (formula "32") (term "0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet0010_5" (formula "32") (term "0,0"))
                     (rule "close" (formula "32") (ifseqformula "23"))
                  )
                  (branch "Case 2"
                     (rule "andRight" (formula "32") (userinteraction))
                     (branch "Case 1"
                        (rule "impRight" (formula "32") (userinteraction))
                        (rule "replaceKnownSelect_taclet0010_2" (formula "1") (term "0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0010_5" (formula "1") (term "0,0"))
                        (rule "notLeft" (formula "1"))
                        (rule "replace_known_right" (formula "24") (term "0,0") (ifseqformula "26"))
                        (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "33")))
                        (rule "closeFalse" (formula "24"))
                     )
                     (branch "Case 2"
                        (rule "allRight" (formula "32") (inst "sk=i_11"))
                        (rule "orRight" (formula "32"))
                        (rule "notRight" (formula "33"))
                        (rule "orRight" (formula "33"))
                        (rule "inEqSimp_geqRight" (formula "34"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "34"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "applyEq" (formula "17") (term "1") (ifseqformula "4"))
                        (builtin "One Step Simplification" (formula "17"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_15"))
                        (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "24"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "33")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "20"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0,0") (ifseqformula "16"))
                        (rule "replace_known_right" (formula "3") (term "0,0,0,0,0") (ifseqformula "30"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "31")) (ifInst ""  (formula "32")))
                        (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "22") (ifseqformula "32"))
                        (rule "allLeft" (formula "28") (inst "t=i_11"))
                        (rule "replaceKnownSelect_taclet11100010_6" (formula "28") (term "0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet11100010_7" (formula "28") (term "0,0,0,0"))
                        (rule "narrowSelectArrayType" (formula "28") (term "0,0,0,0") (ifseqformula "22") (ifseqformula "33"))
                        (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "28"))
                        (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                        (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                        (rule "add_literals" (formula "28") (term "0,0,1"))
                        (rule "leq_literals" (formula "28") (term "0,1"))
                        (builtin "One Step Simplification" (formula "28"))
                        (rule "inEqSimp_contradInEq1" (formula "28") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "28") (term "0"))
                        (builtin "One Step Simplification" (formula "28"))
                        (rule "closeFalse" (formula "28"))
                     )
                  )
               )
            )
            (branch "Case 2"
               (rule "allRight" (formula "32") (inst "sk=f_2"))
               (rule "allRight" (formula "32") (inst "sk=o_2"))
               (rule "orRight" (formula "32"))
               (rule "orRight" (formula "32"))
               (rule "eqSymm" (formula "34"))
               (rule "applyEq" (formula "14") (term "1") (ifseqformula "1"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=f_2_0"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "17"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "13"))
               (rule "eqSymm" (formula "35"))
               (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_2_1"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "14"))
               (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
               (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "34"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_2_2"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "36")))
               (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "commute_and" (formula "34"))
               (rule "ifthenelse_split" (formula "1") (term "0"))
               (branch " !o_2 = null & !( o_2.<created> = TRUE | o_2.<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE) TRUE"
                  (rule "andLeft" (formula "1"))
                  (rule "notLeft" (formula "2"))
                  (rule "notLeft" (formula "1"))
                  (rule "orRight" (formula "29"))
                  (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replace_known_right" (formula "1") (term "1,0,0,1,0,0") (ifseqformula "29"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "27")) (ifInst ""  (formula "28")))
                  (rule "replace_known_right" (formula "37") (term "0,1") (ifseqformula "28"))
                  (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "27")))
                  (rule "closeTrue" (formula "37"))
               )
               (branch " !o_2 = null & !( o_2.<created> = TRUE | o_2.<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE) FALSE"
                  (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "ifthenelse_split" (formula "1") (term "0"))
                  (branch " !o_2 = null & !( o_2.<created> = TRUE | o_2.<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE | o_2.<created>@anon_heap_storeMessages<<anonHeapFunction>> = TRUE) TRUE"
                     (rule "andLeft" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "orRight" (formula "27"))
                     (rule "orRight" (formula "27"))
                     (rule "applyEqReverse" (formula "40") (term "1") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "eqSymm" (formula "39"))
                     (rule "replace_known_right" (formula "37") (term "1") (ifseqformula "29"))
                     (builtin "One Step Simplification" (formula "37"))
                     (rule "false_right" (formula "37"))
                     (rule "replace_known_right" (formula "37") (term "0,0") (ifseqformula "29"))
                     (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "26")))
                     (rule "closeTrue" (formula "37"))
                  )
                  (branch " !o_2 = null & !( o_2.<created> = TRUE | o_2.<created>@anon_heap_setEquality<<anonHeapFunction>> = TRUE | o_2.<created>@anon_heap_storeMessages<<anonHeapFunction>> = TRUE) FALSE"
                     (rule "close" (formula "37") (ifseqformula "1"))
                  )
               )
            )
         )
         (branch "Exceptional Post (chooseMsg)"
            (builtin "One Step Simplification" (formula "23"))
            (builtin "One Step Simplification" (formula "20"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,0,0,1,1,0,1,1") (ifseqformula "16"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,0,0,0,1,1,0,1,1") (ifseqformula "12"))
            (rule "andLeft" (formula "20"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "1,0") (ifseqformula "20"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "0,1,0") (ifseqformula "16"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "0,0,1,0") (ifseqformula "12"))
            (rule "andLeft" (formula "21"))
            (rule "andLeft" (formula "21"))
            (rule "andLeft" (formula "23"))
            (rule "notLeft" (formula "21"))
            (rule "close" (formula "24") (ifseqformula "23"))
         )
         (branch
            (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "20")) (ifInst ""  (formula "19")) (ifInst ""  (formula "20")) (ifInst ""  (formula "19")))
            (rule "applyEq" (formula "14") (term "1") (ifseqformula "1") (userinteraction))
            (builtin "One Step Simplification" (formula "14"))
            (rule "andRight" (formula "21") (userinteraction))
            (branch "Case 1"
               (rule "andRight" (formula "21") (userinteraction))
               (branch "Case 1"
                  (rule "array2seq2dDef" (formula "8") (term "0") (inst "u=u") (userinteraction))
                  (rule "array2seq2dDef" (formula "8") (term "1") (inst "u=u") (userinteraction))
                  (rule "seqPermDefLeft" (formula "8") (inst "s=s") (inst "iv=iv") (userinteraction))
                  (rule "andLeft" (formula "8") (userinteraction))
                  (rule "exLeft" (formula "9") (inst "sk=s_0"))
                  (rule "andLeft" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "eqSymm" (formula "25"))
                  (rule "eqSymm" (formula "8"))
                  (rule "eqSymm" (formula "11") (term "1,0"))
                  (rule "eqSymm" (formula "9"))
                  (rule "lenOfSeqDef" (formula "8") (term "0"))
                  (rule "eqSymm" (formula "8"))
                  (rule "polySimp_elimSub" (formula "8") (term "1,1"))
                  (rule "times_zero_2" (formula "8") (term "1,1,1"))
                  (rule "add_zero_right" (formula "8") (term "1,1"))
                  (rule "getOfSeqDef" (formula "11") (term "0,1,0"))
                  (rule "castDel" (formula "11") (term "2,0,1,0"))
                  (rule "castDel" (formula "11") (term "1,0,1,0"))
                  (rule "add_zero_right" (formula "11") (term "0,2,1,1,0,1,0"))
                  (rule "eqSymm" (formula "11") (term "1,0"))
                  (rule "polySimp_elimSub" (formula "11") (term "1,1,0,1,1,0"))
                  (rule "times_zero_2" (formula "11") (term "1,1,1,0,1,1,0"))
                  (rule "add_zero_right" (formula "11") (term "1,1,0,1,1,0"))
                  (rule "lenOfSeqDef" (formula "9") (term "0"))
                  (rule "polySimp_elimSub" (formula "9") (term "1,0"))
                  (rule "times_zero_2" (formula "9") (term "1,1,0"))
                  (rule "add_zero_right" (formula "9") (term "1,0"))
                  (rule "lenOfSeqDef" (formula "8") (term "0"))
                  (rule "eqSymm" (formula "8"))
                  (rule "polySimp_elimSub" (formula "8") (term "1,1"))
                  (rule "times_zero_2" (formula "8") (term "1,1,1"))
                  (rule "add_zero_right" (formula "8") (term "1,1"))
                  (rule "getOfSeqDef" (formula "11") (term "0,1,0"))
                  (rule "castDel" (formula "11") (term "1,0,1,0"))
                  (rule "castDel" (formula "11") (term "2,0,1,0"))
                  (rule "add_zero_right" (formula "11") (term "0,2,1,1,0,1,0"))
                  (rule "eqSymm" (formula "11") (term "1,0"))
                  (rule "polySimp_elimSub" (formula "11") (term "1,1,0,1,1,0"))
                  (rule "times_zero_2" (formula "11") (term "1,1,1,0,1,1,0"))
                  (rule "add_zero_right" (formula "11") (term "1,1,0,1,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0"))
                  (rule "add_zero_right" (formula "9") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "8") (term "0,1"))
                  (rule "add_zero_right" (formula "8") (term "0,0,1"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0"))
                  (rule "add_zero_right" (formula "8") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0"))
                  (rule "eqSymm" (formula "11") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,1,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0"))
                  (rule "eqSymm" (formula "11") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,1,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,1,1,0"))
                  (rule "applyEq" (formula "8") (term "1") (ifseqformula "9"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0"))
                  (rule "polySimp_elimOne" (formula "9") (term "0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "0,0,0"))
                  (rule "polySimp_elimOne" (formula "8") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "11") (term "0,1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,1,0,1,1,0"))
                  (rule "mul_literals" (formula "11") (term "0,1,1,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,1,1,0"))
                  (rule "array2seqDef" (formula "12") (term "2,1") (inst "u=u_1"))
                  (rule "array2seqDef" (formula "12") (term "2,0") (inst "u=u_1"))
                  (rule "array2seqDef" (formula "11") (term "1,0,1,0") (inst "u=u"))
                  (rule "array2seqDef" (formula "11") (term "1,1,1,0") (inst "u=u"))
                  (rule "nnf_imp2or" (formula "11") (term "0"))
                  (rule "nnf_notAnd" (formula "11") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                  (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                  (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                  (rule "commute_or_2" (formula "11") (term "0"))
                  (rule "commute_or" (formula "11") (term "0,0"))
                  (rule "ifthenelse_to_or_left" (formula "11") (term "0,0,0"))
                  (rule "eqSymm" (formula "11") (term "1,1,0,0,0"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "eqSymm" (formula "11") (term "1,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "11") (term "0,0,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "11") (term "0,0,0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0,0,0"))
                  (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "11") (term "0,0,1,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "11") (term "0,1,1,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "11") (term "0,0,1,1,0,0,0"))
                  (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,1,1,0,0,0"))
                  (rule "add_zero_right" (formula "11") (term "0,0,0,0,1,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,1,1,0,0,0"))
                  (rule "mul_literals" (formula "11") (term "1,0,0,1,1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "11") (term "1,0,1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,1,1,0,0,0"))
                  (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,1,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,1,1,0,0,0"))
                  (rule "add_literals" (formula "11") (term "0,0,0,1,0,1,1,0,0,0"))
                  (rule "add_zero_left" (formula "11") (term "0,0,1,0,1,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,1,0,1,1,0,0,0"))
                  (rule "commute_or" (formula "11") (term "0,0"))
                  (rule "commute_or_2" (formula "11") (term "0"))
                  (rule "commute_or_2" (formula "11") (term "0,1,0"))
                  (rule "commute_or" (formula "11") (term "1,1,0"))
                  (rule "commute_or" (formula "11") (term "0,0,1,0"))
                  (rule "commute_or_2" (formula "11") (term "0,1,1,0"))
                  (rule "commute_or" (formula "11") (term "0,0,1,1,0"))
                  (rule "cnf_rightDist" (formula "11") (term "1,1,0"))
                  (rule "commute_or" (formula "11") (term "1,1,1,0"))
                  (rule "cnf_rightDist" (formula "11") (term "0"))
                  (rule "distr_forallAnd" (formula "11"))
                  (rule "andLeft" (formula "11"))
                  (rule "commute_or" (formula "12") (term "0"))
                  (rule "shift_paren_or" (formula "11") (term "0"))
                  (rule "shift_paren_or" (formula "11") (term "0,0"))
                  (rule "commute_or_2" (formula "11") (term "0,0,0"))
                  (rule "cnf_rightDist" (formula "12") (term "0"))
                  (rule "distr_forallAnd" (formula "12"))
                  (rule "andLeft" (formula "12"))
                  (rule "commute_or_2" (formula "13") (term "0"))
                  (rule "shift_paren_or" (formula "12") (term "0"))
                  (rule "commute_or_2" (formula "12") (term "0,0"))
                  (rule "shift_paren_or" (formula "13") (term "0,0"))
                  (rule "commute_or_2" (formula "13") (term "0,0,0"))
                  (builtin "One Step Simplification" (formula "13"))
                  (rule "commute_or" (formula "11") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "12") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "12") (term "0,0,0,0"))
                  (rule "commute_or" (formula "12") (term "0,0,0,0,0"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "ifthenelse_split" (formula "9") (term "0"))
                  (branch "msg1.length >= 1 TRUE"
                     (rule "eqSymm" (formula "10"))
                     (rule "applyEq" (formula "13") (term "1,1,0,0") (ifseqformula "10"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "applyEq" (formula "12") (term "1,1,0,0,0") (ifseqformula "10"))
                     (rule "applyEq" (formula "14") (term "1,1,0,0") (ifseqformula "10"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "applyEq" (formula "8") (term "1") (ifseqformula "10"))
                     (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "9"))
                     (rule "leq_literals" (formula "6") (term "0"))
                     (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "ifthenelse_split" (formula "7") (term "0"))
                     (branch "msg2.length >= 1 TRUE"
                        (rule "close" (formula "28") (ifseqformula "8"))
                     )
                     (branch "msg2.length >= 1 FALSE"
                        (rule "eqSymm" (formula "7"))
                        (rule "inEqSimp_geqRight" (formula "25"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "applyEq" (formula "7") (term "1,1,1,0,0") (ifseqformula "8"))
                        (rule "add_zero_right" (formula "7") (term "1,1,0,0"))
                        (rule "applyEq" (formula "12") (term "1,1,0,0,0") (ifseqformula "8"))
                        (rule "applyEq" (formula "13") (term "1,1,0,0") (ifseqformula "8"))
                        (rule "applyEq" (formula "12") (term "1,1,1,0,0,0,0,0,0,0") (ifseqformula "8"))
                        (rule "add_zero_right" (formula "12") (term "1,1,0,0,0,0,0,0,0"))
                        (rule "applyEq" (formula "14") (term "1,1,0,0") (ifseqformula "8"))
                        (rule "applyEq" (formula "9") (term "0") (ifseqformula "8"))
                        (rule "qeq_literals" (formula "9"))
                        (rule "closeFalse" (formula "9"))
                     )
                  )
                  (branch "msg1.length >= 1 FALSE"
                     (rule "eqSymm" (formula "9"))
                     (rule "inEqSimp_geqRight" (formula "25"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "applyEq" (formula "12") (term "1,1,0,0,0") (ifseqformula "10"))
                     (rule "applyEq" (formula "14") (term "1,1,0,0") (ifseqformula "10"))
                     (rule "applyEq" (formula "13") (term "1,1,0,0") (ifseqformula "10"))
                     (rule "applyEq" (formula "9") (term "1") (ifseqformula "10"))
                     (builtin "One Step Simplification" (formula "9"))
                     (rule "inEqSimp_antiSymm" (formula "7") (ifseqformula "1"))
                     (rule "applyEq" (formula "15") (term "1,1,0,0,0") (ifseqformula "7"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "7"))
                     (rule "seqDef_lower_equals_upper" (formula "16") (term "0"))
                     (rule "seqPermEmpty1" (formula "16"))
                     (rule "eqSymm" (formula "16"))
                     (rule "eqSeqEmpty" (formula "16"))
                     (rule "lenOfSeqDef" (formula "16") (term "0"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "polySimp_elimSub" (formula "16") (term "0,1"))
                     (rule "mul_literals" (formula "16") (term "1,0,1"))
                     (rule "add_zero_right" (formula "16") (term "0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0"))
                     (rule "add_zero_right" (formula "16") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0"))
                     (rule "applyEq" (formula "9") (term "1,1,1,0,0") (ifseqformula "7"))
                     (rule "add_zero_right" (formula "9") (term "1,1,0,0"))
                     (rule "applyEq" (formula "14") (term "1,1,0,0,0") (ifseqformula "7"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "applyEq" (formula "13") (term "1,1,1,0,0,0,0,0,0,0") (ifseqformula "7"))
                     (rule "add_zero_right" (formula "13") (term "1,1,0,0,0,0,0,0,0"))
                     (rule "applyEq" (formula "1") (term "0") (ifseqformula "7"))
                     (rule "leq_literals" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
                     (rule "qeq_literals" (formula "7"))
                     (rule "true_left" (formula "7"))
                     (rule "applyEq" (formula "15") (term "1,1,0") (ifseqformula "6"))
                     (rule "applyEq" (formula "27") (term "1") (ifseqformula "6"))
                     (rule "replace_known_right" (formula "8") (term "1") (ifseqformula "27"))
                     (builtin "One Step Simplification" (formula "8"))
                     (rule "notLeft" (formula "8"))
                     (rule "replace_known_right" (formula "13") (term "1") (ifseqformula "27"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "notLeft" (formula "13"))
                     (rule "inEqSimp_geqRight" (formula "24"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_leqRight" (formula "24"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_invertInEq1" (formula "1"))
                     (rule "times_zero_2" (formula "1") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "26"))
                     (rule "add_zero_right" (formula "1") (term "1"))
                     (rule "inEqSimp_contradEq3" (formula "26") (ifseqformula "1"))
                     (rule "mul_literals" (formula "26") (term "1,0,0"))
                     (rule "add_zero_right" (formula "26") (term "0,0"))
                     (rule "qeq_literals" (formula "26") (term "0"))
                     (builtin "One Step Simplification" (formula "26"))
                     (rule "false_right" (formula "26"))
                     (rule "inEqSimp_or_tautInEq1" (formula "13") (term "0,0"))
                     (rule "add_literals" (formula "13") (term "1,1,0,0"))
                     (rule "qeq_literals" (formula "13") (term "1,0,0"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "true_left" (formula "13"))
                     (rule "inEqSimp_or_antiSymm0" (formula "8") (term "0,0"))
                     (rule "add_literals" (formula "8") (term "1,0,1,0,0"))
                     (rule "add_literals" (formula "8") (term "0,0,0,0"))
                     (builtin "One Step Simplification" (formula "8"))
                     (rule "inEqSimp_or_tautInEq1" (formula "12") (term "0,0"))
                     (rule "add_zero_right" (formula "12") (term "1,1,0,0"))
                     (rule "qeq_literals" (formula "12") (term "1,0,0"))
                     (builtin "One Step Simplification" (formula "12"))
                     (rule "true_left" (formula "12"))
                     (rule "inEqSimp_or_tautInEq1" (formula "11") (term "0,0,0"))
                     (rule "add_zero_right" (formula "11") (term "1,1,0,0,0"))
                     (rule "qeq_literals" (formula "11") (term "1,0,0,0"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "true_left" (formula "11"))
                     (rule "inEqSimp_or_tautInEq1" (formula "11") (term "0"))
                     (rule "add_zero_right" (formula "11") (term "1,1,0"))
                     (rule "qeq_literals" (formula "11") (term "1,0"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "true_left" (formula "11"))
                     (rule "commute_or" (formula "8") (term "0"))
                     (builtin "One Step Simplification" (formula "8"))
                     (rule "castDel" (formula "8") (term "0,2,0,1"))
                     (rule "castDel" (formula "8") (term "0,2,0,0"))
                     (rule "equalityToSeqGetAndSeqLenLeft" (formula "19") (inst "iv=iv"))
                     (rule "andLeft" (formula "19"))
                     (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                     (rule "applyEq" (formula "19") (term "0,0") (ifseqformula "21"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "true_left" (formula "19"))
                     (rule "applyEq" (formula "19") (term "0,0,1,0,0,1,0,0") (ifseqformula "20"))
                     (rule "applyEq" (formula "19") (term "0,0,1,0") (ifseqformula "20"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "true_left" (formula "19"))
                     (rule "arrayLengthNotNegative" (formula "11") (term "1,1,0"))
                     (rule "inEqSimp_contradInEq0" (formula "11") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "11") (term "0"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "closeFalse" (formula "11"))
                  )
               )
               (branch "Case 2"
                  (rule "eqSymm" (formula "21") (term "1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,0"))
                  (rule "nonNull" (formula "21") (term "0,1") (inst "i=i"))
                  (rule "greater_literals" (formula "21") (term "0,1,0,1"))
                  (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "20")))
                  (rule "sub_literals" (formula "21") (term "2,1,0,0,1"))
                  (builtin "One Step Simplification" (formula "21"))
                  (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0,0,1"))
                  (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0,0,1"))
                  (rule "mul_literals" (formula "21") (term "0,1,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0,0,1"))
                  (rule "nonNull" (formula "21") (term "1,1") (inst "i=i"))
                  (rule "greater_literals" (formula "21") (term "0,1,1,1"))
                  (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "19")))
                  (rule "sub_literals" (formula "21") (term "2,1,0,1,1"))
                  (builtin "One Step Simplification" (formula "21"))
                  (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,1,1"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,1,1"))
                  (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,1,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,1,1"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0,1,1"))
                  (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0,1,1"))
                  (rule "mul_literals" (formula "21") (term "0,1,1,0,0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0,1,1"))
                  (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0,1,1"))
                  (rule "nnf_imp2or" (formula "21") (term "0,0"))
                  (rule "nnf_imp2or" (formula "21") (term "0,0,1"))
                  (rule "nnf_imp2or" (formula "21") (term "0,1,1"))
                  (rule "nnf_notAnd" (formula "21") (term "0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,0"))
                  (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0,0"))
                  (rule "add_literals" (formula "21") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0"))
                  (rule "mul_literals" (formula "21") (term "1,0,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0,0"))
                  (rule "mul_literals" (formula "21") (term "0,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0,0"))
                  (rule "nnf_notAnd" (formula "21") (term "0,0,0,1"))
                  (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,0,1"))
                  (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,0,1"))
                  (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,0,1"))
                  (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,0,1"))
                  (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,1"))
                  (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,0,1"))
                  (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0,0,1"))
                  (rule "add_zero_right" (formula "21") (term "0,0,0,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0,1"))
                  (rule "mul_literals" (formula "21") (term "1,0,0,0,0,1"))
                  (rule "nnf_notAnd" (formula "21") (term "0,0,1,1"))
                  (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,1,1"))
                  (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,1,1"))
                  (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,1,1"))
                  (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,1,1"))
                  (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,1,1"))
                  (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,1,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,1,1"))
                  (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,1,1"))
                  (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,1,1"))
                  (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0,1,1"))
                  (rule "add_zero_right" (formula "21") (term "0,0,0,0,0,1,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,1,1"))
                  (rule "mul_literals" (formula "21") (term "1,0,0,0,1,1"))
                  (rule "andRight" (formula "21"))
                  (branch "Case 1"
                     (rule "allRight" (formula "21") (inst "sk=i_10"))
                     (rule "orRight" (formula "21"))
                     (rule "orRight" (formula "21"))
                     (rule "inEqSimp_leqRight" (formula "21"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_geqRight" (formula "22"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "pullOutSelect" (formula "23") (term "0,0") (inst "selectSK=arr_13"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "15"))
                     (rule "eqSymm" (formula "24"))
                     (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "7"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfSingleton" (formula "1") (term "0,0"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")) (ifInst ""  (formula "7")))
                     (rule "applyEqReverse" (formula "24") (term "0,1") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "pullOutSelect" (formula "23") (term "0,0") (inst "selectSK=arr_14"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "15"))
                     (rule "eqSymm" (formula "24"))
                     (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "6"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfSingleton" (formula "1") (term "0,0"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")) (ifInst ""  (formula "6")))
                     (rule "applyEqReverse" (formula "24") (term "0,1") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "allLeft" (formula "9") (inst "t=i_10"))
                     (rule "replace_known_right" (formula "9") (term "1") (ifseqformula "24"))
                     (builtin "One Step Simplification" (formula "9"))
                     (rule "inEqSimp_homoInEq1" (formula "9") (term "1"))
                     (rule "polySimp_addComm1" (formula "9") (term "0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,1"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1"))
                     (rule "mul_literals" (formula "9") (term "0,1,1"))
                     (rule "polySimp_elimOne" (formula "9") (term "1,1,1"))
                     (rule "inEqSimp_contradInEq1" (formula "9") (term "1") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "9") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1"))
                     (rule "mul_literals" (formula "9") (term "0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "9") (term "0,0,1"))
                     (rule "polySimp_addComm0" (formula "9") (term "0,0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1"))
                     (rule "add_literals" (formula "9") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "9") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "9") (term "0,0,1"))
                     (rule "leq_literals" (formula "9") (term "0,1"))
                     (builtin "One Step Simplification" (formula "9"))
                     (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "9"))
                     (rule "qeq_literals" (formula "2") (term "0"))
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
                  (branch "Case 2"
                     (rule "andRight" (formula "21"))
                     (branch "Case 1"
                        (rule "allRight" (formula "21") (inst "sk=i_9"))
                        (rule "orRight" (formula "21"))
                        (rule "orRight" (formula "21"))
                        (rule "notRight" (formula "23"))
                        (rule "inEqSimp_leqRight" (formula "22"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_geqRight" (formula "23"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_12"))
                        (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "20"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "24")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,1,0,0") (ifseqformula "16"))
                        (rule "replace_known_left" (formula "3") (term "0,0,1,0,0") (ifseqformula "7"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "elementOfSingleton" (formula "3") (term "0,0"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "24")))
                        (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "16"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "24")) (ifInst ""  (formula "7")))
                        (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "5") (ifseqformula "23"))
                        (rule "allLeft" (formula "12") (inst "t=i_9"))
                        (rule "replace_known_left" (formula "12") (term "0,0,0") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "12"))
                        (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
                        (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "12") (term "0,0,1"))
                        (rule "leq_literals" (formula "12") (term "0,1"))
                        (builtin "One Step Simplification" (formula "12"))
                        (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "12"))
                        (rule "qeq_literals" (formula "2") (term "0"))
                        (builtin "One Step Simplification" (formula "2"))
                        (rule "closeFalse" (formula "2"))
                     )
                     (branch "Case 2"
                        (rule "allRight" (formula "21") (inst "sk=i_8"))
                        (rule "orRight" (formula "21"))
                        (rule "notRight" (formula "22"))
                        (rule "orRight" (formula "22"))
                        (rule "inEqSimp_leqRight" (formula "22"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_geqRight" (formula "23"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_11"))
                        (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "20"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "23")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,1,0,0") (ifseqformula "16"))
                        (rule "replace_known_left" (formula "3") (term "0,0,1,0,0") (ifseqformula "8"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "elementOfSingleton" (formula "3") (term "0,0"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "23")))
                        (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "16"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "23")) (ifInst ""  (formula "8")))
                        (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "5") (ifseqformula "22"))
                        (rule "allLeft" (formula "13") (inst "t=i_8"))
                        (rule "replace_known_left" (formula "13") (term "0,0,0") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "13"))
                        (rule "inEqSimp_commuteGeq" (formula "13") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "13") (term "0") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "13") (term "0,0"))
                        (builtin "One Step Simplification" (formula "13"))
                        (rule "inEqSimp_contradInEq1" (formula "13") (ifseqformula "1"))
                        (rule "andLeft" (formula "13"))
                        (rule "inEqSimp_homoInEq1" (formula "13"))
                        (rule "polySimp_pullOutFactor1b" (formula "13") (term "0"))
                        (rule "add_literals" (formula "13") (term "1,1,0"))
                        (rule "times_zero_1" (formula "13") (term "1,0"))
                        (rule "add_zero_right" (formula "13") (term "0"))
                        (rule "leq_literals" (formula "13"))
                        (rule "closeFalse" (formula "13"))
                     )
                  )
               )
            )
            (branch "Case 2"
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "1") (ifseqformula "16"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "1,0") (ifseqformula "16"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "0,1") (ifseqformula "12"))
               (rule "wellFormedAnonEQ" (formula "21") (term "0,0") (ifseqformula "16"))
               (rule "wellFormedAnonEQ" (formula "21") (term "0,0,0") (ifseqformula "12"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "0,1,0") (ifseqformula "12"))
               (rule "replace_known_left" (formula "21") (term "1,0,0") (ifseqformula "15"))
               (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "2")) (ifInst ""  (formula "11")) (ifInst ""  (formula "3")) (ifInst ""  (formula "4")))
               (rule "closeTrue" (formula "21"))
            )
         )
      )
      (branch "Exceptional Post (storeMessages)"
         (builtin "One Step Simplification" (formula "16"))
         (builtin "One Step Simplification" (formula "19"))
         (rule "andLeft" (formula "16"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "17") (term "1,0") (ifseqformula "16"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "17") (term "0,1,0") (ifseqformula "12"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "19"))
         (rule "notLeft" (formula "17"))
         (rule "close" (formula "20") (ifseqformula "19"))
      )
      (branch "Pre (storeMessages)"
         (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "16")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "17") (term "1,1") (ifseqformula "12"))
         (rule "wellFormedAnonEQ" (formula "17") (term "0,1") (ifseqformula "12"))
         (rule "replace_known_left" (formula "17") (term "0,1,1") (ifseqformula "3"))
         (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "2")) (ifInst ""  (formula "11")))
         (rule "applyEq" (formula "14") (term "1") (ifseqformula "1"))
         (builtin "One Step Simplification" (formula "14"))
         (rule "nonNull" (formula "17") (inst "i=i"))
         (rule "greater_literals" (formula "17") (term "0,1"))
         (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "16")))
         (rule "sub_literals" (formula "17") (term "2,1,0"))
         (builtin "One Step Simplification" (formula "17"))
         (rule "allRight" (formula "17") (inst "sk=i_5"))
         (rule "impRight" (formula "17"))
         (rule "andLeft" (formula "1"))
         (rule "notRight" (formula "19"))
         (rule "inEqSimp_ltToLeq" (formula "3"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "3") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "2"))
         (rule "inEqSimp_sepNegMonomial0" (formula "3"))
         (rule "polySimp_mulLiterals" (formula "3") (term "0"))
         (rule "polySimp_elimOne" (formula "3") (term "0"))
         (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=arr_6"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")) (ifInst ""  (formula "7")))
         (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "narrowSelectArrayType" (formula "1") (term "0") (ifseqformula "5") (ifseqformula "19"))
         (rule "allLeft" (formula "12") (inst "t=i_5"))
         (rule "replace_known_left" (formula "12") (term "0,0,0") (ifseqformula "1"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
         (rule "inEqSimp_contradInEq1" (formula "12") (term "0") (ifseqformula "2"))
         (rule "qeq_literals" (formula "12") (term "0,0"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "inEqSimp_contradInEq1" (formula "12") (ifseqformula "3"))
         (rule "andLeft" (formula "12"))
         (rule "inEqSimp_homoInEq1" (formula "12"))
         (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
         (rule "add_literals" (formula "12") (term "1,1,0"))
         (rule "times_zero_1" (formula "12") (term "1,0"))
         (rule "add_zero_right" (formula "12") (term "0"))
         (rule "leq_literals" (formula "12"))
         (rule "closeFalse" (formula "12"))
      )
   )
)
(branch "Exceptional Post (setEquality)"
   (builtin "One Step Simplification" (formula "13"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "11") (term "1,0") (ifseqformula "10"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "11"))
   (rule "notLeft" (formula "11"))
   (rule "close" (formula "14") (ifseqformula "13"))
)
(branch "Pre (setEquality)"
   (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "10")) (ifInst ""  (formula "9")) (ifInst ""  (formula "1")) (ifInst ""  (formula "10")) (ifInst ""  (formula "2")) (ifInst ""  (formula "9")) (ifInst ""  (formula "3")))
   (rule "nonNull" (formula "11") (term "0") (inst "i=i"))
   (rule "sub_literals" (formula "11") (term "2,1,0,1,1,0"))
   (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "10")))
   (rule "greater_literals" (formula "11") (term "0,0"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "narrowSelectArrayType" (formula "11") (term "0,0,1,0,0") (ifseqformula "1") (ifseqformula "10"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,0"))
   (rule "mul_literals" (formula "11") (term "0,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,0"))
   (rule "nonNull" (formula "11") (term "1") (inst "i=i"))
   (rule "greater_literals" (formula "11") (term "0,1,1"))
   (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "9")))
   (rule "sub_literals" (formula "11") (term "2,1,0,1"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "narrowSelectArrayType" (formula "11") (term "0,0,1,0,1") (ifseqformula "1") (ifseqformula "9"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1"))
   (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1"))
   (rule "mul_literals" (formula "11") (term "0,1,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1"))
   (rule "nnf_imp2or" (formula "11") (term "0,0"))
   (rule "nnf_imp2or" (formula "11") (term "0,1"))
   (rule "nnf_notAnd" (formula "11") (term "0,0,0"))
   (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0"))
   (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0"))
   (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,0"))
   (rule "add_zero_left" (formula "11") (term "0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,0"))
   (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "11") (term "0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0"))
   (rule "mul_literals" (formula "11") (term "1,0,0,0,0"))
   (rule "nnf_notAnd" (formula "11") (term "0,0,1"))
   (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,1"))
   (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,1"))
   (rule "add_literals" (formula "11") (term "0,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1"))
   (rule "mul_literals" (formula "11") (term "1,0,0,0,1"))
   (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,1"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,1"))
   (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,1"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,1"))
   (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,1"))
   (rule "add_zero_left" (formula "11") (term "0,0,1,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,1"))
   (rule "andRight" (formula "11"))
   (branch "Case 1"
      (rule "allRight" (formula "11") (inst "sk=i_7"))
      (rule "orRight" (formula "11"))
      (rule "notRight" (formula "12"))
      (rule "orRight" (formula "12"))
      (rule "inEqSimp_geqRight" (formula "13"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "inEqSimp_leqRight" (formula "13"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
      (rule "polySimp_elimOne" (formula "2") (term "0"))
      (rule "allLeft" (formula "10") (inst "t=i_7"))
      (rule "replace_known_left" (formula "10") (term "0,0,0") (ifseqformula "3"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "inEqSimp_commuteGeq" (formula "10") (term "1"))
      (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "2"))
      (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
      (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
      (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
      (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
      (rule "add_zero_right" (formula "10") (term "0,0,1"))
      (rule "leq_literals" (formula "10") (term "0,1"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "1"))
      (rule "qeq_literals" (formula "10") (term "0"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "closeFalse" (formula "10"))
   )
   (branch "Case 2"
      (rule "allRight" (formula "11") (inst "sk=i_6"))
      (rule "orRight" (formula "11"))
      (rule "notRight" (formula "12"))
      (rule "orRight" (formula "12"))
      (rule "inEqSimp_geqRight" (formula "13"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "inEqSimp_leqRight" (formula "13"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
      (rule "polySimp_elimOne" (formula "2") (term "0"))
      (rule "allLeft" (formula "11") (inst "t=i_6"))
      (rule "replace_known_left" (formula "11") (term "0,0,0") (ifseqformula "3"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "inEqSimp_commuteGeq" (formula "11") (term "1"))
      (rule "inEqSimp_contradInEq1" (formula "11") (term "1") (ifseqformula "2"))
      (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1"))
      (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1"))
      (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
      (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
      (rule "add_zero_right" (formula "11") (term "0,0,1"))
      (rule "leq_literals" (formula "11") (term "0,1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "inEqSimp_contradInEq1" (formula "11") (ifseqformula "1"))
      (rule "qeq_literals" (formula "11") (term "0"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "closeFalse" (formula "11"))
   )
)
)

}
