\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Jul 04 15:24:29 CEST 2017
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=5000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , permissions-permissions\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Tue Jul 04 15:24:29 CEST 2017
name=verif.selectvoting.system.core.Setup[verif.selectvoting.system.core.Setup\\:\\:concatenateMessages([[B)].JML normal_behavior operation contract.0
contract=verif.selectvoting.system.core.Setup[verif.selectvoting.system.core.Setup\\:\\:concatenateMessages([[B)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mihai" ) (keyVersion "777423351da3a616156ed00120c6f885d0eb8492"))
(keyLog "1" (keyUser "mihai" ) (keyVersion "777423351da3a616156ed00120c6f885d0eb8492"))

(autoModeTime "4886")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "encrMsg,result,exc,heapAtPre,o,f") (userinteraction))
(builtin "One Step Simplification" (formula "2"))
(rule "assignment" (formula "2") (term "1") (userinteraction))
(rule "methodBodyExpand" (formula "2") (term "1,1") (newnames "heapBefore_concatenateMessages,savedHeapBefore_concatenateMessages") (userinteraction))
(builtin "One Step Simplification" (formula "2"))
(rule "variableDeclarationAssign" (formula "2") (term "1") (userinteraction))
(rule "variableDeclaration" (formula "2") (term "1") (newnames "asAMessage") (userinteraction))
(builtin "Use Operation Contract" (formula "2") (newnames "heapBefore_concatenateMessageArray,result_0,exc_0,heapAfter_concatenateMessageArray,anon_heap_concatenateMessageArray") (contract "verif.selectvoting.system.core.Utils[verif.selectvoting.system.core.Utils::concatenateMessageArray([[B)].JML normal_behavior operation contract.0"))
(branch "Post (concatenateMessageArray)"
   (builtin "One Step Simplification" (formula "3"))
   (rule "assignment" (formula "4") (term "1,1") (userinteraction))
   (rule "methodCallWithAssignmentUnfoldArguments" (formula "4") (term "1,1,1") (userinteraction))
   (rule "variableDeclarationAssign" (formula "4") (term "1,1,1") (userinteraction))
   (rule "variableDeclaration" (formula "4") (term "1,1,1") (newnames "var") (userinteraction))
   (rule "methodCallWithAssignmentUnfoldArguments" (formula "4") (term "1,1,1") (userinteraction))
   (builtin "One Step Simplification" (formula "4"))
   (rule "variableDeclarationAssign" (formula "4") (term "1") (userinteraction))
   (rule "variableDeclaration" (formula "4") (term "1") (newnames "var_1") (userinteraction))
   (rule "assignment_read_length" (formula "4") (term "1") (userinteraction))
   (branch "Normal Execution (_encrMsg != null)"
      (builtin "One Step Simplification" (formula "4"))
      (builtin "One Step Simplification" (formula "5"))
      (builtin "Use Operation Contract" (formula "5") (newnames "heapBefore_intToByteArray,result_1,exc_1,heapAfter_intToByteArray,anon_heap_intToByteArray") (contract "verif.utils.MessageTools[verif.utils.MessageTools::intToByteArray(int)].JML normal_behavior operation contract.0"))
      (branch "Post (intToByteArray)"
         (builtin "One Step Simplification" (formula "5"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "4"))
         (rule "andLeft" (formula "7"))
         (rule "andLeft" (formula "2"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "7"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "3"))
         (rule "andLeft" (formula "5"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "10"))
         (rule "andLeft" (formula "12"))
         (rule "andLeft" (formula "16"))
         (rule "andLeft" (formula "15"))
         (rule "notLeft" (formula "5"))
         (rule "notLeft" (formula "4"))
         (rule "andLeft" (formula "10"))
         (rule "andLeft" (formula "15"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "17"))
         (rule "notLeft" (formula "11"))
         (rule "notLeft" (formula "11"))
         (rule "notLeft" (formula "15"))
         (rule "notLeft" (formula "15"))
         (rule "assignment" (formula "23") (term "1,1") (userinteraction))
         (rule "blockEmpty" (formula "23") (term "1,1,1") (userinteraction))
         (builtin "One Step Simplification" (formula "23"))
         (rule "variableDeclarationAssign" (formula "23") (term "1") (userinteraction))
         (rule "variableDeclaration" (formula "23") (term "1") (newnames "var_2") (userinteraction))
         (rule "assignment" (formula "23") (term "1") (userinteraction))
         (builtin "One Step Simplification" (formula "23"))
         (builtin "Use Operation Contract" (formula "23") (newnames "heapBefore_concatenate,result_2,exc_2,heapAfter_concatenate,anon_heap_concatenate") (contract "verif.utils.MessageTools[verif.utils.MessageTools::concatenate([B,[B)].JML normal_behavior operation contract.0"))
         (branch "Post (concatenate)"
            (builtin "One Step Simplification" (formula "17"))
            (rule "assignment" (formula "25") (term "1,1") (userinteraction))
            (rule "blockEmpty" (formula "25") (term "1,1,1") (userinteraction))
            (rule "methodCallReturn" (formula "25") (term "1,1,1") (userinteraction))
            (rule "assignment" (formula "25") (term "1,1,1") (userinteraction))
            (rule "methodCallEmpty" (formula "25") (term "1,1,1,1") (userinteraction))
            (rule "tryEmpty" (formula "25") (term "1,1,1,1") (userinteraction))
            (rule "emptyModality" (formula "25") (term "1,1,1,1") (userinteraction))
            (builtin "One Step Simplification" (formula "25"))
            (rule "andLeft" (formula "17"))
            (rule "andLeft" (formula "18"))
            (rule "andLeft" (formula "19"))
            (rule "andLeft" (formula "18"))
            (rule "andLeft" (formula "19"))
            (rule "andLeft" (formula "20"))
            (rule "notLeft" (formula "21"))
            (rule "notLeft" (formula "20"))
            (rule "andRight" (formula "30") (userinteraction))
            (branch "Case 1"
               (rule "andRight" (formula "30") (userinteraction))
               (branch "Case 1"
                  (rule "applyEq" (formula "30") (term "0") (ifseqformula "19") (userinteraction))
                  (rule "cut" (inst "cutFormula=  array2seq(heapAfter_concatenate, result_1)
= array2seq(heapAfter_intToByteArray, result_1)") (userinteraction))
                  (branch "CUT: array2seq(heapAfter_concatenate, result_1) = array2seq(heapAfter_intToByteArray, result_1) TRUE"
                     (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "1") (userinteraction))
                     (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "15") (userinteraction))
                     (rule "applyEq" (formula "31") (term "0,0,0,0") (ifseqformula "5") (userinteraction))
                     (rule "cut" (inst "cutFormula=  array2seq(heapAfter_concatenate, result_0)
= array2seq(heapAfter_concatenateMessageArray,
            result_0)") (userinteraction))
                     (branch "CUT: array2seq(heapAfter_concatenate, result_0) = array2seq(heapAfter_concatenateMessageArray, result_0) TRUE"
                        (rule "applyEq" (formula "32") (term "1,0") (ifseqformula "1") (userinteraction))
                        (rule "applyEq" (formula "32") (term "1,0") (ifseqformula "12") (userinteraction))
                        (rule "applyEq" (formula "32") (term "1,1,1,0") (ifseqformula "6") (userinteraction))
                        (rule "cut" (inst "cutFormula=  byte[][]::select(heapAfter_concatenate,
                   verif.selectvoting.system.core.MixServer::select(heapAfter_concatenate,
                                                                    null,
                                                                    verif.selectvoting.system.core.Setup::$mix),
                   verif.selectvoting.system.core.MixServer::$sorted)
= byte[][]::select(heap,
                   verif.selectvoting.system.core.MixServer::select(heap,
                                                                    null,
                                                                    verif.selectvoting.system.core.Setup::$mix),
                   verif.selectvoting.system.core.MixServer::$sorted)") (userinteraction))
                        (branch "CUT: verif.selectvoting.system.core.Setup.mix.sorted@heapAfter_concatenate = verif.selectvoting.system.core.Setup.mix.sorted TRUE"
                           (rule "applyEq" (formula "33") (term "0,0,0,1") (ifseqformula "1") (userinteraction))
                           (rule "applyEq" (formula "33") (term "1,1,1,1") (ifseqformula "1") (userinteraction))
                           (rule "cut" (inst "cutFormula=  array2seq2d(heapAfter_concatenateMessageArray,
              byte[][]::select(heap,
                               verif.selectvoting.system.core.MixServer::select(heap,
                                                                                null,
                                                                                verif.selectvoting.system.core.Setup::$mix),
                               verif.selectvoting.system.core.MixServer::$sorted))
= array2seq2d(heapAfter_concatenate,
              byte[][]::select(heap,
                               verif.selectvoting.system.core.MixServer::select(heap,
                                                                                null,
                                                                                verif.selectvoting.system.core.Setup::$mix),
                               verif.selectvoting.system.core.MixServer::$sorted))") (userinteraction))
                           (branch "CUT: array2seq2d(heapAfter_concatenateMessageArray, verif.selectvoting.system.core.Setup.mix.sorted) = array2seq2d(heapAfter_concatenate, verif.selectvoting.system.core.Setup.mix.sorted) TRUE"
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (ifseqformula "16"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "28") (ifseqformula "11"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "1") (ifseqformula "11"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "1") (ifseqformula "21"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "17") (term "1") (ifseqformula "16"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "0") (ifseqformula "11"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "17") (term "0,1") (ifseqformula "11"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "0,1") (ifseqformula "16"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "0,0,1") (ifseqformula "11"))
                              (rule "orRight" (formula "28"))
                              (rule "orRight" (formula "25"))
                              (rule "orRight" (formula "25"))
                              (rule "eqSymm" (formula "8"))
                              (rule "eqSymm" (formula "23"))
                              (rule "eqSymm" (formula "14"))
                              (rule "eqSymm" (formula "3"))
                              (rule "eqSymm" (formula "4"))
                              (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "36"))
                              (builtin "One Step Simplification" (formula "6"))
                              (rule "replace_known_right" (formula "13") (term "0,1") (ifseqformula "33"))
                              (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "32")))
                              (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "29"))
                              (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "30")) (ifInst ""  (formula "31")))
                              (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "28"))
                              (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "25")) (ifInst ""  (formula "26")) (ifInst ""  (formula "27")))
                              (rule "applyEq" (formula "37") (term "0,0,0,0") (ifseqformula "8"))
                              (rule "eqSymm" (formula "37"))
                              (rule "applyEq" (formula "14") (term "1") (ifseqformula "3"))
                              (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "8"))
                              (rule "applyEq" (formula "4") (term "0") (ifseqformula "18"))
                              (rule "eqSymm" (formula "4"))
                              (rule "applyEq" (formula "1") (term "1,1") (ifseqformula "8"))
                              (rule "applyEq" (formula "2") (term "1") (ifseqformula "8"))
                              (rule "applyEq" (formula "35") (term "0") (ifseqformula "8"))
                              (rule "applyEq" (formula "36") (term "1,1,1,0") (ifseqformula "8"))
                              (rule "applyEq" (formula "36") (term "1,1,1,1") (ifseqformula "8"))
                              (rule "applyEq" (formula "36") (term "0,0,0,0") (ifseqformula "8"))
                              (rule "eqSymm" (formula "36"))
                              (rule "applyEq" (formula "23") (term "0,0") (ifseqformula "4"))
                              (rule "applyEq" (formula "14") (term "1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "36") (term "1,1") (ifseqformula "14"))
                              (rule "applyEq" (formula "36") (term "1,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "36") (term "1") (ifseqformula "23"))
                              (rule "applyEq" (formula "36") (term "1,0") (ifseqformula "14"))
                              (rule "close" (formula "36") (ifseqformula "23"))
                           )
                           (branch "CUT: array2seq2d(heapAfter_concatenateMessageArray, verif.selectvoting.system.core.Setup.mix.sorted) = array2seq2d(heapAfter_concatenate, verif.selectvoting.system.core.Setup.mix.sorted) FALSE"
                              (rule "array2seq2dDef" (formula "24") (term "0") (inst "u=u") (userinteraction))
                              (rule "array2seq2dDef" (formula "24") (term "1") (inst "u=u") (userinteraction))
                              (rule "equalityToSeqGetAndSeqLenRight" (formula "24") (inst "iv=iv") (userinteraction))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "28") (ifseqformula "10"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (ifseqformula "15"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "12") (term "1") (ifseqformula "10"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "1") (ifseqformula "20"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "16") (term "1") (ifseqformula "15"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "0") (ifseqformula "10"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "16") (term "0,1") (ifseqformula "10"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "0,1") (ifseqformula "15"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "0,0,1") (ifseqformula "10"))
                              (rule "orRight" (formula "28"))
                              (rule "orRight" (formula "25"))
                              (rule "orRight" (formula "25"))
                              (rule "eqSymm" (formula "13"))
                              (rule "eqSymm" (formula "2"))
                              (rule "eqSymm" (formula "3"))
                              (rule "eqSymm" (formula "7"))
                              (rule "eqSymm" (formula "22"))
                              (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "36"))
                              (builtin "One Step Simplification" (formula "5"))
                              (rule "replace_known_right" (formula "12") (term "0,1") (ifseqformula "33"))
                              (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "32")))
                              (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "29"))
                              (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "30")) (ifInst ""  (formula "31")))
                              (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "28"))
                              (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "25")) (ifInst ""  (formula "26")) (ifInst ""  (formula "27")))
                              (rule "lenOfSeqDef" (formula "24") (term "1,0"))
                              (rule "polySimp_elimSub" (formula "24") (term "1,1,0"))
                              (rule "mul_literals" (formula "24") (term "1,1,1,0"))
                              (rule "add_zero_right" (formula "24") (term "1,1,0"))
                              (rule "lenOfSeqDef" (formula "24") (term "1,1,0,0,1"))
                              (rule "polySimp_elimSub" (formula "24") (term "1,1,1,0,0,1"))
                              (rule "times_zero_2" (formula "24") (term "1,1,1,1,0,0,1"))
                              (rule "add_zero_right" (formula "24") (term "1,1,1,0,0,1"))
                              (rule "lenOfSeqDef" (formula "24") (term "0,0"))
                              (rule "polySimp_elimSub" (formula "24") (term "1,0,0"))
                              (rule "times_zero_2" (formula "24") (term "1,1,0,0"))
                              (rule "add_zero_right" (formula "24") (term "1,0,0"))
                              (builtin "One Step Simplification" (formula "24"))
                              (rule "allRight" (formula "24") (inst "sk=iv_6"))
                              (rule "impRight" (formula "24"))
                              (rule "andLeft" (formula "1"))
                              (rule "getOfSeqDef" (formula "26") (term "0"))
                              (rule "castDel" (formula "26") (term "2,0"))
                              (rule "castDel" (formula "26") (term "1,0"))
                              (rule "add_zero_right" (formula "26") (term "0,2,1,1,0"))
                              (rule "eqSymm" (formula "26"))
                              (rule "replace_known_left" (formula "26") (term "0,0,1") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "polySimp_elimSub" (formula "26") (term "1,0,1"))
                              (rule "times_zero_2" (formula "26") (term "1,1,0,1"))
                              (rule "add_zero_right" (formula "26") (term "1,0,1"))
                              (rule "getOfSeqDef" (formula "26") (term "0"))
                              (rule "castDel" (formula "26") (term "1,0"))
                              (rule "castDel" (formula "26") (term "2,0"))
                              (rule "add_zero_right" (formula "26") (term "0,2,1,1,0"))
                              (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "polySimp_elimSub" (formula "26") (term "1,0,0"))
                              (rule "mul_literals" (formula "26") (term "1,1,0,0"))
                              (rule "add_zero_right" (formula "26") (term "1,0,0"))
                              (rule "eqSymm" (formula "26"))
                              (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1"))
                              (rule "add_zero_right" (formula "2") (term "0,0,1"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "26") (term "0,0"))
                              (rule "eqSymm" (formula "26"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,1"))
                              (rule "polySimp_addComm1" (formula "26") (term "0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "2") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "26") (term "0,0"))
                              (rule "eqSymm" (formula "26"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,1"))
                              (rule "eqSymm" (formula "26"))
                              (rule "polySimp_addComm1" (formula "26") (term "0,0,0"))
                              (rule "eqSymm" (formula "26"))
                              (rule "inEqSimp_commuteLeq" (formula "1"))
                              (rule "applyEq" (formula "26") (term "1,1,1,0") (ifseqformula "9"))
                              (rule "applyEq" (formula "26") (term "0,0,1,0,0,0") (ifseqformula "9"))
                              (rule "eqSymm" (formula "26"))
                              (rule "applyEq" (formula "39") (term "0,0,0,0") (ifseqformula "9"))
                              (rule "eqSymm" (formula "39"))
                              (rule "applyEq" (formula "3") (term "1") (ifseqformula "9"))
                              (rule "applyEq" (formula "19") (term "0") (ifseqformula "5"))
                              (rule "applyEq" (formula "37") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "15") (term "1") (ifseqformula "4"))
                              (rule "applyEq" (formula "2") (term "0,1,0,1,0") (ifseqformula "9"))
                              (rule "applyEq" (formula "2") (term "0,0,1,0,0,0,1,0") (ifseqformula "9"))
                              (rule "applyEq" (formula "5") (term "1") (ifseqformula "19"))
                              (rule "applyEq" (formula "38") (term "0,0,0,0") (ifseqformula "9"))
                              (rule "eqSymm" (formula "38"))
                              (rule "applyEq" (formula "26") (term "1,1,1,0") (ifseqformula "9"))
                              (rule "applyEq" (formula "24") (term "0,0") (ifseqformula "19"))
                              (rule "applyEq" (formula "26") (term "0,0,1,0,0,0") (ifseqformula "9"))
                              (rule "eqSymm" (formula "26"))
                              (rule "applyEq" (formula "38") (term "1,1,1,1") (ifseqformula "9"))
                              (rule "applyEq" (formula "38") (term "1,1,1,0") (ifseqformula "9"))
                              (rule "applyEq" (formula "38") (term "1,0") (ifseqformula "15"))
                              (rule "eqSymm" (formula "38"))
                              (rule "applyEq" (formula "38") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "0,0,1"))
                              (rule "polySimp_elimOne" (formula "26") (term "0,0,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "0,0,0"))
                              (rule "polySimp_elimOne" (formula "26") (term "0,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0,0,0"))
                              (rule "nonNull" (formula "10") (inst "i=i"))
                              (rule "sub_literals" (formula "10") (term "2,1,0,1,1"))
                              (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "37")))
                              (rule "greater_literals" (formula "10") (term "0"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "narrowSelectArrayType" (formula "10") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "37"))
                              (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                              (rule "array2seqDef" (formula "4") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "4"))
                              (rule "array2seqDef" (formula "5") (term "0") (inst "u=u"))
                              (rule "array2seqDef" (formula "24") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "24"))
                              (rule "array2seqDef" (formula "19") (term "0") (inst "u=u"))
                              (rule "array2seqDef" (formula "15") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "15"))
                              (rule "array2seqDef" (formula "26") (term "1,1") (inst "u=u"))
                              (rule "eqSymm" (formula "26"))
                              (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_10"))
                              (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "23"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,1,0,0") (ifseqformula "18"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,1,0,0") (ifseqformula "13"))
                              (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                              (rule "array2seqDef" (formula "39") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "39"))
                              (rule "array2seqDef" (formula "5") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "5"))
                              (rule "array2seqDef" (formula "25") (term "1,1") (inst "u=u"))
                              (rule "array2seqDef" (formula "27") (term "1,1") (inst "u=u"))
                              (rule "eqSymm" (formula "27"))
                              (rule "equalityToSeqGetAndSeqLenRight" (formula "39") (inst "iv=iv"))
                              (rule "lenOfSeqDef" (formula "39") (term "0,0"))
                              (rule "polySimp_elimSub" (formula "39") (term "1,0,0"))
                              (rule "times_zero_2" (formula "39") (term "1,1,0,0"))
                              (rule "add_zero_right" (formula "39") (term "1,0,0"))
                              (rule "getOfSeqDef" (formula "39") (term "0,1,0,1"))
                              (rule "castDel" (formula "39") (term "2,0,1,0,1"))
                              (rule "castDel" (formula "39") (term "1,0,1,0,1"))
                              (rule "add_zero_right" (formula "39") (term "0,2,1,0,1,0,1"))
                              (rule "polySimp_elimSub" (formula "39") (term "1,1,0,0,1,0,1"))
                              (rule "times_zero_2" (formula "39") (term "1,1,1,0,0,1,0,1"))
                              (rule "add_zero_right" (formula "39") (term "1,1,0,0,1,0,1"))
                              (rule "lenOfSeqDef" (formula "39") (term "1,1,0,0,1"))
                              (rule "polySimp_elimSub" (formula "39") (term "1,1,1,0,0,1"))
                              (rule "times_zero_2" (formula "39") (term "1,1,1,1,0,0,1"))
                              (rule "add_zero_right" (formula "39") (term "1,1,1,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "39") (term "0,0,0"))
                              (rule "add_zero_right" (formula "39") (term "0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0,1,0,1"))
                              (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0,1,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "39") (term "0,1,1,0,0,1"))
                              (rule "add_zero_right" (formula "39") (term "0,0,1,1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,1,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0,1,0,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "39") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "39") (term "0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "39") (term "0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0,1,0,1"))
                              (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0,1,0,1"))
                              (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0,1,0,1"))
                              (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0,1,0,1"))
                              (rule "mul_literals" (formula "39") (term "0,1,1,0,0,1,0,1"))
                              (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0,1,0,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "39") (term "0,0,1,0,0,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "39") (term "0,0,0,1,0,0,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "39") (term "0,0,0,1,0,0,1,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0,1"))
                              (rule "mul_literals" (formula "39") (term "0,1,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0,1"))
                              (rule "eqSeqDef2" (formula "6") (inst "iv=iv") (ifseqformula "20"))
                              (rule "andLeft" (formula "6"))
                              (rule "lenOfSeqDef" (formula "6") (term "0"))
                              (rule "eqSymm" (formula "6"))
                              (rule "polySimp_elimSub" (formula "6") (term "1,1"))
                              (rule "times_zero_2" (formula "6") (term "1,1,1"))
                              (rule "add_zero_right" (formula "6") (term "1,1"))
                              (rule "getOfSeqDef" (formula "7") (term "1,1,0"))
                              (rule "castDel" (formula "7") (term "1,1,1,0"))
                              (rule "castDel" (formula "7") (term "2,1,1,0"))
                              (rule "add_zero_right" (formula "7") (term "0,2,1,1,1,0"))
                              (rule "polySimp_elimSub" (formula "7") (term "1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "7") (term "1,1,1,0,1,1,0"))
                              (rule "add_zero_right" (formula "7") (term "1,1,0,1,1,0"))
                              (rule "getOfSeqDef" (formula "7") (term "0,1,0"))
                              (rule "castDel" (formula "7") (term "1,0,1,0"))
                              (rule "castDel" (formula "7") (term "2,0,1,0"))
                              (rule "add_zero_right" (formula "7") (term "0,2,1,0,1,0"))
                              (rule "polySimp_elimSub" (formula "7") (term "1,1,0,0,1,0"))
                              (rule "times_zero_2" (formula "7") (term "1,1,1,0,0,1,0"))
                              (rule "add_zero_right" (formula "7") (term "1,1,0,0,1,0"))
                              (rule "lenOfSeqDef" (formula "7") (term "1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "7") (term "1,1,1,0,0"))
                              (rule "times_zero_2" (formula "7") (term "1,1,1,1,0,0"))
                              (rule "add_zero_right" (formula "7") (term "1,1,1,0,0"))
                              (rule "lenOfSeqDef" (formula "6") (term "0"))
                              (rule "polySimp_elimSub" (formula "6") (term "1,0"))
                              (rule "mul_literals" (formula "6") (term "1,1,0"))
                              (rule "add_zero_right" (formula "6") (term "1,0"))
                              (builtin "One Step Simplification" (formula "6"))
                              (rule "true_left" (formula "6"))
                              (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "6") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,1,1,0"))
                              (rule "eqSymm" (formula "6") (term "1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "6") (term "0,1,1,0,0"))
                              (rule "add_zero_right" (formula "6") (term "0,0,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0"))
                              (rule "eqSymm" (formula "6") (term "1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0"))
                              (rule "eqSymm" (formula "6") (term "1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "6") (term "1,1,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "6") (term "0,1,1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "6") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,1,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "0,0,1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "6") (term "0,0,1,1,1,0,0"))
                              (rule "eqSeqDef" (formula "5") (inst "iv=iv"))
                              (rule "andLeft" (formula "5"))
                              (rule "getOfSeqDef" (formula "6") (term "1,1,0"))
                              (rule "castDel" (formula "6") (term "1,1,1,0"))
                              (rule "castDel" (formula "6") (term "2,1,1,0"))
                              (rule "add_zero_right" (formula "6") (term "0,2,1,1,1,0"))
                              (rule "polySimp_elimSub" (formula "6") (term "1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "6") (term "1,1,1,0,1,1,0"))
                              (rule "add_zero_right" (formula "6") (term "1,1,0,1,1,0"))
                              (rule "lenOfSeqDef" (formula "6") (term "1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "6") (term "1,1,1,0,0"))
                              (rule "times_zero_2" (formula "6") (term "1,1,1,1,0,0"))
                              (rule "add_zero_right" (formula "6") (term "1,1,1,0,0"))
                              (rule "lenOfSeqDef" (formula "5") (term "0"))
                              (rule "eqSymm" (formula "5"))
                              (rule "polySimp_elimSub" (formula "5") (term "1,1"))
                              (rule "mul_literals" (formula "5") (term "1,1,1"))
                              (rule "add_zero_right" (formula "5") (term "1,1"))
                              (rule "getOfSeqDef" (formula "6") (term "0,1,0"))
                              (rule "castDel" (formula "6") (term "1,0,1,0"))
                              (rule "castDel" (formula "6") (term "2,0,1,0"))
                              (rule "add_zero_right" (formula "6") (term "0,2,1,0,1,0"))
                              (rule "polySimp_elimSub" (formula "6") (term "1,1,0,0,1,0"))
                              (rule "times_zero_2" (formula "6") (term "1,1,1,0,0,1,0"))
                              (rule "add_zero_right" (formula "6") (term "1,1,0,0,1,0"))
                              (rule "lenOfSeqDef" (formula "5") (term "0"))
                              (rule "polySimp_elimSub" (formula "5") (term "1,0"))
                              (rule "mul_literals" (formula "5") (term "1,1,0"))
                              (rule "add_zero_right" (formula "5") (term "1,0"))
                              (builtin "One Step Simplification" (formula "5"))
                              (rule "true_left" (formula "5"))
                              (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "5") (term "0,1,1,0,0"))
                              (rule "add_zero_right" (formula "5") (term "0,0,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "5") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,1,1,0"))
                              (rule "eqSymm" (formula "5") (term "1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "5") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "5") (term "1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "5") (term "0,1,1,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "5") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "5") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0,1,0"))
                              (rule "eqSymm" (formula "5") (term "1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,1,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "0,0,1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "5") (term "0,0,1,1,1,0,0"))
                              (rule "eqSeqDef2" (formula "20") (inst "iv=iv") (ifseqformula "20"))
                              (builtin "One Step Simplification" (formula "20"))
                              (rule "true_left" (formula "20"))
                              (rule "eqSeqDef2" (formula "16") (inst "iv=iv") (ifseqformula "16"))
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "true_left" (formula "16"))
                              (rule "pullOutSelect" (formula "3") (term "1,1,0") (inst "selectSK=verif_selectvoting_system_core_Setup_mix_3"))
                              (rule "applyEq" (formula "4") (term "1,0,0,0,0,1,0,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "4") (term "1,2,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "4") (term "0,0,0,0,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "4") (term "1,0,1,0,1,0,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "4") (term "1,0,1,0,0,1,0,0") (ifseqformula "3"))
                              (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "22"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "18"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "14"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "applyEqReverse" (formula "4") (term "1,1,0") (ifseqformula "3"))
                              (rule "applyEqReverse" (formula "4") (term "1,2,0") (ifseqformula "3"))
                              (rule "applyEqReverse" (formula "4") (term "0,0,0,0,0") (ifseqformula "3"))
                              (rule "applyEqReverse" (formula "4") (term "1,0,0,0,0,1,0,0") (ifseqformula "3"))
                              (rule "applyEqReverse" (formula "4") (term "1,0,1,0,1,0,0") (ifseqformula "3"))
                              (rule "applyEqReverse" (formula "4") (term "1,0,1,0,0,1,0,0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "35"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "ifthenelse_negated" (formula "3") (term "0"))
                              (rule "pullOutSelect" (formula "25") (term "0,1,1,1") (inst "selectSK=arr_12"))
                              (rule "applyEq" (formula "26") (term "1,2,1,1") (ifseqformula "1"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "37")))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "18"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "14"))
                              (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "9"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "37")))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "14"))
                              (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "9"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEq" (formula "26") (term "1,2,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "26") (term "0,1,1,0") (ifseqformula "1"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "37")) (ifInst ""  (formula "9")))
                              (rule "applyEqReverse" (formula "26") (term "1,2,1,1") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "26") (term "1,2,1,0") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "26") (term "0,1,1,0") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "26") (term "0,1,1,1") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "eqSeqDef2" (formula "23") (inst "iv=iv") (ifseqformula "23"))
                              (builtin "One Step Simplification" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "pullOutSelect" (formula "3") (term "1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_11"))
                              (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "18"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "35")))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "14"))
                              (rule "ifthenelse_negated" (formula "3") (term "0"))
                              (rule "pullOutSelect" (formula "3") (term "1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_12"))
                              (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "15"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "36")))
                              (rule "ifthenelse_negated" (formula "3") (term "0"))
                              (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "12"))
                              (rule "nnf_imp2or" (formula "13") (term "0"))
                              (rule "nnf_imp2or" (formula "38") (term "0,1"))
                              (rule "nnf_imp2or" (formula "8") (term "0"))
                              (rule "nnf_imp2or" (formula "7") (term "0"))
                              (rule "nnf_notAnd" (formula "13") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
                              (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "13") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                              (rule "mul_literals" (formula "13") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "8") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "8") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "7") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
                              (rule "mul_literals" (formula "7") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "7") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
                              (rule "mul_literals" (formula "7") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "38") (term "0,0,1"))
                              (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0,1"))
                              (rule "times_zero_1" (formula "38") (term "1,0,0,0,0,0,1"))
                              (rule "add_literals" (formula "38") (term "0,0,0,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0,1"))
                              (rule "mul_literals" (formula "38") (term "1,0,0,0,1"))
                              (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,1"))
                              (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,1"))
                              (rule "add_literals" (formula "38") (term "0,0,0,1,0,0,1"))
                              (rule "add_zero_left" (formula "38") (term "0,0,1,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0,1"))
                              (rule "ifthenelse_split" (formula "2") (term "0"))
                              (branch "encrMsg.length ≥ 1 TRUE"
                                 (rule "replace_known_left" (formula "27") (term "0,0") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "3")))
                                 (rule "eqSeqDef" (formula "27") (inst "iv=iv"))
                                 (rule "lenOfSeqDef" (formula "27") (term "0,0"))
                                 (rule "eqSymm" (formula "27") (term "0"))
                                 (rule "polySimp_elimSub" (formula "27") (term "1,1,0"))
                                 (rule "times_zero_2" (formula "27") (term "1,1,1,0"))
                                 (rule "add_zero_right" (formula "27") (term "1,1,0"))
                                 (rule "lenOfSeqDef" (formula "27") (term "1,1,0,0,1"))
                                 (rule "polySimp_elimSub" (formula "27") (term "1,1,1,0,0,1"))
                                 (rule "times_zero_2" (formula "27") (term "1,1,1,1,0,0,1"))
                                 (rule "add_zero_right" (formula "27") (term "1,1,1,0,0,1"))
                                 (rule "getOfSeqDef" (formula "27") (term "1,1,0,1"))
                                 (rule "castDel" (formula "27") (term "1,1,1,0,1"))
                                 (rule "castDel" (formula "27") (term "2,1,1,0,1"))
                                 (rule "add_zero_right" (formula "27") (term "0,2,1,1,1,0,1"))
                                 (rule "polySimp_elimSub" (formula "27") (term "1,1,0,1,1,0,1"))
                                 (rule "mul_literals" (formula "27") (term "1,1,1,0,1,1,0,1"))
                                 (rule "add_zero_right" (formula "27") (term "1,1,0,1,1,0,1"))
                                 (rule "getOfSeqDef" (formula "27") (term "0,1,0,1"))
                                 (rule "castDel" (formula "27") (term "2,0,1,0,1"))
                                 (rule "castDel" (formula "27") (term "1,0,1,0,1"))
                                 (rule "add_zero_right" (formula "27") (term "0,2,1,0,1,0,1"))
                                 (rule "polySimp_elimSub" (formula "27") (term "1,1,0,0,1,0,1"))
                                 (rule "times_zero_2" (formula "27") (term "1,1,1,0,0,1,0,1"))
                                 (rule "add_zero_right" (formula "27") (term "1,1,0,0,1,0,1"))
                                 (rule "lenOfSeqDef" (formula "27") (term "0,0"))
                                 (rule "polySimp_elimSub" (formula "27") (term "1,0,0"))
                                 (rule "times_zero_2" (formula "27") (term "1,1,0,0"))
                                 (rule "add_zero_right" (formula "27") (term "1,0,0"))
                                 (builtin "One Step Simplification" (formula "27"))
                                 (rule "allRight" (formula "27") (inst "sk=iv_7"))
                                 (rule "impRight" (formula "27"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "1")))
                                 (rule "inEqSimp_ltToLeq" (formula "2"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "29") (term "0,0"))
                                 (rule "eqSymm" (formula "29"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,1"))
                                 (rule "polySimp_addComm1" (formula "29") (term "0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,1,0"))
                                 (rule "add_zero_right" (formula "2") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "29") (term "0,0"))
                                 (rule "eqSymm" (formula "29"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,1"))
                                 (rule "eqSymm" (formula "29"))
                                 (rule "polySimp_addComm1" (formula "29") (term "0,0,0"))
                                 (rule "eqSymm" (formula "29"))
                                 (rule "inEqSimp_commuteLeq" (formula "1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "29") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "29") (term "0,0,0"))
                                 (rule "eqSymm" (formula "29"))
                                 (rule "polySimp_elimOne" (formula "29") (term "0,0,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "29") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "29") (term "0,0,0"))
                                 (rule "polySimp_elimOne" (formula "29") (term "0,0,0"))
                                 (rule "eqSymm" (formula "29"))
                                 (rule "pullOutSelect" (formula "29") (term "1,0") (inst "selectSK=arr_13"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "eqSymm" (formula "30"))
                                 (rule "pullOutSelect" (formula "30") (term "1,0") (inst "selectSK=arr_14"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "24"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "20"))
                                 (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=arr_15"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "replaceKnownSelect_taclet01000000000_11" (formula "1") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "21"))
                                 (rule "commute_or_2" (formula "19") (term "0"))
                                 (rule "commute_or_2" (formula "14") (term "0"))
                                 (rule "ifthenelse_split" (formula "44") (term "0,0"))
                                 (branch "result_2.length ≥ 1 TRUE"
                                    (rule "eqSymm" (formula "45") (term "0"))
                                    (rule "replace_known_left" (formula "45") (term "0,1,1,0,0,1") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "45"))
                                    (rule "commute_or_2" (formula "14") (term "0"))
                                    (rule "commute_or" (formula "20") (term "0,0"))
                                    (rule "commute_or" (formula "15") (term "0,0"))
                                    (rule "commute_or" (formula "14") (term "0,0"))
                                    (rule "ifthenelse_split" (formula "10") (term "0"))
                                    (branch " verif.selectvoting.system.core.Setup.mix.<created> = TRUE TRUE"
                                       (rule "applyEqReverse" (formula "12") (term "1,0") (ifseqformula "11"))
                                       (rule "hideAuxiliaryEq" (formula "11"))
                                       (rule "replace_known_left" (formula "11") (term "0,0,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "11"))
                                       (rule "applyEqReverse" (formula "12") (term "1,0") (ifseqformula "11"))
                                       (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "10")))
                                       (rule "true_left" (formula "12"))
                                       (rule "hideAuxiliaryEq" (formula "11"))
                                       (rule "ifthenelse_to_or_left" (formula "13") (term "0,0,0"))
                                       (rule "eqSymm" (formula "13") (term "1,1,0,0,0"))
                                       (builtin "One Step Simplification" (formula "13"))
                                       (rule "eqSymm" (formula "13") (term "1,0,0,0,0"))
                                       (rule "nnf_notAnd" (formula "13") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,0,0,0"))
                                       (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,0,0,0"))
                                       (rule "add_literals" (formula "13") (term "0,0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,0"))
                                       (rule "nnf_notAnd" (formula "13") (term "0,1,1,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "13") (term "0,0,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "13") (term "1,0,0,0,0,1,1,0,0,0"))
                                       (rule "add_literals" (formula "13") (term "0,0,0,0,1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "13") (term "1,0,0,1,1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "13") (term "1,0,1,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,1,1,0,0,0"))
                                       (rule "add_literals" (formula "13") (term "0,0,0,1,0,1,1,0,0,0"))
                                       (rule "add_zero_left" (formula "13") (term "0,0,1,0,1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "13") (term "1,1,0,1,1,0,0,0"))
                                       (rule "commute_or" (formula "13") (term "0,0"))
                                       (rule "commute_or_2" (formula "13") (term "0"))
                                       (rule "commute_or" (formula "13") (term "1,1,0"))
                                       (rule "commute_or_2" (formula "13") (term "0,1,0"))
                                       (rule "commute_or_2" (formula "13") (term "0,1,1,0"))
                                       (rule "commute_or" (formula "13") (term "0,0,1,0"))
                                       (rule "commute_or" (formula "13") (term "0,0,1,1,0"))
                                       (rule "ifthenelse_to_or_right" (formula "12") (term "0,0,0"))
                                       (builtin "One Step Simplification" (formula "12"))
                                       (rule "nnf_notAnd" (formula "12") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0,0,0,0"))
                                       (rule "add_literals" (formula "12") (term "0,0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0,0"))
                                       (rule "nnf_notAnd" (formula "12") (term "0,1,1,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "12") (term "0,0,1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,1,1,0,0,0"))
                                       (rule "add_literals" (formula "12") (term "0,0,0,0,1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "12") (term "1,0,0,1,1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "12") (term "1,0,1,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,1,1,0,0,0"))
                                       (rule "add_literals" (formula "12") (term "0,0,0,1,0,1,1,0,0,0"))
                                       (rule "add_zero_left" (formula "12") (term "0,0,1,0,1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "12") (term "1,1,0,1,1,0,0,0"))
                                       (rule "commute_or" (formula "12") (term "0,0"))
                                       (rule "commute_or_2" (formula "12") (term "0"))
                                       (rule "commute_or_2" (formula "12") (term "0,1,0"))
                                       (rule "commute_or" (formula "12") (term "1,1,0"))
                                       (rule "cnf_rightDist" (formula "13") (term "1,1,0"))
                                       (rule "commute_or" (formula "12") (term "0,0,1,0"))
                                       (rule "commute_or_2" (formula "12") (term "0,1,1,0"))
                                       (rule "commute_or_2" (formula "13") (term "0,1,1,0"))
                                       (rule "inEqSimp_or_tautInEq1" (formula "13") (term "0,0,1,1,0"))
                                       (rule "add_literals" (formula "13") (term "1,1,0,0,1,1,0"))
                                       (rule "qeq_literals" (formula "13") (term "1,0,0,1,1,0"))
                                       (builtin "One Step Simplification" (formula "13"))
                                       (rule "shift_paren_or" (formula "13") (term "1,1,0"))
                                       (rule "commute_or" (formula "13") (term "0,1,1,0"))
                                       (rule "inEqSimp_or_tautInEq1" (formula "13") (term "1,1,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "13") (term "1,1,1,0"))
                                       (rule "polySimp_pullOutFactor1" (formula "13") (term "0,1,1,1,0"))
                                       (rule "add_literals" (formula "13") (term "1,0,1,1,1,0"))
                                       (rule "times_zero_1" (formula "13") (term "0,1,1,1,0"))
                                       (rule "leq_literals" (formula "13") (term "1,1,1,0"))
                                       (builtin "One Step Simplification" (formula "13"))
                                       (rule "commute_or_2" (formula "13") (term "0"))
                                       (rule "shift_paren_or" (formula "13") (term "0,0"))
                                       (rule "shift_paren_or" (formula "13") (term "0,0,0"))
                                       (rule "commute_or" (formula "13") (term "0,0,0,0"))
                                       (builtin "One Step Simplification" (formula "13"))
                                       (rule "commute_or" (formula "12") (term "0,0,1,1,0"))
                                       (rule "cnf_rightDist" (formula "12") (term "1,1,0"))
                                       (rule "commute_or_2" (formula "12") (term "0,1,1,0"))
                                       (rule "inEqSimp_or_tautInEq1" (formula "12") (term "0,0,1,1,0"))
                                       (rule "add_zero_right" (formula "12") (term "1,1,0,0,1,1,0"))
                                       (rule "qeq_literals" (formula "12") (term "1,0,0,1,1,0"))
                                       (builtin "One Step Simplification" (formula "12"))
                                       (rule "shift_paren_or" (formula "12") (term "1,1,0"))
                                       (rule "commute_or" (formula "12") (term "0,1,1,0"))
                                       (rule "inEqSimp_or_tautInEq1" (formula "12") (term "1,1,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "12") (term "1,1,1,0"))
                                       (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,1,1,0"))
                                       (rule "add_literals" (formula "12") (term "1,0,1,1,1,0"))
                                       (rule "times_zero_1" (formula "12") (term "0,1,1,1,0"))
                                       (rule "leq_literals" (formula "12") (term "1,1,1,0"))
                                       (builtin "One Step Simplification" (formula "12"))
                                       (rule "commute_or_2" (formula "12") (term "0"))
                                       (rule "shift_paren_or" (formula "12") (term "0,0"))
                                       (rule "shift_paren_or" (formula "12") (term "0,0,0"))
                                       (rule "commute_or" (formula "12") (term "0,0,0,0"))
                                       (builtin "One Step Simplification" (formula "12"))
                                       (rule "ifthenelse_split" (formula "6") (term "0"))
                                       (branch "encrMsg[iv_6].length ≥ 1 TRUE"
                                          (rule "replace_known_left" (formula "32") (term "0,0") (ifseqformula "7"))
                                          (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "7")))
                                          (rule "ifthenelse_split" (formula "4") (term "0"))
                                          (branch "¬encrMsg[iv_6] = null ∧ ¬encrMsg[iv_6].<created> = TRUE TRUE"
                                             (rule "andLeft" (formula "4"))
                                             (rule "notLeft" (formula "4"))
                                             (rule "notLeft" (formula "4"))
                                             (rule "referencedObjectIsCreatedRight" (formula "32") (ifseqformula "33"))
                                             (rule "close" (formula "32") (ifseqformula "15"))
                                          )
                                          (branch "¬encrMsg[iv_6] = null ∧ ¬encrMsg[iv_6].<created> = TRUE FALSE"
                                             (rule "applyEqReverse" (formula "33") (term "1") (ifseqformula "4"))
                                             (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "4"))
                                             (rule "hideAuxiliaryEq" (formula "4"))
                                             (rule "eqSymm" (formula "32"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "17") (term "0") (ifseqformula "14"))
                                             (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "18"))
                                             (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "44"))
                                             (builtin "One Step Simplification" (formula "17"))
                                             (rule "applyEq" (formula "17") (term "1,0") (ifseqformula "18"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "17") (term "1,0") (ifseqformula "14"))
                                             (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "43"))
                                             (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "10")))
                                             (rule "true_left" (formula "17"))
                                             (rule "arrayLengthIsAShort" (formula "9") (term "0"))
                                             (builtin "One Step Simplification" (formula "9"))
                                             (rule "true_left" (formula "9"))
                                             (rule "arrayLengthNotNegative" (formula "8") (term "0"))
                                             (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "9"))
                                             (rule "leq_literals" (formula "8") (term "0"))
                                             (builtin "One Step Simplification" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "ifthenelse_to_or_left" (formula "13") (term "0,0,0,0"))
                                             (rule "eqSymm" (formula "13") (term "1,1,0,0,0,0"))
                                             (rule "eqSymm" (formula "13") (term "1,0,0,0,0,0"))
                                             (rule "nnf_notAnd" (formula "13") (term "0,0,0,0,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,0,0,0,0"))
                                             (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0,0,0,0"))
                                             (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,0,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0,0"))
                                             (rule "commute_or" (formula "13") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "13") (term "0,0"))
                                             (rule "commute_or_2" (formula "13") (term "0"))
                                             (rule "commute_or_2" (formula "13") (term "0,1,0"))
                                             (rule "commute_or" (formula "13") (term "1,1,0"))
                                             (rule "commute_or" (formula "13") (term "0,0,1,0"))
                                             (rule "cnf_rightDist" (formula "13") (term "1,1,0"))
                                             (rule "cnf_rightDist" (formula "13") (term "0"))
                                             (rule "distr_forallAnd" (formula "13"))
                                             (rule "andLeft" (formula "13"))
                                             (rule "commute_or_2" (formula "13") (term "0"))
                                             (rule "commute_or" (formula "14") (term "0"))
                                             (rule "shift_paren_or" (formula "13") (term "0,0"))
                                             (rule "commute_or" (formula "14") (term "1,1,0"))
                                             (rule "commute_or_2" (formula "13") (term "0,0,0"))
                                             (builtin "One Step Simplification" (formula "13"))
                                             (rule "cnf_rightDist" (formula "14") (term "0"))
                                             (rule "distr_forallAnd" (formula "14"))
                                             (rule "andLeft" (formula "14"))
                                             (rule "commute_or_2" (formula "14") (term "0"))
                                             (rule "shift_paren_or" (formula "15") (term "0"))
                                             (rule "commute_or_2" (formula "14") (term "0,0"))
                                             (rule "shift_paren_or" (formula "15") (term "0,0"))
                                             (rule "commute_or_2" (formula "15") (term "0,0,0"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "15") (term "0,0"))
                                             (rule "inEqSimp_homoInEq1" (formula "15") (term "1,0,0"))
                                             (rule "polySimp_pullOutFactor1" (formula "15") (term "0,1,0,0"))
                                             (rule "add_literals" (formula "15") (term "1,0,1,0,0"))
                                             (rule "times_zero_1" (formula "15") (term "0,1,0,0"))
                                             (rule "leq_literals" (formula "15") (term "1,0,0"))
                                             (builtin "One Step Simplification" (formula "15"))
                                             (rule "true_left" (formula "15"))
                                             (rule "shift_paren_or" (formula "13") (term "0,0,0"))
                                             (rule "shift_paren_or" (formula "14") (term "0,0,0"))
                                             (rule "commute_or" (formula "13") (term "0,0,0,0"))
                                             (builtin "One Step Simplification" (formula "13"))
                                             (rule "commute_or" (formula "14") (term "0,0,0,0"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "14") (term "0,0,0"))
                                             (rule "add_literals" (formula "14") (term "1,1,0,0,0"))
                                             (rule "qeq_literals" (formula "14") (term "1,0,0,0"))
                                             (builtin "One Step Simplification" (formula "14"))
                                             (rule "true_left" (formula "14"))
                                             (rule "ifthenelse_to_or_left" (formula "12") (term "0,0,0,0"))
                                             (rule "eqSymm" (formula "12") (term "1,1,0,0,0,0"))
                                             (rule "nnf_notAnd" (formula "12") (term "0,0,0,0,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,0,0,0,0"))
                                             (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0,0,0,0"))
                                             (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0,0"))
                                             (rule "commute_or" (formula "12") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "12") (term "0,0"))
                                             (rule "commute_or_2" (formula "12") (term "0"))
                                             (rule "commute_or_2" (formula "12") (term "0,1,0"))
                                             (rule "commute_or" (formula "12") (term "1,1,0"))
                                             (rule "commute_or" (formula "12") (term "0,0,1,0"))
                                             (rule "arrayLengthIsAShort" (formula "1") (term "0"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "arrayLengthNotNegative" (formula "1") (term "0"))
                                             (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "2"))
                                             (rule "leq_literals" (formula "1") (term "0"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "cut_direct" (formula "44") (term "0"))
                                             (branch "CUT: mConcat(int2seq(encrMsg.length), arrConcat(0, array2seq2d(heapAfter_concatenate, encrMsg))).length = result_2.length TRUE"
                                                (builtin "One Step Simplification" (formula "45"))
                                                (rule "allRight" (formula "45") (inst "sk=iv_8"))
                                                (rule "cutUpperBound" (formula "45") (ifseqformula "13"))
                                                (branch "Case 1"
                                                   (rule "crossInst" (formula "14") (inst "sk=iv_10") (ifseqformula "46"))
                                                   (rule "orRight" (formula "47"))
                                                   (rule "andLeft" (formula "14"))
                                                   (rule "orRight" (formula "48"))
                                                   (rule "eqSymm" (formula "1"))
                                                   (rule "eqSymm" (formula "14"))
                                                   (rule "inEqSimp_geqRight" (formula "49"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                   (rule "inEqSimp_leqRight" (formula "49"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "replace_known_left" (formula "50") (term "0,0,0") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "50"))
                                                   (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0,0"))
                                                   (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0,1"))
                                                   (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0"))
                                                   (rule "inEqSimp_homoInEq0" (formula "17") (term "1,1,1,1"))
                                                   (rule "polySimp_addComm1" (formula "17") (term "0,1,1,1,1"))
                                                   (rule "inEqSimp_homoInEq0" (formula "50") (term "0,0"))
                                                   (rule "polySimp_addComm1" (formula "50") (term "0,0,0"))
                                                   (rule "applyEq" (formula "50") (term "1,0,0,0") (ifseqformula "3"))
                                                   (rule "polySimp_pullOutFactor2b" (formula "50") (term "0,0,0"))
                                                   (rule "add_literals" (formula "50") (term "1,1,0,0,0"))
                                                   (rule "times_zero_1" (formula "50") (term "1,0,0,0"))
                                                   (rule "add_zero_right" (formula "50") (term "0,0,0"))
                                                   (rule "qeq_literals" (formula "50") (term "0,0"))
                                                   (builtin "One Step Simplification" (formula "50"))
                                                   (rule "eqSymm" (formula "50"))
                                                   (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "16"))
                                                   (rule "replace_known_left" (formula "17") (term "0,1,1,1") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "17"))
                                                   (rule "applyEq" (formula "5") (term "0") (ifseqformula "3"))
                                                   (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "3"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                   (rule "add_literals" (formula "2") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "2") (term "1,0"))
                                                   (rule "add_zero_right" (formula "2") (term "0"))
                                                   (rule "leq_literals" (formula "2"))
                                                   (rule "closeFalse" (formula "2"))
                                                )
                                                (branch "Case 2"
                                                   (rule "crossInst" (formula "14") (inst "sk=iv_9") (ifseqformula "46"))
                                                   (rule "orRight" (formula "47"))
                                                   (rule "notLeft" (formula "1"))
                                                   (rule "andLeft" (formula "13"))
                                                   (rule "orRight" (formula "48"))
                                                   (rule "eqSymm" (formula "34"))
                                                   (rule "inEqSimp_leqRight" (formula "48"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "replace_known_left" (formula "50") (term "0,0,0") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "50"))
                                                   (rule "inEqSimp_geqRight" (formula "49"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                   (rule "inEqSimp_commuteGeq" (formula "16") (term "1,0,1"))
                                                   (rule "inEqSimp_commuteGeq" (formula "16") (term "1,0"))
                                                   (rule "inEqSimp_commuteGeq" (formula "16") (term "1,0,0"))
                                                   (rule "inEqSimp_homoInEq0" (formula "16") (term "1,1,1,1"))
                                                   (rule "polySimp_addComm1" (formula "16") (term "0,1,1,1,1"))
                                                   (rule "inEqSimp_homoInEq0" (formula "50") (term "0,0"))
                                                   (rule "polySimp_addComm1" (formula "50") (term "0,0,0"))
                                                   (rule "applyEqRigid" (formula "16") (term "1,1,0,0") (ifseqformula "15"))
                                                   (rule "applyEq" (formula "16") (term "1,1,0,1") (ifseqformula "15"))
                                                   (rule "applyEqRigid" (formula "16") (term "0,2,0,0,0,0,1") (ifseqformula "15"))
                                                   (rule "applyEqRigid" (formula "16") (term "0,0,1,1,1") (ifseqformula "15"))
                                                   (rule "replace_known_left" (formula "16") (term "0,1,1,1") (ifseqformula "2"))
                                                   (builtin "One Step Simplification" (formula "16"))
                                                   (rule "applyEqRigid" (formula "16") (term "0,1,0,0,1") (ifseqformula "15"))
                                                   (rule "applyEq" (formula "16") (term "0,2,0,0,1,1") (ifseqformula "15"))
                                                   (rule "applyEq" (formula "16") (term "1,1,0") (ifseqformula "15"))
                                                   (rule "applyEqRigid" (formula "16") (term "0,0,0,0") (ifseqformula "15"))
                                                   (rule "applyEq" (formula "16") (term "0,2,1,0,0,0,1") (ifseqformula "15"))
                                                   (rule "applyEqRigid" (formula "16") (term "0,1,0,0,1,1,1") (ifseqformula "15"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "50") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "50") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "50") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "50") (term "1,1,0,0"))
                                                   (rule "mul_literals" (formula "50") (term "0,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "50") (term "1,1,0,0"))
                                                   (rule "replace_known_left" (formula "50") (term "0,0") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "50"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,1,1"))
                                                   (rule "polySimp_mulComm0" (formula "16") (term "1,1,1,1"))
                                                   (rule "polySimp_rightDist" (formula "16") (term "1,1,1,1"))
                                                   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,1,1"))
                                                   (rule "mul_literals" (formula "16") (term "0,1,1,1,1"))
                                                   (rule "polySimp_elimOne" (formula "16") (term "1,1,1,1,1"))
                                                   (rule "inEqSimp_contradEq7" (formula "36") (ifseqformula "1"))
                                                   (rule "polySimp_mulComm0" (formula "36") (term "1,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0"))
                                                   (rule "add_literals" (formula "36") (term "1,1,0,0"))
                                                   (rule "times_zero_1" (formula "36") (term "1,0,0"))
                                                   (rule "add_zero_right" (formula "36") (term "0,0"))
                                                   (rule "leq_literals" (formula "36") (term "0"))
                                                   (builtin "One Step Simplification" (formula "36"))
                                                   (rule "false_right" (formula "36"))
                                                   (rule "inEqSimp_contradInEq1" (formula "16") (term "1,0,0,1") (ifseqformula "2"))
                                                   (rule "qeq_literals" (formula "16") (term "0,1,0,0,1"))
                                                   (builtin "One Step Simplification" (formula "16"))
                                                   (rule "inEqSimp_contradInEq1" (formula "16") (term "0,0,0") (ifseqformula "2"))
                                                   (rule "qeq_literals" (formula "16") (term "0,0,0,0"))
                                                   (builtin "One Step Simplification" (formula "16"))
                                                   (rule "pullOutSelect" (formula "49") (term "0") (inst "selectSK=arr_16"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "34"))
                                                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "42")))
                                                   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "30"))
                                                   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "26"))
                                                   (rule "eqSymm" (formula "50"))
                                                   (rule "replace_known_right" (formula "1") (term "1,0,0,0,0") (ifseqformula "40"))
                                                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "39")) (ifInst ""  (formula "41")))
                                                   (rule "applyEqReverse" (formula "50") (term "1") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "eqSymm" (formula "49"))
                                                   (rule "narrowSelectArrayType" (formula "49") (term "0") (ifseqformula "32") (ifseqformula "41"))
                                                   (rule "eqSymm" (formula "49"))
                                                   (rule "pullOutSelect" (formula "16") (term "0,0,1,1") (inst "selectSK=arr_17"))
                                                   (rule "applyEq" (formula "17") (term "1,0,0,1") (ifseqformula "16"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "16") (ifseqformula "34"))
                                                   (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "46")))
                                                   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "16") (term "0,0,0") (ifseqformula "30"))
                                                   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "16") (term "0,0,0,0") (ifseqformula "26"))
                                                   (rule "eqSymm" (formula "17") (term "0,1,1"))
                                                   (rule "replace_known_left" (formula "16") (term "1,0,0,0,0") (ifseqformula "28"))
                                                   (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "47")))
                                                   (rule "simplifySelectOfAnonEQ" (formula "16") (ifseqformula "30"))
                                                   (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "46")))
                                                   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "16") (term "0,0,0") (ifseqformula "26"))
                                                   (rule "replace_known_left" (formula "16") (term "1,0,0,0") (ifseqformula "28"))
                                                   (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "47")))
                                                   (rule "applyEq" (formula "17") (term "0,0,0,1") (ifseqformula "16"))
                                                   (builtin "One Step Simplification" (formula "17"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "16") (ifseqformula "26"))
                                                   (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "46")) (ifInst ""  (formula "47")))
                                                   (rule "applyEqReverse" (formula "17") (term "1,0,1") (ifseqformula "16"))
                                                   (rule "hideAuxiliaryEq" (formula "16"))
                                                   (rule "eqSymm" (formula "16") (term "0,1"))
                                                   (rule "narrowSelectArrayType" (formula "16") (term "0,0,1") (ifseqformula "24") (ifseqformula "45"))
                                                   (rule "eqSymm" (formula "16") (term "0,1"))
                                                   (rule "cnf_rightDist" (formula "17") (term "1,1,0"))
                                                   (rule "commute_or_2" (formula "16"))
                                                   (rule "allLeft" (formula "23") (inst "t=iv_6"))
                                                   (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "23") (term "1,0") (ifseqformula "10"))
                                                   (rule "qeq_literals" (formula "23") (term "0,1,0"))
                                                   (builtin "One Step Simplification" (formula "23"))
                                                   (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "12"))
                                                   (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1"))
                                                   (rule "add_literals" (formula "23") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
                                                   (rule "add_zero_right" (formula "23") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "23") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "23"))
                                                   (rule "notLeft" (formula "23"))
                                                   (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "36"))
                                                   (builtin "One Step Simplification" (formula "5"))
                                                   (rule "replace_known_right" (formula "6") (term "0,0,0,0") (ifseqformula "36"))
                                                   (builtin "One Step Simplification" (formula "6"))
                                                   (rule "replace_known_right" (formula "37") (term "0,0") (ifseqformula "36"))
                                                   (builtin "One Step Simplification" (formula "37"))
                                                   (rule "notRight" (formula "37"))
                                                   (rule "replace_known_left" (formula "6") (term "0,0,0,0") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "6"))
                                                   (rule "applyEqReverse" (formula "7") (term "2,0") (ifseqformula "6"))
                                                   (rule "hideAuxiliaryEq" (formula "6"))
                                                   (rule "replace_known_left" (formula "6") (term "0,0,0,0,0") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "37")))
                                                   (rule "closeFalse" (formula "6"))
                                                )
                                             )
                                             (branch "CUT: mConcat(int2seq(encrMsg.length), arrConcat(0, array2seq2d(heapAfter_concatenate, encrMsg))).length = result_2.length FALSE"
                                                (builtin "One Step Simplification" (formula "45"))
                                                (rule "false_right" (formula "45"))
                                                (rule "cnf_rightDist" (formula "12") (term "1,1,0"))
                                                (rule "cnf_rightDist" (formula "12") (term "0"))
                                                (rule "distr_forallAnd" (formula "12"))
                                                (rule "andLeft" (formula "12"))
                                                (rule "commute_or" (formula "13") (term "0"))
                                                (rule "commute_or_2" (formula "12") (term "0"))
                                                (rule "commute_or" (formula "13") (term "1,1,0"))
                                                (rule "shift_paren_or" (formula "12") (term "0,0"))
                                                (rule "commute_or_2" (formula "12") (term "0,0,0"))
                                                (builtin "One Step Simplification" (formula "12"))
                                                (rule "cnf_rightDist" (formula "13") (term "0"))
                                                (rule "distr_forallAnd" (formula "13"))
                                                (rule "andLeft" (formula "13"))
                                                (rule "commute_or_2" (formula "13") (term "0"))
                                                (rule "shift_paren_or" (formula "14") (term "0"))
                                                (rule "commute_or_2" (formula "13") (term "0,0"))
                                                (rule "shift_paren_or" (formula "14") (term "0,0"))
                                                (rule "commute_or_2" (formula "14") (term "0,0,0"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "14") (term "0,0"))
                                                (rule "inEqSimp_homoInEq1" (formula "14") (term "1,0,0"))
                                                (rule "polySimp_pullOutFactor1" (formula "14") (term "0,1,0,0"))
                                                (rule "add_literals" (formula "14") (term "1,0,1,0,0"))
                                                (rule "times_zero_1" (formula "14") (term "0,1,0,0"))
                                                (rule "leq_literals" (formula "14") (term "1,0,0"))
                                                (builtin "One Step Simplification" (formula "14"))
                                                (rule "true_left" (formula "14"))
                                                (rule "shift_paren_or" (formula "12") (term "0,0,0"))
                                                (rule "shift_paren_or" (formula "13") (term "0,0,0"))
                                                (rule "commute_or" (formula "12") (term "0,0,0,0"))
                                                (builtin "One Step Simplification" (formula "12"))
                                                (rule "commute_or" (formula "13") (term "0,0,0,0"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "13") (term "0,0,0"))
                                                (rule "add_zero_right" (formula "13") (term "1,1,0,0,0"))
                                                (rule "qeq_literals" (formula "13") (term "1,0,0,0"))
                                                (builtin "One Step Simplification" (formula "13"))
                                                (rule "true_left" (formula "13"))
                                                (rule "allLeft" (formula "18") (inst "t=iv_6"))
                                                (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "18") (term "1,0") (ifseqformula "7"))
                                                (rule "qeq_literals" (formula "18") (term "0,1,0"))
                                                (builtin "One Step Simplification" (formula "18"))
                                                (rule "inEqSimp_contradInEq1" (formula "18") (term "1") (ifseqformula "9"))
                                                (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1"))
                                                (rule "add_literals" (formula "18") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "18") (term "1,0,0,1"))
                                                (rule "add_zero_right" (formula "18") (term "0,0,1"))
                                                (rule "leq_literals" (formula "18") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "18"))
                                                (rule "notLeft" (formula "18"))
                                                (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "31"))
                                                (builtin "One Step Simplification" (formula "2"))
                                                (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "31"))
                                                (builtin "One Step Simplification" (formula "3"))
                                                (rule "replace_known_right" (formula "32") (term "0,0") (ifseqformula "31"))
                                                (builtin "One Step Simplification" (formula "32"))
                                                (rule "notRight" (formula "32"))
                                                (rule "replace_known_left" (formula "4") (term "0,0,0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "4"))
                                                (rule "applyEqReverse" (formula "33") (term "1") (ifseqformula "4"))
                                                (rule "hideAuxiliaryEq" (formula "4"))
                                                (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "32")))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                          )
                                       )
                                       (branch "encrMsg[iv_6].length ≥ 1 FALSE"
                                          (rule "inEqSimp_geqRight" (formula "31"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "7"))
                                          (rule "mul_literals" (formula "7") (term "1,0"))
                                          (rule "add_zero_right" (formula "7") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "7"))
                                          (rule "mul_literals" (formula "7") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "7") (ifseqformula "6"))
                                          (rule "qeq_literals" (formula "7") (term "0"))
                                          (builtin "One Step Simplification" (formula "7"))
                                          (rule "closeFalse" (formula "7"))
                                       )
                                    )
                                    (branch " verif.selectvoting.system.core.Setup.mix.<created> = TRUE FALSE"
                                       (rule "referencedObjectIsCreatedRight" (formula "33") (ifseqformula "44"))
                                       (rule "close" (formula "33") (ifseqformula "16"))
                                    )
                                 )
                                 (branch "result_2.length ≥ 1 FALSE"
                                    (rule "eqSymm" (formula "45") (term "0"))
                                    (rule "replace_known_right" (formula "45") (term "0,1,1,0,0,1") (ifseqformula "44"))
                                    (builtin "One Step Simplification" (formula "45"))
                                    (rule "inEqSimp_geqRight" (formula "44"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_or_tautInEq0" (formula "45") (term "0,0,1"))
                                    (rule "add_literals" (formula "45") (term "1,1,0,0,1"))
                                    (rule "qeq_literals" (formula "45") (term "1,0,0,1"))
                                    (builtin "One Step Simplification" (formula "45"))
                                    (rule "commute_or_2" (formula "14") (term "0"))
                                    (rule "commute_or" (formula "20") (term "0,0"))
                                    (rule "commute_or" (formula "15") (term "0,0"))
                                    (rule "commute_or" (formula "14") (term "0,0"))
                                    (rule "ifthenelse_split" (formula "10") (term "0"))
                                    (branch " verif.selectvoting.system.core.Setup.mix.<created> = TRUE TRUE"
                                       (rule "applyEqReverse" (formula "12") (term "1,0") (ifseqformula "11"))
                                       (rule "hideAuxiliaryEq" (formula "11"))
                                       (rule "replace_known_left" (formula "11") (term "0,0,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "11"))
                                       (rule "applyEqReverse" (formula "12") (term "1,0") (ifseqformula "11"))
                                       (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "10")))
                                       (rule "true_left" (formula "12"))
                                       (rule "hideAuxiliaryEq" (formula "11"))
                                       (rule "ifthenelse_to_or_left" (formula "13") (term "0,0,0"))
                                       (rule "eqSymm" (formula "13") (term "1,0,0,0,0"))
                                       (rule "eqSymm" (formula "13") (term "1,1,0,0,0"))
                                       (builtin "One Step Simplification" (formula "13"))
                                       (rule "nnf_notAnd" (formula "13") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,0,0,0"))
                                       (rule "add_literals" (formula "13") (term "0,0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,0"))
                                       (rule "nnf_notAnd" (formula "13") (term "0,1,1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "13") (term "1,0,1,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,1,1,0,0,0"))
                                       (rule "add_literals" (formula "13") (term "0,0,0,1,0,1,1,0,0,0"))
                                       (rule "add_zero_left" (formula "13") (term "0,0,1,0,1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "13") (term "1,1,0,1,1,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "13") (term "0,0,1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,1,1,0,0,0"))
                                       (rule "add_literals" (formula "13") (term "0,0,0,0,1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "13") (term "1,0,0,1,1,0,0,0"))
                                       (rule "commute_or" (formula "13") (term "0,0"))
                                       (rule "commute_or_2" (formula "13") (term "0"))
                                       (rule "commute_or_2" (formula "13") (term "0,1,0"))
                                       (rule "commute_or" (formula "13") (term "1,1,0"))
                                       (rule "commute_or" (formula "13") (term "0,0,1,0"))
                                       (rule "commute_or_2" (formula "13") (term "0,1,1,0"))
                                       (rule "commute_or" (formula "13") (term "0,0,1,1,0"))
                                       (rule "ifthenelse_to_or_left" (formula "12") (term "0,0,0"))
                                       (rule "eqSymm" (formula "12") (term "1,0,0,0,0"))
                                       (rule "eqSymm" (formula "12") (term "1,1,0,0,0"))
                                       (builtin "One Step Simplification" (formula "12"))
                                       (rule "nnf_notAnd" (formula "12") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,0,0,0"))
                                       (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,0,0,0"))
                                       (rule "add_literals" (formula "12") (term "0,0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0"))
                                       (rule "nnf_notAnd" (formula "12") (term "0,1,1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "12") (term "1,0,1,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,1,1,0,0,0"))
                                       (rule "add_literals" (formula "12") (term "0,0,0,1,0,1,1,0,0,0"))
                                       (rule "add_zero_left" (formula "12") (term "0,0,1,0,1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "12") (term "1,1,0,1,1,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "12") (term "0,0,1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,1,1,0,0,0"))
                                       (rule "add_literals" (formula "12") (term "0,0,0,0,1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "12") (term "1,0,0,1,1,0,0,0"))
                                       (rule "commute_or" (formula "12") (term "0,0"))
                                       (rule "commute_or_2" (formula "12") (term "0"))
                                       (rule "commute_or" (formula "12") (term "1,1,0"))
                                       (rule "commute_or_2" (formula "12") (term "0,1,0"))
                                       (rule "cnf_rightDist" (formula "13") (term "1,1,0"))
                                       (rule "commute_or_2" (formula "12") (term "0,1,1,0"))
                                       (rule "commute_or" (formula "12") (term "0,0,1,0"))
                                       (rule "commute_or_2" (formula "13") (term "0,1,1,0"))
                                       (rule "inEqSimp_or_tautInEq1" (formula "13") (term "0,0,1,1,0"))
                                       (rule "add_zero_right" (formula "13") (term "1,1,0,0,1,1,0"))
                                       (rule "qeq_literals" (formula "13") (term "1,0,0,1,1,0"))
                                       (builtin "One Step Simplification" (formula "13"))
                                       (rule "shift_paren_or" (formula "13") (term "1,1,0"))
                                       (rule "commute_or" (formula "13") (term "0,1,1,0"))
                                       (rule "inEqSimp_or_tautInEq1" (formula "13") (term "1,1,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "13") (term "1,1,1,0"))
                                       (rule "polySimp_pullOutFactor1" (formula "13") (term "0,1,1,1,0"))
                                       (rule "add_literals" (formula "13") (term "1,0,1,1,1,0"))
                                       (rule "times_zero_1" (formula "13") (term "0,1,1,1,0"))
                                       (rule "leq_literals" (formula "13") (term "1,1,1,0"))
                                       (builtin "One Step Simplification" (formula "13"))
                                       (rule "commute_or_2" (formula "13") (term "0"))
                                       (rule "shift_paren_or" (formula "13") (term "0,0"))
                                       (rule "shift_paren_or" (formula "13") (term "0,0,0"))
                                       (rule "commute_or" (formula "13") (term "0,0,0,0"))
                                       (builtin "One Step Simplification" (formula "13"))
                                       (rule "commute_or" (formula "12") (term "0,0,1,1,0"))
                                       (rule "cnf_rightDist" (formula "12") (term "1,1,0"))
                                       (rule "commute_or_2" (formula "12") (term "0,1,1,0"))
                                       (rule "inEqSimp_or_tautInEq1" (formula "12") (term "0,0,1,1,0"))
                                       (rule "add_zero_right" (formula "12") (term "1,1,0,0,1,1,0"))
                                       (rule "qeq_literals" (formula "12") (term "1,0,0,1,1,0"))
                                       (builtin "One Step Simplification" (formula "12"))
                                       (rule "shift_paren_or" (formula "12") (term "1,1,0"))
                                       (rule "commute_or" (formula "12") (term "0,1,1,0"))
                                       (rule "inEqSimp_or_tautInEq1" (formula "12") (term "1,1,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "12") (term "1,1,1,0"))
                                       (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,1,1,0"))
                                       (rule "add_literals" (formula "12") (term "1,0,1,1,1,0"))
                                       (rule "times_zero_1" (formula "12") (term "0,1,1,1,0"))
                                       (rule "leq_literals" (formula "12") (term "1,1,1,0"))
                                       (builtin "One Step Simplification" (formula "12"))
                                       (rule "commute_or_2" (formula "12") (term "0"))
                                       (rule "shift_paren_or" (formula "12") (term "0,0"))
                                       (rule "shift_paren_or" (formula "12") (term "0,0,0"))
                                       (rule "commute_or" (formula "12") (term "0,0,0,0"))
                                       (builtin "One Step Simplification" (formula "12"))
                                       (rule "ifthenelse_split" (formula "6") (term "0"))
                                       (branch "encrMsg[iv_6].length ≥ 1 TRUE"
                                          (rule "replace_known_left" (formula "32") (term "0,1") (ifseqformula "7"))
                                          (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "7")))
                                          (rule "ifthenelse_split" (formula "4") (term "0"))
                                          (branch "¬encrMsg[iv_6] = null ∧ ¬encrMsg[iv_6].<created> = TRUE TRUE"
                                             (rule "andLeft" (formula "4"))
                                             (rule "notLeft" (formula "4"))
                                             (rule "notLeft" (formula "4"))
                                             (rule "referencedObjectIsCreatedRight" (formula "32") (ifseqformula "33"))
                                             (rule "close" (formula "32") (ifseqformula "15"))
                                          )
                                          (branch "¬encrMsg[iv_6] = null ∧ ¬encrMsg[iv_6].<created> = TRUE FALSE"
                                             (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "4"))
                                             (rule "applyEqReverse" (formula "33") (term "1") (ifseqformula "4"))
                                             (rule "hideAuxiliaryEq" (formula "4"))
                                             (rule "eqSymm" (formula "32"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "17") (term "0") (ifseqformula "14"))
                                             (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "18"))
                                             (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "44"))
                                             (builtin "One Step Simplification" (formula "17"))
                                             (rule "applyEq" (formula "17") (term "1,0") (ifseqformula "18"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "17") (term "1,0") (ifseqformula "14"))
                                             (rule "replace_known_left" (formula "17") (term "1") (ifseqformula "10"))
                                             (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "43")))
                                             (rule "true_left" (formula "17"))
                                             (rule "arrayLengthNotNegative" (formula "9") (term "0"))
                                             (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "8"))
                                             (rule "leq_literals" (formula "9") (term "0"))
                                             (builtin "One Step Simplification" (formula "9"))
                                             (rule "true_left" (formula "9"))
                                             (rule "arrayLengthIsAShort" (formula "8") (term "0"))
                                             (builtin "One Step Simplification" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "ifthenelse_to_or_left" (formula "13") (term "0,0,0,0"))
                                             (rule "eqSymm" (formula "13") (term "1,1,0,0,0,0"))
                                             (rule "eqSymm" (formula "13") (term "1,0,0,0,0,0"))
                                             (rule "nnf_notAnd" (formula "13") (term "0,0,0,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0,0,0,0"))
                                             (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,0,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,0,0,0,0"))
                                             (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,0,0"))
                                             (rule "commute_or" (formula "13") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "13") (term "0,0"))
                                             (rule "commute_or_2" (formula "13") (term "0"))
                                             (rule "commute_or_2" (formula "13") (term "0,1,0"))
                                             (rule "commute_or" (formula "13") (term "1,1,0"))
                                             (rule "commute_or" (formula "13") (term "0,0,1,0"))
                                             (rule "cnf_rightDist" (formula "13") (term "1,1,0"))
                                             (rule "cnf_rightDist" (formula "13") (term "0"))
                                             (rule "distr_forallAnd" (formula "13"))
                                             (rule "andLeft" (formula "13"))
                                             (rule "commute_or_2" (formula "13") (term "0"))
                                             (rule "commute_or" (formula "14") (term "0"))
                                             (rule "shift_paren_or" (formula "13") (term "0,0"))
                                             (rule "commute_or" (formula "14") (term "1,1,0"))
                                             (rule "commute_or_2" (formula "13") (term "0,0,0"))
                                             (builtin "One Step Simplification" (formula "13"))
                                             (rule "cnf_rightDist" (formula "14") (term "0"))
                                             (rule "distr_forallAnd" (formula "14"))
                                             (rule "andLeft" (formula "14"))
                                             (rule "commute_or_2" (formula "14") (term "0"))
                                             (rule "shift_paren_or" (formula "15") (term "0"))
                                             (rule "commute_or_2" (formula "14") (term "0,0"))
                                             (rule "shift_paren_or" (formula "15") (term "0,0"))
                                             (rule "commute_or_2" (formula "15") (term "0,0,0"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "15") (term "0,0"))
                                             (rule "inEqSimp_homoInEq1" (formula "15") (term "1,0,0"))
                                             (rule "polySimp_pullOutFactor1" (formula "15") (term "0,1,0,0"))
                                             (rule "add_literals" (formula "15") (term "1,0,1,0,0"))
                                             (rule "times_zero_1" (formula "15") (term "0,1,0,0"))
                                             (rule "leq_literals" (formula "15") (term "1,0,0"))
                                             (builtin "One Step Simplification" (formula "15"))
                                             (rule "true_left" (formula "15"))
                                             (rule "shift_paren_or" (formula "13") (term "0,0,0"))
                                             (rule "shift_paren_or" (formula "14") (term "0,0,0"))
                                             (rule "commute_or" (formula "13") (term "0,0,0,0"))
                                             (builtin "One Step Simplification" (formula "13"))
                                             (rule "commute_or" (formula "14") (term "0,0,0,0"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "14") (term "0,0,0"))
                                             (rule "add_zero_right" (formula "14") (term "1,1,0,0,0"))
                                             (rule "qeq_literals" (formula "14") (term "1,0,0,0"))
                                             (builtin "One Step Simplification" (formula "14"))
                                             (rule "true_left" (formula "14"))
                                             (rule "ifthenelse_to_or_left" (formula "12") (term "0,0,0,0"))
                                             (rule "eqSymm" (formula "12") (term "1,0,0,0,0,0"))
                                             (rule "eqSymm" (formula "12") (term "1,1,0,0,0,0"))
                                             (rule "nnf_notAnd" (formula "12") (term "0,0,0,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0,0,0,0"))
                                             (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,0,0,0,0"))
                                             (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0,0,0"))
                                             (rule "commute_or" (formula "12") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "12") (term "0,0"))
                                             (rule "commute_or_2" (formula "12") (term "0"))
                                             (rule "commute_or" (formula "12") (term "1,1,0"))
                                             (rule "commute_or_2" (formula "12") (term "0,1,0"))
                                             (rule "commute_or" (formula "12") (term "0,0,1,0"))
                                             (rule "arrayLengthNotNegative" (formula "1") (term "0"))
                                             (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "2"))
                                             (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                                             (rule "leq_literals" (formula "3"))
                                             (rule "true_left" (formula "3"))
                                             (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                             (rule "qeq_literals" (formula "2"))
                                             (rule "true_left" (formula "2"))
                                             (rule "lenNonNegative" (formula "44") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "1"))
                                             (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "45"))
                                             (rule "add_zero_right" (formula "1") (term "1"))
                                             (rule "inEqSimp_contradEq7" (formula "45") (ifseqformula "1"))
                                             (rule "times_zero_1" (formula "45") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "45") (term "0,0"))
                                             (rule "leq_literals" (formula "45") (term "0"))
                                             (builtin "One Step Simplification" (formula "45"))
                                             (rule "false_right" (formula "45"))
                                             (rule "cnf_rightDist" (formula "13") (term "1,1,0"))
                                             (rule "cnf_rightDist" (formula "13") (term "0"))
                                             (rule "distr_forallAnd" (formula "13"))
                                             (rule "andLeft" (formula "13"))
                                             (rule "commute_or_2" (formula "13") (term "0"))
                                             (rule "commute_or" (formula "14") (term "0"))
                                             (rule "shift_paren_or" (formula "13") (term "0,0"))
                                             (rule "commute_or" (formula "14") (term "1,1,0"))
                                             (rule "commute_or_2" (formula "13") (term "0,0,0"))
                                             (builtin "One Step Simplification" (formula "13"))
                                             (rule "cnf_rightDist" (formula "14") (term "0"))
                                             (rule "distr_forallAnd" (formula "14"))
                                             (rule "andLeft" (formula "14"))
                                             (rule "commute_or_2" (formula "14") (term "0"))
                                             (rule "shift_paren_or" (formula "15") (term "0"))
                                             (rule "commute_or_2" (formula "14") (term "0,0"))
                                             (rule "shift_paren_or" (formula "15") (term "0,0"))
                                             (rule "commute_or_2" (formula "15") (term "0,0,0"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "15") (term "0,0"))
                                             (rule "inEqSimp_homoInEq1" (formula "15") (term "1,0,0"))
                                             (rule "polySimp_pullOutFactor1" (formula "15") (term "0,1,0,0"))
                                             (rule "add_literals" (formula "15") (term "1,0,1,0,0"))
                                             (rule "times_zero_1" (formula "15") (term "0,1,0,0"))
                                             (rule "leq_literals" (formula "15") (term "1,0,0"))
                                             (builtin "One Step Simplification" (formula "15"))
                                             (rule "true_left" (formula "15"))
                                             (rule "shift_paren_or" (formula "13") (term "0,0,0"))
                                             (rule "shift_paren_or" (formula "14") (term "0,0,0"))
                                             (rule "commute_or" (formula "13") (term "0,0,0,0"))
                                             (builtin "One Step Simplification" (formula "13"))
                                             (rule "commute_or" (formula "14") (term "0,0,0,0"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "14") (term "0,0,0"))
                                             (rule "add_literals" (formula "14") (term "1,1,0,0,0"))
                                             (rule "qeq_literals" (formula "14") (term "1,0,0,0"))
                                             (builtin "One Step Simplification" (formula "14"))
                                             (rule "true_left" (formula "14"))
                                             (rule "allLeft" (formula "19") (inst "t=iv_6"))
                                             (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "19") (term "1,0") (ifseqformula "8"))
                                             (rule "qeq_literals" (formula "19") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "19"))
                                             (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "10"))
                                             (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1"))
                                             (rule "add_literals" (formula "19") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
                                             (rule "add_zero_right" (formula "19") (term "0,0,1"))
                                             (rule "leq_literals" (formula "19") (term "0,1"))
                                             (builtin "One Step Simplification" (formula "19"))
                                             (rule "notLeft" (formula "19"))
                                             (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "32"))
                                             (builtin "One Step Simplification" (formula "3"))
                                             (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "32"))
                                             (builtin "One Step Simplification" (formula "4"))
                                             (rule "replace_known_right" (formula "33") (term "0,0") (ifseqformula "32"))
                                             (builtin "One Step Simplification" (formula "33"))
                                             (rule "notRight" (formula "33"))
                                             (rule "replace_known_left" (formula "5") (term "0,0,0,0,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "5"))
                                             (rule "applyEqReverse" (formula "34") (term "1") (ifseqformula "5"))
                                             (rule "hideAuxiliaryEq" (formula "5"))
                                             (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "33")))
                                             (rule "closeFalse" (formula "4"))
                                          )
                                       )
                                       (branch "encrMsg[iv_6].length ≥ 1 FALSE"
                                          (rule "inEqSimp_geqRight" (formula "31"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "7"))
                                          (rule "mul_literals" (formula "7") (term "1,0"))
                                          (rule "add_zero_right" (formula "7") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "7"))
                                          (rule "mul_literals" (formula "7") (term "1"))
                                          (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "7"))
                                          (rule "qeq_literals" (formula "6") (term "0"))
                                          (builtin "One Step Simplification" (formula "6"))
                                          (rule "closeFalse" (formula "6"))
                                       )
                                    )
                                    (branch " verif.selectvoting.system.core.Setup.mix.<created> = TRUE FALSE"
                                       (rule "referencedObjectIsCreatedRight" (formula "33") (ifseqformula "44"))
                                       (rule "close" (formula "33") (ifseqformula "16"))
                                    )
                                 )
                              )
                              (branch "encrMsg.length ≥ 1 FALSE"
                                 (rule "inEqSimp_geqRight" (formula "26"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_homoInEq1" (formula "3"))
                                 (rule "mul_literals" (formula "3") (term "1,0"))
                                 (rule "add_zero_right" (formula "3") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                 (rule "mul_literals" (formula "3") (term "1"))
                                 (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "3"))
                                 (rule "qeq_literals" (formula "2") (term "0"))
                                 (builtin "One Step Simplification" (formula "2"))
                                 (rule "closeFalse" (formula "2"))
                              )
                           )
                        )
                        (branch "CUT: verif.selectvoting.system.core.Setup.mix.sorted@heapAfter_concatenate = verif.selectvoting.system.core.Setup.mix.sorted FALSE"
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (ifseqformula "9"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "24") (ifseqformula "14"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1") (ifseqformula "19"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "1") (ifseqformula "14"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "11") (term "1") (ifseqformula "9"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "24") (term "0") (ifseqformula "9"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "0,1") (ifseqformula "9"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,1") (ifseqformula "14"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,0,1") (ifseqformula "9"))
                           (rule "orRight" (formula "27"))
                           (rule "orRight" (formula "24"))
                           (rule "orRight" (formula "24"))
                           (rule "eqSymm" (formula "21"))
                           (rule "eqSymm" (formula "6"))
                           (rule "eqSymm" (formula "2"))
                           (rule "eqSymm" (formula "1"))
                           (rule "eqSymm" (formula "12"))
                           (rule "eqSymm" (formula "36"))
                           (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "35"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "31"))
                           (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "32")))
                           (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "28"))
                           (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "29")) (ifInst ""  (formula "30")))
                           (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "27"))
                           (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "24")) (ifInst ""  (formula "25")) (ifInst ""  (formula "26")))
                           (rule "applyEq" (formula "2") (term "0") (ifseqformula "16"))
                           (rule "eqSymm" (formula "2"))
                           (rule "applyEq" (formula "36") (term "1,1,1,1") (ifseqformula "6"))
                           (rule "applyEq" (formula "36") (term "0,0,0,1") (ifseqformula "6"))
                           (rule "applyEq" (formula "23") (term "1") (ifseqformula "6"))
                           (rule "applyEq" (formula "12") (term "1") (ifseqformula "1"))
                           (rule "applyEq" (formula "34") (term "0") (ifseqformula "6"))
                           (rule "applyEq" (formula "21") (term "0,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "35") (term "1,1") (ifseqformula "12"))
                           (rule "applyEq" (formula "35") (term "1") (ifseqformula "21"))
                           (rule "array2seqDef" (formula "16") (term "0") (inst "u=u"))
                           (rule "nonNull" (formula "7") (inst "i=i"))
                           (rule "sub_literals" (formula "7") (term "2,1,0,1,1"))
                           (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "34")))
                           (rule "greater_literals" (formula "7") (term "0"))
                           (builtin "One Step Simplification" (formula "7"))
                           (rule "narrowSelectArrayType" (formula "7") (term "0,0,1,0") (ifseqformula "3") (ifseqformula "34"))
                           (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
                           (rule "array2seqDef" (formula "21") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "21"))
                           (rule "array2seqDef" (formula "1") (term "0") (inst "u=u"))
                           (rule "array2seqDef" (formula "1") (term "1") (inst "u=u"))
                           (rule "array2seqDef" (formula "2") (term "0") (inst "u=u"))
                           (rule "array2seqDef" (formula "12") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "12"))
                           (rule "equalityToSeqGetAndSeqLenRight" (formula "35") (inst "iv=iv"))
                           (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1"))
                           (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1"))
                           (rule "array2seqDef" (formula "21") (term "1,1") (inst "u=u"))
                           (rule "eqSeqDef" (formula "1") (inst "iv=iv"))
                           (rule "andLeft" (formula "1"))
                           (rule "lenOfSeqDef" (formula "1") (term "0"))
                           (rule "eqSymm" (formula "1"))
                           (rule "polySimp_elimSub" (formula "1") (term "1,1"))
                           (rule "times_zero_2" (formula "1") (term "1,1,1"))
                           (rule "add_zero_right" (formula "1") (term "1,1"))
                           (rule "getOfSeqDef" (formula "2") (term "0,1,0"))
                           (rule "castDel" (formula "2") (term "1,0,1,0"))
                           (rule "castDel" (formula "2") (term "2,0,1,0"))
                           (rule "add_zero_right" (formula "2") (term "0,2,1,0,1,0"))
                           (rule "eqSymm" (formula "2") (term "1,0"))
                           (rule "polySimp_elimSub" (formula "2") (term "1,1,0,1,1,0"))
                           (rule "times_zero_2" (formula "2") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "2") (term "1,1,0,1,1,0"))
                           (rule "lenOfSeqDef" (formula "2") (term "1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "2") (term "1,1,1,0,0"))
                           (rule "times_zero_2" (formula "2") (term "1,1,1,1,0,0"))
                           (rule "add_zero_right" (formula "2") (term "1,1,1,0,0"))
                           (rule "lenOfSeqDef" (formula "1") (term "0"))
                           (rule "polySimp_elimSub" (formula "1") (term "1,0"))
                           (rule "times_zero_2" (formula "1") (term "1,1,0"))
                           (rule "add_zero_right" (formula "1") (term "1,0"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "getOfSeqDef" (formula "1") (term "0,1,0"))
                           (rule "castDel" (formula "1") (term "2,0,1,0"))
                           (rule "castDel" (formula "1") (term "1,0,1,0"))
                           (rule "add_zero_right" (formula "1") (term "0,2,1,0,1,0"))
                           (rule "polySimp_elimSub" (formula "1") (term "1,1,0,0,1,0"))
                           (rule "times_zero_2" (formula "1") (term "1,1,1,0,0,1,0"))
                           (rule "add_zero_right" (formula "1") (term "1,1,0,0,1,0"))
                           (rule "eqSymm" (formula "1") (term "1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1,1,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0,1,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "1") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "1") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1,0"))
                           (rule "eqSymm" (formula "1") (term "1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1,0"))
                           (rule "eqSymm" (formula "1") (term "1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,1,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0,0,1,1,1,0,0"))
                           (rule "array2seqDef" (formula "35") (term "0,1,1,0,1") (inst "u=u"))
                           (rule "eqSymm" (formula "35") (term "1,0,1"))
                           (rule "getOfSeqDef" (formula "35") (term "0,1,0,1"))
                           (rule "castDel" (formula "35") (term "1,0,1,0,1"))
                           (rule "castDel" (formula "35") (term "2,0,1,0,1"))
                           (rule "add_zero_right" (formula "35") (term "0,2,1,0,1,0,1"))
                           (rule "polySimp_elimSub" (formula "35") (term "1,1,0,0,1,0,1"))
                           (rule "mul_literals" (formula "35") (term "1,1,1,0,0,1,0,1"))
                           (rule "add_zero_right" (formula "35") (term "1,1,0,0,1,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0,1,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,1,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1,0,1"))
                           (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1,0,1"))
                           (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1,0,1"))
                           (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1,0,1"))
                           (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1,0,1"))
                           (rule "array2seqDef" (formula "35") (term "0,1,0") (inst "u=u"))
                           (rule "eqSymm" (formula "35") (term "0"))
                           (rule "lenOfSeqDef" (formula "35") (term "0,0"))
                           (rule "polySimp_elimSub" (formula "35") (term "1,0,0"))
                           (rule "mul_literals" (formula "35") (term "1,1,0,0"))
                           (rule "add_zero_right" (formula "35") (term "1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "35") (term "0,0,0"))
                           (rule "add_zero_right" (formula "35") (term "0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "35") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "35") (term "0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "35") (term "0,0,0,0"))
                           (rule "eqSeqDef2" (formula "16") (inst "iv=iv") (ifseqformula "16"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "true_left" (formula "16"))
                           (rule "pullOutSelect" (formula "22") (term "1,0") (inst "selectSK=verif_selectvoting_system_core_Setup_mix_2"))
                           (rule "applyEq" (formula "35") (term "1,1,1,1,0,1,1,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "35") (term "1,1,1,1,0,1,1,1,0,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "35") (term "1,0,0,0,0,1,1,1,0,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "35") (term "1,1,1,1,0,1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "35") (term "1,0,0,0,0,1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "35") (term "1,0,0,0,0,1,1,0,1") (ifseqformula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "10"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "applyEqReverse" (formula "23") (term "1,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "35") (term "1,1,1,1,0,1,1,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "35") (term "1,1,1,1,0,1,1,1,0,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "35") (term "1,0,0,0,0,1,1,1,0,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "35") (term "1,1,1,1,0,1,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "35") (term "1,0,0,0,0,1,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "35") (term "1,0,0,0,0,1,1,0,1") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "eqSeqDef2" (formula "12") (inst "iv=iv") (ifseqformula "12"))
                           (builtin "One Step Simplification" (formula "12"))
                           (rule "true_left" (formula "12"))
                           (rule "eqSeqDef2" (formula "2") (inst "iv=iv") (ifseqformula "2"))
                           (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "eqSeqDef2" (formula "18") (inst "iv=iv") (ifseqformula "18"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "pullOutSelect" (formula "19") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_7"))
                           (rule "applyEq" (formula "32") (term "0,0,0,0,1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "32") (term "0,0,0,0,1,1,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "32") (term "1,1,1,0,1,1,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "32") (term "1,1,1,0,1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "32") (term "1,1,1,0,1,1,1,0,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "32") (term "0,0,0,0,1,1,1,0,0,1") (ifseqformula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "13"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "9"))
                           (rule "ifthenelse_negated" (formula "1") (term "0"))
                           (rule "pullOutSelect" (formula "1") (term "1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_8"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "31")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "10"))
                           (rule "ifthenelse_negated" (formula "1") (term "0"))
                           (rule "pullOutSelect" (formula "1") (term "1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_9"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "11"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "32")))
                           (rule "ifthenelse_negated" (formula "1") (term "0"))
                           (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "8"))
                           (rule "nnf_imp2or" (formula "9") (term "0"))
                           (rule "nnf_imp2or" (formula "4") (term "0"))
                           (rule "nnf_imp2or" (formula "34") (term "0,1"))
                           (rule "nnf_notAnd" (formula "9") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
                           (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "9") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                           (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "4") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "4") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "4") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "4") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "4") (term "0,0,0"))
                           (rule "times_zero_1" (formula "4") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "4") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
                           (rule "mul_literals" (formula "4") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "34") (term "0,0,1"))
                           (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0,1"))
                           (rule "mul_literals" (formula "34") (term "1,0,0,0,0,0,1"))
                           (rule "add_zero_right" (formula "34") (term "0,0,0,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0,1"))
                           (rule "mul_literals" (formula "34") (term "1,0,0,0,1"))
                           (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,1"))
                           (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,1"))
                           (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,1"))
                           (rule "add_zero_left" (formula "34") (term "0,0,1,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,1"))
                           (rule "commute_or_2" (formula "9") (term "0"))
                           (rule "commute_or_2" (formula "4") (term "0"))
                           (rule "commute_or" (formula "9") (term "0,0"))
                           (rule "commute_or" (formula "4") (term "0,0"))
                           (rule "ifthenelse_to_or_right" (formula "4") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "nnf_notAnd" (formula "4") (term "0,0,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "4") (term "0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "4") (term "1,0,0,0,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "4") (term "0,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "4") (term "1,0,0,0,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "4") (term "1,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0,0,0,0"))
                           (rule "add_literals" (formula "4") (term "0,0,0,1,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "4") (term "0,0,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0,0,0,0"))
                           (rule "nnf_notAnd" (formula "4") (term "0,1,1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "4") (term "1,0,1,1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,1,1,0,0,0"))
                           (rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,1,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,1,1,0,0,0"))
                           (rule "add_literals" (formula "4") (term "0,0,0,1,0,1,1,0,0,0"))
                           (rule "add_zero_left" (formula "4") (term "0,0,1,0,1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,1,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "4") (term "1,1,0,1,1,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "4") (term "0,0,1,1,0,0,0"))
                           (rule "times_zero_1" (formula "4") (term "1,0,0,0,0,1,1,0,0,0"))
                           (rule "add_zero_right" (formula "4") (term "0,0,0,0,1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,1,1,0,0,0"))
                           (rule "mul_literals" (formula "4") (term "1,0,0,1,1,0,0,0"))
                           (rule "commute_or" (formula "4") (term "0,0"))
                           (rule "commute_or_2" (formula "4") (term "0"))
                           (rule "commute_or" (formula "4") (term "1,1,0"))
                           (rule "commute_or_2" (formula "4") (term "0,1,0"))
                           (rule "commute_or_2" (formula "4") (term "0,1,1,0"))
                           (rule "commute_or" (formula "4") (term "0,0,1,0"))
                           (rule "commute_or" (formula "4") (term "0,0,1,1,0"))
                           (rule "cnf_rightDist" (formula "4") (term "1,1,0"))
                           (rule "commute_or_2" (formula "4") (term "0,1,1,0"))
                           (rule "inEqSimp_or_tautInEq1" (formula "4") (term "0,0,1,1,0"))
                           (rule "add_zero_right" (formula "4") (term "1,1,0,0,1,1,0"))
                           (rule "qeq_literals" (formula "4") (term "1,0,0,1,1,0"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "shift_paren_or" (formula "4") (term "1,1,0"))
                           (rule "commute_or" (formula "4") (term "0,1,1,0"))
                           (rule "inEqSimp_or_tautInEq1" (formula "4") (term "1,1,0"))
                           (rule "inEqSimp_homoInEq1" (formula "4") (term "1,1,1,0"))
                           (rule "polySimp_pullOutFactor1" (formula "4") (term "0,1,1,1,0"))
                           (rule "add_literals" (formula "4") (term "1,0,1,1,1,0"))
                           (rule "times_zero_1" (formula "4") (term "0,1,1,1,0"))
                           (rule "leq_literals" (formula "4") (term "1,1,1,0"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "commute_or_2" (formula "4") (term "0"))
                           (rule "shift_paren_or" (formula "4") (term "0,0"))
                           (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                           (rule "commute_or" (formula "4") (term "0,0,0,0"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "ifthenelse_split" (formula "34") (term "0,0"))
                           (branch "result_2.length ≥ 1 TRUE"
                              (rule "eqSymm" (formula "35") (term "0"))
                              (rule "ifthenelse_split" (formula "2") (term "0"))
                              (branch " verif.selectvoting.system.core.Setup.mix.<created> = TRUE TRUE"
                                 (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "applyEqReverse" (formula "34") (term "0,0,0,0,0,0") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "34") (term "0,0,0,0,1,1,0,0,1") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "34") (term "1,1,1,0,1,1,0,0,1") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "22") (term "0") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "closeTrue" (formula "22"))
                              )
                              (branch " verif.selectvoting.system.core.Setup.mix.<created> = TRUE FALSE"
                                 (rule "referencedObjectIsCreatedRight" (formula "23") (ifseqformula "34"))
                                 (rule "close" (formula "23") (ifseqformula "6"))
                              )
                           )
                           (branch "result_2.length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "35") (term "0"))
                              (rule "inEqSimp_geqRight" (formula "34"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "ifthenelse_split" (formula "2") (term "0"))
                              (branch " verif.selectvoting.system.core.Setup.mix.<created> = TRUE TRUE"
                                 (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "applyEqReverse" (formula "34") (term "0,0,0,0,1,1,0,1") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "34") (term "0,0,0,0,1,1,0,0,1") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "34") (term "1,1,1,0,1,1,0,1") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "22") (term "0") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "closeTrue" (formula "22"))
                              )
                              (branch " verif.selectvoting.system.core.Setup.mix.<created> = TRUE FALSE"
                                 (rule "referencedObjectIsCreatedRight" (formula "23") (ifseqformula "34"))
                                 (rule "close" (formula "23") (ifseqformula "6"))
                              )
                           )
                        )
                     )
                     (branch "CUT: array2seq(heapAfter_concatenate, result_0) = array2seq(heapAfter_concatenateMessageArray, result_0) FALSE"
                        (rule "equalityToSeqGetAndSeqLenRight" (formula "22") (inst "iv=iv") (userinteraction))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "26") (ifseqformula "8"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (ifseqformula "13"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "10") (term "1") (ifseqformula "8"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1") (ifseqformula "18"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "1") (ifseqformula "13"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "0") (ifseqformula "8"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "0,1") (ifseqformula "8"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "0,1") (ifseqformula "13"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "0,0,1") (ifseqformula "8"))
                        (rule "orRight" (formula "26"))
                        (rule "orRight" (formula "23"))
                        (rule "orRight" (formula "23"))
                        (rule "eqSymm" (formula "11"))
                        (rule "eqSymm" (formula "22") (term "1,0,1"))
                        (rule "eqSymm" (formula "20"))
                        (rule "eqSymm" (formula "22") (term "0"))
                        (rule "eqSymm" (formula "35"))
                        (rule "eqSymm" (formula "1"))
                        (rule "eqSymm" (formula "5"))
                        (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "34"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "replace_known_right" (formula "10") (term "0,1") (ifseqformula "31"))
                        (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "30")))
                        (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "27"))
                        (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "28")) (ifInst ""  (formula "29")))
                        (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "26"))
                        (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "23")) (ifInst ""  (formula "24")) (ifInst ""  (formula "25")))
                        (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1"))
                        (rule "applyEq" (formula "1") (term "0") (ifseqformula "15"))
                        (rule "eqSymm" (formula "1"))
                        (rule "applyEq" (formula "33") (term "0") (ifseqformula "5"))
                        (rule "applyEq" (formula "34") (term "0,0,0,1") (ifseqformula "5"))
                        (rule "applyEq" (formula "20") (term "0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "34") (term "1") (ifseqformula "20"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,1"))
                        (rule "mul_literals" (formula "22") (term "0,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,1"))
                        (rule "nonNull" (formula "6") (inst "i=i"))
                        (rule "sub_literals" (formula "6") (term "2,1,0,1,1"))
                        (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "33")))
                        (rule "greater_literals" (formula "6") (term "0"))
                        (builtin "One Step Simplification" (formula "6"))
                        (rule "narrowSelectArrayType" (formula "6") (term "0,0,1,0") (ifseqformula "2") (ifseqformula "33"))
                        (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
                        (rule "array2seqDef" (formula "15") (term "0") (inst "u=u"))
                        (rule "array2seqDef" (formula "11") (term "1") (inst "u=u"))
                        (rule "eqSymm" (formula "11"))
                        (rule "array2seqDef" (formula "22") (term "0,0,1,0,1") (inst "u=u"))
                        (rule "getOfSeqDef" (formula "22") (term "0,1,0,1"))
                        (rule "castDel" (formula "22") (term "2,0,1,0,1"))
                        (rule "castDel" (formula "22") (term "1,0,1,0,1"))
                        (rule "add_zero_right" (formula "22") (term "0,2,1,0,1,0,1"))
                        (rule "polySimp_elimSub" (formula "22") (term "1,1,0,0,1,0,1"))
                        (rule "times_zero_2" (formula "22") (term "1,1,1,0,0,1,0,1"))
                        (rule "add_zero_right" (formula "22") (term "1,1,0,0,1,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,1,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,1,0,1"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,1,0,1"))
                        (rule "mul_literals" (formula "22") (term "0,1,1,0,0,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,1,0,1"))
                        (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,1,0,1"))
                        (rule "array2seqDef" (formula "22") (term "0,1,1,0,1") (inst "u=u"))
                        (rule "eqSymm" (formula "22") (term "1,0,1"))
                        (rule "getOfSeqDef" (formula "22") (term "0,1,0,1"))
                        (rule "castDel" (formula "22") (term "1,0,1,0,1"))
                        (rule "castDel" (formula "22") (term "2,0,1,0,1"))
                        (rule "add_zero_right" (formula "22") (term "0,2,1,0,1,0,1"))
                        (rule "polySimp_elimSub" (formula "22") (term "1,1,0,0,1,0,1"))
                        (rule "times_zero_2" (formula "22") (term "1,1,1,0,0,1,0,1"))
                        (rule "add_zero_right" (formula "22") (term "1,1,0,0,1,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,1,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,1,0,1"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,1,0,1"))
                        (rule "mul_literals" (formula "22") (term "0,1,1,0,0,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,1,0,1"))
                        (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,1,0,1"))
                        (rule "eqSymm" (formula "22") (term "1,0,1"))
                        (rule "array2seqDef" (formula "20") (term "1") (inst "u=u"))
                        (rule "eqSymm" (formula "20"))
                        (rule "array2seqDef" (formula "22") (term "0,1,0") (inst "u=u"))
                        (rule "eqSymm" (formula "22") (term "0"))
                        (rule "lenOfSeqDef" (formula "22") (term "0,0"))
                        (rule "polySimp_elimSub" (formula "22") (term "1,0,0"))
                        (rule "mul_literals" (formula "22") (term "1,1,0,0"))
                        (rule "add_zero_right" (formula "22") (term "1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,0"))
                        (rule "add_zero_right" (formula "22") (term "0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "22") (term "0,0,0,0"))
                        (rule "array2seqDef" (formula "1") (term "0") (inst "u=u"))
                        (rule "array2seqDef" (formula "34") (term "1") (inst "u=u"))
                        (rule "eqSymm" (formula "34"))
                        (rule "array2seqDef" (formula "22") (term "0,1,1,1,0,0,1") (inst "u=u"))
                        (rule "lenOfSeqDef" (formula "22") (term "1,1,1,0,0,1"))
                        (rule "polySimp_elimSub" (formula "22") (term "1,1,1,1,0,0,1"))
                        (rule "times_zero_2" (formula "22") (term "1,1,1,1,1,0,0,1"))
                        (rule "add_zero_right" (formula "22") (term "1,1,1,1,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "22") (term "0,1,1,1,0,0,1"))
                        (rule "add_zero_right" (formula "22") (term "0,0,1,1,1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,1,1,0,0,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,1,1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "0,0,1,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "22") (term "0,0,1,1,1,0,0,1"))
                        (rule "array2seqDef" (formula "20") (term "1,1") (inst "u=u"))
                        (rule "array2seqDef" (formula "22") (term "0,1,0") (inst "u=u"))
                        (rule "eqSymm" (formula "22") (term "0"))
                        (rule "lenOfSeqDef" (formula "22") (term "0,0"))
                        (rule "polySimp_elimSub" (formula "22") (term "1,0,0"))
                        (rule "mul_literals" (formula "22") (term "1,1,0,0"))
                        (rule "add_zero_right" (formula "22") (term "1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,0"))
                        (rule "add_zero_right" (formula "22") (term "0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "22") (term "0,0,0,0"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "allRight" (formula "22") (inst "sk=iv_1"))
                        (rule "impRight" (formula "22"))
                        (rule "andLeft" (formula "1"))
                        (rule "replace_known_left" (formula "24") (term "0,0,1") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "1")))
                        (rule "inEqSimp_homoInEq0" (formula "2"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "inEqSimp_homoInEq0" (formula "24") (term "0,0"))
                        (rule "eqSymm" (formula "24"))
                        (rule "polySimp_addComm1" (formula "24") (term "0,0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "24") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "24") (term "0,0,0"))
                        (rule "eqSymm" (formula "24"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "mul_literals" (formula "2") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "0,0"))
                        (rule "eqSymm" (formula "24"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "24") (term "1,0,1"))
                        (rule "mul_literals" (formula "24") (term "0,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,1"))
                        (rule "polySimp_elimOne" (formula "24") (term "1,1,0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "24") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "24") (term "0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                        (rule "eqSymm" (formula "24"))
                        (rule "equalityToSeqGetAndSeqLenRight" (formula "36") (inst "iv=iv"))
                        (rule "lenOfSeqDef" (formula "36") (term "0,0"))
                        (rule "polySimp_elimSub" (formula "36") (term "1,0,0"))
                        (rule "times_zero_2" (formula "36") (term "1,1,0,0"))
                        (rule "add_zero_right" (formula "36") (term "1,0,0"))
                        (rule "lenOfSeqDef" (formula "36") (term "1,1,0,0,1"))
                        (rule "polySimp_elimSub" (formula "36") (term "1,1,1,0,0,1"))
                        (rule "times_zero_2" (formula "36") (term "1,1,1,1,0,0,1"))
                        (rule "add_zero_right" (formula "36") (term "1,1,1,0,0,1"))
                        (rule "getOfSeqDef" (formula "36") (term "0,1,0,1"))
                        (rule "castDel" (formula "36") (term "2,0,1,0,1"))
                        (rule "castDel" (formula "36") (term "1,0,1,0,1"))
                        (rule "add_zero_right" (formula "36") (term "0,2,1,0,1,0,1"))
                        (rule "polySimp_elimSub" (formula "36") (term "1,1,0,0,1,0,1"))
                        (rule "times_zero_2" (formula "36") (term "1,1,1,0,0,1,0,1"))
                        (rule "add_zero_right" (formula "36") (term "1,1,0,0,1,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "36") (term "0,0,0"))
                        (rule "add_zero_right" (formula "36") (term "0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "36") (term "0,1,1,0,0,1"))
                        (rule "add_zero_right" (formula "36") (term "0,0,1,1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,1,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0,1,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0,1,0,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "36") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "36") (term "0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "36") (term "0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,1,0,1"))
                        (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,1,0,1"))
                        (rule "mul_literals" (formula "36") (term "0,1,1,0,0,1,0,1"))
                        (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0,1,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,1"))
                        (rule "mul_literals" (formula "36") (term "0,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "36") (term "0,1,1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "36") (term "0,0,1,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "36") (term "0,0,1,1,1,0,0,1"))
                        (rule "eqSeqDef2" (formula "17") (inst "iv=iv") (ifseqformula "17"))
                        (builtin "One Step Simplification" (formula "17"))
                        (rule "true_left" (formula "17"))
                        (rule "eqSeqDef2" (formula "13") (inst "iv=iv") (ifseqformula "13"))
                        (builtin "One Step Simplification" (formula "13"))
                        (rule "true_left" (formula "13"))
                        (rule "eqSeqDef2" (formula "3") (inst "iv=iv") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "eqSeqDef2" (formula "19") (inst "iv=iv") (ifseqformula "19"))
                        (builtin "One Step Simplification" (formula "19"))
                        (rule "true_left" (formula "19"))
                        (rule "pullOutSelect" (formula "20") (term "1,0") (inst "selectSK=arr_2"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "10"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")) (ifInst ""  (formula "30")))
                        (rule "applyEqReverse" (formula "21") (term "1,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "eqSymm" (formula "20"))
                        (rule "narrowSelectArrayType" (formula "20") (term "1,1") (ifseqformula "8") (ifseqformula "28"))
                        (rule "pullOutSelect" (formula "32") (term "0,0,0,0,1,1,0,1") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_3"))
                        (rule "applyEq" (formula "33") (term "1,1,1,0,1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "33") (term "0,0,0,0,1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "33") (term "1,1,1,0,1,1,0,1") (ifseqformula "1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "14"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "10"))
                        (rule "pullOutSelect" (formula "21") (term "1,0") (inst "selectSK=arr_3"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "15"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "11"))
                        (rule "replace_known_left" (formula "1") (term "1,0,0,0,0") (ifseqformula "13"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "31")))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")))
                        (rule "replaceKnownSelect_taclet10000000_0" (formula "1") (term "2,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10000000_1" (formula "1") (term "2,0"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "11"))
                        (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "13"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "31")))
                        (rule "applyEqReverse" (formula "22") (term "1,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "narrowSelectArrayType" (formula "21") (term "1,0") (ifseqformula "9") (ifseqformula "29"))
                        (builtin "One Step Simplification" (formula "21"))
                        (rule "closeTrue" (formula "21"))
                     )
                  )
                  (branch "CUT: array2seq(heapAfter_concatenate, result_1) = array2seq(heapAfter_intToByteArray, result_1) FALSE"
                     (rule "equalityToSeqGetAndSeqLenRight" (formula "21") (inst "iv=iv") (userinteraction))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (ifseqformula "7"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (ifseqformula "12"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "9") (term "1") (ifseqformula "7"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "1") (ifseqformula "17"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "1") (ifseqformula "12"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "0") (ifseqformula "7"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "0,1") (ifseqformula "7"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "0,1") (ifseqformula "12"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "0,0,1") (ifseqformula "7"))
                     (rule "orRight" (formula "25"))
                     (rule "orRight" (formula "22"))
                     (rule "orRight" (formula "22"))
                     (rule "eqSymm" (formula "21") (term "1,0,1"))
                     (rule "eqSymm" (formula "10"))
                     (rule "eqSymm" (formula "4"))
                     (rule "eqSymm" (formula "19"))
                     (rule "eqSymm" (formula "21") (term "0"))
                     (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "33"))
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "replace_known_right" (formula "9") (term "0,1") (ifseqformula "30"))
                     (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "29")))
                     (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "26"))
                     (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "27")) (ifInst ""  (formula "28")))
                     (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "25"))
                     (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "22")) (ifInst ""  (formula "23")) (ifInst ""  (formula "24")))
                     (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,1"))
                     (rule "applyEq" (formula "21") (term "0,0,1,0,1") (ifseqformula "14"))
                     (rule "eqSymm" (formula "21") (term "1,0,1"))
                     (rule "applyEq" (formula "32") (term "0") (ifseqformula "4"))
                     (rule "applyEq" (formula "21") (term "0,0,0") (ifseqformula "14"))
                     (rule "eqSymm" (formula "21") (term "0"))
                     (rule "applyEq" (formula "33") (term "0") (ifseqformula "19"))
                     (rule "eqSymm" (formula "33"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0,1"))
                     (rule "mul_literals" (formula "21") (term "0,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0,1"))
                     (rule "nonNull" (formula "5") (inst "i=i"))
                     (rule "greater_literals" (formula "5") (term "0,1"))
                     (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "32")))
                     (rule "sub_literals" (formula "5") (term "2,1,0"))
                     (builtin "One Step Simplification" (formula "5"))
                     (rule "narrowSelectArrayType" (formula "5") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "32"))
                     (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "5") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0"))
                     (rule "array2seqDef" (formula "14") (term "0") (inst "u=u"))
                     (rule "lenOfSeqDefEQ" (formula "21") (term "1,0") (ifseqformula "14"))
                     (rule "eqSymm" (formula "21") (term "0"))
                     (rule "polySimp_elimSub" (formula "21") (term "1,0,0"))
                     (rule "times_zero_2" (formula "21") (term "1,1,0,0"))
                     (rule "add_zero_right" (formula "21") (term "1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                     (rule "array2seqDef" (formula "10") (term "1") (inst "u=u"))
                     (rule "eqSymm" (formula "10"))
                     (rule "array2seqDef" (formula "19") (term "0,0") (inst "u=u"))
                     (rule "array2seqDef" (formula "19") (term "1,0") (inst "u=u"))
                     (rule "array2seqDef" (formula "19") (term "1") (inst "u=u"))
                     (rule "eqSymm" (formula "19"))
                     (rule "array2seqDef" (formula "21") (term "0,0,1,0,1") (inst "u=u"))
                     (rule "getOfSeqDef" (formula "21") (term "0,1,0,1"))
                     (rule "castDel" (formula "21") (term "1,0,1,0,1"))
                     (rule "castDel" (formula "21") (term "2,0,1,0,1"))
                     (rule "add_zero_right" (formula "21") (term "0,2,1,0,1,0,1"))
                     (rule "polySimp_elimSub" (formula "21") (term "1,1,0,0,1,0,1"))
                     (rule "times_zero_2" (formula "21") (term "1,1,1,0,0,1,0,1"))
                     (rule "add_zero_right" (formula "21") (term "1,1,0,0,1,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,1,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0,1,0,1"))
                     (rule "mul_literals" (formula "21") (term "0,1,1,0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0,1,0,1"))
                     (rule "equalityToSeqGetAndSeqLenRight" (formula "33") (inst "iv=iv"))
                     (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0,1"))
                     (rule "mul_literals" (formula "33") (term "0,1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0,1"))
                     (rule "array2seqDef" (formula "21") (term "0,1,1,1,0,0,1") (inst "u=u"))
                     (rule "lenOfSeqDef" (formula "21") (term "1,1,1,0,0,1"))
                     (rule "polySimp_elimSub" (formula "21") (term "1,1,1,1,0,0,1"))
                     (rule "mul_literals" (formula "21") (term "1,1,1,1,1,0,0,1"))
                     (rule "add_zero_right" (formula "21") (term "1,1,1,1,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "21") (term "0,1,1,1,0,0,1"))
                     (rule "add_zero_right" (formula "21") (term "0,0,1,1,1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,1,1,0,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,1,1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "0,0,1,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "21") (term "0,0,1,1,1,0,0,1"))
                     (rule "array2seqDef" (formula "21") (term "0,1,0") (inst "u=u"))
                     (rule "eqSymm" (formula "21") (term "0"))
                     (rule "lenOfSeqDef" (formula "21") (term "0,0"))
                     (rule "polySimp_elimSub" (formula "21") (term "1,0,0"))
                     (rule "mul_literals" (formula "21") (term "1,1,0,0"))
                     (rule "add_zero_right" (formula "21") (term "1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0,0"))
                     (rule "add_zero_right" (formula "21") (term "0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "21") (term "0,0,0,0"))
                     (rule "getOfSeqDefEQ" (formula "21") (term "1,1,0,1") (ifseqformula "14"))
                     (rule "castDel" (formula "21") (term "1,1,1,0,1"))
                     (rule "castDel" (formula "21") (term "2,1,1,0,1"))
                     (rule "add_zero_right" (formula "21") (term "0,2,1,1,1,0,1"))
                     (rule "eqSymm" (formula "21") (term "1,0,1"))
                     (rule "polySimp_elimSub" (formula "21") (term "1,1,0,0,1,0,1"))
                     (rule "times_zero_2" (formula "21") (term "1,1,1,0,0,1,0,1"))
                     (rule "add_zero_right" (formula "21") (term "1,1,0,0,1,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,1,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0,1,0,1"))
                     (rule "mul_literals" (formula "21") (term "0,1,1,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0,1,0,1"))
                     (rule "array2seqDef" (formula "33") (term "0,1,1,0,1") (inst "u=u"))
                     (rule "eqSymm" (formula "33") (term "1,0,1"))
                     (rule "getOfSeqDef" (formula "33") (term "0,1,0,1"))
                     (rule "castDel" (formula "33") (term "1,0,1,0,1"))
                     (rule "castDel" (formula "33") (term "2,0,1,0,1"))
                     (rule "add_zero_right" (formula "33") (term "0,2,1,0,1,0,1"))
                     (rule "polySimp_elimSub" (formula "33") (term "1,1,0,0,1,0,1"))
                     (rule "mul_literals" (formula "33") (term "1,1,1,0,0,1,0,1"))
                     (rule "add_zero_right" (formula "33") (term "1,1,0,0,1,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,1,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0,1,0,1"))
                     (rule "mul_literals" (formula "33") (term "0,1,1,0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0,1,0,1"))
                     (rule "array2seqDef" (formula "33") (term "0,1,0") (inst "u=u"))
                     (rule "eqSymm" (formula "33") (term "0"))
                     (rule "lenOfSeqDef" (formula "33") (term "0,0"))
                     (rule "polySimp_elimSub" (formula "33") (term "1,0,0"))
                     (rule "mul_literals" (formula "33") (term "1,1,0,0"))
                     (rule "add_zero_right" (formula "33") (term "1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "33") (term "0,0,0"))
                     (rule "add_zero_right" (formula "33") (term "0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "33") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "33") (term "0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "33") (term "0,0,0,0"))
                     (rule "eqSeqDef2" (formula "14") (inst "iv=iv") (ifseqformula "14"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "true_left" (formula "14"))
                     (rule "eqSeqDef2" (formula "10") (inst "iv=iv") (ifseqformula "10"))
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "true_left" (formula "10"))
                     (rule "eqSeqDef2" (formula "17") (inst "iv=iv") (ifseqformula "17"))
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "true_left" (formula "17"))
                     (rule "pullOutSelect" (formula "30") (term "1,1,1,1,0,1,1,1,0,0,1") (inst "selectSK=verif_selectvoting_system_core_Setup_mix_0"))
                     (rule "applyEq" (formula "31") (term "1,1,1,1,0,1,1,0,1") (ifseqformula "1"))
                     (rule "applyEq" (formula "31") (term "1,0,0,0,0,1,1,1,0,0,1") (ifseqformula "1"))
                     (rule "applyEq" (formula "31") (term "1,0,0,0,0,1,1,0,1") (ifseqformula "1"))
                     (rule "applyEq" (formula "31") (term "1,1,1,1,0,1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "31") (term "1,0,0,0,0,1,0") (ifseqformula "1"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "12"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "8"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "applyEqReverse" (formula "31") (term "1,1,1,1,0,1,1,1,0,0,1") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "31") (term "1,1,1,1,0,1,1,0,1") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "31") (term "1,0,0,0,0,1,1,1,0,0,1") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "31") (term "1,0,0,0,0,1,1,0,1") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "31") (term "1,1,1,1,0,1,0") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "31") (term "1,0,0,0,0,1,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "pullOutSelect" (formula "30") (term "1,1,1,0,1,1,1,0,0,1") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_0"))
                     (rule "applyEq" (formula "31") (term "1,1,1,0,1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "31") (term "0,0,0,0,1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "31") (term "0,0,0,0,1,1,0,1") (ifseqformula "1"))
                     (rule "applyEq" (formula "31") (term "1,1,1,0,1,1,0,1") (ifseqformula "1"))
                     (rule "applyEq" (formula "31") (term "0,0,0,0,1,1,1,0,0,1") (ifseqformula "1"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "12"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "8"))
                     (rule "ifthenelse_negated" (formula "1") (term "0"))
                     (rule "pullOutSelect" (formula "1") (term "1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_1"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "9"))
                     (rule "ifthenelse_negated" (formula "1") (term "0"))
                     (rule "pullOutSelect" (formula "1") (term "1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_2"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "10"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "31")))
                     (rule "ifthenelse_negated" (formula "1") (term "0"))
                     (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "7"))
                     (rule "nnf_imp2or" (formula "8") (term "0"))
                     (rule "nnf_imp2or" (formula "21") (term "0,1"))
                     (rule "nnf_imp2or" (formula "33") (term "0,1"))
                     (rule "nnf_notAnd" (formula "8") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
                     (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
                     (rule "add_literals" (formula "8") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                     (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "21") (term "0,0,1"))
                     (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,1"))
                     (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,1"))
                     (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,1"))
                     (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,1"))
                     (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,1"))
                     (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0,1"))
                     (rule "add_zero_right" (formula "21") (term "0,0,0,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,1"))
                     (rule "mul_literals" (formula "21") (term "1,0,0,0,1"))
                     (rule "nnf_notAnd" (formula "33") (term "0,0,1"))
                     (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0,1"))
                     (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,0,1"))
                     (rule "add_zero_right" (formula "33") (term "0,0,0,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0,1"))
                     (rule "mul_literals" (formula "33") (term "1,0,0,0,1"))
                     (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0,1"))
                     (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0,1"))
                     (rule "add_literals" (formula "33") (term "0,0,0,1,0,0,1"))
                     (rule "add_zero_left" (formula "33") (term "0,0,1,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0,1"))
                     (rule "commute_or_2" (formula "8") (term "0"))
                     (rule "commute_or" (formula "8") (term "0,0"))
                     (rule "ifthenelse_split" (formula "21") (term "0,0"))
                     (branch "result_1.length ≥ 1 TRUE"
                        (rule "eqSymm" (formula "22") (term "0"))
                        (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "1")))
                        (rule "eqSymm" (formula "22") (term "1,0"))
                        (rule "inEqSimp_contradEq7" (formula "22") (term "1,0") (ifseqformula "1"))
                        (rule "times_zero_1" (formula "22") (term "1,0,0,1,0"))
                        (rule "add_zero_right" (formula "22") (term "0,0,1,0"))
                        (rule "leq_literals" (formula "22") (term "0,1,0"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "inEqSimp_subsumption1" (formula "22") (term "0") (ifseqformula "1"))
                        (rule "leq_literals" (formula "22") (term "0,0"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "allRight" (formula "22") (inst "sk=iv_0"))
                        (rule "orRight" (formula "22"))
                        (rule "orRight" (formula "22"))
                        (rule "inEqSimp_leqRight" (formula "22"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "replace_known_left" (formula "24") (term "0,0,1") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "1")))
                        (rule "inEqSimp_geqRight" (formula "23"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_homoInEq0" (formula "24") (term "0,0"))
                        (rule "eqSymm" (formula "24"))
                        (rule "polySimp_addComm1" (formula "24") (term "0,0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "24") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "24") (term "0,0,0"))
                        (rule "eqSymm" (formula "24"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "0,0"))
                        (rule "eqSymm" (formula "24"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "24") (term "1,0,1"))
                        (rule "mul_literals" (formula "24") (term "0,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,1"))
                        (rule "polySimp_elimOne" (formula "24") (term "1,1,0,1"))
                        (rule "replace_known_left" (formula "24") (term "0,1") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "24") (term "1,0,0"))
                        (rule "mul_literals" (formula "24") (term "0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                        (rule "replace_known_left" (formula "24") (term "0,0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "eqSymm" (formula "24"))
                        (rule "pullOutSelect" (formula "24") (term "0") (inst "selectSK=arr_0"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "14"))
                        (rule "eqSymm" (formula "25"))
                        (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "31"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "32")))
                        (rule "applyEqReverse" (formula "25") (term "1") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "narrowSelectArrayType" (formula "24") (term "1") (ifseqformula "16") (ifseqformula "29"))
                        (rule "pullOutSelect" (formula "24") (term "0") (inst "selectSK=arr_1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")))
                        (rule "replaceKnownSelect_taclet01000000_7" (formula "1") (term "2,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet01000000_8" (formula "1") (term "2,0"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "18"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "14"))
                        (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "19"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "31")) (ifInst ""  (formula "32")))
                        (rule "applyEqReverse" (formula "25") (term "0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "narrowSelectArrayType" (formula "24") (term "0") (ifseqformula "16") (ifseqformula "29"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "closeTrue" (formula "24"))
                     )
                     (branch "result_1.length ≥ 1 FALSE"
                        (rule "eqSymm" (formula "22") (term "0"))
                        (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "21")))
                        (rule "inEqSimp_geqRight" (formula "21"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_notGeq" (formula "22") (term "0,0"))
                        (rule "times_zero_1" (formula "22") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "22") (term "0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0"))
                        (rule "mul_literals" (formula "22") (term "1,0,0"))
                        (rule "inEqSimp_or_tautInEq0" (formula "22") (term "0,0,1"))
                        (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
                        (rule "qeq_literals" (formula "22") (term "1,0,0,1"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "orRight" (formula "22"))
                        (rule "inEqSimp_leqRight" (formula "22"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "23"))
                        (rule "add_literals" (formula "1") (term "1"))
                        (rule "inEqSimp_contradEq7" (formula "23") (ifseqformula "1"))
                        (rule "times_zero_1" (formula "23") (term "1,0,0"))
                        (rule "add_zero_right" (formula "23") (term "0,0"))
                        (rule "leq_literals" (formula "23") (term "0"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "false_right" (formula "23"))
                        (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "2") (term "0"))
                        (builtin "One Step Simplification" (formula "2"))
                        (rule "closeFalse" (formula "2"))
                     )
                  )
               )
               (branch "Case 2"
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "24") (ifseqformula "7"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (ifseqformula "12"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "9") (term "1") (ifseqformula "7"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "1") (ifseqformula "17"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "1") (ifseqformula "12"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "0") (ifseqformula "7"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "0,1") (ifseqformula "7"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "0,1") (ifseqformula "12"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "0,0,1") (ifseqformula "7"))
                  (rule "orRight" (formula "24"))
                  (rule "orRight" (formula "21"))
                  (rule "orRight" (formula "21"))
                  (rule "eqSymm" (formula "19"))
                  (rule "eqSymm" (formula "4"))
                  (rule "eqSymm" (formula "10"))
                  (rule "replace_known_right" (formula "33") (term "0,1") (ifseqformula "24"))
                  (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "21")))
                  (rule "closeTrue" (formula "33"))
               )
            )
            (branch "Case 2"
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "24") (ifseqformula "7"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (ifseqformula "12"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "9") (term "1") (ifseqformula "7"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "1") (ifseqformula "17"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "1") (ifseqformula "12"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "0") (ifseqformula "7"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "0,1") (ifseqformula "7"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "0,1") (ifseqformula "12"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "0,0,1") (ifseqformula "7"))
               (rule "orRight" (formula "24"))
               (rule "orRight" (formula "21"))
               (rule "orRight" (formula "21"))
               (rule "allRight" (formula "33") (inst "sk=f_0"))
               (rule "allRight" (formula "33") (inst "sk=o_0"))
               (rule "orRight" (formula "33"))
               (rule "eqSymm" (formula "10"))
               (rule "eqSymm" (formula "19"))
               (rule "eqSymm" (formula "4"))
               (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "32"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "28"))
               (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "29")))
               (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "25"))
               (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "26")) (ifInst ""  (formula "27")))
               (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "24"))
               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "21")) (ifInst ""  (formula "22")) (ifInst ""  (formula "23")))
               (rule "applyEq" (formula "31") (term "0") (ifseqformula "4"))
               (rule "array2seqDef" (formula "14") (term "0") (inst "u=u"))
               (rule "nonNull" (formula "5") (inst "i=i"))
               (rule "greater_literals" (formula "5") (term "0,1"))
               (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "31")))
               (rule "sub_literals" (formula "5") (term "2,1,0"))
               (builtin "One Step Simplification" (formula "5"))
               (rule "narrowSelectArrayType" (formula "5") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "31"))
               (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0"))
               (rule "mul_literals" (formula "5") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0"))
               (rule "array2seqDef" (formula "10") (term "1") (inst "u=u"))
               (rule "eqSymm" (formula "10"))
               (rule "array2seqDef" (formula "19") (term "1") (inst "u=u"))
               (rule "eqSymm" (formula "19"))
               (rule "array2seqDef" (formula "19") (term "1,1") (inst "u=u"))
               (rule "array2seqDef" (formula "19") (term "0,1") (inst "u=u"))
               (rule "eqSeqDef2" (formula "14") (inst "iv=iv") (ifseqformula "14"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "true_left" (formula "14"))
               (rule "eqSeqDef2" (formula "10") (inst "iv=iv") (ifseqformula "10"))
               (builtin "One Step Simplification" (formula "10"))
               (rule "true_left" (formula "10"))
               (rule "eqSeqDef2" (formula "17") (inst "iv=iv") (ifseqformula "17"))
               (builtin "One Step Simplification" (formula "17"))
               (rule "true_left" (formula "17"))
               (rule "pullOutSelect" (formula "30") (term "0") (inst "selectSK=f_0_0"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "12"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "8"))
               (rule "eqSymm" (formula "31"))
               (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "9"))
               (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_2"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "10"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "32")))
               (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "nnf_imp2or" (formula "7") (term "0"))
               (rule "nnf_notAnd" (formula "7") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
               (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
               (rule "mul_literals" (formula "7") (term "1,0,0,0"))
               (rule "commute_or_2" (formula "7") (term "0"))
               (rule "commute_or" (formula "7") (term "0,0"))
               (rule "ifthenelse_split" (formula "1") (term "0"))
               (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_concatenateMessageArray«anonHeapFunction» = TRUE) TRUE"
                  (rule "andLeft" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "orRight" (formula "20"))
                  (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "21"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")) (ifInst ""  (formula "20")))
                  (rule "replace_known_right" (formula "33") (term "0,1") (ifseqformula "19"))
                  (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "21")))
                  (rule "closeTrue" (formula "33"))
               )
               (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_concatenateMessageArray«anonHeapFunction» = TRUE) FALSE"
                  (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "cut_direct" (formula "31") (term "0,0"))
                  (branch "CUT: o_0 = null TRUE"
                     (builtin "One Step Simplification" (formula "32"))
                     (rule "false_right" (formula "32"))
                     (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "32")))
                     (rule "closeFalse" (formula "2"))
                  )
                  (branch "CUT: o_0 = null FALSE"
                     (builtin "One Step Simplification" (formula "32"))
                     (rule "notRight" (formula "32"))
                     (rule "replace_known_left" (formula "2") (term "0,0,0,1,0,0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "32")) (ifInst ""  (formula "33")))
                     (rule "closeFalse" (formula "2"))
                  )
               )
            )
         )
         (branch "Exceptional Post (concatenate)"
            (builtin "One Step Simplification" (formula "17"))
            (builtin "One Step Simplification" (formula "25"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (ifseqformula "7"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "1") (ifseqformula "12"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "9") (term "1") (ifseqformula "7"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "0,1") (ifseqformula "7"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "17") (term "0,0,1,0,1,1") (ifseqformula "12"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "17") (term "0,0,0,1,0,1,1") (ifseqformula "7"))
            (rule "orRight" (formula "19"))
            (rule "andLeft" (formula "17"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "1,0") (ifseqformula "17"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "0,1,0") (ifseqformula "12"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "0,0,1,0") (ifseqformula "7"))
            (rule "andLeft" (formula "18"))
            (rule "andLeft" (formula "18"))
            (rule "andLeft" (formula "20"))
            (rule "notLeft" (formula "18"))
            (rule "close" (formula "21") (ifseqformula "20"))
         )
         (branch "Pre (concatenate)"
            (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "16")) (ifInst ""  (formula "18")) (ifInst ""  (formula "16")) (ifInst ""  (formula "18")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "17") (ifseqformula "7"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "9") (term "1") (ifseqformula "7"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "1") (ifseqformula "12"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "1") (ifseqformula "12"))
            (rule "wellFormedAnonEQ" (formula "23") (term "0,0") (ifseqformula "12"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "1,0") (ifseqformula "12"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "0,1") (ifseqformula "7"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "0,1") (ifseqformula "7"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "0,1,0") (ifseqformula "7"))
            (rule "wellFormedAnonEQ" (formula "23") (term "0,0,0") (ifseqformula "7"))
            (rule "orRight" (formula "17"))
            (rule "eqSymm" (formula "10"))
            (rule "eqSymm" (formula "4"))
            (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "23"))
            (builtin "One Step Simplification" (formula "2"))
            (rule "replace_known_right" (formula "9") (term "0,1") (ifseqformula "20"))
            (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "19")))
            (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "16"))
            (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "17")) (ifInst ""  (formula "18")))
            (rule "replace_known_left" (formula "24") (term "1,0,0") (ifseqformula "11"))
            (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "1")) (ifInst ""  (formula "6")) (ifInst ""  (formula "17")) (ifInst ""  (formula "18")) (ifInst ""  (formula "13")) (ifInst ""  (formula "20")) (ifInst ""  (formula "9")))
            (rule "closeTrue" (formula "24"))
         )
      )
      (branch "Exceptional Post (intToByteArray)"
         (builtin "One Step Simplification" (formula "5"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "4"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "5") (term "1,1,0") (ifseqformula "4"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "7") (term "0,0,1,0,1,1") (ifseqformula "4"))
         (rule "andLeft" (formula "2"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "7"))
         (rule "andLeft" (formula "10"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "11") (term "1,0") (ifseqformula "10"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "11") (term "0,1,0") (ifseqformula "6"))
         (rule "andLeft" (formula "4"))
         (rule "andLeft" (formula "3"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "10"))
         (rule "andLeft" (formula "15"))
         (rule "notLeft" (formula "4"))
         (rule "notLeft" (formula "4"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "14"))
         (rule "andLeft" (formula "16"))
         (rule "andLeft" (formula "10"))
         (rule "notLeft" (formula "15"))
         (rule "close" (formula "18") (ifseqformula "17"))
      )
      (branch "Pre (intToByteArray)"
         (builtin "One Step Simplification" (formula "5"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "4"))
         (rule "wellFormedAnonEQ" (formula "7") (term "1") (ifseqformula "4"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "5") (term "1,1,0") (ifseqformula "4"))
         (rule "andLeft" (formula "2"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "7"))
         (rule "andLeft" (formula "3"))
         (rule "andLeft" (formula "5"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "10"))
         (rule "notLeft" (formula "4"))
         (rule "notLeft" (formula "4"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "10"))
         (rule "notLeft" (formula "10"))
         (rule "notLeft" (formula "10"))
         (rule "eqSymm" (formula "4"))
         (rule "eqSymm" (formula "9"))
         (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "15"))
         (builtin "One Step Simplification" (formula "2"))
         (rule "replace_known_left" (formula "16") (term "1,1") (ifseqformula "6"))
         (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "1")))
         (rule "replace_known_right" (formula "8") (term "0,1") (ifseqformula "12"))
         (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "11")))
         (rule "inEqSimp_geqRight" (formula "16"))
         (rule "times_zero_1" (formula "1") (term "1,0,0"))
         (rule "add_zero_right" (formula "1") (term "0,0"))
         (rule "applyEq" (formula "14") (term "0") (ifseqformula "5"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "nonNull" (formula "6") (inst "i=i"))
         (rule "greater_literals" (formula "6") (term "0,1"))
         (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "15")))
         (rule "sub_literals" (formula "6") (term "2,1,0"))
         (builtin "One Step Simplification" (formula "6"))
         (rule "narrowSelectArrayType" (formula "6") (term "0,0,1,0") (ifseqformula "2") (ifseqformula "15"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
         (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
         (rule "array2seqDef" (formula "10") (term "1") (inst "u=u"))
         (rule "eqSymm" (formula "10"))
         (rule "eqSeqDef2" (formula "10") (inst "iv=iv") (ifseqformula "10"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "true_left" (formula "10"))
         (rule "nnf_imp2or" (formula "6") (term "0"))
         (rule "nnf_notAnd" (formula "6") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
         (rule "mul_literals" (formula "6") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "6") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
         (rule "mul_literals" (formula "6") (term "1,0,0,0"))
         (rule "commute_or_2" (formula "6") (term "0"))
         (rule "commute_or" (formula "6") (term "0,0"))
         (rule "arrayLengthIsAShort" (formula "1") (term "0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "arrayLengthNotNegative" (formula "1") (term "0"))
         (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
         (rule "qeq_literals" (formula "1") (term "0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Null Reference (_encrMsg = null)"
      (builtin "One Step Simplification" (formula "5"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "andLeft" (formula "2"))
      (rule "andLeft" (formula "5"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "6") (term "1,1,0") (ifseqformula "5"))
      (rule "andLeft" (formula "3"))
      (rule "andLeft" (formula "2"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "5"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "2"))
      (rule "andLeft" (formula "12"))
      (rule "andLeft" (formula "11"))
      (rule "notLeft" (formula "5"))
      (rule "notLeft" (formula "5"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "11"))
      (rule "notLeft" (formula "11"))
      (rule "notLeft" (formula "11"))
      (rule "eqSymm" (formula "16") (term "1,0,0,1,0,1"))
      (rule "eqSymm" (formula "16") (term "0,0,0,0,1"))
      (rule "eqSymm" (formula "5"))
      (rule "eqSymm" (formula "10"))
      (rule "replace_known_left" (formula "3") (term "0") (ifseqformula "1"))
      (builtin "One Step Simplification" (formula "3"))
      (rule "true_left" (formula "3"))
      (rule "replace_known_right" (formula "8") (term "0,1") (ifseqformula "12"))
      (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "11")))
      (rule "applyEq" (formula "4") (term "1") (ifseqformula "1"))
      (rule "close" (formula "13") (ifseqformula "4"))
   )
)
(branch "Exceptional Post (concatenateMessageArray)"
   (builtin "One Step Simplification" (formula "4"))
   (builtin "One Step Simplification" (formula "3"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "4"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "5") (term "1,0") (ifseqformula "4"))
   (rule "andLeft" (formula "2"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "3"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "10"))
   (rule "notLeft" (formula "4"))
   (rule "notLeft" (formula "4"))
   (rule "andLeft" (formula "10"))
   (rule "notLeft" (formula "8"))
   (rule "close" (formula "12") (ifseqformula "11"))
)
(branch "Pre (concatenateMessageArray)"
   (builtin "One Step Simplification" (formula "2"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "2"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "3"))
   (rule "andLeft" (formula "5"))
   (rule "andLeft" (formula "1"))
   (rule "notLeft" (formula "4"))
   (rule "notLeft" (formula "4"))
   (rule "eqSymm" (formula "4"))
   (rule "replace_known_left" (formula "8") (term "0") (ifseqformula "5"))
   (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "1")) (ifInst ""  (formula "2")))
   (rule "closeTrue" (formula "8"))
)
)

}
