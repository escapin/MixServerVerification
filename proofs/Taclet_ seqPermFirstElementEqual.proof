\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Mar 03 18:47:23 CET 2016
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=3000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\proofObligation "#Proof Obligation Settings
#Thu Mar 03 18:47:23 CET 2016
name=seqPermFirstElementEqual
class=de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput
";

\proof {
(keyLog "0" (keyUser "mihai" ) (keyVersion "606ce5568bff0ed256d4c8394d79c7d3334c24a7"))
(keyLog "1" (keyUser "mihai" ) (keyVersion "606ce5568bff0ed256d4c8394d79c7d3334c24a7"))
(keyLog "2" (keyUser "mihai" ) (keyVersion "606ce5568bff0ed256d4c8394d79c7d3334c24a7"))
(keyLog "3" (keyUser "mihai" ) (keyVersion "606ce5568bff0ed256d4c8394d79c7d3334c24a7"))

(autoModeTime "54321298586")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "f_s1,f_s2"))
(rule "orRight" (formula "2"))
(rule "notLeft" (formula "1"))
(rule "notRight" (formula "3"))
(rule "notRight" (formula "3"))
(rule "andLeft" (formula "2"))
(rule "seqPermDefLeft" (formula "1") (inst "s=s") (inst "iv=iv") (userinteraction))
(rule "andLeft" (formula "1"))
(rule "seqPermDef" (formula "6") (inst "s=s") (inst "iv=iv") (userinteraction))
(rule "andRight" (formula "6") (userinteraction))
(branch "Case 1"
   (rule "exLeft" (formula "2") (inst "sk=s_0"))
   (rule "andLeft" (formula "2"))
   (rule "andLeft" (formula "2"))
   (rule "eqSymm" (formula "8"))
   (rule "eqSymm" (formula "7"))
   (rule "eqSymm" (formula "1"))
   (rule "eqSymm" (formula "4") (term "1,0"))
   (rule "lenOfSeqSub" (formula "8") (term "0"))
   (rule "polySimp_elimSub" (formula "8") (term "1,0"))
   (rule "mul_literals" (formula "8") (term "1,1,0"))
   (rule "polySimp_addComm0" (formula "8") (term "1,0"))
   (rule "lenOfSeqSub" (formula "8") (term "1"))
   (rule "polySimp_elimSub" (formula "8") (term "1,1"))
   (rule "mul_literals" (formula "8") (term "1,1,1"))
   (rule "polySimp_addComm0" (formula "8") (term "1,1"))
   (rule "inEqSimp_gtToGeq" (formula "6"))
   (rule "mul_literals" (formula "6") (term "1,0,0"))
   (rule "add_zero_right" (formula "6") (term "0,0"))
   (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0"))
   (rule "eqSymm" (formula "8"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1"))
   (rule "polySimp_addComm1" (formula "8") (term "0,0,1"))
   (rule "add_literals" (formula "8") (term "0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0"))
   (rule "eqSymm" (formula "8"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1"))
   (rule "polySimp_addComm1" (formula "8") (term "0,0,1"))
   (rule "add_literals" (formula "8") (term "0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
   (rule "applyEqRigid" (formula "8") (term "1,1,0") (ifseqformula "1"))
   (rule "applyEqRigid" (formula "8") (term "0,1,0,0,0") (ifseqformula "1"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "closeTrue" (formula "8"))
)
(branch "Case 2"
   (rule "exLeft" (formula "2") (inst "sk=s_1") (userinteraction))
   (rule "andLeft" (formula "2"))
   (rule "andLeft" (formula "2"))
   (rule "exRight" (formula "8") (inst "t=seqDef{int u;}(Z(0(#)),
               sub(seqLen(s_1), Z(1(#))),
               \\if (  int::seqGet(s_1, add(u, Z(1(#))))
                    = Z(0(#)))
                   \\then (sub(int::seqGet(s_1, Z(0(#))),
                              Z(1(#))))
                   \\else (sub(int::seqGet(s_1,
                                          add(u,
                                              Z(1(#)))),
                              Z(1(#)))))") (userinteraction))
   (rule "andRight" (formula "8") (userinteraction))
   (branch
      (rule "andRight" (formula "8") (userinteraction))
      (branch
         (rule "eqSymm" (formula "1"))
         (rule "eqSymm" (formula "7"))
         (rule "eqSymm" (formula "9") (term "1,0,1,0"))
         (rule "eqSymm" (formula "4") (term "1,0"))
         (rule "polySimp_elimSub" (formula "8") (term "1,0,0"))
         (rule "mul_literals" (formula "8") (term "1,1,0,0"))
         (rule "polySimp_elimSub" (formula "8") (term "1,2,0,0"))
         (rule "mul_literals" (formula "8") (term "1,1,2,0,0"))
         (rule "polySimp_elimSub" (formula "8") (term "2,2,0,0"))
         (rule "mul_literals" (formula "8") (term "1,2,2,0,0"))
         (rule "polySimp_addComm0" (formula "8") (term "1,0,0,2,0,0"))
         (rule "polySimp_addComm0" (formula "8") (term "1,0,0"))
         (rule "polySimp_addComm0" (formula "8") (term "1,2,0,0"))
         (rule "polySimp_addComm0" (formula "8") (term "1,0,2,2,0,0"))
         (rule "polySimp_addComm0" (formula "8") (term "2,2,0,0"))
         (rule "lenOfSeqSub" (formula "8") (term "1"))
         (rule "polySimp_elimSub" (formula "8") (term "1,1"))
         (rule "mul_literals" (formula "8") (term "1,1,1"))
         (rule "polySimp_addComm0" (formula "8") (term "1,1"))
         (rule "lenOfSeqSub" (formula "9") (term "1,0,0,0"))
         (rule "polySimp_elimSub" (formula "9") (term "1,1,0,0,0"))
         (rule "mul_literals" (formula "9") (term "1,1,1,0,0,0"))
         (rule "polySimp_addComm0" (formula "9") (term "1,1,0,0,0"))
         (rule "lenOfSeqDef" (formula "8") (term "0"))
         (rule "eqSymm" (formula "8"))
         (rule "polySimp_elimSub" (formula "8") (term "1,1"))
         (rule "mul_literals" (formula "8") (term "1,1,1"))
         (rule "add_zero_right" (formula "8") (term "1,1"))
         (rule "inEqSimp_gtToGeq" (formula "6"))
         (rule "times_zero_1" (formula "6") (term "1,0,0"))
         (rule "add_literals" (formula "6") (term "0,0"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1,0"))
         (rule "polySimp_addComm1" (formula "9") (term "0,1,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "0,1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,1,0,0,0"))
         (rule "polySimp_addComm1" (formula "9") (term "0,0,1,0,0,0"))
         (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0"))
         (rule "eqSymm" (formula "8"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1"))
         (rule "polySimp_addComm1" (formula "8") (term "0,0,1"))
         (rule "add_literals" (formula "8") (term "0,0,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0"))
         (rule "add_zero_right" (formula "8") (term "0,0,0"))
         (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
         (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "8") (term "0,0,0"))
         (rule "add_literals" (formula "8") (term "0,0,0,0"))
         (rule "applyEqRigid" (formula "8") (term "0,1,0,0,0") (ifseqformula "2"))
         (rule "applyEqRigid" (formula "8") (term "1,1,0") (ifseqformula "2"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "closeTrue" (formula "8"))
      )
      (branch
         (rule "seqNPermRight" (formula "8") (inst "jv=jv") (inst "iv=iv") (userinteraction))
         (rule "andRight" (formula "8") (userinteraction))
         (branch
            (rule "andRight" (formula "8") (userinteraction))
            (branch
               (rule "allRight" (formula "8") (inst "sk=iv_0") (userinteraction))
               (rule "allRight" (formula "8") (inst "sk=jv_0") (userinteraction))
               (rule "impRight" (formula "8"))
               (rule "andLeft" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "getOfSeqDef" (formula "5") (term "0") (userinteraction))
               (rule "getOfSeqDef" (formula "5") (term "1") (userinteraction))
               (rule "seqNPermInjective" (formula "8") (inst "jv=jv") (inst "iv=iv") (userinteraction))
               (rule "allLeft" (formula "8") (inst "t=add(iv_0, Z(1(#)))") (userinteraction))
               (rule "allLeft" (formula "8") (inst "t=add(jv_0, Z(1(#)))") (userinteraction))
               (rule "castDel" (formula "5") (term "1,0"))
               (rule "castDel" (formula "5") (term "1,1"))
               (rule "polySimp_addLiterals" (formula "5") (term "1,0,0,1,0"))
               (rule "polySimp_addLiterals" (formula "5") (term "1,0,2,1,0"))
               (rule "polySimp_addLiterals" (formula "5") (term "1,0,0,1,1"))
               (rule "add_zero_right" (formula "5") (term "0,1,0,2,1,1"))
               (rule "eqSymm" (formula "12") (term "1,0"))
               (rule "eqSymm" (formula "15"))
               (rule "eqSymm" (formula "10") (term "1,0,0,0"))
               (rule "eqSymm" (formula "8") (term "1,0"))
               (rule "eqSymm" (formula "6"))
               (rule "eqSymm" (formula "16"))
               (rule "eqSymm" (formula "10") (term "1,0,0"))
               (rule "eqSymm" (formula "9") (term "1,0,0"))
               (rule "eqSymm" (formula "9") (term "1,0"))
               (rule "eqSymm" (formula "18") (term "1,0,1,0"))
               (rule "eqSymm" (formula "5"))
               (rule "replace_known_left" (formula "5") (term "0,0,1") (ifseqformula "1"))
               (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "3")))
               (rule "polySimp_elimSub" (formula "17") (term "1,0"))
               (rule "mul_literals" (formula "17") (term "1,1,0"))
               (rule "polySimp_elimSub" (formula "2") (term "1,2,0,1"))
               (rule "mul_literals" (formula "2") (term "1,1,2,0,1"))
               (rule "polySimp_elimSub" (formula "4") (term "1,2,0,1"))
               (rule "mul_literals" (formula "4") (term "1,1,2,0,1"))
               (rule "polySimp_elimSub" (formula "4") (term "2,2,0,1"))
               (rule "mul_literals" (formula "4") (term "1,2,2,0,1"))
               (rule "polySimp_elimSub" (formula "17") (term "2,2,0"))
               (rule "mul_literals" (formula "17") (term "1,2,2,0"))
               (rule "polySimp_elimSub" (formula "2") (term "2,2,0,1"))
               (rule "mul_literals" (formula "2") (term "1,2,2,0,1"))
               (rule "polySimp_elimSub" (formula "2") (term "1,0,1"))
               (rule "mul_literals" (formula "2") (term "1,1,0,1"))
               (rule "polySimp_homoEq" (formula "8") (term "1"))
               (rule "polySimp_elimSub" (formula "17") (term "1,2,0"))
               (rule "mul_literals" (formula "17") (term "1,1,2,0"))
               (rule "polySimp_elimSub" (formula "4") (term "1,0,1"))
               (rule "mul_literals" (formula "4") (term "1,1,0,1"))
               (rule "polySimp_elimSub" (formula "5") (term "1,0,0"))
               (rule "mul_literals" (formula "5") (term "1,1,0,0"))
               (rule "add_zero_right" (formula "5") (term "1,0,0"))
               (rule "polySimp_elimSub" (formula "5") (term "2,1,0"))
               (rule "mul_literals" (formula "5") (term "1,2,1,0"))
               (rule "polySimp_elimSub" (formula "5") (term "1,1,1"))
               (rule "mul_literals" (formula "5") (term "1,1,1,1"))
               (rule "polySimp_elimSub" (formula "5") (term "0,1,0,1"))
               (rule "mul_literals" (formula "5") (term "1,0,1,0,1"))
               (rule "polySimp_elimSub" (formula "5") (term "1,1,0"))
               (rule "mul_literals" (formula "5") (term "1,1,1,0"))
               (rule "polySimp_elimSub" (formula "5") (term "2,1,1"))
               (rule "mul_literals" (formula "5") (term "1,2,1,1"))
               (rule "polySimp_elimSub" (formula "5") (term "1,0,0"))
               (rule "mul_literals" (formula "5") (term "1,1,0,0"))
               (rule "polySimp_elimSub" (formula "5") (term "1,0,1"))
               (rule "times_zero_2" (formula "5") (term "1,1,0,1"))
               (rule "polySimp_addLiterals" (formula "5") (term "1,0,1"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,0,1"))
               (rule "polySimp_addComm0" (formula "8") (term "0,1,0,0"))
               (rule "polySimp_addComm0" (formula "4") (term "1,0,0,2,0,1"))
               (rule "polySimp_addComm0" (formula "17") (term "1,0,0,2,0"))
               (rule "polySimp_addComm0" (formula "2") (term "1,0,0,2,0,1"))
               (rule "polySimp_addComm0" (formula "9") (term "0,1,0,0,0,0,0"))
               (rule "polySimp_addComm0" (formula "8") (term "1,1,0,0,0"))
               (rule "polySimp_addComm0" (formula "9") (term "1,0,0,0,0,0,0"))
               (rule "polySimp_addComm0" (formula "8") (term "1,0,0,0,0,0"))
               (rule "polySimp_addComm0" (formula "8") (term "0,1,0,0,0,0"))
               (rule "polySimp_addComm0" (formula "8") (term "1,1,1,0"))
               (rule "polySimp_addComm0" (formula "8") (term "1,0,1,0"))
               (rule "polySimp_addComm0" (formula "9") (term "1,1,1,0,0"))
               (rule "polySimp_addComm0" (formula "9") (term "1,1,0"))
               (rule "polySimp_addComm0" (formula "5") (term "1,0,0,1,0"))
               (rule "polySimp_addComm0" (formula "5") (term "1,0,0,1,1"))
               (rule "polySimp_addComm0" (formula "17") (term "1,0"))
               (rule "polySimp_addComm0" (formula "2") (term "1,2,0,1"))
               (rule "polySimp_addComm0" (formula "4") (term "1,2,0,1"))
               (rule "polySimp_addComm0" (formula "4") (term "1,0,2,2,0,1"))
               (rule "polySimp_addComm0" (formula "17") (term "1,0,2,2,0"))
               (rule "polySimp_addComm0" (formula "2") (term "1,0,2,2,0,1"))
               (rule "polySimp_addComm0" (formula "2") (term "1,0,1"))
               (rule "polySimp_addComm0" (formula "8") (term "0,0,1"))
               (rule "polySimp_addComm0" (formula "17") (term "1,2,0"))
               (rule "polySimp_addComm0" (formula "4") (term "1,0,1"))
               (rule "polySimp_addComm0" (formula "5") (term "1,0,2,1,0"))
               (rule "polySimp_addComm0" (formula "5") (term "1,1,1"))
               (rule "polySimp_addComm0" (formula "5") (term "1,1,0"))
               (rule "polySimp_addComm0" (formula "5") (term "1,0,2,1,1"))
               (rule "polySimp_addComm0" (formula "5") (term "1,0,0"))
               (rule "polySimp_addComm0" (formula "5") (term "1,0,1"))
               (rule "polySimp_addComm0" (formula "8") (term "1,1,0,1"))
               (rule "lenOfSeqSub" (formula "18") (term "1,0,0,0"))
               (rule "polySimp_elimSub" (formula "18") (term "1,1,0,0,0"))
               (rule "mul_literals" (formula "18") (term "1,1,1,0,0,0"))
               (rule "polySimp_addComm0" (formula "4") (term "2,2,0,1"))
               (rule "polySimp_addComm0" (formula "17") (term "2,2,0"))
               (rule "polySimp_addComm0" (formula "2") (term "2,2,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,1,0"))
               (rule "inEqSimp_gtToGeq" (formula "14"))
               (rule "mul_literals" (formula "14") (term "1,0,0"))
               (rule "add_literals" (formula "14") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
               (rule "polySimp_addComm0" (formula "5") (term "2,1,0"))
               (rule "polySimp_addComm0" (formula "5") (term "2,1,1"))
               (rule "polySimp_addComm0" (formula "18") (term "1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "8") (term "1,0,1"))
               (rule "mul_literals" (formula "8") (term "0,1,0,1"))
               (rule "polySimp_addComm1" (formula "18") (term "0,1,0,0,1,0"))
               (rule "polySimp_addComm1" (formula "8") (term "0,1"))
               (rule "inEqSimp_commuteLeq" (formula "1"))
               (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "3"))
               (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "8") (term "0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,0,0,0"))
               (rule "polySimp_addComm1" (formula "9") (term "0,1,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0,0,0"))
               (rule "polySimp_addComm1" (formula "8") (term "0,1,0,0,0,0"))
               (rule "lenOfSeqDef" (formula "4") (term "1"))
               (rule "polySimp_elimSub" (formula "4") (term "1,1"))
               (rule "mul_literals" (formula "4") (term "1,1,1"))
               (rule "add_zero_right" (formula "4") (term "1,1"))
               (rule "lenOfSeqDef" (formula "2") (term "1"))
               (rule "polySimp_elimSub" (formula "2") (term "1,1"))
               (rule "mul_literals" (formula "2") (term "1,1,1"))
               (rule "add_zero_right" (formula "2") (term "1,1"))
               (rule "polySimp_addAssoc" (formula "8") (term "0,0,1"))
               (rule "add_literals" (formula "8") (term "0,0,0,1"))
               (rule "add_zero_left" (formula "8") (term "0,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0"))
               (rule "eqSymm" (formula "5"))
               (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,1"))
               (rule "mul_literals" (formula "5") (term "0,1,0,0,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "18") (term "0,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,1,0,0,0"))
               (rule "polySimp_addComm1" (formula "18") (term "0,0,1,0,0,0"))
               (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,0,0,0"))
               (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0,0,0"))
               (rule "add_literals" (formula "8") (term "0,0,0,1,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,1"))
               (rule "add_literals" (formula "5") (term "0,0,0,0,1"))
               (rule "polySimp_addComm1" (formula "5") (term "0,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "4") (term "0,1"))
               (rule "add_zero_right" (formula "4") (term "0,0,1"))
               (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1"))
               (rule "mul_literals" (formula "4") (term "0,1,0,0,1"))
               (rule "polySimp_addAssoc" (formula "4") (term "0,0,1"))
               (rule "add_literals" (formula "4") (term "0,0,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1"))
               (rule "add_zero_right" (formula "2") (term "0,0,1"))
               (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1"))
               (rule "mul_literals" (formula "2") (term "0,1,0,0,1"))
               (rule "polySimp_addAssoc" (formula "2") (term "0,0,1"))
               (rule "add_literals" (formula "2") (term "0,0,0,1"))
               (rule "inEqSimp_homoInEq0" (formula "8") (term "1,0,0,0"))
               (rule "mul_literals" (formula "8") (term "1,0,1,0,0,0"))
               (rule "add_zero_right" (formula "8") (term "0,1,0,0,0"))
               (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0,0,0,0,0"))
               (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "9") (term "0,0,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0"))
               (rule "eqSymm" (formula "5"))
               (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,1"))
               (rule "mul_literals" (formula "5") (term "0,1,0,0,0,1"))
               (rule "eqSymm" (formula "5"))
               (rule "inEqSimp_homoInEq0" (formula "8") (term "0,0,0,0,0"))
               (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "8") (term "0,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,0"))
               (rule "add_literals" (formula "5") (term "0,0,0,0,0"))
               (rule "polySimp_addComm1" (formula "5") (term "0,0,0"))
               (rule "eqSymm" (formula "5"))
               (rule "inEqSimp_ltToLeq" (formula "4"))
               (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "4") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "2") (term "0"))
               (rule "applyEq" (formula "2") (term "0,1,0,0,0,1,0") (ifseqformula "7"))
               (rule "applyEq" (formula "2") (term "1,1,0,1,0") (ifseqformula "7"))
               (rule "applyEqRigid" (formula "17") (term "1,1,0") (ifseqformula "7"))
               (rule "applyEq" (formula "9") (term "0,1,0,1,0,0,0,0,0") (ifseqformula "7"))
               (rule "applyEq" (formula "18") (term "2,0,0,1,0,1,0") (ifseqformula "6"))
               (rule "applyEq" (formula "8") (term "0,1,0,1,0,0") (ifseqformula "7"))
               (rule "applyEq" (formula "4") (term "1,1,0,1,0") (ifseqformula "7"))
               (rule "applyEqRigid" (formula "4") (term "0,1,0,0,0,1,0") (ifseqformula "7"))
               (rule "applyEq" (formula "5") (term "0,1,0,0,0") (ifseqformula "7"))
               (rule "eqSymm" (formula "5"))
               (rule "applyEqRigid" (formula "8") (term "0,1,0,1,0,0,0,0") (ifseqformula "7"))
               (rule "applyEqRigid" (formula "9") (term "0,1,0,0,1,0,0,0") (ifseqformula "7"))
               (rule "applyEqRigid" (formula "10") (term "0,1,0,0,1,0,0,0,0,0,0") (ifseqformula "7"))
               (rule "applyEqRigid" (formula "12") (term "0,1,0,0,1,0,0") (ifseqformula "7"))
               (rule "applyEqRigid" (formula "10") (term "0,1,0,0,1,0,0,0,0") (ifseqformula "7"))
               (rule "applyEqRigid" (formula "5") (term "0,1,0,0,0") (ifseqformula "7"))
               (rule "eqSymm" (formula "5"))
               (rule "polySimp_sepPosMonomial" (formula "8") (term "1"))
               (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
               (rule "polySimp_elimOne" (formula "8") (term "1,1"))
               (rule "replace_known_right" (formula "8") (term "1") (ifseqformula "16"))
               (builtin "One Step Simplification" (formula "8"))
               (rule "notLeft" (formula "8"))
               (rule "inEqSimp_sepPosMonomial1" (formula "13"))
               (rule "mul_literals" (formula "13") (term "1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "18") (term "0,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "18") (term "0,1,0,0,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "18") (term "0,0,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "18") (term "0,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,0,0,0,0,0"))
               (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "1,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "8") (term "0,1,0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "8") (term "0,1,0,0,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "4"))
               (rule "polySimp_mulLiterals" (formula "4") (term "0"))
               (rule "polySimp_elimOne" (formula "4") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,0"))
               (rule "mul_literals" (formula "8") (term "0,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "9") (term "0,1,1,0,0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,0,0"))
               (rule "mul_literals" (formula "9") (term "0,1,1,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "5") (term "0,0,0"))
               (rule "eqSymm" (formula "5"))
               (rule "polySimp_elimOne" (formula "5") (term "0,0,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0,0,0"))
               (rule "mul_literals" (formula "15") (term "1,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
               (rule "mul_literals" (formula "15") (term "1,1,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "15") (term "0,1,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0"))
               (rule "polySimp_elimOne" (formula "15") (term "0,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
               (rule "polySimp_elimOne" (formula "2") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0"))
               (rule "polySimp_elimOne" (formula "4") (term "0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "5") (term "0,0,0"))
               (rule "polySimp_elimOne" (formula "5") (term "0,0,0"))
               (rule "eqSymm" (formula "5"))
               (rule "inEqSimp_subsumption1" (formula "8") (term "0,0,0,0,0,0") (ifseqformula "1"))
               (rule "leq_literals" (formula "8") (term "0,0,0,0,0,0,0"))
               (builtin "One Step Simplification" (formula "8"))
               (rule "inEqSimp_subsumption1" (formula "15") (term "0,0,0,0") (ifseqformula "1"))
               (rule "leq_literals" (formula "15") (term "0,0,0,0,0"))
               (builtin "One Step Simplification" (formula "15"))
               (rule "inEqSimp_subsumption1" (formula "15") (term "1,0,0") (ifseqformula "3"))
               (rule "leq_literals" (formula "15") (term "0,1,0,0"))
               (builtin "One Step Simplification" (formula "15"))
               (rule "getOfSeqSub" (formula "18") (term "1,1,0,1,0"))
               (rule "castDel" (formula "18") (term "2,1,1,0,1,0"))
               (rule "polySimp_elimSub" (formula "18") (term "1,1,0,1,1,0,1,0"))
               (rule "mul_literals" (formula "18") (term "1,1,1,0,1,1,0,1,0"))
               (rule "polySimp_addComm0" (formula "18") (term "1,1,1,1,0,1,0"))
               (rule "polySimp_addComm0" (formula "18") (term "1,1,0,1,1,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,1,1,0,1,0"))
               (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,1,1,0,1,0"))
               (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,1,1,0,1,0"))
               (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,1,1,0,1,0"))
               (rule "add_literals" (formula "18") (term "0,0,0,1,0,1,1,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,1,1,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,1,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,1,1,0,1,0"))
               (rule "polySimp_rightDist" (formula "18") (term "1,1,0,1,1,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,1,1,0,1,0"))
               (rule "mul_literals" (formula "18") (term "0,1,1,0,1,1,0,1,0"))
               (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,1,1,0,1,0"))
               (rule "getOfSeqSub" (formula "18") (term "0,1,0,1,0"))
               (rule "castDel" (formula "18") (term "2,0,1,0,1,0"))
               (rule "polySimp_elimSub" (formula "18") (term "1,1,0,0,1,0,1,0"))
               (rule "mul_literals" (formula "18") (term "1,1,1,0,0,1,0,1,0"))
               (rule "polySimp_addComm0" (formula "18") (term "1,1,0,1,0,1,0"))
               (rule "polySimp_addComm0" (formula "18") (term "1,1,0,0,1,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,1,0,1,0"))
               (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,1,0,1,0"))
               (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,1,0,1,0"))
               (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,1,0,1,0"))
               (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,1,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,1,0,1,0"))
               (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,1,0,1,0"))
               (rule "mul_literals" (formula "18") (term "0,1,1,0,0,1,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,1,0,1,0"))
               (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,1,0,1,0"))
               (rule "nnf_imp2or" (formula "11") (term "0"))
               (rule "nnf_ex2all" (formula "18"))
               (rule "nnf_imp2or" (formula "10") (term "0,0"))
               (rule "nnf_imp2or" (formula "9") (term "0"))
               (rule "nnf_notAnd" (formula "1") (term "0"))
               (rule "nnf_notAnd" (formula "12") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
               (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "12") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
               (rule "mul_literals" (formula "12") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "9") (term "0,0"))
               (rule "nnf_notAnd" (formula "1") (term "0,0"))
               (rule "nnf_notAll" (formula "1") (term "1,0"))
               (rule "nnf_notAnd" (formula "10") (term "0,0,0"))
               (rule "nnf_notAnd" (formula "9") (term "0,0,0"))
               (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,0"))
               (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,0"))
               (rule "add_zero_left" (formula "9") (term "0,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0"))
               (rule "nnf_imp2or" (formula "1") (term "0,0,1,0"))
               (rule "nnf_notAnd" (formula "10") (term "0,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0,0"))
               (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0,0"))
               (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0,0"))
               (rule "add_zero_left" (formula "10") (term "0,0,1,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,0"))
               (rule "nnf_notAnd" (formula "9") (term "0,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "9") (term "1,0,0,0,0"))
               (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0,0,0"))
               (rule "add_literals" (formula "9") (term "0,0,1,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,0,0"))
               (rule "mul_literals" (formula "9") (term "1,1,0,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,0,0,0"))
               (rule "add_literals" (formula "9") (term "0,0,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,0,0"))
               (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,0,0"))
               (rule "nnf_notOr" (formula "1") (term "0,1,0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "nnf_notAnd" (formula "10") (term "0,0,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "10") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "10") (term "1,0,0,1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "10") (term "0,0,1,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "10") (term "1,1,0,0,0,0,0"))
               (rule "nnf_notAnd" (formula "10") (term "0,0,0,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0,0,0,0"))
               (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "10") (term "0,0,1,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0,0,0,0,0"))
               (rule "add_literals" (formula "10") (term "0,0,0,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0,0,0"))
               (rule "lenNonNegative" (formula "8") (term "1"))
               (rule "inEqSimp_commuteLeq" (formula "8"))
               (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "15"))
               (rule "leq_literals" (formula "8") (term "0"))
               (builtin "One Step Simplification" (formula "8"))
               (rule "true_left" (formula "8"))
               (rule "lenNonNegative" (formula "8") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "8"))
               (rule "applyEq" (formula "8") (term "0") (ifseqformula "9"))
               (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "15"))
               (rule "leq_literals" (formula "8") (term "0"))
               (builtin "One Step Simplification" (formula "8"))
               (rule "true_left" (formula "8"))
               (rule "seqGetAlphaCast" (formula "15") (term "0"))
               (rule "castDel" (formula "15") (term "0"))
               (builtin "One Step Simplification" (formula "15"))
               (rule "true_left" (formula "15"))
               (rule "seqGetAlphaCast" (formula "15") (term "1"))
               (rule "castDel" (formula "15") (term "0"))
               (builtin "One Step Simplification" (formula "15"))
               (rule "true_left" (formula "15"))
               (rule "lenNonNegative" (formula "7") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "7"))
               (rule "applyEq" (formula "7") (term "0") (ifseqformula "8"))
               (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "15"))
               (rule "leq_literals" (formula "7") (term "0"))
               (builtin "One Step Simplification" (formula "7"))
               (rule "true_left" (formula "7"))
               (rule "commute_or_2" (formula "9") (term "0"))
               (rule "seqGetAlphaCast" (formula "18") (term "1,1,2,0"))
               (rule "castedGetAny" (formula "1") (term "0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "commute_or" (formula "1") (term "0,0"))
               (rule "commute_or_2" (formula "10") (term "0,0"))
               (rule "commute_or_2" (formula "9") (term "0,0"))
               (rule "ifthenelse_split" (formula "3") (term "0"))
               (branch "f_s1.length >= 2 TRUE"
                  (rule "replace_known_left" (formula "6") (term "0,0") (ifseqformula "3"))
                  (builtin "One Step Simplification" (formula "6"))
                  (rule "replace_known_left" (formula "1") (term "0,1,0,1,0,0") (ifseqformula "3"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "4"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0"))
                  (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                  (rule "add_literals" (formula "4") (term "0,0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "6"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "6") (term "1,0"))
                  (rule "mul_literals" (formula "6") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "6") (term "0"))
                  (rule "polySimp_addComm1" (formula "6") (term "0,0"))
                  (rule "add_literals" (formula "6") (term "0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                  (rule "polySimp_elimOne" (formula "4") (term "0"))
                  (rule "replace_known_left" (formula "7") (term "0,1") (ifseqformula "4"))
                  (builtin "One Step Simplification" (formula "7"))
                  (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "4"))
                  (builtin "One Step Simplification" (formula "17"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                  (rule "polySimp_elimOne" (formula "6") (term "0"))
                  (rule "replace_known_left" (formula "7") (term "0,0") (ifseqformula "6"))
                  (builtin "One Step Simplification" (formula "7"))
                  (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "6"))
                  (builtin "One Step Simplification" (formula "17"))
                  (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "3"))
                  (rule "leq_literals" (formula "15") (term "0"))
                  (builtin "One Step Simplification" (formula "15"))
                  (rule "true_left" (formula "15"))
                  (rule "inEqSimp_contradInEq1" (formula "10") (term "0,0,0,0,0") (ifseqformula "4"))
                  (rule "inEqSimp_homoInEq1" (formula "10") (term "0,0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "10") (term "0,0,0,0,0,0,0,0"))
                  (rule "add_literals" (formula "10") (term "0,0,0,0,0,0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,0,0,0,0,0"))
                  (rule "add_literals" (formula "10") (term "1,1,0,0,0,0,0,0,0"))
                  (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0,0,0"))
                  (rule "add_literals" (formula "10") (term "0,0,0,0,0,0,0"))
                  (rule "leq_literals" (formula "10") (term "0,0,0,0,0,0"))
                  (builtin "One Step Simplification" (formula "10"))
                  (rule "ifthenelse_to_or_left2" (formula "1") (term "1,0,1,0"))
                  (rule "eqSymm" (formula "1") (term "0,1,1,1,0,1,0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,1,1,0,1,0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,1,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,1,0,1,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0,1,0,1,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,0,0,1,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,1,0,1,0"))
                  (rule "mul_literals" (formula "1") (term "1,0,0,0,1,0,1,0"))
                  (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,1,0,1,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,1,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,1,0,1,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,1,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,0,1,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,1,0,0,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,0,1,0"))
                  (rule "cnf_rightDist" (formula "1") (term "1,1,0,1,0"))
                  (rule "cnf_rightDist" (formula "1") (term "1,1,1,0,1,0"))
                  (rule "commute_or" (formula "1") (term "1,1,1,1,0,1,0"))
                  (rule "ifthenelse_split" (formula "7") (term "1"))
                  (branch "(int)s_1[1 + iv_0] = 0 TRUE"
                     (builtin "One Step Simplification" (formula "8"))
                     (rule "polySimp_homoEq" (formula "8") (term "1"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,0,1"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,0,1"))
                     (rule "mul_literals" (formula "8") (term "0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "8") (term "0,1"))
                     (rule "polySimp_addComm1" (formula "8") (term "0,0,1"))
                     (rule "add_literals" (formula "8") (term "0,0,0,1"))
                     (rule "add_zero_left" (formula "8") (term "0,0,1"))
                     (rule "applyEqRigid" (formula "17") (term "1") (ifseqformula "7"))
                     (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "17"))
                     (builtin "One Step Simplification" (formula "8"))
                     (rule "applyEqRigid" (formula "11") (term "1,0,1,0") (ifseqformula "7"))
                     (rule "polySimp_sepNegMonomial" (formula "8"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                     (rule "polySimp_elimOne" (formula "8") (term "0"))
                     (rule "applyEqRigid" (formula "17") (term "0") (ifseqformula "8"))
                     (rule "cnf_rightDist" (formula "1") (term "0,1,1,0,1,0"))
                     (rule "commute_or" (formula "1") (term "0,0,1,1,0,1,0"))
                     (rule "ifthenelse_to_or_right2" (formula "1") (term "1,0,1,0,1,0"))
                     (rule "nnf_notAnd" (formula "1") (term "0,0,1,0,1,0,1,0"))
                     (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,1,0,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,1,0,1,0,1,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,1,0,1,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,1,0,1,0,1,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,1,0,1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,1,0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,0,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,0,1,0,1,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,1,0,0,1,0,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,0,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,0,1,0,1,0"))
                     (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,1,0,1,0,1,0"))
                     (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0,1,0,1,0,1,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,0,0,1,0,1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,1,0,1,0,1,0"))
                     (rule "mul_literals" (formula "1") (term "1,0,0,0,1,0,1,0,1,0"))
                     (rule "commute_or" (formula "1") (term "1,1,0,1,0,1,0"))
                     (rule "cnf_rightDist" (formula "1") (term "1,0,1,1,0,1,0"))
                     (rule "commute_or" (formula "1") (term "1,1,0,1,1,0,1,0"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,1,1,0,1,0"))
                     (rule "commute_or" (formula "1") (term "1,0,0,1,1,0,1,0"))
                     (rule "cnf_rightDist" (formula "1") (term "1,1,0,1,0,1,0"))
                     (rule "cnf_rightDist" (formula "1") (term "0,1,0,1,0"))
                     (rule "commute_or" (formula "1") (term "1,0,1,0,1,0"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,1,0,1,0"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0,1,0,1,0"))
                     (rule "commute_or" (formula "1") (term "0,1,1,0,1,0,1,0"))
                     (rule "commute_or" (formula "1") (term "0,0,0,0,1,0,1,0"))
                     (rule "cnf_rightDist" (formula "1") (term "1,0,1,0,1,0"))
                     (rule "commute_or_2" (formula "1") (term "1,1,0,1,0,1,0"))
                     (rule "shift_paren_or" (formula "1") (term "0,1,0,1,0,1,0"))
                     (rule "commute_or_2" (formula "1") (term "0,0,1,0,1,0,1,0"))
                     (rule "shift_paren_or" (formula "1") (term "0,1,1,0,1,0,1,0"))
                     (rule "commute_or" (formula "1") (term "0,0,0,1,0,1,0,1,0"))
                     (rule "allLeft" (formula "14") (inst "t=add(Z(1(#)), jv_0)"))
                     (rule "inEqSimp_commuteGeq" (formula "14") (term "1,0"))
                     (rule "inEqSimp_homoInEq0" (formula "14") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "14") (term "0,0,0"))
                     (rule "add_literals" (formula "14") (term "0,0,0,0"))
                     (rule "applyEq" (formula "14") (term "1,0,1") (ifseqformula "8"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "14") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0"))
                     (rule "polySimp_elimOne" (formula "14") (term "0,0,0"))
                     (rule "inEqSimp_contradInEq1" (formula "14") (term "1,0") (ifseqformula "6"))
                     (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1,0"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0"))
                     (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0"))
                     (rule "polySimp_addComm1" (formula "14") (term "0,0,0,1,0"))
                     (rule "add_literals" (formula "14") (term "0,0,0,0,1,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1,0"))
                     (rule "add_literals" (formula "14") (term "1,1,0,0,1,0"))
                     (rule "times_zero_1" (formula "14") (term "1,0,0,1,0"))
                     (rule "add_literals" (formula "14") (term "0,0,1,0"))
                     (rule "leq_literals" (formula "14") (term "0,1,0"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "inEqSimp_contradInEq1" (formula "14") (term "0") (ifseqformula "5"))
                     (rule "qeq_literals" (formula "14") (term "0,0"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "allLeft" (formula "15") (inst "t=Z(0(#))"))
                     (rule "leq_literals" (formula "15") (term "0,0"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "inEqSimp_commuteGeq" (formula "15") (term "0"))
                     (rule "applyEqRigid" (formula "15") (term "0,1") (ifseqformula "14"))
                     (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "3"))
                     (rule "qeq_literals" (formula "15") (term "0,0"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "applyEq" (formula "14") (term "1") (ifseqformula "15"))
                     (rule "allLeft" (formula "16") (inst "t=add(Z(1(#)), iv_0)"))
                     (rule "inEqSimp_commuteGeq" (formula "16") (term "1,0"))
                     (rule "inEqSimp_homoInEq0" (formula "16") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "16") (term "0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "16") (term "0,0,0"))
                     (rule "add_literals" (formula "16") (term "0,0,0,0"))
                     (rule "applyEq" (formula "16") (term "1,0,1") (ifseqformula "7"))
                     (rule "applyEq" (formula "16") (term "0,1") (ifseqformula "19"))
                     (rule "eqSymm" (formula "16") (term "1"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "16") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0"))
                     (rule "polySimp_elimOne" (formula "16") (term "0,0,0"))
                     (rule "inEqSimp_contradInEq1" (formula "16") (term "0,0") (ifseqformula "2"))
                     (rule "qeq_literals" (formula "16") (term "0,0,0"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "inEqSimp_contradInEq1" (formula "16") (term "0") (ifseqformula "4"))
                     (rule "inEqSimp_homoInEq1" (formula "16") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "16") (term "0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "16") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "16") (term "0,0,0,0"))
                     (rule "add_literals" (formula "16") (term "0,0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,0"))
                     (rule "add_literals" (formula "16") (term "1,1,0,0,0"))
                     (rule "times_zero_1" (formula "16") (term "1,0,0,0"))
                     (rule "add_literals" (formula "16") (term "0,0,0"))
                     (rule "leq_literals" (formula "16") (term "0,0"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "shift_paren_and" (formula "1") (term "0,1,0,1,0"))
                     (rule "shift_paren_and" (formula "1") (term "0,1,1,0,1,0"))
                     (rule "allLeft" (formula "12") (inst "t=Z(0(#))"))
                     (rule "leq_literals" (formula "12") (term "0,0,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "12"))
                     (rule "inEqSimp_commuteGeq" (formula "12") (term "0,0,0,0,0"))
                     (rule "inEqSimp_contradInEq1" (formula "12") (term "0,0,0,0,0") (ifseqformula "3"))
                     (rule "qeq_literals" (formula "12") (term "0,0,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "12"))
                     (rule "commute_or_2" (formula "12") (term "0,0"))
                     (rule "inEqSimp_or_weaken0" (formula "12") (term "0,0,0"))
                     (rule "add_literals" (formula "12") (term "1,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "12"))
                     (rule "shift_paren_and" (formula "1") (term "1,1,0,1,0"))
                     (rule "shift_paren_and" (formula "1") (term "1,0,1,0"))
                     (rule "shift_paren_and" (formula "1") (term "0,1,0,1,0"))
                     (rule "seqGetAlphaCast" (formula "7") (term "0"))
                     (rule "castedGetAny" (formula "7") (term "0"))
                     (builtin "One Step Simplification" (formula "7"))
                     (rule "true_left" (formula "7"))
                     (rule "shift_paren_and" (formula "1") (term "0,0,1,0,1,0"))
                     (rule "seqGetAlphaCast" (formula "8") (term "0"))
                     (rule "castedGetAny" (formula "8") (term "0"))
                     (builtin "One Step Simplification" (formula "8"))
                     (rule "true_left" (formula "8"))
                     (rule "shift_paren_and" (formula "1") (term "0,0,0,1,0,1,0"))
                     (rule "allLeft" (formula "12") (inst "t=add(Z(1(#)), jv_0)"))
                     (rule "replace_known_left" (formula "12") (term "0,1") (ifseqformula "8"))
                     (builtin "One Step Simplification" (formula "12"))
                     (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0"))
                     (rule "mul_literals" (formula "12") (term "1,0"))
                     (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "6"))
                     (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1"))
                     (rule "mul_literals" (formula "12") (term "0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0,1"))
                     (rule "polySimp_addComm1" (formula "12") (term "0,0,0,1"))
                     (rule "add_literals" (formula "12") (term "0,0,0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
                     (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "12") (term "0,0,1"))
                     (rule "leq_literals" (formula "12") (term "0,1"))
                     (builtin "One Step Simplification" (formula "12"))
                     (rule "inEqSimp_contradInEq1" (formula "12") (ifseqformula "5"))
                     (rule "qeq_literals" (formula "12") (term "0"))
                     (builtin "One Step Simplification" (formula "12"))
                     (rule "closeFalse" (formula "12"))
                  )
                  (branch "(int)s_1[1 + iv_0] = 0 FALSE"
                     (rule "ifthenelse_split" (formula "7") (term "0"))
                     (branch "(int)s_1[1 + jv_0] = 0 TRUE"
                        (rule "polySimp_homoEq" (formula "8"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0"))
                        (rule "add_zero_left" (formula "8") (term "0,0"))
                        (rule "applyEqRigid" (formula "18") (term "0") (ifseqformula "7"))
                        (rule "eqSymm" (formula "18"))
                        (rule "polySimp_sepPosMonomial" (formula "8"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1"))
                        (rule "polySimp_elimOne" (formula "8") (term "1"))
                        (rule "applyEqRigid" (formula "17") (term "0") (ifseqformula "8"))
                        (rule "applyEqRigid" (formula "11") (term "1,0,1,0") (ifseqformula "8"))
                        (rule "cnf_rightDist" (formula "1") (term "0,1,1,0,1,0"))
                        (rule "commute_or" (formula "1") (term "0,0,1,1,0,1,0"))
                        (rule "ifthenelse_to_or_right2" (formula "1") (term "1,0,1,0,1,0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0,1,0,1,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,1,0,1,0,1,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0,1,0,1,0,1,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0,0,1,0,1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,1,0,1,0,1,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0,1,0,1,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,1,0,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,1,0,1,0,1,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,1,0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,1,0,1,0,1,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,1,0,1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,1,0,1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,0,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,0,1,0,1,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,1,0,0,1,0,1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,0,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,0,1,0,1,0"))
                        (rule "commute_or" (formula "1") (term "1,1,0,1,0,1,0"))
                        (rule "cnf_rightDist" (formula "1") (term "1,0,1,1,0,1,0"))
                        (rule "commute_or" (formula "1") (term "1,1,0,1,1,0,1,0"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,1,1,0,1,0"))
                        (rule "commute_or" (formula "1") (term "1,0,0,1,1,0,1,0"))
                        (rule "cnf_rightDist" (formula "1") (term "1,1,0,1,0,1,0"))
                        (rule "cnf_rightDist" (formula "1") (term "0,1,0,1,0"))
                        (rule "commute_or" (formula "1") (term "1,0,1,0,1,0"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,1,0,1,0"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0,1,0,1,0"))
                        (rule "commute_or" (formula "1") (term "0,1,1,0,1,0,1,0"))
                        (rule "commute_or" (formula "1") (term "0,0,0,0,1,0,1,0"))
                        (rule "cnf_rightDist" (formula "1") (term "1,0,1,0,1,0"))
                        (rule "commute_or_2" (formula "1") (term "1,1,0,1,0,1,0"))
                        (rule "shift_paren_or" (formula "1") (term "0,1,0,1,0,1,0"))
                        (rule "commute_or_2" (formula "1") (term "0,0,1,0,1,0,1,0"))
                        (rule "shift_paren_or" (formula "1") (term "0,1,1,0,1,0,1,0"))
                        (rule "commute_or" (formula "1") (term "0,0,0,1,0,1,0,1,0"))
                        (rule "allLeft" (formula "14") (inst "t=add(Z(1(#)), jv_0)"))
                        (rule "inEqSimp_commuteGeq" (formula "14") (term "1,0"))
                        (rule "inEqSimp_homoInEq0" (formula "14") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,0"))
                        (rule "applyEqRigid" (formula "14") (term "1,0,1") (ifseqformula "7"))
                        (rule "applyEq" (formula "14") (term "0,1") (ifseqformula "17"))
                        (rule "eqSymm" (formula "14") (term "1"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "14") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "14") (term "0,0") (ifseqformula "5"))
                        (rule "qeq_literals" (formula "14") (term "0,0,0"))
                        (builtin "One Step Simplification" (formula "14"))
                        (rule "inEqSimp_contradInEq1" (formula "14") (term "0") (ifseqformula "6"))
                        (rule "inEqSimp_homoInEq1" (formula "14") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0,0,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,0"))
                        (rule "add_literals" (formula "14") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0"))
                        (rule "leq_literals" (formula "14") (term "0,0"))
                        (builtin "One Step Simplification" (formula "14"))
                        (rule "allLeft" (formula "15") (inst "t=Z(0(#))"))
                        (rule "leq_literals" (formula "15") (term "0,0"))
                        (builtin "One Step Simplification" (formula "15"))
                        (rule "inEqSimp_commuteGeq" (formula "15") (term "0"))
                        (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "15") (term "0,0"))
                        (builtin "One Step Simplification" (formula "15"))
                        (rule "allLeft" (formula "16") (inst "t=add(Z(1(#)), iv_0)"))
                        (rule "inEqSimp_commuteGeq" (formula "16") (term "1,0"))
                        (rule "inEqSimp_homoInEq0" (formula "16") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,0"))
                        (rule "applyEq" (formula "16") (term "1,0,1") (ifseqformula "8"))
                        (rule "applyEq" (formula "16") (term "0,1") (ifseqformula "15"))
                        (rule "eqSymm" (formula "16") (term "1"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "16") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "16") (term "0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "16") (term "1,0") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0"))
                        (rule "polySimp_addComm1" (formula "16") (term "0,0,0,1,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,0,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1,0"))
                        (rule "add_literals" (formula "16") (term "1,1,0,0,1,0"))
                        (rule "times_zero_1" (formula "16") (term "1,0,0,1,0"))
                        (rule "add_literals" (formula "16") (term "0,0,1,0"))
                        (rule "leq_literals" (formula "16") (term "0,1,0"))
                        (builtin "One Step Simplification" (formula "16"))
                        (rule "inEqSimp_contradInEq1" (formula "16") (term "0") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "16") (term "0,0"))
                        (builtin "One Step Simplification" (formula "16"))
                        (rule "shift_paren_and" (formula "1") (term "0,1,0,1,0"))
                        (rule "shift_paren_and" (formula "1") (term "0,1,1,0,1,0"))
                        (rule "allLeft" (formula "12") (inst "t=Z(0(#))"))
                        (rule "leq_literals" (formula "12") (term "0,0,0,0,0,0"))
                        (builtin "One Step Simplification" (formula "12"))
                        (rule "inEqSimp_commuteGeq" (formula "12") (term "0,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "12") (term "0,0,0,0,0") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "12") (term "0,0,0,0,0,0"))
                        (builtin "One Step Simplification" (formula "12"))
                        (rule "commute_or_2" (formula "12") (term "0,0"))
                        (rule "inEqSimp_or_weaken0" (formula "12") (term "0,0,0"))
                        (rule "add_literals" (formula "12") (term "1,0,0,0,0"))
                        (builtin "One Step Simplification" (formula "12"))
                        (rule "shift_paren_and" (formula "1") (term "1,1,0,1,0"))
                        (rule "shift_paren_and" (formula "1") (term "1,0,1,0"))
                        (rule "shift_paren_and" (formula "1") (term "0,1,0,1,0"))
                        (rule "shift_paren_and" (formula "1") (term "0,0,1,0,1,0"))
                        (rule "seqGetAlphaCast" (formula "7") (term "0"))
                        (rule "castedGetAny" (formula "7") (term "0"))
                        (builtin "One Step Simplification" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "seqGetAlphaCast" (formula "8") (term "0"))
                        (rule "castedGetAny" (formula "8") (term "0"))
                        (builtin "One Step Simplification" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "shift_paren_and" (formula "1") (term "0,0,0,1,0,1,0"))
                        (rule "allLeft" (formula "11") (inst "t=Z(0(#))"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "leq_literals" (formula "11") (term "0,0"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "polySimp_homoEq" (formula "11") (term "0"))
                        (rule "mul_literals" (formula "11") (term "1,0,0"))
                        (rule "add_zero_right" (formula "11") (term "0,0"))
                        (rule "inEqSimp_commuteGeq" (formula "11") (term "1"))
                        (rule "polySimp_sepPosMonomial" (formula "11") (term "0"))
                        (rule "mul_literals" (formula "11") (term "1,0"))
                        (rule "inEqSimp_contradEq7" (formula "11") (term "0") (ifseqformula "2"))
                        (rule "add_zero_left" (formula "11") (term "0,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,0,0"))
                        (rule "leq_literals" (formula "11") (term "0,0"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "inEqSimp_contradInEq1" (formula "11") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "11") (term "0"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "closeFalse" (formula "11"))
                     )
                     (branch "(int)s_1[1 + jv_0] = 0 FALSE"
                        (rule "polySimp_homoEq" (formula "7"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                        (rule "mul_literals" (formula "7") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0"))
                        (rule "add_literals" (formula "7") (term "0,0,0"))
                        (rule "add_zero_left" (formula "7") (term "0,0"))
                        (rule "polySimp_sepNegMonomial" (formula "7"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                        (rule "polySimp_elimOne" (formula "7") (term "0"))
                        (rule "close" (formula "18") (ifseqformula "7"))
                     )
                  )
               )
               (branch "f_s1.length >= 2 FALSE"
                  (rule "replace_known_right" (formula "1") (term "0,1,0,1,0,0") (ifseqformula "16"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "replace_known_right" (formula "5") (term "0,0") (ifseqformula "16"))
                  (builtin "One Step Simplification" (formula "5"))
                  (rule "inEqSimp_geqRight" (formula "16"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "4"))
                  (rule "times_zero_2" (formula "4") (term "1,0"))
                  (rule "add_zero_right" (formula "4") (term "0"))
                  (rule "inEqSimp_homoInEq1" (formula "6"))
                  (rule "times_zero_2" (formula "6") (term "1,0"))
                  (rule "add_zero_right" (formula "6") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                  (rule "mul_literals" (formula "4") (term "1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                  (rule "mul_literals" (formula "6") (term "1"))
                  (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "6"))
                  (rule "qeq_literals" (formula "5") (term "0"))
                  (builtin "One Step Simplification" (formula "5"))
                  (rule "closeFalse" (formula "5"))
               )
            )
            (branch
               (rule "allRight" (formula "8") (inst "sk=iv_34") (userinteraction))
               (rule "impRight" (formula "8") (userinteraction))
               (rule "andLeft" (formula "1") (userinteraction))
               (rule "seqNPermRange" (formula "5") (inst "iv=iv") (userinteraction))
               (rule "instAll" (formula "1") (term "1") (ifseqformula "5") (userinteraction))
               (rule "impLeft" (formula "1") (userinteraction))
               (branch
                  (rule "eqSymm" (formula "7") (term "1,0"))
                  (rule "eqSymm" (formula "3"))
                  (rule "eqSymm" (formula "14") (term "1,0,1,0"))
                  (rule "eqSymm" (formula "10"))
                  (rule "replace_known_left" (formula "11") (term "0") (ifseqformula "1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "polySimp_elimSub" (formula "12") (term "2,2,0,1,1"))
                  (rule "mul_literals" (formula "12") (term "1,2,2,0,1,1"))
                  (rule "polySimp_elimSub" (formula "12") (term "1,2,0,1,1"))
                  (rule "mul_literals" (formula "12") (term "1,1,2,0,1,1"))
                  (rule "polySimp_elimSub" (formula "12") (term "1,2,0,1,0"))
                  (rule "mul_literals" (formula "12") (term "1,1,2,0,1,0"))
                  (rule "polySimp_elimSub" (formula "2") (term "1,2,0,1"))
                  (rule "mul_literals" (formula "2") (term "1,1,2,0,1"))
                  (rule "polySimp_elimSub" (formula "12") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "12") (term "1,1,0,0,1"))
                  (rule "polySimp_elimSub" (formula "13") (term "1,2,0"))
                  (rule "mul_literals" (formula "13") (term "1,1,2,0"))
                  (rule "polySimp_elimSub" (formula "13") (term "1,0"))
                  (rule "mul_literals" (formula "13") (term "1,1,0"))
                  (rule "polySimp_elimSub" (formula "12") (term "1,2,0,0,1"))
                  (rule "mul_literals" (formula "12") (term "1,1,2,0,0,1"))
                  (rule "polySimp_elimSub" (formula "12") (term "1,0,1,0"))
                  (rule "mul_literals" (formula "12") (term "1,1,0,1,0"))
                  (rule "polySimp_elimSub" (formula "2") (term "2,2,0,1"))
                  (rule "mul_literals" (formula "2") (term "1,2,2,0,1"))
                  (rule "polySimp_elimSub" (formula "12") (term "2,2,0,0,1"))
                  (rule "mul_literals" (formula "12") (term "1,2,2,0,0,1"))
                  (rule "polySimp_elimSub" (formula "13") (term "2,2,0"))
                  (rule "mul_literals" (formula "13") (term "1,2,2,0"))
                  (rule "polySimp_elimSub" (formula "2") (term "1,0,1"))
                  (rule "mul_literals" (formula "2") (term "1,1,0,1"))
                  (rule "polySimp_elimSub" (formula "12") (term "2,2,0,1,0"))
                  (rule "mul_literals" (formula "12") (term "1,2,2,0,1,0"))
                  (rule "polySimp_elimSub" (formula "12") (term "1,0,1,1"))
                  (rule "mul_literals" (formula "12") (term "1,1,0,1,1"))
                  (rule "polySimp_addComm0" (formula "2") (term "1,0,0,2,0,1"))
                  (rule "polySimp_addComm0" (formula "12") (term "1,0,0,2,0,1,1"))
                  (rule "polySimp_addComm0" (formula "12") (term "1,0,0,2,0,0,1"))
                  (rule "polySimp_addComm0" (formula "13") (term "1,0,0,2,0"))
                  (rule "polySimp_addComm0" (formula "12") (term "1,0,0,2,0,1,0"))
                  (rule "polySimp_addComm0" (formula "12") (term "1,0,2,2,0,1,1"))
                  (rule "polySimp_addComm0" (formula "12") (term "1,2,0,1,1"))
                  (rule "polySimp_addComm0" (formula "12") (term "1,2,0,1,0"))
                  (rule "polySimp_addComm0" (formula "2") (term "1,2,0,1"))
                  (rule "polySimp_addComm0" (formula "12") (term "1,0,0,1"))
                  (rule "polySimp_addComm0" (formula "13") (term "1,2,0"))
                  (rule "polySimp_addComm0" (formula "13") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "12") (term "1,2,0,0,1"))
                  (rule "polySimp_addComm0" (formula "12") (term "1,0,1,0"))
                  (rule "polySimp_addComm0" (formula "2") (term "1,0,2,2,0,1"))
                  (rule "polySimp_addComm0" (formula "12") (term "1,0,2,2,0,0,1"))
                  (rule "polySimp_addComm0" (formula "13") (term "1,0,2,2,0"))
                  (rule "polySimp_addComm0" (formula "2") (term "1,0,1"))
                  (rule "polySimp_addComm0" (formula "12") (term "1,0,2,2,0,1,0"))
                  (rule "polySimp_addComm0" (formula "12") (term "1,0,1,1"))
                  (rule "polySimp_addComm0" (formula "12") (term "2,2,0,1,1"))
                  (rule "polySimp_addComm0" (formula "2") (term "2,2,0,1"))
                  (rule "polySimp_addComm0" (formula "12") (term "2,2,0,0,1"))
                  (rule "polySimp_addComm0" (formula "13") (term "2,2,0"))
                  (rule "polySimp_addComm0" (formula "12") (term "2,2,0,1,0"))
                  (rule "lenOfSeqSub" (formula "14") (term "1,0,0,0"))
                  (rule "polySimp_elimSub" (formula "14") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "14") (term "1,1,1,0,0,0"))
                  (rule "polySimp_addComm0" (formula "14") (term "1,1,0,0,0"))
                  (rule "inEqSimp_ltRight" (formula "11"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "6") (term "1,1,0"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_gtToGeq" (formula "10"))
                  (rule "times_zero_1" (formula "10") (term "1,0,0"))
                  (rule "add_literals" (formula "10") (term "0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,0"))
                  (rule "polySimp_addComm1" (formula "14") (term "0,1,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                  (rule "lenOfSeqDef" (formula "12") (term "1,1"))
                  (rule "polySimp_elimSub" (formula "12") (term "1,1,1"))
                  (rule "mul_literals" (formula "12") (term "1,1,1,1"))
                  (rule "add_zero_right" (formula "12") (term "1,1,1"))
                  (rule "lenOfSeqDef" (formula "3") (term "1"))
                  (rule "polySimp_elimSub" (formula "3") (term "1,1"))
                  (rule "times_zero_2" (formula "3") (term "1,1,1"))
                  (rule "add_zero_right" (formula "3") (term "1,1"))
                  (rule "getOfSeqDef" (formula "12") (term "0,1"))
                  (rule "castDel" (formula "12") (term "1,0,1"))
                  (rule "add_zero_right" (formula "12") (term "1,1,0,0,1,0,1"))
                  (rule "add_zero_right" (formula "12") (term "1,1,1,2,1,0,1"))
                  (rule "replace_known_left" (formula "12") (term "0,0,0,1") (ifseqformula "2"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "polySimp_elimSub" (formula "12") (term "1,0,0,1"))
                  (rule "times_zero_2" (formula "12") (term "1,1,0,0,1"))
                  (rule "add_zero_right" (formula "12") (term "1,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "2"))
                  (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "6") (term "0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "14") (term "0,1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "14") (term "0,0,1,0,0,0"))
                  (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,0"))
                  (rule "getOfSeqDef" (formula "12") (term "1,0"))
                  (rule "castDel" (formula "12") (term "1,1,0"))
                  (rule "add_zero_right" (formula "12") (term "1,1,0,0,1,1,0"))
                  (rule "add_zero_right" (formula "12") (term "1,1,1,2,1,1,0"))
                  (rule "polySimp_elimSub" (formula "12") (term "1,1,0,1,0"))
                  (rule "times_zero_2" (formula "12") (term "1,1,1,0,1,0"))
                  (rule "add_zero_right" (formula "12") (term "1,1,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "3") (term "0,1"))
                  (rule "add_zero_right" (formula "3") (term "0,0,1"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "3") (term "0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,0,1"))
                  (rule "add_literals" (formula "3") (term "0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "12") (term "0,1,1"))
                  (rule "add_zero_right" (formula "12") (term "0,0,1,1"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,1"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,0,1,1"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,1"))
                  (rule "add_literals" (formula "12") (term "0,0,0,1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,1"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,1"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,1"))
                  (rule "add_literals" (formula "12") (term "0,0,0,0,0,1"))
                  (rule "polySimp_addComm1" (formula "12") (term "0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,1,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,1,0"))
                  (rule "add_literals" (formula "12") (term "0,0,0,1,0,1,0"))
                  (rule "polySimp_addComm1" (formula "12") (term "0,1,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "3"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "12") (term "1"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,1,0"))
                  (rule "replace_known_left" (formula "12") (term "0,0,1,0") (ifseqformula "2"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "inEqSimp_commuteLeq" (formula "12") (term "0"))
                  (rule "applyEqRigid" (formula "12") (term "0,1,0,0,0,0") (ifseqformula "5"))
                  (rule "applyEqRigid" (formula "3") (term "1,1,0,1,0") (ifseqformula "5"))
                  (rule "applyEqRigid" (formula "14") (term "2,0,0,1,0,1,0") (ifseqformula "4"))
                  (rule "applyEq" (formula "12") (term "0,1,0,0,1,0,1") (ifseqformula "5"))
                  (rule "polySimp_addComm1" (formula "12") (term "0,1"))
                  (rule "applyEqRigid" (formula "3") (term "0,1,0,0,0,1,0") (ifseqformula "5"))
                  (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "5"))
                  (rule "applyEqRigid" (formula "13") (term "1,1,0") (ifseqformula "5"))
                  (rule "applyEq" (formula "6") (term "0,1,0,0,1,1,0") (ifseqformula "5"))
                  (rule "applyEq" (formula "6") (term "0,1,0,0,1,0,0") (ifseqformula "5"))
                  (rule "applyEq" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "5"))
                  (rule "applyEqRigid" (formula "12") (term "0,1,0,0,0,1,0,1") (ifseqformula "5"))
                  (rule "polySimp_addComm1" (formula "12") (term "0,1"))
                  (rule "applyEq" (formula "12") (term "1,1,0,1,0,0,1") (ifseqformula "5"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                  (rule "mul_literals" (formula "10") (term "1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "14") (term "0,1,0,0,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "0,0,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "14") (term "0,0,1,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "0,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "3") (term "0,0,0,1,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,1,0"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,1,1,0"))
                  (rule "polySimp_rightDist" (formula "6") (term "1,1,1,0"))
                  (rule "mul_literals" (formula "6") (term "0,1,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,1,0"))
                  (rule "polySimp_elimOne" (formula "6") (term "1,1,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0,1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "12") (term "0,0,0,1,0,0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "0,0,1,0,1"))
                  (rule "polySimp_elimOne" (formula "12") (term "0,0,1,0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                  (rule "polySimp_elimOne" (formula "3") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,1"))
                  (rule "mul_literals" (formula "12") (term "0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,1,1"))
                  (rule "inEqSimp_contradInEq0" (formula "12") (term "0,0,1") (ifseqformula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "12") (term "0,0,0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,0,0,1"))
                  (rule "add_literals" (formula "12") (term "1,1,0,0,0,0,1"))
                  (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,1"))
                  (rule "add_literals" (formula "12") (term "0,0,0,0,1"))
                  (rule "leq_literals" (formula "12") (term "0,0,0,1"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "inEqSimp_homoInEq0" (formula "12") (term "1"))
                  (rule "polySimp_addComm1" (formula "12") (term "0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,1"))
                  (rule "mul_literals" (formula "12") (term "0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,1,1"))
                  (rule "inEqSimp_contradInEq0" (formula "12") (term "0,0,0") (ifseqformula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "12") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "12") (term "1,1,0,0,0,0,0"))
                  (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
                  (rule "leq_literals" (formula "12") (term "0,0,0,0"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "getOfSeqSub" (formula "14") (term "1,1,0,1,0"))
                  (rule "castDel" (formula "14") (term "2,1,1,0,1,0"))
                  (rule "polySimp_elimSub" (formula "14") (term "1,1,0,1,1,0,1,0"))
                  (rule "mul_literals" (formula "14") (term "1,1,1,0,1,1,0,1,0"))
                  (rule "polySimp_addComm0" (formula "14") (term "1,1,1,1,0,1,0"))
                  (rule "polySimp_addComm0" (formula "14") (term "1,1,0,1,1,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,1,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,1,1,0,1,0"))
                  (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,1,1,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,1,1,0,1,0"))
                  (rule "add_literals" (formula "14") (term "0,0,0,1,0,1,1,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,1,1,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,1,1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,1,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "14") (term "1,1,0,1,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,1,1,0,1,0"))
                  (rule "mul_literals" (formula "14") (term "0,1,1,0,1,1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,1,1,0,1,0"))
                  (rule "getOfSeqSub" (formula "14") (term "0,1,0,1,0"))
                  (rule "castDel" (formula "14") (term "2,0,1,0,1,0"))
                  (rule "polySimp_elimSub" (formula "14") (term "1,1,0,0,1,0,1,0"))
                  (rule "mul_literals" (formula "14") (term "1,1,1,0,0,1,0,1,0"))
                  (rule "polySimp_addComm0" (formula "14") (term "1,1,0,1,0,1,0"))
                  (rule "polySimp_addComm0" (formula "14") (term "1,1,0,0,1,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,1,0,1,0"))
                  (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,1,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,1,0,1,0"))
                  (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,1,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,0,1,0"))
                  (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,0,1,0"))
                  (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "1"))
                  (rule "mul_literals" (formula "10") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                  (rule "mul_literals" (formula "10") (term "1"))
                  (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "10"))
                  (rule "leq_literals" (formula "2") (term "0"))
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "nnf_imp2or" (formula "5") (term "0"))
                  (rule "nnf_imp2or" (formula "7") (term "0"))
                  (rule "nnf_ex2all" (formula "14"))
                  (rule "nnf_notAnd" (formula "1") (term "0"))
                  (rule "nnf_notAnd" (formula "6") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
                  (rule "mul_literals" (formula "6") (term "1,0,0,0,0,0"))
                  (rule "add_literals" (formula "6") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
                  (rule "mul_literals" (formula "6") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "8") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
                  (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
                  (rule "add_literals" (formula "8") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                  (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0"))
                  (rule "nnf_notAll" (formula "1") (term "1,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,1,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "lenNonNegative" (formula "5") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "5"))
                  (rule "applyEqRigid" (formula "5") (term "0") (ifseqformula "6"))
                  (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "12"))
                  (rule "leq_literals" (formula "5") (term "0"))
                  (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "lenNonNegative" (formula "5") (term "1"))
                  (rule "inEqSimp_commuteLeq" (formula "5"))
                  (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "12"))
                  (rule "leq_literals" (formula "5") (term "0"))
                  (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "lenNonNegative" (formula "4") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "4"))
                  (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "5"))
                  (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "12"))
                  (rule "leq_literals" (formula "4") (term "0"))
                  (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "seqGetAlphaCast" (formula "12") (term "1"))
                  (rule "castDel" (formula "12") (term "0"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "true_left" (formula "12"))
                  (rule "seqGetAlphaCast" (formula "12") (term "0"))
                  (rule "castDel" (formula "12") (term "0"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "true_left" (formula "12"))
                  (rule "commute_or" (formula "1") (term "0,0"))
                  (rule "cnf_rightDist" (formula "6") (term "0"))
                  (rule "distr_forallAnd" (formula "6"))
                  (rule "andLeft" (formula "6"))
                  (rule "commute_or" (formula "7") (term "0"))
                  (rule "seqGetAlphaCast" (formula "15") (term "1,1,2,0"))
                  (rule "castedGetAny" (formula "1") (term "0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "ifthenelse_split" (formula "3") (term "0"))
                  (branch "f_s1.length >= 2 TRUE"
                     (rule "replace_known_left" (formula "1") (term "0,1,0,1,0,0") (ifseqformula "3"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "replace_known_left" (formula "15") (term "0,0,1") (ifseqformula "3"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "inEqSimp_homoInEq1" (formula "4"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                     (rule "mul_literals" (formula "4") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "4") (term "0"))
                     (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                     (rule "add_literals" (formula "4") (term "0,0,0"))
                     (rule "inEqSimp_homoInEq1" (formula "15") (term "1"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,1"))
                     (rule "polySimp_rightDist" (formula "15") (term "1,0,1"))
                     (rule "mul_literals" (formula "15") (term "0,1,0,1"))
                     (rule "polySimp_addComm1" (formula "15") (term "0,1"))
                     (rule "polySimp_addAssoc" (formula "15") (term "0,0,1"))
                     (rule "add_literals" (formula "15") (term "0,0,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                     (rule "polySimp_elimOne" (formula "4") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "15") (term "1,1"))
                     (rule "mul_literals" (formula "15") (term "0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1"))
                     (rule "polySimp_elimOne" (formula "15") (term "1,1,1"))
                     (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "3"))
                     (rule "leq_literals" (formula "13") (term "0"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "true_left" (formula "13"))
                     (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "4"))
                     (rule "andLeft" (formula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "2"))
                     (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                     (rule "add_literals" (formula "2") (term "1,1,0"))
                     (rule "times_zero_1" (formula "2") (term "1,0"))
                     (rule "add_literals" (formula "2") (term "0"))
                     (rule "leq_literals" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
                  (branch "f_s1.length >= 2 FALSE"
                     (rule "replace_known_right" (formula "1") (term "0,1,0,1,0,0") (ifseqformula "14"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "replace_known_right" (formula "15") (term "0,0,1") (ifseqformula "14"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "inEqSimp_geqRight" (formula "14"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "inEqSimp_homoInEq1" (formula "4"))
                     (rule "times_zero_2" (formula "4") (term "1,0"))
                     (rule "add_zero_right" (formula "4") (term "0"))
                     (rule "inEqSimp_homoInEq1" (formula "15") (term "1"))
                     (rule "mul_literals" (formula "15") (term "1,0,1"))
                     (rule "add_zero_right" (formula "15") (term "0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                     (rule "mul_literals" (formula "4") (term "1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1"))
                     (rule "mul_literals" (formula "15") (term "1,1"))
                     (rule "inEqSimp_contradInEq0" (formula "12") (ifseqformula "4"))
                     (rule "qeq_literals" (formula "12") (term "0"))
                     (builtin "One Step Simplification" (formula "12"))
                     (rule "closeFalse" (formula "12"))
                  )
               )
               (branch
                  (rule "andLeft" (formula "1"))
                  (rule "andRight" (formula "13") (userinteraction))
                  (branch
                     (rule "getOfSeqDef" (formula "13") (term "1") (userinteraction))
                     (rule "ifthenelse_split" (formula "13") (term "1") (userinteraction))
                     (branch "0 <= iv_34 & iv_34 < s_1.length - 1 - 0 TRUE"
                        (rule "castDel" (formula "14") (term "1") (userinteraction))
                        (rule "ifthenelse_split" (formula "14") (term "1") (userinteraction))
                        (branch "(int)s_1[iv_34 + 0 + 1] = 0 TRUE"
                           (rule "add_zero_right" (formula "1") (term "0,1,0") (userinteraction))
                           (rule "andLeft" (formula "2") (userinteraction))
                           (rule "sub_zero_2" (formula "2") (term "1") (userinteraction))
                           (rule "seqNPermInjective" (formula "10") (inst "jv=jv") (inst "iv=iv") (userinteraction))
                           (rule "instAll" (formula "16") (term "1,0,1") (ifseqformula "10") (userinteraction))
                           (rule "instAll" (formula "2") (term "1,0") (ifseqformula "1") (userinteraction))
                           (rule "leq_literals" (formula "1") (term "0,0,0,0,0,0"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "leq_literals" (formula "2") (term "0,0,0,0,0"))
                           (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "12") (term "1,0,0"))
                           (rule "eqSymm" (formula "9"))
                           (rule "eqSymm" (formula "12") (term "1,0,0,0"))
                           (rule "eqSymm" (formula "17"))
                           (rule "eqSymm" (formula "14") (term "1,0"))
                           (rule "eqSymm" (formula "20") (term "1,0,1,0"))
                           (rule "eqSymm" (formula "1") (term "1,0"))
                           (rule "eqSymm" (formula "1") (term "1,0,0"))
                           (rule "eqSymm" (formula "2") (term "1,0"))
                           (rule "polySimp_elimSub" (formula "8") (term "1,0,1"))
                           (rule "mul_literals" (formula "8") (term "1,1,0,1"))
                           (rule "polySimp_elimSub" (formula "19") (term "1,2,0"))
                           (rule "mul_literals" (formula "19") (term "1,1,2,0"))
                           (rule "polySimp_elimSub" (formula "19") (term "2,2,0"))
                           (rule "mul_literals" (formula "19") (term "1,2,2,0"))
                           (rule "polySimp_elimSub" (formula "18") (term "1"))
                           (rule "mul_literals" (formula "18") (term "1,1"))
                           (rule "polySimp_elimSub" (formula "8") (term "1,2,0,1"))
                           (rule "mul_literals" (formula "8") (term "1,1,2,0,1"))
                           (rule "polySimp_elimSub" (formula "4") (term "1"))
                           (rule "mul_literals" (formula "4") (term "1,1"))
                           (rule "polySimp_elimSub" (formula "19") (term "1,0"))
                           (rule "mul_literals" (formula "19") (term "1,1,0"))
                           (rule "polySimp_elimSub" (formula "8") (term "2,2,0,1"))
                           (rule "mul_literals" (formula "8") (term "1,2,2,0,1"))
                           (rule "polySimp_homoEq" (formula "2") (term "1"))
                           (rule "mul_literals" (formula "2") (term "1,0,1"))
                           (rule "polySimp_addLiterals" (formula "2") (term "0,1"))
                           (rule "polySimp_addComm0" (formula "8") (term "1,0,0,2,0,1"))
                           (rule "polySimp_addComm0" (formula "19") (term "1,0,0,2,0"))
                           (rule "polySimp_addComm0" (formula "3") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "2") (term "0,1,0,0"))
                           (rule "polySimp_addComm0" (formula "2") (term "1,1,0,0,0"))
                           (rule "polySimp_addComm0" (formula "2") (term "1,0,1,0"))
                           (rule "polySimp_addComm0" (formula "8") (term "1,0,1"))
                           (rule "polySimp_addComm0" (formula "19") (term "1,2,0"))
                           (rule "polySimp_addComm0" (formula "19") (term "1,0,2,2,0"))
                           (rule "polySimp_addComm0" (formula "18") (term "1"))
                           (rule "polySimp_addComm0" (formula "8") (term "1,2,0,1"))
                           (rule "polySimp_addComm0" (formula "4") (term "1"))
                           (rule "polySimp_addComm0" (formula "19") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "8") (term "1,0,2,2,0,1"))
                           (rule "polySimp_addComm0" (formula "2") (term "0,1"))
                           (rule "polySimp_addComm0" (formula "19") (term "2,2,0"))
                           (rule "polySimp_addComm0" (formula "8") (term "2,2,0,1"))
                           (rule "lenOfSeqSub" (formula "20") (term "1,0,0,0"))
                           (rule "polySimp_elimSub" (formula "20") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "20") (term "1,1,1,0,0,0"))
                           (rule "polySimp_addComm0" (formula "20") (term "1,1,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,1,0"))
                           (rule "polySimp_addComm1" (formula "20") (term "0,1,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "6"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_gtToGeq" (formula "16"))
                           (rule "mul_literals" (formula "16") (term "1,0,0"))
                           (rule "add_zero_right" (formula "16") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,0,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,0,0"))
                           (rule "add_zero_right" (formula "2") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0,0"))
                           (rule "lenOfSeqDef" (formula "8") (term "1"))
                           (rule "polySimp_elimSub" (formula "8") (term "1,1"))
                           (rule "mul_literals" (formula "8") (term "1,1,1"))
                           (rule "add_zero_right" (formula "8") (term "1,1"))
                           (rule "inEqSimp_leqRight" (formula "18"))
                           (rule "add_zero_right" (formula "1") (term "0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "6"))
                           (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "12") (term "0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,0,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "8"))
                           (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "5"))
                           (rule "polySimp_rightDist" (formula "5") (term "1,0,0"))
                           (rule "mul_literals" (formula "5") (term "0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "0,1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "20") (term "0,0,1,0,0,0"))
                           (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "3") (term "0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "5") (term "0,0"))
                           (rule "add_literals" (formula "5") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "5") (term "0"))
                           (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "5"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "inEqSimp_ltToLeq" (formula "9") (term "0,1"))
                           (rule "add_zero_right" (formula "9") (term "0,0,1"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1"))
                           (rule "mul_literals" (formula "9") (term "0,1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "9") (term "0,0,1"))
                           (rule "add_literals" (formula "9") (term "0,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "9"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "9") (term "0"))
                           (rule "inEqSimp_homoInEq0" (formula "3") (term "1,0,0"))
                           (rule "times_zero_2" (formula "3") (term "1,0,1,0,0"))
                           (rule "add_zero_right" (formula "3") (term "0,1,0,0"))
                           (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "4"))
                           (rule "eqSymm" (formula "3") (term "1,0"))
                           (rule "applyEq" (formula "5") (term "0,1,0") (ifseqformula "11"))
                           (rule "applyEqRigid" (formula "19") (term "1,1,0") (ifseqformula "11"))
                           (rule "applyEqRigid" (formula "20") (term "2,0,0,1,0,1,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "3") (term "0,1,0,0,0,0") (ifseqformula "11"))
                           (rule "applyEqRigid" (formula "9") (term "1,1,0,1,0") (ifseqformula "11"))
                           (rule "applyEqRigid" (formula "2") (term "0,1,0,0,0,0,0,0") (ifseqformula "11"))
                           (rule "applyEqRigid" (formula "9") (term "0,1,0,0,0,1,0") (ifseqformula "11"))
                           (rule "applyEqRigid" (formula "2") (term "0,1,0,0,1,0,0,0") (ifseqformula "11"))
                           (rule "applyEqRigid" (formula "13") (term "0,1,0,0,1,0,0,0,0,0,0") (ifseqformula "11"))
                           (rule "applyEq" (formula "12") (term "0,1,0,0,1,1,0") (ifseqformula "11"))
                           (rule "applyEqRigid" (formula "13") (term "0,1,0,0,1,0,0,0,0") (ifseqformula "11"))
                           (rule "applyEq" (formula "7") (term "0,1,0,0") (ifseqformula "11"))
                           (rule "applyEq" (formula "12") (term "0,1,0,0,1,0,0") (ifseqformula "11"))
                           (rule "applyEqRigid" (formula "15") (term "0,1,0,0,1,0,0") (ifseqformula "11"))
                           (rule "polySimp_sepPosMonomial" (formula "3") (term "1"))
                           (rule "mul_literals" (formula "3") (term "1,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "0,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "20") (term "0,1,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                           (rule "mul_literals" (formula "17") (term "1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "0,0,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "20") (term "0,0,1,0,0,0"))
                           (rule "inEqSimp_invertInEq1" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0"))
                           (rule "mul_literals" (formula "3") (term "1,1,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                           (rule "polySimp_elimOne" (formula "5") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "3") (term "0,0,0,0"))
                           (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "17"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0,0,0,0,0,0"))
                           (rule "replace_known_left" (formula "2") (term "0,0,0,0,0") (ifseqformula "17"))
                           (builtin "One Step Simplification" (formula "2"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "0,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,1,0,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,1,1,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,1,1,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,1,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,1,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,1,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "7"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1"))
                           (rule "polySimp_rightDist" (formula "7") (term "1"))
                           (rule "mul_literals" (formula "7") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "7") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "2") (term "0,1,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                           (rule "polySimp_elimOne" (formula "9") (term "0"))
                           (rule "inEqSimp_contradEq7" (formula "3") (term "1") (ifseqformula "8"))
                           (rule "add_zero_left" (formula "3") (term "0,0,1"))
                           (rule "mul_literals" (formula "3") (term "0,0,1"))
                           (rule "leq_literals" (formula "3") (term "0,1"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "notLeft" (formula "3"))
                           (rule "inEqSimp_subsumption1" (formula "18") (term "0") (ifseqformula "7"))
                           (rule "leq_literals" (formula "18") (term "0,0"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "18"))
                           (rule "add_zero_right" (formula "1") (term "1"))
                           (rule "inEqSimp_contradEq3" (formula "18") (ifseqformula "1"))
                           (rule "mul_literals" (formula "18") (term "1,0,0"))
                           (rule "add_literals" (formula "18") (term "0,0"))
                           (rule "qeq_literals" (formula "18") (term "0"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "false_right" (formula "18"))
                           (rule "getOfSeqSub" (formula "19") (term "1,1,0,1,0"))
                           (rule "castDel" (formula "19") (term "2,1,1,0,1,0"))
                           (rule "polySimp_elimSub" (formula "19") (term "1,1,0,1,1,0,1,0"))
                           (rule "mul_literals" (formula "19") (term "1,1,1,0,1,1,0,1,0"))
                           (rule "polySimp_addComm0" (formula "19") (term "1,1,1,1,0,1,0"))
                           (rule "polySimp_addComm0" (formula "19") (term "1,1,0,1,1,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,1,1,0,1,0"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,1,1,0,1,0"))
                           (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,1,1,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,1,1,0,1,0"))
                           (rule "add_literals" (formula "19") (term "0,0,0,1,0,1,1,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,1,1,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,1,1,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,1,1,0,1,0"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,1,0,1,1,0,1,0"))
                           (rule "mul_literals" (formula "19") (term "0,1,1,0,1,1,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,1,1,0,1,0"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,1,1,0,1,0"))
                           (rule "getOfSeqSub" (formula "19") (term "0,1,0,1,0"))
                           (rule "castDel" (formula "19") (term "2,0,1,0,1,0"))
                           (rule "polySimp_elimSub" (formula "19") (term "1,1,0,0,1,0,1,0"))
                           (rule "mul_literals" (formula "19") (term "1,1,1,0,0,1,0,1,0"))
                           (rule "polySimp_addComm0" (formula "19") (term "1,1,0,1,0,1,0"))
                           (rule "polySimp_addComm0" (formula "19") (term "1,1,0,0,1,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,1,0,1,0"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,1,0,1,0"))
                           (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,1,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,1,0,1,0"))
                           (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,1,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,1,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,1,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,1,0,1,0"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,1,0,1,0"))
                           (rule "mul_literals" (formula "19") (term "0,1,1,0,0,1,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,1,0,1,0"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,1,0,1,0"))
                           (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "6"))
                           (rule "mul_literals" (formula "5") (term "0,0"))
                           (rule "add_zero_left" (formula "5") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                           (rule "mul_literals" (formula "5") (term "1"))
                           (rule "nnf_imp2or" (formula "12") (term "0,0"))
                           (rule "nnf_imp2or" (formula "11") (term "0"))
                           (rule "nnf_imp2or" (formula "14") (term "0"))
                           (rule "nnf_ex2all" (formula "19"))
                           (rule "nnf_imp2or" (formula "3") (term "0"))
                           (rule "nnf_notAnd" (formula "1") (term "0"))
                           (rule "nnf_notAnd" (formula "12") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "12") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "15") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                           (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "15") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                           (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "3") (term "0,0"))
                           (rule "nnf_notAll" (formula "1") (term "1,0"))
                           (rule "nnf_notAnd" (formula "1") (term "0,0"))
                           (rule "nnf_notAnd" (formula "13") (term "0,0,0"))
                           (rule "nnf_notAnd" (formula "3") (term "0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "3") (term "0,0,0,0"))
                           (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0,0"))
                           (rule "add_literals" (formula "3") (term "0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,0,0"))
                           (rule "mul_literals" (formula "3") (term "1,0,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "3") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,0,0,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0,0"))
                           (rule "add_literals" (formula "3") (term "0,0,0,1,0,0,0"))
                           (rule "add_zero_left" (formula "3") (term "0,0,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0,0"))
                           (rule "nnf_imp2or" (formula "1") (term "0,0,1,0"))
                           (rule "nnf_notAnd" (formula "13") (term "0,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0,0"))
                           (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0,0"))
                           (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0"))
                           (rule "nnf_notOr" (formula "1") (term "0,1,0"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "nnf_notAnd" (formula "13") (term "0,0,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "13") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "13") (term "0,0,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "13") (term "1,1,0,0,0,0,0"))
                           (rule "nnf_notAnd" (formula "13") (term "0,0,0,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,0,0,0,0"))
                           (rule "add_literals" (formula "13") (term "0,0,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0,0,0,0"))
                           (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0,0"))
                           (rule "lenNonNegative" (formula "11") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "11"))
                           (rule "applyEqRigid" (formula "11") (term "0") (ifseqformula "12"))
                           (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "18"))
                           (rule "leq_literals" (formula "11") (term "0"))
                           (builtin "One Step Simplification" (formula "11"))
                           (rule "true_left" (formula "11"))
                           (rule "lenNonNegative" (formula "11") (term "1"))
                           (rule "inEqSimp_commuteLeq" (formula "11"))
                           (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "18"))
                           (rule "leq_literals" (formula "11") (term "0"))
                           (builtin "One Step Simplification" (formula "11"))
                           (rule "true_left" (formula "11"))
                           (rule "commute_or_2" (formula "3") (term "0"))
                           (rule "lenNonNegative" (formula "10") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "10"))
                           (rule "applyEqRigid" (formula "10") (term "0") (ifseqformula "11"))
                           (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "18"))
                           (rule "leq_literals" (formula "10") (term "0"))
                           (builtin "One Step Simplification" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "seqGetAlphaCast" (formula "18") (term "0"))
                           (rule "castDel" (formula "18") (term "0"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "seqGetAlphaCast" (formula "18") (term "1"))
                           (rule "castDel" (formula "18") (term "0"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "cnf_rightDist" (formula "12") (term "0"))
                           (rule "distr_forallAnd" (formula "12"))
                           (rule "andLeft" (formula "12"))
                           (rule "seqGetAlphaCast" (formula "4") (term "0"))
                           (rule "castedGetAny" (formula "4") (term "0"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "commute_or" (formula "1") (term "0,0"))
                           (rule "seqGetAlphaCast" (formula "20") (term "1,1,2,0"))
                           (rule "castedGetAny" (formula "1") (term "0"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "commute_or_2" (formula "14") (term "0,0"))
                           (rule "commute_or" (formula "13") (term "0"))
                           (rule "commute_or_2" (formula "3") (term "0,0"))
                           (rule "inEqSimp_or_weaken0" (formula "3") (term "0,0,0"))
                           (rule "add_literals" (formula "3") (term "1,0,0,0,0"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch "f_s1.length >= 2 TRUE"
                              (rule "replace_known_left" (formula "1") (term "0,1,0,1,0,0") (ifseqformula "9"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "inEqSimp_homoInEq1" (formula "10"))
                              (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                              (rule "mul_literals" (formula "10") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "10") (term "0"))
                              (rule "polySimp_addComm1" (formula "10") (term "0,0"))
                              (rule "add_literals" (formula "10") (term "0,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "10"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                              (rule "polySimp_elimOne" (formula "10") (term "0"))
                              (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "9"))
                              (rule "leq_literals" (formula "18") (term "0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "true_left" (formula "18"))
                              (rule "seqGetAlphaCast" (formula "6") (term "0"))
                              (rule "castedGetAny" (formula "6") (term "0"))
                              (builtin "One Step Simplification" (formula "6"))
                              (rule "true_left" (formula "6"))
                              (rule "ifthenelse_to_or_left2" (formula "1") (term "1,0,1,0"))
                              (rule "eqSymm" (formula "1") (term "0,1,1,1,0,1,0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "nnf_notOr" (formula "1") (term "1,1,1,0,1,0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "nnf_notAnd" (formula "1") (term "0,0,1,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0,1,0,1,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0,0,0,0,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "1") (term "1,0,0,0,1,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,1,0,1,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,1,0,0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,0,1,0"))
                              (rule "cnf_rightDist" (formula "1") (term "1,1,0,1,0"))
                              (rule "cnf_rightDist" (formula "1") (term "1,1,1,0,1,0"))
                              (rule "commute_or" (formula "1") (term "1,1,1,1,0,1,0"))
                              (rule "cnf_rightDist" (formula "1") (term "0,1,1,0,1,0"))
                              (rule "commute_or" (formula "1") (term "0,0,1,1,0,1,0"))
                              (rule "allLeft" (formula "12") (inst "t=Z(0(#))"))
                              (rule "leq_literals" (formula "12") (term "0,0"))
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "inEqSimp_commuteGeq" (formula "12") (term "0"))
                              (rule "inEqSimp_contradInEq0" (formula "12") (term "1") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "12") (term "0,1"))
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "inEqSimp_contradInEq1" (formula "12") (ifseqformula "9"))
                              (rule "qeq_literals" (formula "12") (term "0"))
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                           (branch "f_s1.length >= 2 FALSE"
                              (rule "replace_known_right" (formula "1") (term "0,1,0,1,0,0") (ifseqformula "20"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "inEqSimp_geqRight" (formula "20"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "10"))
                              (rule "mul_literals" (formula "10") (term "1,0"))
                              (rule "add_zero_right" (formula "10") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "10"))
                              (rule "mul_literals" (formula "10") (term "1"))
                              (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "9") (term "0"))
                              (builtin "One Step Simplification" (formula "9"))
                              (rule "closeFalse" (formula "9"))
                           )
                        )
                        (branch "(int)s_1[iv_34 + 0 + 1] = 0 FALSE"
                           (rule "polySimp_addLiterals" (formula "15") (term "1,0,1"))
                           (rule "polySimp_addLiterals" (formula "14") (term "1,0"))
                           (rule "andLeft" (formula "1"))
                           (rule "eqSymm" (formula "17") (term "1,0,1,0"))
                           (rule "eqSymm" (formula "10") (term "1,0"))
                           (rule "eqSymm" (formula "13"))
                           (rule "eqSymm" (formula "6"))
                           (rule "polySimp_elimSub" (formula "5") (term "1,2,0,1"))
                           (rule "mul_literals" (formula "5") (term "1,1,2,0,1"))
                           (rule "polySimp_elimSub" (formula "5") (term "1,0,1"))
                           (rule "mul_literals" (formula "5") (term "1,1,0,1"))
                           (rule "polySimp_elimSub" (formula "16") (term "1,0"))
                           (rule "mul_literals" (formula "16") (term "1,1,0"))
                           (rule "polySimp_elimSub" (formula "5") (term "2,2,0,1"))
                           (rule "mul_literals" (formula "5") (term "1,2,2,0,1"))
                           (rule "polySimp_elimSub" (formula "16") (term "1,2,0"))
                           (rule "mul_literals" (formula "16") (term "1,1,2,0"))
                           (rule "polySimp_elimSub" (formula "16") (term "2,2,0"))
                           (rule "mul_literals" (formula "16") (term "1,2,2,0"))
                           (rule "polySimp_elimSub" (formula "15") (term "1"))
                           (rule "mul_literals" (formula "15") (term "1,1"))
                           (rule "polySimp_elimSub" (formula "1") (term "0,1"))
                           (rule "mul_literals" (formula "1") (term "1,0,1"))
                           (rule "polySimp_elimSub" (formula "1") (term "1"))
                           (rule "mul_literals" (formula "1") (term "1,1"))
                           (rule "polySimp_addLiterals" (formula "1") (term "1"))
                           (rule "polySimp_addComm0" (formula "16") (term "1,0,0,2,0"))
                           (rule "polySimp_addComm0" (formula "5") (term "1,0,0,2,0,1"))
                           (rule "polySimp_addComm0" (formula "14") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "5") (term "1,2,0,1"))
                           (rule "polySimp_addComm0" (formula "5") (term "1,0,1"))
                           (rule "polySimp_addComm0" (formula "16") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "5") (term "1,0,2,2,0,1"))
                           (rule "polySimp_addComm0" (formula "16") (term "1,2,0"))
                           (rule "polySimp_addComm0" (formula "16") (term "1,0,2,2,0"))
                           (rule "polySimp_addComm0" (formula "15") (term "1,0,1"))
                           (rule "polySimp_addComm0" (formula "1") (term "1"))
                           (rule "polySimp_addComm0" (formula "5") (term "2,2,0,1"))
                           (rule "polySimp_addComm0" (formula "16") (term "2,2,0"))
                           (rule "polySimp_addComm0" (formula "15") (term "1"))
                           (rule "lenOfSeqSub" (formula "17") (term "1,0,0,0"))
                           (rule "polySimp_elimSub" (formula "17") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "17") (term "1,1,1,0,0,0"))
                           (rule "polySimp_addComm0" (formula "17") (term "1,1,0,0,0"))
                           (rule "inEqSimp_gtToGeq" (formula "12"))
                           (rule "mul_literals" (formula "12") (term "1,0,0"))
                           (rule "add_zero_right" (formula "12") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,1,0"))
                           (rule "polySimp_addComm1" (formula "17") (term "0,1,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "8") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                           (rule "lenOfSeqDef" (formula "5") (term "1"))
                           (rule "polySimp_elimSub" (formula "5") (term "1,1"))
                           (rule "mul_literals" (formula "5") (term "1,1,1"))
                           (rule "add_zero_right" (formula "5") (term "1,1"))
                           (rule "inEqSimp_leqRight" (formula "15"))
                           (rule "add_zero_right" (formula "1") (term "0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "2"))
                           (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
                           (rule "mul_literals" (formula "2") (term "0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "5"))
                           (rule "inEqSimp_commuteLeq" (formula "3"))
                           (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "9") (term "0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "17") (term "0,1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "17") (term "0,0,1,0,0,0"))
                           (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                           (rule "add_literals" (formula "2") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "6") (term "0,1"))
                           (rule "add_zero_right" (formula "6") (term "0,0,1"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1"))
                           (rule "mul_literals" (formula "6") (term "0,1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "6") (term "0,0,1"))
                           (rule "add_literals" (formula "6") (term "0,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "6"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "6") (term "0"))
                           (rule "applyEq" (formula "16") (term "1,1,0") (ifseqformula "8"))
                           (rule "applyEq" (formula "17") (term "2,0,0,1,0,1,0") (ifseqformula "7"))
                           (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "8"))
                           (rule "applyEqRigid" (formula "6") (term "0,1,0,0,0,1,0") (ifseqformula "8"))
                           (rule "applyEqRigid" (formula "6") (term "1,1,0,1,0") (ifseqformula "8"))
                           (rule "applyEqRigid" (formula "4") (term "0,1,0,0") (ifseqformula "8"))
                           (rule "applyEqRigid" (formula "9") (term "0,1,0,0,1,0,0") (ifseqformula "8"))
                           (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "8"))
                           (rule "applyEqRigid" (formula "9") (term "0,1,0,0,1,1,0") (ifseqformula "8"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                           (rule "mul_literals" (formula "13") (term "1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "17") (term "0,1,0,0,1,0"))
                           (rule "inEqSimp_invertInEq1" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "17") (term "0,0,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "17") (term "0,0,1,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "6") (term "0,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1"))
                           (rule "polySimp_rightDist" (formula "4") (term "1"))
                           (rule "mul_literals" (formula "4") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,1,1,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,1,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,1,1,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,1,1,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                           (rule "polySimp_elimOne" (formula "6") (term "0"))
                           (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "15"))
                           (rule "add_literals" (formula "1") (term "1"))
                           (rule "inEqSimp_contradEq3" (formula "15") (ifseqformula "1"))
                           (rule "mul_literals" (formula "15") (term "1,0,0"))
                           (rule "add_zero_right" (formula "15") (term "0,0"))
                           (rule "qeq_literals" (formula "15") (term "0"))
                           (builtin "One Step Simplification" (formula "15"))
                           (rule "false_right" (formula "15"))
                           (rule "getOfSeqSub" (formula "16") (term "1,1,0,1,0"))
                           (rule "castDel" (formula "16") (term "2,1,1,0,1,0"))
                           (rule "polySimp_elimSub" (formula "16") (term "1,1,0,1,1,0,1,0"))
                           (rule "mul_literals" (formula "16") (term "1,1,1,0,1,1,0,1,0"))
                           (rule "polySimp_addComm0" (formula "16") (term "1,1,1,1,0,1,0"))
                           (rule "polySimp_addComm0" (formula "16") (term "1,1,0,1,1,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,1,1,0,1,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,1,1,0,1,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,1,1,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,1,1,0,1,0"))
                           (rule "add_literals" (formula "16") (term "0,0,0,1,0,1,1,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,1,1,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,1,1,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,1,1,0,1,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,1,0,1,1,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,1,1,0,1,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,1,0,1,1,0,1,0"))
                           (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,1,1,0,1,0"))
                           (rule "getOfSeqSub" (formula "16") (term "0,1,0,1,0"))
                           (rule "castDel" (formula "16") (term "2,0,1,0,1,0"))
                           (rule "polySimp_elimSub" (formula "16") (term "1,1,0,0,1,0,1,0"))
                           (rule "mul_literals" (formula "16") (term "1,1,1,0,0,1,0,1,0"))
                           (rule "polySimp_addComm0" (formula "16") (term "1,1,0,1,0,1,0"))
                           (rule "polySimp_addComm0" (formula "16") (term "1,1,0,0,1,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,1,0,1,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0,1,0,1,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0,1,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,1,0,1,0"))
                           (rule "add_literals" (formula "16") (term "0,0,0,1,0,0,1,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,1,0,1,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,1,0,1,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,1,0,0,1,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,1,0,1,0"))
                           (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,1,0,1,0"))
                           (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "4"))
                           (rule "times_zero_1" (formula "3") (term "0,0"))
                           (rule "add_zero_left" (formula "3") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                           (rule "mul_literals" (formula "3") (term "1"))
                           (rule "nnf_ex2all" (formula "16"))
                           (rule "nnf_imp2or" (formula "12") (term "0"))
                           (rule "nnf_imp2or" (formula "10") (term "0"))
                           (rule "nnf_notAnd" (formula "1") (term "0"))
                           (rule "nnf_notAnd" (formula "12") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                           (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "12") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "10") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
                           (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "10") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                           (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "1") (term "0,0"))
                           (rule "nnf_notAll" (formula "1") (term "1,0"))
                           (rule "nnf_imp2or" (formula "1") (term "0,0,1,0"))
                           (rule "nnf_notOr" (formula "1") (term "0,1,0"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "commute_or" (formula "1") (term "0,0"))
                           (rule "cnf_rightDist" (formula "10") (term "0"))
                           (rule "distr_forallAnd" (formula "10"))
                           (rule "andLeft" (formula "10"))
                           (rule "commute_or" (formula "11") (term "0"))
                           (rule "lenNonNegative" (formula "9") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "9"))
                           (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                           (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "16"))
                           (rule "leq_literals" (formula "9") (term "0"))
                           (builtin "One Step Simplification" (formula "9"))
                           (rule "true_left" (formula "9"))
                           (rule "lenNonNegative" (formula "9") (term "1"))
                           (rule "inEqSimp_commuteLeq" (formula "9"))
                           (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "16"))
                           (rule "leq_literals" (formula "9") (term "0"))
                           (builtin "One Step Simplification" (formula "9"))
                           (rule "true_left" (formula "9"))
                           (rule "seqGetAlphaCast" (formula "16") (term "1"))
                           (rule "castDel" (formula "16") (term "0"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "true_left" (formula "16"))
                           (rule "seqGetAlphaCast" (formula "16") (term "0"))
                           (rule "castDel" (formula "16") (term "0"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "true_left" (formula "16"))
                           (rule "lenNonNegative" (formula "8") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "8"))
                           (rule "applyEq" (formula "8") (term "0") (ifseqformula "9"))
                           (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "16"))
                           (rule "leq_literals" (formula "8") (term "0"))
                           (builtin "One Step Simplification" (formula "8"))
                           (rule "true_left" (formula "8"))
                           (rule "ifthenelse_split" (formula "7") (term "0"))
                           (branch "f_s1.length >= 2 TRUE"
                              (rule "replace_known_left" (formula "1") (term "0,1,0,1,0,0") (ifseqformula "7"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "inEqSimp_homoInEq1" (formula "8"))
                              (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "8") (term "1,0"))
                              (rule "mul_literals" (formula "8") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "8") (term "0"))
                              (rule "polySimp_addComm1" (formula "8") (term "0,0"))
                              (rule "add_literals" (formula "8") (term "0,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "8"))
                              (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                              (rule "polySimp_elimOne" (formula "8") (term "0"))
                              (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "7"))
                              (rule "leq_literals" (formula "15") (term "0"))
                              (builtin "One Step Simplification" (formula "15"))
                              (rule "true_left" (formula "15"))
                              (rule "seqGetAlphaCast" (formula "16") (term "1,1,2,0"))
                              (rule "castedGetAny" (formula "1") (term "0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "seqGetAlphaCast" (formula "4") (term "0"))
                              (rule "castedGetAny" (formula "4") (term "0"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "true_left" (formula "4"))
                              (rule "ifthenelse_to_or_left2" (formula "1") (term "1,0,1,0"))
                              (rule "eqSymm" (formula "1") (term "0,1,1,1,0,1,0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "nnf_notAnd" (formula "1") (term "0,0,1,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,1,0,1,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,1,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,1,0,1,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0,1,0,1,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,0,0,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "1") (term "1,0,0,0,1,0,1,0"))
                              (rule "nnf_notOr" (formula "1") (term "1,1,1,0,1,0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "cnf_rightDist" (formula "1") (term "1,1,0,1,0"))
                              (rule "cnf_rightDist" (formula "1") (term "1,1,1,0,1,0"))
                              (rule "commute_or" (formula "1") (term "1,1,1,1,0,1,0"))
                              (rule "allLeft" (formula "10") (inst "t=add(Z(1(#)), iv_34)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "inEqSimp_homoInEq0" (formula "10") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "10") (term "0,0,0"))
                              (rule "add_literals" (formula "10") (term "0,0,0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "10") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0"))
                              (rule "polySimp_elimOne" (formula "10") (term "0,0,0"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "0,0") (ifseqformula "6"))
                              (rule "qeq_literals" (formula "10") (term "0,0,0"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "3"))
                              (rule "inEqSimp_homoInEq1" (formula "10") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "10") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "10") (term "0,0,0,0"))
                              (rule "add_literals" (formula "10") (term "0,0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,0"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0,0"))
                              (rule "add_literals" (formula "10") (term "0,0,0"))
                              (rule "leq_literals" (formula "10") (term "0,0"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "2") (term "0"))
                              (builtin "One Step Simplification" (formula "2"))
                              (rule "closeFalse" (formula "2"))
                           )
                           (branch "f_s1.length >= 2 FALSE"
                              (rule "replace_known_right" (formula "1") (term "0,1,0,1,0,0") (ifseqformula "17"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "inEqSimp_geqRight" (formula "17"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "8"))
                              (rule "mul_literals" (formula "8") (term "1,0"))
                              (rule "add_zero_right" (formula "8") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "8"))
                              (rule "mul_literals" (formula "8") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "8") (ifseqformula "7"))
                              (rule "qeq_literals" (formula "8") (term "0"))
                              (builtin "One Step Simplification" (formula "8"))
                              (rule "closeFalse" (formula "8"))
                           )
                        )
                     )
                     (branch "0 <= iv_34 & iv_34 < s_1.length - 1 - 0 FALSE"
                        (rule "eqSymm" (formula "5"))
                        (rule "eqSymm" (formula "9") (term "1,0"))
                        (rule "eqSymm" (formula "12"))
                        (rule "eqSymm" (formula "16") (term "1,0,1,0"))
                        (rule "replace_known_left" (formula "13") (term "0") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "13"))
                        (rule "polySimp_elimSub" (formula "15") (term "1,0"))
                        (rule "mul_literals" (formula "15") (term "1,1,0"))
                        (rule "polySimp_elimSub" (formula "4") (term "1,2,0,1"))
                        (rule "mul_literals" (formula "4") (term "1,1,2,0,1"))
                        (rule "polySimp_elimSub" (formula "15") (term "1,2,0"))
                        (rule "mul_literals" (formula "15") (term "1,1,2,0"))
                        (rule "polySimp_elimSub" (formula "4") (term "1,0,1"))
                        (rule "mul_literals" (formula "4") (term "1,1,0,1"))
                        (rule "polySimp_elimSub" (formula "4") (term "2,2,0,1"))
                        (rule "mul_literals" (formula "4") (term "1,2,2,0,1"))
                        (rule "polySimp_elimSub" (formula "15") (term "2,2,0"))
                        (rule "mul_literals" (formula "15") (term "1,2,2,0"))
                        (rule "polySimp_elimSub" (formula "13") (term "1"))
                        (rule "mul_literals" (formula "13") (term "1,1"))
                        (rule "add_zero_right" (formula "13") (term "1"))
                        (rule "polySimp_elimSub" (formula "13") (term "1"))
                        (rule "mul_literals" (formula "13") (term "1,1"))
                        (rule "polySimp_addComm0" (formula "15") (term "1,0,0,2,0"))
                        (rule "polySimp_addComm0" (formula "4") (term "1,0,0,2,0,1"))
                        (rule "polySimp_addComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "4") (term "1,2,0,1"))
                        (rule "polySimp_addComm0" (formula "15") (term "1,2,0"))
                        (rule "polySimp_addComm0" (formula "4") (term "1,0,1"))
                        (rule "polySimp_addComm0" (formula "4") (term "1,0,2,2,0,1"))
                        (rule "polySimp_addComm0" (formula "15") (term "1,0,2,2,0"))
                        (rule "polySimp_addComm0" (formula "13") (term "1"))
                        (rule "polySimp_addComm0" (formula "4") (term "2,2,0,1"))
                        (rule "polySimp_addComm0" (formula "15") (term "2,2,0"))
                        (rule "lenOfSeqSub" (formula "16") (term "1,0,0,0"))
                        (rule "polySimp_elimSub" (formula "16") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "16") (term "1,1,1,0,0,0"))
                        (rule "polySimp_addComm0" (formula "16") (term "1,1,0,0,0"))
                        (rule "inEqSimp_leqRight" (formula "14"))
                        (rule "add_zero_right" (formula "1") (term "0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "8") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,1,0"))
                        (rule "inEqSimp_gtToGeq" (formula "12"))
                        (rule "mul_literals" (formula "12") (term "1,0,0"))
                        (rule "add_literals" (formula "12") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,1,0"))
                        (rule "polySimp_addComm1" (formula "16") (term "0,1,0,0,1,0"))
                        (rule "lenOfSeqDef" (formula "5") (term "1"))
                        (rule "polySimp_elimSub" (formula "5") (term "1,1"))
                        (rule "mul_literals" (formula "5") (term "1,1,1"))
                        (rule "add_zero_right" (formula "5") (term "1,1"))
                        (rule "inEqSimp_ltRight" (formula "14"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "16") (term "0,1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "16") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,1,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "5"))
                        (rule "inEqSimp_commuteLeq" (formula "9") (term "0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "3"))
                        (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "6") (term "0,1"))
                        (rule "add_zero_right" (formula "6") (term "0,0,1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "6") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,0,1"))
                        (rule "add_literals" (formula "6") (term "0,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "6"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "6") (term "0"))
                        (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "8"))
                        (rule "applyEqRigid" (formula "15") (term "1,1,0") (ifseqformula "8"))
                        (rule "applyEqRigid" (formula "16") (term "2,0,0,1,0,1,0") (ifseqformula "7"))
                        (rule "applyEq" (formula "6") (term "0,1,0,0,0,1,0") (ifseqformula "8"))
                        (rule "applyEq" (formula "6") (term "1,1,0,1,0") (ifseqformula "8"))
                        (rule "applyEqRigid" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "8"))
                        (rule "applyEqRigid" (formula "4") (term "0,1,0,0") (ifseqformula "8"))
                        (rule "applyEqRigid" (formula "9") (term "0,1,0,0,1,1,0") (ifseqformula "8"))
                        (rule "applyEq" (formula "9") (term "0,1,0,0,1,0,0") (ifseqformula "8"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                        (rule "mul_literals" (formula "13") (term "1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "16") (term "0,1,0,0,1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "0,0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "16") (term "0,0,1,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "6") (term "0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1"))
                        (rule "polySimp_rightDist" (formula "4") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                        (rule "mul_literals" (formula "4") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,1,1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,1,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,1,1,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,1,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                        (rule "polySimp_elimOne" (formula "6") (term "0"))
                        (rule "getOfSeqSub" (formula "16") (term "1,1,0,1,0"))
                        (rule "castDel" (formula "16") (term "2,1,1,0,1,0"))
                        (rule "polySimp_elimSub" (formula "16") (term "1,1,0,1,1,0,1,0"))
                        (rule "mul_literals" (formula "16") (term "1,1,1,0,1,1,0,1,0"))
                        (rule "polySimp_addComm0" (formula "16") (term "1,1,1,1,0,1,0"))
                        (rule "polySimp_addComm0" (formula "16") (term "1,1,0,1,1,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,1,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,1,1,0,1,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,1,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,1,1,0,1,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,1,0,1,1,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,1,1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,1,1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,1,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,1,0,1,1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,1,1,0,1,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,1,0,1,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,1,1,0,1,0"))
                        (rule "getOfSeqSub" (formula "16") (term "0,1,0,1,0"))
                        (rule "castDel" (formula "16") (term "2,0,1,0,1,0"))
                        (rule "polySimp_elimSub" (formula "16") (term "1,1,0,0,1,0,1,0"))
                        (rule "mul_literals" (formula "16") (term "1,1,1,0,0,1,0,1,0"))
                        (rule "polySimp_addComm0" (formula "16") (term "1,1,0,1,0,1,0"))
                        (rule "polySimp_addComm0" (formula "16") (term "1,1,0,0,1,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0,1,0,1,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,1,0,1,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,1,0,0,1,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,1,0,1,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,1,0,0,1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,1,0,1,0"))
                        (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "1"))
                        (rule "mul_literals" (formula "13") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0"))
                        (rule "add_literals" (formula "13") (term "0,0"))
                        (rule "add_zero_left" (formula "13") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "4"))
                        (rule "mul_literals" (formula "3") (term "0,0"))
                        (rule "add_zero_left" (formula "3") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                        (rule "mul_literals" (formula "3") (term "1"))
                        (rule "nnf_ex2all" (formula "16"))
                        (rule "nnf_imp2or" (formula "12") (term "0"))
                        (rule "nnf_imp2or" (formula "10") (term "0"))
                        (rule "nnf_notAnd" (formula "1") (term "0"))
                        (rule "nnf_notAnd" (formula "12") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                        (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0"))
                        (rule "add_literals" (formula "12") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                        (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "10") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
                        (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                        (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                        (rule "nnf_notAll" (formula "1") (term "1,0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0"))
                        (rule "nnf_imp2or" (formula "1") (term "0,0,1,0"))
                        (rule "nnf_notOr" (formula "1") (term "0,1,0"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "commute_or" (formula "1") (term "0,0"))
                        (rule "cnf_rightDist" (formula "10") (term "0"))
                        (rule "distr_forallAnd" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "commute_or" (formula "11") (term "0"))
                        (rule "lenNonNegative" (formula "9") (term "1"))
                        (rule "inEqSimp_commuteLeq" (formula "9"))
                        (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "16"))
                        (rule "leq_literals" (formula "9") (term "0"))
                        (builtin "One Step Simplification" (formula "9"))
                        (rule "true_left" (formula "9"))
                        (rule "lenNonNegative" (formula "9") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "9"))
                        (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "10"))
                        (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "16"))
                        (rule "leq_literals" (formula "9") (term "0"))
                        (builtin "One Step Simplification" (formula "9"))
                        (rule "true_left" (formula "9"))
                        (rule "lenNonNegative" (formula "8") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "8"))
                        (rule "applyEqRigid" (formula "8") (term "0") (ifseqformula "9"))
                        (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "16"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (builtin "One Step Simplification" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "seqGetAlphaCast" (formula "16") (term "1"))
                        (rule "castDel" (formula "16") (term "0"))
                        (builtin "One Step Simplification" (formula "16"))
                        (rule "true_left" (formula "16"))
                        (rule "seqGetAlphaCast" (formula "16") (term "0"))
                        (rule "castDel" (formula "16") (term "0"))
                        (builtin "One Step Simplification" (formula "16"))
                        (rule "true_left" (formula "16"))
                        (rule "ifthenelse_split" (formula "7") (term "0"))
                        (branch "f_s1.length >= 2 TRUE"
                           (rule "replace_known_left" (formula "1") (term "0,1,0,1,0,0") (ifseqformula "7"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "8"))
                           (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "8") (term "1,0"))
                           (rule "mul_literals" (formula "8") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "8") (term "0"))
                           (rule "polySimp_addComm1" (formula "8") (term "0,0"))
                           (rule "add_literals" (formula "8") (term "0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "8"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                           (rule "polySimp_elimOne" (formula "8") (term "0"))
                           (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "8"))
                           (rule "andLeft" (formula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                           (rule "mul_literals" (formula "2") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "2") (term "0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                           (rule "add_literals" (formula "2") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                           (rule "add_literals" (formula "2") (term "1,1,0"))
                           (rule "times_zero_1" (formula "2") (term "1,0"))
                           (rule "add_zero_right" (formula "2") (term "0"))
                           (rule "leq_literals" (formula "2"))
                           (rule "closeFalse" (formula "2"))
                        )
                        (branch "f_s1.length >= 2 FALSE"
                           (rule "replace_known_right" (formula "1") (term "0,1,0,1,0,0") (ifseqformula "17"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "inEqSimp_geqRight" (formula "17"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "8"))
                           (rule "mul_literals" (formula "8") (term "1,0"))
                           (rule "add_zero_right" (formula "8") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "8"))
                           (rule "mul_literals" (formula "8") (term "1"))
                           (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "8"))
                           (rule "qeq_literals" (formula "7") (term "0"))
                           (builtin "One Step Simplification" (formula "7"))
                           (rule "closeFalse" (formula "7"))
                        )
                     )
                  )
                  (branch
                     (rule "eqSymm" (formula "9") (term "1,0"))
                     (rule "eqSymm" (formula "5"))
                     (rule "eqSymm" (formula "12"))
                     (rule "eqSymm" (formula "15") (term "1,0,1,0"))
                     (rule "polySimp_elimSub" (formula "13") (term "1,2,0,0"))
                     (rule "mul_literals" (formula "13") (term "1,1,2,0,0"))
                     (rule "polySimp_elimSub" (formula "13") (term "2,2,0,0"))
                     (rule "mul_literals" (formula "13") (term "1,2,2,0,0"))
                     (rule "polySimp_elimSub" (formula "14") (term "1,0"))
                     (rule "mul_literals" (formula "14") (term "1,1,0"))
                     (rule "polySimp_elimSub" (formula "4") (term "1,0,1"))
                     (rule "mul_literals" (formula "4") (term "1,1,0,1"))
                     (rule "polySimp_elimSub" (formula "14") (term "1,2,0"))
                     (rule "mul_literals" (formula "14") (term "1,1,2,0"))
                     (rule "polySimp_elimSub" (formula "4") (term "1,2,0,1"))
                     (rule "mul_literals" (formula "4") (term "1,1,2,0,1"))
                     (rule "polySimp_elimSub" (formula "14") (term "2,2,0"))
                     (rule "mul_literals" (formula "14") (term "1,2,2,0"))
                     (rule "polySimp_elimSub" (formula "13") (term "1,2,0,1"))
                     (rule "mul_literals" (formula "13") (term "1,1,2,0,1"))
                     (rule "polySimp_elimSub" (formula "4") (term "2,2,0,1"))
                     (rule "mul_literals" (formula "4") (term "1,2,2,0,1"))
                     (rule "polySimp_elimSub" (formula "13") (term "1,0,1"))
                     (rule "mul_literals" (formula "13") (term "1,1,0,1"))
                     (rule "polySimp_elimSub" (formula "13") (term "2,2,0,1"))
                     (rule "mul_literals" (formula "13") (term "1,2,2,0,1"))
                     (rule "polySimp_elimSub" (formula "13") (term "1,0,0"))
                     (rule "mul_literals" (formula "13") (term "1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "13") (term "1,0,0,2,0,0"))
                     (rule "polySimp_addComm0" (formula "13") (term "1,0,0,2,0,1"))
                     (rule "polySimp_addComm0" (formula "14") (term "1,0,0,2,0"))
                     (rule "polySimp_addComm0" (formula "4") (term "1,0,0,2,0,1"))
                     (rule "polySimp_addComm0" (formula "13") (term "1,2,0,0"))
                     (rule "polySimp_addComm0" (formula "13") (term "1,0,2,2,0,0"))
                     (rule "polySimp_addComm0" (formula "14") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "4") (term "1,0,1"))
                     (rule "polySimp_addComm0" (formula "14") (term "1,2,0"))
                     (rule "polySimp_addComm0" (formula "4") (term "1,2,0,1"))
                     (rule "polySimp_addComm0" (formula "14") (term "1,0,2,2,0"))
                     (rule "polySimp_addComm0" (formula "13") (term "1,2,0,1"))
                     (rule "polySimp_addComm0" (formula "4") (term "1,0,2,2,0,1"))
                     (rule "polySimp_addComm0" (formula "13") (term "1,0,1"))
                     (rule "polySimp_addComm0" (formula "13") (term "1,0,2,2,0,1"))
                     (rule "polySimp_addComm0" (formula "13") (term "1,0,0"))
                     (rule "polySimp_addComm0" (formula "13") (term "2,2,0,0"))
                     (rule "polySimp_addComm0" (formula "14") (term "2,2,0"))
                     (rule "polySimp_addComm0" (formula "4") (term "2,2,0,1"))
                     (rule "polySimp_addComm0" (formula "13") (term "2,2,0,1"))
                     (rule "lenOfSeqSub" (formula "15") (term "1,0,0,0"))
                     (rule "polySimp_elimSub" (formula "15") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "15") (term "1,1,1,0,0,0"))
                     (rule "polySimp_addComm0" (formula "15") (term "1,1,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "7") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,1,0"))
                     (rule "inEqSimp_gtToGeq" (formula "11"))
                     (rule "mul_literals" (formula "11") (term "1,0,0"))
                     (rule "add_literals" (formula "11") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,0"))
                     (rule "polySimp_addComm1" (formula "15") (term "0,1,0,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                     (rule "getOfSeqDef" (formula "13") (term "0"))
                     (rule "castDel" (formula "13") (term "1,0"))
                     (rule "add_zero_right" (formula "13") (term "1,1,0,0,1,0"))
                     (rule "add_zero_right" (formula "13") (term "1,1,1,2,1,0"))
                     (rule "replace_known_left" (formula "13") (term "0,0,0") (ifseqformula "3"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "polySimp_elimSub" (formula "13") (term "1,0,0"))
                     (rule "times_zero_2" (formula "13") (term "1,1,0,0"))
                     (rule "add_zero_right" (formula "13") (term "1,0,0"))
                     (rule "lenOfSeqDef" (formula "4") (term "1"))
                     (rule "polySimp_elimSub" (formula "4") (term "1,1"))
                     (rule "times_zero_2" (formula "4") (term "1,1,1"))
                     (rule "add_zero_right" (formula "4") (term "1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "7") (term "0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "3"))
                     (rule "inEqSimp_commuteLeq" (formula "1"))
                     (rule "inEqSimp_ltToLeq" (formula "15") (term "0,1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "15") (term "0,0,1,0,0,0"))
                     (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,0"))
                     (rule "lenOfSeqDef" (formula "13") (term "1"))
                     (rule "polySimp_elimSub" (formula "13") (term "1,1"))
                     (rule "mul_literals" (formula "13") (term "1,1,1"))
                     (rule "add_zero_right" (formula "13") (term "1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0"))
                     (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0"))
                     (rule "add_literals" (formula "13") (term "0,0,0,0,0"))
                     (rule "polySimp_addComm1" (formula "13") (term "0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "4") (term "0,1"))
                     (rule "add_zero_right" (formula "4") (term "0,0,1"))
                     (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1"))
                     (rule "mul_literals" (formula "4") (term "0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "4") (term "0,0,1"))
                     (rule "add_literals" (formula "4") (term "0,0,0,1"))
                     (rule "inEqSimp_ltRight" (formula "13"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "5"))
                     (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "5") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,1,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0,0,1,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,0,0,0"))
                     (rule "applyEq" (formula "1") (term "0,1,0,0,1,0") (ifseqformula "7"))
                     (rule "polySimp_addComm0" (formula "1") (term "0"))
                     (rule "applyEqRigid" (formula "5") (term "0,1,0,0,0,1,0") (ifseqformula "7"))
                     (rule "applyEqRigid" (formula "5") (term "1,1,0,1,0") (ifseqformula "7"))
                     (rule "applyEqRigid" (formula "14") (term "1,1,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "15") (term "2,0,0,1,0,1,0") (ifseqformula "6"))
                     (rule "applyEq" (formula "10") (term "0,1,0,0,1,0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "3") (term "0,1,0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "8") (term "0,1,0,0,1,1,0") (ifseqformula "7"))
                     (rule "applyEqRigid" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "7"))
                     (rule "applyEqRigid" (formula "1") (term "1,1,0,1,0") (ifseqformula "7"))
                     (rule "applyEqRigid" (formula "1") (term "0,1,0,0,0,1,0") (ifseqformula "7"))
                     (rule "polySimp_addComm0" (formula "1") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                     (rule "mul_literals" (formula "12") (term "1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "0,1,0,0,1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "0,0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "0,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "5") (term "0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1"))
                     (rule "polySimp_rightDist" (formula "3") (term "1"))
                     (rule "mul_literals" (formula "3") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,1,1,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,1,0"))
                     (rule "mul_literals" (formula "8") (term "0,1,1,1,0"))
                     (rule "polySimp_elimOne" (formula "8") (term "1,1,1,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0,0,1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                     (rule "polySimp_elimOne" (formula "5") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1"))
                     (rule "getOfSeqSub" (formula "15") (term "1,1,0,1,0"))
                     (rule "castDel" (formula "15") (term "2,1,1,0,1,0"))
                     (rule "polySimp_elimSub" (formula "15") (term "1,1,0,1,1,0,1,0"))
                     (rule "mul_literals" (formula "15") (term "1,1,1,0,1,1,0,1,0"))
                     (rule "polySimp_addComm0" (formula "15") (term "1,1,1,1,0,1,0"))
                     (rule "polySimp_addComm0" (formula "15") (term "1,1,0,1,1,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,1,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,1,1,0,1,0"))
                     (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,1,1,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,1,1,0,1,0"))
                     (rule "add_literals" (formula "15") (term "0,0,0,1,0,1,1,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,1,1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,1,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,1,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "15") (term "1,1,0,1,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,1,1,0,1,0"))
                     (rule "mul_literals" (formula "15") (term "0,1,1,0,1,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,1,1,0,1,0"))
                     (rule "getOfSeqSub" (formula "15") (term "0,1,0,1,0"))
                     (rule "castDel" (formula "15") (term "2,0,1,0,1,0"))
                     (rule "polySimp_elimSub" (formula "15") (term "1,1,0,0,1,0,1,0"))
                     (rule "mul_literals" (formula "15") (term "1,1,1,0,0,1,0,1,0"))
                     (rule "polySimp_addComm0" (formula "15") (term "1,1,0,1,0,1,0"))
                     (rule "polySimp_addComm0" (formula "15") (term "1,1,0,0,1,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,1,0,1,0"))
                     (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,1,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,1,0,1,0"))
                     (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,1,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,0,1,0"))
                     (rule "mul_literals" (formula "15") (term "0,1,1,0,0,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,0,1,0"))
                     (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
                     (rule "mul_literals" (formula "2") (term "0,0"))
                     (rule "add_zero_left" (formula "2") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                     (rule "mul_literals" (formula "2") (term "1"))
                     (rule "nnf_imp2or" (formula "10") (term "0"))
                     (rule "nnf_ex2all" (formula "15"))
                     (rule "nnf_imp2or" (formula "9") (term "0"))
                     (rule "nnf_notAnd" (formula "1") (term "0"))
                     (rule "nnf_notAnd" (formula "11") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
                     (rule "add_literals" (formula "11") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "9") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
                     (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0"))
                     (rule "add_literals" (formula "9") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                     (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "1") (term "0,0"))
                     (rule "nnf_notAll" (formula "1") (term "1,0"))
                     (rule "nnf_imp2or" (formula "1") (term "0,0,1,0"))
                     (rule "nnf_notOr" (formula "1") (term "0,1,0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "commute_or" (formula "1") (term "0,0"))
                     (rule "cnf_rightDist" (formula "9") (term "0"))
                     (rule "distr_forallAnd" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "commute_or" (formula "10") (term "0"))
                     (rule "lenNonNegative" (formula "8") (term "1"))
                     (rule "inEqSimp_commuteLeq" (formula "8"))
                     (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "15"))
                     (rule "leq_literals" (formula "8") (term "0"))
                     (builtin "One Step Simplification" (formula "8"))
                     (rule "true_left" (formula "8"))
                     (rule "lenNonNegative" (formula "8") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "8"))
                     (rule "applyEq" (formula "8") (term "0") (ifseqformula "9"))
                     (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "15"))
                     (rule "leq_literals" (formula "8") (term "0"))
                     (builtin "One Step Simplification" (formula "8"))
                     (rule "true_left" (formula "8"))
                     (rule "lenNonNegative" (formula "7") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "7"))
                     (rule "applyEq" (formula "7") (term "0") (ifseqformula "8"))
                     (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "15"))
                     (rule "leq_literals" (formula "7") (term "0"))
                     (builtin "One Step Simplification" (formula "7"))
                     (rule "true_left" (formula "7"))
                     (rule "seqGetAlphaCast" (formula "15") (term "1"))
                     (rule "castDel" (formula "15") (term "0"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "true_left" (formula "15"))
                     (rule "seqGetAlphaCast" (formula "15") (term "0"))
                     (rule "castDel" (formula "15") (term "0"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "true_left" (formula "15"))
                     (rule "seqGetAlphaCast" (formula "16") (term "1,1,2,0"))
                     (rule "castedGetAny" (formula "1") (term "0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "ifthenelse_split" (formula "6") (term "0"))
                     (branch "f_s1.length >= 2 TRUE"
                        (rule "replace_known_left" (formula "2") (term "0,1") (ifseqformula "6"))
                        (builtin "One Step Simplification" (formula "2"))
                        (rule "replace_known_left" (formula "1") (term "0,1,0,1,0,0") (ifseqformula "6"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "7"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                        (rule "mul_literals" (formula "7") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0"))
                        (rule "add_literals" (formula "7") (term "0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                        (rule "polySimp_elimOne" (formula "7") (term "0"))
                        (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "7"))
                        (builtin "One Step Simplification" (formula "2"))
                        (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "6"))
                        (rule "leq_literals" (formula "15") (term "0"))
                        (builtin "One Step Simplification" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "seqGetAlphaCast" (formula "3") (term "0"))
                        (rule "castedGetAny" (formula "3") (term "0"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "ifthenelse_to_or_right2" (formula "1") (term "1,0,1,0"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0,1,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,1,0,1,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,1,0,1,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,0,1,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,1,0,0,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,1,0,1,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0,1,0,1,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0,0,1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,1,0,1,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0,1,0,1,0"))
                        (rule "nnf_notOr" (formula "1") (term "1,1,1,0,1,0"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "cnf_rightDist" (formula "1") (term "1,1,0,1,0"))
                        (rule "cnf_rightDist" (formula "1") (term "1,1,1,0,1,0"))
                        (rule "commute_or" (formula "1") (term "0,1,1,1,0,1,0"))
                        (rule "cnf_rightDist" (formula "1") (term "0,1,1,0,1,0"))
                        (rule "commute_or" (formula "1") (term "0,0,1,1,0,1,0"))
                        (rule "ifthenelse_split" (formula "2") (term "0"))
                        (branch "(int)s_1[1 + iv_34] = 0 TRUE"
                           (rule "inEqSimp_homoInEq1" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                           (rule "add_literals" (formula "3") (term "0,0,0"))
                           (rule "add_zero_left" (formula "3") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                           (rule "polySimp_elimOne" (formula "3") (term "0"))
                           (rule "cnf_rightDist" (formula "1") (term "1,0,1,1,0,1,0"))
                           (rule "commute_or" (formula "1") (term "0,1,0,1,1,0,1,0"))
                           (rule "cnf_rightDist" (formula "1") (term "0,0,1,1,0,1,0"))
                           (rule "commute_or" (formula "1") (term "0,0,0,1,1,0,1,0"))
                           (rule "ifthenelse_to_or_left2" (formula "1") (term "1,0,1,0,1,0"))
                           (rule "eqSymm" (formula "1") (term "0,1,1,1,0,1,0,1,0"))
                           (rule "nnf_notAnd" (formula "1") (term "0,0,1,0,1,0,1,0"))
                           (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,1,0,1,0,1,0"))
                           (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0,1,0,1,0,1,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0,0,1,0,1,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,1,0,1,0,1,0"))
                           (rule "mul_literals" (formula "1") (term "1,0,0,0,1,0,1,0,1,0"))
                           (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,1,0,1,0,1,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,1,0,1,0,1,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,1,0,1,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,1,0,1,0,1,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,1,0,1,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,1,0,1,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,0,1,0,1,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,0,1,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,0,1,0,1,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,1,0,0,1,0,1,0,1,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,0,1,0,1,0"))
                           (rule "commute_or" (formula "1") (term "1,1,0,1,0,1,0"))
                           (rule "cnf_rightDist" (formula "1") (term "1,1,0,1,0,1,0"))
                           (rule "cnf_rightDist" (formula "1") (term "0,1,0,1,0"))
                           (rule "commute_or" (formula "1") (term "1,0,1,0,1,0"))
                           (rule "shift_paren_or" (formula "1") (term "0,0,1,0,1,0"))
                           (rule "commute_or" (formula "1") (term "1,1,1,0,1,0,1,0"))
                           (rule "shift_paren_or" (formula "1") (term "0,0,0,1,0,1,0"))
                           (rule "cnf_rightDist" (formula "1") (term "1,0,1,0,1,0"))
                           (rule "commute_or_2" (formula "1") (term "1,1,0,1,0,1,0"))
                           (rule "shift_paren_or" (formula "1") (term "0,1,0,1,0,1,0"))
                           (rule "commute_or" (formula "1") (term "0,1,1,0,1,0,1,0"))
                           (rule "shift_paren_and" (formula "1") (term "0,1,1,0,1,0"))
                           (rule "shift_paren_and" (formula "1") (term "0,1,0,1,0"))
                           (rule "shift_paren_and" (formula "1") (term "1,1,0,1,0"))
                           (rule "shift_paren_and" (formula "1") (term "1,0,1,0"))
                           (rule "shift_paren_and" (formula "1") (term "0,1,0,1,0"))
                           (rule "allLeft" (formula "12") (inst "t=Z(0(#))"))
                           (rule "leq_literals" (formula "12") (term "0,0"))
                           (builtin "One Step Simplification" (formula "12"))
                           (rule "inEqSimp_commuteGeq" (formula "12") (term "0"))
                           (rule "inEqSimp_contradInEq1" (formula "12") (term "0") (ifseqformula "7"))
                           (rule "qeq_literals" (formula "12") (term "0,0"))
                           (builtin "One Step Simplification" (formula "12"))
                           (rule "inEqSimp_contradInEq1" (formula "12") (ifseqformula "3"))
                           (rule "andLeft" (formula "12"))
                           (rule "inEqSimp_homoInEq1" (formula "12"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0"))
                           (rule "polySimp_addComm0" (formula "12") (term "0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
                           (rule "add_literals" (formula "12") (term "1,1,0"))
                           (rule "times_zero_1" (formula "12") (term "1,0"))
                           (rule "add_zero_right" (formula "12") (term "0"))
                           (rule "leq_literals" (formula "12"))
                           (rule "closeFalse" (formula "12"))
                        )
                        (branch "(int)s_1[1 + iv_34] = 0 FALSE"
                           (rule "inEqSimp_homoInEq1" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                           (rule "mul_literals" (formula "2") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "2") (term "0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                           (rule "add_literals" (formula "2") (term "0,0,0"))
                           (rule "add_zero_left" (formula "2") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "cnf_rightDist" (formula "1") (term "1,0,1,1,0,1,0"))
                           (rule "commute_or" (formula "1") (term "0,1,0,1,1,0,1,0"))
                           (rule "cnf_rightDist" (formula "1") (term "0,0,1,1,0,1,0"))
                           (rule "commute_or" (formula "1") (term "0,0,0,1,1,0,1,0"))
                           (rule "ifthenelse_to_or_left2" (formula "1") (term "1,0,1,0,1,0"))
                           (rule "eqSymm" (formula "1") (term "0,1,1,1,0,1,0,1,0"))
                           (rule "nnf_notAnd" (formula "1") (term "0,0,1,0,1,0,1,0"))
                           (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,1,0,1,0,1,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,1,0,1,0,1,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,1,0,1,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,1,0,1,0,1,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,1,0,1,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,1,0,1,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,0,1,0,1,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,0,1,0,1,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,1,0,0,1,0,1,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,0,1,0,1,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,0,1,0,1,0"))
                           (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,1,0,1,0,1,0"))
                           (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0,1,0,1,0,1,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0,0,0,0,1,0,1,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,1,0,1,0,1,0"))
                           (rule "mul_literals" (formula "1") (term "1,0,0,0,1,0,1,0,1,0"))
                           (rule "commute_or" (formula "1") (term "1,1,0,1,0,1,0"))
                           (rule "shift_paren_and" (formula "1") (term "0,1,1,0,1,0"))
                           (rule "cnf_rightDist" (formula "1") (term "1,1,0,1,0,1,0"))
                           (rule "cnf_rightDist" (formula "1") (term "0,1,0,1,0"))
                           (rule "commute_or" (formula "1") (term "1,0,1,0,1,0"))
                           (rule "shift_paren_or" (formula "1") (term "0,0,1,0,1,0"))
                           (rule "commute_or" (formula "1") (term "1,1,1,0,1,0,1,0"))
                           (rule "shift_paren_or" (formula "1") (term "0,0,0,1,0,1,0"))
                           (rule "cnf_rightDist" (formula "1") (term "1,0,1,0,1,0"))
                           (rule "commute_or_2" (formula "1") (term "1,1,0,1,0,1,0"))
                           (rule "shift_paren_or" (formula "1") (term "0,1,0,1,0,1,0"))
                           (rule "commute_or" (formula "1") (term "0,1,1,0,1,0,1,0"))
                           (rule "shift_paren_and" (formula "1") (term "1,1,0,1,0"))
                           (rule "shift_paren_and" (formula "1") (term "0,1,0,1,0"))
                           (rule "shift_paren_and" (formula "1") (term "1,0,1,0"))
                           (rule "shift_paren_and" (formula "1") (term "0,1,0,1,0"))
                           (rule "allLeft" (formula "11") (inst "t=add(Z(1(#)), iv_34)"))
                           (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
                           (rule "inEqSimp_homoInEq0" (formula "11") (term "0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0,0,0"))
                           (rule "add_literals" (formula "11") (term "0,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "11") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "0,0,0"))
                           (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0") (ifseqformula "7"))
                           (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0"))
                           (rule "polySimp_addComm1" (formula "11") (term "0,0,0,1,0"))
                           (rule "add_literals" (formula "11") (term "0,0,0,0,1,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1,0"))
                           (rule "add_literals" (formula "11") (term "1,1,0,0,1,0"))
                           (rule "times_zero_1" (formula "11") (term "1,0,0,1,0"))
                           (rule "add_literals" (formula "11") (term "0,0,1,0"))
                           (rule "leq_literals" (formula "11") (term "0,1,0"))
                           (builtin "One Step Simplification" (formula "11"))
                           (rule "inEqSimp_contradInEq1" (formula "11") (term "1") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1"))
                           (rule "mul_literals" (formula "11") (term "0,1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0,0,1"))
                           (rule "polySimp_addComm0" (formula "11") (term "0,0,0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1"))
                           (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
                           (rule "add_literals" (formula "11") (term "0,0,1"))
                           (rule "leq_literals" (formula "11") (term "0,1"))
                           (builtin "One Step Simplification" (formula "11"))
                           (rule "inEqSimp_contradInEq1" (formula "11") (ifseqformula "5"))
                           (rule "qeq_literals" (formula "11") (term "0"))
                           (builtin "One Step Simplification" (formula "11"))
                           (rule "closeFalse" (formula "11"))
                        )
                     )
                     (branch "f_s1.length >= 2 FALSE"
                        (rule "replace_known_right" (formula "1") (term "0,1,0,1,0,0") (ifseqformula "16"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "replace_known_right" (formula "2") (term "0,1") (ifseqformula "16"))
                        (builtin "One Step Simplification" (formula "2"))
                        (rule "inEqSimp_geqRight" (formula "16"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "7"))
                        (rule "mul_literals" (formula "7") (term "1,0"))
                        (rule "add_zero_right" (formula "7") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "7"))
                        (rule "mul_literals" (formula "7") (term "1"))
                        (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "7"))
                        (rule "qeq_literals" (formula "6") (term "0"))
                        (builtin "One Step Simplification" (formula "6"))
                        (rule "closeFalse" (formula "6"))
                     )
                  )
               )
            )
         )
         (branch
            (rule "allRight" (formula "8") (inst "sk=iv_1"))
            (rule "impRight" (formula "8"))
            (rule "andLeft" (formula "1"))
            (rule "eqSymm" (formula "12") (term "1,0,1,0"))
            (rule "eqSymm" (formula "9"))
            (rule "eqSymm" (formula "3"))
            (rule "eqSymm" (formula "6") (term "1,0"))
            (rule "polySimp_elimSub" (formula "11") (term "1,2,0"))
            (rule "mul_literals" (formula "11") (term "1,1,2,0"))
            (rule "polySimp_elimSub" (formula "11") (term "1,0"))
            (rule "mul_literals" (formula "11") (term "1,1,0"))
            (rule "polySimp_elimSub" (formula "11") (term "2,2,0"))
            (rule "mul_literals" (formula "11") (term "1,2,2,0"))
            (rule "polySimp_elimSub" (formula "10") (term "1,2,0,0,0"))
            (rule "mul_literals" (formula "10") (term "1,1,2,0,0,0"))
            (rule "polySimp_elimSub" (formula "10") (term "2,2,0,0,0"))
            (rule "mul_literals" (formula "10") (term "1,2,2,0,0,0"))
            (rule "polySimp_elimSub" (formula "10") (term "1,0,0,0"))
            (rule "mul_literals" (formula "10") (term "1,1,0,0,0"))
            (rule "polySimp_elimSub" (formula "2") (term "1,2,0,1"))
            (rule "mul_literals" (formula "2") (term "1,1,2,0,1"))
            (rule "polySimp_elimSub" (formula "2") (term "2,2,0,1"))
            (rule "mul_literals" (formula "2") (term "1,2,2,0,1"))
            (rule "polySimp_elimSub" (formula "2") (term "1,0,1"))
            (rule "mul_literals" (formula "2") (term "1,1,0,1"))
            (rule "polySimp_addComm0" (formula "11") (term "1,0,0,2,0"))
            (rule "polySimp_addComm0" (formula "10") (term "1,0,0,2,0,0,0"))
            (rule "polySimp_addComm0" (formula "2") (term "1,0,0,2,0,1"))
            (rule "polySimp_addComm0" (formula "11") (term "1,2,0"))
            (rule "polySimp_addComm0" (formula "11") (term "1,0"))
            (rule "polySimp_addComm0" (formula "11") (term "1,0,2,2,0"))
            (rule "polySimp_addComm0" (formula "10") (term "1,2,0,0,0"))
            (rule "polySimp_addComm0" (formula "10") (term "1,0,2,2,0,0,0"))
            (rule "polySimp_addComm0" (formula "10") (term "1,0,0,0"))
            (rule "polySimp_addComm0" (formula "2") (term "1,2,0,1"))
            (rule "polySimp_addComm0" (formula "2") (term "1,0,2,2,0,1"))
            (rule "polySimp_addComm0" (formula "2") (term "1,0,1"))
            (rule "polySimp_addComm0" (formula "11") (term "2,2,0"))
            (rule "polySimp_addComm0" (formula "10") (term "2,2,0,0,0"))
            (rule "polySimp_addComm0" (formula "2") (term "2,2,0,1"))
            (rule "lenOfSeqSub" (formula "12") (term "1,0,0,0"))
            (rule "polySimp_elimSub" (formula "12") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,1,1,0,0,0"))
            (rule "polySimp_addComm0" (formula "12") (term "1,1,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_gtToGeq" (formula "8"))
            (rule "mul_literals" (formula "8") (term "1,0,0"))
            (rule "add_literals" (formula "8") (term "0,0"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,1,0"))
            (rule "polySimp_addComm1" (formula "12") (term "0,1,0,0,1,0"))
            (rule "getOfSeqDef" (formula "10") (term "0,0"))
            (rule "castDel" (formula "10") (term "2,0,0"))
            (rule "castDel" (formula "10") (term "1,0,0"))
            (rule "add_zero_right" (formula "10") (term "1,1,0,0,1,0,0"))
            (rule "add_zero_right" (formula "10") (term "1,1,1,2,1,0,0"))
            (rule "replace_known_left" (formula "10") (term "0,0,0,0") (ifseqformula "1"))
            (builtin "One Step Simplification" (formula "10"))
            (rule "polySimp_elimSub" (formula "10") (term "1,0,0,0"))
            (rule "mul_literals" (formula "10") (term "1,1,0,0,0"))
            (rule "add_zero_right" (formula "10") (term "1,0,0,0"))
            (rule "lenOfSeqDef" (formula "2") (term "1"))
            (rule "polySimp_elimSub" (formula "2") (term "1,1"))
            (rule "mul_literals" (formula "2") (term "1,1,1"))
            (rule "add_zero_right" (formula "2") (term "1,1"))
            (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "0,1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,0,0,0"))
            (rule "polySimp_addComm1" (formula "12") (term "0,0,1,0,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "1"))
            (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "10") (term "0,0,0,0,0,0"))
            (rule "polySimp_addComm1" (formula "10") (term "0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1"))
            (rule "add_zero_right" (formula "2") (term "0,0,1"))
            (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1"))
            (rule "mul_literals" (formula "2") (term "0,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0,1"))
            (rule "add_literals" (formula "2") (term "0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "applyEq" (formula "10") (term "0,1,0,0,0,0") (ifseqformula "4"))
            (rule "applyEqRigid" (formula "12") (term "2,0,0,1,0,1,0") (ifseqformula "3"))
            (rule "applyEqRigid" (formula "2") (term "1,1,0,1,0") (ifseqformula "4"))
            (rule "applyEq" (formula "2") (term "0,1,0,0,0,1,0") (ifseqformula "4"))
            (rule "applyEqRigid" (formula "11") (term "1,1,0") (ifseqformula "4"))
            (rule "applyEqRigid" (formula "6") (term "0,1,0,0,1,0,0") (ifseqformula "4"))
            (rule "inEqSimp_sepPosMonomial1" (formula "8"))
            (rule "mul_literals" (formula "8") (term "1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "12") (term "0,1,0,0,1,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "0,0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,0"))
            (rule "polySimp_elimOne" (formula "10") (term "0,0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "polySimp_elimOne" (formula "2") (term "0"))
            (rule "getOfSeqSub" (formula "12") (term "1,1,0,1,0"))
            (rule "castDel" (formula "12") (term "2,1,1,0,1,0"))
            (rule "polySimp_elimSub" (formula "12") (term "1,1,0,1,1,0,1,0"))
            (rule "mul_literals" (formula "12") (term "1,1,1,0,1,1,0,1,0"))
            (rule "polySimp_addComm0" (formula "12") (term "1,1,1,1,0,1,0"))
            (rule "polySimp_addComm0" (formula "12") (term "1,1,0,1,1,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,1,1,0,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,1,1,0,1,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,1,1,0,1,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,1,1,0,1,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,1,0,1,1,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,1,1,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,1,1,0,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,1,1,0,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,1,0,1,1,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,1,1,0,1,0"))
            (rule "mul_literals" (formula "12") (term "0,1,1,0,1,1,0,1,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,1,1,0,1,0"))
            (rule "getOfSeqSub" (formula "12") (term "0,1,0,1,0"))
            (rule "castDel" (formula "12") (term "2,0,1,0,1,0"))
            (rule "polySimp_elimSub" (formula "12") (term "1,1,0,0,1,0,1,0"))
            (rule "mul_literals" (formula "12") (term "1,1,1,0,0,1,0,1,0"))
            (rule "polySimp_addComm0" (formula "12") (term "1,1,0,1,0,1,0"))
            (rule "polySimp_addComm0" (formula "12") (term "1,1,0,0,1,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,0,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,1,0,1,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,1,0,1,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,1,0,1,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,1,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,1,0,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,1,0,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,1,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,1,0,1,0"))
            (rule "mul_literals" (formula "12") (term "0,1,1,0,0,1,0,1,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,1,0,1,0"))
            (rule "nnf_ex2all" (formula "12"))
            (rule "nnf_imp2or" (formula "7") (term "0"))
            (rule "nnf_notAnd" (formula "1") (term "0"))
            (rule "nnf_notAnd" (formula "7") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
            (rule "mul_literals" (formula "7") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "7") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
            (rule "mul_literals" (formula "7") (term "1,0,0,0"))
            (rule "nnf_notAll" (formula "1") (term "1,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0"))
            (rule "nnf_imp2or" (formula "1") (term "0,0,1,0"))
            (rule "nnf_notOr" (formula "1") (term "0,1,0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "commute_or" (formula "1") (term "0,0"))
            (rule "ifthenelse_split" (formula "11") (term "1,0,0"))
            (branch "(int)s_1[1 + iv_1] = 0 TRUE"
               (rule "ifthenelse_to_or_right2" (formula "2") (term "1,0,0"))
               (rule "inEqSimp_notGeq" (formula "2") (term "0,0,1,0,0"))
               (rule "mul_literals" (formula "2") (term "1,0,0,0,0,1,0,0"))
               (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,1,0,0"))
               (rule "mul_literals" (formula "2") (term "1,0,0,1,0,0"))
               (rule "commute_or" (formula "2") (term "1,1,0,0"))
               (rule "commute_or" (formula "2") (term "0,1,0,0"))
               (rule "cnf_rightDist" (formula "2") (term "0,0"))
               (rule "commute_or_2" (formula "2") (term "1,0,0"))
               (rule "shift_paren_or" (formula "2") (term "0,0,0"))
               (rule "commute_or" (formula "2") (term "0,1,0,0"))
               (rule "ifthenelse_split" (formula "4") (term "0"))
               (branch "f_s1.length >= 2 TRUE"
                  (rule "replace_known_left" (formula "2") (term "1,1,0,0") (ifseqformula "4"))
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "inEqSimp_homoInEq1" (formula "5"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                  (rule "mul_literals" (formula "5") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "5") (term "0"))
                  (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                  (rule "add_literals" (formula "5") (term "0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                  (rule "polySimp_elimOne" (formula "5") (term "0"))
                  (rule "replace_known_left" (formula "13") (term "0,0,0") (ifseqformula "5"))
                  (builtin "One Step Simplification" (formula "13"))
                  (rule "closeTrue" (formula "13"))
               )
               (branch "f_s1.length >= 2 FALSE"
                  (rule "replace_known_right" (formula "2") (term "1,1,0,0") (ifseqformula "12"))
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "inEqSimp_geqRight" (formula "12"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "5"))
                  (rule "mul_literals" (formula "5") (term "1,0"))
                  (rule "add_zero_right" (formula "5") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "replace_known_left" (formula "3") (term "1,0,0,0") (ifseqformula "1"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                  (rule "mul_literals" (formula "5") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "4"))
                  (rule "qeq_literals" (formula "5") (term "0"))
                  (builtin "One Step Simplification" (formula "5"))
                  (rule "closeFalse" (formula "5"))
               )
            )
            (branch "(int)s_1[1 + iv_1] = 0 FALSE"
               (rule "ifthenelse_to_or_right2" (formula "1") (term "1,0,0"))
               (rule "inEqSimp_notGeq" (formula "1") (term "0,0,1,0,0"))
               (rule "mul_literals" (formula "1") (term "1,0,0,0,0,1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,1,0,0"))
               (rule "mul_literals" (formula "1") (term "1,0,0,1,0,0"))
               (rule "commute_or" (formula "1") (term "1,1,0,0"))
               (rule "commute_or" (formula "1") (term "0,1,0,0"))
               (rule "cnf_rightDist" (formula "1") (term "0,0"))
               (rule "commute_or_2" (formula "1") (term "1,0,0"))
               (rule "shift_paren_or" (formula "1") (term "0,0,0"))
               (rule "commute_or" (formula "1") (term "0,1,0,0"))
               (rule "ifthenelse_split" (formula "3") (term "0"))
               (branch "f_s1.length >= 2 TRUE"
                  (rule "replace_known_left" (formula "1") (term "1,1,0,0") (ifseqformula "3"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "4"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0"))
                  (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                  (rule "add_literals" (formula "4") (term "0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                  (rule "polySimp_elimOne" (formula "4") (term "0"))
                  (rule "replace_known_left" (formula "13") (term "0,0,0") (ifseqformula "4"))
                  (builtin "One Step Simplification" (formula "13"))
                  (rule "closeTrue" (formula "13"))
               )
               (branch "f_s1.length >= 2 FALSE"
                  (rule "replace_known_right" (formula "1") (term "1,1,0,0") (ifseqformula "11"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_geqRight" (formula "11"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "4"))
                  (rule "mul_literals" (formula "4") (term "1,0"))
                  (rule "add_zero_right" (formula "4") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "replace_known_left" (formula "2") (term "1,0,0,0") (ifseqformula "1"))
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                  (rule "mul_literals" (formula "4") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "4") (term "0"))
                  (builtin "One Step Simplification" (formula "4"))
                  (rule "closeFalse" (formula "4"))
               )
            )
         )
      )
   )
   (branch "Case 2"
      (rule "allRight" (formula "8") (inst "sk=iv_51") (userinteraction))
      (rule "impRight" (formula "8") (userinteraction))
      (rule "andLeft" (formula "1"))
      (rule "getOfSeqSub" (formula "10") (term "0") (userinteraction))
      (rule "ifthenelse_split" (formula "10") (term "0") (userinteraction))
      (branch "0 <= iv_51 & iv_51 < f_s1.length - 1 TRUE"
         (rule "getOfSeqSub" (formula "11") (term "1") (userinteraction))
         (rule "ifthenelse_split" (formula "11") (term "1") (userinteraction))
         (branch " 0 <= (int)seqDef{int u;}(0, s_1.length - 1, if ((int)s_1[u + 1] = 0) then ((int)s_1[0] - 1) else ((int)s_1[u + 1] - 1))[iv_51] & (int)seqDef{int u;}(0, s_1.length - 1, if ((int)s_1[u + 1] = 0) then ((int)s_1[0] - 1) else ((int)s_1[u + 1] - 1))[iv_51] < f_s2.length - 1 TRUE"
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "3"))
            (rule "eqSymm" (formula "12"))
            (rule "eqSymm" (formula "9") (term "1,0"))
            (rule "eqSymm" (formula "14") (term "1,0,1,0"))
            (rule "eqSymm" (formula "13"))
            (rule "eqSymm" (formula "6"))
            (rule "polySimp_elimSub" (formula "5") (term "1,2,0,1"))
            (rule "mul_literals" (formula "5") (term "1,1,2,0,1"))
            (rule "polySimp_elimSub" (formula "5") (term "1,0,1"))
            (rule "mul_literals" (formula "5") (term "1,1,0,1"))
            (rule "polySimp_elimSub" (formula "5") (term "2,2,0,1"))
            (rule "mul_literals" (formula "5") (term "1,2,2,0,1"))
            (rule "polySimp_elimSub" (formula "1") (term "1,0,1"))
            (rule "mul_literals" (formula "1") (term "1,1,0,1"))
            (rule "polySimp_elimSub" (formula "1") (term "1,2,0,1"))
            (rule "mul_literals" (formula "1") (term "1,1,2,0,1"))
            (rule "polySimp_elimSub" (formula "2") (term "1,2,0,0"))
            (rule "mul_literals" (formula "2") (term "1,1,2,0,0"))
            (rule "polySimp_elimSub" (formula "1") (term "2,2,0,1"))
            (rule "mul_literals" (formula "1") (term "1,2,2,0,1"))
            (rule "polySimp_elimSub" (formula "2") (term "2,2,0,0"))
            (rule "mul_literals" (formula "2") (term "1,2,2,0,0"))
            (rule "polySimp_elimSub" (formula "2") (term "1,0,0"))
            (rule "mul_literals" (formula "2") (term "1,1,0,0"))
            (rule "polySimp_elimSub" (formula "2") (term "1"))
            (rule "mul_literals" (formula "2") (term "1,1"))
            (rule "polySimp_elimSub" (formula "3") (term "1"))
            (rule "mul_literals" (formula "3") (term "1,1"))
            (rule "polySimp_elimSub" (formula "13") (term "1,0,0,1,0"))
            (rule "mul_literals" (formula "13") (term "1,1,0,0,1,0"))
            (rule "polySimp_elimSub" (formula "13") (term "2,2,0,0,1,0"))
            (rule "mul_literals" (formula "13") (term "1,2,2,0,0,1,0"))
            (rule "polySimp_elimSub" (formula "13") (term "1,2,0,0,1,0"))
            (rule "mul_literals" (formula "13") (term "1,1,2,0,0,1,0"))
            (rule "polySimp_addComm0" (formula "5") (term "1,0,0,2,0,1"))
            (rule "polySimp_addComm0" (formula "1") (term "1,0,0,2,0,1"))
            (rule "polySimp_addComm0" (formula "2") (term "1,0,0,2,0,0"))
            (rule "polySimp_addComm0" (formula "13") (term "1,1"))
            (rule "polySimp_addComm0" (formula "13") (term "1,0,0,2,0,0,1,0"))
            (rule "polySimp_addComm0" (formula "5") (term "1,2,0,1"))
            (rule "polySimp_addComm0" (formula "5") (term "1,0,1"))
            (rule "polySimp_addComm0" (formula "5") (term "1,0,2,2,0,1"))
            (rule "polySimp_addComm0" (formula "1") (term "1,0,1"))
            (rule "polySimp_addComm0" (formula "1") (term "1,2,0,1"))
            (rule "polySimp_addComm0" (formula "2") (term "1,2,0,0"))
            (rule "polySimp_addComm0" (formula "1") (term "1,0,2,2,0,1"))
            (rule "polySimp_addComm0" (formula "2") (term "1,0,2,2,0,0"))
            (rule "polySimp_addComm0" (formula "2") (term "1,0,0"))
            (rule "polySimp_addComm0" (formula "2") (term "1"))
            (rule "polySimp_addComm0" (formula "3") (term "1"))
            (rule "polySimp_addComm0" (formula "13") (term "1,0,0,1,0"))
            (rule "polySimp_addComm0" (formula "13") (term "1,0,2,2,0,0,1,0"))
            (rule "polySimp_addComm0" (formula "13") (term "1,2,0,0,1,0"))
            (rule "polySimp_addComm0" (formula "5") (term "2,2,0,1"))
            (rule "polySimp_addComm0" (formula "1") (term "2,2,0,1"))
            (rule "polySimp_addComm0" (formula "2") (term "2,2,0,0"))
            (rule "polySimp_addComm0" (formula "13") (term "2,2,0,0,1,0"))
            (rule "polySimp_addComm0" (formula "13") (term "1,0"))
            (rule "lenOfSeqSub" (formula "14") (term "1,0,0,0"))
            (rule "polySimp_elimSub" (formula "14") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "14") (term "1,1,1,0,0,0"))
            (rule "polySimp_addComm0" (formula "14") (term "1,1,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,0"))
            (rule "polySimp_addComm1" (formula "14") (term "0,1,0,0,1,0"))
            (rule "inEqSimp_gtToGeq" (formula "11"))
            (rule "mul_literals" (formula "11") (term "1,0,0"))
            (rule "add_literals" (formula "11") (term "0,0"))
            (rule "lenOfSeqDef" (formula "5") (term "1"))
            (rule "polySimp_elimSub" (formula "5") (term "1,1"))
            (rule "mul_literals" (formula "5") (term "1,1,1"))
            (rule "add_zero_right" (formula "5") (term "1,1"))
            (rule "getOfSeqDef" (formula "1") (term "1"))
            (rule "castDel" (formula "1") (term "1,1"))
            (rule "add_zero_right" (formula "1") (term "1,1,1,2,1,1"))
            (rule "add_zero_right" (formula "1") (term "1,1,0,0,1,1"))
            (rule "replace_known_left" (formula "1") (term "0,0,1") (ifseqformula "4"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "polySimp_elimSub" (formula "1") (term "1,0,1"))
            (rule "times_zero_2" (formula "1") (term "1,1,0,1"))
            (rule "add_zero_right" (formula "1") (term "1,0,1"))
            (rule "getOfSeqDef" (formula "2") (term "0"))
            (rule "castDel" (formula "2") (term "1,0"))
            (rule "add_zero_right" (formula "2") (term "1,1,1,2,1,0"))
            (rule "add_zero_right" (formula "2") (term "1,1,0,0,1,0"))
            (rule "replace_known_left" (formula "2") (term "0,0,0") (ifseqformula "4"))
            (builtin "One Step Simplification" (formula "2"))
            (rule "polySimp_elimSub" (formula "2") (term "1,0,0"))
            (rule "times_zero_2" (formula "2") (term "1,1,0,0"))
            (rule "add_zero_right" (formula "2") (term "1,0,0"))
            (rule "getOfSeqDef" (formula "13") (term "1,1,0"))
            (rule "castDel" (formula "13") (term "1,1,1,0"))
            (rule "add_zero_right" (formula "13") (term "1,1,0,0,1,1,1,0"))
            (rule "add_zero_right" (formula "13") (term "1,1,1,2,1,1,1,0"))
            (rule "replace_known_left" (formula "13") (term "0,0,1,1,0") (ifseqformula "4"))
            (builtin "One Step Simplification" (formula "13"))
            (rule "polySimp_elimSub" (formula "13") (term "1,0,1,1,0"))
            (rule "mul_literals" (formula "13") (term "1,1,0,1,1,0"))
            (rule "add_zero_right" (formula "13") (term "1,0,1,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "4"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "3"))
            (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
            (rule "mul_literals" (formula "3") (term "0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "14") (term "0,1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,1,0,0,0"))
            (rule "polySimp_addComm1" (formula "14") (term "0,0,1,0,0,0"))
            (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "5") (term "0,1"))
            (rule "add_zero_right" (formula "5") (term "0,0,1"))
            (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1"))
            (rule "mul_literals" (formula "5") (term "0,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
            (rule "add_literals" (formula "3") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "3") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,1"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,0,1"))
            (rule "polySimp_addAssoc" (formula "5") (term "0,0,1"))
            (rule "add_literals" (formula "5") (term "0,0,0,1"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1"))
            (rule "add_literals" (formula "1") (term "0,0,0,0,1"))
            (rule "polySimp_addComm1" (formula "1") (term "0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "2"))
            (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
            (rule "mul_literals" (formula "2") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1,1,0"))
            (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,1,1,0"))
            (rule "mul_literals" (formula "13") (term "0,1,0,0,0,1,1,0"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,1,1,0"))
            (rule "add_literals" (formula "13") (term "0,0,0,0,1,1,0"))
            (rule "polySimp_addComm1" (formula "13") (term "0,0,1,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "5"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "5") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1,0"))
            (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0"))
            (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0"))
            (rule "add_literals" (formula "2") (term "0,0,0,0,1,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "1"))
            (rule "applyEqRigid" (formula "13") (term "0,1,0,0,1,1,0") (ifseqformula "7"))
            (rule "replace_known_left" (formula "13") (term "0,1,1,0") (ifseqformula "3"))
            (builtin "One Step Simplification" (formula "13"))
            (rule "applyEqRigid" (formula "14") (term "2,0,0,1,0,1,0") (ifseqformula "6"))
            (rule "applyEqRigid" (formula "5") (term "0,1,0,0,0,1,0") (ifseqformula "7"))
            (rule "applyEq" (formula "5") (term "1,1,0,1,0") (ifseqformula "7"))
            (rule "applyEqRigid" (formula "2") (term "0,1,0,0,1,0") (ifseqformula "7"))
            (rule "replace_known_left" (formula "2") (term "0,1,0") (ifseqformula "3"))
            (builtin "One Step Simplification" (formula "2"))
            (rule "applyEq" (formula "1") (term "0,1,0,0,0") (ifseqformula "7"))
            (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "3"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqRigid" (formula "9") (term "0,1,0,0,1,0,0") (ifseqformula "7"))
            (rule "applyEqRigid" (formula "2") (term "0,1,0,0") (ifseqformula "6"))
            (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "14") (term "0,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11"))
            (rule "mul_literals" (formula "11") (term "1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "14") (term "0,0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "14") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "0"))
            (rule "polySimp_elimOne" (formula "3") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "5") (term "0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "5") (term "0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1"))
            (rule "polySimp_rightDist" (formula "2") (term "1"))
            (rule "mul_literals" (formula "2") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
            (rule "polySimp_elimOne" (formula "2") (term "1,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "5"))
            (rule "polySimp_mulLiterals" (formula "5") (term "0"))
            (rule "polySimp_elimOne" (formula "5") (term "0"))
            (rule "getOfSeqSub" (formula "14") (term "1,1,0,1,0"))
            (rule "castDel" (formula "14") (term "2,1,1,0,1,0"))
            (rule "polySimp_elimSub" (formula "14") (term "1,1,0,1,1,0,1,0"))
            (rule "mul_literals" (formula "14") (term "1,1,1,0,1,1,0,1,0"))
            (rule "polySimp_addComm0" (formula "14") (term "1,1,1,1,0,1,0"))
            (rule "polySimp_addComm0" (formula "14") (term "1,1,0,1,1,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,1,1,0,1,0"))
            (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,1,1,0,1,0"))
            (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,1,1,0,1,0"))
            (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,1,1,0,1,0"))
            (rule "add_literals" (formula "14") (term "0,0,0,1,0,1,1,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,1,1,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,1,1,0,1,0"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,1,1,0,1,0"))
            (rule "polySimp_rightDist" (formula "14") (term "1,1,0,1,1,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,1,1,0,1,0"))
            (rule "mul_literals" (formula "14") (term "0,1,1,0,1,1,0,1,0"))
            (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,1,1,0,1,0"))
            (rule "getOfSeqSub" (formula "14") (term "0,1,0,1,0"))
            (rule "castDel" (formula "14") (term "2,0,1,0,1,0"))
            (rule "polySimp_elimSub" (formula "14") (term "1,1,0,0,1,0,1,0"))
            (rule "mul_literals" (formula "14") (term "1,1,1,0,0,1,0,1,0"))
            (rule "polySimp_addComm0" (formula "14") (term "1,1,0,1,0,1,0"))
            (rule "polySimp_addComm0" (formula "14") (term "1,1,0,0,1,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0,1,0"))
            (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,1,0,1,0"))
            (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,1,0,1,0"))
            (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,1,0,1,0"))
            (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,1,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0,1,0"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,0,1,0"))
            (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,0,1,0"))
            (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,0,1,0"))
            (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,0,1,0"))
            (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
            (rule "mul_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "replace_known_left" (formula "15") (term "0,1,0,0,0") (ifseqformula "1"))
            (builtin "One Step Simplification" (formula "15"))
            (rule "replace_known_left" (formula "6") (term "0,0") (ifseqformula "1"))
            (builtin "One Step Simplification" (formula "6"))
            (rule "inEqSimp_homoInEq1" (formula "6"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
            (rule "polySimp_rightDist" (formula "6") (term "1,0"))
            (rule "mul_literals" (formula "6") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "6") (term "0"))
            (rule "polySimp_addComm1" (formula "6") (term "0,0"))
            (rule "add_literals" (formula "6") (term "0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "6"))
            (rule "polySimp_mulLiterals" (formula "6") (term "0"))
            (rule "polySimp_elimOne" (formula "6") (term "0"))
            (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "1"))
            (rule "leq_literals" (formula "11") (term "0"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "nnf_ex2all" (formula "13"))
            (rule "nnf_imp2or" (formula "10") (term "0"))
            (rule "nnf_notAnd" (formula "1") (term "0"))
            (rule "nnf_notAnd" (formula "10") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
            (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
            (rule "mul_literals" (formula "10") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
            (rule "nnf_notAll" (formula "1") (term "1,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0"))
            (rule "nnf_imp2or" (formula "1") (term "0,0,1,0"))
            (rule "nnf_notOr" (formula "1") (term "0,1,0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "commute_or" (formula "1") (term "0,0"))
            (rule "lenNonNegative" (formula "8") (term "1"))
            (rule "inEqSimp_commuteLeq" (formula "8"))
            (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "2"))
            (rule "leq_literals" (formula "8") (term "0"))
            (builtin "One Step Simplification" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "lenNonNegative" (formula "8") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "8"))
            (rule "applyEq" (formula "8") (term "0") (ifseqformula "9"))
            (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "2"))
            (rule "leq_literals" (formula "8") (term "0"))
            (builtin "One Step Simplification" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "seqGetAlphaCast" (formula "12") (term "0"))
            (rule "castDel" (formula "12") (term "0"))
            (builtin "One Step Simplification" (formula "12"))
            (rule "true_left" (formula "12"))
            (rule "seqGetAlphaCast" (formula "12") (term "1"))
            (rule "castDel" (formula "12") (term "0"))
            (builtin "One Step Simplification" (formula "12"))
            (rule "true_left" (formula "12"))
            (rule "lenNonNegative" (formula "7") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "7"))
            (rule "applyEqRigid" (formula "7") (term "0") (ifseqformula "8"))
            (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "2"))
            (rule "leq_literals" (formula "7") (term "0"))
            (builtin "One Step Simplification" (formula "7"))
            (rule "true_left" (formula "7"))
            (rule "ifthenelse_split" (formula "13") (term "1,1,0"))
            (branch "(int)s_1[1 + iv_51] = 0 TRUE"
               (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "1"))
               (builtin "One Step Simplification" (formula "4"))
               (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "1"))
               (builtin "One Step Simplification" (formula "5"))
               (rule "polySimp_addAssoc" (formula "14") (term "1,0"))
               (rule "add_literals" (formula "14") (term "0,1,0"))
               (rule "add_zero_left" (formula "14") (term "1,0"))
               (rule "inEqSimp_homoInEq0" (formula "5"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
               (rule "polySimp_rightDist" (formula "5") (term "1,0"))
               (rule "mul_literals" (formula "5") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "5") (term "0"))
               (rule "polySimp_addComm1" (formula "5") (term "0,0"))
               (rule "add_literals" (formula "5") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "4"))
               (rule "mul_literals" (formula "4") (term "1"))
               (rule "inEqSimp_sepNegMonomial1" (formula "5"))
               (rule "polySimp_mulLiterals" (formula "5") (term "0"))
               (rule "polySimp_elimOne" (formula "5") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "5"))
               (rule "mul_literals" (formula "4") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "4") (term "0"))
               (rule "add_literals" (formula "4") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "4"))
               (rule "mul_literals" (formula "4") (term "1"))
               (rule "ifthenelse_to_or_left2" (formula "2") (term "1,0,1,0"))
               (rule "eqSymm" (formula "2") (term "0,1,1,1,0,1,0"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "nnf_notAnd" (formula "2") (term "0,0,1,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0,1,0,1,0"))
               (rule "times_zero_1" (formula "2") (term "1,0,0,0,0,0,1,0,1,0"))
               (rule "add_literals" (formula "2") (term "0,0,0,0,0,1,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0,1,0,1,0"))
               (rule "mul_literals" (formula "2") (term "1,0,0,0,1,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0,1,0,1,0"))
               (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,1,0,1,0"))
               (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0,1,0,1,0"))
               (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,1,0,1,0"))
               (rule "add_literals" (formula "2") (term "0,0,0,1,0,0,1,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1,0,1,0"))
               (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,1,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,1,0,1,0"))
               (rule "mul_literals" (formula "2") (term "0,1,1,0,0,1,0,1,0"))
               (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,1,0,1,0"))
               (rule "nnf_notOr" (formula "2") (term "1,1,1,0,1,0"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "seqGetAlphaCast" (formula "14") (term "1"))
               (rule "castDel" (formula "1") (term "0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "cnf_rightDist" (formula "2") (term "1,1,0,1,0"))
               (rule "cnf_rightDist" (formula "2") (term "1,1,1,0,1,0"))
               (rule "commute_or" (formula "2") (term "1,1,1,1,0,1,0"))
               (rule "cnf_rightDist" (formula "2") (term "0,1,1,0,1,0"))
               (rule "commute_or" (formula "2") (term "0,0,1,1,0,1,0"))
               (rule "cnf_rightDist" (formula "2") (term "1,0,1,1,0,1,0"))
               (rule "commute_or" (formula "2") (term "1,1,0,1,1,0,1,0"))
               (rule "cnf_rightDist" (formula "2") (term "0,0,1,1,0,1,0"))
               (rule "commute_or" (formula "2") (term "1,0,0,1,1,0,1,0"))
               (rule "ifthenelse_to_or_right2" (formula "2") (term "1,0,1,0,1,0"))
               (rule "nnf_notAnd" (formula "2") (term "0,0,1,0,1,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0,1,0,1,0,1,0"))
               (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,1,0,1,0,1,0"))
               (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0,1,0,1,0,1,0"))
               (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,1,0,1,0,1,0"))
               (rule "add_literals" (formula "2") (term "0,0,0,1,0,0,1,0,1,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0,1,0,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1,0,1,0,1,0"))
               (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,1,0,1,0,1,0"))
               (rule "mul_literals" (formula "2") (term "0,1,1,0,0,1,0,1,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,1,0,1,0,1,0"))
               (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,1,0,1,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0,1,0,1,0,1,0"))
               (rule "times_zero_1" (formula "2") (term "1,0,0,0,0,0,1,0,1,0,1,0"))
               (rule "add_literals" (formula "2") (term "0,0,0,0,0,1,0,1,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0,1,0,1,0,1,0"))
               (rule "mul_literals" (formula "2") (term "1,0,0,0,1,0,1,0,1,0"))
               (rule "commute_or" (formula "2") (term "1,1,0,1,0,1,0"))
               (rule "cnf_rightDist" (formula "2") (term "1,1,0,1,0,1,0"))
               (rule "cnf_rightDist" (formula "2") (term "0,1,0,1,0"))
               (rule "commute_or" (formula "2") (term "1,0,1,0,1,0"))
               (rule "shift_paren_or" (formula "2") (term "0,0,1,0,1,0"))
               (rule "commute_or_2" (formula "2") (term "0,0,0,1,0,1,0"))
               (rule "commute_or" (formula "2") (term "0,1,1,0,1,0,1,0"))
               (rule "commute_or" (formula "2") (term "0,0,0,0,1,0,1,0"))
               (rule "cnf_rightDist" (formula "2") (term "1,0,1,0,1,0"))
               (rule "commute_or_2" (formula "2") (term "1,1,0,1,0,1,0"))
               (rule "shift_paren_or" (formula "2") (term "0,1,0,1,0,1,0"))
               (rule "commute_or_2" (formula "2") (term "0,0,1,0,1,0,1,0"))
               (rule "shift_paren_or" (formula "2") (term "0,1,1,0,1,0,1,0"))
               (rule "shift_paren_and" (formula "2") (term "0,1,1,0,1,0"))
               (rule "commute_or" (formula "2") (term "0,0,0,1,0,1,0,1,0"))
               (rule "shift_paren_and" (formula "2") (term "1,1,0,1,0"))
               (rule "shift_paren_and" (formula "2") (term "0,1,0,1,0"))
               (rule "shift_paren_and" (formula "2") (term "1,0,1,0"))
               (rule "shift_paren_and" (formula "2") (term "0,1,0,1,0"))
               (rule "shift_paren_and" (formula "2") (term "0,0,1,0,1,0"))
               (rule "allLeft" (formula "11") (inst "t=add(Z(1(#)), iv_51)"))
               (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
               (rule "inEqSimp_homoInEq0" (formula "11") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
               (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "11") (term "0,0,0"))
               (rule "add_literals" (formula "11") (term "0,0,0,0"))
               (rule "applyEqRigid" (formula "11") (term "1,0,1") (ifseqformula "1"))
               (rule "applyEq" (formula "11") (term "0,1") (ifseqformula "14"))
               (rule "eqSymm" (formula "11") (term "1"))
               (rule "inEqSimp_sepNegMonomial1" (formula "11") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0"))
               (rule "polySimp_elimOne" (formula "11") (term "0,0,0"))
               (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0") (ifseqformula "6"))
               (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0"))
               (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0"))
               (rule "polySimp_addComm1" (formula "11") (term "0,0,0,1,0"))
               (rule "add_literals" (formula "11") (term "0,0,0,0,1,0"))
               (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1,0"))
               (rule "add_literals" (formula "11") (term "1,1,0,0,1,0"))
               (rule "times_zero_1" (formula "11") (term "1,0,0,1,0"))
               (rule "add_zero_right" (formula "11") (term "0,0,1,0"))
               (rule "leq_literals" (formula "11") (term "0,1,0"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "inEqSimp_contradInEq1" (formula "11") (term "0") (ifseqformula "7"))
               (rule "qeq_literals" (formula "11") (term "0,0"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "applyEq" (formula "15") (term "1") (ifseqformula "11"))
               (rule "allLeft" (formula "12") (inst "t=Z(0(#))"))
               (rule "leq_literals" (formula "12") (term "0,0"))
               (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "16")))
               (rule "inEqSimp_commuteGeq" (formula "12"))
               (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "12"))
               (rule "qeq_literals" (formula "3") (term "0"))
               (builtin "One Step Simplification" (formula "3"))
               (rule "closeFalse" (formula "3"))
            )
            (branch "(int)s_1[1 + iv_51] = 0 FALSE"
               (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "13"))
               (builtin "One Step Simplification" (formula "3"))
               (rule "replace_known_right" (formula "4") (term "0,0") (ifseqformula "13"))
               (builtin "One Step Simplification" (formula "4"))
               (rule "polySimp_addAssoc" (formula "14") (term "1,0"))
               (rule "add_literals" (formula "14") (term "0,1,0"))
               (rule "add_zero_left" (formula "14") (term "1,0"))
               (rule "inEqSimp_homoInEq0" (formula "4"))
               (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
               (rule "polySimp_rightDist" (formula "4") (term "1,0"))
               (rule "mul_literals" (formula "4") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "4") (term "0"))
               (rule "polySimp_addComm1" (formula "4") (term "0,0"))
               (rule "add_literals" (formula "4") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "3"))
               (rule "mul_literals" (formula "3") (term "1"))
               (rule "inEqSimp_sepNegMonomial1" (formula "4"))
               (rule "polySimp_mulLiterals" (formula "4") (term "0"))
               (rule "polySimp_elimOne" (formula "4") (term "0"))
               (rule "inEqSimp_contradEq7" (formula "13") (ifseqformula "3"))
               (rule "mul_literals" (formula "13") (term "1,0,0"))
               (rule "add_zero_right" (formula "13") (term "0,0"))
               (rule "leq_literals" (formula "13") (term "0"))
               (builtin "One Step Simplification" (formula "13"))
               (rule "false_right" (formula "13"))
               (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "4"))
               (rule "mul_literals" (formula "3") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "3") (term "0"))
               (rule "add_literals" (formula "3") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "3"))
               (rule "mul_literals" (formula "3") (term "1"))
               (rule "ifthenelse_to_or_left2" (formula "1") (term "1,0,1,0"))
               (rule "eqSymm" (formula "1") (term "0,1,1,1,0,1,0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "nnf_notAnd" (formula "1") (term "0,0,1,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,1,0,1,0"))
               (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0,1,0,1,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0,0,1,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,1,0,1,0"))
               (rule "mul_literals" (formula "1") (term "1,0,0,0,1,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,1,0,1,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,1,0,1,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,1,0,1,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,1,0,1,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,1,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,0,1,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,0,1,0"))
               (rule "mul_literals" (formula "1") (term "0,1,1,0,0,1,0,1,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,0,1,0"))
               (rule "nnf_notOr" (formula "1") (term "1,1,1,0,1,0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "seqGetAlphaCast" (formula "13") (term "1"))
               (rule "castDel" (formula "1") (term "0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "allLeft" (formula "10") (inst "t=add(Z(1(#)), iv_51)"))
               (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "14"))
               (builtin "One Step Simplification" (formula "10"))
               (rule "inEqSimp_commuteGeq" (formula "10") (term "1"))
               (rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
               (rule "mul_literals" (formula "10") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
               (rule "add_literals" (formula "10") (term "0,0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "10") (term "0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "0,0"))
               (rule "polySimp_elimOne" (formula "10") (term "0,0"))
               (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "5"))
               (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1"))
               (rule "mul_literals" (formula "10") (term "0,1,0,0,1"))
               (rule "polySimp_addAssoc" (formula "10") (term "0,0,1"))
               (rule "polySimp_addComm1" (formula "10") (term "0,0,0,1"))
               (rule "add_literals" (formula "10") (term "0,0,0,0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
               (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
               (rule "add_literals" (formula "10") (term "0,0,1"))
               (rule "leq_literals" (formula "10") (term "0,1"))
               (builtin "One Step Simplification" (formula "10"))
               (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "6"))
               (rule "qeq_literals" (formula "10") (term "0"))
               (builtin "One Step Simplification" (formula "10"))
               (rule "closeFalse" (formula "10"))
            )
         )
         (branch " 0 <= (int)seqDef{int u;}(0, s_1.length - 1, if ((int)s_1[u + 1] = 0) then ((int)s_1[0] - 1) else ((int)s_1[u + 1] - 1))[iv_51] & (int)seqDef{int u;}(0, s_1.length - 1, if ((int)s_1[u + 1] = 0) then ((int)s_1[0] - 1) else ((int)s_1[u + 1] - 1))[iv_51] < f_s2.length - 1 FALSE"
            (rule "andRight" (formula "11") (userinteraction))
            (branch
               (rule "getOfSeqDef" (formula "11") (term "1") (userinteraction))
               (rule "ifthenelse_split" (formula "11") (term "1") (userinteraction))
               (branch "0 <= iv_51 & iv_51 < s_1.length - 1 - 0 TRUE"
                  (rule "castDel" (formula "12") (term "1") (userinteraction))
                  (rule "ifthenelse_split" (formula "12") (term "1") (userinteraction))
                  (branch "(int)s_1[iv_51 + 0 + 1] = 0 TRUE"
                     (rule "add_zero_right" (formula "1") (term "0,1,0") (userinteraction))
                     (rule "seqNPermInjective" (formula "8") (inst "jv=jv") (inst "iv=iv") (userinteraction))
                     (rule "instAll" (formula "14") (term "1,0,1") (ifseqformula "8") (userinteraction))
                     (rule "instAll" (formula "2") (term "1,0") (ifseqformula "1") (userinteraction))
                     (rule "impLeft" (formula "2") (userinteraction))
                     (branch
                        (rule "andRight" (formula "15") (userinteraction))
                        (branch
                           (rule "castDel" (formula "17") (term "1"))
                           (rule "leq_literals" (formula "15") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "15"))
                           (rule "leq_literals" (formula "1") (term "0,0,0,0,0,0"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "andLeft" (formula "3"))
                           (rule "andLeft" (formula "4"))
                           (rule "eqSymm" (formula "11") (term "1,0"))
                           (rule "eqSymm" (formula "9") (term "1,0,0,0"))
                           (rule "eqSymm" (formula "14"))
                           (rule "eqSymm" (formula "9") (term "1,0,0"))
                           (rule "eqSymm" (formula "7"))
                           (rule "eqSymm" (formula "18") (term "1,0,1,0"))
                           (rule "eqSymm" (formula "1") (term "1,0"))
                           (rule "eqSymm" (formula "1") (term "1,0,0"))
                           (rule "polySimp_elimSub" (formula "6") (term "2,2,0,1"))
                           (rule "mul_literals" (formula "6") (term "1,2,2,0,1"))
                           (rule "polySimp_elimSub" (formula "16") (term "1"))
                           (rule "mul_literals" (formula "16") (term "1,1"))
                           (rule "polySimp_elimSub" (formula "6") (term "1,0,1"))
                           (rule "mul_literals" (formula "6") (term "1,1,0,1"))
                           (rule "polySimp_elimSub" (formula "6") (term "1,2,0,1"))
                           (rule "mul_literals" (formula "6") (term "1,1,2,0,1"))
                           (rule "polySimp_elimSub" (formula "3") (term "1"))
                           (rule "mul_literals" (formula "3") (term "1,1"))
                           (rule "add_zero_right" (formula "3") (term "1"))
                           (rule "polySimp_elimSub" (formula "4") (term "1"))
                           (rule "mul_literals" (formula "4") (term "1,1"))
                           (rule "polySimp_elimSub" (formula "3") (term "1"))
                           (rule "mul_literals" (formula "3") (term "1,1"))
                           (rule "polySimp_addComm0" (formula "17") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "2") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "6") (term "1,0,0,2,0,1"))
                           (rule "polySimp_addComm0" (formula "15") (term "1,1,0"))
                           (rule "polySimp_addComm0" (formula "15") (term "0,1"))
                           (rule "polySimp_addComm0" (formula "6") (term "1,0,2,2,0,1"))
                           (rule "polySimp_addComm0" (formula "16") (term "1"))
                           (rule "polySimp_addComm0" (formula "6") (term "1,0,1"))
                           (rule "polySimp_addComm0" (formula "6") (term "1,2,0,1"))
                           (rule "polySimp_addComm0" (formula "4") (term "1"))
                           (rule "polySimp_addComm0" (formula "3") (term "1"))
                           (rule "polySimp_addComm0" (formula "6") (term "2,2,0,1"))
                           (rule "lenOfSeqSub" (formula "18") (term "1,0,0,0"))
                           (rule "polySimp_elimSub" (formula "18") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "18") (term "1,1,1,0,0,0"))
                           (rule "polySimp_addComm0" (formula "18") (term "1,1,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,1,0"))
                           (rule "polySimp_addComm1" (formula "18") (term "0,1,0,0,1,0"))
                           (rule "inEqSimp_gtToGeq" (formula "13"))
                           (rule "mul_literals" (formula "13") (term "1,0,0"))
                           (rule "add_zero_right" (formula "13") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0"))
                           (rule "add_zero_right" (formula "15") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,0,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0,0"))
                           (rule "lenOfSeqDef" (formula "6") (term "1"))
                           (rule "polySimp_elimSub" (formula "6") (term "1,1"))
                           (rule "mul_literals" (formula "6") (term "1,1,1"))
                           (rule "add_zero_right" (formula "6") (term "1,1"))
                           (rule "inEqSimp_leqRight" (formula "16"))
                           (rule "add_zero_right" (formula "1") (term "0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "16") (term "1"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1"))
                           (rule "polySimp_addComm1" (formula "16") (term "0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,0,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "5"))
                           (rule "polySimp_rightDist" (formula "5") (term "1,0,0"))
                           (rule "mul_literals" (formula "5") (term "0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "6"))
                           (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "4"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
                           (rule "mul_literals" (formula "4") (term "0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "18") (term "0,1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "18") (term "0,0,1,0,0,0"))
                           (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0,0,1"))
                           (rule "add_literals" (formula "16") (term "0,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "5") (term "0,0"))
                           (rule "add_literals" (formula "5") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "5") (term "0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                           (rule "add_literals" (formula "4") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0"))
                           (rule "replace_known_left" (formula "16") (term "1") (ifseqformula "4"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "inEqSimp_ltToLeq" (formula "7") (term "0,1"))
                           (rule "add_zero_right" (formula "7") (term "0,0,1"))
                           (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1"))
                           (rule "mul_literals" (formula "7") (term "0,1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "7") (term "0,0,1"))
                           (rule "add_literals" (formula "7") (term "0,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "7"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "7") (term "0"))
                           (rule "inEqSimp_homoInEq0" (formula "16") (term "1"))
                           (rule "mul_literals" (formula "16") (term "1,0,1"))
                           (rule "add_zero_right" (formula "16") (term "0,1"))
                           (rule "applyEq" (formula "4") (term "0,1,0") (ifseqformula "9"))
                           (rule "applyEqRigid" (formula "15") (term "0,1,0,0") (ifseqformula "8"))
                           (rule "applyEq" (formula "6") (term "1,1,0,1,0") (ifseqformula "8"))
                           (rule "applyEq" (formula "6") (term "0,1,0,0,0,1,0") (ifseqformula "8"))
                           (rule "applyEq" (formula "17") (term "2,0,0,1,0,1,0") (ifseqformula "7"))
                           (rule "applyEqRigid" (formula "2") (term "0,1,0,0,0,0,0,0") (ifseqformula "8"))
                           (rule "applyEqRigid" (formula "2") (term "0,1,0,0,1,0,0,0") (ifseqformula "8"))
                           (rule "applyEq" (formula "9") (term "0,1,0,0,1,0,0,0,0,0,0") (ifseqformula "8"))
                           (rule "applyEqRigid" (formula "9") (term "0,1,0,0,1,0,0,0,0") (ifseqformula "8"))
                           (rule "applyEqRigid" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "8"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "17") (term "0,1,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                           (rule "mul_literals" (formula "13") (term "1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "17") (term "0,0,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "17") (term "0,0,1,0,0,0"))
                           (rule "inEqSimp_invertInEq1" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                           (rule "polySimp_elimOne" (formula "4") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1"))
                           (rule "mul_literals" (formula "15") (term "1,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "0,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "0,0"))
                           (rule "replace_known_left" (formula "15") (term "0") (ifseqformula "13"))
                           (builtin "One Step Simplification" (formula "15"))
                           (rule "inEqSimp_geqRight" (formula "15"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "7") (term "0,0,0,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "3") (term "0,0,0,0,0,0"))
                           (rule "replace_known_left" (formula "3") (term "0,0,0,0,0") (ifseqformula "14"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,1,0,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,1,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                           (rule "polySimp_elimOne" (formula "7") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0,0"))
                           (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "6") (term "0"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "closeFalse" (formula "6"))
                        )
                        (branch
                           (rule "applyEq" (formula "15") (term "1") (ifseqformula "2") (userinteraction))
                           (rule "andLeft" (formula "3"))
                           (rule "andLeft" (formula "4"))
                           (rule "sub_zero_2" (formula "3") (term "1") (userinteraction))
                           (rule "seqNPermRange" (formula "10") (inst "iv=iv") (userinteraction))
                           (rule "instAll" (formula "16") (term "1,0") (ifseqformula "10") (userinteraction))
                           (rule "castDel" (formula "19") (term "1"))
                           (rule "leq_literals" (formula "1") (term "0,0"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "leq_literals" (formula "2") (term "0,0,0,0,0,0"))
                           (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "8"))
                           (rule "eqSymm" (formula "13") (term "1,0"))
                           (rule "eqSymm" (formula "16"))
                           (rule "eqSymm" (formula "10") (term "1,0,0,0"))
                           (rule "eqSymm" (formula "10") (term "1,0,0"))
                           (rule "eqSymm" (formula "20") (term "1,0,1,0"))
                           (rule "eqSymm" (formula "2") (term "1,0"))
                           (rule "eqSymm" (formula "2") (term "1,0,0"))
                           (rule "polySimp_elimSub" (formula "7") (term "1,2,0,1"))
                           (rule "mul_literals" (formula "7") (term "1,1,2,0,1"))
                           (rule "polySimp_elimSub" (formula "7") (term "2,2,0,1"))
                           (rule "mul_literals" (formula "7") (term "1,2,2,0,1"))
                           (rule "polySimp_elimSub" (formula "5") (term "1"))
                           (rule "mul_literals" (formula "5") (term "1,1"))
                           (rule "polySimp_elimSub" (formula "4") (term "1"))
                           (rule "mul_literals" (formula "4") (term "1,1"))
                           (rule "polySimp_elimSub" (formula "7") (term "1,0,1"))
                           (rule "mul_literals" (formula "7") (term "1,1,0,1"))
                           (rule "polySimp_elimSub" (formula "18") (term "1"))
                           (rule "mul_literals" (formula "18") (term "1,1"))
                           (rule "polySimp_addComm0" (formula "19") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "7") (term "1,0,0,2,0,1"))
                           (rule "polySimp_addComm0" (formula "3") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "7") (term "1,2,0,1"))
                           (rule "polySimp_addComm0" (formula "7") (term "1,0,2,2,0,1"))
                           (rule "polySimp_addComm0" (formula "5") (term "1"))
                           (rule "polySimp_addComm0" (formula "4") (term "1"))
                           (rule "polySimp_addComm0" (formula "7") (term "1,0,1"))
                           (rule "polySimp_addComm0" (formula "18") (term "1"))
                           (rule "polySimp_addComm0" (formula "7") (term "2,2,0,1"))
                           (rule "lenOfSeqSub" (formula "20") (term "1,0,0,0"))
                           (rule "polySimp_elimSub" (formula "20") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "20") (term "1,1,1,0,0,0"))
                           (rule "polySimp_addComm0" (formula "20") (term "1,1,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,1,0"))
                           (rule "polySimp_addComm1" (formula "20") (term "0,1,0,0,1,0"))
                           (rule "inEqSimp_gtToGeq" (formula "15"))
                           (rule "mul_literals" (formula "15") (term "1,0,0"))
                           (rule "add_zero_right" (formula "15") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "1") (term "1,1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,1"))
                           (rule "inEqSimp_ltToLeq" (formula "1") (term "0"))
                           (rule "add_zero_right" (formula "1") (term "0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,0,0,0"))
                           (rule "add_zero_right" (formula "2") (term "0,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0,0"))
                           (rule "lenOfSeqDef" (formula "7") (term "1"))
                           (rule "polySimp_elimSub" (formula "7") (term "1,1"))
                           (rule "mul_literals" (formula "7") (term "1,1,1"))
                           (rule "add_zero_right" (formula "7") (term "1,1"))
                           (rule "inEqSimp_leqRight" (formula "18"))
                           (rule "add_zero_right" (formula "1") (term "0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "6"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,0,0"))
                           (rule "mul_literals" (formula "6") (term "0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "5"))
                           (rule "polySimp_rightDist" (formula "5") (term "1,0,0"))
                           (rule "mul_literals" (formula "5") (term "0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "0,1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "20") (term "0,0,1,0,0,0"))
                           (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "12") (term "0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,0,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "7"))
                           (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "2") (term "0,1"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "6") (term "0,0"))
                           (rule "add_literals" (formula "6") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "6") (term "0"))
                           (rule "polySimp_addAssoc" (formula "5") (term "0,0"))
                           (rule "add_literals" (formula "5") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "5") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "8") (term "0,1"))
                           (rule "add_zero_right" (formula "8") (term "0,0,1"))
                           (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1"))
                           (rule "mul_literals" (formula "8") (term "0,1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "8") (term "0,0,1"))
                           (rule "add_literals" (formula "8") (term "0,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "8"))
                           (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "8") (term "0"))
                           (rule "applyEqRigid" (formula "5") (term "0,1,0") (ifseqformula "10"))
                           (rule "applyEqRigid" (formula "19") (term "2,0,0,1,0,1,0") (ifseqformula "8"))
                           (rule "applyEq" (formula "7") (term "1,1,0,1,0") (ifseqformula "9"))
                           (rule "applyEq" (formula "7") (term "0,1,0,0,0,1,0") (ifseqformula "9"))
                           (rule "applyEqRigid" (formula "3") (term "0,1,0,0,0,0,0,0") (ifseqformula "9"))
                           (rule "applyEq" (formula "2") (term "0,1,0,0") (ifseqformula "9"))
                           (rule "applyEq" (formula "11") (term "0,1,0,0,1,1,0") (ifseqformula "9"))
                           (rule "applyEqRigid" (formula "2") (term "0,1,0,0,1,1") (ifseqformula "9"))
                           (rule "applyEq" (formula "13") (term "0,1,0,0,1,0,0") (ifseqformula "9"))
                           (rule "applyEqRigid" (formula "10") (term "0,1,0,0,1,0,0,0,0,0,0") (ifseqformula "9"))
                           (rule "applyEq" (formula "3") (term "0,1,0,0,1,0,0,0") (ifseqformula "9"))
                           (rule "applyEqRigid" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "9"))
                           (rule "applyEq" (formula "10") (term "0,1,0,0,1,0,0,0,0") (ifseqformula "9"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "0,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "19") (term "0,1,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                           (rule "mul_literals" (formula "15") (term "1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "0,0,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "19") (term "0,0,1,0,0,0"))
                           (rule "inEqSimp_invertInEq1" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                           (rule "polySimp_elimOne" (formula "5") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                           (rule "polySimp_elimOne" (formula "7") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "3") (term "0,0,0,0,0,0"))
                           (rule "replace_known_left" (formula "3") (term "0,0,0,0,0") (ifseqformula "15"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0,0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0,0"))
                           (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "15"))
                           (builtin "One Step Simplification" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,1,1,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,1,1,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,1,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,1,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,1,0,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,1,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "0,0,0"))
                           (rule "polySimp_elimOne" (formula "8") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "4") (term "0,1,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "mul_literals" (formula "3") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                           (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "18"))
                           (rule "add_literals" (formula "1") (term "1"))
                           (rule "inEqSimp_contradEq3" (formula "18") (ifseqformula "1"))
                           (rule "mul_literals" (formula "18") (term "1,0,0"))
                           (rule "add_zero_right" (formula "18") (term "0,0"))
                           (rule "qeq_literals" (formula "18") (term "0"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "false_right" (formula "18"))
                           (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "2") (term "0"))
                           (builtin "One Step Simplification" (formula "2"))
                           (rule "closeFalse" (formula "2"))
                        )
                     )
                     (branch
                        (rule "castDel" (formula "17") (term "1"))
                        (rule "leq_literals" (formula "1") (term "0,0,0,0,0,0"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "andLeft" (formula "5"))
                        (rule "andLeft" (formula "4"))
                        (rule "eqSymm" (formula "18") (term "1,0,1,0"))
                        (rule "eqSymm" (formula "15"))
                        (rule "eqSymm" (formula "12") (term "1,0"))
                        (rule "eqSymm" (formula "8"))
                        (rule "eqSymm" (formula "10") (term "1,0,0,0"))
                        (rule "eqSymm" (formula "10") (term "1,0,0"))
                        (rule "eqSymm" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "polySimp_elimSub" (formula "7") (term "2,2,0,1"))
                        (rule "mul_literals" (formula "7") (term "1,2,2,0,1"))
                        (rule "polySimp_elimSub" (formula "7") (term "1,0,1"))
                        (rule "mul_literals" (formula "7") (term "1,1,0,1"))
                        (rule "polySimp_homoEq" (formula "2"))
                        (rule "mul_literals" (formula "2") (term "1,0"))
                        (rule "add_zero_right" (formula "2") (term "0"))
                        (rule "polySimp_elimSub" (formula "16") (term "1"))
                        (rule "mul_literals" (formula "16") (term "1,1"))
                        (rule "polySimp_elimSub" (formula "7") (term "1,2,0,1"))
                        (rule "mul_literals" (formula "7") (term "1,1,2,0,1"))
                        (rule "polySimp_elimSub" (formula "5") (term "1"))
                        (rule "mul_literals" (formula "5") (term "1,1"))
                        (rule "polySimp_elimSub" (formula "4") (term "0,1"))
                        (rule "mul_literals" (formula "4") (term "1,0,1"))
                        (rule "polySimp_elimSub" (formula "4") (term "1"))
                        (rule "times_zero_2" (formula "4") (term "1,1"))
                        (rule "polySimp_addLiterals" (formula "4") (term "1"))
                        (rule "polySimp_addComm0" (formula "17") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "3") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "7") (term "1,0,0,2,0,1"))
                        (rule "polySimp_addComm0" (formula "7") (term "1,0,2,2,0,1"))
                        (rule "polySimp_addComm0" (formula "7") (term "1,0,1"))
                        (rule "polySimp_addComm0" (formula "2") (term "0"))
                        (rule "polySimp_addComm0" (formula "16") (term "1"))
                        (rule "polySimp_addComm0" (formula "7") (term "1,2,0,1"))
                        (rule "polySimp_addComm0" (formula "5") (term "1"))
                        (rule "polySimp_addComm0" (formula "4") (term "1"))
                        (rule "polySimp_addComm0" (formula "7") (term "2,2,0,1"))
                        (rule "lenOfSeqSub" (formula "18") (term "1,0,0,0"))
                        (rule "polySimp_elimSub" (formula "18") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "18") (term "1,1,1,0,0,0"))
                        (rule "polySimp_addComm0" (formula "18") (term "1,1,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,0,0,0,0"))
                        (rule "inEqSimp_gtToGeq" (formula "14"))
                        (rule "mul_literals" (formula "14") (term "1,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,1,0"))
                        (rule "polySimp_addComm1" (formula "18") (term "0,1,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,0,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0"))
                        (rule "lenOfSeqDef" (formula "7") (term "1"))
                        (rule "polySimp_elimSub" (formula "7") (term "1,1"))
                        (rule "mul_literals" (formula "7") (term "1,1,1"))
                        (rule "add_zero_right" (formula "7") (term "1,1"))
                        (rule "inEqSimp_leqRight" (formula "16"))
                        (rule "add_zero_right" (formula "1") (term "0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "7"))
                        (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "6"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,0,0"))
                        (rule "mul_literals" (formula "6") (term "0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "5"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,0,0"))
                        (rule "mul_literals" (formula "5") (term "0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "18") (term "0,1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "18") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,0"))
                        (rule "add_literals" (formula "6") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "6") (term "0"))
                        (rule "polySimp_addAssoc" (formula "5") (term "0,0"))
                        (rule "add_literals" (formula "5") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "8") (term "0,1"))
                        (rule "add_zero_right" (formula "8") (term "0,0,1"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0,1"))
                        (rule "add_literals" (formula "8") (term "0,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "8"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0"))
                        (rule "applyEq" (formula "8") (term "0,1,0,0,0,1,0") (ifseqformula "10"))
                        (rule "applyEqRigid" (formula "5") (term "0,1,0") (ifseqformula "10"))
                        (rule "applyEqRigid" (formula "2") (term "0,1,0,0,0,0,0,0") (ifseqformula "9"))
                        (rule "applyEqRigid" (formula "17") (term "2,0,0,1,0,1,0") (ifseqformula "8"))
                        (rule "applyEqRigid" (formula "7") (term "1,1,0,1,0") (ifseqformula "9"))
                        (rule "applyEqRigid" (formula "10") (term "0,1,0,0,1,0,0,0,0") (ifseqformula "9"))
                        (rule "applyEqRigid" (formula "12") (term "0,1,0,0,1,0,0") (ifseqformula "9"))
                        (rule "applyEqRigid" (formula "2") (term "0,1,0,0,1,0,0,0") (ifseqformula "9"))
                        (rule "applyEqRigid" (formula "10") (term "0,1,0,0,1,0,0,0,0,0,0") (ifseqformula "9"))
                        (rule "polySimp_sepPosMonomial" (formula "3"))
                        (rule "mul_literals" (formula "3") (term "1"))
                        (rule "applyEq" (formula "4") (term "1,1,0") (ifseqformula "3"))
                        (rule "add_literals" (formula "4") (term "1,0"))
                        (rule "applyEq" (formula "16") (term "1,1,0") (ifseqformula "3"))
                        (rule "add_literals" (formula "16") (term "1,0"))
                        (rule "applyEqRigid" (formula "6") (term "0") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "6"))
                        (rule "closeFalse" (formula "6"))
                     )
                  )
                  (branch "(int)s_1[iv_51 + 0 + 1] = 0 FALSE"
                     (rule "add_zero_right" (formula "12") (term "0,1,0") (userinteraction))
                     (rule "add_zero_right" (formula "13") (term "0,1,0,1") (userinteraction))
                     (rule "seqNPermRange" (formula "7") (inst "iv=iv") (userinteraction))
                     (rule "instAll" (formula "13") (term "1,0") (ifseqformula "7") (userinteraction))
                     (rule "castDel" (formula "16") (term "1"))
                     (rule "andLeft" (formula "2"))
                     (rule "andLeft" (formula "3"))
                     (rule "eqSymm" (formula "6"))
                     (rule "eqSymm" (formula "17") (term "1,0,1,0"))
                     (rule "eqSymm" (formula "13"))
                     (rule "eqSymm" (formula "10") (term "1,0"))
                     (rule "polySimp_elimSub" (formula "5") (term "1,0,1"))
                     (rule "mul_literals" (formula "5") (term "1,1,0,1"))
                     (rule "polySimp_elimSub" (formula "5") (term "2,2,0,1"))
                     (rule "mul_literals" (formula "5") (term "1,2,2,0,1"))
                     (rule "polySimp_elimSub" (formula "5") (term "1,2,0,1"))
                     (rule "mul_literals" (formula "5") (term "1,1,2,0,1"))
                     (rule "polySimp_elimSub" (formula "15") (term "1"))
                     (rule "mul_literals" (formula "15") (term "1,1"))
                     (rule "polySimp_elimSub" (formula "2") (term "1"))
                     (rule "mul_literals" (formula "2") (term "1,1"))
                     (rule "add_zero_right" (formula "2") (term "1"))
                     (rule "polySimp_elimSub" (formula "3") (term "1"))
                     (rule "mul_literals" (formula "3") (term "1,1"))
                     (rule "polySimp_elimSub" (formula "2") (term "1"))
                     (rule "mul_literals" (formula "2") (term "1,1"))
                     (rule "polySimp_addComm0" (formula "16") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "1,1,0,1"))
                     (rule "polySimp_addComm0" (formula "14") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0,1,0"))
                     (rule "polySimp_addComm0" (formula "5") (term "1,0,0,2,0,1"))
                     (rule "polySimp_addComm0" (formula "1") (term "1,0,1,1"))
                     (rule "polySimp_addComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm0" (formula "5") (term "1,0,1"))
                     (rule "polySimp_addComm0" (formula "5") (term "1,0,2,2,0,1"))
                     (rule "polySimp_addComm0" (formula "5") (term "1,2,0,1"))
                     (rule "polySimp_addComm0" (formula "15") (term "1,0,1"))
                     (rule "polySimp_addComm0" (formula "3") (term "1"))
                     (rule "polySimp_addComm0" (formula "2") (term "1"))
                     (rule "polySimp_addComm0" (formula "5") (term "2,2,0,1"))
                     (rule "polySimp_addComm0" (formula "15") (term "1"))
                     (rule "lenOfSeqSub" (formula "17") (term "1,0,0,0"))
                     (rule "polySimp_elimSub" (formula "17") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "17") (term "1,1,1,0,0,0"))
                     (rule "polySimp_addComm0" (formula "17") (term "1,1,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "8") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,1,0"))
                     (rule "inEqSimp_gtToGeq" (formula "12"))
                     (rule "times_zero_1" (formula "12") (term "1,0,0"))
                     (rule "add_literals" (formula "12") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,1,0"))
                     (rule "polySimp_addComm1" (formula "17") (term "0,1,0,0,1,0"))
                     (rule "lenOfSeqDef" (formula "5") (term "1"))
                     (rule "polySimp_elimSub" (formula "5") (term "1,1"))
                     (rule "mul_literals" (formula "5") (term "1,1,1"))
                     (rule "add_zero_right" (formula "5") (term "1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
                     (rule "inEqSimp_leqRight" (formula "15"))
                     (rule "add_zero_right" (formula "1") (term "0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "2") (term "1,1"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,1"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0"))
                     (rule "add_literals" (formula "2") (term "0,0,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "4"))
                     (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
                     (rule "mul_literals" (formula "4") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "3"))
                     (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                     (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "17") (term "0,1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "17") (term "0,0,1,0,0,0"))
                     (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "5"))
                     (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                     (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                     (rule "add_literals" (formula "4") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "4") (term "0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                     (rule "add_literals" (formula "3") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0"))
                     (rule "replace_known_left" (formula "2") (term "1,0") (ifseqformula "3"))
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "inEqSimp_ltToLeq" (formula "6") (term "0,1"))
                     (rule "add_zero_right" (formula "6") (term "0,0,1"))
                     (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1"))
                     (rule "mul_literals" (formula "6") (term "0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "6") (term "0,0,1"))
                     (rule "add_literals" (formula "6") (term "0,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "6"))
                     (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "6") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "2") (term "0,1"))
                     (rule "inEqSimp_homoInEq0" (formula "2") (term "0"))
                     (rule "mul_literals" (formula "2") (term "1,0,0"))
                     (rule "add_zero_right" (formula "2") (term "0,0"))
                     (rule "applyEqRigid" (formula "6") (term "1,1,0,1,0") (ifseqformula "8"))
                     (rule "applyEqRigid" (formula "3") (term "0,1,0") (ifseqformula "8"))
                     (rule "applyEq" (formula "5") (term "0,1,0,0,0,1,0") (ifseqformula "7"))
                     (rule "applyEqRigid" (formula "16") (term "2,0,0,1,0,1,0") (ifseqformula "6"))
                     (rule "applyEqRigid" (formula "8") (term "0,1,0,0,1,1,0") (ifseqformula "7"))
                     (rule "applyEqRigid" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "7"))
                     (rule "applyEqRigid" (formula "2") (term "0,1,0,0,1,1") (ifseqformula "7"))
                     (rule "applyEq" (formula "10") (term "0,1,0,0,1,0,0") (ifseqformula "7"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                     (rule "mul_literals" (formula "12") (term "1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "16") (term "0,1,0,0,1,0"))
                     (rule "inEqSimp_invertInEq1" (formula "1"))
                     (rule "times_zero_2" (formula "1") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "0,0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "16") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                     (rule "polySimp_elimOne" (formula "3") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "0"))
                     (rule "mul_literals" (formula "2") (term "1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "0,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "5") (term "0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,1,1,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,1,0"))
                     (rule "mul_literals" (formula "8") (term "0,1,1,1,0"))
                     (rule "polySimp_elimOne" (formula "8") (term "1,1,1,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,1"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,1,1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,1,1"))
                     (rule "mul_literals" (formula "2") (term "0,1,1,1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,1"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,1,1,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                     (rule "polySimp_elimOne" (formula "5") (term "0"))
                     (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "14"))
                     (rule "add_literals" (formula "1") (term "1"))
                     (rule "inEqSimp_contradEq3" (formula "14") (ifseqformula "1"))
                     (rule "mul_literals" (formula "14") (term "1,0,0"))
                     (rule "add_literals" (formula "14") (term "0,0"))
                     (rule "qeq_literals" (formula "14") (term "0"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "false_right" (formula "14"))
                     (rule "inEqSimp_subsumption1" (formula "2") (term "0") (ifseqformula "4"))
                     (rule "leq_literals" (formula "2") (term "0,0"))
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "2") (term "0"))
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
               )
               (branch "0 <= iv_51 & iv_51 < s_1.length - 1 - 0 FALSE"
                  (rule "castDel" (formula "13") (term "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "eqSymm" (formula "4"))
                  (rule "eqSymm" (formula "14") (term "1,0,1,0"))
                  (rule "eqSymm" (formula "10"))
                  (rule "eqSymm" (formula "7") (term "1,0"))
                  (rule "replace_known_left" (formula "11") (term "0") (ifseqformula "2"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "polySimp_elimSub" (formula "3") (term "1,0,1"))
                  (rule "mul_literals" (formula "3") (term "1,1,0,1"))
                  (rule "polySimp_elimSub" (formula "3") (term "2,2,0,1"))
                  (rule "mul_literals" (formula "3") (term "1,2,2,0,1"))
                  (rule "polySimp_elimSub" (formula "3") (term "1,2,0,1"))
                  (rule "mul_literals" (formula "3") (term "1,1,2,0,1"))
                  (rule "polySimp_elimSub" (formula "1") (term "1"))
                  (rule "mul_literals" (formula "1") (term "1,1"))
                  (rule "polySimp_elimSub" (formula "11") (term "1"))
                  (rule "mul_literals" (formula "11") (term "1,1"))
                  (rule "add_zero_right" (formula "11") (term "1"))
                  (rule "polySimp_elimSub" (formula "11") (term "1"))
                  (rule "mul_literals" (formula "11") (term "1,1"))
                  (rule "polySimp_addComm0" (formula "3") (term "1,0,0,2,0,1"))
                  (rule "polySimp_addComm0" (formula "13") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "3") (term "1,0,1"))
                  (rule "polySimp_addComm0" (formula "3") (term "1,0,2,2,0,1"))
                  (rule "polySimp_addComm0" (formula "3") (term "1,2,0,1"))
                  (rule "polySimp_addComm0" (formula "1") (term "1"))
                  (rule "polySimp_addComm0" (formula "11") (term "1"))
                  (rule "polySimp_addComm0" (formula "3") (term "2,2,0,1"))
                  (rule "lenOfSeqSub" (formula "14") (term "1,0,0,0"))
                  (rule "polySimp_elimSub" (formula "14") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "14") (term "1,1,1,0,0,0"))
                  (rule "polySimp_addComm0" (formula "14") (term "1,1,0,0,0"))
                  (rule "inEqSimp_leqRight" (formula "12"))
                  (rule "add_zero_right" (formula "1") (term "0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                  (rule "inEqSimp_gtToGeq" (formula "10"))
                  (rule "mul_literals" (formula "10") (term "1,0,0"))
                  (rule "add_literals" (formula "10") (term "0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,0"))
                  (rule "polySimp_addComm1" (formula "14") (term "0,1,0,0,1,0"))
                  (rule "lenOfSeqDef" (formula "4") (term "1"))
                  (rule "polySimp_elimSub" (formula "4") (term "1,1"))
                  (rule "mul_literals" (formula "4") (term "1,1,1"))
                  (rule "add_zero_right" (formula "4") (term "1,1"))
                  (rule "inEqSimp_ltRight" (formula "12"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "3"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                  (rule "add_literals" (formula "3") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "14") (term "0,1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "14") (term "0,0,1,0,0,0"))
                  (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "4"))
                  (rule "inEqSimp_ltToLeq" (formula "5") (term "0,1"))
                  (rule "add_zero_right" (formula "5") (term "0,0,1"))
                  (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "5") (term "0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "5") (term "0,0,1"))
                  (rule "add_literals" (formula "5") (term "0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "5"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "5") (term "0"))
                  (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "7"))
                  (rule "applyEqRigid" (formula "5") (term "0,1,0,0,0,1,0") (ifseqformula "7"))
                  (rule "applyEqRigid" (formula "5") (term "1,1,0,1,0") (ifseqformula "7"))
                  (rule "applyEq" (formula "14") (term "2,0,0,1,0,1,0") (ifseqformula "6"))
                  (rule "applyEqRigid" (formula "9") (term "0,1,0,0,1,0,0") (ifseqformula "7"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                  (rule "mul_literals" (formula "11") (term "1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "14") (term "0,1,0,0,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                  (rule "polySimp_elimOne" (formula "3") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "0,0,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "14") (term "0,0,1,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "5") (term "0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                  (rule "polySimp_elimOne" (formula "5") (term "0"))
                  (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "1"))
                  (rule "andLeft" (formula "3"))
                  (rule "inEqSimp_homoInEq1" (formula "3"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                  (rule "add_literals" (formula "3") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "1,1,0"))
                  (rule "times_zero_1" (formula "3") (term "1,0"))
                  (rule "add_zero_right" (formula "3") (term "0"))
                  (rule "leq_literals" (formula "3"))
                  (rule "closeFalse" (formula "3"))
               )
            )
            (branch
               (rule "getOfSeqDef" (formula "11") (term "0") (userinteraction))
               (rule "ifthenelse_split" (formula "11") (term "0") (userinteraction))
               (branch "0 <= iv_51 & iv_51 < s_1.length - 1 - 0 TRUE"
                  (rule "add_zero_right" (formula "12") (term "0,1,0,0,0,0") (userinteraction))
                  (rule "add_zero_right" (formula "12") (term "0,1,0,2,0,0") (userinteraction))
                  (rule "castDel" (formula "12") (term "0") (userinteraction))
                  (rule "ifthenelse_split" (formula "12") (term "0") (userinteraction))
                  (branch "(int)s_1[iv_51 + 1] = 0 TRUE"
                     (rule "seqNPermRange" (formula "8") (inst "iv=iv") (userinteraction))
                     (rule "instAll" (formula "14") (term "1,0,0") (ifseqformula "8") (userinteraction))
                     (rule "castDel" (formula "16") (term "1"))
                     (rule "leq_literals" (formula "1") (term "0,0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "andLeft" (formula "4"))
                     (rule "andLeft" (formula "3"))
                     (rule "eqSymm" (formula "11") (term "1,0"))
                     (rule "eqSymm" (formula "14"))
                     (rule "eqSymm" (formula "7"))
                     (rule "eqSymm" (formula "17") (term "1,0,1,0"))
                     (rule "polySimp_elimSub" (formula "15") (term "0"))
                     (rule "mul_literals" (formula "15") (term "1,0"))
                     (rule "polySimp_elimSub" (formula "15") (term "1"))
                     (rule "mul_literals" (formula "15") (term "1,1"))
                     (rule "polySimp_elimSub" (formula "6") (term "1,2,0,1"))
                     (rule "mul_literals" (formula "6") (term "1,1,2,0,1"))
                     (rule "polySimp_elimSub" (formula "6") (term "1,0,1"))
                     (rule "mul_literals" (formula "6") (term "1,1,0,1"))
                     (rule "polySimp_elimSub" (formula "6") (term "2,2,0,1"))
                     (rule "mul_literals" (formula "6") (term "1,2,2,0,1"))
                     (rule "polySimp_elimSub" (formula "4") (term "1"))
                     (rule "mul_literals" (formula "4") (term "1,1"))
                     (rule "polySimp_elimSub" (formula "3") (term "0,1"))
                     (rule "mul_literals" (formula "3") (term "1,0,1"))
                     (rule "polySimp_elimSub" (formula "3") (term "1"))
                     (rule "times_zero_2" (formula "3") (term "1,1"))
                     (rule "polySimp_addLiterals" (formula "3") (term "1"))
                     (rule "polySimp_addComm0" (formula "16") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "6") (term "1,0,0,2,0,1"))
                     (rule "polySimp_addComm0" (formula "2") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "15") (term "0"))
                     (rule "polySimp_addComm0" (formula "15") (term "1"))
                     (rule "polySimp_addComm0" (formula "6") (term "1,2,0,1"))
                     (rule "polySimp_addComm0" (formula "6") (term "1,0,1"))
                     (rule "polySimp_addComm0" (formula "6") (term "1,0,2,2,0,1"))
                     (rule "polySimp_addComm0" (formula "4") (term "1"))
                     (rule "polySimp_addComm0" (formula "3") (term "1"))
                     (rule "polySimp_addComm0" (formula "6") (term "2,2,0,1"))
                     (rule "lenOfSeqSub" (formula "17") (term "1,0,0,0"))
                     (rule "polySimp_elimSub" (formula "17") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "17") (term "1,1,1,0,0,0"))
                     (rule "polySimp_addComm0" (formula "17") (term "1,1,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_gtToGeq" (formula "13"))
                     (rule "mul_literals" (formula "13") (term "1,0,0"))
                     (rule "add_literals" (formula "13") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "9") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,1,0"))
                     (rule "polySimp_addComm1" (formula "17") (term "0,1,0,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "1") (term "0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "1") (term "1,1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,1"))
                     (rule "lenOfSeqDef" (formula "6") (term "1"))
                     (rule "polySimp_elimSub" (formula "6") (term "1,1"))
                     (rule "mul_literals" (formula "6") (term "1,1,1"))
                     (rule "add_zero_right" (formula "6") (term "1,1"))
                     (rule "inEqSimp_ltRight" (formula "15"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                     (rule "mul_literals" (formula "1") (term "0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "5"))
                     (rule "polySimp_rightDist" (formula "5") (term "1,0,0"))
                     (rule "mul_literals" (formula "5") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "4"))
                     (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
                     (rule "mul_literals" (formula "4") (term "0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "17") (term "0,1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "17") (term "0,0,1,0,0,0"))
                     (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "5") (term "0,0"))
                     (rule "add_literals" (formula "5") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "5") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "6"))
                     (rule "inEqSimp_commuteLeq" (formula "10") (term "0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "2") (term "0,1"))
                     (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                     (rule "add_literals" (formula "4") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "4") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "7") (term "0,1"))
                     (rule "add_zero_right" (formula "7") (term "0,0,1"))
                     (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1"))
                     (rule "mul_literals" (formula "7") (term "0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "7") (term "0,0,1"))
                     (rule "add_literals" (formula "7") (term "0,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "7"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "7") (term "0"))
                     (rule "applyEq" (formula "4") (term "0,1,0") (ifseqformula "9"))
                     (rule "applyEqRigid" (formula "16") (term "2,0,0,1,0,1,0") (ifseqformula "7"))
                     (rule "applyEqRigid" (formula "2") (term "0,1,0,0") (ifseqformula "8"))
                     (rule "applyEqRigid" (formula "6") (term "1,1,0,1,0") (ifseqformula "8"))
                     (rule "applyEqRigid" (formula "6") (term "0,1,0,0,0,1,0") (ifseqformula "8"))
                     (rule "applyEq" (formula "2") (term "0,1,0,0,1,1") (ifseqformula "8"))
                     (rule "applyEqRigid" (formula "9") (term "0,1,0,0,1,1,0") (ifseqformula "8"))
                     (rule "applyEqRigid" (formula "9") (term "0,1,0,0,1,0,0") (ifseqformula "8"))
                     (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "8"))
                     (rule "applyEq" (formula "1") (term "0,0,0") (ifseqformula "7"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                     (rule "mul_literals" (formula "13") (term "1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "16") (term "0,1,0,0,1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "0,0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "16") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                     (rule "polySimp_elimOne" (formula "4") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0,0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0,0"))
                     (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "13"))
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                     (rule "polySimp_elimOne" (formula "7") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,1,1,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "1,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,1,0"))
                     (rule "mul_literals" (formula "10") (term "0,1,1,1,0"))
                     (rule "polySimp_elimOne" (formula "10") (term "1,1,1,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1"))
                     (rule "polySimp_rightDist" (formula "3") (term "1"))
                     (rule "mul_literals" (formula "3") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0"))
                     (rule "polySimp_elimOne" (formula "7") (term "0,0,0"))
                     (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "3"))
                     (rule "andLeft" (formula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "1,1,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0"))
                     (rule "add_zero_right" (formula "1") (term "0"))
                     (rule "leq_literals" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "(int)s_1[iv_51 + 1] = 0 FALSE"
                     (rule "seqNPermRange" (formula "7") (inst "iv=iv") (userinteraction))
                     (rule "instAll" (formula "13") (term "1,0") (ifseqformula "7") (userinteraction))
                     (rule "castDel" (formula "16") (term "1"))
                     (rule "andLeft" (formula "2"))
                     (rule "andLeft" (formula "3"))
                     (rule "eqSymm" (formula "6"))
                     (rule "eqSymm" (formula "13"))
                     (rule "eqSymm" (formula "10") (term "1,0"))
                     (rule "eqSymm" (formula "17") (term "1,0,1,0"))
                     (rule "polySimp_elimSub" (formula "5") (term "2,2,0,1"))
                     (rule "mul_literals" (formula "5") (term "1,2,2,0,1"))
                     (rule "polySimp_elimSub" (formula "5") (term "1,2,0,1"))
                     (rule "mul_literals" (formula "5") (term "1,1,2,0,1"))
                     (rule "polySimp_elimSub" (formula "5") (term "1,0,1"))
                     (rule "mul_literals" (formula "5") (term "1,1,0,1"))
                     (rule "polySimp_elimSub" (formula "15") (term "0"))
                     (rule "mul_literals" (formula "15") (term "1,0"))
                     (rule "polySimp_elimSub" (formula "15") (term "1"))
                     (rule "mul_literals" (formula "15") (term "1,1"))
                     (rule "polySimp_elimSub" (formula "2") (term "1"))
                     (rule "mul_literals" (formula "2") (term "1,1"))
                     (rule "add_zero_right" (formula "2") (term "1"))
                     (rule "polySimp_elimSub" (formula "3") (term "1"))
                     (rule "mul_literals" (formula "3") (term "1,1"))
                     (rule "polySimp_elimSub" (formula "2") (term "1"))
                     (rule "mul_literals" (formula "2") (term "1,1"))
                     (rule "polySimp_addComm0" (formula "16") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "1,1,0,1"))
                     (rule "polySimp_addComm0" (formula "5") (term "1,0,0,2,0,1"))
                     (rule "polySimp_addComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0,1,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "1,0,1,1"))
                     (rule "polySimp_addComm0" (formula "14") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "5") (term "1,0,2,2,0,1"))
                     (rule "polySimp_addComm0" (formula "5") (term "1,2,0,1"))
                     (rule "polySimp_addComm0" (formula "5") (term "1,0,1"))
                     (rule "polySimp_addComm0" (formula "15") (term "1,0,0"))
                     (rule "polySimp_addComm0" (formula "15") (term "1"))
                     (rule "polySimp_addComm0" (formula "3") (term "1"))
                     (rule "polySimp_addComm0" (formula "2") (term "1"))
                     (rule "polySimp_addComm0" (formula "5") (term "2,2,0,1"))
                     (rule "polySimp_addComm0" (formula "15") (term "0"))
                     (rule "lenOfSeqSub" (formula "17") (term "1,0,0,0"))
                     (rule "polySimp_elimSub" (formula "17") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "17") (term "1,1,1,0,0,0"))
                     (rule "polySimp_addComm0" (formula "17") (term "1,1,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,1,0"))
                     (rule "polySimp_addComm1" (formula "17") (term "0,1,0,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "8") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,1,0"))
                     (rule "inEqSimp_gtToGeq" (formula "12"))
                     (rule "mul_literals" (formula "12") (term "1,0,0"))
                     (rule "add_literals" (formula "12") (term "0,0"))
                     (rule "lenOfSeqDef" (formula "5") (term "1"))
                     (rule "polySimp_elimSub" (formula "5") (term "1,1"))
                     (rule "mul_literals" (formula "5") (term "1,1,1"))
                     (rule "add_zero_right" (formula "5") (term "1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "1") (term "1,1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,1"))
                     (rule "inEqSimp_ltRight" (formula "15"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                     (rule "mul_literals" (formula "1") (term "0,0,0"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0"))
                     (rule "add_literals" (formula "2") (term "0,0,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "4"))
                     (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
                     (rule "mul_literals" (formula "4") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "3"))
                     (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                     (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "5"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "17") (term "0,1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "17") (term "0,0,1,0,0,0"))
                     (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                     (rule "add_literals" (formula "4") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "4") (term "0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                     (rule "add_literals" (formula "3") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0"))
                     (rule "replace_known_left" (formula "2") (term "1,0") (ifseqformula "3"))
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "inEqSimp_ltToLeq" (formula "6") (term "0,1"))
                     (rule "add_zero_right" (formula "6") (term "0,0,1"))
                     (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1"))
                     (rule "mul_literals" (formula "6") (term "0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "6") (term "0,0,1"))
                     (rule "add_literals" (formula "6") (term "0,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "6"))
                     (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "6") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "2") (term "0,1"))
                     (rule "inEqSimp_homoInEq0" (formula "2") (term "0"))
                     (rule "times_zero_2" (formula "2") (term "1,0,0"))
                     (rule "add_zero_right" (formula "2") (term "0,0"))
                     (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "8"))
                     (rule "applyEqRigid" (formula "5") (term "0,1,0,0,0,1,0") (ifseqformula "7"))
                     (rule "applyEqRigid" (formula "16") (term "2,0,0,1,0,1,0") (ifseqformula "6"))
                     (rule "applyEqRigid" (formula "5") (term "1,1,0,1,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "2") (term "0,1,0,0,1,1") (ifseqformula "7"))
                     (rule "applyEq" (formula "8") (term "0,1,0,0,1,1,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "7"))
                     (rule "applyEqRigid" (formula "10") (term "0,1,0,0,1,0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "1") (term "0,0,0") (ifseqformula "6"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "16") (term "0,1,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                     (rule "mul_literals" (formula "12") (term "1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "0,0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "16") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                     (rule "polySimp_elimOne" (formula "3") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "0"))
                     (rule "mul_literals" (formula "2") (term "1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "0,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "5") (term "0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,1"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,1,1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,1,1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,1"))
                     (rule "mul_literals" (formula "2") (term "0,1,1,1"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,1,1,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,1,1,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,1,1,0"))
                     (rule "mul_literals" (formula "8") (term "0,1,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,1,0"))
                     (rule "polySimp_elimOne" (formula "8") (term "1,1,1,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                     (rule "polySimp_elimOne" (formula "5") (term "0"))
                     (rule "inEqSimp_subsumption1" (formula "2") (term "0") (ifseqformula "4"))
                     (rule "leq_literals" (formula "2") (term "0,0"))
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "inEqSimp_strengthen1" (formula "2") (ifseqformula "15"))
                     (rule "add_literals" (formula "2") (term "1"))
                     (rule "inEqSimp_contradEq7" (formula "15") (ifseqformula "2"))
                     (rule "mul_literals" (formula "15") (term "1,0,0"))
                     (rule "add_zero_right" (formula "15") (term "0,0"))
                     (rule "leq_literals" (formula "15") (term "0"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "false_right" (formula "15"))
                     (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "1"))
                     (rule "andLeft" (formula "3"))
                     (rule "inEqSimp_homoInEq1" (formula "3"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                     (rule "mul_literals" (formula "3") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0"))
                     (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                     (rule "add_literals" (formula "3") (term "1,1,0"))
                     (rule "times_zero_1" (formula "3") (term "1,0"))
                     (rule "add_zero_right" (formula "3") (term "0"))
                     (rule "leq_literals" (formula "3"))
                     (rule "closeFalse" (formula "3"))
                  )
               )
               (branch "0 <= iv_51 & iv_51 < s_1.length - 1 - 0 FALSE"
                  (rule "castDel" (formula "13") (term "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "eqSymm" (formula "7") (term "1,0"))
                  (rule "eqSymm" (formula "4"))
                  (rule "eqSymm" (formula "10"))
                  (rule "eqSymm" (formula "14") (term "1,0,1,0"))
                  (rule "replace_known_left" (formula "11") (term "0") (ifseqformula "2"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "polySimp_elimSub" (formula "3") (term "2,2,0,1"))
                  (rule "mul_literals" (formula "3") (term "1,2,2,0,1"))
                  (rule "polySimp_elimSub" (formula "3") (term "1,0,1"))
                  (rule "mul_literals" (formula "3") (term "1,1,0,1"))
                  (rule "polySimp_elimSub" (formula "12") (term "1"))
                  (rule "mul_literals" (formula "12") (term "1,1"))
                  (rule "polySimp_elimSub" (formula "3") (term "1,2,0,1"))
                  (rule "mul_literals" (formula "3") (term "1,1,2,0,1"))
                  (rule "polySimp_elimSub" (formula "1") (term "1"))
                  (rule "mul_literals" (formula "1") (term "1,1"))
                  (rule "polySimp_elimSub" (formula "11") (term "1"))
                  (rule "mul_literals" (formula "11") (term "1,1"))
                  (rule "add_zero_right" (formula "11") (term "1"))
                  (rule "polySimp_elimSub" (formula "11") (term "1"))
                  (rule "mul_literals" (formula "11") (term "1,1"))
                  (rule "polySimp_addComm0" (formula "13") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "3") (term "1,0,0,2,0,1"))
                  (rule "polySimp_addComm0" (formula "3") (term "1,0,2,2,0,1"))
                  (rule "polySimp_addComm0" (formula "3") (term "1,0,1"))
                  (rule "polySimp_addComm0" (formula "12") (term "1"))
                  (rule "polySimp_addComm0" (formula "3") (term "1,2,0,1"))
                  (rule "polySimp_addComm0" (formula "1") (term "1"))
                  (rule "polySimp_addComm0" (formula "11") (term "1"))
                  (rule "polySimp_addComm0" (formula "3") (term "2,2,0,1"))
                  (rule "lenOfSeqSub" (formula "14") (term "1,0,0,0"))
                  (rule "polySimp_elimSub" (formula "14") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "14") (term "1,1,1,0,0,0"))
                  (rule "polySimp_addComm0" (formula "14") (term "1,1,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,0"))
                  (rule "polySimp_addComm1" (formula "14") (term "0,1,0,0,1,0"))
                  (rule "inEqSimp_gtToGeq" (formula "9"))
                  (rule "times_zero_1" (formula "9") (term "1,0,0"))
                  (rule "add_literals" (formula "9") (term "0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                  (rule "lenOfSeqDef" (formula "3") (term "1"))
                  (rule "polySimp_elimSub" (formula "3") (term "1,1"))
                  (rule "mul_literals" (formula "3") (term "1,1,1"))
                  (rule "add_zero_right" (formula "3") (term "1,1"))
                  (rule "inEqSimp_ltRight" (formula "12"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_ltRight" (formula "12"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "3"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                  (rule "add_literals" (formula "3") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "14") (term "0,1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "14") (term "0,0,1,0,0,0"))
                  (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "4"))
                  (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "5") (term "0,1"))
                  (rule "add_zero_right" (formula "5") (term "0,0,1"))
                  (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "5") (term "0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "5") (term "0,0,1"))
                  (rule "add_literals" (formula "5") (term "0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "5"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "5") (term "0"))
                  (rule "applyEqRigid" (formula "5") (term "0,1,0,0,0,1,0") (ifseqformula "7"))
                  (rule "applyEqRigid" (formula "1") (term "0,1,0") (ifseqformula "7"))
                  (rule "applyEqRigid" (formula "5") (term "1,1,0,1,0") (ifseqformula "7"))
                  (rule "applyEqRigid" (formula "14") (term "2,0,0,1,0,1,0") (ifseqformula "6"))
                  (rule "applyEqRigid" (formula "2") (term "0,1,0,0") (ifseqformula "6"))
                  (rule "applyEq" (formula "9") (term "0,1,0,0,1,0,0") (ifseqformula "7"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "14") (term "0,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                  (rule "mul_literals" (formula "11") (term "1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                  (rule "polySimp_elimOne" (formula "3") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "0,0,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "14") (term "0,0,1,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "5") (term "0,0,0,1,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "mul_literals" (formula "2") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                  (rule "polySimp_elimOne" (formula "5") (term "0"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "3"))
                  (rule "andLeft" (formula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "1,1,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0"))
                  (rule "add_literals" (formula "1") (term "0"))
                  (rule "leq_literals" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
         )
      )
      (branch "0 <= iv_51 & iv_51 < f_s1.length - 1 FALSE"
         (rule "castDel" (formula "11") (term "0"))
         (rule "eqSymm" (formula "12") (term "1,0,1,0"))
         (rule "eqSymm" (formula "6") (term "1,0"))
         (rule "eqSymm" (formula "3"))
         (rule "eqSymm" (formula "9"))
         (rule "eqSymm" (formula "11"))
         (rule "replace_known_left" (formula "10") (term "0") (ifseqformula "1"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "polySimp_elimSub" (formula "2") (term "1,0,1"))
         (rule "mul_literals" (formula "2") (term "1,1,0,1"))
         (rule "polySimp_elimSub" (formula "2") (term "1,2,0,1"))
         (rule "mul_literals" (formula "2") (term "1,1,2,0,1"))
         (rule "polySimp_elimSub" (formula "2") (term "2,2,0,1"))
         (rule "mul_literals" (formula "2") (term "1,2,2,0,1"))
         (rule "polySimp_elimSub" (formula "11") (term "1,0,1,0"))
         (rule "mul_literals" (formula "11") (term "1,1,0,1,0"))
         (rule "polySimp_elimSub" (formula "11") (term "1,2,0,1,0"))
         (rule "mul_literals" (formula "11") (term "1,1,2,0,1,0"))
         (rule "polySimp_elimSub" (formula "11") (term "2,2,0,1,0"))
         (rule "mul_literals" (formula "11") (term "1,2,2,0,1,0"))
         (rule "polySimp_elimSub" (formula "10") (term "1"))
         (rule "mul_literals" (formula "10") (term "1,1"))
         (rule "polySimp_addComm0" (formula "2") (term "1,0,0,2,0,1"))
         (rule "polySimp_addComm0" (formula "11") (term "1,0,0,2,0,1,0"))
         (rule "polySimp_addComm0" (formula "2") (term "1,0,1"))
         (rule "polySimp_addComm0" (formula "2") (term "1,2,0,1"))
         (rule "polySimp_addComm0" (formula "2") (term "1,0,2,2,0,1"))
         (rule "polySimp_addComm0" (formula "11") (term "1,0,1,0"))
         (rule "polySimp_addComm0" (formula "11") (term "1,2,0,1,0"))
         (rule "polySimp_addComm0" (formula "11") (term "1,0,2,2,0,1,0"))
         (rule "polySimp_addComm0" (formula "10") (term "1"))
         (rule "polySimp_addComm0" (formula "2") (term "2,2,0,1"))
         (rule "polySimp_addComm0" (formula "11") (term "2,2,0,1,0"))
         (rule "lenOfSeqSub" (formula "12") (term "1,0,0,0"))
         (rule "polySimp_elimSub" (formula "12") (term "1,1,0,0,0"))
         (rule "mul_literals" (formula "12") (term "1,1,1,0,0,0"))
         (rule "polySimp_addComm0" (formula "12") (term "1,1,0,0,0"))
         (rule "inEqSimp_gtToGeq" (formula "8"))
         (rule "mul_literals" (formula "8") (term "1,0,0"))
         (rule "add_literals" (formula "8") (term "0,0"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,1,0"))
         (rule "polySimp_addComm1" (formula "12") (term "0,1,0,0,1,0"))
         (rule "lenOfSeqDef" (formula "2") (term "1"))
         (rule "polySimp_elimSub" (formula "2") (term "1,1"))
         (rule "mul_literals" (formula "2") (term "1,1,1"))
         (rule "add_zero_right" (formula "2") (term "1,1"))
         (rule "getOfSeqDef" (formula "11") (term "1,0"))
         (rule "castDel" (formula "11") (term "1,1,0"))
         (rule "add_zero_right" (formula "11") (term "1,1,1,2,1,1,0"))
         (rule "add_zero_right" (formula "11") (term "1,1,0,0,1,1,0"))
         (rule "replace_known_left" (formula "11") (term "0,0,1,0") (ifseqformula "1"))
         (builtin "One Step Simplification" (formula "11"))
         (rule "polySimp_elimSub" (formula "11") (term "1,0,1,0"))
         (rule "mul_literals" (formula "11") (term "1,1,0,1,0"))
         (rule "add_zero_right" (formula "11") (term "1,0,1,0"))
         (rule "inEqSimp_ltRight" (formula "10"))
         (rule "polySimp_rightDist" (formula "1") (term "0,0"))
         (rule "mul_literals" (formula "1") (term "0,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "12") (term "0,1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,0,0,0"))
         (rule "polySimp_addComm1" (formula "12") (term "0,0,1,0,0,0"))
         (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "2"))
         (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "3") (term "0,1"))
         (rule "add_zero_right" (formula "3") (term "0,0,1"))
         (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1"))
         (rule "mul_literals" (formula "3") (term "0,1,0,0,1"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,0,1"))
         (rule "add_literals" (formula "3") (term "0,0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,0"))
         (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,0,1,0"))
         (rule "polySimp_addComm1" (formula "11") (term "0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "3"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "3") (term "0"))
         (rule "applyEq" (formula "3") (term "0,1,0,0,0,1,0") (ifseqformula "5"))
         (rule "applyEqRigid" (formula "11") (term "0,1,0,0,1,0") (ifseqformula "5"))
         (rule "applyEq" (formula "11") (term "2,0,0") (ifseqformula "4"))
         (rule "applyEq" (formula "12") (term "2,0,0,1,0,1,0") (ifseqformula "4"))
         (rule "applyEq" (formula "3") (term "1,1,0,1,0") (ifseqformula "5"))
         (rule "applyEqRigid" (formula "7") (term "0,1,0,0,1,0,0") (ifseqformula "5"))
         (rule "inEqSimp_sepPosMonomial1" (formula "9"))
         (rule "mul_literals" (formula "9") (term "1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "12") (term "0,1,0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "0,0,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "12") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "3") (term "0,0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,1,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "0,0,1,0"))
         (rule "polySimp_elimOne" (formula "11") (term "0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "3"))
         (rule "polySimp_mulLiterals" (formula "3") (term "0"))
         (rule "polySimp_elimOne" (formula "3") (term "0"))
         (rule "inEqSimp_contradInEq0" (formula "11") (term "0,1,0") (ifseqformula "1"))
         (rule "inEqSimp_homoInEq1" (formula "11") (term "0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,0"))
         (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1,0"))
         (rule "polySimp_addComm1" (formula "11") (term "0,0,0,0,1,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,0,0,1,0"))
         (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,0,1,0"))
         (rule "add_literals" (formula "11") (term "1,1,0,0,0,1,0"))
         (rule "times_zero_1" (formula "11") (term "1,0,0,0,1,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,1,0"))
         (rule "leq_literals" (formula "11") (term "0,0,1,0"))
         (builtin "One Step Simplification" (formula "11"))
         (rule "getOfSeqSub" (formula "12") (term "1,1,0,1,0"))
         (rule "castDel" (formula "12") (term "2,1,1,0,1,0"))
         (rule "polySimp_elimSub" (formula "12") (term "1,1,0,1,1,0,1,0"))
         (rule "mul_literals" (formula "12") (term "1,1,1,0,1,1,0,1,0"))
         (rule "polySimp_addComm0" (formula "12") (term "1,1,1,1,0,1,0"))
         (rule "polySimp_addComm0" (formula "12") (term "1,1,0,1,1,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,1,1,0,1,0"))
         (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,1,1,0,1,0"))
         (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,1,1,0,1,0"))
         (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,1,1,0,1,0"))
         (rule "add_literals" (formula "12") (term "0,0,0,1,0,1,1,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,1,1,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,1,1,0,1,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,1,1,0,1,0"))
         (rule "polySimp_rightDist" (formula "12") (term "1,1,0,1,1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,1,1,0,1,0"))
         (rule "mul_literals" (formula "12") (term "0,1,1,0,1,1,0,1,0"))
         (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,1,1,0,1,0"))
         (rule "getOfSeqSub" (formula "12") (term "0,1,0,1,0"))
         (rule "castDel" (formula "12") (term "2,0,1,0,1,0"))
         (rule "polySimp_elimSub" (formula "12") (term "1,1,0,0,1,0,1,0"))
         (rule "mul_literals" (formula "12") (term "1,1,1,0,0,1,0,1,0"))
         (rule "polySimp_addComm0" (formula "12") (term "1,1,0,1,0,1,0"))
         (rule "polySimp_addComm0" (formula "12") (term "1,1,0,0,1,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,0,1,0"))
         (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,1,0,1,0"))
         (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,1,0,1,0"))
         (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,1,0,1,0"))
         (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,1,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,1,0,1,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,1,0,1,0"))
         (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,1,0,1,0"))
         (rule "mul_literals" (formula "12") (term "0,1,1,0,0,1,0,1,0"))
         (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,1,0,1,0"))
         (rule "getOfSeqSub" (formula "11") (term "0"))
         (rule "castDel" (formula "11") (term "2,0"))
         (builtin "One Step Simplification" (formula "11"))
         (rule "orRight" (formula "11"))
         (rule "notRight" (formula "11"))
         (rule "andLeft" (formula "1"))
         (rule "polySimp_elimSub" (formula "2") (term "1"))
         (rule "mul_literals" (formula "2") (term "1,1"))
         (rule "polySimp_addComm0" (formula "13") (term "1,0"))
         (rule "polySimp_addComm0" (formula "2") (term "1"))
         (rule "inEqSimp_ltToLeq" (formula "2"))
         (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
         (rule "mul_literals" (formula "2") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
         (rule "add_literals" (formula "2") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1"))
         (rule "polySimp_rightDist" (formula "2") (term "1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
         (rule "mul_literals" (formula "2") (term "0,1"))
         (rule "polySimp_elimOne" (formula "2") (term "1,1"))
         (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "3"))
         (rule "mul_literals" (formula "11") (term "0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0"))
         (rule "add_literals" (formula "11") (term "0,0"))
         (rule "add_zero_left" (formula "11") (term "0"))
         (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
         (rule "mul_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "replace_known_left" (formula "15") (term "0,1,0,0,0") (ifseqformula "1"))
         (builtin "One Step Simplification" (formula "15"))
         (rule "replace_known_left" (formula "6") (term "0,0") (ifseqformula "1"))
         (builtin "One Step Simplification" (formula "6"))
         (rule "inEqSimp_homoInEq1" (formula "6"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
         (rule "polySimp_rightDist" (formula "6") (term "1,0"))
         (rule "mul_literals" (formula "6") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "6") (term "0"))
         (rule "polySimp_addComm1" (formula "6") (term "0,0"))
         (rule "add_literals" (formula "6") (term "0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "6"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0"))
         (rule "polySimp_elimOne" (formula "6") (term "0"))
         (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "6"))
         (rule "andLeft" (formula "4"))
         (rule "inEqSimp_homoInEq1" (formula "4"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
         (rule "polySimp_rightDist" (formula "4") (term "1,0"))
         (rule "mul_literals" (formula "4") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "4") (term "0"))
         (rule "polySimp_addComm1" (formula "4") (term "0,0"))
         (rule "add_literals" (formula "4") (term "0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
         (rule "add_literals" (formula "4") (term "1,1,0"))
         (rule "times_zero_1" (formula "4") (term "1,0"))
         (rule "add_literals" (formula "4") (term "0"))
         (rule "leq_literals" (formula "4"))
         (rule "closeFalse" (formula "4"))
      )
   )
)
)

}
