\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Apr 12 15:15:39 CEST 2016
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=80000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Tue Apr 12 15:15:39 CEST 2016
name=verif.selectvoting.system.core.MixServer[verif.selectvoting.system.core.MixServer\\:\\:antiSym([B,[B)].JML model_behavior operation contract.0
contract=verif.selectvoting.system.core.MixServer[verif.selectvoting.system.core.MixServer\\:\\:antiSym([B,[B)].JML model_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mihai" ) (keyVersion "6bc7ade97061383f11985e24decf735b7f2f0af2"))

(autoModeTime "1465")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "a,b,result,heapAtPre,heapBefore,heapAtPreBefore,o,f,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "8"))
(rule "notLeft" (formula "8"))
(rule "notLeft" (formula "8"))
(builtin "One Step Simplification" (formula "10"))
(rule "eqSymm" (formula "10"))
(rule "replace_known_right" (formula "4") (term "0") (ifseqformula "8"))
(builtin "One Step Simplification" (formula "4"))
(rule "replace_known_right" (formula "3") (term "0") (ifseqformula "9"))
(builtin "One Step Simplification" (formula "3"))
(rule "equalityToSeqGetAndSeqLenRight" (formula "10") (inst "iv=iv"))
(rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1"))
(rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,1"))
(rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1"))
(rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1"))
(rule "mul_literals" (formula "10") (term "0,1,1,0,0,1"))
(rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1"))
(rule "array2seqDef" (formula "10") (term "0,0,0") (inst "u=u"))
(rule "lenOfSeqDef" (formula "10") (term "0,0"))
(rule "polySimp_elimSub" (formula "10") (term "1,0,0"))
(rule "times_zero_2" (formula "10") (term "1,1,0,0"))
(rule "add_zero_right" (formula "10") (term "1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0"))
(rule "add_zero_right" (formula "10") (term "0,0,0,0"))
(rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0,0"))
(rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,0"))
(rule "polySimp_elimOne" (formula "10") (term "0,0,0,0"))
(rule "array2seqDef" (formula "10") (term "0,1,1,0,1") (inst "u=u"))
(rule "eqSymm" (formula "10") (term "1,0,1"))
(rule "getOfSeqDef" (formula "10") (term "0,1,0,1"))
(rule "castDel" (formula "10") (term "2,0,1,0,1"))
(rule "castDel" (formula "10") (term "1,0,1,0,1"))
(rule "add_zero_right" (formula "10") (term "0,2,1,0,1,0,1"))
(rule "polySimp_elimSub" (formula "10") (term "1,1,0,0,1,0,1"))
(rule "mul_literals" (formula "10") (term "1,1,1,0,0,1,0,1"))
(rule "add_zero_right" (formula "10") (term "1,1,0,0,1,0,1"))
(rule "narrowSelectArrayType" (formula "10") (term "1,0,1,0,1") (ifseqformula "1") (ifseqformula "9"))
(rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0,1"))
(rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1,0,1"))
(rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,1,0,1"))
(rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1,0,1"))
(rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1,0,1"))
(rule "mul_literals" (formula "10") (term "0,1,1,0,0,1,0,1"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1,0,1"))
(rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1,0,1"))
(rule "array2seqDef" (formula "10") (term "0,1,0") (inst "u=u"))
(rule "eqSymm" (formula "10") (term "0"))
(rule "lenOfSeqDef" (formula "10") (term "0,0"))
(rule "polySimp_elimSub" (formula "10") (term "1,0,0"))
(rule "times_zero_2" (formula "10") (term "1,1,0,0"))
(rule "add_zero_right" (formula "10") (term "1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0"))
(rule "add_zero_right" (formula "10") (term "0,0,0,0"))
(rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0,0"))
(rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,0"))
(rule "eqSymm" (formula "10") (term "0"))
(rule "polySimp_elimOne" (formula "10") (term "0,0,1,0"))
(rule "array2seqDef" (formula "10") (term "0,1,1,1,0,0,1") (inst "u=u"))
(rule "lenOfSeqDef" (formula "10") (term "1,1,1,0,0,1"))
(rule "polySimp_elimSub" (formula "10") (term "1,1,1,1,0,0,1"))
(rule "mul_literals" (formula "10") (term "1,1,1,1,1,0,0,1"))
(rule "add_zero_right" (formula "10") (term "1,1,1,1,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "10") (term "0,1,1,1,0,0,1"))
(rule "add_zero_right" (formula "10") (term "0,0,1,1,1,0,0,1"))
(rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,1,1,0,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,1,1,1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "10") (term "0,0,1,1,1,0,0,1"))
(rule "polySimp_elimOne" (formula "10") (term "0,0,1,1,1,0,0,1"))
(rule "array2seqDef" (formula "10") (term "0,1,1,0,1") (inst "u=u"))
(rule "eqSymm" (formula "10") (term "1,0,1"))
(rule "getOfSeqDef" (formula "10") (term "0,1,0,1"))
(rule "castDel" (formula "10") (term "2,0,1,0,1"))
(rule "castDel" (formula "10") (term "1,0,1,0,1"))
(rule "add_zero_right" (formula "10") (term "0,2,1,0,1,0,1"))
(rule "polySimp_elimSub" (formula "10") (term "1,1,0,0,1,0,1"))
(rule "mul_literals" (formula "10") (term "1,1,1,0,0,1,0,1"))
(rule "add_zero_right" (formula "10") (term "1,1,0,0,1,0,1"))
(rule "narrowSelectArrayType" (formula "10") (term "1,0,1,0,1") (ifseqformula "1") (ifseqformula "8"))
(rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0,1"))
(rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1,0,1"))
(rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,1,0,1"))
(rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1,0,1"))
(rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1,0,1"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1,0,1"))
(rule "mul_literals" (formula "10") (term "0,1,1,0,0,1,0,1"))
(rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1,0,1"))
(rule "nnf_imp2or" (formula "10") (term "0,1"))
(rule "nnf_notAnd" (formula "10") (term "0,0,1"))
(rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,1"))
(rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,1"))
(rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,1"))
(rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,1"))
(rule "add_literals" (formula "10") (term "0,0,0,1,0,0,1"))
(rule "add_zero_left" (formula "10") (term "0,0,1,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,1"))
(rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,1"))
(rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,1"))
(rule "mul_literals" (formula "10") (term "1,0,0,0,0,0,1"))
(rule "add_zero_right" (formula "10") (term "0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,1"))
(rule "mul_literals" (formula "10") (term "1,0,0,0,1"))
(rule "ifthenelse_split" (formula "10") (term "0,0"))
(branch "b.length â‰¥ 1 TRUE"
   (rule "eqSymm" (formula "11") (term "0"))
   (rule "replace_known_left" (formula "11") (term "0,1,1,0,0,1") (ifseqformula "1"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "ifthenelse_split" (formula "11") (term "0,0"))
   (branch "a.length â‰¥ 1 TRUE"
      (rule "eqSymm" (formula "12") (term "0"))
      (builtin "Evaluate Query" (formula "8") (term "0") (newnames "a1_4,a2_4,callee,queryResult_6,res_compare_4"))
      (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_compare(heap,a,b)_00_0" (formula "9") (term "0"))
      (rule "notLeft" (formula "1"))
      (rule "eqSymm" (formula "10") (term "0,0,1"))
      (rule "variableDeclaration" (formula "10") (term "1") (newnames "queryResult_6"))
      (builtin "Use Operation Contract" (formula "10") (newnames "heapBefore_compare_4,result_7,exc_6") (contract "verif.selectvoting.system.core.Utils[verif.selectvoting.system.core.Utils::compare([B,[B)].JML normal_behavior operation contract.0"))
      (branch "Post (compare)"
         (builtin "One Step Simplification" (formula "11"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "andLeft" (formula "10"))
         (rule "andLeft" (formula "11"))
         (rule "eqSymm" (formula "11") (term "1,0,1,1,0,0,0"))
         (rule "eqSymm" (formula "11") (term "1,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,1,1,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0,0,0"))
         (rule "polySimp_addComm1" (formula "11") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,1,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,0,0"))
         (rule "assignment" (formula "12") (term "1"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,1,0,0,0"))
         (rule "mul_literals" (formula "11") (term "0,1,1,0,0,1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,0,1,0"))
         (rule "mul_literals" (formula "11") (term "0,1,1,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,0,0"))
         (rule "mul_literals" (formula "11") (term "0,1,1,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "0,0,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "0,0,1,0,0,0"))
         (rule "nnf_imp2or" (formula "11") (term "0,0,1,0"))
         (rule "nnf_imp2or" (formula "11") (term "0,1,1,0,0,0"))
         (rule "nnf_notAnd" (formula "11") (term "0,0,0,1,0"))
         (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0,1,0"))
         (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0,1,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,0,1,0"))
         (rule "add_zero_left" (formula "11") (term "0,0,1,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0"))
         (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,0,1,0"))
         (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,0,1,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,1,0"))
         (rule "mul_literals" (formula "11") (term "1,0,0,0,0,1,0"))
         (rule "nnf_notAnd" (formula "11") (term "0,0,1,1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,1,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,1,1,0,0,0"))
         (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,1,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,1,1,0,0,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,1,1,0,0,0"))
         (rule "add_zero_left" (formula "11") (term "0,0,1,0,0,1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,1,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,1,1,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,1,1,0,0,0"))
         (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,1,1,0,0,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,0,0,1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,1,0,0,0"))
         (rule "mul_literals" (formula "11") (term "1,0,0,0,1,1,0,0,0"))
         (rule "methodCallEmpty" (formula "12") (term "1"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "emptyModality" (formula "12") (term "1"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "notRight" (formula "12"))
         (rule "eqSymm" (formula "1"))
         (rule "applyEq" (formula "12") (term "0,1") (ifseqformula "1"))
         (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "9"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "orLeft" (formula "12"))
         (branch "âˆƒ int i; ( i â‰¥ 0 âˆ§ i â‰¤ -1 + verif.selectvoting.system.core.Utils.min(a.length, b.length) âˆ§ ( b[i] â‰¥ 1 + a[i] âˆ§ âˆ€ int j; (j â‰¤ -1 âˆ¨ j â‰¥ i âˆ¨ b[j] = a[j])))"
            (rule "exLeft" (formula "12") (inst "sk=i_6"))
            (rule "andLeft" (formula "12"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "12"))
            (rule "inEqSimp_homoInEq0" (formula "13"))
            (rule "polySimp_addComm1" (formula "13") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "13"))
            (rule "polySimp_mulComm0" (formula "13") (term "1"))
            (rule "polySimp_rightDist" (formula "13") (term "1"))
            (rule "mul_literals" (formula "13") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
            (rule "polySimp_elimOne" (formula "13") (term "1,1"))
            (builtin "Evaluate Query" (formula "10") (term "0") (newnames "a1_6,a2_6,callee,queryResult_11,res_compare_6"))
            (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_compare(heap,b,a)_0000_1" (formula "11") (term "0"))
            (rule "notLeft" (formula "1"))
            (rule "eqSymm" (formula "16") (term "0,0,1"))
            (rule "variableDeclaration" (formula "16") (term "1") (newnames "queryResult_11"))
            (builtin "Use Operation Contract" (formula "16") (newnames "heapBefore_compare_6,result_12,exc_11") (contract "verif.selectvoting.system.core.Utils[verif.selectvoting.system.core.Utils::compare([B,[B)].JML normal_behavior operation contract.0"))
            (branch "Post (compare)"
               (builtin "One Step Simplification" (formula "17"))
               (builtin "One Step Simplification" (formula "16"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "17"))
               (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,1,1,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "17") (term "0,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1,1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,0,1,0"))
               (rule "assignment" (formula "18") (term "1"))
               (builtin "One Step Simplification" (formula "18"))
               (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,1,1,0,0,0"))
               (rule "mul_literals" (formula "17") (term "0,1,1,0,0,1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,1,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "17") (term "0,1,1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,0,0"))
               (rule "mul_literals" (formula "17") (term "0,1,1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,0,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,1,0,0,0"))
               (rule "mul_literals" (formula "17") (term "0,1,0,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,0,1,0,0,0"))
               (rule "nnf_imp2or" (formula "17") (term "0,0,1,0"))
               (rule "nnf_imp2or" (formula "17") (term "0,1,1,0,0,0"))
               (rule "nnf_notAnd" (formula "17") (term "0,0,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0,0,1,0"))
               (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0,0,1,0"))
               (rule "add_literals" (formula "17") (term "0,0,0,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,0,1,0"))
               (rule "mul_literals" (formula "17") (term "1,0,0,0,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,0,1,0"))
               (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,0,1,0"))
               (rule "add_zero_left" (formula "17") (term "0,0,1,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0,1,0"))
               (rule "nnf_notAnd" (formula "17") (term "0,0,1,1,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0,1,1,0,0,0"))
               (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0,1,1,0,0,0"))
               (rule "add_literals" (formula "17") (term "0,0,0,0,0,1,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,1,1,0,0,0"))
               (rule "mul_literals" (formula "17") (term "1,0,0,0,1,1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0,1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,1,1,0,0,0"))
               (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,1,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,1,1,0,0,0"))
               (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,1,1,0,0,0"))
               (rule "add_zero_left" (formula "17") (term "0,0,1,0,0,1,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,1,1,0,0,0"))
               (rule "methodCallEmpty" (formula "18") (term "1"))
               (builtin "One Step Simplification" (formula "18"))
               (rule "emptyModality" (formula "18") (term "1"))
               (builtin "One Step Simplification" (formula "18"))
               (rule "notRight" (formula "18"))
               (rule "eqSymm" (formula "1"))
               (rule "applyEq" (formula "18") (term "0,1") (ifseqformula "1"))
               (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "11"))
               (builtin "One Step Simplification" (formula "18"))
               (rule "orLeft" (formula "18"))
               (branch "âˆƒ int i; ( i â‰¥ 0 âˆ§ i â‰¤ -1 + verif.selectvoting.system.core.Utils.min(b.length, a.length) âˆ§ ( b[i] â‰¤ -1 + a[i] âˆ§ âˆ€ int j; (j â‰¤ -1 âˆ¨ j â‰¥ i âˆ¨ b[j] = a[j])))"
                  (rule "exLeft" (formula "18") (inst "sk=i_7"))
                  (rule "andLeft" (formula "18"))
                  (rule "andLeft" (formula "19"))
                  (rule "andLeft" (formula "18"))
                  (rule "inEqSimp_homoInEq0" (formula "19"))
                  (rule "polySimp_addComm1" (formula "19") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1"))
                  (rule "polySimp_rightDist" (formula "19") (term "1"))
                  (rule "mul_literals" (formula "19") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "19") (term "1,1"))
                  (rule "arrayLengthIsAShort" (formula "4") (term "0"))
                  (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                  (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "5"))
                  (rule "leq_literals" (formula "4") (term "0"))
                  (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "arrayLengthIsAShort" (formula "24") (term "1,1,1,0,1,1,0,1"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "arrayLengthNotNegative" (formula "24") (term "1,1,1,0,1,1,0,1"))
                  (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "4"))
                  (rule "leq_literals" (formula "1") (term "0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "cut_direct" (formula "24") (term "0"))
                  (branch "CUT: b.length = a.length TRUE"
                     (builtin "One Step Simplification" (formula "25"))
                     (rule "allRight" (formula "25") (inst "sk=iv_3"))
                     (rule "orRight" (formula "25"))
                     (rule "orRight" (formula "25"))
                     (rule "inEqSimp_leqRight" (formula "25"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "replace_known_left" (formula "27") (term "0,0,1") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "1")))
                     (rule "inEqSimp_geqRight" (formula "26"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_homoInEq0" (formula "27") (term "0,0"))
                     (rule "eqSymm" (formula "27"))
                     (rule "polySimp_addComm1" (formula "27") (term "0,0,1"))
                     (rule "inEqSimp_homoInEq0" (formula "27") (term "0,0"))
                     (rule "eqSymm" (formula "27"))
                     (rule "polySimp_addComm1" (formula "27") (term "0,0,1"))
                     (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "27") (term "1,0,0,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "17") (term "2,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "7") (term "0") (ifseqformula "3"))
                     (rule "applyEq" (formula "21") (term "1,0") (ifseqformula "3"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1,0,1"))
                     (rule "polySimp_rightDist" (formula "26") (term "1,0,1"))
                     (rule "mul_literals" (formula "26") (term "0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,1"))
                     (rule "polySimp_elimOne" (formula "26") (term "1,1,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "replace_known_left" (formula "26") (term "0,1") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "26"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "26") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "26") (term "0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                     (rule "replace_known_left" (formula "26") (term "0,0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "26"))
                     (rule "allLeft" (formula "23") (inst "t=iv_3"))
                     (rule "replace_known_right" (formula "23") (term "1") (ifseqformula "27"))
                     (builtin "One Step Simplification" (formula "23"))
                     (rule "inEqSimp_contradInEq1" (formula "23") (term "0") (ifseqformula "2"))
                     (rule "qeq_literals" (formula "23") (term "0,0"))
                     (builtin "One Step Simplification" (formula "23"))
                     (rule "allLeft" (formula "18") (inst "t=iv_3"))
                     (rule "replace_known_right" (formula "18") (term "1") (ifseqformula "28"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_contradInEq1" (formula "18") (term "0") (ifseqformula "2"))
                     (rule "qeq_literals" (formula "18") (term "0,0"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "allLeft" (formula "19") (inst "t=i_7"))
                     (rule "inEqSimp_contradEq3" (formula "19") (term "1") (ifseqformula "24"))
                     (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1"))
                     (rule "add_literals" (formula "19") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "19") (term "0,0,1"))
                     (rule "qeq_literals" (formula "19") (term "0,1"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "inEqSimp_contradInEq1" (formula "19") (term "0") (ifseqformula "22"))
                     (rule "qeq_literals" (formula "19") (term "0,0"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "allLeft" (formula "26") (inst "t=i_6"))
                     (rule "inEqSimp_commuteGeq" (formula "26") (term "1,0"))
                     (rule "inEqSimp_contradEq7" (formula "26") (term "1") (ifseqformula "17"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                     (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "26") (term "0,0,1"))
                     (rule "leq_literals" (formula "26") (term "0,1"))
                     (builtin "One Step Simplification" (formula "26"))
                     (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "15"))
                     (rule "qeq_literals" (formula "26") (term "0,0"))
                     (builtin "One Step Simplification" (formula "26"))
                     (rule "inEqSimp_antiSymm" (formula "19") (ifseqformula "26"))
                     (rule "applyEqRigid" (formula "25") (term "0,2,1,1") (ifseqformula "19"))
                     (rule "applyEqRigid" (formula "27") (term "0") (ifseqformula "19"))
                     (rule "inEqSimp_homoInEq0" (formula "27"))
                     (rule "polySimp_pullOutFactor1" (formula "27") (term "0"))
                     (rule "add_literals" (formula "27") (term "1,0"))
                     (rule "times_zero_1" (formula "27") (term "0"))
                     (rule "qeq_literals" (formula "27"))
                     (rule "true_left" (formula "27"))
                     (rule "applyEqRigid" (formula "25") (term "0,2,0") (ifseqformula "19"))
                     (rule "applyEq" (formula "27") (term "1,1,0,0") (ifseqformula "19"))
                     (rule "applyEqRigid" (formula "20") (term "0") (ifseqformula "19"))
                     (rule "inEqSimp_homoInEq1" (formula "20"))
                     (rule "polySimp_pullOutFactor1" (formula "20") (term "0"))
                     (rule "add_literals" (formula "20") (term "1,0"))
                     (rule "times_zero_1" (formula "20") (term "0"))
                     (rule "leq_literals" (formula "20"))
                     (rule "true_left" (formula "20"))
                     (rule "applyEq" (formula "25") (term "1") (ifseqformula "19"))
                     (rule "applyEqRigid" (formula "23") (term "1,1") (ifseqformula "19"))
                     (rule "applyEqRigid" (formula "22") (term "0") (ifseqformula "19"))
                     (rule "inEqSimp_contradInEq0" (formula "17") (ifseqformula "22"))
                     (rule "andLeft" (formula "17"))
                     (rule "inEqSimp_homoInEq1" (formula "17"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "17") (term "1,0"))
                     (rule "mul_literals" (formula "17") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "17") (term "0"))
                     (rule "polySimp_addComm1" (formula "17") (term "0,0"))
                     (rule "add_literals" (formula "17") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "17") (term "0"))
                     (rule "add_literals" (formula "17") (term "1,1,0"))
                     (rule "times_zero_1" (formula "17") (term "1,0"))
                     (rule "add_literals" (formula "17") (term "0"))
                     (rule "leq_literals" (formula "17"))
                     (rule "closeFalse" (formula "17"))
                  )
                  (branch "CUT: b.length = a.length FALSE"
                     (builtin "One Step Simplification" (formula "25"))
                     (rule "false_right" (formula "25"))
                     (rule "allLeft" (formula "16") (inst "t=i_7"))
                     (rule "inEqSimp_contradEq3" (formula "16") (term "1") (ifseqformula "21"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
                     (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "16") (term "0,0,1"))
                     (rule "qeq_literals" (formula "16") (term "0,1"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "inEqSimp_contradInEq1" (formula "16") (term "0") (ifseqformula "19"))
                     (rule "qeq_literals" (formula "16") (term "0,0"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "allLeft" (formula "22") (inst "t=i_6"))
                     (rule "inEqSimp_commuteGeq" (formula "22") (term "1,0"))
                     (rule "inEqSimp_contradEq7" (formula "22") (term "1") (ifseqformula "15"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1"))
                     (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "22") (term "0,0,1"))
                     (rule "leq_literals" (formula "22") (term "0,1"))
                     (builtin "One Step Simplification" (formula "22"))
                     (rule "inEqSimp_contradInEq1" (formula "22") (term "0") (ifseqformula "13"))
                     (rule "qeq_literals" (formula "22") (term "0,0"))
                     (builtin "One Step Simplification" (formula "22"))
                     (rule "inEqSimp_antiSymm" (formula "16") (ifseqformula "22"))
                     (rule "applyEq" (formula "22") (term "0,2,0") (ifseqformula "16"))
                     (rule "inEqSimp_homoInEq0" (formula "22"))
                     (rule "polySimp_addComm1" (formula "22") (term "0"))
                     (rule "applyEqRigid" (formula "24") (term "1,1,0,0") (ifseqformula "16"))
                     (rule "applyEq" (formula "23") (term "0") (ifseqformula "16"))
                     (rule "inEqSimp_homoInEq0" (formula "23"))
                     (rule "polySimp_pullOutFactor1" (formula "23") (term "0"))
                     (rule "add_literals" (formula "23") (term "1,0"))
                     (rule "times_zero_1" (formula "23") (term "0"))
                     (rule "qeq_literals" (formula "23"))
                     (rule "true_left" (formula "23"))
                     (rule "applyEq" (formula "20") (term "0") (ifseqformula "16"))
                     (rule "applyEqRigid" (formula "17") (term "0") (ifseqformula "16"))
                     (rule "inEqSimp_homoInEq1" (formula "17"))
                     (rule "polySimp_pullOutFactor1" (formula "17") (term "0"))
                     (rule "add_literals" (formula "17") (term "1,0"))
                     (rule "times_zero_1" (formula "17") (term "0"))
                     (rule "leq_literals" (formula "17"))
                     (rule "true_left" (formula "17"))
                     (rule "applyEqRigid" (formula "19") (term "1,1") (ifseqformula "16"))
                     (rule "applyEq" (formula "20") (term "0,2,1,0") (ifseqformula "16"))
                     (rule "polySimp_addComm1" (formula "20") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "20"))
                     (rule "polySimp_mulLiterals" (formula "20") (term "0"))
                     (rule "polySimp_elimOne" (formula "20") (term "0"))
                     (rule "inEqSimp_contradInEq0" (formula "15") (ifseqformula "20"))
                     (rule "andLeft" (formula "15"))
                     (rule "inEqSimp_homoInEq1" (formula "15"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                     (rule "mul_literals" (formula "15") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "15") (term "0"))
                     (rule "polySimp_addComm1" (formula "15") (term "0,0"))
                     (rule "add_literals" (formula "15") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "15") (term "0"))
                     (rule "add_literals" (formula "15") (term "1,1,0"))
                     (rule "times_zero_1" (formula "15") (term "1,0"))
                     (rule "add_literals" (formula "15") (term "0"))
                     (rule "leq_literals" (formula "15"))
                     (rule "closeFalse" (formula "15"))
                  )
               )
               (branch " âˆ€ int j; ( j â‰¤ -1 âˆ¨ j â‰¥ verif.selectvoting.system.core.Utils.min(b.length, a.length) âˆ¨ b[j] = a[j]) âˆ§ b.length â‰¤ a.length"
                  (rule "andLeft" (formula "18"))
                  (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "19"))
                  (rule "mul_literals" (formula "4") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                  (rule "mul_literals" (formula "4") (term "1"))
                  (rule "arrayLengthIsAShort" (formula "4") (term "0"))
                  (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                  (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "5"))
                  (rule "leq_literals" (formula "4") (term "0"))
                  (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "arrayLengthIsAShort" (formula "22") (term "1,1,1,0,1,1,0,1"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "arrayLengthNotNegative" (formula "22") (term "1,1,1,0,1,1,0,1"))
                  (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "4"))
                  (rule "leq_literals" (formula "1") (term "0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "cut_direct" (formula "22") (term "0"))
                  (branch "CUT: b.length = a.length TRUE"
                     (builtin "One Step Simplification" (formula "23"))
                     (rule "allRight" (formula "23") (inst "sk=iv_2"))
                     (rule "orRight" (formula "23"))
                     (rule "orRight" (formula "23"))
                     (rule "inEqSimp_leqRight" (formula "23"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "replace_known_left" (formula "25") (term "0,0,1") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "1")))
                     (rule "inEqSimp_geqRight" (formula "24"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_homoInEq0" (formula "25") (term "0,0"))
                     (rule "eqSymm" (formula "25"))
                     (rule "polySimp_addComm1" (formula "25") (term "0,0,1"))
                     (rule "inEqSimp_homoInEq0" (formula "25") (term "0,0"))
                     (rule "eqSymm" (formula "25"))
                     (rule "polySimp_addComm1" (formula "25") (term "0,0,1"))
                     (rule "applyEq" (formula "25") (term "1,0,0,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "17") (term "2,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "7") (term "0") (ifseqformula "3"))
                     (rule "applyEq" (formula "21") (term "0") (ifseqformula "3"))
                     (rule "inEqSimp_homoInEq0" (formula "21"))
                     (rule "polySimp_pullOutFactor1" (formula "21") (term "0"))
                     (rule "add_literals" (formula "21") (term "1,0"))
                     (rule "times_zero_1" (formula "21") (term "0"))
                     (rule "qeq_literals" (formula "21"))
                     (rule "true_left" (formula "21"))
                     (rule "applyEq" (formula "20") (term "1,1,1,0,0") (ifseqformula "3"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,0,1"))
                     (rule "polySimp_rightDist" (formula "23") (term "1,0,1"))
                     (rule "mul_literals" (formula "23") (term "0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,1"))
                     (rule "polySimp_elimOne" (formula "23") (term "1,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "23") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "23") (term "0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "replace_known_left" (formula "23") (term "0,1") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "1")))
                     (rule "allLeft" (formula "20") (inst "t=iv_2"))
                     (rule "replace_known_right" (formula "20") (term "1") (ifseqformula "24"))
                     (builtin "One Step Simplification" (formula "20"))
                     (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "20") (term "0") (ifseqformula "2"))
                     (rule "qeq_literals" (formula "20") (term "0,0"))
                     (builtin "One Step Simplification" (formula "20"))
                     (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "20"))
                     (rule "polySimp_rightDist" (formula "16") (term "0,0"))
                     (rule "mul_literals" (formula "16") (term "0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1"))
                     (rule "polySimp_rightDist" (formula "16") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "1,1"))
                     (rule "mul_literals" (formula "16") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "16") (term "1,1"))
                     (rule "allLeft" (formula "22") (inst "t=i_6"))
                     (rule "inEqSimp_commuteGeq" (formula "22") (term "1,0"))
                     (rule "inEqSimp_contradEq7" (formula "22") (term "1") (ifseqformula "18"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1"))
                     (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "22") (term "0,0,1"))
                     (rule "leq_literals" (formula "22") (term "0,1"))
                     (builtin "One Step Simplification" (formula "22"))
                     (rule "inEqSimp_contradInEq1" (formula "22") (term "0") (ifseqformula "15"))
                     (rule "qeq_literals" (formula "22") (term "0,0"))
                     (builtin "One Step Simplification" (formula "22"))
                     (rule "inEqSimp_contradInEq1" (formula "22") (ifseqformula "17"))
                     (rule "andLeft" (formula "22"))
                     (rule "inEqSimp_homoInEq1" (formula "22"))
                     (rule "polySimp_pullOutFactor1b" (formula "22") (term "0"))
                     (rule "add_literals" (formula "22") (term "1,1,0"))
                     (rule "times_zero_1" (formula "22") (term "1,0"))
                     (rule "add_literals" (formula "22") (term "0"))
                     (rule "leq_literals" (formula "22"))
                     (rule "closeFalse" (formula "22"))
                  )
                  (branch "CUT: b.length = a.length FALSE"
                     (builtin "One Step Simplification" (formula "23"))
                     (rule "false_right" (formula "23"))
                     (rule "inEqSimp_strengthen0" (formula "19") (ifseqformula "22"))
                     (rule "inEqSimp_contradEq3" (formula "22") (ifseqformula "19"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0"))
                     (rule "add_literals" (formula "22") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "22") (term "1,0,0"))
                     (rule "add_zero_right" (formula "22") (term "0,0"))
                     (rule "qeq_literals" (formula "22") (term "0"))
                     (builtin "One Step Simplification" (formula "22"))
                     (rule "false_right" (formula "22"))
                     (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "19"))
                     (rule "mul_literals" (formula "4") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "4") (term "0"))
                     (rule "add_literals" (formula "4") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                     (rule "mul_literals" (formula "4") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "4"))
                     (rule "leq_literals" (formula "3") (term "0"))
                     (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "allLeft" (formula "18") (inst "t=i_6"))
                     (rule "inEqSimp_commuteGeq" (formula "18") (term "1,0"))
                     (rule "inEqSimp_contradEq7" (formula "18") (term "1") (ifseqformula "15"))
                     (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1"))
                     (rule "add_literals" (formula "18") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "18") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "18") (term "0,0,1"))
                     (rule "leq_literals" (formula "18") (term "0,1"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_contradInEq1" (formula "18") (term "0") (ifseqformula "13"))
                     (rule "qeq_literals" (formula "18") (term "0,0"))
                     (builtin "One Step Simplification" (formula "18"))
                     (builtin "Evaluate Query" (formula "14") (term "0") (newnames "a_5,b_5,callee,queryResult_12,res_min_4"))
                     (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_min(heap,length(a),length(b))_1100000_2" (formula "15") (term "0"))
                     (rule "notLeft" (formula "1"))
                     (rule "eqSymm" (formula "21") (term "0,0,1"))
                     (rule "variableDeclaration" (formula "21") (term "1") (newnames "queryResult_12"))
                     (builtin "Use Operation Contract" (formula "21") (newnames "heapBefore_min_4,result_13,exc_12") (contract "verif.selectvoting.system.core.Utils[verif.selectvoting.system.core.Utils::min(int,int)].JML normal_behavior operation contract.0"))
                     (branch "Post (min)"
                        (builtin "One Step Simplification" (formula "22"))
                        (builtin "One Step Simplification" (formula "21"))
                        (rule "andLeft" (formula "21"))
                        (rule "andLeft" (formula "22"))
                        (rule "andLeft" (formula "22"))
                        (rule "eqSymm" (formula "23") (term "0,1,1"))
                        (rule "eqSymm" (formula "23") (term "0,1"))
                        (rule "eqSymm" (formula "22") (term "1"))
                        (rule "inEqSimp_gtToGeq" (formula "23") (term "0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "23") (term "0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "22") (term "0"))
                        (rule "assignment" (formula "24") (term "1"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "23") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "23") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "23") (term "0,0"))
                        (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "20"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "andLeft" (formula "23"))
                        (rule "notLeft" (formula "24"))
                        (rule "applyEq" (formula "19") (term "1,1,1,0,0") (ifseqformula "23"))
                        (rule "applyEq" (formula "24") (term "0") (ifseqformula "23"))
                        (rule "eqSymm" (formula "24"))
                        (rule "replace_known_right" (formula "22") (term "1") (ifseqformula "24"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "notLeft" (formula "22"))
                        (rule "inEqSimp_geqRight" (formula "23"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "applyEq" (formula "21") (term "0") (ifseqformula "23"))
                        (rule "inEqSimp_homoInEq0" (formula "21"))
                        (rule "polySimp_addComm1" (formula "21") (term "0"))
                        (rule "applyEq" (formula "19") (term "1,0") (ifseqformula "23"))
                        (rule "applyEq" (formula "5") (term "0") (ifseqformula "23"))
                        (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "23"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "21"))
                        (rule "polySimp_mulComm0" (formula "21") (term "1"))
                        (rule "polySimp_rightDist" (formula "21") (term "1"))
                        (rule "mul_literals" (formula "21") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "21") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "21") (term "1,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_contradEq7" (formula "23") (ifseqformula "20"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0"))
                        (rule "add_literals" (formula "23") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "23") (term "1,0,0"))
                        (rule "add_zero_right" (formula "23") (term "0,0"))
                        (rule "leq_literals" (formula "23") (term "0"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "false_right" (formula "23"))
                        (rule "methodCallEmpty" (formula "23") (term "1"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "emptyModality" (formula "23") (term "1"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "notRight" (formula "23"))
                        (rule "eqSymm" (formula "1"))
                        (rule "applyEq" (formula "19") (term "1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "20") (term "1,1,1,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "21") (term "1,1") (ifseqformula "1"))
                        (rule "applyEq" (formula "5") (term "0") (ifseqformula "1"))
                        (rule "applyEq" (formula "23") (term "1") (ifseqformula "1"))
                        (builtin "Evaluate Query" (formula "19") (term "0") (newnames "a_6,b_6,callee,queryResult_13,res_min_5"))
                        (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_min(heap,res_min_4,length(a))_01100000_3" (formula "20") (term "0"))
                        (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_min(heap,res_min_4,length(a))_01100000_3" (formula "21") (term "1,1,0,0"))
                        (rule "notLeft" (formula "1"))
                        (rule "eqSymm" (formula "24") (term "0,0,1"))
                        (rule "variableDeclaration" (formula "24") (term "1") (newnames "queryResult_13"))
                        (builtin "Use Operation Contract" (formula "24") (newnames "heapBefore_min_5,result_14,exc_13") (contract "verif.selectvoting.system.core.Utils[verif.selectvoting.system.core.Utils::min(int,int)].JML normal_behavior operation contract.0"))
                        (branch "Post (min)"
                           (builtin "One Step Simplification" (formula "24"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "andLeft" (formula "24"))
                           (rule "andLeft" (formula "25"))
                           (rule "andLeft" (formula "25"))
                           (rule "eqSymm" (formula "26") (term "0,1"))
                           (rule "eqSymm" (formula "26") (term "0,1,1"))
                           (rule "inEqSimp_gtToGeq" (formula "26") (term "0"))
                           (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "26") (term "0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "25") (term "0"))
                           (rule "assignment" (formula "27") (term "1"))
                           (builtin "One Step Simplification" (formula "27"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "26") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "26") (term "0,0"))
                           (rule "polySimp_elimOne" (formula "26") (term "0,0"))
                           (rule "inEqSimp_contradEq7" (formula "26") (term "0,1,1") (ifseqformula "21"))
                           (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,1,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,0,1,1"))
                           (rule "add_literals" (formula "26") (term "1,1,0,0,0,1,1"))
                           (rule "times_zero_1" (formula "26") (term "1,0,0,0,1,1"))
                           (rule "add_zero_right" (formula "26") (term "0,0,0,1,1"))
                           (rule "leq_literals" (formula "26") (term "0,0,1,1"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "21"))
                           (rule "inEqSimp_homoInEq1" (formula "26") (term "0,0"))
                           (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "26") (term "0,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "26") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "26") (term "0,0,0,0"))
                           (rule "add_literals" (formula "26") (term "0,0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,0"))
                           (rule "add_literals" (formula "26") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "26") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "26") (term "0,0,0"))
                           (rule "leq_literals" (formula "26") (term "0,0"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "notLeft" (formula "26"))
                           (rule "inEqSimp_subsumption1" (formula "25") (term "0") (ifseqformula "21"))
                           (rule "inEqSimp_homoInEq0" (formula "25") (term "0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,0"))
                           (rule "add_literals" (formula "25") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "25") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "25") (term "0,0,0"))
                           (rule "qeq_literals" (formula "25") (term "0,0"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "applyEq" (formula "27") (term "0,1,0") (ifseqformula "25"))
                           (rule "applyEq" (formula "26") (term "1") (ifseqformula "25"))
                           (rule "inEqSimp_contradEq7" (formula "26") (ifseqformula "21"))
                           (rule "polySimp_mulComm0" (formula "26") (term "1,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0"))
                           (rule "add_literals" (formula "26") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "26") (term "1,0,0"))
                           (rule "add_zero_right" (formula "26") (term "0,0"))
                           (rule "leq_literals" (formula "26") (term "0"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "false_right" (formula "26"))
                           (rule "methodCallEmpty" (formula "26") (term "1"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "emptyModality" (formula "26") (term "1"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "notRight" (formula "26"))
                           (rule "applyEq" (formula "20") (term "0") (ifseqformula "1"))
                           (rule "applyEqRigid" (formula "21") (term "1,1,0,0") (ifseqformula "1"))
                           (rule "inEqSimp_contradInEq1" (formula "20") (ifseqformula "16"))
                           (rule "andLeft" (formula "20"))
                           (rule "inEqSimp_homoInEq1" (formula "20"))
                           (rule "polySimp_pullOutFactor1b" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "1,1,0"))
                           (rule "times_zero_1" (formula "20") (term "1,0"))
                           (rule "add_zero_right" (formula "20") (term "0"))
                           (rule "leq_literals" (formula "20"))
                           (rule "closeFalse" (formula "20"))
                        )
                        (branch "Exceptional Post (min)"
                           (builtin "One Step Simplification" (formula "25"))
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "andLeft" (formula "24"))
                           (rule "andLeft" (formula "24"))
                           (rule "andLeft" (formula "26"))
                           (rule "notLeft" (formula "24"))
                           (rule "close" (formula "27") (ifseqformula "26"))
                        )
                        (branch "Pre (min)"
                           (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "6")))
                           (rule "closeTrue" (formula "24"))
                        )
                     )
                     (branch "Exceptional Post (min)"
                        (builtin "One Step Simplification" (formula "22"))
                        (builtin "One Step Simplification" (formula "21"))
                        (rule "andLeft" (formula "21"))
                        (rule "andLeft" (formula "21"))
                        (rule "andLeft" (formula "23"))
                        (rule "notLeft" (formula "21"))
                        (rule "close" (formula "24") (ifseqformula "23"))
                     )
                     (branch "Pre (min)"
                        (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "5")))
                        (rule "closeTrue" (formula "21"))
                     )
                  )
               )
            )
            (branch "Exceptional Post (compare)"
               (builtin "One Step Simplification" (formula "17"))
               (builtin "One Step Simplification" (formula "16"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "18"))
               (rule "notLeft" (formula "16"))
               (rule "close" (formula "19") (ifseqformula "18"))
            )
            (branch "Pre (compare)"
               (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "17")) (ifInst ""  (formula "18")) (ifInst ""  (formula "4")) (ifInst ""  (formula "17")) (ifInst ""  (formula "7")) (ifInst ""  (formula "18")) (ifInst ""  (formula "6")))
               (rule "closeTrue" (formula "16"))
            )
         )
         (branch " âˆ€ int j; ( j â‰¤ -1 âˆ¨ j â‰¥ verif.selectvoting.system.core.Utils.min(a.length, b.length) âˆ¨ b[j] = a[j]) âˆ§ b.length â‰¥ a.length"
            (rule "andLeft" (formula "12"))
            (builtin "Evaluate Query" (formula "10") (term "0") (newnames "a1_5,a2_5,callee,queryResult_7,res_compare_5"))
            (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_compare(heap,b,a)_1000_1" (formula "11") (term "0"))
            (rule "notLeft" (formula "1"))
            (rule "eqSymm" (formula "14") (term "0,0,1"))
            (rule "variableDeclaration" (formula "14") (term "1") (newnames "queryResult_7"))
            (builtin "Use Operation Contract" (formula "14") (newnames "heapBefore_compare_5,result_8,exc_7") (contract "verif.selectvoting.system.core.Utils[verif.selectvoting.system.core.Utils::compare([B,[B)].JML normal_behavior operation contract.0"))
            (branch "Post (compare)"
               (builtin "One Step Simplification" (formula "14"))
               (builtin "One Step Simplification" (formula "15"))
               (rule "andLeft" (formula "14"))
               (rule "andLeft" (formula "15"))
               (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "15") (term "0,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,1,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,1,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,0,0"))
               (rule "assignment" (formula "16") (term "1"))
               (builtin "One Step Simplification" (formula "16"))
               (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,0,0"))
               (rule "mul_literals" (formula "15") (term "0,1,1,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "15") (term "1,0,1,0,0,0"))
               (rule "mul_literals" (formula "15") (term "0,1,0,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "15") (term "1,1,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,1,0,0,0"))
               (rule "mul_literals" (formula "15") (term "0,1,1,0,0,1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "15") (term "0,1,1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,0,1,0"))
               (rule "nnf_imp2or" (formula "15") (term "0,0,1,0"))
               (rule "nnf_notAnd" (formula "15") (term "0,0,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,0,1,0"))
               (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,0,1,0"))
               (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,0,1,0"))
               (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0,0,1,0"))
               (rule "add_literals" (formula "15") (term "0,0,0,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,1,0"))
               (rule "mul_literals" (formula "15") (term "1,0,0,0,0,1,0"))
               (rule "nnf_imp2or" (formula "15") (term "0,1,1,0,0,0"))
               (rule "nnf_notAnd" (formula "15") (term "0,0,1,1,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,1,1,0,0,0"))
               (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0,1,1,0,0,0"))
               (rule "add_literals" (formula "15") (term "0,0,0,0,0,1,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,1,1,0,0,0"))
               (rule "mul_literals" (formula "15") (term "1,0,0,0,1,1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,1,1,0,0,0"))
               (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,1,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,1,1,0,0,0"))
               (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,1,1,0,0,0"))
               (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,1,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,1,1,0,0,0"))
               (rule "methodCallEmpty" (formula "16") (term "1"))
               (builtin "One Step Simplification" (formula "16"))
               (rule "emptyModality" (formula "16") (term "1"))
               (builtin "One Step Simplification" (formula "16"))
               (rule "notRight" (formula "16"))
               (rule "eqSymm" (formula "1"))
               (rule "applyEq" (formula "16") (term "0,1") (ifseqformula "1"))
               (rule "replace_known_left" (formula "16") (term "1") (ifseqformula "11"))
               (builtin "One Step Simplification" (formula "16"))
               (rule "orLeft" (formula "16"))
               (branch "âˆƒ int i; ( i â‰¥ 0 âˆ§ i â‰¤ -1 + verif.selectvoting.system.core.Utils.min(b.length, a.length) âˆ§ ( b[i] â‰¤ -1 + a[i] âˆ§ âˆ€ int j; (j â‰¤ -1 âˆ¨ j â‰¥ i âˆ¨ b[j] = a[j])))"
                  (rule "exLeft" (formula "16") (inst "sk=i_5"))
                  (rule "andLeft" (formula "16"))
                  (rule "andLeft" (formula "17"))
                  (rule "andLeft" (formula "16"))
                  (rule "inEqSimp_homoInEq0" (formula "17"))
                  (rule "polySimp_addComm1" (formula "17") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1"))
                  (rule "polySimp_rightDist" (formula "17") (term "1"))
                  (rule "mul_literals" (formula "17") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "17") (term "1,1"))
                  (rule "arrayLengthIsAShort" (formula "4") (term "0"))
                  (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                  (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "5"))
                  (rule "leq_literals" (formula "4") (term "0"))
                  (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "arrayLengthNotNegative" (formula "22") (term "1,1,1,0,1,1,0,1"))
                  (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "4"))
                  (rule "leq_literals" (formula "1") (term "0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "arrayLengthIsAShort" (formula "22") (term "1,1,1,0,1,1,0,1"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "cut_direct" (formula "22") (term "0"))
                  (branch "CUT: b.length = a.length TRUE"
                     (builtin "One Step Simplification" (formula "23"))
                     (rule "allRight" (formula "23") (inst "sk=iv_1"))
                     (rule "orRight" (formula "23"))
                     (rule "orRight" (formula "23"))
                     (rule "inEqSimp_leqRight" (formula "23"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "1")))
                     (rule "inEqSimp_geqRight" (formula "24"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_homoInEq0" (formula "25") (term "0,0"))
                     (rule "eqSymm" (formula "25"))
                     (rule "polySimp_addComm1" (formula "25") (term "0,0,1"))
                     (rule "inEqSimp_homoInEq0" (formula "25") (term "0,0"))
                     (rule "eqSymm" (formula "25"))
                     (rule "polySimp_addComm1" (formula "25") (term "0,0,1"))
                     (rule "applyEq" (formula "25") (term "1,0,0,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "16") (term "2,1,1,0,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "7") (term "0") (ifseqformula "3"))
                     (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "16") (term "0") (ifseqformula "3"))
                     (rule "inEqSimp_homoInEq1" (formula "16"))
                     (rule "polySimp_pullOutFactor1" (formula "16") (term "0"))
                     (rule "add_literals" (formula "16") (term "1,0"))
                     (rule "times_zero_1" (formula "16") (term "0"))
                     (rule "leq_literals" (formula "16"))
                     (rule "true_left" (formula "16"))
                     (rule "applyEq" (formula "18") (term "1,0") (ifseqformula "3"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,0,1"))
                     (rule "polySimp_rightDist" (formula "23") (term "1,0,1"))
                     (rule "mul_literals" (formula "23") (term "0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,1"))
                     (rule "polySimp_elimOne" (formula "23") (term "1,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "23") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "23") (term "0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "replace_known_left" (formula "23") (term "0,1") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "1")))
                     (rule "allLeft" (formula "15") (inst "t=iv_1"))
                     (rule "replace_known_right" (formula "15") (term "1") (ifseqformula "24"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "2"))
                     (rule "qeq_literals" (formula "15") (term "0,0"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "15"))
                     (rule "polySimp_rightDist" (formula "19") (term "0,0"))
                     (rule "mul_literals" (formula "19") (term "0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                     (rule "polySimp_mulComm0" (formula "19") (term "1"))
                     (rule "polySimp_rightDist" (formula "19") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
                     (rule "mul_literals" (formula "19") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "19") (term "1,1"))
                     (rule "allLeft" (formula "16") (inst "t=i_5"))
                     (rule "inEqSimp_commuteGeq" (formula "16") (term "1,0"))
                     (rule "inEqSimp_contradEq3" (formula "16") (term "1") (ifseqformula "22"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
                     (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "16") (term "0,0,1"))
                     (rule "qeq_literals" (formula "16") (term "0,1"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "inEqSimp_contradInEq1" (formula "16") (term "0") (ifseqformula "19"))
                     (rule "qeq_literals" (formula "16") (term "0,0"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "inEqSimp_contradInEq1" (formula "16") (ifseqformula "21"))
                     (rule "andLeft" (formula "16"))
                     (rule "inEqSimp_homoInEq1" (formula "16"))
                     (rule "polySimp_pullOutFactor1b" (formula "16") (term "0"))
                     (rule "add_literals" (formula "16") (term "1,1,0"))
                     (rule "times_zero_1" (formula "16") (term "1,0"))
                     (rule "add_literals" (formula "16") (term "0"))
                     (rule "leq_literals" (formula "16"))
                     (rule "closeFalse" (formula "16"))
                  )
                  (branch "CUT: b.length = a.length FALSE"
                     (builtin "One Step Simplification" (formula "23"))
                     (rule "false_right" (formula "23"))
                     (rule "inEqSimp_strengthen1" (formula "14") (ifseqformula "22"))
                     (rule "inEqSimp_contradEq7" (formula "22") (ifseqformula "14"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0"))
                     (rule "add_literals" (formula "22") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "22") (term "1,0,0"))
                     (rule "add_zero_right" (formula "22") (term "0,0"))
                     (rule "leq_literals" (formula "22") (term "0"))
                     (builtin "One Step Simplification" (formula "22"))
                     (rule "false_right" (formula "22"))
                     (rule "allLeft" (formula "13") (inst "t=i_5"))
                     (rule "inEqSimp_commuteGeq" (formula "13") (term "1,0"))
                     (rule "inEqSimp_contradEq3" (formula "13") (term "1") (ifseqformula "19"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1"))
                     (rule "add_literals" (formula "13") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "13") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "13") (term "0,0,1"))
                     (rule "qeq_literals" (formula "13") (term "0,1"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "inEqSimp_contradInEq1" (formula "13") (term "0") (ifseqformula "17"))
                     (rule "qeq_literals" (formula "13") (term "0,0"))
                     (builtin "One Step Simplification" (formula "13"))
                     (builtin "Evaluate Query" (formula "14") (term "1,1,0,0") (newnames "a_3,b_3,callee,queryResult_9,res_min_2"))
                     (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_min(heap,length(a),length(b))_1001000_2" (formula "14") (term "0"))
                     (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_min(heap,length(a),length(b))_1001000_2" (formula "15") (term "1,1,0,0"))
                     (rule "notLeft" (formula "1"))
                     (rule "eqSymm" (formula "21") (term "0,0,1"))
                     (rule "variableDeclaration" (formula "21") (term "1") (newnames "queryResult_9"))
                     (builtin "Use Operation Contract" (formula "21") (newnames "heapBefore_min_2,result_10,exc_9") (contract "verif.selectvoting.system.core.Utils[verif.selectvoting.system.core.Utils::min(int,int)].JML normal_behavior operation contract.0"))
                     (branch "Post (min)"
                        (builtin "One Step Simplification" (formula "22"))
                        (builtin "One Step Simplification" (formula "21"))
                        (rule "andLeft" (formula "21"))
                        (rule "andLeft" (formula "22"))
                        (rule "andLeft" (formula "22"))
                        (rule "eqSymm" (formula "23") (term "0,1,1"))
                        (rule "eqSymm" (formula "23") (term "0,1"))
                        (rule "eqSymm" (formula "22") (term "1"))
                        (rule "inEqSimp_gtToGeq" (formula "23") (term "0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "23") (term "0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "22") (term "0"))
                        (rule "assignment" (formula "24") (term "1"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "23") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "23") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "23") (term "0,0"))
                        (rule "inEqSimp_contradEq7" (formula "23") (term "0,1,1") (ifseqformula "15"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,1,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,0,1,1"))
                        (rule "add_literals" (formula "23") (term "1,1,0,0,0,1,1"))
                        (rule "times_zero_1" (formula "23") (term "1,0,0,0,1,1"))
                        (rule "add_zero_right" (formula "23") (term "0,0,0,1,1"))
                        (rule "leq_literals" (formula "23") (term "0,0,1,1"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "inEqSimp_subsumption1" (formula "22") (term "0") (ifseqformula "15"))
                        (rule "inEqSimp_homoInEq0" (formula "22") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,0"))
                        (rule "add_literals" (formula "22") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "22") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "22") (term "0,0,0"))
                        (rule "qeq_literals" (formula "22") (term "0,0"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "applyEq" (formula "15") (term "1,1") (ifseqformula "22"))
                        (rule "applyEq" (formula "18") (term "2,0") (ifseqformula "22"))
                        (rule "applyEq" (formula "3") (term "0") (ifseqformula "22"))
                        (rule "applyEq" (formula "23") (term "1,1,0") (ifseqformula "22"))
                        (rule "inEqSimp_contradEq7" (formula "23") (term "1") (ifseqformula "15"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1"))
                        (rule "add_literals" (formula "23") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "23") (term "0,0,1"))
                        (rule "leq_literals" (formula "23") (term "0,1"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "notLeft" (formula "23"))
                        (rule "inEqSimp_leqRight" (formula "23"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "16"))
                        (rule "inEqSimp_homoInEq0" (formula "1") (term "0"))
                        (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0"))
                        (rule "qeq_literals" (formula "1") (term "0"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "methodCallEmpty" (formula "23") (term "1"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "emptyModality" (formula "23") (term "1"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "notRight" (formula "23"))
                        (rule "eqSymm" (formula "1"))
                        (rule "applyEq" (formula "16") (term "1,1") (ifseqformula "1"))
                        (rule "applyEq" (formula "19") (term "2,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "4") (term "0") (ifseqformula "1"))
                        (rule "applyEq" (formula "23") (term "1") (ifseqformula "1"))
                        (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "14"))
                        (rule "mul_literals" (formula "4") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                        (rule "mul_literals" (formula "4") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "4"))
                        (rule "leq_literals" (formula "19") (term "0"))
                        (builtin "One Step Simplification" (formula "19"))
                        (rule "true_left" (formula "19"))
                        (builtin "Evaluate Query" (formula "19") (term "0") (newnames "a_4,b_4,callee,queryResult_10,res_min_3"))
                        (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_min(heap,length(b),res_min_2)_01001000_3" (formula "20") (term "0"))
                        (rule "notLeft" (formula "1"))
                        (rule "eqSymm" (formula "24") (term "0,0,1"))
                        (rule "variableDeclaration" (formula "24") (term "1") (newnames "queryResult_10"))
                        (builtin "Use Operation Contract" (formula "24") (newnames "heapBefore_min_3,result_11,exc_10") (contract "verif.selectvoting.system.core.Utils[verif.selectvoting.system.core.Utils::min(int,int)].JML normal_behavior operation contract.0"))
                        (branch "Post (min)"
                           (builtin "One Step Simplification" (formula "25"))
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "andLeft" (formula "24"))
                           (rule "andLeft" (formula "25"))
                           (rule "andLeft" (formula "25"))
                           (rule "eqSymm" (formula "25") (term "1"))
                           (rule "inEqSimp_gtToGeq" (formula "26") (term "0"))
                           (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0"))
                           (rule "assignment" (formula "27") (term "1"))
                           (builtin "One Step Simplification" (formula "27"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "0"))
                           (rule "polySimp_mulComm0" (formula "26") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "26") (term "1,0"))
                           (rule "mul_literals" (formula "26") (term "0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "26") (term "1,1,0"))
                           (rule "replace_known_left" (formula "26") (term "0") (ifseqformula "17"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "andLeft" (formula "26"))
                           (rule "notLeft" (formula "27"))
                           (rule "applyEq" (formula "28") (term "0,1,0") (ifseqformula "26"))
                           (rule "applyEq" (formula "25") (term "1,1") (ifseqformula "26"))
                           (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "27"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "notLeft" (formula "25"))
                           (rule "inEqSimp_leqRight" (formula "26"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1"))
                           (rule "polySimp_rightDist" (formula "1") (term "1"))
                           (rule "mul_literals" (formula "1") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                           (rule "inEqSimp_contradEq7" (formula "26") (ifseqformula "17"))
                           (rule "polySimp_mulComm0" (formula "26") (term "1,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0"))
                           (rule "add_literals" (formula "26") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "26") (term "1,0,0"))
                           (rule "add_zero_right" (formula "26") (term "0,0"))
                           (rule "leq_literals" (formula "26") (term "0"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "false_right" (formula "26"))
                           (rule "methodCallEmpty" (formula "26") (term "1"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "emptyModality" (formula "26") (term "1"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "notRight" (formula "26"))
                           (rule "applyEqRigid" (formula "20") (term "0") (ifseqformula "1"))
                           (rule "inEqSimp_contradInEq0" (formula "20") (ifseqformula "16"))
                           (rule "andLeft" (formula "20"))
                           (rule "inEqSimp_homoInEq1" (formula "20"))
                           (rule "polySimp_pullOutFactor1b" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "1,1,0"))
                           (rule "times_zero_1" (formula "20") (term "1,0"))
                           (rule "add_zero_right" (formula "20") (term "0"))
                           (rule "leq_literals" (formula "20"))
                           (rule "closeFalse" (formula "20"))
                        )
                        (branch "Exceptional Post (min)"
                           (builtin "One Step Simplification" (formula "25"))
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "andLeft" (formula "24"))
                           (rule "andLeft" (formula "25"))
                           (rule "andLeft" (formula "24"))
                           (rule "andLeft" (formula "26"))
                           (rule "notLeft" (formula "24"))
                           (rule "close" (formula "28") (ifseqformula "27"))
                        )
                        (branch "Pre (min)"
                           (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "7")))
                           (rule "closeTrue" (formula "24"))
                        )
                     )
                     (branch "Exceptional Post (min)"
                        (builtin "One Step Simplification" (formula "22"))
                        (builtin "One Step Simplification" (formula "21"))
                        (rule "andLeft" (formula "21"))
                        (rule "andLeft" (formula "21"))
                        (rule "andLeft" (formula "23"))
                        (rule "notLeft" (formula "21"))
                        (rule "close" (formula "24") (ifseqformula "23"))
                     )
                     (branch "Pre (min)"
                        (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "5")))
                        (rule "closeTrue" (formula "21"))
                     )
                  )
               )
               (branch " âˆ€ int j; ( j â‰¤ -1 âˆ¨ j â‰¥ verif.selectvoting.system.core.Utils.min(b.length, a.length) âˆ¨ b[j] = a[j]) âˆ§ b.length â‰¤ a.length"
                  (rule "andLeft" (formula "16"))
                  (rule "inEqSimp_antiSymm" (formula "14") (ifseqformula "17"))
                  (rule "replace_known_left" (formula "21") (term "0") (ifseqformula "14"))
                  (builtin "One Step Simplification" (formula "21"))
                  (rule "allRight" (formula "21") (inst "sk=iv_0"))
                  (rule "orRight" (formula "21"))
                  (rule "orRight" (formula "21"))
                  (rule "inEqSimp_geqRight" (formula "22"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_leqRight" (formula "22"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "replace_known_left" (formula "23") (term "0,0,0") (ifseqformula "1"))
                  (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "1")))
                  (rule "inEqSimp_homoInEq0" (formula "23") (term "0,0"))
                  (rule "eqSymm" (formula "23"))
                  (rule "polySimp_addComm1" (formula "23") (term "0,0,1"))
                  (rule "inEqSimp_homoInEq0" (formula "23") (term "0,0"))
                  (rule "eqSymm" (formula "23"))
                  (rule "polySimp_addComm1" (formula "23") (term "0,0,1"))
                  (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "16"))
                  (rule "applyEq" (formula "19") (term "1,1,1,0,0") (ifseqformula "16"))
                  (rule "applyEq" (formula "17") (term "0") (ifseqformula "16"))
                  (rule "inEqSimp_homoInEq1" (formula "17"))
                  (rule "polySimp_pullOutFactor1" (formula "17") (term "0"))
                  (rule "add_literals" (formula "17") (term "1,0"))
                  (rule "times_zero_1" (formula "17") (term "0"))
                  (rule "leq_literals" (formula "17"))
                  (rule "true_left" (formula "17"))
                  (rule "applyEq" (formula "6") (term "0") (ifseqformula "16"))
                  (rule "applyEq" (formula "21") (term "1,0,0,0") (ifseqformula "15"))
                  (rule "applyEq" (formula "14") (term "2,1,1,0,0") (ifseqformula "15"))
                  (rule "applyEq" (formula "17") (term "0") (ifseqformula "14"))
                  (rule "inEqSimp_homoInEq0" (formula "17"))
                  (rule "polySimp_pullOutFactor1" (formula "17") (term "0"))
                  (rule "add_literals" (formula "17") (term "1,0"))
                  (rule "times_zero_1" (formula "17") (term "0"))
                  (rule "qeq_literals" (formula "17"))
                  (rule "true_left" (formula "17"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,0,1"))
                  (rule "polySimp_rightDist" (formula "19") (term "1,0,1"))
                  (rule "mul_literals" (formula "19") (term "0,1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,1"))
                  (rule "polySimp_elimOne" (formula "19") (term "1,1,0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                  (rule "replace_known_left" (formula "19") (term "0,1") (ifseqformula "2"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "19") (term "1,0,0"))
                  (rule "mul_literals" (formula "19") (term "0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                  (rule "replace_known_left" (formula "19") (term "0,0") (ifseqformula "2"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "arrayLengthIsAShort" (formula "5") (term "0"))
                  (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "arrayLengthNotNegative" (formula "5") (term "0"))
                  (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "6"))
                  (rule "leq_literals" (formula "5") (term "0"))
                  (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "allLeft" (formula "16") (inst "t=iv_0"))
                  (rule "replace_known_right" (formula "16") (term "1") (ifseqformula "20"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "inEqSimp_commuteGeq" (formula "16") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "16") (term "0") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "16") (term "0,0"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "arrayLengthNotNegative" (formula "14") (term "0"))
                  (rule "applyEq" (formula "14") (term "0") (ifseqformula "15"))
                  (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "5"))
                  (rule "leq_literals" (formula "14") (term "0"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "true_left" (formula "14"))
                  (rule "arrayLengthIsAShort" (formula "14") (term "0"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "true_left" (formula "14"))
                  (builtin "Evaluate Query" (formula "17") (term "1,1,0,0") (newnames "a_2,b_2,callee,queryResult_8,res_min_1"))
                  (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_min(heap,length(a),length(a))_101000_2" (formula "17") (term "0"))
                  (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_min(heap,length(a),length(a))_101000_2" (formula "18") (term "1,1,0,0"))
                  (rule "notLeft" (formula "1"))
                  (rule "eqSymm" (formula "18") (term "0,0,1"))
                  (rule "variableDeclaration" (formula "18") (term "1") (newnames "queryResult_8"))
                  (builtin "Use Operation Contract" (formula "18") (newnames "heapBefore_min_1,result_9,exc_8") (contract "verif.selectvoting.system.core.Utils[verif.selectvoting.system.core.Utils::min(int,int)].JML normal_behavior operation contract.0"))
                  (branch "Post (min)"
                     (builtin "One Step Simplification" (formula "18"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "andLeft" (formula "18"))
                     (rule "andLeft" (formula "19"))
                     (rule "andLeft" (formula "19"))
                     (rule "notLeft" (formula "20"))
                     (rule "eqSymm" (formula "19") (term "1"))
                     (rule "inEqSimp_gtRight" (formula "20"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                     (rule "polySimp_pullOutFactor2" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "1,0"))
                     (rule "times_zero_1" (formula "1") (term "0"))
                     (rule "leq_literals" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "inEqSimp_homoInEq0" (formula "19") (term "0"))
                     (rule "polySimp_pullOutFactor1" (formula "19") (term "0,0"))
                     (rule "add_literals" (formula "19") (term "1,0,0"))
                     (rule "times_zero_1" (formula "19") (term "0,0"))
                     (rule "qeq_literals" (formula "19") (term "0"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "assignment" (formula "20") (term "1"))
                     (builtin "One Step Simplification" (formula "20"))
                     (rule "applyEq" (formula "5") (term "0") (ifseqformula "19"))
                     (rule "applyEq" (formula "2") (term "0") (ifseqformula "19"))
                     (rule "applyEq" (formula "14") (term "1") (ifseqformula "19"))
                     (rule "methodCallEmpty" (formula "20") (term "1"))
                     (builtin "One Step Simplification" (formula "20"))
                     (rule "emptyModality" (formula "20") (term "1"))
                     (builtin "One Step Simplification" (formula "20"))
                     (rule "notRight" (formula "20"))
                     (rule "eqSymm" (formula "1"))
                     (rule "applyEq" (formula "6") (term "0") (ifseqformula "1"))
                     (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                     (rule "applyEq" (formula "15") (term "1") (ifseqformula "1"))
                     (rule "applyEq" (formula "20") (term "1") (ifseqformula "1"))
                     (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "17"))
                     (rule "andLeft" (formula "3"))
                     (rule "inEqSimp_homoInEq1" (formula "3"))
                     (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                     (rule "add_literals" (formula "3") (term "1,1,0"))
                     (rule "times_zero_1" (formula "3") (term "1,0"))
                     (rule "add_literals" (formula "3") (term "0"))
                     (rule "leq_literals" (formula "3"))
                     (rule "closeFalse" (formula "3"))
                  )
                  (branch "Exceptional Post (min)"
                     (builtin "One Step Simplification" (formula "18"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "andLeft" (formula "18"))
                     (rule "andLeft" (formula "18"))
                     (rule "andLeft" (formula "20"))
                     (rule "notLeft" (formula "18"))
                     (rule "close" (formula "21") (ifseqformula "20"))
                  )
                  (branch "Pre (min)"
                     (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "6")))
                     (rule "closeTrue" (formula "18"))
                  )
               )
            )
            (branch "Exceptional Post (compare)"
               (builtin "One Step Simplification" (formula "14"))
               (builtin "One Step Simplification" (formula "15"))
               (rule "andLeft" (formula "14"))
               (rule "andLeft" (formula "14"))
               (rule "andLeft" (formula "16"))
               (rule "notLeft" (formula "14"))
               (rule "close" (formula "17") (ifseqformula "16"))
            )
            (branch "Pre (compare)"
               (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "15")) (ifInst ""  (formula "16")) (ifInst ""  (formula "4")) (ifInst ""  (formula "15")) (ifInst ""  (formula "7")) (ifInst ""  (formula "16")) (ifInst ""  (formula "6")))
               (rule "closeTrue" (formula "14"))
            )
         )
      )
      (branch "Exceptional Post (compare)"
         (builtin "One Step Simplification" (formula "11"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "andLeft" (formula "10"))
         (rule "andLeft" (formula "10"))
         (rule "andLeft" (formula "12"))
         (rule "notLeft" (formula "10"))
         (rule "close" (formula "13") (ifseqformula "12"))
      )
      (branch "Pre (compare)"
         (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "12")) (ifInst ""  (formula "11")) (ifInst ""  (formula "3")) (ifInst ""  (formula "12")) (ifInst ""  (formula "5")) (ifInst ""  (formula "11")) (ifInst ""  (formula "6")))
         (rule "closeTrue" (formula "10"))
      )
   )
   (branch "a.length â‰¥ 1 FALSE"
      (rule "eqSymm" (formula "12") (term "0"))
      (rule "inEqSimp_geqRight" (formula "11"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "inEqSimp_contradEq7" (formula "12") (term "0") (ifseqformula "2"))
      (rule "times_zero_1" (formula "12") (term "1,0,0,0"))
      (rule "add_zero_right" (formula "12") (term "0,0,0"))
      (rule "leq_literals" (formula "12") (term "0,0"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "false_right" (formula "12"))
      (builtin "Evaluate Query" (formula "8") (term "0") (newnames "a1_1,a2_1,callee,queryResult_2,res_compare_1"))
      (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_compare(heap,a,b)_10_0" (formula "9") (term "0"))
      (rule "notLeft" (formula "1"))
      (rule "eqSymm" (formula "10") (term "0,0,1"))
      (rule "variableDeclaration" (formula "10") (term "1") (newnames "queryResult_2"))
      (builtin "Use Operation Contract" (formula "10") (newnames "heapBefore_compare_1,result_3,exc_2") (contract "verif.selectvoting.system.core.Utils[verif.selectvoting.system.core.Utils::compare([B,[B)].JML normal_behavior operation contract.0"))
      (branch "Post (compare)"
         (builtin "One Step Simplification" (formula "10"))
         (builtin "One Step Simplification" (formula "11"))
         (rule "andLeft" (formula "10"))
         (rule "andLeft" (formula "11"))
         (rule "eqSymm" (formula "11") (term "1,0,1,1,0,0,0"))
         (rule "eqSymm" (formula "11") (term "1,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0,0,0"))
         (rule "polySimp_addComm1" (formula "11") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,1,1,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,1,0,0,0"))
         (rule "assignment" (formula "12") (term "1"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,0,0"))
         (rule "mul_literals" (formula "11") (term "0,1,1,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "0,0,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,1,0,0,0"))
         (rule "mul_literals" (formula "11") (term "0,1,1,0,0,1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,0,1,0"))
         (rule "mul_literals" (formula "11") (term "0,1,1,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,0,1,0"))
         (rule "nnf_imp2or" (formula "11") (term "0,0,1,0"))
         (rule "nnf_notAnd" (formula "11") (term "0,0,0,1,0"))
         (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0,1,0"))
         (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0,1,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,0,1,0"))
         (rule "add_zero_left" (formula "11") (term "0,0,1,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0"))
         (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,0,1,0"))
         (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,0,1,0"))
         (rule "add_zero_right" (formula "11") (term "0,0,0,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,1,0"))
         (rule "mul_literals" (formula "11") (term "1,0,0,0,0,1,0"))
         (rule "nnf_imp2or" (formula "11") (term "0,1,1,0,0,0"))
         (rule "nnf_notAnd" (formula "11") (term "0,0,1,1,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,1,1,0,0,0"))
         (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,1,1,0,0,0"))
         (rule "add_zero_right" (formula "11") (term "0,0,0,0,0,1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,1,0,0,0"))
         (rule "mul_literals" (formula "11") (term "1,0,0,0,1,1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,1,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,1,1,0,0,0"))
         (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,1,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,1,1,0,0,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,1,1,0,0,0"))
         (rule "add_zero_left" (formula "11") (term "0,0,1,0,0,1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,1,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,1,1,0,0,0"))
         (rule "methodCallEmpty" (formula "12") (term "1"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "emptyModality" (formula "12") (term "1"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "notRight" (formula "12"))
         (rule "eqSymm" (formula "1"))
         (rule "applyEq" (formula "12") (term "0,1") (ifseqformula "1"))
         (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "9"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "orLeft" (formula "12"))
         (branch "âˆƒ int i; ( i â‰¥ 0 âˆ§ i â‰¤ -1 + verif.selectvoting.system.core.Utils.min(a.length, b.length) âˆ§ ( b[i] â‰¥ 1 + a[i] âˆ§ âˆ€ int j; (j â‰¤ -1 âˆ¨ j â‰¥ i âˆ¨ b[j] = a[j])))"
            (rule "exLeft" (formula "12") (inst "sk=i_3"))
            (rule "andLeft" (formula "12"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "12"))
            (rule "inEqSimp_homoInEq0" (formula "13"))
            (rule "polySimp_addComm1" (formula "13") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "13"))
            (rule "polySimp_mulComm0" (formula "13") (term "1"))
            (rule "polySimp_rightDist" (formula "13") (term "1"))
            (rule "mul_literals" (formula "13") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
            (rule "polySimp_elimOne" (formula "13") (term "1,1"))
            (builtin "Evaluate Query" (formula "10") (term "0") (newnames "a1_3,a2_3,callee,queryResult_5,res_compare_3"))
            (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_compare(heap,b,a)_0010_1" (formula "11") (term "0"))
            (rule "notLeft" (formula "1"))
            (rule "eqSymm" (formula "16") (term "0,0,1"))
            (rule "variableDeclaration" (formula "16") (term "1") (newnames "queryResult_5"))
            (rule "arrayLengthNotNegative" (formula "3") (term "0"))
            (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "4"))
            (rule "leq_literals" (formula "3") (term "0"))
            (builtin "One Step Simplification" (formula "3"))
            (rule "true_left" (formula "3"))
            (rule "arrayLengthIsAShort" (formula "3") (term "0"))
            (builtin "One Step Simplification" (formula "3"))
            (rule "true_left" (formula "3"))
            (builtin "Use Operation Contract" (formula "16") (newnames "heapBefore_compare_3,result_6,exc_5") (contract "verif.selectvoting.system.core.Utils[verif.selectvoting.system.core.Utils::compare([B,[B)].JML normal_behavior operation contract.0"))
            (branch "Post (compare)"
               (builtin "One Step Simplification" (formula "16"))
               (builtin "One Step Simplification" (formula "17"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "17"))
               (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "17") (term "0,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,1,1,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1,1,0,0,0"))
               (rule "assignment" (formula "18") (term "1"))
               (builtin "One Step Simplification" (formula "18"))
               (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,0,0"))
               (rule "mul_literals" (formula "17") (term "0,1,1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,0,1,0,0,0"))
               (rule "mul_literals" (formula "17") (term "0,1,0,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,1,1,0,0,0"))
               (rule "mul_literals" (formula "17") (term "0,1,1,0,0,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,1,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "17") (term "0,1,1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,0,1,0"))
               (rule "nnf_imp2or" (formula "17") (term "0,0,1,0"))
               (rule "nnf_notAnd" (formula "17") (term "0,0,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0,0,1,0"))
               (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0,0,1,0"))
               (rule "add_zero_right" (formula "17") (term "0,0,0,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,0,1,0"))
               (rule "mul_literals" (formula "17") (term "1,0,0,0,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,0,1,0"))
               (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,0,1,0"))
               (rule "add_zero_left" (formula "17") (term "0,0,1,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0,1,0"))
               (rule "nnf_imp2or" (formula "17") (term "0,1,1,0,0,0"))
               (rule "nnf_notAnd" (formula "17") (term "0,0,1,1,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0,1,1,0,0,0"))
               (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0,1,1,0,0,0"))
               (rule "add_zero_right" (formula "17") (term "0,0,0,0,0,1,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,1,1,0,0,0"))
               (rule "mul_literals" (formula "17") (term "1,0,0,0,1,1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0,1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,1,1,0,0,0"))
               (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,1,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,1,1,0,0,0"))
               (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,1,1,0,0,0"))
               (rule "add_zero_left" (formula "17") (term "0,0,1,0,0,1,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,1,1,0,0,0"))
               (rule "methodCallEmpty" (formula "18") (term "1"))
               (builtin "One Step Simplification" (formula "18"))
               (rule "emptyModality" (formula "18") (term "1"))
               (builtin "One Step Simplification" (formula "18"))
               (rule "notRight" (formula "18"))
               (rule "eqSymm" (formula "1"))
               (rule "applyEq" (formula "18") (term "0,1") (ifseqformula "1"))
               (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "11"))
               (builtin "One Step Simplification" (formula "18"))
               (rule "orLeft" (formula "18"))
               (branch "âˆƒ int i; ( i â‰¥ 0 âˆ§ i â‰¤ -1 + verif.selectvoting.system.core.Utils.min(b.length, a.length) âˆ§ ( b[i] â‰¤ -1 + a[i] âˆ§ âˆ€ int j; (j â‰¤ -1 âˆ¨ j â‰¥ i âˆ¨ b[j] = a[j])))"
                  (rule "exLeft" (formula "18") (inst "sk=i_4"))
                  (rule "andLeft" (formula "18"))
                  (rule "andLeft" (formula "19"))
                  (rule "andLeft" (formula "18"))
                  (rule "inEqSimp_homoInEq0" (formula "19"))
                  (rule "polySimp_addComm1" (formula "19") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1"))
                  (rule "polySimp_rightDist" (formula "19") (term "1"))
                  (rule "mul_literals" (formula "19") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "19") (term "1,1"))
                  (rule "arrayLengthNotNegative" (formula "3") (term "0"))
                  (rule "inEqSimp_antiSymm" (formula "3") (ifseqformula "4"))
                  (rule "applyEq" (formula "5") (term "0") (ifseqformula "3"))
                  (rule "leq_literals" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "applyEq" (formula "19") (term "2,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "14") (term "1,0") (ifseqformula "3"))
                  (rule "arrayLengthIsAShort" (formula "3") (term "0"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "allLeft" (formula "16") (inst "t=i_4"))
                  (rule "inEqSimp_contradEq3" (formula "16") (term "1") (ifseqformula "21"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
                  (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "16") (term "0,0,1"))
                  (rule "qeq_literals" (formula "16") (term "0,1"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "inEqSimp_contradInEq1" (formula "16") (term "0") (ifseqformula "19"))
                  (rule "qeq_literals" (formula "16") (term "0,0"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "allLeft" (formula "22") (inst "t=i_3"))
                  (rule "inEqSimp_commuteGeq" (formula "22") (term "1,0"))
                  (rule "inEqSimp_contradEq7" (formula "22") (term "1") (ifseqformula "15"))
                  (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1"))
                  (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "22") (term "0,0,1"))
                  (rule "leq_literals" (formula "22") (term "0,1"))
                  (builtin "One Step Simplification" (formula "22"))
                  (rule "inEqSimp_contradInEq1" (formula "22") (term "0") (ifseqformula "13"))
                  (rule "qeq_literals" (formula "22") (term "0,0"))
                  (builtin "One Step Simplification" (formula "22"))
                  (rule "inEqSimp_antiSymm" (formula "16") (ifseqformula "22"))
                  (rule "applyEqRigid" (formula "23") (term "0") (ifseqformula "16"))
                  (rule "inEqSimp_homoInEq0" (formula "23"))
                  (rule "polySimp_pullOutFactor1" (formula "23") (term "0"))
                  (rule "add_literals" (formula "23") (term "1,0"))
                  (rule "times_zero_1" (formula "23") (term "0"))
                  (rule "qeq_literals" (formula "23"))
                  (rule "true_left" (formula "23"))
                  (rule "applyEqRigid" (formula "23") (term "1,1,0,0") (ifseqformula "16"))
                  (rule "applyEqRigid" (formula "22") (term "0,2,0") (ifseqformula "16"))
                  (rule "inEqSimp_homoInEq0" (formula "22"))
                  (rule "polySimp_addComm1" (formula "22") (term "0"))
                  (rule "applyEqRigid" (formula "17") (term "0") (ifseqformula "16"))
                  (rule "inEqSimp_homoInEq1" (formula "17"))
                  (rule "polySimp_pullOutFactor1" (formula "17") (term "0"))
                  (rule "add_literals" (formula "17") (term "1,0"))
                  (rule "times_zero_1" (formula "17") (term "0"))
                  (rule "leq_literals" (formula "17"))
                  (rule "true_left" (formula "17"))
                  (rule "applyEqRigid" (formula "20") (term "1,1") (ifseqformula "16"))
                  (rule "applyEqRigid" (formula "19") (term "0") (ifseqformula "16"))
                  (rule "applyEq" (formula "20") (term "0,2,1,0") (ifseqformula "16"))
                  (rule "polySimp_addComm1" (formula "20") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "20"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "0"))
                  (rule "polySimp_elimOne" (formula "20") (term "0"))
                  (rule "inEqSimp_contradInEq1" (formula "20") (ifseqformula "15"))
                  (rule "andLeft" (formula "20"))
                  (rule "inEqSimp_homoInEq1" (formula "20"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                  (rule "mul_literals" (formula "20") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "20") (term "0"))
                  (rule "polySimp_addComm1" (formula "20") (term "0,0"))
                  (rule "add_literals" (formula "20") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "20") (term "0"))
                  (rule "add_literals" (formula "20") (term "1,1,0"))
                  (rule "times_zero_1" (formula "20") (term "1,0"))
                  (rule "add_zero_right" (formula "20") (term "0"))
                  (rule "leq_literals" (formula "20"))
                  (rule "closeFalse" (formula "20"))
               )
               (branch " âˆ€ int j; ( j â‰¤ -1 âˆ¨ j â‰¥ verif.selectvoting.system.core.Utils.min(b.length, a.length) âˆ¨ b[j] = a[j]) âˆ§ b.length â‰¤ a.length"
                  (rule "andLeft" (formula "18"))
                  (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "19"))
                  (rule "mul_literals" (formula "4") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                  (rule "mul_literals" (formula "4") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "4"))
                  (rule "qeq_literals" (formula "3") (term "0"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "closeFalse" (formula "3"))
               )
            )
            (branch "Exceptional Post (compare)"
               (builtin "One Step Simplification" (formula "16"))
               (builtin "One Step Simplification" (formula "17"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "18"))
               (rule "notLeft" (formula "16"))
               (rule "close" (formula "19") (ifseqformula "18"))
            )
            (branch "Pre (compare)"
               (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "17")) (ifInst ""  (formula "18")) (ifInst ""  (formula "4")) (ifInst ""  (formula "17")) (ifInst ""  (formula "7")) (ifInst ""  (formula "18")) (ifInst ""  (formula "6")))
               (rule "closeTrue" (formula "16"))
            )
         )
         (branch " âˆ€ int j; ( j â‰¤ -1 âˆ¨ j â‰¥ verif.selectvoting.system.core.Utils.min(a.length, b.length) âˆ¨ b[j] = a[j]) âˆ§ b.length â‰¥ a.length"
            (rule "andLeft" (formula "12"))
            (builtin "Evaluate Query" (formula "10") (term "0") (newnames "a1_2,a2_2,callee,queryResult_3,res_compare_2"))
            (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_compare(heap,b,a)_1010_1" (formula "11") (term "0"))
            (rule "notLeft" (formula "1"))
            (rule "eqSymm" (formula "14") (term "0,0,1"))
            (rule "variableDeclaration" (formula "14") (term "1") (newnames "queryResult_3"))
            (builtin "Use Operation Contract" (formula "14") (newnames "heapBefore_compare_2,result_4,exc_3") (contract "verif.selectvoting.system.core.Utils[verif.selectvoting.system.core.Utils::compare([B,[B)].JML normal_behavior operation contract.0"))
            (branch "Post (compare)"
               (builtin "One Step Simplification" (formula "15"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "andLeft" (formula "14"))
               (rule "andLeft" (formula "15"))
               (rule "inEqSimp_ltToLeq" (formula "15") (term "0,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,1,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,1,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,0,1,0"))
               (rule "assignment" (formula "16") (term "1"))
               (builtin "One Step Simplification" (formula "16"))
               (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "15") (term "1,0,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,1,0,0,0"))
               (rule "mul_literals" (formula "15") (term "0,1,0,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "15") (term "1,1,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,1,0,0,0"))
               (rule "mul_literals" (formula "15") (term "0,1,1,0,0,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,0,0"))
               (rule "mul_literals" (formula "15") (term "0,1,1,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "15") (term "0,1,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,0,1,0"))
               (rule "nnf_imp2or" (formula "15") (term "0,0,1,0"))
               (rule "nnf_imp2or" (formula "15") (term "0,1,1,0,0,0"))
               (rule "nnf_notAnd" (formula "15") (term "0,0,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,0,1,0"))
               (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,0,1,0"))
               (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,0,1,0"))
               (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0,0,1,0"))
               (rule "add_zero_right" (formula "15") (term "0,0,0,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,1,0"))
               (rule "mul_literals" (formula "15") (term "1,0,0,0,0,1,0"))
               (rule "nnf_notAnd" (formula "15") (term "0,0,1,1,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,1,1,0,0,0"))
               (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0,1,1,0,0,0"))
               (rule "add_zero_right" (formula "15") (term "0,0,0,0,0,1,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,1,1,0,0,0"))
               (rule "mul_literals" (formula "15") (term "1,0,0,0,1,1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,1,1,0,0,0"))
               (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,1,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,1,1,0,0,0"))
               (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,1,1,0,0,0"))
               (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,1,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,1,1,0,0,0"))
               (rule "methodCallEmpty" (formula "16") (term "1"))
               (builtin "One Step Simplification" (formula "16"))
               (rule "emptyModality" (formula "16") (term "1"))
               (builtin "One Step Simplification" (formula "16"))
               (rule "notRight" (formula "16"))
               (rule "eqSymm" (formula "1"))
               (rule "applyEq" (formula "16") (term "0,1") (ifseqformula "1"))
               (rule "replace_known_left" (formula "16") (term "1") (ifseqformula "11"))
               (builtin "One Step Simplification" (formula "16"))
               (rule "orLeft" (formula "16"))
               (branch "âˆƒ int i; ( i â‰¥ 0 âˆ§ i â‰¤ -1 + verif.selectvoting.system.core.Utils.min(b.length, a.length) âˆ§ ( b[i] â‰¤ -1 + a[i] âˆ§ âˆ€ int j; (j â‰¤ -1 âˆ¨ j â‰¥ i âˆ¨ b[j] = a[j])))"
                  (rule "exLeft" (formula "16") (inst "sk=i_2"))
                  (rule "andLeft" (formula "16"))
                  (rule "andLeft" (formula "17"))
                  (rule "andLeft" (formula "16"))
                  (rule "inEqSimp_homoInEq0" (formula "17"))
                  (rule "polySimp_addComm1" (formula "17") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1"))
                  (rule "polySimp_rightDist" (formula "17") (term "1"))
                  (rule "mul_literals" (formula "17") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "17") (term "1,1"))
                  (rule "arrayLengthIsAShort" (formula "4") (term "0"))
                  (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                  (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "5"))
                  (rule "leq_literals" (formula "4") (term "0"))
                  (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "arrayLengthNotNegative" (formula "3") (term "0"))
                  (rule "inEqSimp_antiSymm" (formula "3") (ifseqformula "4"))
                  (rule "applyEq" (formula "5") (term "0") (ifseqformula "3"))
                  (rule "leq_literals" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "applyEq" (formula "18") (term "2,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "14") (term "1,1,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "applyEq" (formula "14") (term "1") (ifseqformula "3"))
                  (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "4"))
                  (rule "leq_literals" (formula "14") (term "0"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "true_left" (formula "14"))
                  (rule "arrayLengthIsAShort" (formula "3") (term "0"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "allLeft" (formula "13") (inst "t=i_2"))
                  (rule "inEqSimp_commuteGeq" (formula "13") (term "1,0"))
                  (rule "inEqSimp_contradEq3" (formula "13") (term "1") (ifseqformula "18"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1"))
                  (rule "add_literals" (formula "13") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "13") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "13") (term "0,0,1"))
                  (rule "qeq_literals" (formula "13") (term "0,1"))
                  (builtin "One Step Simplification" (formula "13"))
                  (rule "inEqSimp_contradInEq1" (formula "13") (term "0") (ifseqformula "16"))
                  (rule "qeq_literals" (formula "13") (term "0,0"))
                  (builtin "One Step Simplification" (formula "13"))
                  (builtin "Evaluate Query" (formula "17") (term "0") (newnames "a_1,b_1,callee,queryResult_4,res_min_0"))
                  (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_min(heap,length(b),Z(0(#)))_001010_2" (formula "18") (term "0"))
                  (rule "notLeft" (formula "1"))
                  (rule "eqSymm" (formula "20") (term "0,0,1"))
                  (rule "variableDeclaration" (formula "20") (term "1") (newnames "queryResult_4"))
                  (builtin "Use Operation Contract" (formula "20") (newnames "heapBefore_min_0,result_5,exc_4") (contract "verif.selectvoting.system.core.Utils[verif.selectvoting.system.core.Utils::min(int,int)].JML normal_behavior operation contract.0"))
                  (branch "Post (min)"
                     (builtin "One Step Simplification" (formula "21"))
                     (builtin "One Step Simplification" (formula "20"))
                     (rule "andLeft" (formula "20"))
                     (rule "andLeft" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "eqSymm" (formula "21") (term "1"))
                     (rule "inEqSimp_gtToGeq" (formula "22") (term "0"))
                     (rule "times_zero_1" (formula "22") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "22") (term "0,0,0"))
                     (rule "assignment" (formula "23") (term "1"))
                     (builtin "One Step Simplification" (formula "23"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0"))
                     (rule "mul_literals" (formula "22") (term "1,0"))
                     (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "4"))
                     (builtin "One Step Simplification" (formula "22"))
                     (rule "andLeft" (formula "22"))
                     (rule "notLeft" (formula "23"))
                     (rule "applyEq" (formula "24") (term "0,1,0") (ifseqformula "22"))
                     (rule "applyEq" (formula "21") (term "1,1") (ifseqformula "22"))
                     (rule "replace_known_right" (formula "21") (term "1") (ifseqformula "23"))
                     (builtin "One Step Simplification" (formula "21"))
                     (rule "notLeft" (formula "21"))
                     (rule "inEqSimp_leqRight" (formula "22"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "inEqSimp_contradEq7" (formula "22") (ifseqformula "4"))
                     (rule "times_zero_1" (formula "22") (term "1,0,0"))
                     (rule "add_zero_right" (formula "22") (term "0,0"))
                     (rule "leq_literals" (formula "22") (term "0"))
                     (builtin "One Step Simplification" (formula "22"))
                     (rule "false_right" (formula "22"))
                     (rule "methodCallEmpty" (formula "22") (term "1"))
                     (builtin "One Step Simplification" (formula "22"))
                     (rule "emptyModality" (formula "22") (term "1"))
                     (builtin "One Step Simplification" (formula "22"))
                     (rule "notRight" (formula "22"))
                     (rule "applyEqRigid" (formula "18") (term "0") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "18"))
                     (rule "times_zero_2" (formula "18") (term "1,0"))
                     (rule "add_zero_right" (formula "18") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "18"))
                     (rule "mul_literals" (formula "18") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "18") (ifseqformula "17"))
                     (rule "qeq_literals" (formula "18") (term "0"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "closeFalse" (formula "18"))
                  )
                  (branch "Exceptional Post (min)"
                     (builtin "One Step Simplification" (formula "21"))
                     (builtin "One Step Simplification" (formula "20"))
                     (rule "andLeft" (formula "20"))
                     (rule "andLeft" (formula "21"))
                     (rule "andLeft" (formula "20"))
                     (rule "andLeft" (formula "22"))
                     (rule "notLeft" (formula "20"))
                     (rule "close" (formula "24") (ifseqformula "23"))
                  )
                  (branch "Pre (min)"
                     (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "5")))
                     (rule "closeTrue" (formula "20"))
                  )
               )
               (branch " âˆ€ int j; ( j â‰¤ -1 âˆ¨ j â‰¥ verif.selectvoting.system.core.Utils.min(b.length, a.length) âˆ¨ b[j] = a[j]) âˆ§ b.length â‰¤ a.length"
                  (rule "andLeft" (formula "16"))
                  (rule "inEqSimp_antiSymm" (formula "14") (ifseqformula "17"))
                  (rule "applyEq" (formula "17") (term "1,1,1,0,0") (ifseqformula "14"))
                  (rule "applyEq" (formula "18") (term "0") (ifseqformula "14"))
                  (rule "inEqSimp_homoInEq0" (formula "18"))
                  (rule "polySimp_pullOutFactor1" (formula "18") (term "0"))
                  (rule "add_literals" (formula "18") (term "1,0"))
                  (rule "times_zero_1" (formula "18") (term "0"))
                  (rule "qeq_literals" (formula "18"))
                  (rule "true_left" (formula "18"))
                  (rule "applyEq" (formula "13") (term "2,1,1,0,0") (ifseqformula "14"))
                  (rule "applyEq" (formula "14") (term "0") (ifseqformula "13"))
                  (rule "inEqSimp_homoInEq1" (formula "14"))
                  (rule "polySimp_pullOutFactor1" (formula "14") (term "0"))
                  (rule "add_literals" (formula "14") (term "1,0"))
                  (rule "times_zero_1" (formula "14") (term "0"))
                  (rule "leq_literals" (formula "14"))
                  (rule "true_left" (formula "14"))
                  (rule "applyEq" (formula "4") (term "0") (ifseqformula "13"))
                  (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "4") (term "0"))
                  (builtin "One Step Simplification" (formula "4"))
                  (rule "closeFalse" (formula "4"))
               )
            )
            (branch "Exceptional Post (compare)"
               (builtin "One Step Simplification" (formula "15"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "andLeft" (formula "14"))
               (rule "andLeft" (formula "14"))
               (rule "andLeft" (formula "16"))
               (rule "notLeft" (formula "14"))
               (rule "close" (formula "17") (ifseqformula "16"))
            )
            (branch "Pre (compare)"
               (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "15")) (ifInst ""  (formula "16")) (ifInst ""  (formula "4")) (ifInst ""  (formula "15")) (ifInst ""  (formula "7")) (ifInst ""  (formula "16")) (ifInst ""  (formula "6")))
               (rule "closeTrue" (formula "14"))
            )
         )
      )
      (branch "Exceptional Post (compare)"
         (builtin "One Step Simplification" (formula "10"))
         (builtin "One Step Simplification" (formula "11"))
         (rule "andLeft" (formula "10"))
         (rule "andLeft" (formula "10"))
         (rule "andLeft" (formula "12"))
         (rule "notLeft" (formula "10"))
         (rule "close" (formula "13") (ifseqformula "12"))
      )
      (branch "Pre (compare)"
         (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "12")) (ifInst ""  (formula "11")) (ifInst ""  (formula "3")) (ifInst ""  (formula "12")) (ifInst ""  (formula "5")) (ifInst ""  (formula "11")) (ifInst ""  (formula "6")))
         (rule "closeTrue" (formula "10"))
      )
   )
)
(branch "b.length â‰¥ 1 FALSE"
   (rule "eqSymm" (formula "11") (term "0"))
   (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "10")))
   (rule "inEqSimp_geqRight" (formula "10"))
   (rule "mul_literals" (formula "1") (term "1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "add_zero_left" (formula "1") (term "0"))
   (rule "inEqSimp_notGeq" (formula "11") (term "0,0"))
   (rule "mul_literals" (formula "11") (term "1,0,0,0,0"))
   (rule "add_literals" (formula "11") (term "0,0,0,0"))
   (rule "add_zero_left" (formula "11") (term "0,0,0"))
   (rule "inEqSimp_or_tautInEq0" (formula "11") (term "0,0,1"))
   (rule "add_zero_right" (formula "11") (term "1,1,0,0,1"))
   (rule "qeq_literals" (formula "11") (term "1,0,0,1"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "orRight" (formula "11"))
   (rule "inEqSimp_leqRight" (formula "11"))
   (rule "times_zero_1" (formula "1") (term "1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1"))
   (rule "mul_literals" (formula "1") (term "1"))
   (rule "inEqSimp_contradEq7" (formula "12") (ifseqformula "1"))
   (rule "times_zero_1" (formula "12") (term "1,0,0"))
   (rule "add_zero_right" (formula "12") (term "0,0"))
   (rule "leq_literals" (formula "12") (term "0"))
   (builtin "One Step Simplification" (formula "12"))
   (rule "false_right" (formula "12"))
   (builtin "Evaluate Query" (formula "8") (term "0") (newnames "a1,a2,callee,queryResult,res_compare"))
   (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_compare(heap,a,b)_1_0" (formula "9") (term "0"))
   (rule "notLeft" (formula "1"))
   (rule "eqSymm" (formula "10") (term "0,0,1"))
   (rule "variableDeclaration" (formula "10") (term "1") (newnames "queryResult"))
   (builtin "Use Operation Contract" (formula "10") (newnames "heapBefore_compare,result_0,exc") (contract "verif.selectvoting.system.core.Utils[verif.selectvoting.system.core.Utils::compare([B,[B)].JML normal_behavior operation contract.0"))
   (branch "Post (compare)"
      (builtin "One Step Simplification" (formula "10"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "11"))
      (rule "eqSymm" (formula "11") (term "1,0,1,1,0,0,0"))
      (rule "eqSymm" (formula "11") (term "1,0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0,0,0"))
      (rule "polySimp_addComm1" (formula "11") (term "0,0,1,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,1,1,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "11") (term "1,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,1,0,0,0"))
      (rule "assignment" (formula "12") (term "1"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,0,0"))
      (rule "mul_literals" (formula "11") (term "0,1,1,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "0,0,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "11") (term "0,0,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,1,0,0,0"))
      (rule "mul_literals" (formula "11") (term "0,1,1,0,0,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,0,1,0"))
      (rule "mul_literals" (formula "11") (term "0,1,1,0,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,0,1,0"))
      (rule "nnf_imp2or" (formula "11") (term "0,0,1,0"))
      (rule "nnf_notAnd" (formula "11") (term "0,0,0,1,0"))
      (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0,1,0"))
      (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0,1,0"))
      (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,0,1,0"))
      (rule "add_zero_left" (formula "11") (term "0,0,1,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,0,1,0"))
      (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,0,1,0"))
      (rule "add_zero_right" (formula "11") (term "0,0,0,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,1,0"))
      (rule "mul_literals" (formula "11") (term "1,0,0,0,0,1,0"))
      (rule "nnf_imp2or" (formula "11") (term "0,1,1,0,0,0"))
      (rule "nnf_notAnd" (formula "11") (term "0,0,1,1,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,1,1,0,0,0"))
      (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,1,1,0,0,0"))
      (rule "add_zero_right" (formula "11") (term "0,0,0,0,0,1,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,1,0,0,0"))
      (rule "mul_literals" (formula "11") (term "1,0,0,0,1,1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,1,1,0,0,0"))
      (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,1,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,1,1,0,0,0"))
      (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,1,1,0,0,0"))
      (rule "add_zero_left" (formula "11") (term "0,0,1,0,0,1,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,1,1,0,0,0"))
      (rule "methodCallEmpty" (formula "12") (term "1"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "emptyModality" (formula "12") (term "1"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "notRight" (formula "12"))
      (rule "eqSymm" (formula "1"))
      (rule "applyEq" (formula "12") (term "0,1") (ifseqformula "1"))
      (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "9"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "orLeft" (formula "12"))
      (branch "âˆƒ int i; ( i â‰¥ 0 âˆ§ i â‰¤ -1 + verif.selectvoting.system.core.Utils.min(a.length, b.length) âˆ§ ( b[i] â‰¥ 1 + a[i] âˆ§ âˆ€ int j; (j â‰¤ -1 âˆ¨ j â‰¥ i âˆ¨ b[j] = a[j])))"
         (rule "exLeft" (formula "12") (inst "sk=i_0"))
         (rule "andLeft" (formula "12"))
         (rule "andLeft" (formula "13"))
         (rule "andLeft" (formula "12"))
         (rule "inEqSimp_homoInEq0" (formula "13"))
         (rule "polySimp_addComm1" (formula "13") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "13"))
         (rule "polySimp_mulComm0" (formula "13") (term "1"))
         (rule "polySimp_rightDist" (formula "13") (term "1"))
         (rule "mul_literals" (formula "13") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
         (rule "polySimp_elimOne" (formula "13") (term "1,1"))
         (builtin "Evaluate Query" (formula "10") (term "0") (newnames "a1_0,a2_0,callee,queryResult_0,res_compare_0"))
         (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_compare(heap,b,a)_001_1" (formula "11") (term "0"))
         (rule "notLeft" (formula "1"))
         (rule "eqSymm" (formula "16") (term "0,0,1"))
         (rule "variableDeclaration" (formula "16") (term "1") (newnames "queryResult_0"))
         (rule "arrayLengthNotNegative" (formula "3") (term "0"))
         (rule "inEqSimp_antiSymm" (formula "3") (ifseqformula "4"))
         (rule "applyEq" (formula "5") (term "0") (ifseqformula "3"))
         (rule "leq_literals" (formula "5"))
         (rule "true_left" (formula "5"))
         (rule "applyEq" (formula "14") (term "2,0") (ifseqformula "3"))
         (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
         (rule "qeq_literals" (formula "4"))
         (rule "true_left" (formula "4"))
         (builtin "Use Operation Contract" (formula "16") (newnames "heapBefore_compare_0,result_1,exc_0") (contract "verif.selectvoting.system.core.Utils[verif.selectvoting.system.core.Utils::compare([B,[B)].JML normal_behavior operation contract.0"))
         (branch "Post (compare)"
            (builtin "One Step Simplification" (formula "16"))
            (builtin "One Step Simplification" (formula "17"))
            (rule "andLeft" (formula "16"))
            (rule "andLeft" (formula "17"))
            (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1,1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,1,1,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "17") (term "0,1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1,1,0,0,0"))
            (rule "assignment" (formula "18") (term "1"))
            (builtin "One Step Simplification" (formula "18"))
            (rule "applyEq" (formula "17") (term "0,1,1,0") (ifseqformula "3"))
            (rule "inEqSimp_commuteLeq" (formula "17") (term "1,1,0"))
            (rule "applyEq" (formula "17") (term "1,0,1,0,0,1,0,0,0,0") (ifseqformula "3"))
            (rule "applyEq" (formula "17") (term "1,0,1,0,0,1,0,0,0,1,0") (ifseqformula "3"))
            (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1,1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,1,1,0,0,0"))
            (rule "mul_literals" (formula "17") (term "0,1,1,0,0,1,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "17") (term "1,0,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "17") (term "1,0,1,0,0,0"))
            (rule "mul_literals" (formula "17") (term "0,1,0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "17") (term "1,1,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,0,0"))
            (rule "mul_literals" (formula "17") (term "0,1,1,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,0,1,0"))
            (rule "mul_literals" (formula "17") (term "0,1,1,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,0,1,0"))
            (rule "inEqSimp_subsumption1" (formula "17") (term "1,1,0") (ifseqformula "2"))
            (rule "leq_literals" (formula "17") (term "0,1,1,0"))
            (builtin "One Step Simplification" (formula "17"))
            (rule "nnf_imp2or" (formula "17") (term "0,1,0"))
            (rule "nnf_notAnd" (formula "17") (term "0,0,1,0"))
            (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,1,0"))
            (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,1,0"))
            (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,1,0"))
            (rule "add_zero_left" (formula "17") (term "0,0,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,1,0"))
            (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0,1,0"))
            (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0,1,0"))
            (rule "add_zero_right" (formula "17") (term "0,0,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,1,0"))
            (rule "mul_literals" (formula "17") (term "1,0,0,0,1,0"))
            (rule "nnf_imp2or" (formula "17") (term "0,1,1,0,0,0"))
            (rule "nnf_notAnd" (formula "17") (term "0,0,1,1,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0,1,1,0,0,0"))
            (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0,1,1,0,0,0"))
            (rule "add_zero_right" (formula "17") (term "0,0,0,0,0,1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,1,1,0,0,0"))
            (rule "mul_literals" (formula "17") (term "1,0,0,0,1,1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0,1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,1,1,0,0,0"))
            (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,1,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,1,1,0,0,0"))
            (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,1,1,0,0,0"))
            (rule "add_zero_left" (formula "17") (term "0,0,1,0,0,1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0,1,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,1,1,0,0,0"))
            (rule "methodCallEmpty" (formula "18") (term "1"))
            (builtin "One Step Simplification" (formula "18"))
            (rule "arrayLengthIsAShort" (formula "2") (term "0"))
            (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "arrayLengthNotNegative" (formula "2") (term "0"))
            (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "3"))
            (rule "leq_literals" (formula "2") (term "0"))
            (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "emptyModality" (formula "18") (term "1"))
            (builtin "One Step Simplification" (formula "18"))
            (rule "notRight" (formula "18"))
            (rule "eqSymm" (formula "1"))
            (rule "applyEq" (formula "18") (term "0,1") (ifseqformula "1"))
            (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "11"))
            (builtin "One Step Simplification" (formula "18"))
            (rule "orLeft" (formula "18"))
            (branch "âˆƒ int i; ( i â‰¥ 0 âˆ§ i â‰¤ -1 + verif.selectvoting.system.core.Utils.min(0, a.length) âˆ§ ( b[i] â‰¤ -1 + a[i] âˆ§ âˆ€ int j; (j â‰¤ -1 âˆ¨ j â‰¥ i âˆ¨ b[j] = a[j])))"
               (rule "exLeft" (formula "18") (inst "sk=i_1"))
               (rule "andLeft" (formula "18"))
               (rule "andLeft" (formula "19"))
               (rule "andLeft" (formula "18"))
               (rule "inEqSimp_homoInEq0" (formula "19"))
               (rule "polySimp_addComm1" (formula "19") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "19"))
               (rule "polySimp_mulComm0" (formula "19") (term "1"))
               (rule "polySimp_rightDist" (formula "19") (term "1"))
               (rule "mul_literals" (formula "19") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
               (rule "polySimp_elimOne" (formula "19") (term "1,1"))
               (rule "arrayLengthIsAShort" (formula "4") (term "0"))
               (builtin "One Step Simplification" (formula "4"))
               (rule "true_left" (formula "4"))
               (rule "allLeft" (formula "16") (inst "t=i_1"))
               (rule "inEqSimp_contradEq3" (formula "16") (term "1") (ifseqformula "21"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
               (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "16") (term "0,0,1"))
               (rule "qeq_literals" (formula "16") (term "0,1"))
               (builtin "One Step Simplification" (formula "16"))
               (rule "inEqSimp_contradInEq1" (formula "16") (term "0") (ifseqformula "19"))
               (rule "qeq_literals" (formula "16") (term "0,0"))
               (builtin "One Step Simplification" (formula "16"))
               (rule "allLeft" (formula "22") (inst "t=i_0"))
               (rule "inEqSimp_commuteGeq" (formula "22") (term "1,0"))
               (rule "inEqSimp_contradEq7" (formula "22") (term "1") (ifseqformula "15"))
               (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1"))
               (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "22") (term "0,0,1"))
               (rule "leq_literals" (formula "22") (term "0,1"))
               (builtin "One Step Simplification" (formula "22"))
               (rule "inEqSimp_contradInEq1" (formula "22") (term "0") (ifseqformula "13"))
               (rule "qeq_literals" (formula "22") (term "0,0"))
               (builtin "One Step Simplification" (formula "22"))
               (rule "inEqSimp_antiSymm" (formula "16") (ifseqformula "22"))
               (rule "applyEq" (formula "23") (term "0") (ifseqformula "16"))
               (rule "inEqSimp_homoInEq0" (formula "23"))
               (rule "polySimp_pullOutFactor1" (formula "23") (term "0"))
               (rule "add_literals" (formula "23") (term "1,0"))
               (rule "times_zero_1" (formula "23") (term "0"))
               (rule "qeq_literals" (formula "23"))
               (rule "true_left" (formula "23"))
               (rule "applyEq" (formula "22") (term "0,2,0") (ifseqformula "16"))
               (rule "inEqSimp_homoInEq0" (formula "22"))
               (rule "polySimp_addComm1" (formula "22") (term "0"))
               (rule "applyEqRigid" (formula "17") (term "0") (ifseqformula "16"))
               (rule "inEqSimp_homoInEq1" (formula "17"))
               (rule "polySimp_pullOutFactor1" (formula "17") (term "0"))
               (rule "add_literals" (formula "17") (term "1,0"))
               (rule "times_zero_1" (formula "17") (term "0"))
               (rule "leq_literals" (formula "17"))
               (rule "true_left" (formula "17"))
               (rule "applyEq" (formula "20") (term "1,1") (ifseqformula "16"))
               (rule "applyEqRigid" (formula "19") (term "0") (ifseqformula "16"))
               (rule "applyEqRigid" (formula "21") (term "1,1,0,0") (ifseqformula "16"))
               (rule "applyEq" (formula "20") (term "0,2,1,0") (ifseqformula "16"))
               (rule "polySimp_addComm1" (formula "20") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "20"))
               (rule "polySimp_mulLiterals" (formula "20") (term "0"))
               (rule "polySimp_elimOne" (formula "20") (term "0"))
               (rule "inEqSimp_contradInEq0" (formula "15") (ifseqformula "20"))
               (rule "andLeft" (formula "15"))
               (rule "inEqSimp_homoInEq1" (formula "15"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
               (rule "polySimp_rightDist" (formula "15") (term "1,0"))
               (rule "mul_literals" (formula "15") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0"))
               (rule "polySimp_addComm1" (formula "15") (term "0,0"))
               (rule "add_literals" (formula "15") (term "0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "15") (term "0"))
               (rule "add_literals" (formula "15") (term "1,1,0"))
               (rule "times_zero_1" (formula "15") (term "1,0"))
               (rule "add_zero_right" (formula "15") (term "0"))
               (rule "leq_literals" (formula "15"))
               (rule "closeFalse" (formula "15"))
            )
            (branch "âˆ€ int j; ( j â‰¤ -1 âˆ¨ j â‰¥ verif.selectvoting.system.core.Utils.min(0, a.length) âˆ¨ b[j] = a[j])"
               (rule "arrayLengthIsAShort" (formula "4") (term "0"))
               (builtin "One Step Simplification" (formula "4"))
               (rule "true_left" (formula "4"))
               (rule "allLeft" (formula "18") (inst "t=i_0"))
               (rule "inEqSimp_commuteGeq" (formula "18") (term "1,0"))
               (rule "inEqSimp_contradEq7" (formula "18") (term "1") (ifseqformula "15"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1"))
               (rule "add_literals" (formula "18") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "18") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "18") (term "0,0,1"))
               (rule "leq_literals" (formula "18") (term "0,1"))
               (builtin "One Step Simplification" (formula "18"))
               (rule "inEqSimp_contradInEq1" (formula "18") (term "0") (ifseqformula "13"))
               (rule "qeq_literals" (formula "18") (term "0,0"))
               (builtin "One Step Simplification" (formula "18"))
               (builtin "Evaluate Query" (formula "14") (term "0") (newnames "a_0,b_0,callee,queryResult_1,res_min"))
               (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_min(heap,length(a),Z(0(#)))_10001_2" (formula "15") (term "0"))
               (rule "notLeft" (formula "1"))
               (rule "eqSymm" (formula "20") (term "0,0,1"))
               (rule "variableDeclaration" (formula "20") (term "1") (newnames "queryResult_1"))
               (builtin "Use Operation Contract" (formula "20") (newnames "heapBefore_min,result_2,exc_1") (contract "verif.selectvoting.system.core.Utils[verif.selectvoting.system.core.Utils::min(int,int)].JML normal_behavior operation contract.0"))
               (branch "Post (min)"
                  (builtin "One Step Simplification" (formula "20"))
                  (builtin "One Step Simplification" (formula "21"))
                  (rule "andLeft" (formula "20"))
                  (rule "andLeft" (formula "21"))
                  (rule "andLeft" (formula "21"))
                  (rule "eqSymm" (formula "21") (term "1"))
                  (rule "inEqSimp_gtToGeq" (formula "22") (term "0"))
                  (rule "times_zero_1" (formula "22") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "22") (term "0,0,0"))
                  (rule "assignment" (formula "23") (term "1"))
                  (builtin "One Step Simplification" (formula "23"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0"))
                  (rule "mul_literals" (formula "22") (term "1,0"))
                  (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "3"))
                  (builtin "One Step Simplification" (formula "22"))
                  (rule "andLeft" (formula "22"))
                  (rule "notLeft" (formula "23"))
                  (rule "applyEq" (formula "24") (term "0,1,0") (ifseqformula "22"))
                  (rule "applyEq" (formula "21") (term "1,1") (ifseqformula "22"))
                  (rule "replace_known_right" (formula "21") (term "1") (ifseqformula "23"))
                  (builtin "One Step Simplification" (formula "21"))
                  (rule "notLeft" (formula "21"))
                  (rule "inEqSimp_leqRight" (formula "22"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "inEqSimp_contradEq7" (formula "22") (ifseqformula "3"))
                  (rule "times_zero_1" (formula "22") (term "1,0,0"))
                  (rule "add_zero_right" (formula "22") (term "0,0"))
                  (rule "leq_literals" (formula "22") (term "0"))
                  (builtin "One Step Simplification" (formula "22"))
                  (rule "false_right" (formula "22"))
                  (rule "methodCallEmpty" (formula "22") (term "1"))
                  (builtin "One Step Simplification" (formula "22"))
                  (rule "emptyModality" (formula "22") (term "1"))
                  (builtin "One Step Simplification" (formula "22"))
                  (rule "notRight" (formula "22"))
                  (rule "applyEq" (formula "15") (term "0") (ifseqformula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "15"))
                  (rule "times_zero_2" (formula "15") (term "1,0"))
                  (rule "add_zero_right" (formula "15") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "15"))
                  (rule "mul_literals" (formula "15") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "15") (ifseqformula "14"))
                  (rule "qeq_literals" (formula "15") (term "0"))
                  (builtin "One Step Simplification" (formula "15"))
                  (rule "closeFalse" (formula "15"))
               )
               (branch "Exceptional Post (min)"
                  (builtin "One Step Simplification" (formula "21"))
                  (builtin "One Step Simplification" (formula "20"))
                  (rule "andLeft" (formula "20"))
                  (rule "andLeft" (formula "21"))
                  (rule "andLeft" (formula "20"))
                  (rule "andLeft" (formula "22"))
                  (rule "notLeft" (formula "20"))
                  (rule "close" (formula "24") (ifseqformula "23"))
               )
               (branch "Pre (min)"
                  (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "5")))
                  (rule "closeTrue" (formula "20"))
               )
            )
         )
         (branch "Exceptional Post (compare)"
            (builtin "One Step Simplification" (formula "17"))
            (builtin "One Step Simplification" (formula "16"))
            (rule "andLeft" (formula "16"))
            (rule "andLeft" (formula "16"))
            (rule "andLeft" (formula "18"))
            (rule "notLeft" (formula "16"))
            (rule "close" (formula "19") (ifseqformula "18"))
         )
         (branch "Pre (compare)"
            (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "17")) (ifInst ""  (formula "18")) (ifInst ""  (formula "4")) (ifInst ""  (formula "17")) (ifInst ""  (formula "7")) (ifInst ""  (formula "18")) (ifInst ""  (formula "6")))
            (rule "closeTrue" (formula "16"))
         )
      )
      (branch " âˆ€ int j; ( j â‰¤ -1 âˆ¨ j â‰¥ verif.selectvoting.system.core.Utils.min(a.length, b.length) âˆ¨ b[j] = a[j]) âˆ§ b.length â‰¥ a.length"
         (rule "andLeft" (formula "12"))
         (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "3"))
         (rule "add_zero_right" (formula "13") (term "0"))
         (rule "polySimp_mulComm0" (formula "13") (term "0"))
         (rule "inEqSimp_invertInEq1" (formula "13"))
         (rule "polySimp_mulLiterals" (formula "13") (term "0"))
         (rule "times_zero_2" (formula "13") (term "1"))
         (rule "polySimp_elimOne" (formula "13") (term "0"))
         (rule "inEqSimp_contradInEq1" (formula "13") (ifseqformula "2"))
         (rule "qeq_literals" (formula "13") (term "0"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "closeFalse" (formula "13"))
      )
   )
   (branch "Exceptional Post (compare)"
      (builtin "One Step Simplification" (formula "10"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "12"))
      (rule "notLeft" (formula "10"))
      (rule "close" (formula "13") (ifseqformula "12"))
   )
   (branch "Pre (compare)"
      (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "12")) (ifInst ""  (formula "11")) (ifInst ""  (formula "3")) (ifInst ""  (formula "12")) (ifInst ""  (formula "5")) (ifInst ""  (formula "11")) (ifInst ""  (formula "6")))
      (rule "closeTrue" (formula "10"))
   )
)
)

}
