\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Jul 12 09:04:08 CEST 2017
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=5000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , permissions-permissions\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Wed Jul 12 09:04:08 CEST 2017
name=verif.utils.MessageTools[verif.utils.MessageTools\\:\\:equal([B,[B)].JML normal_behavior operation contract.1
contract=verif.utils.MessageTools[verif.utils.MessageTools\\:\\:equal([B,[B)].JML normal_behavior operation contract.1
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mihai" ) (keyVersion "0814267c8a184b1e7da1309b7a9875095ca72975"))

(autoModeTime "34")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1") (newnames "a,b,result,exc,heapAtPre,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "eqSymm" (formula "6") (term "0,0,1,0,1"))
(rule "assignment" (formula "6") (term "1"))
(builtin "One Step Simplification" (formula "6"))
(rule "methodBodyExpand" (formula "6") (term "1") (newnames "heapBefore_equal,savedHeapBefore_equal,_aBefore_equal,_bBefore_equal"))
(builtin "One Step Simplification" (formula "6"))
(rule "ifElseUnfold" (formula "6") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "6") (term "1") (newnames "x"))
(rule "compound_assignment_3_nonsimple" (formula "6") (term "1"))
(rule "ifElseUnfold" (formula "6") (term "1") (inst "#boolv=x_1"))
(rule "variableDeclaration" (formula "6") (term "1") (newnames "x_1"))
(rule "compound_assignment_2" (formula "6") (term "1") (inst "#v=x_2"))
(rule "variableDeclarationAssign" (formula "6") (term "1"))
(rule "variableDeclaration" (formula "6") (term "1") (newnames "x_2"))
(rule "inequality_comparison_simple" (formula "6") (term "1"))
(builtin "One Step Simplification" (formula "6"))
(rule "compound_assignment_1_new" (formula "6") (term "1"))
(builtin "One Step Simplification" (formula "6"))
(rule "ifthenelse_negated" (formula "6") (term "0,1,0"))
(rule "ifElseSplit" (formula "6"))
(branch "if x_1 true"
   (builtin "One Step Simplification" (formula "7"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "replace_known_left" (formula "6") (term "0") (ifseqformula "1"))
   (builtin "One Step Simplification" (formula "6"))
   (rule "true_left" (formula "6"))
   (rule "replace_known_left" (formula "3") (term "0") (ifseqformula "1"))
   (builtin "One Step Simplification" (formula "3"))
   (rule "true_left" (formula "3"))
   (rule "ifElseSkipThen" (formula "5") (term "1"))
   (builtin "One Step Simplification" (formula "5"))
   (rule "assignment" (formula "5") (term "1"))
   (builtin "One Step Simplification" (formula "5"))
   (rule "blockReturn" (formula "5") (term "1"))
   (rule "methodCallReturn" (formula "5") (term "1"))
   (rule "assignment" (formula "5") (term "1"))
   (builtin "One Step Simplification" (formula "5"))
   (rule "methodCallEmpty" (formula "5") (term "1"))
   (rule "tryEmpty" (formula "5") (term "1"))
   (rule "emptyModality" (formula "5") (term "1"))
   (builtin "One Step Simplification" (formula "5"))
   (rule "closeTrue" (formula "5"))
)
(branch "if x_1 false"
   (builtin "One Step Simplification" (formula "7"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "6"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "6"))
   (builtin "One Step Simplification" (formula "5"))
   (rule "replace_known_left" (formula "3") (term "0") (ifseqformula "5"))
   (builtin "One Step Simplification" (formula "3"))
   (rule "true_left" (formula "3"))
   (rule "applyEq" (formula "6") (term "0,1,0,0") (ifseqformula "4"))
   (rule "inequality_comparison_simple" (formula "6") (term "1"))
   (builtin "One Step Simplification" (formula "6"))
   (rule "blockEmpty" (formula "6") (term "1"))
   (rule "ifElseSplit" (formula "6"))
   (branch "if x true"
      (builtin "One Step Simplification" (formula "7"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch "if x false"
      (builtin "One Step Simplification" (formula "7"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "blockReturn" (formula "6") (term "1"))
      (rule "methodCallReturn" (formula "6") (term "1"))
      (rule "assignment" (formula "6") (term "1"))
      (builtin "One Step Simplification" (formula "6"))
      (rule "methodCallEmpty" (formula "6") (term "1"))
      (rule "tryEmpty" (formula "6") (term "1"))
      (rule "emptyModality" (formula "6") (term "1"))
      (builtin "One Step Simplification" (formula "6"))
      (rule "closeTrue" (formula "6"))
   )
)
)

}
