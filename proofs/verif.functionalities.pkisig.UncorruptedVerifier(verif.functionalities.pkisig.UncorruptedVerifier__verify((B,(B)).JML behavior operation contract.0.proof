\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Jul 13 22:37:21 CEST 2017
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=\\#begexpand_inByte\\#end,\\#begexpand_inChar\\#end,\\#begexpand_inShort\\#end,\\#begexpand_inInt\\#end,\\#begexpand_inLong\\#end
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=5000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Thu Jul 13 22:37:21 CEST 2017
name=verif.functionalities.pkisig.UncorruptedVerifier[verif.functionalities.pkisig.UncorruptedVerifier\\:\\:verify([B,[B)].JML behavior operation contract.0
contract=verif.functionalities.pkisig.UncorruptedVerifier[verif.functionalities.pkisig.UncorruptedVerifier\\:\\:verify([B,[B)].JML behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mihai" ) (keyVersion "0814267c8a184b1e7da1309b7a9875095ca72975"))

(autoModeTime "852")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1") (newnames "signature,message,self,result,exc,heapAtPre,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "8"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "12") (term "1,0,0,1,0,1"))
(rule "replace_known_right" (formula "5") (term "0") (ifseqformula "10"))
(builtin "One Step Simplification" (formula "5"))
(rule "replace_known_right" (formula "4") (term "0") (ifseqformula "9"))
(builtin "One Step Simplification" (formula "4"))
(rule "assignment" (formula "12") (term "1"))
(builtin "One Step Simplification" (formula "12"))
(rule "elementOfUnion" (formula "12") (term "0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "12") (term "0,0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "12") (term "1,0,0,0,0,1,0,1"))
(rule "array2seqDef" (formula "12") (term "1,1,0,1,0,0,0,1") (inst "u=u"))
(rule "eqSymm" (formula "12") (term "1,0,1,0,0,0,1"))
(rule "array2seqDef" (formula "12") (term "1,1,0,1,0,0,0,1") (inst "u=u"))
(rule "eqSymm" (formula "12") (term "1,0,1,0,0,0,1"))
(rule "eqSeqDef" (formula "12") (term "1,0,1,0,0,0,1") (inst "iv=iv"))
(rule "lenOfSeqDef" (formula "12") (term "0,0,1,0,1,0,0,0,1"))
(rule "eqSymm" (formula "12") (term "0,1,0,1,0,0,0,1"))
(rule "polySimp_elimSub" (formula "12") (term "1,1,0,1,0,1,0,0,0,1"))
(rule "times_zero_2" (formula "12") (term "1,1,1,0,1,0,1,0,0,0,1"))
(rule "add_zero_right" (formula "12") (term "1,1,0,1,0,1,0,0,0,1"))
(rule "getOfSeqDef" (formula "12") (term "0,1,0,1,1,0,1,0,0,0,1"))
(rule "castDel" (formula "12") (term "2,0,1,0,1,1,0,1,0,0,0,1"))
(rule "castDel" (formula "12") (term "1,0,1,0,1,1,0,1,0,0,0,1"))
(rule "add_zero_right" (formula "12") (term "0,2,1,0,1,0,1,1,0,1,0,0,0,1"))
(rule "eqSymm" (formula "12") (term "1,0,1,1,0,1,0,0,0,1"))
(rule "polySimp_elimSub" (formula "12") (term "1,1,0,1,1,0,1,1,0,1,0,0,0,1"))
(rule "times_zero_2" (formula "12") (term "1,1,1,0,1,1,0,1,1,0,1,0,0,0,1"))
(rule "add_zero_right" (formula "12") (term "1,1,0,1,1,0,1,1,0,1,0,0,0,1"))
(rule "lenOfSeqDef" (formula "12") (term "1,1,0,0,1,1,0,1,0,0,0,1"))
(rule "polySimp_elimSub" (formula "12") (term "1,1,1,0,0,1,1,0,1,0,0,0,1"))
(rule "times_zero_2" (formula "12") (term "1,1,1,1,0,0,1,1,0,1,0,0,0,1"))
(rule "add_zero_right" (formula "12") (term "1,1,1,0,0,1,1,0,1,0,0,0,1"))
(rule "lenOfSeqDef" (formula "12") (term "0,0,1,0,1,0,0,0,1"))
(rule "eqSymm" (formula "12") (term "0,1,0,1,0,0,0,1"))
(rule "polySimp_elimSub" (formula "12") (term "1,1,0,1,0,1,0,0,0,1"))
(rule "times_zero_2" (formula "12") (term "1,1,1,0,1,0,1,0,0,0,1"))
(rule "add_zero_right" (formula "12") (term "1,1,0,1,0,1,0,0,0,1"))
(rule "getOfSeqDef" (formula "12") (term "0,1,0,1,1,0,1,0,0,0,1"))
(rule "castDel" (formula "12") (term "1,0,1,0,1,1,0,1,0,0,0,1"))
(rule "castDel" (formula "12") (term "2,0,1,0,1,1,0,1,0,0,0,1"))
(rule "add_zero_right" (formula "12") (term "0,2,1,0,1,0,1,1,0,1,0,0,0,1"))
(rule "eqSymm" (formula "12") (term "1,0,1,1,0,1,0,0,0,1"))
(rule "polySimp_elimSub" (formula "12") (term "1,1,0,1,1,0,1,1,0,1,0,0,0,1"))
(rule "mul_literals" (formula "12") (term "1,1,1,0,1,1,0,1,1,0,1,0,0,0,1"))
(rule "add_zero_right" (formula "12") (term "1,1,0,1,1,0,1,1,0,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "12") (term "0,1,1,0,0,1,1,0,1,0,0,0,1"))
(rule "add_zero_right" (formula "12") (term "0,0,1,1,0,0,1,1,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,1,0,0,1,1,0,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,1,0,1,0,0,0,1"))
(rule "add_zero_right" (formula "12") (term "0,0,0,0,1,0,1,0,0,0,1"))
(rule "eqSymm" (formula "12") (term "0,1,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,1,0,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,0,1,1,0,1,0,0,0,1"))
(rule "eqSymm" (formula "12") (term "1,0,1,1,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,1,1,0,1,1,0,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,1,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,1,1,0,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,1,0,1,0,0,0,1"))
(rule "add_zero_right" (formula "12") (term "0,0,0,0,1,0,1,0,0,0,1"))
(rule "eqSymm" (formula "12") (term "0,1,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,1,0,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,0,1,1,0,1,0,0,0,1"))
(rule "eqSymm" (formula "12") (term "1,0,1,1,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,1,1,0,1,1,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1,1,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1,0,1,1,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,1,1,0,1,1,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,1,1,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,1,1,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,1,1,0,1,0,0,0,1"))
(rule "mul_literals" (formula "12") (term "0,1,1,0,0,1,1,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,1,1,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,1,1,0,1,0,0,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0,0,1,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,0,1,0,1,0,0,0,1"))
(rule "eqSymm" (formula "12") (term "0,1,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "12") (term "0,0,1,0,1,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,1,0,1,1,0,1,0,0,0,1"))
(rule "eqSymm" (formula "12") (term "1,0,1,1,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "12") (term "1,1,0,1,1,0,1,1,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "12") (term "1,1,0,1,1,0,1,1,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,1,1,0,1,1,0,1,0,0,0,1"))
(rule "mul_literals" (formula "12") (term "0,1,1,0,1,1,0,1,1,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,1,1,0,1,1,0,1,0,0,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,1,1,1,0,0,1,1,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "12") (term "0,0,1,1,1,0,0,1,1,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "12") (term "0,0,1,1,1,0,0,1,1,0,1,0,0,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0,0,1,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,0,1,0,1,0,0,0,1"))
(rule "eqSymm" (formula "12") (term "0,1,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "12") (term "0,0,1,0,1,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,1,0,1,1,0,1,0,0,0,1"))
(rule "eqSymm" (formula "12") (term "1,0,1,1,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "12") (term "1,1,0,1,1,0,1,1,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "12") (term "1,1,0,1,1,0,1,1,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,1,1,0,1,1,0,1,0,0,0,1"))
(rule "mul_literals" (formula "12") (term "0,1,1,0,1,1,0,1,1,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,1,1,0,1,1,0,1,0,0,0,1"))
(rule "nnf_imp2or" (formula "12") (term "0,1,1,0,1,0,0,0,1"))
(rule "nnf_notAnd" (formula "12") (term "0,0,1,1,0,1,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,1,1,0,1,0,0,0,1"))
(rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,1,1,0,1,0,0,0,1"))
(rule "add_zero_right" (formula "12") (term "0,0,0,0,0,1,1,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,1,1,0,1,0,0,0,1"))
(rule "mul_literals" (formula "12") (term "1,0,0,0,1,1,0,1,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,1,1,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,1,1,0,1,0,0,0,1"))
(rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,1,1,0,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,1,1,0,1,0,0,0,1"))
(rule "add_literals" (formula "12") (term "0,0,0,1,0,0,1,1,0,1,0,0,0,1"))
(rule "add_zero_left" (formula "12") (term "0,0,1,0,0,1,1,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,1,1,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1,1,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,1,1,0,1,0,0,0,1"))
(rule "Class_invariant_axiom_for_verif_functionalities_pkisig_UncorruptedVerifier" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "notLeft" (formula "7"))
(rule "notLeft" (formula "7"))
(rule "methodBodyExpand" (formula "13") (term "1") (newnames "heapBefore_verify,savedHeapBefore_verify"))
(builtin "One Step Simplification" (formula "13"))
(rule "returnUnfold" (formula "13") (term "1") (inst "#v0=x"))
(rule "variableDeclarationAssign" (formula "13") (term "1"))
(rule "variableDeclaration" (formula "13") (term "1") (newnames "x"))
(rule "compound_assignment_3_nonsimple" (formula "13") (term "1"))
(rule "ifElseUnfold" (formula "13") (term "1") (inst "#boolv=x_1"))
(rule "variableDeclaration" (formula "13") (term "1") (newnames "x_1"))
(rule "compound_assignment_2" (formula "13") (term "1") (inst "#v=x_2"))
(rule "variableDeclarationAssign" (formula "13") (term "1"))
(rule "variableDeclaration" (formula "13") (term "1") (newnames "x_2"))
(rule "methodCallWithAssignmentUnfoldArguments" (formula "13") (term "1"))
(rule "variableDeclarationAssign" (formula "13") (term "1"))
(rule "variableDeclaration" (formula "13") (term "1") (newnames "var"))
(rule "assignment" (formula "13") (term "1"))
(builtin "One Step Simplification" (formula "13"))
(rule "variableDeclarationAssign" (formula "13") (term "1"))
(rule "variableDeclaration" (formula "13") (term "1") (newnames "var_1"))
(rule "assignment" (formula "13") (term "1"))
(builtin "One Step Simplification" (formula "13"))
(rule "variableDeclarationAssign" (formula "13") (term "1"))
(rule "variableDeclaration" (formula "13") (term "1") (newnames "var_2"))
(rule "assignment_read_attribute_this" (formula "13") (term "1"))
(builtin "One Step Simplification" (formula "13"))
(builtin "Use Operation Contract" (formula "13") (newnames "heapBefore_verify_0,result_0,exc_0,heapAfter_verify,anon_heap_verify") (contract "verif.lib.crypto.CryptoLib[verif.lib.crypto.CryptoLib::verify([B,[B,[B)].JML behavior operation contract.0"))
(branch "Post (verify)"
   (builtin "One Step Simplification" (formula "15"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "9"))
   (rule "typeEqDerived" (formula "10") (term "0,1,1") (ifseqformula "9"))
   (rule "typeEqDerived" (formula "10") (term "0,0,1") (ifseqformula "9"))
   (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "9")))
   (rule "true_left" (formula "10"))
   (rule "assignment" (formula "16") (term "1"))
   (builtin "One Step Simplification" (formula "16"))
   (rule "blockEmpty" (formula "16") (term "1"))
   (rule "commuteUnion" (formula "8") (term "1,0"))
   (rule "compound_assignment_1_new" (formula "16") (term "1"))
   (builtin "One Step Simplification" (formula "16"))
   (rule "ifElseSplit" (formula "16"))
   (branch "if x_1 true"
      (builtin "One Step Simplification" (formula "17"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "assignment" (formula "17") (term "1"))
      (builtin "One Step Simplification" (formula "17"))
      (rule "methodCallReturn" (formula "17") (term "1"))
      (rule "assignment" (formula "17") (term "1"))
      (builtin "One Step Simplification" (formula "17"))
      (rule "methodCallEmpty" (formula "17") (term "1"))
      (rule "tryEmpty" (formula "17") (term "1"))
      (rule "emptyModality" (formula "17") (term "1"))
      (builtin "One Step Simplification" (formula "17"))
      (rule "eqSymm" (formula "17") (term "1,0,0,1"))
      (rule "Class_invariant_axiom_for_verif_functionalities_pkisig_UncorruptedVerifier" (formula "17") (term "0"))
      (rule "pullOutSelect" (formula "17") (term "0,0,0,0") (inst "selectSK=verif_functionalities_pkisig_Verifier_verifKey_0"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")) (ifInst ""  (formula "3")))
      (rule "elementOfUnion" (formula "1") (term "0,0"))
      (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
      (rule "elementOfSingleton" (formula "1") (term "0,0"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
      (rule "applyEqReverse" (formula "18") (term "0,0,0,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "replace_known_right" (formula "17") (term "0,0,0") (ifseqformula "12"))
      (builtin "One Step Simplification" (formula "17"))
      (rule "pullOutSelect" (formula "17") (term "0,0,0") (inst "selectSK=verif_functionalities_pkisig_UncorruptedVerifier_log_1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")) (ifInst ""  (formula "3")))
      (rule "elementOfUnion" (formula "1") (term "0,0"))
      (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
      (rule "elementOfSingleton" (formula "1") (term "0,0"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
      (rule "applyEqReverse" (formula "18") (term "0,0,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "replace_known_right" (formula "17") (term "0,0") (ifseqformula "11"))
      (builtin "One Step Simplification" (formula "17"))
      (rule "allRight" (formula "17") (inst "sk=f_0"))
      (rule "allRight" (formula "17") (inst "sk=o_0"))
      (rule "orRight" (formula "17"))
      (rule "orRight" (formula "17"))
      (rule "orRight" (formula "17"))
      (rule "pullOutSelect" (formula "20") (term "0") (inst "selectSK=f_0_0"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
      (rule "eqSymm" (formula "21"))
      (rule "elementOfUnion" (formula "1") (term "0,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
      (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "18"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
      (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "19"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")))
      (rule "closeFalse" (formula "1"))
   )
   (branch "if x_1 false"
      (builtin "One Step Simplification" (formula "17"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "methodCallWithAssignmentUnfoldTarget" (formula "17") (term "1") (inst "#v0=l"))
      (rule "variableDeclaration" (formula "17") (term "1") (newnames "l"))
      (rule "assignment_read_attribute_this" (formula "17") (term "1"))
      (builtin "One Step Simplification" (formula "17"))
      (rule "pullOutSelect" (formula "17") (term "0,1,0") (inst "selectSK=verif_functionalities_pkisig_UncorruptedVerifier_log_0"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "10"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")) (ifInst ""  (formula "4")))
      (rule "elementOfUnion" (formula "1") (term "0,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
      (rule "elementOfSingleton" (formula "1") (term "0,0"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "replaceKnownAuxiliaryConstant_taclet10_1" (formula "17") (term "0,1,0"))
      (builtin "Use Operation Contract" (formula "17") (newnames "heapBefore_contains,result_1,exc_1") (contract "verif.functionalities.pkisig.Signer.Log[verif.functionalities.pkisig.Signer.Log::contains([B)].JML normal_behavior operation contract.0"))
      (branch "Post (contains)"
         (builtin "One Step Simplification" (formula "11"))
         (builtin "One Step Simplification" (formula "18"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "12"))
         (rule "assignment" (formula "19") (term "1"))
         (builtin "One Step Simplification" (formula "19"))
         (rule "blockEmpty" (formula "19") (term "1"))
         (rule "array2seqDef" (formula "12") (term "1,1") (inst "u=u"))
         (rule "eqSymm" (formula "12") (term "1"))
         (rule "array2seqDef" (formula "12") (term "1,1") (inst "u=u"))
         (rule "eqSymm" (formula "12") (term "1"))
         (rule "eqSeqDef" (formula "12") (term "1") (inst "iv=iv"))
         (rule "lenOfSeqDef" (formula "12") (term "0,0,1"))
         (rule "eqSymm" (formula "12") (term "0,1"))
         (rule "polySimp_elimSub" (formula "12") (term "1,1,0,1"))
         (rule "mul_literals" (formula "12") (term "1,1,1,0,1"))
         (rule "add_zero_right" (formula "12") (term "1,1,0,1"))
         (rule "getOfSeqDef" (formula "12") (term "1,1,0,1,1"))
         (rule "castDel" (formula "12") (term "1,1,1,0,1,1"))
         (rule "castDel" (formula "12") (term "2,1,1,0,1,1"))
         (rule "add_zero_right" (formula "12") (term "0,2,1,1,1,0,1,1"))
         (rule "polySimp_elimSub" (formula "12") (term "1,1,0,1,1,0,1,1"))
         (rule "times_zero_2" (formula "12") (term "1,1,1,0,1,1,0,1,1"))
         (rule "add_zero_right" (formula "12") (term "1,1,0,1,1,0,1,1"))
         (rule "getOfSeqDef" (formula "12") (term "0,1,0,1,1"))
         (rule "castDel" (formula "12") (term "2,0,1,0,1,1"))
         (rule "castDel" (formula "12") (term "1,0,1,0,1,1"))
         (rule "add_zero_right" (formula "12") (term "0,2,1,0,1,0,1,1"))
         (rule "polySimp_elimSub" (formula "12") (term "1,1,0,0,1,0,1,1"))
         (rule "times_zero_2" (formula "12") (term "1,1,1,0,0,1,0,1,1"))
         (rule "add_zero_right" (formula "12") (term "1,1,0,0,1,0,1,1"))
         (rule "lenOfSeqDef" (formula "12") (term "1,1,0,0,1,1"))
         (rule "polySimp_elimSub" (formula "12") (term "1,1,1,0,0,1,1"))
         (rule "times_zero_2" (formula "12") (term "1,1,1,1,0,0,1,1"))
         (rule "add_zero_right" (formula "12") (term "1,1,1,0,0,1,1"))
         (rule "lenOfSeqDef" (formula "12") (term "0,0,1"))
         (rule "eqSymm" (formula "12") (term "0,1"))
         (rule "polySimp_elimSub" (formula "12") (term "1,1,0,1"))
         (rule "times_zero_2" (formula "12") (term "1,1,1,0,1"))
         (rule "add_zero_right" (formula "12") (term "1,1,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,1,1,0,1,1"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,1,1,0,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,0,1,1"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,1,0,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "12") (term "0,1,1,0,0,1,1"))
         (rule "add_zero_right" (formula "12") (term "0,0,1,1,0,0,1,1"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,1,0,0,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,1"))
         (rule "add_zero_right" (formula "12") (term "0,0,0,0,1"))
         (rule "eqSymm" (formula "12") (term "0,1"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,1"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,1"))
         (rule "add_zero_right" (formula "12") (term "0,0,0,0,1"))
         (rule "eqSymm" (formula "12") (term "0,1"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,1,1,0,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1,0,1,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,1,1,0,1,1"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,1,1,0,1,1"))
         (rule "polySimp_rightDist" (formula "12") (term "1,1,0,1,1,0,1,1"))
         (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,1,1,0,1,1"))
         (rule "mul_literals" (formula "12") (term "0,1,1,0,1,1,0,1,1"))
         (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,1,1,0,1,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,1,0,1,1"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,1,0,1,1"))
         (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,1,0,1,1"))
         (rule "mul_literals" (formula "12") (term "0,1,1,0,0,1,0,1,1"))
         (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,1,0,1,1"))
         (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,1,0,1,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0,1,0,0,1,0,0,1,1"))
         (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,1,0,0,1,0,0,1,1"))
         (rule "polySimp_elimOne" (formula "12") (term "0,0,0,1,0,0,1,0,0,1,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,0,1"))
         (rule "eqSymm" (formula "12") (term "0,1"))
         (rule "polySimp_elimOne" (formula "12") (term "0,0,1,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,1,1"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,1,1"))
         (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,1,1"))
         (rule "mul_literals" (formula "12") (term "0,1,1,0,0,1,1"))
         (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,1,1"))
         (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,1,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,0,1"))
         (rule "eqSymm" (formula "12") (term "0,1"))
         (rule "polySimp_elimOne" (formula "12") (term "0,0,1,0,1"))
         (rule "pullOutSelect" (formula "12") (term "1,1,0,1,0,1,1") (inst "selectSK=verif_functionalities_pkisig_Signer_Log_messages_0"))
         (rule "simplifySelectOfAnonEQ" (formula "12") (ifseqformula "9"))
         (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "14")))
         (rule "replaceKnownSelect_taclet010_2" (formula "13") (term "0,1,0,0,1"))
         (rule "replaceKnownSelect_taclet010_2" (formula "13") (term "0,0,0,0,0,1"))
         (rule "replaceKnownSelect_taclet010_2" (formula "13") (term "0,1,1,1,1,0,0,1,1"))
         (rule "replaceKnownSelect_taclet010_2" (formula "13") (term "0,1,1,1,0,0,1,0,1,1"))
         (rule "replaceKnownSelect_taclet010_2" (formula "13") (term "0,0,0,1,1,1,0,0,1,1"))
         (rule "elementOfUnion" (formula "12") (term "0,0,0"))
         (rule "elementOfSingleton" (formula "12") (term "1,0,0,0"))
         (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "14")))
         (rule "elementOfSingleton" (formula "12") (term "0,0,0"))
         (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "14")))
         (rule "ifthenelse_negated" (formula "12") (term "0"))
         (rule "nnf_imp2or" (formula "13") (term "0,1,1"))
         (rule "nnf_notAnd" (formula "13") (term "0,0,1,1"))
         (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,1,1"))
         (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,1,1"))
         (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,1,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,1,1"))
         (rule "mul_literals" (formula "13") (term "1,0,0,0,1,1"))
         (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,1,1"))
         (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,1,1"))
         (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,1,1"))
         (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,1,1"))
         (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,1,1"))
         (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,1,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,1,1"))
         (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1,1"))
         (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,1,1"))
         (rule "methodCallReturn" (formula "20") (term "1"))
         (rule "assignment" (formula "20") (term "1"))
         (builtin "One Step Simplification" (formula "20"))
         (rule "commute_or_2" (formula "13") (term "0,1,1"))
         (rule "commute_or" (formula "13") (term "0,0,1,1"))
         (rule "methodCallEmpty" (formula "20") (term "1"))
         (rule "tryEmpty" (formula "20") (term "1"))
         (rule "emptyModality" (formula "20") (term "1"))
         (builtin "One Step Simplification" (formula "20"))
         (rule "replaceKnownSelect_taclet10_0" (formula "20") (term "1,0,1,0,0,1,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet10_1" (formula "20") (term "1,0,1,0,0,1,0,0"))
         (rule "replaceKnownSelect_taclet010_2" (formula "20") (term "0,1,0,0,1,0,0"))
         (rule "replaceKnownSelect_taclet10_0" (formula "20") (term "1,0,0,0,0,0,1,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet10_1" (formula "20") (term "1,0,0,0,0,0,1,0,0"))
         (rule "replaceKnownSelect_taclet010_2" (formula "20") (term "0,0,0,0,0,1,0,0"))
         (rule "replaceKnownSelect_taclet10_0" (formula "20") (term "1,1,1,0,1,0,1,1,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet10_1" (formula "20") (term "1,1,1,0,1,0,1,1,0,0"))
         (rule "replaceKnownSelect_taclet010_2" (formula "20") (term "1,1,0,1,0,1,1,0,0"))
         (rule "replaceKnownSelect_taclet10_0" (formula "20") (term "1,0,1,1,1,0,0,1,1,0,0"))
         (rule "replaceKnownSelect_taclet10_0" (formula "20") (term "1,0,0,0,1,1,0,0,1,1,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet10_1" (formula "20") (term "1,0,1,1,1,0,0,1,1,0,0"))
         (rule "replaceKnownSelect_taclet010_2" (formula "20") (term "0,1,1,1,0,0,1,1,0,0"))
         (rule "replaceKnownSelect_taclet10_0" (formula "20") (term "1,0,1,1,1,0,0,1,0,1,1,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet10_1" (formula "20") (term "1,0,0,0,1,1,0,0,1,1,0,0"))
         (rule "replaceKnownSelect_taclet010_2" (formula "20") (term "0,0,0,1,1,0,0,1,1,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet10_1" (formula "20") (term "1,0,1,1,1,0,0,1,0,1,1,0,0"))
         (rule "replaceKnownSelect_taclet010_2" (formula "20") (term "0,1,1,1,0,0,1,0,1,1,0,0"))
         (rule "eqSymm" (formula "20") (term "1,0,0,1"))
         (rule "Class_invariant_axiom_for_verif_functionalities_pkisig_UncorruptedVerifier" (formula "20") (term "1,0"))
         (rule "replaceKnownSelect_taclet10_0" (formula "20") (term "0,0,1,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet10_1" (formula "20") (term "0,0,1,1,0"))
         (rule "replace_known_right" (formula "20") (term "0,1,1,0") (ifseqformula "14"))
         (builtin "One Step Simplification" (formula "20"))
         (rule "pullOutSelect" (formula "20") (term "0,0,1,0") (inst "selectSK=verif_functionalities_pkisig_Verifier_verifKey_1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "10"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")) (ifInst ""  (formula "4")))
         (rule "elementOfUnion" (formula "1") (term "0,0"))
         (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
         (rule "elementOfSingleton" (formula "1") (term "0,0"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
         (rule "applyEqReverse" (formula "21") (term "0,0,1,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "replace_known_right" (formula "20") (term "0,1,0") (ifseqformula "15"))
         (builtin "One Step Simplification" (formula "20"))
         (rule "andRight" (formula "20"))
         (branch "Case 1"
            (rule "impRight" (formula "20"))
            (rule "replace_known_left" (formula "14") (term "0") (ifseqformula "1"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "andLeft" (formula "14"))
            (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "14"))
            (builtin "One Step Simplification" (formula "22"))
            (rule "allRight" (formula "22") (inst "sk=iv_0"))
            (rule "orRight" (formula "22"))
            (rule "orRight" (formula "22"))
            (rule "inEqSimp_leqRight" (formula "22"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "1"))
            (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "1")))
            (rule "inEqSimp_geqRight" (formula "23"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "inEqSimp_homoInEq0" (formula "24") (term "0,1"))
            (rule "polySimp_addComm1" (formula "24") (term "0,0,1"))
            (rule "inEqSimp_homoInEq0" (formula "24") (term "0,0"))
            (rule "polySimp_addComm1" (formula "24") (term "0,0,0"))
            (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "16"))
            (rule "applyEq" (formula "17") (term "1,1,0") (ifseqformula "16"))
            (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "0,1"))
            (rule "polySimp_mulComm0" (formula "24") (term "1,0,1"))
            (rule "polySimp_rightDist" (formula "24") (term "1,0,1"))
            (rule "mul_literals" (formula "24") (term "0,1,0,1"))
            (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,1"))
            (rule "polySimp_elimOne" (formula "24") (term "1,1,0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "24") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "24") (term "1,0,0"))
            (rule "mul_literals" (formula "24") (term "0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "pullOutSelect" (formula "24") (term "1,1") (inst "selectSK=arr_0"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")) (ifInst ""  (formula "10")))
            (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "6") (ifseqformula "23"))
            (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "12") (ifseqformula "23"))
            (rule "elementOfUnion" (formula "1") (term "0,0"))
            (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")))
            (rule "elementOfSingleton" (formula "1") (term "0,0"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")))
            (rule "applyEqReverse" (formula "25") (term "1,1") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "pullOutSelect" (formula "24") (term "1,0") (inst "selectSK=arr_1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfUnion" (formula "1") (term "0,0,0"))
            (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "ifthenelse_to_or_left" (formula "18") (term "0,0,0"))
            (rule "eqSymm" (formula "18") (term "1,1,0,0,0"))
            (builtin "One Step Simplification" (formula "18"))
            (rule "eqSymm" (formula "18") (term "1,0,0,0,0"))
            (rule "nnf_notAnd" (formula "18") (term "0,0,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0,0,0,0"))
            (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0,0,0,0"))
            (rule "add_zero_right" (formula "18") (term "0,0,0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,0,0,0"))
            (rule "mul_literals" (formula "18") (term "1,0,0,0,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,0,0,0"))
            (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,0,0,0"))
            (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,0,0,0"))
            (rule "add_zero_left" (formula "18") (term "0,0,1,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0,0,0"))
            (rule "nnf_notAnd" (formula "18") (term "0,1,1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "18") (term "1,0,1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,1,1,0,0,0"))
            (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,1,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,1,1,0,0,0"))
            (rule "add_literals" (formula "18") (term "0,0,0,1,0,1,1,0,0,0"))
            (rule "add_zero_left" (formula "18") (term "0,0,1,0,1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,1,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "18") (term "1,1,0,1,1,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "18") (term "0,0,1,1,0,0,0"))
            (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,1,1,0,0,0"))
            (rule "add_zero_right" (formula "18") (term "0,0,0,0,1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,1,1,0,0,0"))
            (rule "mul_literals" (formula "18") (term "1,0,0,1,1,0,0,0"))
            (rule "commute_or" (formula "18") (term "0,0"))
            (rule "commute_or_2" (formula "18") (term "0"))
            (rule "commute_or_2" (formula "18") (term "0,1,0"))
            (rule "commute_or" (formula "18") (term "1,1,0"))
            (rule "commute_or" (formula "18") (term "0,0,1,0"))
            (rule "commute_or_2" (formula "18") (term "0,1,1,0"))
            (rule "commute_or" (formula "18") (term "0,0,1,1,0"))
            (rule "cnf_rightDist" (formula "18") (term "1,1,0"))
            (rule "commute_or" (formula "18") (term "1,1,1,0"))
            (rule "cnf_rightDist" (formula "18") (term "0"))
            (rule "distr_forallAnd" (formula "18"))
            (rule "andLeft" (formula "18"))
            (rule "commute_or" (formula "19") (term "0"))
            (rule "commute_or_2" (formula "18") (term "0"))
            (rule "commute_or_2" (formula "19") (term "0,1,0"))
            (rule "inEqSimp_or_tautInEq1" (formula "19") (term "0,0,1,0"))
            (rule "add_zero_right" (formula "19") (term "1,1,0,0,1,0"))
            (rule "qeq_literals" (formula "19") (term "1,0,0,1,0"))
            (builtin "One Step Simplification" (formula "19"))
            (rule "commute_or_2" (formula "19") (term "0"))
            (rule "shift_paren_or" (formula "18") (term "0,0"))
            (rule "shift_paren_or" (formula "19") (term "0,0"))
            (rule "shift_paren_or" (formula "18") (term "0,0,0"))
            (rule "shift_paren_or" (formula "19") (term "0,0,0"))
            (rule "commute_or" (formula "18") (term "0,0,0,0"))
            (builtin "One Step Simplification" (formula "18"))
            (rule "shift_paren_or" (formula "19") (term "0,0,0,0"))
            (rule "commute_or" (formula "19") (term "0,0,0,0,0"))
            (builtin "One Step Simplification" (formula "19"))
            (rule "ifthenelse_split" (formula "16") (term "0"))
            (branch "self.log.<created> = TRUE TRUE"
               (rule "applyEqReverse" (formula "18") (term "0,1,0") (ifseqformula "17"))
               (rule "applyEqReverse" (formula "1") (term "1,0,0,1,0,0") (ifseqformula "17"))
               (rule "applyEqReverse" (formula "19") (term "1,1,0,0,0,0") (ifseqformula "17"))
               (rule "applyEqReverse" (formula "1") (term "1,1,0") (ifseqformula "17"))
               (rule "applyEqReverse" (formula "27") (term "0,0,0,0") (ifseqformula "17"))
               (rule "applyEqReverse" (formula "18") (term "0,0,0,0") (ifseqformula "17"))
               (rule "applyEqReverse" (formula "1") (term "0,0,0,0,0") (ifseqformula "17"))
               (rule "applyEqReverse" (formula "1") (term "1,2,0") (ifseqformula "17"))
               (rule "applyEqReverse" (formula "19") (term "0,1,1,0,0") (ifseqformula "17"))
               (rule "applyEqReverse" (formula "20") (term "0,1,1,1,0,0") (ifseqformula "17"))
               (rule "hideAuxiliaryEq" (formula "17"))
               (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "25"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "ifthenelse_negated" (formula "1") (term "0"))
               (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "6") (ifseqformula "25"))
               (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "12") (ifseqformula "25"))
               (rule "ifthenelse_split" (formula "17") (term "1"))
               (branch "message.length ≥ 1 TRUE"
                  (rule "replace_known_left" (formula "20") (term "0,1,1,0") (ifseqformula "17"))
                  (builtin "One Step Simplification" (formula "20"))
                  (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "17"))
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "replace_known_left" (formula "19") (term "0,1,1,0") (ifseqformula "17"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "replace_known_left" (formula "27") (term "0,1") (ifseqformula "2"))
                  (builtin "One Step Simplification" (formula "27"))
                  (rule "commute_or_2" (formula "20") (term "0"))
                  (builtin "One Step Simplification" (formula "20"))
                  (rule "commute_or_2" (formula "19") (term "0"))
                  (rule "ifthenelse_to_or_left" (formula "19") (term "0,0,0,0"))
                  (rule "eqSymm" (formula "19") (term "1,1,0,0,0,0"))
                  (rule "eqSymm" (formula "19") (term "1,0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "19") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,0,0,0,0"))
                  (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "19") (term "0,0,1,0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,0,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0,0,0,0,0"))
                  (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "19") (term "0,0,0,0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0,0,0"))
                  (rule "commute_or" (formula "19") (term "0,0,0"))
                  (rule "commute_or_2" (formula "19") (term "0,0"))
                  (rule "commute_or_2" (formula "19") (term "0"))
                  (rule "commute_or" (formula "19") (term "1,1,0"))
                  (rule "commute_or_2" (formula "19") (term "0,1,0"))
                  (rule "commute_or" (formula "19") (term "0,0,1,0"))
                  (rule "cnf_rightDist" (formula "19") (term "1,1,0"))
                  (rule "cnf_rightDist" (formula "19") (term "0"))
                  (rule "distr_forallAnd" (formula "19"))
                  (rule "andLeft" (formula "19"))
                  (rule "commute_or" (formula "20") (term "0"))
                  (rule "commute_or_2" (formula "19") (term "0"))
                  (rule "commute_or" (formula "20") (term "1,1,0"))
                  (rule "shift_paren_or" (formula "19") (term "0,0"))
                  (rule "commute_or_2" (formula "19") (term "0,0,0"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "cnf_rightDist" (formula "20") (term "0"))
                  (rule "distr_forallAnd" (formula "20"))
                  (rule "andLeft" (formula "20"))
                  (rule "commute_or_2" (formula "20") (term "0"))
                  (rule "shift_paren_or" (formula "21") (term "0"))
                  (rule "commute_or_2" (formula "20") (term "0,0"))
                  (rule "shift_paren_or" (formula "21") (term "0,0"))
                  (rule "commute_or_2" (formula "21") (term "0,0,0"))
                  (rule "inEqSimp_or_tautInEq1" (formula "21") (term "0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "21") (term "1,0,0"))
                  (rule "polySimp_pullOutFactor1" (formula "21") (term "0,1,0,0"))
                  (rule "add_literals" (formula "21") (term "1,0,1,0,0"))
                  (rule "times_zero_1" (formula "21") (term "0,1,0,0"))
                  (rule "leq_literals" (formula "21") (term "1,0,0"))
                  (builtin "One Step Simplification" (formula "21"))
                  (rule "true_left" (formula "21"))
                  (rule "shift_paren_or" (formula "19") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "20") (term "0,0,0"))
                  (rule "commute_or" (formula "19") (term "0,0,0,0"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "commute_or" (formula "20") (term "0,0,0,0"))
                  (rule "inEqSimp_or_tautInEq1" (formula "20") (term "0,0,0"))
                  (rule "add_zero_right" (formula "20") (term "1,1,0,0,0"))
                  (rule "qeq_literals" (formula "20") (term "1,0,0,0"))
                  (builtin "One Step Simplification" (formula "20"))
                  (rule "true_left" (formula "20"))
                  (rule "ifthenelse_split" (formula "18") (term "0"))
                  (branch "self.log.messages.length ≥ 1 TRUE"
                     (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                     (rule "applyEq" (formula "27") (term "0,0,0") (ifseqformula "18"))
                     (rule "replace_known_left" (formula "27") (term "0,0") (ifseqformula "2"))
                     (builtin "One Step Simplification" (formula "27"))
                     (rule "applyEq" (formula "19") (term "1,1,0") (ifseqformula "18"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "applyEq" (formula "20") (term "1,1,1,0") (ifseqformula "18"))
                     (rule "inEqSimp_or_tautInEq3" (formula "20") (term "0"))
                     (rule "inEqSimp_homoInEq1" (formula "20") (term "1,0"))
                     (rule "polySimp_pullOutFactor1" (formula "20") (term "0,1,0"))
                     (rule "add_literals" (formula "20") (term "1,0,1,0"))
                     (rule "times_zero_1" (formula "20") (term "0,1,0"))
                     (rule "leq_literals" (formula "20") (term "1,0"))
                     (builtin "One Step Simplification" (formula "20"))
                     (rule "true_left" (formula "20"))
                     (rule "ifthenelse_split" (formula "1") (term "0"))
                     (branch "self.log.messages.<created> = TRUE TRUE"
                        (rule "applyEqReverse" (formula "27") (term "0") (ifseqformula "2"))
                        (rule "hideAuxiliaryEq" (formula "2"))
                        (rule "arrayLengthNotNegative" (formula "18") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "17"))
                        (rule "leq_literals" (formula "18") (term "0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "true_left" (formula "18"))
                        (rule "arrayLengthIsAShort" (formula "18") (term "1"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "true_left" (formula "18"))
                        (rule "allLeft" (formula "19") (inst "t=iv_0"))
                        (rule "replaceKnownSelect_taclet0010_5" (formula "19") (term "1,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0010_6" (formula "19") (term "1,0,0"))
                        (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "19") (term "1,0") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "19") (term "0,1,0"))
                        (builtin "One Step Simplification" (formula "19"))
                        (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1"))
                        (rule "add_literals" (formula "19") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "19") (term "0,0,1"))
                        (rule "leq_literals" (formula "19") (term "0,1"))
                        (builtin "One Step Simplification" (formula "19"))
                        (rule "pullOutSelect" (formula "19") (term "0") (inst "selectSK=arr_2"))
                        (rule "simplifySelectOfAnonEQ" (formula "19") (ifseqformula "13"))
                        (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "27")) (ifInst ""  (formula "1")))
                        (rule "narrowSelectArrayType" (formula "19") (term "2,0") (ifseqformula "6") (ifseqformula "27"))
                        (rule "narrowSelectArrayType" (formula "19") (term "1,0") (ifseqformula "12") (ifseqformula "27"))
                        (rule "applyEq" (formula "19") (term "1") (ifseqformula "20"))
                        (rule "elementOfUnion" (formula "19") (term "0,0"))
                        (rule "elementOfSingleton" (formula "19") (term "1,0,0"))
                        (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "27")))
                        (rule "elementOfSingleton" (formula "19") (term "0,0"))
                        (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "27")) (ifInst ""  (formula "28")))
                        (rule "closeFalse" (formula "19"))
                     )
                     (branch "self.log.messages.<created> = TRUE FALSE"
                        (rule "referencedObjectIsCreatedRight" (formula "20") (ifseqformula "26"))
                        (rule "close" (formula "20") (ifseqformula "6"))
                     )
                  )
                  (branch "self.log.messages.length ≥ 1 FALSE"
                     (rule "eqSymm" (formula "18"))
                     (rule "inEqSimp_geqRight" (formula "21"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "applyEq" (formula "21") (term "1,1,0,0") (ifseqformula "19"))
                     (rule "applyEq" (formula "3") (term "0") (ifseqformula "19"))
                     (rule "inEqSimp_homoInEq1" (formula "3"))
                     (rule "times_zero_2" (formula "3") (term "1,0"))
                     (rule "add_zero_right" (formula "3") (term "0"))
                     (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                     (rule "qeq_literals" (formula "18"))
                     (rule "closeFalse" (formula "18"))
                  )
               )
               (branch "message.length ≥ 1 FALSE"
                  (builtin "One Step Simplification" (formula "17"))
                  (rule "replace_known_right" (formula "19") (term "0,1,1,0") (ifseqformula "20"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "20"))
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "replace_known_right" (formula "18") (term "0,1,1,0") (ifseqformula "20"))
                  (builtin "One Step Simplification" (formula "18"))
                  (rule "inEqSimp_geqRight" (formula "20"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_homoInEq1" (formula "3"))
                  (rule "times_zero_2" (formula "3") (term "1,0"))
                  (rule "add_zero_right" (formula "3") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                  (rule "mul_literals" (formula "3") (term "1"))
                  (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "4") (term "0"))
                  (builtin "One Step Simplification" (formula "4"))
                  (rule "closeFalse" (formula "4"))
               )
            )
            (branch "self.log.<created> = TRUE FALSE"
               (rule "referencedObjectIsCreatedRight" (formula "20") (ifseqformula "21"))
               (rule "close" (formula "20") (ifseqformula "6"))
            )
         )
         (branch "Case 2"
            (rule "allRight" (formula "20") (inst "sk=f_1"))
            (rule "allRight" (formula "20") (inst "sk=o_1"))
            (rule "orRight" (formula "20"))
            (rule "orRight" (formula "20"))
            (rule "orRight" (formula "20"))
            (rule "pullOutSelect" (formula "23") (term "0") (inst "selectSK=f_1_0"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "10"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")))
            (rule "eqSymm" (formula "24"))
            (rule "elementOfUnion" (formula "1") (term "0,0,0"))
            (rule "elementOfSingleton" (formula "1") (term "1,0,0,0"))
            (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "22"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
            (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "21"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "Exceptional Post (contains)"
         (builtin "One Step Simplification" (formula "18"))
         (builtin "One Step Simplification" (formula "11"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "11") (term "1,0") (ifseqformula "9"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "13"))
         (rule "notLeft" (formula "11"))
         (rule "close" (formula "14") (ifseqformula "13"))
      )
      (branch "Pre (contains)"
         (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "15")) (ifInst ""  (formula "15")))
         (rule "wellFormedAnonEQ" (formula "17") (term "0") (ifseqformula "9"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "17") (term "1") (ifseqformula "9"))
         (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "2"))
         (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "8")) (ifInst ""  (formula "6")))
         (rule "closeTrue" (formula "17"))
      )
      (branch "Null reference (l = null)"
         (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "11")))
         (rule "closeTrue" (formula "17"))
      )
   )
)
(branch "Exceptional Post (verify)"
   (builtin "One Step Simplification" (formula "15"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "9") (term "1,0") (ifseqformula "8"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "notLeft" (formula "9"))
   (rule "replace_known_right" (formula "10") (term "0,0") (ifseqformula "11"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "blockThrow" (formula "18") (term "1"))
   (rule "commuteUnion" (formula "8") (term "1,0"))
   (rule "methodCallParamThrow" (formula "18") (term "1"))
   (builtin "One Step Simplification" (formula "18"))
   (rule "tryCatchThrow" (formula "18") (term "1"))
   (rule "ifElseUnfold" (formula "18") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_3"))
   (rule "equality_comparison_simple" (formula "18") (term "1"))
   (builtin "One Step Simplification" (formula "18"))
   (rule "replace_known_right" (formula "18") (term "0,0,1,0") (ifseqformula "11"))
   (builtin "One Step Simplification" (formula "18"))
   (rule "ifElseSplit" (formula "18"))
   (branch "if x_3 true"
      (builtin "One Step Simplification" (formula "19"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch "if x_3 false"
      (builtin "One Step Simplification" (formula "19"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "ifElseSplit" (formula "18"))
      (branch "if exc_0 instanceof java.lang.Throwable true"
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
         (rule "true_left" (formula "1"))
         (rule "variableDeclaration" (formula "18") (term "1") (newnames "e"))
         (rule "reference_type_cast" (formula "18") (term "1"))
         (branch "Normal Execution (exc_0 instanceof java.lang.Throwable)"
            (builtin "One Step Simplification" (formula "19"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "assignment" (formula "18") (term "1"))
            (builtin "One Step Simplification" (formula "18"))
            (rule "emptyModality" (formula "18") (term "1"))
            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "11")) (ifInst ""  (formula "11")) (ifInst ""  (formula "10")))
            (rule "eqSymm" (formula "18") (term "1,0,0,1"))
            (rule "Class_invariant_axiom_for_verif_functionalities_pkisig_UncorruptedVerifier" (formula "18") (term "0"))
            (rule "pullOutSelect" (formula "18") (term "0,0,0,0") (inst "selectSK=verif_functionalities_pkisig_Verifier_verifKey_2"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")) (ifInst ""  (formula "3")))
            (rule "elementOfUnion" (formula "1") (term "0,0"))
            (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
            (rule "elementOfSingleton" (formula "1") (term "0,0"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
            (rule "applyEqReverse" (formula "19") (term "0,0,0,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "replace_known_right" (formula "18") (term "0,0,0") (ifseqformula "13"))
            (builtin "One Step Simplification" (formula "18"))
            (rule "pullOutSelect" (formula "18") (term "0,0,0") (inst "selectSK=verif_functionalities_pkisig_UncorruptedVerifier_log_2"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")) (ifInst ""  (formula "3")))
            (rule "elementOfUnion" (formula "1") (term "0,0"))
            (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
            (rule "elementOfSingleton" (formula "1") (term "0,0"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
            (rule "applyEqReverse" (formula "19") (term "0,0,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "replace_known_right" (formula "18") (term "0,0") (ifseqformula "12"))
            (builtin "One Step Simplification" (formula "18"))
            (rule "allRight" (formula "18") (inst "sk=f_2"))
            (rule "allRight" (formula "18") (inst "sk=o_2"))
            (rule "orRight" (formula "18"))
            (rule "orRight" (formula "18"))
            (rule "orRight" (formula "18"))
            (rule "pullOutSelect" (formula "21") (term "0") (inst "selectSK=f_2_0"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")))
            (rule "eqSymm" (formula "22"))
            (rule "elementOfUnion" (formula "1") (term "0,0,0"))
            (rule "elementOfSingleton" (formula "1") (term "1,0,0,0"))
            (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "20"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
            (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "19"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")))
            (rule "closeFalse" (formula "1"))
         )
         (branch "ClassCastException (!(exc_0 instanceof java.lang.Throwable))"
            (builtin "One Step Simplification" (formula "18"))
            (rule "closeTrue" (formula "18"))
         )
      )
      (branch "if exc_0 instanceof java.lang.Throwable false"
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
         (rule "closeFalse" (formula "1"))
      )
   )
)
(branch "Pre (verify)"
   (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "1")) (ifInst ""  (formula "11")) (ifInst ""  (formula "5")) (ifInst ""  (formula "10")) (ifInst ""  (formula "4")) (ifInst ""  (formula "8")))
   (rule "referencedObjectIsCreatedRight" (formula "13") (ifseqformula "8"))
   (rule "close" (formula "13") (ifseqformula "1"))
)
)

}
