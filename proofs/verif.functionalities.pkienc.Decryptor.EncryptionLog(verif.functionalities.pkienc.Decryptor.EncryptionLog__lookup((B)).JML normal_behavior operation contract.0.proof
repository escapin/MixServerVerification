\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Jul 17 19:14:52 CEST 2017
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=\\#begexpand_inByte\\#end,\\#begexpand_inChar\\#end,\\#begexpand_inShort\\#end,\\#begexpand_inInt\\#end,\\#begexpand_inLong\\#end
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=5000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Mon Jul 17 19:14:52 CEST 2017
name=verif.functionalities.pkienc.Decryptor.EncryptionLog[verif.functionalities.pkienc.Decryptor.EncryptionLog\\:\\:lookup([B)].JML normal_behavior operation contract.0
contract=verif.functionalities.pkienc.Decryptor.EncryptionLog[verif.functionalities.pkienc.Decryptor.EncryptionLog\\:\\:lookup([B)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mihai" ) (keyVersion "0814267c8a184b1e7da1309b7a9875095ca72975"))

(autoModeTime "5601")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "cipher,self,result,exc,heapAtPre,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "assignment" (formula "10") (term "1") (userinteraction))
(rule "methodBodyExpand" (formula "10") (term "1,1") (newnames "heapBefore_lookup,savedHeapBefore_lookup") (userinteraction))
(builtin "One Step Simplification" (formula "10"))
(rule "variableDeclarationAssign" (formula "10") (term "1") (userinteraction))
(rule "variableDeclaration" (formula "10") (term "1") (newnames "i") (userinteraction))
(builtin "Use Operation Contract" (formula "10") (newnames "heapBefore_indexOf,result_0,exc_0") (contract "verif.functionalities.pkienc.Decryptor.EncryptionLog[verif.functionalities.pkienc.Decryptor.EncryptionLog::indexOf([B)].JML normal_behavior operation contract.0"))
(branch "Post (indexOf)"
   (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "7")))
   (builtin "One Step Simplification" (formula "11"))
   (rule "translateJavaUnaryMinusInt" (formula "8") (term "1,0,0,0,0,1"))
   (rule "translateJavaUnaryMinusInt" (formula "8") (term "1,0,1,0,1"))
   (rule "neg_literal" (formula "8") (term "1,0,0,0,0,1"))
   (rule "neg_literal" (formula "8") (term "1,0,1,0,1"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "eqSymm" (formula "6"))
   (rule "eqSymm" (formula "13") (term "1,1,0,1,0,1,0,0,0,1"))
   (rule "eqSymm" (formula "13") (term "0,0,1,0,1"))
   (rule "eqSymm" (formula "13") (term "0,1,0,1,0,0,0,0,1"))
   (rule "eqSymm" (formula "13") (term "0,1,0,1,0,1,0,0,0,1"))
   (rule "eqSymm" (formula "9") (term "1,1"))
   (rule "eqSymm" (formula "10") (term "0,1,0,1"))
   (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "12"))
   (builtin "One Step Simplification" (formula "4"))
   (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,0,1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,1,0,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,1"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,1"))
   (rule "polySimp_addComm1" (formula "9") (term "0,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,0,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1"))
   (rule "assignment" (formula "13") (term "1"))
   (builtin "One Step Simplification" (formula "13"))
   (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "1,0,1"))
   (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,1"))
   (rule "polySimp_elimOne" (formula "9") (term "0,1,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1"))
   (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1"))
   (rule "mul_literals" (formula "10") (term "0,1,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1,0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,1,0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,1,0,0,0,0,1"))
   (rule "mul_literals" (formula "13") (term "0,1,1,0,0,1,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,1,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,1,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1,0,1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,1,0,1,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,1,0,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,1,0,1,0,0,0,1"))
   (rule "mul_literals" (formula "13") (term "0,1,1,0,0,1,0,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,1,0,1,0,0,0,1"))
   (rule "array2seqDef" (formula "9") (term "0,1,1") (inst "u=u"))
   (rule "array2seqDef" (formula "9") (term "1,1,1") (inst "u=u"))
   (rule "narrowSelectArrayType" (formula "9") (term "2,1,1,1") (ifseqformula "1") (ifseqformula "12"))
   (rule "array2seqDef" (formula "10") (term "1,0,1,0,1") (inst "u=u"))
   (rule "eqSymm" (formula "10") (term "0,1,0,1"))
   (rule "narrowSelectArrayType" (formula "10") (term "2,0,0,1,0,1") (ifseqformula "1") (ifseqformula "12"))
   (rule "array2seqDef" (formula "13") (term "0,0,1,0,1,0,0,0,0,1") (inst "u=u"))
   (rule "array2seqDef" (formula "13") (term "0,0,1,0,1,0,1,0,0,0,1") (inst "u=u"))
   (rule "array2seqDef" (formula "13") (term "1,0,1,0,1,0,1,0,0,0,1") (inst "u=u"))
   (rule "array2seqDef" (formula "13") (term "1,0,1,0,1,0,0,0,0,1") (inst "u=u"))
   (rule "eqSeqDef" (formula "9") (term "1,1") (inst "iv=iv"))
   (rule "lenOfSeqDef" (formula "9") (term "1,1,0,0,1,1,1"))
   (rule "polySimp_elimSub" (formula "9") (term "1,1,1,0,0,1,1,1"))
   (rule "times_zero_2" (formula "9") (term "1,1,1,1,0,0,1,1,1"))
   (rule "add_zero_right" (formula "9") (term "1,1,1,0,0,1,1,1"))
   (rule "lenOfSeqDef" (formula "9") (term "0,0,1,1"))
   (rule "eqSymm" (formula "9") (term "0,1,1"))
   (rule "polySimp_elimSub" (formula "9") (term "1,1,0,1,1"))
   (rule "times_zero_2" (formula "9") (term "1,1,1,0,1,1"))
   (rule "add_zero_right" (formula "9") (term "1,1,0,1,1"))
   (rule "getOfSeqDef" (formula "9") (term "1,1,0,1,1,1"))
   (rule "castDel" (formula "9") (term "1,1,1,0,1,1,1"))
   (rule "castDel" (formula "9") (term "2,1,1,0,1,1,1"))
   (rule "add_zero_right" (formula "9") (term "0,2,1,1,1,0,1,1,1"))
   (rule "polySimp_elimSub" (formula "9") (term "1,1,0,1,1,0,1,1,1"))
   (rule "times_zero_2" (formula "9") (term "1,1,1,0,1,1,0,1,1,1"))
   (rule "add_zero_right" (formula "9") (term "1,1,0,1,1,0,1,1,1"))
   (rule "getOfSeqDef" (formula "9") (term "0,1,0,1,1,1"))
   (rule "castDel" (formula "9") (term "1,0,1,0,1,1,1"))
   (rule "castDel" (formula "9") (term "2,0,1,0,1,1,1"))
   (rule "add_zero_right" (formula "9") (term "0,2,1,0,1,0,1,1,1"))
   (rule "polySimp_elimSub" (formula "9") (term "1,1,0,0,1,0,1,1,1"))
   (rule "times_zero_2" (formula "9") (term "1,1,1,0,0,1,0,1,1,1"))
   (rule "add_zero_right" (formula "9") (term "1,1,0,0,1,0,1,1,1"))
   (rule "lenOfSeqDef" (formula "9") (term "0,0,1,1"))
   (rule "eqSymm" (formula "9") (term "0,1,1"))
   (rule "polySimp_elimSub" (formula "9") (term "1,1,0,1,1"))
   (rule "times_zero_2" (formula "9") (term "1,1,1,0,1,1"))
   (rule "add_zero_right" (formula "9") (term "1,1,0,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "0,1,1,0,0,1,1,1"))
   (rule "add_zero_right" (formula "9") (term "0,0,1,1,0,0,1,1,1"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,1,0,0,1,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,1,1,0,1,1,1"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,1,1,0,1,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,0,1,1,1"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1,0,1,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "0,1,0,1,1"))
   (rule "add_zero_right" (formula "9") (term "0,0,1,0,1,1"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0,1,1"))
   (rule "add_zero_right" (formula "9") (term "0,0,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,1,1"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,1,1,0,1,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1,0,1,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,1,1,0,1,1,1"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,1,1,0,1,1,1"))
   (rule "polySimp_rightDist" (formula "9") (term "1,1,0,1,1,0,1,1,1"))
   (rule "mul_literals" (formula "9") (term "0,1,1,0,1,1,0,1,1,1"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,1,1,0,1,1,1"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,1,1,0,1,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,1,0,1,1,1"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,1,0,1,1,1"))
   (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,1,0,1,1,1"))
   (rule "mul_literals" (formula "9") (term "0,1,1,0,0,1,0,1,1,1"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,1,0,1,1,1"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,1,0,1,1,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,1,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "9") (term "0,0,1,0,1,1"))
   (rule "polySimp_elimOne" (formula "9") (term "0,0,1,0,1,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "9") (term "0,0,0,0,1,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0,1,0,0,1,0,0,1,1,1"))
   (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0,1,0,0,1,0,0,1,1,1"))
   (rule "polySimp_elimOne" (formula "9") (term "0,0,0,1,0,0,1,0,0,1,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,1,1,1"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,1,1,1"))
   (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,1,1,1"))
   (rule "mul_literals" (formula "9") (term "0,1,1,0,0,1,1,1"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,1,1,1"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,1,1,1"))
   (rule "array2seqDef" (formula "10") (term "1,0,1,0,1") (inst "u=u"))
   (rule "eqSymm" (formula "10") (term "0,1,0,1"))
   (rule "eqSeqDef" (formula "13") (term "0,1,0,1,0,1,0,0,0,1") (inst "iv=iv"))
   (rule "lenOfSeqDef" (formula "13") (term "1,1,0,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_elimSub" (formula "13") (term "1,1,1,0,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "times_zero_2" (formula "13") (term "1,1,1,1,0,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "add_zero_right" (formula "13") (term "1,1,1,0,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "lenOfSeqDef" (formula "13") (term "0,0,0,1,0,1,0,1,0,0,0,1"))
   (rule "eqSymm" (formula "13") (term "0,0,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_elimSub" (formula "13") (term "1,1,0,0,1,0,1,0,1,0,0,0,1"))
   (rule "times_zero_2" (formula "13") (term "1,1,1,0,0,1,0,1,0,1,0,0,0,1"))
   (rule "add_zero_right" (formula "13") (term "1,1,0,0,1,0,1,0,1,0,0,0,1"))
   (rule "getOfSeqDef" (formula "13") (term "0,1,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "castDel" (formula "13") (term "1,0,1,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "castDel" (formula "13") (term "2,0,1,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "add_zero_right" (formula "13") (term "0,2,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "eqSymm" (formula "13") (term "1,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_elimSub" (formula "13") (term "1,1,0,1,1,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "times_zero_2" (formula "13") (term "1,1,1,0,1,1,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "add_zero_right" (formula "13") (term "1,1,0,1,1,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "lenOfSeqDef" (formula "13") (term "0,0,0,1,0,1,0,1,0,0,0,1"))
   (rule "eqSymm" (formula "13") (term "0,0,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_elimSub" (formula "13") (term "1,1,0,0,1,0,1,0,1,0,0,0,1"))
   (rule "times_zero_2" (formula "13") (term "1,1,1,0,0,1,0,1,0,1,0,0,0,1"))
   (rule "add_zero_right" (formula "13") (term "1,1,0,0,1,0,1,0,1,0,0,0,1"))
   (rule "getOfSeqDef" (formula "13") (term "0,1,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "castDel" (formula "13") (term "2,0,1,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "castDel" (formula "13") (term "1,0,1,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "add_zero_right" (formula "13") (term "0,2,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "eqSymm" (formula "13") (term "1,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_elimSub" (formula "13") (term "1,1,0,1,1,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "times_zero_2" (formula "13") (term "1,1,1,0,1,1,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "add_zero_right" (formula "13") (term "1,1,0,1,1,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1,1,0,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "add_zero_right" (formula "13") (term "0,0,1,1,0,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,1,0,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0,1,0,1,0,1,0,0,0,1"))
   (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,1,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1,0,0,1,0,1,0,1,0,0,0,1"))
   (rule "add_zero_right" (formula "13") (term "0,0,1,0,0,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,1,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "eqSymm" (formula "13") (term "1,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,1,1,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "eqSymm" (formula "13") (term "1,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,1,1,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,1,1,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,0,0,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,0,0,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "13") (term "0,0,0,0,0,1,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,1,0,0,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "13") (term "0,0,1,0,0,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "13") (term "0,0,1,0,0,1,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "mul_literals" (formula "13") (term "0,1,1,0,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "eqSymm" (formula "13") (term "1,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,1,1,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "13") (term "1,1,0,1,1,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,1,1,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "mul_literals" (formula "13") (term "0,1,1,0,1,1,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,1,1,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,1,1,1,0,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "13") (term "0,0,1,1,1,0,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "13") (term "0,0,1,1,1,0,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "eqSymm" (formula "13") (term "1,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,1,1,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "13") (term "1,1,0,1,1,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "mul_literals" (formula "13") (term "0,1,1,0,1,1,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,1,1,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,1,1,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "eqSeqDef" (formula "13") (term "0,1,0,1,0,0,0,0,1") (inst "iv=iv"))
   (rule "lenOfSeqDef" (formula "13") (term "0,0,0,1,0,1,0,0,0,0,1"))
   (rule "eqSymm" (formula "13") (term "0,0,1,0,1,0,0,0,0,1"))
   (rule "polySimp_elimSub" (formula "13") (term "1,1,0,0,1,0,1,0,0,0,0,1"))
   (rule "times_zero_2" (formula "13") (term "1,1,1,0,0,1,0,1,0,0,0,0,1"))
   (rule "add_zero_right" (formula "13") (term "1,1,0,0,1,0,1,0,0,0,0,1"))
   (rule "getOfSeqDef" (formula "13") (term "0,1,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "castDel" (formula "13") (term "1,0,1,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "castDel" (formula "13") (term "2,0,1,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "add_zero_right" (formula "13") (term "0,2,1,0,1,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "eqSymm" (formula "13") (term "1,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "polySimp_elimSub" (formula "13") (term "1,1,0,1,1,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "mul_literals" (formula "13") (term "1,1,1,0,1,1,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "add_zero_right" (formula "13") (term "1,1,0,1,1,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "lenOfSeqDef" (formula "13") (term "1,1,0,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "polySimp_elimSub" (formula "13") (term "1,1,1,0,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "times_zero_2" (formula "13") (term "1,1,1,1,0,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "add_zero_right" (formula "13") (term "1,1,1,0,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "lenOfSeqDef" (formula "13") (term "0,0,0,1,0,1,0,0,0,0,1"))
   (rule "eqSymm" (formula "13") (term "0,0,1,0,1,0,0,0,0,1"))
   (rule "polySimp_elimSub" (formula "13") (term "1,1,0,0,1,0,1,0,0,0,0,1"))
   (rule "times_zero_2" (formula "13") (term "1,1,1,0,0,1,0,1,0,0,0,0,1"))
   (rule "add_zero_right" (formula "13") (term "1,1,0,0,1,0,1,0,0,0,0,1"))
   (rule "getOfSeqDef" (formula "13") (term "0,1,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "castDel" (formula "13") (term "1,0,1,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "castDel" (formula "13") (term "2,0,1,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "add_zero_right" (formula "13") (term "0,2,1,0,1,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "eqSymm" (formula "13") (term "1,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "polySimp_elimSub" (formula "13") (term "1,1,0,1,1,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "times_zero_2" (formula "13") (term "1,1,1,0,1,1,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "add_zero_right" (formula "13") (term "1,1,0,1,1,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1,1,0,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "add_zero_right" (formula "13") (term "0,0,1,1,0,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,1,0,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1,0,0,1,0,1,0,0,0,0,1"))
   (rule "add_zero_right" (formula "13") (term "0,0,1,0,0,1,0,1,0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,1,0,1,0,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0,1,0,1,0,0,0,0,1"))
   (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,1,0,1,0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,1,0,1,0,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "eqSymm" (formula "13") (term "1,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,1,1,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "eqSymm" (formula "13") (term "1,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,1,1,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,1,1,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,1,0,0,1,0,1,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "13") (term "0,0,1,0,0,1,0,1,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "13") (term "0,0,1,0,0,1,0,1,0,0,0,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,0,0,1,0,1,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,0,0,1,0,1,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "13") (term "0,0,0,0,0,1,0,1,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "mul_literals" (formula "13") (term "0,1,1,0,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "eqSymm" (formula "13") (term "1,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,1,1,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "13") (term "1,1,0,1,1,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,1,1,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "mul_literals" (formula "13") (term "0,1,1,0,1,1,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,1,1,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,1,1,1,0,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "13") (term "0,0,1,1,1,0,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "13") (term "0,0,1,1,1,0,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "eqSymm" (formula "13") (term "1,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,1,1,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "13") (term "1,1,0,1,1,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,1,1,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "mul_literals" (formula "13") (term "0,1,1,0,1,1,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,1,1,0,1,0,1,0,1,0,0,0,0,1"))
   (rule "eqSeqDef" (formula "10") (term "0,1,0,1") (inst "iv=iv"))
   (rule "getOfSeqDef" (formula "10") (term "1,1,0,1,0,1,0,1"))
   (rule "castDel" (formula "10") (term "1,1,1,0,1,0,1,0,1"))
   (rule "castDel" (formula "10") (term "2,1,1,0,1,0,1,0,1"))
   (rule "add_zero_right" (formula "10") (term "0,2,1,1,1,0,1,0,1,0,1"))
   (rule "polySimp_elimSub" (formula "10") (term "1,1,0,1,1,0,1,0,1,0,1"))
   (rule "times_zero_2" (formula "10") (term "1,1,1,0,1,1,0,1,0,1,0,1"))
   (rule "add_zero_right" (formula "10") (term "1,1,0,1,1,0,1,0,1,0,1"))
   (rule "lenOfSeqDef" (formula "10") (term "0,0,0,1,0,1"))
   (rule "eqSymm" (formula "10") (term "0,0,1,0,1"))
   (rule "polySimp_elimSub" (formula "10") (term "1,1,0,0,1,0,1"))
   (rule "times_zero_2" (formula "10") (term "1,1,1,0,0,1,0,1"))
   (rule "add_zero_right" (formula "10") (term "1,1,0,0,1,0,1"))
   (rule "lenOfSeqDef" (formula "10") (term "1,1,0,0,1,0,1,0,1"))
   (rule "polySimp_elimSub" (formula "10") (term "1,1,1,0,0,1,0,1,0,1"))
   (rule "mul_literals" (formula "10") (term "1,1,1,1,0,0,1,0,1,0,1"))
   (rule "add_zero_right" (formula "10") (term "1,1,1,0,0,1,0,1,0,1"))
   (rule "getOfSeqDef" (formula "10") (term "0,1,0,1,0,1,0,1"))
   (rule "castDel" (formula "10") (term "1,0,1,0,1,0,1,0,1"))
   (rule "castDel" (formula "10") (term "2,0,1,0,1,0,1,0,1"))
   (rule "add_zero_right" (formula "10") (term "0,2,1,0,1,0,1,0,1,0,1"))
   (rule "polySimp_elimSub" (formula "10") (term "1,1,0,0,1,0,1,0,1,0,1"))
   (rule "times_zero_2" (formula "10") (term "1,1,1,0,0,1,0,1,0,1,0,1"))
   (rule "add_zero_right" (formula "10") (term "1,1,0,0,1,0,1,0,1,0,1"))
   (rule "lenOfSeqDef" (formula "10") (term "0,0,0,1,0,1"))
   (rule "eqSymm" (formula "10") (term "0,0,1,0,1"))
   (rule "polySimp_elimSub" (formula "10") (term "1,1,0,0,1,0,1"))
   (rule "times_zero_2" (formula "10") (term "1,1,1,0,0,1,0,1"))
   (rule "add_zero_right" (formula "10") (term "1,1,0,0,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,1,1,0,1,0,1,0,1"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,1,1,0,1,0,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1,1,0,0,1,0,1,0,1"))
   (rule "add_zero_right" (formula "10") (term "0,0,1,1,0,0,1,0,1,0,1"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,1,0,0,1,0,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0,1,0,1,0,1"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1,0,1,0,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1,0,0,1,0,1"))
   (rule "add_zero_right" (formula "10") (term "0,0,1,0,0,1,0,1"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0,0,1,0,1"))
   (rule "add_zero_right" (formula "10") (term "0,0,0,0,0,1,0,1"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0,1,0,1"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1,0,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,0,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,1,1,0,1,0,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,0,1,0,1,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,1,1,0,1,0,1,0,1"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,1,1,0,1,0,1,0,1"))
   (rule "polySimp_rightDist" (formula "10") (term "1,1,0,1,1,0,1,0,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,1,1,0,1,0,1,0,1"))
   (rule "mul_literals" (formula "10") (term "0,1,1,0,1,1,0,1,0,1,0,1"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,1,1,0,1,0,1,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,1,0,1,0,1,0,1"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1,0,1,0,1,0,1"))
   (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1,0,1,0,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1,0,1,0,1,0,1"))
   (rule "mul_literals" (formula "10") (term "0,1,1,0,0,1,0,1,0,1,0,1"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1,0,1,0,1,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,1,0,0,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "10") (term "0,0,1,0,0,1,0,1"))
   (rule "polySimp_elimOne" (formula "10") (term "0,0,1,0,0,1,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0,0,0,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,0,0,1,0,1"))
   (rule "polySimp_elimOne" (formula "10") (term "0,0,0,0,0,1,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0,1,0,0,1,0,0,1,0,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,1,0,0,1,0,0,1,0,1,0,1"))
   (rule "polySimp_elimOne" (formula "10") (term "0,0,0,1,0,0,1,0,0,1,0,1,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,1,0,1,0,1"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1,0,1,0,1"))
   (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1,0,1,0,1"))
   (rule "mul_literals" (formula "10") (term "0,1,1,0,0,1,0,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1,0,1,0,1"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1,0,1,0,1"))
   (rule "nnf_imp2or" (formula "9") (term "0,1,1,1"))
   (rule "nnf_imp2or" (formula "13") (term "0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "nnf_imp2or" (formula "13") (term "0,1,0,0,0,0,1"))
   (rule "nnf_imp2or" (formula "10") (term "0,1"))
   (rule "nnf_notAnd" (formula "10") (term "0,0,1"))
   (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,1"))
   (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0,1"))
   (rule "add_zero_right" (formula "10") (term "0,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,1"))
   (rule "mul_literals" (formula "10") (term "1,0,0,0,1"))
   (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,1"))
   (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,1"))
   (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,1"))
   (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,1"))
   (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,1"))
   (rule "add_zero_left" (formula "10") (term "0,0,1,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,1"))
   (rule "nnf_notAnd" (formula "10") (term "1,0,1"))
   (rule "nnf_notAnd" (formula "9") (term "0,0,1,1,1"))
   (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,1,1,1"))
   (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,1,1,1"))
   (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,1,1,1"))
   (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,1,1,1"))
   (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,1,1,1"))
   (rule "add_zero_left" (formula "9") (term "0,0,1,0,0,1,1,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,1,1,1"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,1,1,1"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,1,1,1"))
   (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,1,1,1"))
   (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0,1,1,1"))
   (rule "add_zero_right" (formula "9") (term "0,0,0,0,0,1,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,1,1,1"))
   (rule "mul_literals" (formula "9") (term "1,0,0,0,1,1,1"))
   (rule "nnf_notAll" (formula "10") (term "1,1,0,1"))
   (rule "nnf_notAnd" (formula "13") (term "1,0,1,0,0,0,0,1"))
   (rule "nnf_notAnd" (formula "13") (term "0,0,1,0,0,0,0,1"))
   (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,1,0,0,0,0,1"))
   (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,1,0,0,0,0,1"))
   (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,1,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,1,0,0,0,0,1"))
   (rule "mul_literals" (formula "13") (term "1,0,0,0,1,0,0,0,0,1"))
   (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,1,0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,1,0,0,0,0,1"))
   (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,1,0,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,1,0,0,0,0,1"))
   (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,1,0,0,0,0,1"))
   (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,1,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,1,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,1,0,0,0,0,1"))
   (rule "nnf_imp2or" (formula "10") (term "0,0,1,1,0,1"))
   (rule "nnf_notOr" (formula "10") (term "0,1,1,0,1"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "nnf_notAll" (formula "13") (term "1,1,0,1,0,0,0,0,1"))
   (rule "nnf_notAnd" (formula "13") (term "0,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "mul_literals" (formula "13") (term "1,0,0,0,1,0,1,0,1,0,1,0,0,0,1"))
   (rule "nnf_imp2or" (formula "13") (term "0,0,1,1,0,1,0,0,0,0,1"))
   (rule "nnf_notOr" (formula "13") (term "0,1,1,0,1,0,0,0,0,1"))
   (builtin "One Step Simplification" (formula "13"))
   (rule "arrayLengthNotNegative" (formula "6") (term "1"))
   (rule "arrayLengthNotNegative" (formula "7") (term "0"))
   (rule "applyEq" (formula "7") (term "0") (ifseqformula "8"))
   (rule "arrayLengthIsAShort" (formula "7") (term "1"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "true_left" (formula "7"))
   (rule "arrayLengthIsAShort" (formula "7") (term "0"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "true_left" (formula "7"))
   (rule "Class_invariant_axiom_for_verif_functionalities_pkienc_Decryptor_EncryptionLog" (formula "8") (ifseqformula "3"))
   (rule "andLeft" (formula "8"))
   (rule "nonNull" (formula "9") (inst "i=i_1"))
   (rule "greater_literals" (formula "9") (term "0,1"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "sub_literals" (formula "9") (term "2,1,0,1"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "notLeft" (formula "9"))
   (rule "narrowSelectArrayType" (formula "9") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "13"))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
   (rule "applyEq" (formula "9") (term "0,1,0,0,1,0,0") (ifseqformula "7"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
   (rule "nonNull" (formula "8") (inst "i=i_1"))
   (rule "greater_literals" (formula "8") (term "0,1"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "sub_literals" (formula "8") (term "2,1,0,1"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "notLeft" (formula "8"))
   (rule "narrowSelectArrayType" (formula "8") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "13"))
   (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
   (rule "nnf_imp2or" (formula "9") (term "0"))
   (rule "nnf_imp2or" (formula "8") (term "0"))
   (rule "nnf_notAnd" (formula "9") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
   (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
   (rule "mul_literals" (formula "9") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "8") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
   (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
   (rule "mul_literals" (formula "8") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
   (rule "arrayLengthIsAShort" (formula "11") (term "1,0,0,1,1"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "true_left" (formula "11"))
   (rule "arrayLengthNotNegative" (formula "11") (term "1,0,0,1,1"))
   (rule "arrayLengthIsAShort" (formula "12") (term "1,1,0,1,1"))
   (builtin "One Step Simplification" (formula "12"))
   (rule "true_left" (formula "12"))
   (rule "arrayLengthNotNegative" (formula "12") (term "1,1,0,1,1"))
   (rule "commute_or_2" (formula "13") (term "0,1,1,1"))
   (rule "commute_or_2" (formula "9") (term "0"))
   (rule "commute_or_2" (formula "8") (term "0"))
   (rule "commute_and_2" (formula "14") (term "0,1,1,0,1"))
   (rule "commute_or" (formula "9") (term "0,0"))
   (rule "commute_or" (formula "8") (term "0,0"))
   (rule "commute_or" (formula "13") (term "0,0,1,1,1"))
   (rule "ifElseUnfold" (formula "19") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "19") (term "1") (newnames "x"))
   (rule "equality_comparison_simple" (formula "19") (term "1"))
   (builtin "One Step Simplification" (formula "19"))
   (rule "commute_and" (formula "14") (term "0,0,1,1,0,1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "7") (term "0,1") (ifseqformula "1"))
   (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "16"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "8") (term "0,0") (ifseqformula "1"))
   (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "18"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "ifElseSplit" (formula "21"))
   (branch "if x true"
      (builtin "One Step Simplification" (formula "22"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "1"))
      (builtin "One Step Simplification" (formula "17"))
      (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "1"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "true_left" (formula "16"))
      (rule "blockReturn" (formula "21") (term "1"))
      (rule "applyEq" (formula "14") (term "0,2,0,0") (ifseqformula "1"))
      (rule "methodCallReturn" (formula "21") (term "1"))
      (rule "assignment" (formula "21") (term "1"))
      (builtin "One Step Simplification" (formula "21"))
      (rule "methodCallEmpty" (formula "21") (term "1"))
      (rule "tryEmpty" (formula "21") (term "1"))
      (rule "emptyModality" (formula "21") (term "1"))
      (builtin "One Step Simplification" (formula "21"))
      (rule "narrowSelectArrayType" (formula "21") (term "1,1,0,1,0,1,1,0,0") (ifseqformula "2") (ifseqformula "20"))
      (rule "Class_invariant_axiom_for_verif_functionalities_pkienc_Decryptor_EncryptionLog" (formula "21") (term "1") (ifseqformula "4"))
      (rule "nonNull" (formula "21") (term "0,1") (inst "i=i_1"))
      (rule "greater_literals" (formula "21") (term "0,1,0,1"))
      (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "17")))
      (rule "sub_literals" (formula "21") (term "2,1,0,0,1"))
      (builtin "One Step Simplification" (formula "21"))
      (rule "narrowSelectArrayType" (formula "21") (term "0,0,1,0,0,1") (ifseqformula "2") (ifseqformula "17"))
      (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0,0,1"))
      (rule "mul_literals" (formula "21") (term "0,1,1,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0,0,1"))
      (rule "nonNull" (formula "21") (term "1,1") (inst "i=i_1"))
      (rule "greater_literals" (formula "21") (term "0,1,1,1"))
      (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "18")))
      (rule "sub_literals" (formula "21") (term "2,1,0,1,1"))
      (builtin "One Step Simplification" (formula "21"))
      (rule "narrowSelectArrayType" (formula "21") (term "0,0,1,0,1,1") (ifseqformula "2") (ifseqformula "18"))
      (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,1,1"))
      (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,1,1"))
      (rule "applyEq" (formula "21") (term "0,1,0,0,1,0,0,1,1") (ifseqformula "10"))
      (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,1,1"))
      (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0,1,1"))
      (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0,1,1"))
      (rule "mul_literals" (formula "21") (term "0,1,1,0,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0,1,1"))
      (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0,1,1"))
      (rule "nnf_imp2or" (formula "21") (term "0,0,1"))
      (rule "nnf_imp2or" (formula "21") (term "0,1,1"))
      (rule "nnf_notAnd" (formula "21") (term "0,0,0,1"))
      (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,0,1"))
      (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,0,1"))
      (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,0,1"))
      (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,0,1"))
      (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,1"))
      (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,0,1"))
      (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0,0,1"))
      (rule "add_zero_right" (formula "21") (term "0,0,0,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0,1"))
      (rule "mul_literals" (formula "21") (term "1,0,0,0,0,1"))
      (rule "nnf_notAnd" (formula "21") (term "0,0,1,1"))
      (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,1,1"))
      (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,1,1"))
      (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,1,1"))
      (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,1,1"))
      (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,1,1"))
      (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,1,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,1,1"))
      (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,1,1"))
      (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,1,1"))
      (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0,1,1"))
      (rule "add_zero_right" (formula "21") (term "0,0,0,0,0,1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,1,1"))
      (rule "mul_literals" (formula "21") (term "1,0,0,0,1,1"))
      (rule "ifthenelse_to_or_left2" (formula "16") (term "0,1,0"))
      (rule "eqSymm" (formula "16") (term "0,1,1,0,1,0"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "inEqSimp_notGeq" (formula "16") (term "0,0,1,1,0,1,0"))
      (rule "mul_literals" (formula "16") (term "1,0,0,0,0,1,1,0,1,0"))
      (rule "add_literals" (formula "16") (term "0,0,0,0,1,1,0,1,0"))
      (rule "add_zero_left" (formula "16") (term "0,0,0,1,1,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0,1,0"))
      (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0,1,0"))
      (rule "add_literals" (formula "16") (term "0,0,0,0,0,1,0"))
      (rule "add_zero_left" (formula "16") (term "0,0,0,0,1,0"))
      (rule "nnf_notOr" (formula "16") (term "1,1,0,1,0"))
      (rule "inEqSimp_notLeq" (formula "16") (term "0,1,1,0,1,0"))
      (rule "times_zero_1" (formula "16") (term "1,0,0,0,1,1,0,1,0"))
      (rule "add_zero_right" (formula "16") (term "0,0,0,1,1,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,1,1,0,1,0"))
      (rule "mul_literals" (formula "16") (term "1,0,1,1,0,1,0"))
      (rule "inEqSimp_and_subsumption6" (formula "16") (term "1,1,0,1,0"))
      (rule "less_literals" (formula "16") (term "0,1,1,1,0,1,0"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "andRight" (formula "21"))
      (branch "Case 1"
         (rule "allRight" (formula "21") (inst "sk=i_2"))
         (rule "orRight" (formula "21"))
         (rule "orRight" (formula "21"))
         (rule "orRight" (formula "23"))
         (rule "notRight" (formula "23"))
         (rule "inEqSimp_leqRight" (formula "22"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "inEqSimp_geqRight" (formula "23"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "applyEq" (formula "24") (term "1,1,1,0,0") (ifseqformula "3"))
         (rule "inEqSimp_sepNegMonomial0" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "nnf_ex2all" (formula "24"))
         (rule "nnf_notAnd" (formula "1") (term "0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "nnf_notAnd" (formula "1") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
         (rule "mul_literals" (formula "1") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
         (rule "commute_or_2" (formula "1") (term "0"))
         (rule "commute_or" (formula "1") (term "0,0"))
         (rule "applyEq_or_int2" (formula "20") (term "0,0,1,0"))
         (rule "commute_or" (formula "20") (term "0,0,1,0"))
         (rule "ifthenelse_to_or_right" (formula "1") (term "0,0,0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "nnf_notAnd" (formula "1") (term "0,0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0,1,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0,0,0"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "1") (term "0,0,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0,0,0"))
         (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0,0"))
         (rule "nnf_notAnd" (formula "1") (term "0,1,1,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "1") (term "0,0,1,1,0,0,0"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,1,1,0,0,0"))
         (rule "add_zero_right" (formula "1") (term "0,0,0,0,1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,1,1,0,0,0"))
         (rule "mul_literals" (formula "1") (term "1,0,0,1,1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "1") (term "1,0,1,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,1,1,0,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,1,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,1,1,0,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,1,0,1,1,0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0,1,0,1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,1,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,0,1,1,0,0,0"))
         (rule "commute_or" (formula "1") (term "0,0"))
         (rule "commute_or_2" (formula "1") (term "0"))
         (rule "commute_or" (formula "1") (term "1,1,0"))
         (rule "commute_or_2" (formula "1") (term "0,1,0"))
         (rule "commute_or_2" (formula "1") (term "0,1,1,0"))
         (rule "commute_or" (formula "1") (term "0,0,1,0"))
         (rule "commute_or" (formula "1") (term "0,0,1,1,0"))
         (rule "cnf_rightDist" (formula "1") (term "1,1,0"))
         (rule "commute_or_2" (formula "1") (term "0,1,1,0"))
         (rule "inEqSimp_or_tautInEq1" (formula "1") (term "0,0,1,1,0"))
         (rule "add_zero_right" (formula "1") (term "1,1,0,0,1,1,0"))
         (rule "qeq_literals" (formula "1") (term "1,0,0,1,1,0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "shift_paren_or" (formula "1") (term "1,1,0"))
         (rule "commute_or" (formula "1") (term "0,1,1,0"))
         (rule "cnf_rightDist" (formula "1") (term "0"))
         (rule "distr_forallAnd" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "commute_or_2" (formula "1") (term "0"))
         (rule "shift_paren_or" (formula "2") (term "0"))
         (rule "commute_or_2" (formula "2") (term "0,0"))
         (rule "shift_paren_or" (formula "1") (term "0,0"))
         (rule "commute_or_2" (formula "2") (term "0,0,0"))
         (builtin "One Step Simplification" (formula "2"))
         (rule "shift_paren_or" (formula "1") (term "0,0,0"))
         (rule "commute_or" (formula "1") (term "0,0,0,0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "ifthenelse_to_or_right2" (formula "21") (term "0,0,0,1,1,0"))
         (builtin "One Step Simplification" (formula "21"))
         (rule "nnf_notOr" (formula "21") (term "1,1,0,0,0,1,1,0"))
         (builtin "One Step Simplification" (formula "21"))
         (rule "nnf_notAnd" (formula "21") (term "0,0,0,0,0,1,1,0"))
         (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,0,0,0,1,1,0"))
         (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
         (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,0,0,0,1,1,0"))
         (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,0,0,0,1,1,0"))
         (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,0,0,0,1,1,0"))
         (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,0,0,0,1,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,0,0,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,0,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,0,0,1,1,0"))
         (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,0,0,0,1,1,0"))
         (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
         (rule "add_zero_right" (formula "21") (term "0,0,0,0,0,0,0,0,1,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0,0,0,1,1,0"))
         (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0,0,1,1,0"))
         (rule "commute_or_2" (formula "21") (term "0,0,0,0,1,1,0"))
         (rule "arrayLengthIsAShort" (formula "19") (term "0"))
         (builtin "One Step Simplification" (formula "19"))
         (rule "true_left" (formula "19"))
         (rule "arrayLengthNotNegative" (formula "19") (term "0"))
         (rule "ifthenelse_split" (formula "5") (term "1"))
         (branch "cipher.length >= 1 TRUE"
            (rule "replace_known_left" (formula "22") (term "0,1,0,0,0,0,1,0") (ifseqformula "5"))
            (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "5")) (ifInst ""  (formula "5")))
            (rule "replace_known_left" (formula "1") (term "0,1,1,0") (ifseqformula "5"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "replace_known_left" (formula "2") (term "0,1,1,0") (ifseqformula "5"))
            (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_subsumption1" (formula "21") (ifseqformula "5"))
            (rule "leq_literals" (formula "21") (term "0"))
            (builtin "One Step Simplification" (formula "21"))
            (rule "true_left" (formula "21"))
            (rule "inEqSimp_contradInEq1" (formula "21") (term "1,0,1,0") (ifseqformula "5"))
            (rule "qeq_literals" (formula "21") (term "0,1,0,1,0"))
            (builtin "One Step Simplification" (formula "21"))
            (rule "commute_or_2" (formula "2") (term "0"))
            (rule "inEqSimp_or_tautInEq1" (formula "2") (term "0,0"))
            (rule "inEqSimp_homoInEq1" (formula "2") (term "1,0,0"))
            (rule "polySimp_pullOutFactor1" (formula "2") (term "0,1,0,0"))
            (rule "add_literals" (formula "2") (term "1,0,1,0,0"))
            (rule "times_zero_1" (formula "2") (term "0,1,0,0"))
            (rule "leq_literals" (formula "2") (term "1,0,0"))
            (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "ifthenelse_split" (formula "5") (term "0"))
            (branch "self.ciphertext[i_2].length >= 1 TRUE"
               (rule "applyEq" (formula "1") (term "1,1,1,0,0,0,0,0") (ifseqformula "6"))
               (rule "applyEq" (formula "5") (term "0") (ifseqformula "6"))
               (rule "commute_or" (formula "20") (term "0,0,0,0,0,1,1,0"))
               (rule "ifthenelse_to_or_left" (formula "1") (term "0,0,0"))
               (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
               (rule "nnf_notAnd" (formula "1") (term "0,0,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0,1,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0,0,0"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0,0,0"))
               (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0,0"))
               (rule "commute_or" (formula "1") (term "0,0"))
               (rule "commute_or_2" (formula "1") (term "0"))
               (rule "commute_or_2" (formula "1") (term "0,1,0"))
               (rule "commute_or" (formula "1") (term "1,1,0"))
               (rule "commute_or" (formula "1") (term "0,0,1,0"))
               (rule "cnf_rightDist" (formula "1") (term "1,1,0"))
               (rule "cnf_rightDist" (formula "1") (term "0"))
               (rule "distr_forallAnd" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "commute_or" (formula "2") (term "0"))
               (rule "shift_paren_or" (formula "1") (term "0"))
               (rule "commute_or_2" (formula "1") (term "0,0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "commute_or" (formula "2") (term "1,1,0"))
               (rule "shift_paren_or" (formula "1") (term "0,0"))
               (rule "commute_or" (formula "1") (term "0,0,0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "cnf_rightDist" (formula "2") (term "0"))
               (rule "distr_forallAnd" (formula "2"))
               (rule "andLeft" (formula "2"))
               (rule "commute_or_2" (formula "2") (term "0"))
               (rule "shift_paren_or" (formula "3") (term "0"))
               (rule "commute_or_2" (formula "3") (term "0,0"))
               (rule "inEqSimp_or_tautInEq1" (formula "3") (term "0"))
               (rule "inEqSimp_homoInEq1" (formula "3") (term "1,0"))
               (rule "polySimp_pullOutFactor1" (formula "3") (term "0,1,0"))
               (rule "add_literals" (formula "3") (term "1,0,1,0"))
               (rule "times_zero_1" (formula "3") (term "0,1,0"))
               (rule "leq_literals" (formula "3") (term "1,0"))
               (builtin "One Step Simplification" (formula "3"))
               (rule "true_left" (formula "3"))
               (rule "shift_paren_or" (formula "2") (term "0,0"))
               (rule "commute_or" (formula "2") (term "0,0,0"))
               (rule "inEqSimp_or_tautInEq1" (formula "2") (term "0,0"))
               (rule "add_zero_right" (formula "2") (term "1,1,0,0"))
               (rule "qeq_literals" (formula "2") (term "1,0,0"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "commute_and_2" (formula "20") (term "1,1,0,0,0,1,1,0"))
               (rule "allLeft" (formula "16") (inst "t=i_2"))
               (rule "inEqSimp_commuteGeq" (formula "16") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "16") (term "1,0") (ifseqformula "3"))
               (rule "qeq_literals" (formula "16") (term "0,1,0"))
               (builtin "One Step Simplification" (formula "16"))
               (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "2"))
               (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
               (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "16") (term "0,0,1"))
               (rule "leq_literals" (formula "16") (term "0,1"))
               (builtin "One Step Simplification" (formula "16"))
               (rule "notLeft" (formula "16"))
               (rule "narrowSelectArrayType" (formula "1") (term "0,0,0,0") (ifseqformula "7") (ifseqformula "21"))
               (rule "commute_or" (formula "1") (term "0,0"))
               (rule "commute_or_2" (formula "1") (term "0"))
               (rule "allLeft" (formula "17") (inst "t=i_2"))
               (rule "inEqSimp_commuteGeq" (formula "17") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "17") (term "1") (ifseqformula "2"))
               (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1"))
               (rule "add_literals" (formula "17") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "17") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "17") (term "0,0,1"))
               (rule "leq_literals" (formula "17") (term "0,1"))
               (builtin "One Step Simplification" (formula "17"))
               (rule "inEqSimp_contradInEq1" (formula "17") (term "1") (ifseqformula "3"))
               (rule "qeq_literals" (formula "17") (term "0,1"))
               (builtin "One Step Simplification" (formula "17"))
               (rule "notLeft" (formula "17"))
               (rule "cnf_rightDist" (formula "20") (term "1,0,0,0,1,1,0"))
               (rule "ifthenelse_to_or_left2" (formula "20") (term "0,0,0,0,0,0,1,1,0"))
               (rule "eqSymm" (formula "20") (term "0,1,1,0,0,0,0,0,0,1,1,0"))
               (rule "nnf_notAnd" (formula "20") (term "0,0,0,0,0,0,0,0,1,1,0"))
               (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,0,0,0,0,0,0,1,1,0"))
               (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0,0,0,0,0,0,0,1,1,0"))
               (rule "add_zero_right" (formula "20") (term "0,0,0,0,0,0,0,0,0,0,0,1,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,0,0,0,0,0,0,1,1,0"))
               (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0,0,0,0,0,1,1,0"))
               (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,0,0,0,0,0,0,1,1,0"))
               (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,0,0,0,0,0,0,1,1,0"))
               (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,0,0,0,0,0,0,1,1,0"))
               (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,0,0,0,0,0,0,1,1,0"))
               (rule "add_zero_left" (formula "20") (term "0,0,1,0,0,0,0,0,0,0,0,1,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,0,0,0,0,0,1,1,0"))
               (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,0,0,0,0,0,1,1,0"))
               (rule "commute_or" (formula "20") (term "0,0,0,0,0,1,1,0"))
               (rule "commute_or_2" (formula "20") (term "0,0,0,0,1,1,0"))
               (rule "commute_or" (formula "20") (term "1,1,0,0,0,0,1,1,0"))
               (rule "commute_or_2" (formula "20") (term "0,1,0,0,0,0,1,1,0"))
               (rule "cnf_rightDist" (formula "20") (term "1,1,0,0,0,1,1,0"))
               (rule "commute_or" (formula "20") (term "0,1,1,0,0,0,1,1,0"))
               (rule "commute_and" (formula "20") (term "1,0,1,0,0,0,1,1,0"))
               (rule "commute_or" (formula "20") (term "0,0,1,0,0,0,0,1,1,0"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0,0") (ifseqformula "7"))
               (rule "cnf_rightDist" (formula "21") (term "0,1,0,0,0,1,1,0"))
               (rule "commute_or" (formula "21") (term "0,0,1,0,0,0,1,1,0"))
               (rule "cnf_rightDist" (formula "21") (term "1,1,0,0,0,0,1,1,0"))
               (rule "cnf_rightDist" (formula "21") (term "0,0,0,0,1,1,0"))
               (rule "commute_or" (formula "21") (term "1,0,0,0,0,1,1,0"))
               (rule "shift_paren_or" (formula "21") (term "0,0,0,0,0,1,1,0"))
               (rule "commute_or_2" (formula "21") (term "0,0,0,0,0,0,1,1,0"))
               (rule "commute_or" (formula "21") (term "1,1,1,0,0,0,0,1,1,0"))
               (rule "cnf_rightDist" (formula "21") (term "1,0,0,0,0,1,1,0"))
               (rule "commute_or_2" (formula "21") (term "0,1,0,0,0,0,1,1,0"))
               (rule "commute_or_2" (formula "21") (term "1,1,0,0,0,0,1,1,0"))
               (rule "shift_paren_or" (formula "21") (term "0,0,0,0,0,0,0,1,1,0"))
               (rule "shift_paren_or" (formula "21") (term "0,0,1,0,0,0,0,1,1,0"))
               (rule "shift_paren_or" (formula "21") (term "0,1,1,0,0,0,0,1,1,0"))
               (rule "cnf_rightDist" (formula "21") (term "1,0,1,0,0,0,1,1,0"))
               (builtin "One Step Simplification" (formula "21"))
               (rule "commute_or" (formula "21") (term "1,1,0,1,0,0,0,1,1,0"))
               (rule "arrayLengthNotNegative" (formula "5") (term "0"))
               (rule "applyEq" (formula "5") (term "0") (ifseqformula "6"))
               (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "4"))
               (rule "leq_literals" (formula "5") (term "0"))
               (builtin "One Step Simplification" (formula "5"))
               (rule "true_left" (formula "5"))
               (rule "arrayLengthIsAShort" (formula "5") (term "0"))
               (builtin "One Step Simplification" (formula "5"))
               (rule "true_left" (formula "5"))
               (rule "commute_or" (formula "21") (term "0,0,0,1,0,0,0,0,1,1,0"))
               (rule "inEqSimp_or_tautInEq1" (formula "21") (term "0,0,1,0,0,0,0,1,1,0"))
               (rule "add_zero_right" (formula "21") (term "1,1,0,0,1,0,0,0,0,1,1,0"))
               (rule "qeq_literals" (formula "21") (term "1,0,0,1,0,0,0,0,1,1,0"))
               (builtin "One Step Simplification" (formula "21"))
               (rule "commute_or" (formula "21") (term "0,0,0,0,0,0,0,0,1,1,0"))
               (builtin "One Step Simplification" (formula "21"))
               (rule "cnf_rightDist" (formula "21") (term "0,0,1,0,0,0,1,1,0"))
               (rule "commute_or" (formula "21") (term "1,0,0,1,0,0,0,1,1,0"))
               (rule "commute_and_2" (formula "21") (term "0,1,0,0,0,1,1,0"))
               (rule "commute_and" (formula "21") (term "0,0,1,0,0,0,1,1,0"))
               (rule "shift_paren_and" (formula "21") (term "1,0,0,0,1,1,0"))
               (rule "shift_paren_and" (formula "21") (term "0,0,0,1,1,0"))
               (rule "shift_paren_and" (formula "21") (term "0,0,0,0,1,1,0"))
               (rule "shift_paren_and" (formula "21") (term "0,0,0,0,0,1,1,0"))
               (rule "shift_paren_and" (formula "21") (term "0,0,0,0,0,0,1,1,0"))
               (rule "commute_and_2" (formula "21") (term "0,0,0,0,0,0,0,1,1,0"))
               (rule "commute_and" (formula "21") (term "0,0,0,0,0,0,0,0,1,1,0"))
               (rule "commute_and_2" (formula "21") (term "0,0,1,1,0"))
               (rule "commute_and_2" (formula "21") (term "0,1,1,0"))
               (rule "commute_and_2" (formula "21") (term "0,0,0,1,1,0"))
               (rule "commute_and_2" (formula "21") (term "0,0,1,1,0"))
               (rule "commute_and_2" (formula "21") (term "0,0,0,0,1,1,0"))
               (rule "commute_and_2" (formula "21") (term "0,0,0,1,1,0"))
               (rule "commute_and_2" (formula "21") (term "0,0,0,0,0,1,1,0"))
               (rule "commute_and_2" (formula "21") (term "0,0,0,0,1,1,0"))
               (rule "ex_pull_out3" (formula "21") (term "1,0"))
               (rule "cnf_rightDist" (formula "21") (term "0,1,0"))
               (rule "commute_or_2" (formula "21") (term "1,0,1,0"))
               (rule "commute_or" (formula "21") (term "0,1,0,1,0"))
               (rule "cnf_rightDist" (formula "21") (term "0,0,1,0"))
               (rule "commute_or_2" (formula "21") (term "1,0,0,1,0"))
               (rule "commute_or" (formula "21") (term "0,1,0,0,1,0"))
               (rule "cnf_rightDist" (formula "21") (term "0,0,0,1,0"))
               (rule "commute_or_2" (formula "21") (term "1,0,0,0,1,0"))
               (rule "cnf_rightDist" (formula "21") (term "0,0,0,0,1,0"))
               (rule "commute_or_2" (formula "21") (term "1,0,0,0,0,1,0"))
               (rule "cnf_rightDist" (formula "21") (term "0,0,0,0,0,1,0"))
               (rule "commute_or" (formula "21") (term "1,0,0,0,0,0,1,0"))
               (rule "cnf_rightDist" (formula "21") (term "0,0,0,0,0,0,1,0"))
               (rule "commute_or" (formula "21") (term "1,0,0,0,0,0,0,1,0"))
               (rule "cnf_rightDist" (formula "21") (term "0,0,0,0,0,0,0,1,0"))
               (rule "commute_or_2" (formula "21") (term "1,0,0,0,0,0,0,0,1,0"))
               (rule "commute_or_2" (formula "21") (term "0,1,0,0,0,0,0,0,0,1,0"))
               (rule "commute_or_2" (formula "21") (term "0,0,1,0,0,0,0,0,0,0,1,0"))
               (rule "cnf_rightDist" (formula "21") (term "0,0,0,0,0,0,0,0,1,0"))
               (rule "commute_or_2" (formula "21") (term "1,0,0,0,0,0,0,0,0,1,0"))
               (rule "commute_or_2" (formula "21") (term "0,1,0,0,0,0,0,0,0,0,1,0"))
               (rule "commute_or_2" (formula "21") (term "0,0,1,0,0,0,0,0,0,0,0,1,0"))
               (rule "cnf_rightDist" (formula "21") (term "0,0,0,0,0,0,0,0,0,1,0"))
               (rule "ex_pull_out3" (formula "21") (term "0"))
               (rule "cnf_rightDist" (formula "21") (term "0,0"))
               (rule "commute_or_2" (formula "21") (term "1,0,0"))
               (rule "commute_or_2" (formula "21") (term "0,1,0,0"))
               (rule "commute_or" (formula "21") (term "0,0,1,0,0"))
               (rule "cnf_rightDist" (formula "21") (term "0,0,0"))
               (rule "commute_or_2" (formula "21") (term "1,0,0,0"))
               (rule "commute_or_2" (formula "21") (term "0,1,0,0,0"))
               (rule "commute_or" (formula "21") (term "0,0,1,0,0,0"))
               (rule "cnf_rightDist" (formula "21") (term "0,0,0,0"))
               (rule "commute_or_2" (formula "21") (term "1,0,0,0,0"))
               (rule "commute_or_2" (formula "21") (term "0,1,0,0,0,0"))
               (rule "cnf_rightDist" (formula "21") (term "0,0,0,0,0"))
               (rule "commute_or_2" (formula "21") (term "1,0,0,0,0,0"))
               (rule "commute_or_2" (formula "21") (term "0,1,0,0,0,0,0"))
               (rule "shift_paren_or" (formula "21") (term "0,0,1,0,0,0,0"))
               (rule "cnf_rightDist" (formula "21") (term "0,0,0,0,0,0"))
               (rule "commute_or_2" (formula "21") (term "1,0,0,0,0,0,0"))
               (rule "commute_or" (formula "21") (term "0,1,0,0,0,0,0,0"))
               (rule "shift_paren_or" (formula "21") (term "0,0,1,0,0,0,0,0"))
               (rule "cnf_rightDist" (formula "21") (term "0,0,0,0,0,0,0"))
               (rule "commute_or_2" (formula "21") (term "1,0,0,0,0,0,0,0"))
               (rule "commute_or" (formula "21") (term "0,1,0,0,0,0,0,0,0"))
               (rule "cnf_rightDist" (formula "21") (term "0,0,0,0,0,0,0,0"))
               (rule "commute_or_2" (formula "21") (term "1,0,0,0,0,0,0,0,0"))
               (rule "commute_or_2" (formula "21") (term "0,1,0,0,0,0,0,0,0,0"))
               (rule "commute_or_2" (formula "21") (term "0,0,1,0,0,0,0,0,0,0,0"))
               (rule "cnf_rightDist" (formula "21") (term "0,0,0,0,0,0,0,0,0"))
               (rule "commute_or_2" (formula "21") (term "1,0,0,0,0,0,0,0,0,0"))
               (rule "commute_or_2" (formula "21") (term "0,1,0,0,0,0,0,0,0,0,0"))
               (rule "commute_or_2" (formula "21") (term "0,0,0,1,0,0,0,0,0,0,0,0"))
               (rule "commute_or_2" (formula "21") (term "1,1,0,0,0,0,0,0,0,0,0,0"))
               (rule "cut_direct" (formula "19") (term "0"))
               (branch "CUT: self.ciphertext[-1] = null TRUE"
                  (builtin "One Step Simplification" (formula "20"))
                  (rule "true_left" (formula "20"))
                  (rule "applyEq" (formula "20") (term "0,0") (ifseqformula "19"))
                  (rule "commute_or_2" (formula "21") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
                  (rule "cnf_rightDist" (formula "21") (term "0,0,0,0,0,0,0,0,0,0"))
                  (rule "commute_or_2" (formula "21") (term "1,0,0,0,0,0,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "21") (term "0,0,0,0,0,0,0,0,0,0,0"))
                  (rule "commute_or_2" (formula "21") (term "0,1,0,0,0,0,0,0,0,0,0,0"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "5") (term "0,0") (ifseqformula "7"))
                  (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "24"))
                  (builtin "One Step Simplification" (formula "5"))
                  (rule "commute_or_2" (formula "22") (term "0,0,0,1,0,0,0,0,0,0,0,0,0"))
                  (rule "commute_or" (formula "22") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                  (rule "commute_or_2" (formula "22") (term "0,1,0,0,0,0,0,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "22") (term "0,0,0,0,1,0,0,0,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "22") (term "0,0,0,0,1,0,0,0,0,0,0,0,0,0"))
                  (rule "commute_and_2" (formula "22") (term "0,0,0"))
                  (rule "commute_and_2" (formula "22") (term "0,0"))
                  (rule "commute_and_2" (formula "22") (term "0,0,0,0"))
                  (rule "commute_and_2" (formula "22") (term "0,0,0"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "23") (term "0") (ifseqformula "8"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "24"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "arrayLengthNotNegative" (formula "22") (term "0"))
                  (rule "allLeft" (formula "2") (inst "t=i_2"))
                  (rule "inEqSimp_commuteGeq" (formula "2") (term "1,0"))
                  (rule "inEqSimp_contradInEq1" (formula "2") (term "0,0") (ifseqformula "5"))
                  (rule "qeq_literals" (formula "2") (term "0,0,0"))
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "arrayLengthIsAShort" (formula "23") (term "0"))
                  (builtin "One Step Simplification" (formula "23"))
                  (rule "true_left" (formula "23"))
                  (rule "commute_and_2" (formula "24") (term "0,0,0,0,0,0,0"))
                  (rule "commute_and_2" (formula "24") (term "0,0,0,0,0,0"))
                  (rule "commute_and_2" (formula "24") (term "0,0,0,0,0"))
                  (rule "commute_and_2" (formula "24") (term "0,0,0,0"))
                  (rule "cut_direct" (formula "2") (term "0"))
                  (branch "CUT: cipher.length <= i_2 TRUE"
                     (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "2"))
                     (rule "mul_literals" (formula "6") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                     (rule "mul_literals" (formula "6") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "6"))
                     (rule "leq_literals" (formula "5") (term "0"))
                     (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "commute_and_2" (formula "24") (term "0,0,0,0,0,0,0,0"))
                     (rule "commute_and_2" (formula "24") (term "0,0,0,0,0,0,0"))
                     (rule "commute_and_2" (formula "24") (term "0,0,0,0,0,0"))
                     (rule "commute_and_2" (formula "24") (term "0,0,0,0,0"))
                     (rule "commute_and_2" (formula "24") (term "0,0,0,0"))
                     (rule "commute_and_2" (formula "24") (term "0,0,0"))
                     (rule "commute_and_2" (formula "24") (term "0,0"))
                     (rule "commute_and_2" (formula "24") (term "0,0,0,0,0,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "24"))
                     (rule "commute_and_2" (formula "24") (term "0,0,0,0,0,0,0,0"))
                     (rule "allLeft" (formula "24") (inst "t=i_2"))
                     (rule "exLeft" (formula "24") (inst "sk=iv_8"))
                     (rule "andLeft" (formula "24"))
                     (rule "andLeft" (formula "24"))
                     (rule "andLeft" (formula "24"))
                     (rule "andLeft" (formula "24"))
                     (rule "andLeft" (formula "24"))
                     (rule "andLeft" (formula "24"))
                     (rule "andLeft" (formula "24"))
                     (rule "andLeft" (formula "24"))
                     (rule "eqSymm" (formula "29") (term "0,0,0,0,0,0,0"))
                     (rule "replace_known_left" (formula "24") (term "0,1,0") (ifseqformula "8"))
                     (builtin "One Step Simplification" (formula "24"))
                     (rule "replace_known_left" (formula "25") (term "0,1,0") (ifseqformula "8"))
                     (builtin "One Step Simplification" (formula "25"))
                     (rule "replace_known_left" (formula "30") (term "0,1,0") (ifseqformula "8"))
                     (builtin "One Step Simplification" (formula "30"))
                     (rule "replace_known_left" (formula "31") (term "0,1,0") (ifseqformula "8"))
                     (builtin "One Step Simplification" (formula "31"))
                     (rule "replace_known_left" (formula "28") (term "0,1,0,0") (ifseqformula "8"))
                     (builtin "One Step Simplification" (formula "28"))
                     (rule "replace_known_left" (formula "27") (term "0,1,0,0") (ifseqformula "8"))
                     (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "24")))
                     (rule "true_left" (formula "27"))
                     (rule "replace_known_left" (formula "26") (term "0,1,0,0") (ifseqformula "8"))
                     (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "24")))
                     (rule "true_left" (formula "26"))
                     (rule "replace_known_left" (formula "30") (term "0,1,0,0,0") (ifseqformula "8"))
                     (builtin "One Step Simplification" (formula "30"))
                     (rule "replace_known_left" (formula "27") (term "0,1,0,0,0") (ifseqformula "8"))
                     (builtin "One Step Simplification" (formula "27"))
                     (rule "narrowSelectArrayType" (formula "28") (term "0,0,0,0,0") (ifseqformula "10") (ifseqformula "33"))
                     (rule "eqSymm" (formula "28") (term "0,0,0,0"))
                     (rule "narrowSelectArrayType" (formula "29") (term "0,0,0,0,0") (ifseqformula "10") (ifseqformula "33"))
                     (rule "eqSymm" (formula "29") (term "0,0,0,0"))
                     (rule "narrowSelectArrayType" (formula "30") (term "0,0,0,0,0,0,0") (ifseqformula "10") (ifseqformula "33"))
                     (rule "inEqSimp_commuteGeq" (formula "24") (term "1,0"))
                     (rule "inEqSimp_commuteGeq" (formula "25") (term "1,0"))
                     (rule "inEqSimp_commuteGeq" (formula "28") (term "1,0"))
                     (rule "inEqSimp_commuteGeq" (formula "29") (term "1,0"))
                     (rule "inEqSimp_commuteGeq" (formula "26") (term "1,0,0"))
                     (rule "inEqSimp_commuteGeq" (formula "30") (term "1,0"))
                     (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                     (rule "inEqSimp_commuteGeq" (formula "30") (term "1,0,0,0"))
                     (rule "inEqSimp_commuteGeq" (formula "27") (term "1,0,0,0"))
                     (rule "inEqSimp_commuteGeq" (formula "27") (term "1,0"))
                     (rule "inEqSimp_homoInEq0" (formula "25") (term "1"))
                     (rule "polySimp_addComm1" (formula "25") (term "0,1"))
                     (rule "inEqSimp_homoInEq0" (formula "29") (term "1"))
                     (rule "polySimp_addComm1" (formula "29") (term "0,1"))
                     (rule "inEqSimp_homoInEq0" (formula "26") (term "1"))
                     (rule "polySimp_addComm1" (formula "26") (term "0,1"))
                     (rule "inEqSimp_homoInEq0" (formula "26") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "26") (term "0,1,0"))
                     (rule "inEqSimp_homoInEq0" (formula "27") (term "1"))
                     (rule "polySimp_addComm1" (formula "27") (term "0,1"))
                     (rule "applyEq" (formula "30") (term "0,1") (ifseqformula "8"))
                     (builtin "One Step Simplification" (formula "30"))
                     (rule "applyEq" (formula "27") (term "1,0,1") (ifseqformula "8"))
                     (rule "applyEq" (formula "25") (term "1,1,0,1") (ifseqformula "8"))
                     (rule "applyEq" (formula "26") (term "1,0,1") (ifseqformula "8"))
                     (builtin "One Step Simplification" (formula "26"))
                     (rule "applyEq" (formula "25") (term "0,0,1,0,1") (ifseqformula "8"))
                     (rule "replace_known_left" (formula "25") (term "0,1,0,1") (ifseqformula "6"))
                     (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "26")))
                     (rule "true_left" (formula "25"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1"))
                     (rule "polySimp_mulComm0" (formula "28") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "28") (term "1,1"))
                     (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1"))
                     (rule "mul_literals" (formula "28") (term "0,1,1"))
                     (rule "polySimp_elimOne" (formula "28") (term "1,1,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "26") (term "1,1"))
                     (rule "mul_literals" (formula "26") (term "0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1"))
                     (rule "polySimp_elimOne" (formula "26") (term "1,1,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1"))
                     (rule "polySimp_mulComm0" (formula "25") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "25") (term "1,1"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1"))
                     (rule "mul_literals" (formula "25") (term "0,1,1"))
                     (rule "polySimp_elimOne" (formula "25") (term "1,1,1"))
                     (rule "inEqSimp_contradInEq1" (formula "27") (term "1,0,0") (ifseqformula "5"))
                     (rule "qeq_literals" (formula "27") (term "0,1,0,0"))
                     (builtin "One Step Simplification" (formula "27"))
                     (rule "inEqSimp_contradInEq1" (formula "28") (term "1,0,0") (ifseqformula "5"))
                     (rule "qeq_literals" (formula "28") (term "0,1,0,0"))
                     (builtin "One Step Simplification" (formula "28"))
                     (rule "inEqSimp_contradInEq1" (formula "24") (term "0,0") (ifseqformula "5"))
                     (rule "qeq_literals" (formula "24") (term "0,0,0"))
                     (builtin "One Step Simplification" (formula "24"))
                     (rule "inEqSimp_contradInEq1" (formula "26") (term "1,0,0,0,0") (ifseqformula "5"))
                     (rule "qeq_literals" (formula "26") (term "0,1,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "26"))
                     (rule "inEqSimp_contradInEq1" (formula "29") (term "1,0,0,0") (ifseqformula "5"))
                     (rule "qeq_literals" (formula "29") (term "0,1,0,0,0"))
                     (builtin "One Step Simplification" (formula "29"))
                     (rule "inEqSimp_contradInEq1" (formula "25") (term "1,0") (ifseqformula "4"))
                     (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1,0"))
                     (rule "add_literals" (formula "25") (term "1,1,0,0,1,0"))
                     (rule "times_zero_1" (formula "25") (term "1,0,0,1,0"))
                     (rule "add_zero_right" (formula "25") (term "0,0,1,0"))
                     (rule "leq_literals" (formula "25") (term "0,1,0"))
                     (builtin "One Step Simplification" (formula "25"))
                     (rule "inEqSimp_contradInEq1" (formula "26") (term "1,0,0,0") (ifseqformula "4"))
                     (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1,0,0,0"))
                     (rule "add_literals" (formula "26") (term "1,1,0,0,1,0,0,0"))
                     (rule "times_zero_1" (formula "26") (term "1,0,0,1,0,0,0"))
                     (rule "add_zero_right" (formula "26") (term "0,0,1,0,0,0"))
                     (rule "leq_literals" (formula "26") (term "0,1,0,0,0"))
                     (builtin "One Step Simplification" (formula "26"))
                     (rule "inEqSimp_contradInEq1" (formula "25") (term "0") (ifseqformula "5"))
                     (rule "qeq_literals" (formula "25") (term "0,0"))
                     (builtin "One Step Simplification" (formula "25"))
                     (rule "replace_known_left" (formula "28") (term "1") (ifseqformula "25"))
                     (builtin "One Step Simplification" (formula "28"))
                     (rule "true_left" (formula "28"))
                     (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "25"))
                     (builtin "One Step Simplification" (formula "26"))
                     (rule "true_left" (formula "26"))
                     (rule "inEqSimp_contradInEq1" (formula "26") (term "1,0") (ifseqformula "4"))
                     (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1,0"))
                     (rule "add_literals" (formula "26") (term "1,1,0,0,1,0"))
                     (rule "times_zero_1" (formula "26") (term "1,0,0,1,0"))
                     (rule "add_zero_right" (formula "26") (term "0,0,1,0"))
                     (rule "leq_literals" (formula "26") (term "0,1,0"))
                     (builtin "One Step Simplification" (formula "26"))
                     (rule "inEqSimp_contradInEq1" (formula "27") (term "1,0,0") (ifseqformula "4"))
                     (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "27") (term "1,1,0,0,1,0,0"))
                     (rule "times_zero_1" (formula "27") (term "1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "27") (term "0,0,1,0,0"))
                     (rule "leq_literals" (formula "27") (term "0,1,0,0"))
                     (builtin "One Step Simplification" (formula "27"))
                     (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "4"))
                     (rule "inEqSimp_homoInEq1" (formula "24") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,0"))
                     (rule "add_literals" (formula "24") (term "1,1,0,0,0"))
                     (rule "times_zero_1" (formula "24") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "24") (term "0,0,0"))
                     (rule "leq_literals" (formula "24") (term "0,0"))
                     (builtin "One Step Simplification" (formula "24"))
                     (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "24"))
                     (builtin "One Step Simplification" (formula "26"))
                     (rule "true_left" (formula "26"))
                     (rule "inEqSimp_contradInEq1" (formula "26") (term "1,0") (ifseqformula "24"))
                     (rule "qeq_literals" (formula "26") (term "0,1,0"))
                     (builtin "One Step Simplification" (formula "26"))
                     (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "25"))
                     (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                     (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "26") (term "0,0,1"))
                     (rule "leq_literals" (formula "26") (term "0,1"))
                     (builtin "One Step Simplification" (formula "26"))
                     (rule "notLeft" (formula "26"))
                     (rule "inEqSimp_exactShadow3" (formula "25") (ifseqformula "2"))
                     (rule "polySimp_rightDist" (formula "25") (term "0,0"))
                     (rule "mul_literals" (formula "25") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "25") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "25"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "0"))
                     (rule "polySimp_elimOne" (formula "25") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "24") (ifseqformula "25"))
                     (rule "mul_literals" (formula "24") (term "0,0"))
                     (rule "add_zero_left" (formula "24") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "24"))
                     (rule "mul_literals" (formula "24") (term "1"))
                     (rule "allLeft" (formula "3") (inst "t=iv_8"))
                     (rule "replace_known_right" (formula "3") (term "1") (ifseqformula "29"))
                     (builtin "One Step Simplification" (formula "3"))
                     (rule "inEqSimp_commuteGeq" (formula "3") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "3") (term "0") (ifseqformula "25"))
                     (rule "qeq_literals" (formula "3") (term "0,0"))
                     (builtin "One Step Simplification" (formula "3"))
                     (rule "inEqSimp_contradInEq0" (formula "27") (ifseqformula "3"))
                     (rule "andLeft" (formula "27"))
                     (rule "inEqSimp_homoInEq1" (formula "27"))
                     (rule "polySimp_pullOutFactor1b" (formula "27") (term "0"))
                     (rule "add_literals" (formula "27") (term "1,1,0"))
                     (rule "times_zero_1" (formula "27") (term "1,0"))
                     (rule "add_literals" (formula "27") (term "0"))
                     (rule "leq_literals" (formula "27"))
                     (rule "closeFalse" (formula "27"))
                  )
                  (branch "CUT: cipher.length <= i_2 FALSE"
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "inEqSimp_leqRight" (formula "25"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1"))
                     (rule "mul_literals" (formula "1") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                     (rule "commute_and_2" (formula "25") (term "0,0,0,0,0,0,0,0"))
                     (rule "commute_and_2" (formula "25") (term "0,0,0,0,0,0,0"))
                     (rule "commute_and_2" (formula "25") (term "0,0,0,0,0,0"))
                     (rule "commute_and_2" (formula "25") (term "0,0,0,0,0"))
                     (rule "commute_and_2" (formula "25") (term "0,0,0,0"))
                     (rule "commute_and_2" (formula "25") (term "0,0,0"))
                     (rule "commute_and_2" (formula "25") (term "0,0"))
                     (rule "commute_and_2" (formula "25") (term "0,0,0,0,0,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "25"))
                     (rule "commute_and_2" (formula "25") (term "0,0,0,0,0,0,0,0"))
                     (rule "allLeft" (formula "25") (inst "t=i_2"))
                     (rule "exLeft" (formula "25") (inst "sk=iv_7"))
                     (rule "andLeft" (formula "25"))
                     (rule "andLeft" (formula "25"))
                     (rule "andLeft" (formula "25"))
                     (rule "andLeft" (formula "25"))
                     (rule "andLeft" (formula "25"))
                     (rule "andLeft" (formula "25"))
                     (rule "andLeft" (formula "25"))
                     (rule "andLeft" (formula "25"))
                     (rule "eqSymm" (formula "30") (term "0,0,0,0,0,0,0"))
                     (rule "replace_known_left" (formula "26") (term "0,1,0") (ifseqformula "9"))
                     (builtin "One Step Simplification" (formula "26"))
                     (rule "replace_known_left" (formula "25") (term "0,1,0") (ifseqformula "9"))
                     (builtin "One Step Simplification" (formula "25"))
                     (rule "replace_known_left" (formula "32") (term "0,1,0") (ifseqformula "9"))
                     (builtin "One Step Simplification" (formula "32"))
                     (rule "replace_known_left" (formula "31") (term "0,1,0") (ifseqformula "9"))
                     (builtin "One Step Simplification" (formula "31"))
                     (rule "replace_known_left" (formula "29") (term "0,1,0,0") (ifseqformula "9"))
                     (builtin "One Step Simplification" (formula "29"))
                     (rule "replace_known_left" (formula "28") (term "0,1,0,0") (ifseqformula "9"))
                     (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "25")))
                     (rule "true_left" (formula "28"))
                     (rule "replace_known_left" (formula "27") (term "0,1,0,0") (ifseqformula "9"))
                     (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "25")))
                     (rule "true_left" (formula "27"))
                     (rule "replace_known_left" (formula "31") (term "0,1,0,0,0") (ifseqformula "9"))
                     (builtin "One Step Simplification" (formula "31"))
                     (rule "replace_known_left" (formula "28") (term "0,1,0,0,0") (ifseqformula "9"))
                     (builtin "One Step Simplification" (formula "28"))
                     (rule "narrowSelectArrayType" (formula "29") (term "0,0,0,0,0") (ifseqformula "11") (ifseqformula "34"))
                     (rule "eqSymm" (formula "29") (term "0,0,0,0"))
                     (rule "narrowSelectArrayType" (formula "30") (term "0,0,0,0,0") (ifseqformula "11") (ifseqformula "34"))
                     (rule "eqSymm" (formula "30") (term "0,0,0,0"))
                     (rule "narrowSelectArrayType" (formula "31") (term "0,0,0,0,0,0,0") (ifseqformula "11") (ifseqformula "34"))
                     (rule "inEqSimp_commuteGeq" (formula "26") (term "1,0"))
                     (rule "inEqSimp_commuteGeq" (formula "25") (term "1,0"))
                     (rule "inEqSimp_commuteGeq" (formula "30") (term "1,0"))
                     (rule "inEqSimp_commuteGeq" (formula "29") (term "1,0"))
                     (rule "inEqSimp_commuteGeq" (formula "27") (term "1,0,0"))
                     (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                     (rule "inEqSimp_commuteGeq" (formula "31") (term "1,0,0,0"))
                     (rule "inEqSimp_commuteGeq" (formula "31") (term "1,0"))
                     (rule "inEqSimp_commuteGeq" (formula "28") (term "1,0,0,0"))
                     (rule "inEqSimp_commuteGeq" (formula "28") (term "1,0"))
                     (rule "inEqSimp_homoInEq0" (formula "26") (term "1"))
                     (rule "polySimp_addComm1" (formula "26") (term "0,1"))
                     (rule "inEqSimp_homoInEq0" (formula "30") (term "1"))
                     (rule "polySimp_addComm1" (formula "30") (term "0,1"))
                     (rule "inEqSimp_homoInEq0" (formula "27") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "27") (term "0,1,0"))
                     (rule "inEqSimp_homoInEq0" (formula "27") (term "1"))
                     (rule "polySimp_addComm1" (formula "27") (term "0,1"))
                     (rule "inEqSimp_homoInEq0" (formula "28") (term "1"))
                     (rule "polySimp_addComm1" (formula "28") (term "0,1"))
                     (rule "applyEq" (formula "28") (term "1,0,1") (ifseqformula "9"))
                     (rule "applyEq" (formula "27") (term "1,0,1") (ifseqformula "9"))
                     (builtin "One Step Simplification" (formula "27"))
                     (rule "applyEq" (formula "26") (term "1,1,0,1") (ifseqformula "9"))
                     (rule "applyEq" (formula "26") (term "0,0,1,0,1") (ifseqformula "9"))
                     (rule "replace_known_left" (formula "26") (term "0,1,0,1") (ifseqformula "7"))
                     (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "27")))
                     (rule "true_left" (formula "26"))
                     (rule "applyEq" (formula "30") (term "0,1") (ifseqformula "9"))
                     (builtin "One Step Simplification" (formula "30"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1"))
                     (rule "polySimp_mulComm0" (formula "29") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "29") (term "1,1"))
                     (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1"))
                     (rule "mul_literals" (formula "29") (term "0,1,1"))
                     (rule "polySimp_elimOne" (formula "29") (term "1,1,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "27") (term "1,1"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1"))
                     (rule "mul_literals" (formula "27") (term "0,1,1"))
                     (rule "polySimp_elimOne" (formula "27") (term "1,1,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "26") (term "1,1"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1"))
                     (rule "mul_literals" (formula "26") (term "0,1,1"))
                     (rule "polySimp_elimOne" (formula "26") (term "1,1,1"))
                     (rule "inEqSimp_contradInEq1" (formula "27") (term "1,0,0,0,0") (ifseqformula "6"))
                     (rule "qeq_literals" (formula "27") (term "0,1,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "27"))
                     (rule "inEqSimp_contradInEq1" (formula "29") (term "1,0,0") (ifseqformula "6"))
                     (rule "qeq_literals" (formula "29") (term "0,1,0,0"))
                     (builtin "One Step Simplification" (formula "29"))
                     (rule "inEqSimp_contradInEq1" (formula "25") (term "0,0") (ifseqformula "6"))
                     (rule "qeq_literals" (formula "25") (term "0,0,0"))
                     (builtin "One Step Simplification" (formula "25"))
                     (rule "inEqSimp_contradInEq1" (formula "28") (term "1,0") (ifseqformula "5"))
                     (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1,0"))
                     (rule "add_literals" (formula "28") (term "1,1,0,0,1,0"))
                     (rule "times_zero_1" (formula "28") (term "1,0,0,1,0"))
                     (rule "add_zero_right" (formula "28") (term "0,0,1,0"))
                     (rule "leq_literals" (formula "28") (term "0,1,0"))
                     (builtin "One Step Simplification" (formula "28"))
                     (rule "inEqSimp_contradInEq1" (formula "26") (term "0,0") (ifseqformula "6"))
                     (rule "qeq_literals" (formula "26") (term "0,0,0"))
                     (builtin "One Step Simplification" (formula "26"))
                     (rule "inEqSimp_contradInEq1" (formula "30") (term "1,0,0") (ifseqformula "5"))
                     (rule "inEqSimp_homoInEq1" (formula "30") (term "0,1,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "30") (term "1,1,0,0,1,0,0"))
                     (rule "times_zero_1" (formula "30") (term "1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "30") (term "0,0,1,0,0"))
                     (rule "leq_literals" (formula "30") (term "0,1,0,0"))
                     (builtin "One Step Simplification" (formula "30"))
                     (rule "inEqSimp_contradInEq1" (formula "27") (term "1,0,0,0") (ifseqformula "5"))
                     (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1,0,0,0"))
                     (rule "add_literals" (formula "27") (term "1,1,0,0,1,0,0,0"))
                     (rule "times_zero_1" (formula "27") (term "1,0,0,1,0,0,0"))
                     (rule "add_zero_right" (formula "27") (term "0,0,1,0,0,0"))
                     (rule "leq_literals" (formula "27") (term "0,1,0,0,0"))
                     (builtin "One Step Simplification" (formula "27"))
                     (rule "inEqSimp_contradInEq1" (formula "29") (term "1,0") (ifseqformula "5"))
                     (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1,0"))
                     (rule "add_literals" (formula "29") (term "1,1,0,0,1,0"))
                     (rule "times_zero_1" (formula "29") (term "1,0,0,1,0"))
                     (rule "add_zero_right" (formula "29") (term "0,0,1,0"))
                     (rule "leq_literals" (formula "29") (term "0,1,0"))
                     (builtin "One Step Simplification" (formula "29"))
                     (rule "inEqSimp_contradInEq1" (formula "25") (term "0") (ifseqformula "5"))
                     (rule "inEqSimp_homoInEq1" (formula "25") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,0"))
                     (rule "add_literals" (formula "25") (term "1,1,0,0,0"))
                     (rule "times_zero_1" (formula "25") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "25") (term "0,0,0"))
                     (rule "leq_literals" (formula "25") (term "0,0"))
                     (builtin "One Step Simplification" (formula "25"))
                     (rule "replace_known_left" (formula "28") (term "1") (ifseqformula "25"))
                     (builtin "One Step Simplification" (formula "28"))
                     (rule "true_left" (formula "28"))
                     (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "5"))
                     (rule "inEqSimp_homoInEq1" (formula "26") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,0"))
                     (rule "add_literals" (formula "26") (term "1,1,0,0,0"))
                     (rule "times_zero_1" (formula "26") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "26") (term "0,0,0"))
                     (rule "leq_literals" (formula "26") (term "0,0"))
                     (builtin "One Step Simplification" (formula "26"))
                     (rule "replace_known_left" (formula "28") (term "1") (ifseqformula "26"))
                     (builtin "One Step Simplification" (formula "28"))
                     (rule "true_left" (formula "28"))
                     (rule "replace_known_left" (formula "27") (term "1") (ifseqformula "26"))
                     (builtin "One Step Simplification" (formula "27"))
                     (rule "true_left" (formula "27"))
                     (rule "inEqSimp_contradInEq1" (formula "27") (term "1,0,0") (ifseqformula "6"))
                     (rule "qeq_literals" (formula "27") (term "0,1,0,0"))
                     (builtin "One Step Simplification" (formula "27"))
                     (rule "inEqSimp_contradInEq1" (formula "27") (term "1,0") (ifseqformula "25"))
                     (rule "qeq_literals" (formula "27") (term "0,1,0"))
                     (builtin "One Step Simplification" (formula "27"))
                     (rule "inEqSimp_contradInEq1" (formula "27") (term "1") (ifseqformula "26"))
                     (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1"))
                     (rule "add_literals" (formula "27") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "27") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "27") (term "0,0,1"))
                     (rule "leq_literals" (formula "27") (term "0,1"))
                     (builtin "One Step Simplification" (formula "27"))
                     (rule "notLeft" (formula "27"))
                     (rule "allLeft" (formula "4") (inst "t=iv_7"))
                     (rule "replace_known_right" (formula "4") (term "1") (ifseqformula "29"))
                     (builtin "One Step Simplification" (formula "4"))
                     (rule "inEqSimp_commuteGeq" (formula "4") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "4") (term "0") (ifseqformula "26"))
                     (rule "qeq_literals" (formula "4") (term "0,0"))
                     (builtin "One Step Simplification" (formula "4"))
                     (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "27"))
                     (rule "andLeft" (formula "4"))
                     (rule "inEqSimp_homoInEq1" (formula "4"))
                     (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                     (rule "add_literals" (formula "4") (term "1,1,0"))
                     (rule "times_zero_1" (formula "4") (term "1,0"))
                     (rule "add_literals" (formula "4") (term "0"))
                     (rule "leq_literals" (formula "4"))
                     (rule "closeFalse" (formula "4"))
                  )
               )
               (branch "CUT: self.ciphertext[-1] = null FALSE"
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "commute_or_2" (formula "21") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
                  (rule "cnf_rightDist" (formula "21") (term "0,0,0,0,0,0,0,0,0,0"))
                  (rule "commute_or_2" (formula "21") (term "1,0,0,0,0,0,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "21") (term "0,0,0,0,0,0,0,0,0,0,0"))
                  (rule "commute_or_2" (formula "21") (term "0,1,0,0,0,0,0,0,0,0,0,0"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "5") (term "0,0") (ifseqformula "7"))
                  (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "25"))
                  (builtin "One Step Simplification" (formula "5"))
                  (rule "commute_or_2" (formula "22") (term "0,0,0,1,0,0,0,0,0,0,0,0,0"))
                  (rule "commute_or" (formula "22") (term "0,0,1,0,0,0,0,0,0,0,0,0,0"))
                  (rule "commute_or_2" (formula "22") (term "0,1,0,0,0,0,0,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "22") (term "0,0,0,0,1,0,0,0,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "22") (term "0,0,0,0,1,0,0,0,0,0,0,0,0,0"))
                  (rule "commute_and_2" (formula "22") (term "0,0,0"))
                  (rule "commute_and_2" (formula "22") (term "0,0"))
                  (rule "commute_and_2" (formula "22") (term "0,0,0,0"))
                  (rule "commute_and_2" (formula "22") (term "0,0,0"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "0") (ifseqformula "8"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "25"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "allLeft" (formula "2") (inst "t=i_2"))
                  (rule "inEqSimp_commuteGeq" (formula "2") (term "1,0"))
                  (rule "inEqSimp_contradInEq1" (formula "2") (term "0,0") (ifseqformula "5"))
                  (rule "qeq_literals" (formula "2") (term "0,0,0"))
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "commute_and_2" (formula "24") (term "0,0,0,0,0,0,0"))
                  (rule "commute_and_2" (formula "24") (term "0,0,0,0,0,0"))
                  (rule "commute_and_2" (formula "24") (term "0,0,0,0,0"))
                  (rule "commute_and_2" (formula "24") (term "0,0,0,0"))
                  (rule "cut_direct" (formula "2") (term "0"))
                  (branch "CUT: cipher.length <= i_2 TRUE"
                     (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "2"))
                     (rule "mul_literals" (formula "6") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                     (rule "mul_literals" (formula "6") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "6"))
                     (rule "leq_literals" (formula "5") (term "0"))
                     (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "commute_and_2" (formula "24") (term "0,0,0,0,0,0,0,0"))
                     (rule "commute_and_2" (formula "24") (term "0,0,0,0,0,0,0"))
                     (rule "commute_and_2" (formula "24") (term "0,0,0,0,0,0"))
                     (rule "commute_and_2" (formula "24") (term "0,0,0,0,0"))
                     (rule "commute_and_2" (formula "24") (term "0,0,0,0"))
                     (rule "commute_and_2" (formula "24") (term "0,0,0"))
                     (rule "commute_and_2" (formula "24") (term "0,0"))
                     (rule "commute_and_2" (formula "24") (term "0,0,0,0,0,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "24"))
                     (rule "commute_and_2" (formula "24") (term "0,0,0,0,0,0,0,0"))
                     (rule "allLeft" (formula "24") (inst "t=i_2"))
                     (rule "exLeft" (formula "24") (inst "sk=iv_6"))
                     (rule "andLeft" (formula "24"))
                     (rule "andLeft" (formula "24"))
                     (rule "andLeft" (formula "24"))
                     (rule "andLeft" (formula "24"))
                     (rule "andLeft" (formula "24"))
                     (rule "andLeft" (formula "24"))
                     (rule "andLeft" (formula "24"))
                     (rule "andLeft" (formula "24"))
                     (rule "eqSymm" (formula "29") (term "0,0,0,0,0,0,0"))
                     (rule "replace_known_left" (formula "25") (term "0,1,0") (ifseqformula "8"))
                     (builtin "One Step Simplification" (formula "25"))
                     (rule "replace_known_left" (formula "24") (term "0,1,0") (ifseqformula "8"))
                     (builtin "One Step Simplification" (formula "24"))
                     (rule "replace_known_left" (formula "30") (term "0,1,0") (ifseqformula "8"))
                     (builtin "One Step Simplification" (formula "30"))
                     (rule "replace_known_left" (formula "26") (term "0,1,0,0") (ifseqformula "8"))
                     (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "24")))
                     (rule "true_left" (formula "26"))
                     (rule "replace_known_left" (formula "27") (term "0,1,0,0") (ifseqformula "8"))
                     (builtin "One Step Simplification" (formula "27"))
                     (rule "replace_known_left" (formula "26") (term "0,1,0,0") (ifseqformula "8"))
                     (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "24")))
                     (rule "true_left" (formula "26"))
                     (rule "replace_known_left" (formula "29") (term "0,1,0") (ifseqformula "8"))
                     (builtin "One Step Simplification" (formula "29"))
                     (rule "replace_known_left" (formula "30") (term "0,1,0,0,0") (ifseqformula "8"))
                     (builtin "One Step Simplification" (formula "30"))
                     (rule "replace_known_left" (formula "27") (term "0,1,0,0,0") (ifseqformula "8"))
                     (builtin "One Step Simplification" (formula "27"))
                     (rule "narrowSelectArrayType" (formula "29") (term "0,0,0,0,0") (ifseqformula "10") (ifseqformula "34"))
                     (rule "eqSymm" (formula "29") (term "0,0,0,0"))
                     (rule "narrowSelectArrayType" (formula "28") (term "0,0,0,0,0") (ifseqformula "10") (ifseqformula "34"))
                     (rule "eqSymm" (formula "28") (term "0,0,0,0"))
                     (rule "narrowSelectArrayType" (formula "30") (term "0,0,0,0,0,0,0") (ifseqformula "10") (ifseqformula "34"))
                     (rule "inEqSimp_commuteGeq" (formula "25") (term "1,0"))
                     (rule "inEqSimp_commuteGeq" (formula "24") (term "1,0"))
                     (rule "inEqSimp_commuteGeq" (formula "28") (term "1,0"))
                     (rule "inEqSimp_commuteGeq" (formula "26") (term "1,0,0"))
                     (rule "inEqSimp_commuteGeq" (formula "29") (term "1,0"))
                     (rule "inEqSimp_commuteGeq" (formula "30") (term "1,0"))
                     (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                     (rule "inEqSimp_commuteGeq" (formula "30") (term "1,0,0,0"))
                     (rule "inEqSimp_commuteGeq" (formula "27") (term "1,0,0,0"))
                     (rule "inEqSimp_commuteGeq" (formula "27") (term "1,0"))
                     (rule "inEqSimp_homoInEq0" (formula "25") (term "1"))
                     (rule "polySimp_addComm1" (formula "25") (term "0,1"))
                     (rule "inEqSimp_homoInEq0" (formula "26") (term "1"))
                     (rule "polySimp_addComm1" (formula "26") (term "0,1"))
                     (rule "inEqSimp_homoInEq0" (formula "26") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "26") (term "0,1,0"))
                     (rule "inEqSimp_homoInEq0" (formula "29") (term "1"))
                     (rule "polySimp_addComm1" (formula "29") (term "0,1"))
                     (rule "inEqSimp_homoInEq0" (formula "27") (term "1"))
                     (rule "polySimp_addComm1" (formula "27") (term "0,1"))
                     (rule "applyEq" (formula "27") (term "1,0,1") (ifseqformula "8"))
                     (rule "applyEq" (formula "25") (term "1,1,0,1") (ifseqformula "8"))
                     (rule "applyEq" (formula "25") (term "0,0,1,0,1") (ifseqformula "8"))
                     (rule "replace_known_left" (formula "25") (term "0,1,0,1") (ifseqformula "6"))
                     (builtin "One Step Simplification" (formula "25"))
                     (rule "replace_known_left" (formula "26") (term "0") (ifseqformula "25"))
                     (builtin "One Step Simplification" (formula "26"))
                     (rule "true_left" (formula "26"))
                     (rule "applyEq" (formula "29") (term "0,1") (ifseqformula "8"))
                     (builtin "One Step Simplification" (formula "29"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1"))
                     (rule "polySimp_mulComm0" (formula "28") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "28") (term "1,1"))
                     (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1"))
                     (rule "mul_literals" (formula "28") (term "0,1,1"))
                     (rule "polySimp_elimOne" (formula "28") (term "1,1,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "26") (term "1,1"))
                     (rule "mul_literals" (formula "26") (term "0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1"))
                     (rule "polySimp_elimOne" (formula "26") (term "1,1,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1"))
                     (rule "polySimp_mulComm0" (formula "25") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "25") (term "1,1"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1"))
                     (rule "mul_literals" (formula "25") (term "0,1,1"))
                     (rule "polySimp_elimOne" (formula "25") (term "1,1,1"))
                     (rule "inEqSimp_contradInEq1" (formula "27") (term "1,0,0") (ifseqformula "5"))
                     (rule "qeq_literals" (formula "27") (term "0,1,0,0"))
                     (builtin "One Step Simplification" (formula "27"))
                     (rule "inEqSimp_contradInEq1" (formula "28") (term "1,0") (ifseqformula "4"))
                     (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1,0"))
                     (rule "add_literals" (formula "28") (term "1,1,0,0,1,0"))
                     (rule "times_zero_1" (formula "28") (term "1,0,0,1,0"))
                     (rule "add_literals" (formula "28") (term "0,0,1,0"))
                     (rule "leq_literals" (formula "28") (term "0,1,0"))
                     (builtin "One Step Simplification" (formula "28"))
                     (rule "inEqSimp_contradInEq1" (formula "24") (term "0,0") (ifseqformula "5"))
                     (rule "qeq_literals" (formula "24") (term "0,0,0"))
                     (builtin "One Step Simplification" (formula "24"))
                     (rule "inEqSimp_contradInEq1" (formula "29") (term "1,0,0,0") (ifseqformula "5"))
                     (rule "qeq_literals" (formula "29") (term "0,1,0,0,0"))
                     (builtin "One Step Simplification" (formula "29"))
                     (rule "inEqSimp_contradInEq1" (formula "25") (term "1,0") (ifseqformula "4"))
                     (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1,0"))
                     (rule "add_literals" (formula "25") (term "1,1,0,0,1,0"))
                     (rule "times_zero_1" (formula "25") (term "1,0,0,1,0"))
                     (rule "add_literals" (formula "25") (term "0,0,1,0"))
                     (rule "leq_literals" (formula "25") (term "0,1,0"))
                     (builtin "One Step Simplification" (formula "25"))
                     (rule "inEqSimp_contradInEq1" (formula "26") (term "1,0,0,0,0") (ifseqformula "5"))
                     (rule "qeq_literals" (formula "26") (term "0,1,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "26"))
                     (rule "inEqSimp_contradInEq1" (formula "27") (term "1,0") (ifseqformula "4"))
                     (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1,0"))
                     (rule "add_literals" (formula "27") (term "1,1,0,0,1,0"))
                     (rule "times_zero_1" (formula "27") (term "1,0,0,1,0"))
                     (rule "add_literals" (formula "27") (term "0,0,1,0"))
                     (rule "leq_literals" (formula "27") (term "0,1,0"))
                     (builtin "One Step Simplification" (formula "27"))
                     (rule "inEqSimp_contradInEq1" (formula "28") (term "1,0") (ifseqformula "5"))
                     (rule "qeq_literals" (formula "28") (term "0,1,0"))
                     (builtin "One Step Simplification" (formula "28"))
                     (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "4"))
                     (rule "inEqSimp_homoInEq1" (formula "24") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,0"))
                     (rule "add_literals" (formula "24") (term "1,1,0,0,0"))
                     (rule "times_zero_1" (formula "24") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "24") (term "0,0,0"))
                     (rule "leq_literals" (formula "24") (term "0,0"))
                     (builtin "One Step Simplification" (formula "24"))
                     (rule "replace_known_left" (formula "27") (term "1") (ifseqformula "24"))
                     (builtin "One Step Simplification" (formula "27"))
                     (rule "true_left" (formula "27"))
                     (rule "inEqSimp_contradInEq1" (formula "25") (term "0") (ifseqformula "5"))
                     (rule "qeq_literals" (formula "25") (term "0,0"))
                     (builtin "One Step Simplification" (formula "25"))
                     (rule "replace_known_left" (formula "27") (term "1") (ifseqformula "25"))
                     (builtin "One Step Simplification" (formula "27"))
                     (rule "true_left" (formula "27"))
                     (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "25"))
                     (builtin "One Step Simplification" (formula "26"))
                     (rule "true_left" (formula "26"))
                     (rule "inEqSimp_contradInEq1" (formula "26") (term "1,0,0") (ifseqformula "4"))
                     (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "26") (term "1,1,0,0,1,0,0"))
                     (rule "times_zero_1" (formula "26") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "26") (term "0,0,1,0,0"))
                     (rule "leq_literals" (formula "26") (term "0,1,0,0"))
                     (builtin "One Step Simplification" (formula "26"))
                     (rule "inEqSimp_contradInEq1" (formula "26") (term "1,0") (ifseqformula "24"))
                     (rule "qeq_literals" (formula "26") (term "0,1,0"))
                     (builtin "One Step Simplification" (formula "26"))
                     (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "25"))
                     (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                     (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "26") (term "0,0,1"))
                     (rule "leq_literals" (formula "26") (term "0,1"))
                     (builtin "One Step Simplification" (formula "26"))
                     (rule "notLeft" (formula "26"))
                     (rule "inEqSimp_exactShadow3" (formula "25") (ifseqformula "2"))
                     (rule "polySimp_rightDist" (formula "25") (term "0,0"))
                     (rule "mul_literals" (formula "25") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "25") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "25"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "0"))
                     (rule "polySimp_elimOne" (formula "25") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "24") (ifseqformula "25"))
                     (rule "times_zero_1" (formula "24") (term "0,0"))
                     (rule "add_zero_left" (formula "24") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "24"))
                     (rule "mul_literals" (formula "24") (term "1"))
                     (rule "allLeft" (formula "3") (inst "t=iv_6"))
                     (rule "replace_known_right" (formula "3") (term "1") (ifseqformula "29"))
                     (builtin "One Step Simplification" (formula "3"))
                     (rule "inEqSimp_commuteGeq" (formula "3") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "3") (term "0") (ifseqformula "25"))
                     (rule "qeq_literals" (formula "3") (term "0,0"))
                     (builtin "One Step Simplification" (formula "3"))
                     (rule "inEqSimp_contradInEq0" (formula "27") (ifseqformula "3"))
                     (rule "andLeft" (formula "27"))
                     (rule "inEqSimp_homoInEq1" (formula "27"))
                     (rule "polySimp_pullOutFactor1b" (formula "27") (term "0"))
                     (rule "add_literals" (formula "27") (term "1,1,0"))
                     (rule "times_zero_1" (formula "27") (term "1,0"))
                     (rule "add_literals" (formula "27") (term "0"))
                     (rule "leq_literals" (formula "27"))
                     (rule "closeFalse" (formula "27"))
                  )
                  (branch "CUT: cipher.length <= i_2 FALSE"
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "inEqSimp_leqRight" (formula "25"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                     (rule "mul_literals" (formula "1") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                     (rule "commute_and_2" (formula "25") (term "0,0,0,0,0,0,0,0"))
                     (rule "commute_and_2" (formula "25") (term "0,0,0,0,0,0,0"))
                     (rule "commute_and_2" (formula "25") (term "0,0,0,0,0,0"))
                     (rule "commute_and_2" (formula "25") (term "0,0,0,0,0"))
                     (rule "commute_and_2" (formula "25") (term "0,0,0,0"))
                     (rule "commute_and_2" (formula "25") (term "0,0,0"))
                     (rule "commute_and_2" (formula "25") (term "0,0"))
                     (rule "commute_and_2" (formula "25") (term "0,0,0,0,0,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "25"))
                     (rule "commute_and_2" (formula "25") (term "0,0,0,0,0,0,0,0"))
                     (rule "allLeft" (formula "25") (inst "t=i_2"))
                     (rule "exLeft" (formula "25") (inst "sk=iv_5"))
                     (rule "andLeft" (formula "25"))
                     (rule "andLeft" (formula "25"))
                     (rule "andLeft" (formula "25"))
                     (rule "andLeft" (formula "25"))
                     (rule "andLeft" (formula "25"))
                     (rule "andLeft" (formula "25"))
                     (rule "andLeft" (formula "25"))
                     (rule "andLeft" (formula "25"))
                     (rule "eqSymm" (formula "30") (term "0,0,0,0,0,0,0"))
                     (rule "replace_known_left" (formula "25") (term "0,1,0") (ifseqformula "9"))
                     (builtin "One Step Simplification" (formula "25"))
                     (rule "replace_known_left" (formula "26") (term "0,1,0") (ifseqformula "9"))
                     (builtin "One Step Simplification" (formula "26"))
                     (rule "replace_known_left" (formula "31") (term "0,1,0") (ifseqformula "9"))
                     (builtin "One Step Simplification" (formula "31"))
                     (rule "replace_known_left" (formula "28") (term "0,1,0,0") (ifseqformula "9"))
                     (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "25")))
                     (rule "true_left" (formula "28"))
                     (rule "replace_known_left" (formula "28") (term "0,1,0,0") (ifseqformula "9"))
                     (builtin "One Step Simplification" (formula "28"))
                     (rule "replace_known_left" (formula "27") (term "0,1,0,0") (ifseqformula "9"))
                     (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "25")))
                     (rule "true_left" (formula "27"))
                     (rule "replace_known_left" (formula "30") (term "0,1,0") (ifseqformula "9"))
                     (builtin "One Step Simplification" (formula "30"))
                     (rule "replace_known_left" (formula "31") (term "0,1,0,0,0") (ifseqformula "9"))
                     (builtin "One Step Simplification" (formula "31"))
                     (rule "replace_known_left" (formula "28") (term "0,1,0,0,0") (ifseqformula "9"))
                     (builtin "One Step Simplification" (formula "28"))
                     (rule "narrowSelectArrayType" (formula "30") (term "0,0,0,0,0") (ifseqformula "11") (ifseqformula "35"))
                     (rule "eqSymm" (formula "30") (term "0,0,0,0"))
                     (rule "narrowSelectArrayType" (formula "29") (term "0,0,0,0,0") (ifseqformula "11") (ifseqformula "35"))
                     (rule "eqSymm" (formula "29") (term "0,0,0,0"))
                     (rule "narrowSelectArrayType" (formula "31") (term "0,0,0,0,0,0,0") (ifseqformula "11") (ifseqformula "35"))
                     (rule "inEqSimp_commuteGeq" (formula "25") (term "1,0"))
                     (rule "inEqSimp_commuteGeq" (formula "26") (term "1,0"))
                     (rule "inEqSimp_commuteGeq" (formula "29") (term "1,0"))
                     (rule "inEqSimp_commuteGeq" (formula "27") (term "1,0,0"))
                     (rule "inEqSimp_commuteGeq" (formula "30") (term "1,0"))
                     (rule "inEqSimp_commuteGeq" (formula "31") (term "1,0,0,0"))
                     (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                     (rule "inEqSimp_commuteGeq" (formula "31") (term "1,0"))
                     (rule "inEqSimp_commuteGeq" (formula "28") (term "1,0"))
                     (rule "inEqSimp_commuteGeq" (formula "28") (term "1,0,0,0"))
                     (rule "inEqSimp_homoInEq0" (formula "26") (term "1"))
                     (rule "polySimp_addComm1" (formula "26") (term "0,1"))
                     (rule "inEqSimp_homoInEq0" (formula "27") (term "1"))
                     (rule "polySimp_addComm1" (formula "27") (term "0,1"))
                     (rule "inEqSimp_homoInEq0" (formula "27") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "27") (term "0,1,0"))
                     (rule "inEqSimp_homoInEq0" (formula "30") (term "1"))
                     (rule "polySimp_addComm1" (formula "30") (term "0,1"))
                     (rule "inEqSimp_homoInEq0" (formula "28") (term "1"))
                     (rule "polySimp_addComm1" (formula "28") (term "0,1"))
                     (rule "applyEq" (formula "28") (term "1,0,1") (ifseqformula "9"))
                     (rule "applyEq" (formula "27") (term "1,0,1") (ifseqformula "9"))
                     (builtin "One Step Simplification" (formula "27"))
                     (rule "applyEq" (formula "26") (term "1,1,0,1") (ifseqformula "9"))
                     (rule "applyEq" (formula "26") (term "0,0,1,0,1") (ifseqformula "9"))
                     (rule "replace_known_left" (formula "26") (term "0,1,0,1") (ifseqformula "7"))
                     (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "27")))
                     (rule "true_left" (formula "26"))
                     (rule "applyEq" (formula "30") (term "0,1") (ifseqformula "9"))
                     (builtin "One Step Simplification" (formula "30"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1"))
                     (rule "polySimp_mulComm0" (formula "29") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "29") (term "1,1"))
                     (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1"))
                     (rule "mul_literals" (formula "29") (term "0,1,1"))
                     (rule "polySimp_elimOne" (formula "29") (term "1,1,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "27") (term "1,1"))
                     (rule "mul_literals" (formula "27") (term "0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1"))
                     (rule "polySimp_elimOne" (formula "27") (term "1,1,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "26") (term "1,1"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1"))
                     (rule "mul_literals" (formula "26") (term "0,1,1"))
                     (rule "polySimp_elimOne" (formula "26") (term "1,1,1"))
                     (rule "inEqSimp_contradInEq1" (formula "25") (term "1,0") (ifseqformula "5"))
                     (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1,0"))
                     (rule "add_literals" (formula "25") (term "1,1,0,0,1,0"))
                     (rule "times_zero_1" (formula "25") (term "1,0,0,1,0"))
                     (rule "add_literals" (formula "25") (term "0,0,1,0"))
                     (rule "leq_literals" (formula "25") (term "0,1,0"))
                     (builtin "One Step Simplification" (formula "25"))
                     (rule "inEqSimp_contradInEq1" (formula "29") (term "1,0") (ifseqformula "5"))
                     (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1,0"))
                     (rule "add_literals" (formula "29") (term "1,1,0,0,1,0"))
                     (rule "times_zero_1" (formula "29") (term "1,0,0,1,0"))
                     (rule "add_literals" (formula "29") (term "0,0,1,0"))
                     (rule "leq_literals" (formula "29") (term "0,1,0"))
                     (builtin "One Step Simplification" (formula "29"))
                     (rule "inEqSimp_contradInEq1" (formula "28") (term "1,0,0") (ifseqformula "6"))
                     (rule "qeq_literals" (formula "28") (term "0,1,0,0"))
                     (builtin "One Step Simplification" (formula "28"))
                     (rule "inEqSimp_contradInEq1" (formula "27") (term "1,0,0,0") (ifseqformula "5"))
                     (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1,0,0,0"))
                     (rule "add_literals" (formula "27") (term "1,1,0,0,1,0,0,0"))
                     (rule "times_zero_1" (formula "27") (term "1,0,0,1,0,0,0"))
                     (rule "add_zero_right" (formula "27") (term "0,0,1,0,0,0"))
                     (rule "leq_literals" (formula "27") (term "0,1,0,0,0"))
                     (builtin "One Step Simplification" (formula "27"))
                     (rule "inEqSimp_contradInEq1" (formula "26") (term "1,0") (ifseqformula "5"))
                     (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1,0"))
                     (rule "add_literals" (formula "26") (term "1,1,0,0,1,0"))
                     (rule "times_zero_1" (formula "26") (term "1,0,0,1,0"))
                     (rule "add_literals" (formula "26") (term "0,0,1,0"))
                     (rule "leq_literals" (formula "26") (term "0,1,0"))
                     (builtin "One Step Simplification" (formula "26"))
                     (rule "inEqSimp_contradInEq1" (formula "30") (term "1,0,0,0") (ifseqformula "6"))
                     (rule "qeq_literals" (formula "30") (term "0,1,0,0,0"))
                     (builtin "One Step Simplification" (formula "30"))
                     (rule "inEqSimp_contradInEq1" (formula "25") (term "0") (ifseqformula "6"))
                     (rule "qeq_literals" (formula "25") (term "0,0"))
                     (builtin "One Step Simplification" (formula "25"))
                     (rule "replace_known_left" (formula "28") (term "1") (ifseqformula "25"))
                     (builtin "One Step Simplification" (formula "28"))
                     (rule "true_left" (formula "28"))
                     (rule "inEqSimp_contradInEq1" (formula "28") (term "1,0") (ifseqformula "6"))
                     (rule "qeq_literals" (formula "28") (term "0,1,0"))
                     (builtin "One Step Simplification" (formula "28"))
                     (rule "inEqSimp_contradInEq1" (formula "29") (term "1,0,0") (ifseqformula "5"))
                     (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "29") (term "1,1,0,0,1,0,0"))
                     (rule "times_zero_1" (formula "29") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "29") (term "0,0,1,0,0"))
                     (rule "leq_literals" (formula "29") (term "0,1,0,0"))
                     (builtin "One Step Simplification" (formula "29"))
                     (rule "inEqSimp_contradInEq1" (formula "27") (term "1,0,0,0") (ifseqformula "6"))
                     (rule "qeq_literals" (formula "27") (term "0,1,0,0,0"))
                     (builtin "One Step Simplification" (formula "27"))
                     (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "6"))
                     (rule "qeq_literals" (formula "26") (term "0,0"))
                     (builtin "One Step Simplification" (formula "26"))
                     (rule "replace_known_left" (formula "28") (term "1") (ifseqformula "26"))
                     (builtin "One Step Simplification" (formula "28"))
                     (rule "true_left" (formula "28"))
                     (rule "replace_known_left" (formula "27") (term "1") (ifseqformula "26"))
                     (builtin "One Step Simplification" (formula "27"))
                     (rule "true_left" (formula "27"))
                     (rule "inEqSimp_contradInEq1" (formula "27") (term "1") (ifseqformula "26"))
                     (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1"))
                     (rule "add_literals" (formula "27") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "27") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "27") (term "0,0,1"))
                     (rule "leq_literals" (formula "27") (term "0,1"))
                     (builtin "One Step Simplification" (formula "27"))
                     (rule "inEqSimp_contradInEq1" (formula "27") (term "1") (ifseqformula "25"))
                     (rule "qeq_literals" (formula "27") (term "0,1"))
                     (builtin "One Step Simplification" (formula "27"))
                     (rule "notLeft" (formula "27"))
                     (rule "allLeft" (formula "4") (inst "t=iv_5"))
                     (rule "replace_known_right" (formula "4") (term "1") (ifseqformula "29"))
                     (builtin "One Step Simplification" (formula "4"))
                     (rule "inEqSimp_commuteGeq" (formula "4") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "4") (term "0") (ifseqformula "26"))
                     (rule "qeq_literals" (formula "4") (term "0,0"))
                     (builtin "One Step Simplification" (formula "4"))
                     (rule "inEqSimp_contradInEq0" (formula "27") (ifseqformula "4"))
                     (rule "andLeft" (formula "27"))
                     (rule "inEqSimp_homoInEq1" (formula "27"))
                     (rule "polySimp_pullOutFactor1b" (formula "27") (term "0"))
                     (rule "add_literals" (formula "27") (term "1,1,0"))
                     (rule "times_zero_1" (formula "27") (term "1,0"))
                     (rule "add_literals" (formula "27") (term "0"))
                     (rule "leq_literals" (formula "27"))
                     (rule "closeFalse" (formula "27"))
                  )
               )
            )
            (branch "self.ciphertext[i_2].length >= 1 FALSE"
               (rule "eqSymm" (formula "5"))
               (rule "inEqSimp_geqRight" (formula "21"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "applyEq" (formula "21") (term "1,1,1,0,1,0,0,0,1,1,0") (ifseqformula "6"))
               (rule "add_zero_right" (formula "21") (term "1,1,0,1,0,0,0,1,1,0"))
               (rule "applyEq" (formula "21") (term "1,1,0,0,0,0,1,1,0") (ifseqformula "6"))
               (rule "applyEq" (formula "5") (term "0") (ifseqformula "6"))
               (rule "qeq_literals" (formula "5"))
               (rule "closeFalse" (formula "5"))
            )
         )
         (branch "cipher.length >= 1 FALSE"
            (builtin "One Step Simplification" (formula "5"))
            (rule "replace_known_right" (formula "21") (term "0,0,1,0,0,1,0") (ifseqformula "22"))
            (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "22")) (ifInst ""  (formula "22")))
            (rule "leq_literals" (formula "21") (term "1,0,0,1,0"))
            (builtin "One Step Simplification" (formula "21"))
            (rule "replace_known_right" (formula "2") (term "0,1,1,0") (ifseqformula "22"))
            (builtin "One Step Simplification" (formula "2"))
            (rule "replace_known_right" (formula "1") (term "0,1,1,0") (ifseqformula "22"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_geqRight" (formula "22"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_antiSymm" (formula "21") (ifseqformula "1"))
            (rule "applyEq" (formula "2") (term "1,1,0,0") (ifseqformula "21"))
            (builtin "One Step Simplification" (formula "2"))
            (rule "applyEq" (formula "22") (term "0") (ifseqformula "21"))
            (rule "qeq_literals" (formula "22"))
            (rule "true_left" (formula "22"))
            (rule "applyEq" (formula "1") (term "0") (ifseqformula "21"))
            (rule "leq_literals" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "applyEq" (formula "21") (term "1,1,1,0,1,0,0,0,1,1,0") (ifseqformula "20"))
            (rule "add_zero_right" (formula "21") (term "1,1,0,1,0,0,0,1,1,0"))
            (rule "applyEq" (formula "21") (term "1,1,0,0,0,0,1,1,0") (ifseqformula "20"))
            (rule "applyEq" (formula "2") (term "1,1,1,0,0,0") (ifseqformula "20"))
            (rule "add_zero_right" (formula "2") (term "1,1,0,0,0"))
            (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_notGeq" (formula "5") (term "0"))
            (rule "mul_literals" (formula "5") (term "1,0,0,0"))
            (rule "add_literals" (formula "5") (term "0,0,0"))
            (rule "add_zero_left" (formula "5") (term "0,0"))
            (rule "inEqSimp_or_tautInEq1" (formula "1") (term "0"))
            (rule "add_zero_right" (formula "1") (term "1,1,0"))
            (rule "qeq_literals" (formula "1") (term "1,0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "commute_or_2" (formula "1") (term "0"))
            (rule "inEqSimp_or_tautInEq1" (formula "1") (term "0,0"))
            (rule "add_zero_right" (formula "1") (term "1,1,0,0"))
            (rule "qeq_literals" (formula "1") (term "1,0,0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "commute_or" (formula "19") (term "0,0,0,0,0,1,1,0"))
            (rule "inEqSimp_or_tautInEq1" (formula "19") (term "0,0,0,0,1,1,0"))
            (rule "add_zero_right" (formula "19") (term "1,1,0,0,0,0,1,1,0"))
            (rule "qeq_literals" (formula "19") (term "1,0,0,0,0,1,1,0"))
            (builtin "One Step Simplification" (formula "19"))
            (rule "commute_and" (formula "19") (term "0,0,0,0,1,1,0"))
            (rule "inEqSimp_and_contradInEq0" (formula "19") (term "0,0,0,0,1,1,0"))
            (rule "qeq_literals" (formula "19") (term "1,0,0,0,0,1,1,0"))
            (builtin "One Step Simplification" (formula "19"))
            (rule "commute_and_2" (formula "19") (term "0,0,0,1,1,0"))
            (rule "commute_and_2" (formula "19") (term "0,0,1,1,0"))
            (rule "commute_and" (formula "19") (term "0,0,0,0,1,1,0"))
            (builtin "One Step Simplification" (formula "19"))
            (rule "allLeft" (formula "14") (inst "t=i_2"))
            (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "1"))
            (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1"))
            (rule "add_literals" (formula "14") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "14") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "14") (term "0,0,1"))
            (rule "leq_literals" (formula "14") (term "0,1"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "2"))
            (rule "qeq_literals" (formula "14") (term "0,1"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "notLeft" (formula "14"))
            (rule "allLeft" (formula "15") (inst "t=i_2"))
            (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "15") (term "1,0") (ifseqformula "2"))
            (rule "qeq_literals" (formula "15") (term "0,1,0"))
            (builtin "One Step Simplification" (formula "15"))
            (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "1"))
            (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
            (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "15") (term "0,0,1"))
            (rule "leq_literals" (formula "15") (term "0,1"))
            (builtin "One Step Simplification" (formula "15"))
            (rule "notLeft" (formula "15"))
            (rule "ex_pull_out3" (formula "19") (term "1,0"))
            (rule "cnf_rightDist" (formula "19") (term "0,1,0"))
            (rule "commute_or" (formula "19") (term "1,0,1,0"))
            (rule "cnf_rightDist" (formula "19") (term "0,0,1,0"))
            (rule "commute_or" (formula "19") (term "1,0,0,1,0"))
            (rule "cnf_rightDist" (formula "19") (term "0,0,0,1,0"))
            (rule "commute_or" (formula "19") (term "1,0,0,0,1,0"))
            (rule "commute_or" (formula "19") (term "0,0,0,0,1,0"))
            (rule "ex_pull_out3" (formula "19") (term "0"))
            (rule "cnf_rightDist" (formula "19") (term "0,0"))
            (rule "commute_or_2" (formula "19") (term "1,0,0"))
            (rule "commute_or" (formula "19") (term "0,1,0,0"))
            (rule "cnf_rightDist" (formula "19") (term "0,0,0"))
            (rule "commute_or_2" (formula "19") (term "1,0,0,0"))
            (rule "commute_or" (formula "19") (term "0,1,0,0,0"))
            (rule "cnf_rightDist" (formula "19") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "19") (term "1,0,0,0,0"))
            (rule "shift_paren_or" (formula "19") (term "0,0,0,0,0"))
            (rule "commute_or" (formula "19") (term "0,1,0,0,0,0"))
            (rule "commute_or_2" (formula "19") (term "0,0,0,0,0,0"))
            (rule "commute_or" (formula "19") (term "0,0,0,0,0,0,0"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "17") (term "0,0") (ifseqformula "5"))
            (rule "arrayLengthNotNegative" (formula "3") (term "0,1"))
            (rule "arrayLengthIsAShort" (formula "4") (term "0,1"))
            (builtin "One Step Simplification" (formula "4"))
            (rule "true_left" (formula "4"))
            (rule "cut_direct" (formula "4") (term "0"))
            (branch "CUT: self.ciphertext[i_2].length <= 0 TRUE"
               (builtin "One Step Simplification" (formula "5"))
               (rule "true_left" (formula "5"))
               (rule "inEqSimp_antiSymm" (formula "3") (ifseqformula "4"))
               (rule "applyEq" (formula "5") (term "0") (ifseqformula "3"))
               (rule "leq_literals" (formula "5"))
               (rule "true_left" (formula "5"))
               (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
               (rule "qeq_literals" (formula "4"))
               (rule "true_left" (formula "4"))
               (rule "commute_and" (formula "20") (term "0,0,0,0"))
               (rule "commute_and_2" (formula "20") (term "0,0,0"))
               (rule "commute_and_2" (formula "20") (term "0,0"))
               (rule "cut_direct" (formula "17") (term "0"))
               (branch "CUT: self.ciphertext[-1] = null TRUE"
                  (builtin "One Step Simplification" (formula "18"))
                  (rule "true_left" (formula "18"))
                  (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "17"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0") (ifseqformula "5"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "23"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0") (ifseqformula "6"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "23"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "arrayLengthIsAShort" (formula "20") (term "0"))
                  (builtin "One Step Simplification" (formula "20"))
                  (rule "true_left" (formula "20"))
                  (rule "arrayLengthNotNegative" (formula "20") (term "0"))
                  (rule "allLeft" (formula "22") (inst "t=i_2"))
                  (rule "exLeft" (formula "22") (inst "sk=iv_4"))
                  (rule "andLeft" (formula "22"))
                  (rule "andLeft" (formula "22"))
                  (rule "andLeft" (formula "22"))
                  (rule "narrowSelectArrayType" (formula "25") (term "0,0,0,0,0") (ifseqformula "7") (ifseqformula "28"))
                  (rule "eqSymm" (formula "25") (term "0,0,0,0"))
                  (rule "inEqSimp_commuteGeq" (formula "25") (term "1,0"))
                  (rule "inEqSimp_commuteGeq" (formula "24") (term "1,0,0"))
                  (rule "inEqSimp_commuteGeq" (formula "22") (term "1,0,0"))
                  (rule "inEqSimp_commuteGeq" (formula "23") (term "1,0,0"))
                  (rule "inEqSimp_homoInEq0" (formula "24") (term "1"))
                  (rule "polySimp_addComm1" (formula "24") (term "0,1"))
                  (rule "inEqSimp_homoInEq0" (formula "23") (term "1"))
                  (rule "polySimp_addComm1" (formula "23") (term "0,1"))
                  (rule "applyEq" (formula "24") (term "0,1,0") (ifseqformula "5"))
                  (rule "qeq_literals" (formula "24") (term "1,0"))
                  (builtin "One Step Simplification" (formula "24"))
                  (rule "applyEq" (formula "23") (term "0,1,0") (ifseqformula "5"))
                  (rule "qeq_literals" (formula "23") (term "1,0"))
                  (builtin "One Step Simplification" (formula "23"))
                  (rule "applyEq" (formula "22") (term "0,1,0") (ifseqformula "5"))
                  (rule "qeq_literals" (formula "22") (term "1,0"))
                  (builtin "One Step Simplification" (formula "22"))
                  (rule "applyEq" (formula "25") (term "0,1") (ifseqformula "5"))
                  (rule "qeq_literals" (formula "25") (term "1"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "applyEq" (formula "23") (term "1,0,1") (ifseqformula "5"))
                  (rule "add_zero_right" (formula "23") (term "0,1"))
                  (rule "applyEq" (formula "24") (term "1,1,0,1") (ifseqformula "5"))
                  (builtin "One Step Simplification" (formula "24"))
                  (rule "add_zero_right" (formula "24") (term "0,1"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "23") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "23") (term "0,1"))
                  (rule "inEqSimp_contradInEq1" (formula "23") (term "1,0") (ifseqformula "3"))
                  (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1,0"))
                  (rule "add_literals" (formula "23") (term "1,1,0,0,1,0"))
                  (rule "times_zero_1" (formula "23") (term "1,0,0,1,0"))
                  (rule "add_zero_right" (formula "23") (term "0,0,1,0"))
                  (rule "leq_literals" (formula "23") (term "0,1,0"))
                  (builtin "One Step Simplification" (formula "23"))
                  (rule "inEqSimp_contradInEq1" (formula "22") (term "1,0") (ifseqformula "3"))
                  (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1,0"))
                  (rule "add_literals" (formula "22") (term "1,1,0,0,1,0"))
                  (rule "times_zero_1" (formula "22") (term "1,0,0,1,0"))
                  (rule "add_zero_right" (formula "22") (term "0,0,1,0"))
                  (rule "leq_literals" (formula "22") (term "0,1,0"))
                  (builtin "One Step Simplification" (formula "22"))
                  (rule "inEqSimp_contradInEq1" (formula "24") (term "1,0") (ifseqformula "4"))
                  (rule "qeq_literals" (formula "24") (term "0,1,0"))
                  (builtin "One Step Simplification" (formula "24"))
                  (rule "inEqSimp_contradInEq1" (formula "23") (term "0") (ifseqformula "4"))
                  (rule "qeq_literals" (formula "23") (term "0,0"))
                  (builtin "One Step Simplification" (formula "23"))
                  (rule "inEqSimp_contradInEq1" (formula "22") (term "0") (ifseqformula "4"))
                  (rule "qeq_literals" (formula "22") (term "0,0"))
                  (builtin "One Step Simplification" (formula "22"))
                  (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "3"))
                  (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
                  (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "24") (term "0,0,1"))
                  (rule "leq_literals" (formula "24") (term "0,1"))
                  (builtin "One Step Simplification" (formula "24"))
                  (rule "notLeft" (formula "24"))
                  (rule "inEqSimp_contradInEq0" (formula "22") (ifseqformula "23"))
                  (rule "qeq_literals" (formula "22") (term "0"))
                  (builtin "One Step Simplification" (formula "22"))
                  (rule "closeFalse" (formula "22"))
               )
               (branch "CUT: self.ciphertext[-1] = null FALSE"
                  (builtin "One Step Simplification" (formula "17"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0") (ifseqformula "5"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "23"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "0") (ifseqformula "6"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "25"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "allLeft" (formula "22") (inst "t=i_2"))
                  (rule "exLeft" (formula "22") (inst "sk=iv_3"))
                  (rule "andLeft" (formula "22"))
                  (rule "andLeft" (formula "22"))
                  (rule "andLeft" (formula "22"))
                  (rule "narrowSelectArrayType" (formula "25") (term "0,0,0,0,0") (ifseqformula "7") (ifseqformula "29"))
                  (rule "eqSymm" (formula "25") (term "0,0,0,0"))
                  (rule "inEqSimp_commuteGeq" (formula "25") (term "1,0"))
                  (rule "inEqSimp_commuteGeq" (formula "24") (term "1,0,0"))
                  (rule "inEqSimp_commuteGeq" (formula "22") (term "1,0,0"))
                  (rule "inEqSimp_commuteGeq" (formula "23") (term "1,0,0"))
                  (rule "inEqSimp_homoInEq0" (formula "24") (term "1"))
                  (rule "polySimp_addComm1" (formula "24") (term "0,1"))
                  (rule "inEqSimp_homoInEq0" (formula "23") (term "1"))
                  (rule "polySimp_addComm1" (formula "23") (term "0,1"))
                  (rule "applyEq" (formula "23") (term "1,0,1") (ifseqformula "5"))
                  (rule "add_zero_right" (formula "23") (term "0,1"))
                  (rule "applyEq" (formula "24") (term "1,1,0,1") (ifseqformula "5"))
                  (builtin "One Step Simplification" (formula "24"))
                  (rule "add_zero_right" (formula "24") (term "0,1"))
                  (rule "applyEq" (formula "22") (term "0,1,0") (ifseqformula "5"))
                  (rule "qeq_literals" (formula "22") (term "1,0"))
                  (builtin "One Step Simplification" (formula "22"))
                  (rule "applyEq" (formula "23") (term "0,1,0") (ifseqformula "5"))
                  (rule "qeq_literals" (formula "23") (term "1,0"))
                  (builtin "One Step Simplification" (formula "23"))
                  (rule "applyEq" (formula "24") (term "0,1") (ifseqformula "5"))
                  (rule "qeq_literals" (formula "24") (term "1"))
                  (builtin "One Step Simplification" (formula "24"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "23") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "23") (term "0,1"))
                  (rule "inEqSimp_contradInEq1" (formula "22") (term "1,0") (ifseqformula "3"))
                  (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1,0"))
                  (rule "add_literals" (formula "22") (term "1,1,0,0,1,0"))
                  (rule "times_zero_1" (formula "22") (term "1,0,0,1,0"))
                  (rule "add_literals" (formula "22") (term "0,0,1,0"))
                  (rule "leq_literals" (formula "22") (term "0,1,0"))
                  (builtin "One Step Simplification" (formula "22"))
                  (rule "inEqSimp_contradInEq1" (formula "23") (term "0,0") (ifseqformula "4"))
                  (rule "qeq_literals" (formula "23") (term "0,0,0"))
                  (builtin "One Step Simplification" (formula "23"))
                  (rule "inEqSimp_contradInEq1" (formula "24") (term "1,0") (ifseqformula "4"))
                  (rule "qeq_literals" (formula "24") (term "0,1,0"))
                  (builtin "One Step Simplification" (formula "24"))
                  (rule "inEqSimp_contradInEq1" (formula "22") (term "0") (ifseqformula "4"))
                  (rule "qeq_literals" (formula "22") (term "0,0"))
                  (builtin "One Step Simplification" (formula "22"))
                  (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "3"))
                  (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
                  (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "24") (term "0,0,1"))
                  (rule "leq_literals" (formula "24") (term "0,1"))
                  (builtin "One Step Simplification" (formula "24"))
                  (rule "notLeft" (formula "24"))
                  (rule "inEqSimp_contradInEq1" (formula "23") (term "0") (ifseqformula "3"))
                  (rule "inEqSimp_homoInEq1" (formula "23") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,0"))
                  (rule "add_literals" (formula "23") (term "1,1,0,0,0"))
                  (rule "times_zero_1" (formula "23") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "23") (term "0,0,0"))
                  (rule "leq_literals" (formula "23") (term "0,0"))
                  (builtin "One Step Simplification" (formula "23"))
                  (rule "inEqSimp_contradInEq1" (formula "23") (ifseqformula "22"))
                  (rule "qeq_literals" (formula "23") (term "0"))
                  (builtin "One Step Simplification" (formula "23"))
                  (rule "closeFalse" (formula "23"))
               )
            )
            (branch "CUT: self.ciphertext[i_2].length <= 0 FALSE"
               (builtin "One Step Simplification" (formula "4"))
               (rule "inEqSimp_leqRight" (formula "22"))
               (rule "times_zero_1" (formula "1") (term "1,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0"))
               (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "5"))
               (rule "add_literals" (formula "1") (term "0"))
               (rule "qeq_literals" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
      )
      (branch "Case 2"
         (rule "andRight" (formula "21"))
         (branch "Case 1"
            (rule "allRight" (formula "21") (inst "sk=i_1_5"))
            (rule "orRight" (formula "21"))
            (rule "notRight" (formula "22"))
            (rule "orRight" (formula "22"))
            (rule "inEqSimp_leqRight" (formula "22"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_geqRight" (formula "23"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "applyEq_or_int2" (formula "19") (term "0,0,1,0"))
            (rule "commute_or" (formula "19") (term "0,0,1,0"))
            (rule "allLeft" (formula "14") (inst "t=i_1_5"))
            (rule "replace_known_left" (formula "14") (term "0,0,0") (ifseqformula "3"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "14") (term "0") (ifseqformula "2"))
            (rule "qeq_literals" (formula "14") (term "0,0"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "14"))
            (rule "andLeft" (formula "1"))
            (rule "inEqSimp_homoInEq1" (formula "1"))
            (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
            (rule "add_literals" (formula "1") (term "1,1,0"))
            (rule "times_zero_1" (formula "1") (term "1,0"))
            (rule "add_zero_right" (formula "1") (term "0"))
            (rule "leq_literals" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "Case 2"
            (rule "allRight" (formula "21") (inst "sk=i_1_4"))
            (rule "orRight" (formula "21"))
            (rule "notRight" (formula "22"))
            (rule "orRight" (formula "22"))
            (rule "inEqSimp_leqRight" (formula "22"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_geqRight" (formula "23"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "applyEq_or_int2" (formula "19") (term "0,0,1,0"))
            (rule "commute_or" (formula "19") (term "0,0,1,0"))
            (rule "allLeft" (formula "15") (inst "t=i_1_4"))
            (rule "replace_known_left" (formula "15") (term "0,0,0") (ifseqformula "3"))
            (builtin "One Step Simplification" (formula "15"))
            (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "1"))
            (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
            (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "15") (term "0,0,1"))
            (rule "leq_literals" (formula "15") (term "0,1"))
            (builtin "One Step Simplification" (formula "15"))
            (rule "inEqSimp_contradInEq1" (formula "15") (ifseqformula "2"))
            (rule "qeq_literals" (formula "15") (term "0"))
            (builtin "One Step Simplification" (formula "15"))
            (rule "closeFalse" (formula "15"))
         )
      )
   )
   (branch "if x false"
      (builtin "One Step Simplification" (formula "22"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "17"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "true_left" (formula "16"))
      (rule "replace_known_right" (formula "15") (term "0,0") (ifseqformula "16"))
      (builtin "One Step Simplification" (formula "15"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "17"))
      (rule "applyEq" (formula "18") (term "1,1,0") (ifseqformula "17"))
      (rule "inEqSimp_contradEq7" (formula "19") (ifseqformula "15"))
      (rule "add_zero_left" (formula "19") (term "0,0"))
      (rule "mul_literals" (formula "19") (term "0,0"))
      (rule "leq_literals" (formula "19") (term "0"))
      (builtin "One Step Simplification" (formula "19"))
      (rule "false_right" (formula "19"))
      (rule "returnUnfold" (formula "23") (term "1") (inst "#v0=x_arr"))
      (rule "variableDeclarationAssign" (formula "23") (term "1"))
      (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_arr"))
      (rule "eval_order_array_access4" (formula "23") (term "1") (inst "#v0=x_arr_arr"))
      (rule "variableDeclarationAssign" (formula "23") (term "1"))
      (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_arr_arr"))
      (rule "assignment_read_attribute_this" (formula "23") (term "1"))
      (builtin "One Step Simplification" (formula "23"))
      (rule "assignment_array2" (formula "23") (term "1"))
      (branch "Normal Execution (x_arr_arr != null)"
         (builtin "One Step Simplification" (formula "24"))
         (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "20")))
         (rule "orRight" (formula "23"))
         (rule "inEqSimp_leqRight" (formula "23"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "inEqSimp_ltRight" (formula "24"))
         (rule "times_zero_1" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "10"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1"))
         (rule "polySimp_rightDist" (formula "1") (term "1"))
         (rule "mul_literals" (formula "1") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1"))
         (rule "ifthenelse_to_or_right" (formula "18") (term "0,0,0"))
         (builtin "One Step Simplification" (formula "18"))
         (rule "nnf_notAnd" (formula "18") (term "0,0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,0,0,0"))
         (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,0,0,0"))
         (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,0,0,0"))
         (rule "add_zero_left" (formula "18") (term "0,0,1,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0,0,0,0"))
         (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "18") (term "0,0,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,0,0,0"))
         (rule "mul_literals" (formula "18") (term "1,0,0,0,0,0,0"))
         (rule "nnf_notAnd" (formula "18") (term "0,1,1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "18") (term "1,0,1,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,1,1,0,0,0"))
         (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,1,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,1,1,0,0,0"))
         (rule "add_literals" (formula "18") (term "0,0,0,1,0,1,1,0,0,0"))
         (rule "add_zero_left" (formula "18") (term "0,0,1,0,1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,1,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "18") (term "1,1,0,1,1,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "18") (term "0,0,1,1,0,0,0"))
         (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,1,1,0,0,0"))
         (rule "add_zero_right" (formula "18") (term "0,0,0,0,1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,1,1,0,0,0"))
         (rule "mul_literals" (formula "18") (term "1,0,0,1,1,0,0,0"))
         (rule "commute_or" (formula "18") (term "0,0"))
         (rule "commute_or_2" (formula "18") (term "0"))
         (rule "commute_or_2" (formula "18") (term "0,1,0"))
         (rule "commute_or" (formula "18") (term "1,1,0"))
         (rule "commute_or" (formula "18") (term "0,0,1,0"))
         (rule "commute_or_2" (formula "18") (term "0,1,1,0"))
         (rule "methodCallReturn" (formula "23") (term "1"))
         (rule "assignment" (formula "23") (term "1"))
         (builtin "One Step Simplification" (formula "23"))
         (rule "commute_or" (formula "18") (term "0,0,1,1,0"))
         (rule "cnf_rightDist" (formula "18") (term "1,1,0"))
         (rule "commute_or_2" (formula "18") (term "0,1,1,0"))
         (rule "inEqSimp_or_tautInEq1" (formula "18") (term "0,0,1,1,0"))
         (rule "add_zero_right" (formula "18") (term "1,1,0,0,1,1,0"))
         (rule "qeq_literals" (formula "18") (term "1,0,0,1,1,0"))
         (builtin "One Step Simplification" (formula "18"))
         (rule "shift_paren_or" (formula "18") (term "1,1,0"))
         (rule "commute_or" (formula "18") (term "0,1,1,0"))
         (rule "cnf_rightDist" (formula "18") (term "0"))
         (rule "distr_forallAnd" (formula "18"))
         (rule "andLeft" (formula "18"))
         (rule "commute_or_2" (formula "18") (term "0"))
         (rule "shift_paren_or" (formula "19") (term "0"))
         (rule "commute_or_2" (formula "19") (term "0,0"))
         (rule "shift_paren_or" (formula "18") (term "0,0"))
         (rule "commute_or_2" (formula "19") (term "0,0,0"))
         (builtin "One Step Simplification" (formula "19"))
         (rule "shift_paren_or" (formula "18") (term "0,0,0"))
         (rule "commute_or" (formula "18") (term "0,0,0,0"))
         (builtin "One Step Simplification" (formula "18"))
         (rule "methodCallEmpty" (formula "24") (term "1"))
         (rule "tryEmpty" (formula "24") (term "1"))
         (rule "emptyModality" (formula "24") (term "1"))
         (builtin "One Step Simplification" (formula "24"))
         (rule "narrowSelectArrayType" (formula "24") (term "1,1,1,0,1,0,1,0,1,0,1") (ifseqformula "1") (ifseqformula "23"))
         (rule "narrowSelectArrayType" (formula "24") (term "1,1,0,1,0,1,1,0,1,0") (ifseqformula "1") (ifseqformula "23"))
         (rule "Class_invariant_axiom_for_verif_functionalities_pkienc_Decryptor_EncryptionLog" (formula "24") (term "1,1") (ifseqformula "3"))
         (rule "nonNull" (formula "24") (term "0,1,1") (inst "i=i_1"))
         (rule "sub_literals" (formula "24") (term "2,1,0,1,1,0,1,1"))
         (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "20")))
         (rule "greater_literals" (formula "24") (term "0,0,1,1"))
         (builtin "One Step Simplification" (formula "24"))
         (rule "narrowSelectArrayType" (formula "24") (term "0,0,1,0,0,1,1") (ifseqformula "1") (ifseqformula "20"))
         (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,0,1,1"))
         (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,0,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,0,1,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,0,1,1"))
         (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,0,1,1"))
         (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,0,1,1"))
         (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,0,1,1"))
         (rule "mul_literals" (formula "24") (term "0,1,1,0,0,0,1,1"))
         (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,0,1,1"))
         (rule "nonNull" (formula "24") (term "1,1,1") (inst "i=i_1"))
         (rule "greater_literals" (formula "24") (term "0,1,1,1,1"))
         (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "21")))
         (rule "sub_literals" (formula "24") (term "2,1,0,1,1,1"))
         (builtin "One Step Simplification" (formula "24"))
         (rule "narrowSelectArrayType" (formula "24") (term "0,0,1,0,1,1,1") (ifseqformula "1") (ifseqformula "21"))
         (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,1,1,1"))
         (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1,1,1"))
         (rule "applyEq" (formula "24") (term "0,1,0,0,1,0,0,1,1,1") (ifseqformula "9"))
         (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,1,1,1"))
         (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1,1,1"))
         (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1,1,1"))
         (rule "mul_literals" (formula "24") (term "0,1,1,0,0,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1,1,1"))
         (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1,1,1"))
         (rule "nnf_imp2or" (formula "24") (term "0,0,1,1"))
         (rule "nnf_imp2or" (formula "24") (term "0,1,1,1"))
         (rule "nnf_notAnd" (formula "24") (term "0,0,0,1,1"))
         (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,0,1,1"))
         (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0,0,1,1"))
         (rule "add_zero_right" (formula "24") (term "0,0,0,0,0,0,1,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,0,1,1"))
         (rule "mul_literals" (formula "24") (term "1,0,0,0,0,1,1"))
         (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,0,1,1"))
         (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,0,1,1"))
         (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,0,1,1"))
         (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,0,1,1"))
         (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,0,1,1"))
         (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,0,1,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,0,1,1"))
         (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0,1,1"))
         (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0,1,1"))
         (rule "nnf_notAnd" (formula "24") (term "0,0,1,1,1"))
         (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,1,1,1"))
         (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,1,1,1"))
         (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,1,1,1"))
         (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,1,1,1"))
         (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,1,1,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,1,1,1"))
         (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,1,1,1"))
         (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,1,1,1"))
         (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0,1,1,1"))
         (rule "add_zero_right" (formula "24") (term "0,0,0,0,0,1,1,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,1,1,1"))
         (rule "mul_literals" (formula "24") (term "1,0,0,0,1,1,1"))
         (rule "ifthenelse_split" (formula "17") (term "1"))
         (branch "cipher.length >= 1 TRUE"
            (rule "replace_known_left" (formula "20") (term "0,1,1,0") (ifseqformula "17"))
            (builtin "One Step Simplification" (formula "20"))
            (rule "replace_known_left" (formula "19") (term "0,1,1,0") (ifseqformula "17"))
            (builtin "One Step Simplification" (formula "19"))
            (rule "replace_known_left" (formula "25") (term "0,1,0,0,1,0,1,0") (ifseqformula "17"))
            (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "17")))
            (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "17"))
            (rule "leq_literals" (formula "14") (term "0"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "commute_or_2" (formula "19") (term "0"))
            (rule "inEqSimp_or_tautInEq1" (formula "19") (term "0,0"))
            (rule "inEqSimp_homoInEq1" (formula "19") (term "1,0,0"))
            (rule "polySimp_pullOutFactor1" (formula "19") (term "0,1,0,0"))
            (rule "add_literals" (formula "19") (term "1,0,1,0,0"))
            (rule "times_zero_1" (formula "19") (term "0,1,0,0"))
            (rule "leq_literals" (formula "19") (term "1,0,0"))
            (builtin "One Step Simplification" (formula "19"))
            (rule "true_left" (formula "19"))
            (rule "ifthenelse_split" (formula "17") (term "0"))
            (branch "self.ciphertext[result_0].length >= 1 TRUE"
               (rule "applyEq" (formula "19") (term "1,1,1,0,0,0,0,0") (ifseqformula "18"))
               (rule "applyEq" (formula "13") (term "0") (ifseqformula "18"))
               (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
               (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "16"))
               (rule "leq_literals" (formula "13") (term "0"))
               (builtin "One Step Simplification" (formula "13"))
               (rule "true_left" (formula "13"))
               (rule "andRight" (formula "22"))
               (branch "Case 1"
                  (rule "impRight" (formula "22"))
                  (rule "allRight" (formula "23") (inst "sk=i_1"))
                  (rule "orRight" (formula "23"))
                  (rule "orRight" (formula "24"))
                  (rule "orRight" (formula "23"))
                  (rule "notRight" (formula "25"))
                  (rule "inEqSimp_geqRight" (formula "25"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_leqRight" (formula "25"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "applyEq" (formula "26") (term "1,1,1,0,0") (ifseqformula "3"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                  (rule "nnf_ex2all" (formula "26"))
                  (rule "nnf_notAnd" (formula "1") (term "0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                  (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                  (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0"))
                  (rule "commute_or" (formula "1") (term "0,0"))
                  (rule "allLeft" (formula "16") (inst "t=result_0"))
                  (rule "replace_known_left" (formula "16") (term "0,0,0") (ifseqformula "5"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "inEqSimp_commuteGeq" (formula "16") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "16") (term "0") (ifseqformula "19"))
                  (rule "qeq_literals" (formula "16") (term "0,0"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "inEqSimp_contradInEq1" (formula "16") (ifseqformula "20"))
                  (rule "andLeft" (formula "16"))
                  (rule "inEqSimp_homoInEq1" (formula "16"))
                  (rule "polySimp_pullOutFactor1b" (formula "16") (term "0"))
                  (rule "add_literals" (formula "16") (term "1,1,0"))
                  (rule "times_zero_1" (formula "16") (term "1,0"))
                  (rule "add_zero_right" (formula "16") (term "0"))
                  (rule "leq_literals" (formula "16"))
                  (rule "closeFalse" (formula "16"))
               )
               (branch "Case 2"
                  (rule "andRight" (formula "22"))
                  (branch "Case 1"
                     (rule "impRight" (formula "22"))
                     (rule "notLeft" (formula "1"))
                     (rule "nnf_ex2all" (formula "23"))
                     (rule "nnf_notAnd" (formula "1") (term "0"))
                     (rule "nnf_notAnd" (formula "1") (term "1,0"))
                     (rule "nnf_notAnd" (formula "1") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                     (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "1") (term "0,1,0"))
                     (rule "nnf_notAll" (formula "1") (term "1,0,1,0"))
                     (rule "nnf_notOr" (formula "1") (term "0,1,0,1,0"))
                     (rule "nnf_notOr" (formula "1") (term "0,0,1,0,1,0"))
                     (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,0,1,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,1,0,0,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,0,1,0"))
                     (rule "inEqSimp_notLeq" (formula "1") (term "0,0,0,1,0,1,0"))
                     (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0,1,0,1,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,0,0,1,0,1,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0,0,0,1,0,1,0"))
                     (rule "ifthenelse_to_or_left" (formula "18") (term "0,0,0"))
                     (rule "eqSymm" (formula "18") (term "1,1,0,0,0"))
                     (rule "nnf_notAnd" (formula "18") (term "0,0,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,0,0,0"))
                     (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "18") (term "0,0,1,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0,0,0,0"))
                     (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "18") (term "0,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "18") (term "1,0,0,0,0,0,0"))
                     (rule "commute_or" (formula "18") (term "0,0"))
                     (rule "commute_or_2" (formula "18") (term "0"))
                     (rule "commute_or_2" (formula "18") (term "0,1,0"))
                     (rule "commute_or" (formula "18") (term "1,1,0"))
                     (rule "commute_or" (formula "18") (term "0,0,1,0"))
                     (rule "cnf_rightDist" (formula "18") (term "1,1,0"))
                     (rule "cnf_rightDist" (formula "18") (term "0"))
                     (rule "distr_forallAnd" (formula "18"))
                     (rule "andLeft" (formula "18"))
                     (rule "commute_or" (formula "19") (term "0"))
                     (rule "shift_paren_or" (formula "18") (term "0"))
                     (rule "commute_or_2" (formula "18") (term "0,0"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "commute_or" (formula "19") (term "1,1,0"))
                     (rule "shift_paren_or" (formula "18") (term "0,0"))
                     (rule "commute_or" (formula "18") (term "0,0,0"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "cnf_rightDist" (formula "19") (term "0"))
                     (rule "distr_forallAnd" (formula "19"))
                     (rule "andLeft" (formula "19"))
                     (rule "commute_or_2" (formula "19") (term "0"))
                     (rule "shift_paren_or" (formula "20") (term "0"))
                     (rule "commute_or_2" (formula "20") (term "0,0"))
                     (rule "inEqSimp_or_tautInEq1" (formula "20") (term "0"))
                     (rule "inEqSimp_homoInEq1" (formula "20") (term "1,0"))
                     (rule "polySimp_pullOutFactor1" (formula "20") (term "0,1,0"))
                     (rule "add_literals" (formula "20") (term "1,0,1,0"))
                     (rule "times_zero_1" (formula "20") (term "0,1,0"))
                     (rule "leq_literals" (formula "20") (term "1,0"))
                     (builtin "One Step Simplification" (formula "20"))
                     (rule "true_left" (formula "20"))
                     (rule "shift_paren_or" (formula "19") (term "0,0"))
                     (rule "commute_or" (formula "19") (term "0,0,0"))
                     (rule "inEqSimp_or_tautInEq1" (formula "19") (term "0,0"))
                     (rule "add_literals" (formula "19") (term "1,1,0,0"))
                     (rule "qeq_literals" (formula "19") (term "1,0,0"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "true_left" (formula "19"))
                     (rule "commute_and_2" (formula "1") (term "0,1,0,1,0"))
                     (rule "ifthenelse_to_or_left2" (formula "1") (term "0,0,1,0"))
                     (rule "eqSymm" (formula "1") (term "0,1,1,0,0,1,0"))
                     (rule "inEqSimp_contradEq7" (formula "1") (term "0,1,1,0,0,1,0") (ifseqformula "16"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,0,1,1,0,0,1,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0,0,1,1,0,0,1,0"))
                     (rule "leq_literals" (formula "1") (term "0,0,1,1,0,0,1,0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,1,0"))
                     (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0,1,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,0,0,1,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0,0,0,1,0"))
                     (rule "applyEq_or_int2" (formula "1") (term "0,0,1,0"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (term "0,0,0,1,0") (ifseqformula "16"))
                     (rule "qeq_literals" (formula "1") (term "0,0,0,0,1,0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "commute_and" (formula "1") (term "0,0,1,0,1,0"))
                     (rule "allLeft" (formula "11") (inst "t=result_0"))
                     (rule "inEqSimp_commuteGeq" (formula "11") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0") (ifseqformula "15"))
                     (rule "qeq_literals" (formula "11") (term "0,1,0"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "inEqSimp_contradInEq1" (formula "11") (term "1") (ifseqformula "16"))
                     (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1"))
                     (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "11") (term "0,0,1"))
                     (rule "leq_literals" (formula "11") (term "0,1"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "notLeft" (formula "11"))
                     (rule "narrowSelectArrayType" (formula "18") (term "0,0,0,0") (ifseqformula "2") (ifseqformula "19"))
                     (rule "commute_or" (formula "18") (term "0,0"))
                     (rule "commute_or_2" (formula "18") (term "0"))
                     (rule "ex_pull_out3" (formula "1") (term "0,1,0"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,1,0"))
                     (rule "commute_or" (formula "1") (term "1,0,0,1,0"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0,1,0"))
                     (rule "commute_or" (formula "1") (term "0,0,0,0,1,0"))
                     (rule "commute_or" (formula "1") (term "1,0,0,0,1,0"))
                     (rule "ex_pull_out2" (formula "1") (term "1,0"))
                     (rule "commute_or" (formula "1") (term "0,1,0"))
                     (rule "cnf_rightDist" (formula "1") (term "0,1,0"))
                     (rule "commute_or_2" (formula "1") (term "1,0,1,0"))
                     (rule "commute_or" (formula "1") (term "0,1,0,1,0"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,1,0"))
                     (rule "commute_or_2" (formula "1") (term "1,0,0,1,0"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0,1,0"))
                     (rule "commute_or" (formula "1") (term "0,1,0,0,1,0"))
                     (rule "ex_pull_out3" (formula "1") (term "0"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0"))
                     (rule "commute_or_2" (formula "1") (term "1,0,0"))
                     (rule "commute_or_2" (formula "1") (term "0,1,0,0"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "1,0,0,0"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "0,1,0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,1,0,0"))
                     (rule "commute_or" (formula "1") (term "0,0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,1,0,0,0"))
                     (rule "ifthenelse_to_or_left2" (formula "1") (term "1,0,0,0,0,0,0,0"))
                     (rule "eqSymm" (formula "1") (term "0,1,0,1,0,0,0,0,0,0,0"))
                     (rule "eqSymm" (formula "1") (term "0,1,1,1,0,0,0,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "nnf_notAnd" (formula "1") (term "0,0,1,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,1,0,0,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,1,0,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,1,0,0,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,1,0,0,0,0,0,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,1,0,0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0,1,0,0,1,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,1,0,0,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1,0,0,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,1,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,1,0,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0,1,0,0,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0,0,0,0,1,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,1,0,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "1") (term "1,0,0,0,1,0,0,0,0,0,0,0"))
                     (rule "nnf_notOr" (formula "1") (term "1,1,1,0,0,0,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0,0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "0,1,0,0,0,0"))
                     (rule "commute_or" (formula "1") (term "0,0,1,0,0,0,0"))
                     (rule "commute_and_2" (formula "1") (term "1,1,1,0,0,0,0"))
                     (rule "cnf_rightDist" (formula "1") (term "1,1,0,0,0,0"))
                     (rule "cnf_rightDist" (formula "1") (term "1,1,1,0,0,0,0"))
                     (rule "commute_or" (formula "1") (term "0,1,1,1,0,0,0,0"))
                     (rule "commute_or" (formula "1") (term "1,1,1,1,0,0,0,0"))
                     (rule "commute_and" (formula "1") (term "1,0,1,1,0,0,0,0"))
                     (rule "cnf_rightDist" (formula "1") (term "0,1,1,0,0,0,0"))
                     (rule "commute_or" (formula "1") (term "0,0,1,1,0,0,0,0"))
                     (rule "cnf_rightDist" (formula "1") (term "1,0,1,1,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "commute_or" (formula "1") (term "1,1,0,1,1,0,0,0,0"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,1,1,0,0,0,0"))
                     (rule "commute_or" (formula "1") (term "1,0,0,1,1,0,0,0,0"))
                     (rule "shift_paren_and" (formula "1") (term "0,1,1,0,0,0,0"))
                     (rule "commute_and_2" (formula "1") (term "0,0,1,1,0,0,0,0"))
                     (rule "shift_paren_and" (formula "1") (term "1,1,0,0,0,0"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0,0"))
                     (rule "commute_or" (formula "1") (term "1,0,0,0,0"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0,0,0,0,0"))
                     (rule "cnf_rightDist" (formula "1") (term "1,0,0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "1,1,0,0,0,0"))
                     (rule "commute_or" (formula "1") (term "0,1,1,0,0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0,0,0,0,0,0"))
                     (rule "cnf_rightDist" (formula "1") (term "0,1,0,0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "1,0,1,0,0,0,0"))
                     (rule "commute_or" (formula "1") (term "0,1,0,1,0,0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0,0,0,0,0,0,0"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,1,0,0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "1,0,0,1,0,0,0,0"))
                     (rule "commute_or" (formula "1") (term "0,1,0,0,1,0,0,0,0"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0,1,0,0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "1,0,0,0,1,0,0,0,0"))
                     (rule "shift_paren_or" (formula "1") (term "0,1,0,0,0,1,0,0,0,0"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0,0,1,0,0,0,0"))
                     (rule "commute_or" (formula "1") (term "1,0,0,0,0,1,0,0,0,0"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0,1,0,0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0,0,0,0,1,0,0,0,0"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,1,0,0,0,1,0,0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0,0,0,0,0,1,0,0,0,0"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0,1,0,0,0,1,0,0,0,0"))
                     (rule "shift_paren_and" (formula "1") (term "0,0,0,0"))
                     (rule "shift_paren_and" (formula "1") (term "0,0,0,0,0"))
                     (rule "shift_paren_and" (formula "1") (term "0,0,0,0,0,0"))
                     (rule "shift_paren_and" (formula "1") (term "0,0,0,0,0,0,0"))
                     (rule "commute_or" (formula "1") (term "0,0,0,0,1,0,0,0,0,0,0,0"))
                     (rule "shift_paren_and" (formula "1") (term "0,0,0,0,0,0,0,0"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "17") (term "0,0") (ifseqformula "2"))
                     (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "20"))
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "commute_and_2" (formula "1") (term "0,0,0"))
                     (rule "commute_and_2" (formula "1") (term "0,0"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0,1,0,0,0,0,0,0,0,0,0"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0") (ifseqformula "2"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "22"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "commute_and_2" (formula "2") (term "0,0,0,0"))
                     (rule "commute_and_2" (formula "2") (term "0,0,0"))
                     (rule "commute_and_2" (formula "2") (term "0,0,0,0,0"))
                     (rule "commute_and_2" (formula "2") (term "0,0,0,0"))
                     (rule "commute_and_2" (formula "2") (term "0,0,0"))
                     (rule "commute_and_2" (formula "2") (term "0,0,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "commute_and_2" (formula "2") (term "0,0,0,0,0"))
                     (rule "commute_and_2" (formula "2") (term "0,0,0,0"))
                     (rule "commute_and_2" (formula "2") (term "0,0,0"))
                     (rule "commute_and_2" (formula "2") (term "0,0"))
                     (rule "commute_and_2" (formula "2") (term "0,0,0,0,0,0,0"))
                     (rule "commute_and_2" (formula "2") (term "0,0,0,0,0,0"))
                     (rule "commute_and_2" (formula "2") (term "0,0,0,0,0"))
                     (rule "commute_and_2" (formula "2") (term "0,0,0,0"))
                     (rule "commute_and_2" (formula "2") (term "0,0,0"))
                     (rule "commute_and" (formula "2") (term "0,0,0,0,0,0,0,0"))
                     (rule "commute_and_2" (formula "2") (term "0,0,0,0,0,0,0"))
                     (rule "commute_and_2" (formula "2") (term "0,0,0,0,0,0"))
                     (rule "commute_and_2" (formula "2") (term "0,0,0,0,0"))
                     (rule "commute_and_2" (formula "2") (term "0,0,0,0"))
                     (rule "commute_and_2" (formula "2") (term "0,0,0"))
                     (rule "commute_and_2" (formula "2") (term "0,0"))
                     (rule "ifthenelse_to_or_left2" (formula "2") (term "1,0,0,0,0,0,1,0,0"))
                     (rule "eqSymm" (formula "2") (term "0,1,1,1,0,0,0,0,0,1,0,0"))
                     (rule "eqSymm" (formula "2") (term "0,1,0,1,0,0,0,0,0,1,0,0"))
                     (rule "nnf_notAnd" (formula "2") (term "0,0,1,0,0,0,0,0,1,0,0"))
                     (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0,1,0,0,0,0,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,1,0,0,0,0,0,1,0,0"))
                     (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0,1,0,0,0,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,1,0,0,0,0,0,1,0,0"))
                     (rule "add_literals" (formula "2") (term "0,0,0,1,0,0,1,0,0,0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "2") (term "0,0,1,0,0,1,0,0,0,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0,1,0,0,0,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0,1,0,0,0,0,0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0,1,0,0,0,0,0,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0,1,0,0,0,0,0,1,0,0"))
                     (rule "times_zero_1" (formula "2") (term "1,0,0,0,0,0,1,0,0,0,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "2") (term "0,0,0,0,0,1,0,0,0,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0,1,0,0,0,0,0,1,0,0"))
                     (rule "mul_literals" (formula "2") (term "1,0,0,0,1,0,0,0,0,0,1,0,0"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0,0,1,0,0"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0,1,0,0"))
                     (rule "commute_or_2" (formula "2") (term "0,0,1,0,0"))
                     (rule "commute_or_2" (formula "2") (term "0,1,0,0"))
                     (rule "commute_or_2" (formula "2") (term "1,0,0"))
                     (rule "commute_or" (formula "2") (term "1,1,1,0,0"))
                     (rule "commute_or_2" (formula "2") (term "0,1,1,0,0"))
                     (rule "commute_or" (formula "2") (term "0,0,1,1,0,0"))
                     (rule "cnf_rightDist" (formula "2") (term "1,1,1,0,0"))
                     (rule "cnf_rightDist" (formula "2") (term "1,0,0"))
                     (rule "commute_or_2" (formula "2") (term "0,1,0,0"))
                     (rule "commute_or" (formula "2") (term "1,1,0,0"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,1,0,0"))
                     (rule "commute_or" (formula "2") (term "1,1,1,1,0,0"))
                     (rule "cnf_rightDist" (formula "2") (term "1,1,0,0"))
                     (rule "commute_or_2" (formula "2") (term "0,1,1,0,0"))
                     (rule "shift_paren_or" (formula "2") (term "1,1,1,0,0"))
                     (rule "commute_or_2" (formula "2") (term "0,1,1,1,0,0"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,1,0,0"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,1,1,0,0"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0,0,1,0,0"))
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0,1,1,0,0"))
                     (rule "inEqSimp_or_tautInEq1" (formula "2") (term "0,0,1,1,0,0"))
                     (rule "add_literals" (formula "2") (term "1,1,0,0,1,1,0,0"))
                     (rule "qeq_literals" (formula "2") (term "1,0,0,1,1,0,0"))
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0,0,1,0,0"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,1,1,0,0"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0,0,0,1,0,0"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,1,1,0,0"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0,0,0,0,1,0,0"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,0,1,1,0,0"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0,1,1,0,0"))
                     (rule "shift_paren_and" (formula "2") (term "0,0"))
                     (rule "commute_or" (formula "2") (term "0,0,0,0,0,0,1,0,0"))
                     (rule "commute_and_2" (formula "2") (term "0,0"))
                     (rule "allLeft" (formula "20") (inst "t=result_0"))
                     (rule "inEqSimp_commuteGeq" (formula "20") (term "1,0"))
                     (rule "inEqSimp_contradInEq1" (formula "20") (term "0,0") (ifseqformula "15"))
                     (rule "qeq_literals" (formula "20") (term "0,0,0"))
                     (builtin "One Step Simplification" (formula "20"))
                     (rule "cut_direct" (formula "20") (term "0"))
                     (branch "CUT: cipher.length <= result_0 TRUE"
                        (builtin "One Step Simplification" (formula "21"))
                        (rule "true_left" (formula "21"))
                        (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "20"))
                        (rule "mul_literals" (formula "17") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                        (rule "mul_literals" (formula "17") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "17"))
                        (rule "leq_literals" (formula "15") (term "0"))
                        (builtin "One Step Simplification" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "allLeft" (formula "2") (inst "t=result_0"))
                        (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "20")) (ifInst ""  (formula "20")) (ifInst ""  (formula "20")) (ifInst ""  (formula "20")) (ifInst ""  (formula "20")) (ifInst ""  (formula "20")) (ifInst ""  (formula "20")) (ifInst ""  (formula "20")) (ifInst ""  (formula "20")))
                        (rule "exLeft" (formula "2") (inst "sk=iv_2"))
                        (rule "andLeft" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "eqSymm" (formula "8") (term "0,0,0,0"))
                        (rule "eqSymm" (formula "7") (term "0,0,0,0"))
                        (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "2"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "2"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "narrowSelectArrayType" (formula "8") (term "0,0,0,0,0,0,0") (ifseqformula "10") (ifseqformula "29"))
                        (rule "narrowSelectArrayType" (formula "7") (term "0,0,0,0,0,0,0") (ifseqformula "10") (ifseqformula "29"))
                        (rule "eqSymm" (formula "7") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_commuteGeq" (formula "8") (term "1,0,0,0"))
                        (rule "inEqSimp_commuteGeq" (formula "8") (term "1"))
                        (rule "inEqSimp_commuteGeq" (formula "8") (term "1,0"))
                        (rule "inEqSimp_commuteGeq" (formula "7") (term "1"))
                        (rule "inEqSimp_commuteGeq" (formula "7") (term "1,0,0,0"))
                        (rule "inEqSimp_commuteGeq" (formula "6") (term "1,0"))
                        (rule "inEqSimp_commuteGeq" (formula "5") (term "1,0"))
                        (rule "inEqSimp_commuteGeq" (formula "4") (term "1,0,0"))
                        (rule "inEqSimp_commuteGeq" (formula "2") (term "1,0"))
                        (rule "inEqSimp_commuteGeq" (formula "3") (term "1,0"))
                        (rule "inEqSimp_homoInEq0" (formula "7") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,1,0"))
                        (rule "inEqSimp_homoInEq0" (formula "6") (term "1"))
                        (rule "polySimp_addComm1" (formula "6") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "4") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0,1,0"))
                        (rule "inEqSimp_homoInEq0" (formula "4") (term "1"))
                        (rule "polySimp_addComm1" (formula "4") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "3") (term "1"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,1"))
                        (rule "applyEq" (formula "3") (term "1,1,0,1") (ifseqformula "26"))
                        (rule "applyEq" (formula "4") (term "1,0,1") (ifseqformula "26"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "applyEq" (formula "7") (term "0,1") (ifseqformula "26"))
                        (rule "applyEq" (formula "3") (term "0,0,1,0,1") (ifseqformula "26"))
                        (rule "replace_known_left" (formula "3") (term "0,1,0,1") (ifseqformula "24"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "4")))
                        (rule "true_left" (formula "3"))
                        (rule "applyEq" (formula "5") (term "1,0,1") (ifseqformula "25"))
                        (rule "applyEq" (formula "7") (term "0,1") (ifseqformula "25"))
                        (builtin "One Step Simplification" (formula "7"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,1,0"))
                        (rule "mul_literals" (formula "6") (term "0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0"))
                        (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,1"))
                        (rule "mul_literals" (formula "3") (term "0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1"))
                        (rule "polySimp_elimOne" (formula "3") (term "1,1,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,1"))
                        (rule "mul_literals" (formula "5") (term "0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1"))
                        (rule "polySimp_elimOne" (formula "5") (term "1,1,1"))
                        (rule "inEqSimp_contradInEq1" (formula "5") (term "1,0,0") (ifseqformula "22"))
                        (rule "qeq_literals" (formula "5") (term "0,1,0,0"))
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "inEqSimp_contradInEq1" (formula "3") (term "1,0") (ifseqformula "21"))
                        (rule "inEqSimp_homoInEq1" (formula "3") (term "0,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,1,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0,1,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0,1,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0,1,0"))
                        (rule "leq_literals" (formula "3") (term "0,1,0"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "inEqSimp_contradInEq1" (formula "7") (term "1,0,0,0") (ifseqformula "22"))
                        (rule "qeq_literals" (formula "7") (term "0,1,0,0,0"))
                        (builtin "One Step Simplification" (formula "7"))
                        (rule "inEqSimp_contradInEq1" (formula "2") (term "1,0") (ifseqformula "21"))
                        (rule "inEqSimp_homoInEq1" (formula "2") (term "0,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,1,0"))
                        (rule "add_literals" (formula "2") (term "1,1,0,0,1,0"))
                        (rule "times_zero_1" (formula "2") (term "1,0,0,1,0"))
                        (rule "add_zero_right" (formula "2") (term "0,0,1,0"))
                        (rule "leq_literals" (formula "2") (term "0,1,0"))
                        (builtin "One Step Simplification" (formula "2"))
                        (rule "inEqSimp_contradInEq1" (formula "4") (term "1,0") (ifseqformula "21"))
                        (rule "inEqSimp_homoInEq1" (formula "4") (term "0,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,1,0"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0,1,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0,1,0"))
                        (rule "add_zero_right" (formula "4") (term "0,0,1,0"))
                        (rule "leq_literals" (formula "4") (term "0,1,0"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "inEqSimp_contradInEq1" (formula "6") (term "1,0,0,0") (ifseqformula "21"))
                        (rule "inEqSimp_homoInEq1" (formula "6") (term "0,1,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "6") (term "1,1,0,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "6") (term "1,0,0,1,0,0,0"))
                        (rule "add_zero_right" (formula "6") (term "0,0,1,0,0,0"))
                        (rule "leq_literals" (formula "6") (term "0,1,0,0,0"))
                        (builtin "One Step Simplification" (formula "6"))
                        (rule "inEqSimp_contradInEq1" (formula "5") (term "1,0") (ifseqformula "21"))
                        (rule "inEqSimp_homoInEq1" (formula "5") (term "0,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,1,0"))
                        (rule "add_literals" (formula "5") (term "1,1,0,0,1,0"))
                        (rule "times_zero_1" (formula "5") (term "1,0,0,1,0"))
                        (rule "add_zero_right" (formula "5") (term "0,0,1,0"))
                        (rule "leq_literals" (formula "5") (term "0,1,0"))
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "inEqSimp_contradInEq1" (formula "3") (term "0") (ifseqformula "22"))
                        (rule "qeq_literals" (formula "3") (term "0,0"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "replace_known_left" (formula "5") (term "1") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "replace_known_left" (formula "5") (term "1,0") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "inEqSimp_contradInEq1" (formula "5") (term "1,0,0") (ifseqformula "19"))
                        (rule "inEqSimp_homoInEq1" (formula "5") (term "0,1,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "5") (term "1,1,0,0,1,0,0"))
                        (rule "times_zero_1" (formula "5") (term "1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "5") (term "0,0,1,0,0"))
                        (rule "leq_literals" (formula "5") (term "0,1,0,0"))
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "inEqSimp_contradInEq1" (formula "4") (term "1,0") (ifseqformula "20"))
                        (rule "qeq_literals" (formula "4") (term "0,1,0"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "inEqSimp_contradInEq1" (formula "2") (term "0") (ifseqformula "20"))
                        (rule "qeq_literals" (formula "2") (term "0,0"))
                        (builtin "One Step Simplification" (formula "2"))
                        (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "2"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "inEqSimp_contradInEq1" (formula "4") (term "1,0") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "4") (term "0,1,0"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "inEqSimp_contradInEq1" (formula "4") (term "1") (ifseqformula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "4") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,1"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "4") (term "0,0,1"))
                        (rule "leq_literals" (formula "4") (term "0,1"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "notLeft" (formula "4"))
                        (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "22"))
                        (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                        (rule "mul_literals" (formula "3") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                        (rule "allLeft" (formula "24") (inst "t=iv_2"))
                        (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "26"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
                        (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                        (rule "add_literals" (formula "24") (term "0,0,1"))
                        (rule "leq_literals" (formula "24") (term "0,1"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "inEqSimp_contradInEq1" (formula "24") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "24") (term "0"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "closeFalse" (formula "24"))
                     )
                     (branch "CUT: cipher.length <= result_0 FALSE"
                        (builtin "One Step Simplification" (formula "20"))
                        (rule "inEqSimp_leqRight" (formula "22"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1"))
                        (rule "mul_literals" (formula "1") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                        (rule "allLeft" (formula "3") (inst "t=result_0"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "21")) (ifInst ""  (formula "21")) (ifInst ""  (formula "21")) (ifInst ""  (formula "21")) (ifInst ""  (formula "21")) (ifInst ""  (formula "21")) (ifInst ""  (formula "21")) (ifInst ""  (formula "21")) (ifInst ""  (formula "21")))
                        (rule "exLeft" (formula "3") (inst "sk=iv_1"))
                        (rule "andLeft" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "eqSymm" (formula "9") (term "0,0,0,0"))
                        (rule "eqSymm" (formula "8") (term "0,0,0,0"))
                        (rule "replace_known_left" (formula "6") (term "0") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "narrowSelectArrayType" (formula "8") (term "0,0,0,0,0,0,0") (ifseqformula "11") (ifseqformula "30"))
                        (rule "eqSymm" (formula "8") (term "0,0,0,0,0,0"))
                        (rule "narrowSelectArrayType" (formula "9") (term "0,0,0,0,0,0,0") (ifseqformula "11") (ifseqformula "30"))
                        (rule "inEqSimp_commuteGeq" (formula "9") (term "1"))
                        (rule "inEqSimp_commuteGeq" (formula "9") (term "1,0,0,0"))
                        (rule "inEqSimp_commuteGeq" (formula "9") (term "1,0"))
                        (rule "inEqSimp_commuteGeq" (formula "8") (term "1,0,0,0"))
                        (rule "inEqSimp_commuteGeq" (formula "8") (term "1"))
                        (rule "inEqSimp_commuteGeq" (formula "7") (term "1,0"))
                        (rule "inEqSimp_commuteGeq" (formula "6") (term "1,0"))
                        (rule "inEqSimp_commuteGeq" (formula "5") (term "1,0,0"))
                        (rule "inEqSimp_commuteGeq" (formula "3") (term "1,0"))
                        (rule "inEqSimp_commuteGeq" (formula "4") (term "1,0"))
                        (rule "inEqSimp_homoInEq0" (formula "8") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,1,0"))
                        (rule "inEqSimp_homoInEq0" (formula "7") (term "1"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "5") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0,1,0"))
                        (rule "inEqSimp_homoInEq0" (formula "5") (term "1"))
                        (rule "polySimp_addComm1" (formula "5") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "4") (term "1"))
                        (rule "polySimp_addComm1" (formula "4") (term "0,1"))
                        (rule "applyEq" (formula "5") (term "1,0,1") (ifseqformula "27"))
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "applyEq" (formula "4") (term "0,0,1,0,1") (ifseqformula "27"))
                        (rule "replace_known_left" (formula "4") (term "0,1,0,1") (ifseqformula "25"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "applyEq" (formula "7") (term "1,0,1") (ifseqformula "27"))
                        (rule "applyEq" (formula "9") (term "0,1") (ifseqformula "27"))
                        (builtin "One Step Simplification" (formula "9"))
                        (rule "applyEq" (formula "8") (term "0,1") (ifseqformula "27"))
                        (rule "applyEq" (formula "4") (term "1,0,1") (ifseqformula "27"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,1,0"))
                        (rule "mul_literals" (formula "7") (term "0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "4") (term "1,1"))
                        (rule "mul_literals" (formula "4") (term "0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1"))
                        (rule "polySimp_elimOne" (formula "4") (term "1,1,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,1"))
                        (rule "mul_literals" (formula "6") (term "0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1"))
                        (rule "polySimp_elimOne" (formula "6") (term "1,1,1"))
                        (rule "inEqSimp_contradInEq1" (formula "5") (term "1,0,0") (ifseqformula "22"))
                        (rule "qeq_literals" (formula "5") (term "0,1,0,0"))
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "inEqSimp_contradInEq1" (formula "3") (term "0,0") (ifseqformula "22"))
                        (rule "qeq_literals" (formula "3") (term "0,0,0"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "inEqSimp_contradInEq1" (formula "7") (term "1,0,0,0,0") (ifseqformula "22"))
                        (rule "qeq_literals" (formula "7") (term "0,1,0,0,0,0"))
                        (builtin "One Step Simplification" (formula "7"))
                        (rule "inEqSimp_contradInEq1" (formula "6") (term "1,0,0") (ifseqformula "22"))
                        (rule "qeq_literals" (formula "6") (term "0,1,0,0"))
                        (builtin "One Step Simplification" (formula "6"))
                        (rule "inEqSimp_contradInEq1" (formula "8") (term "1,0,0") (ifseqformula "23"))
                        (rule "inEqSimp_homoInEq1" (formula "8") (term "0,1,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0,1,0,0"))
                        (rule "leq_literals" (formula "8") (term "0,1,0,0"))
                        (builtin "One Step Simplification" (formula "8"))
                        (rule "inEqSimp_contradInEq1" (formula "4") (term "1,0") (ifseqformula "23"))
                        (rule "inEqSimp_homoInEq1" (formula "4") (term "0,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,1,0"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0,1,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0,1,0"))
                        (rule "add_zero_right" (formula "4") (term "0,0,1,0"))
                        (rule "leq_literals" (formula "4") (term "0,1,0"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "inEqSimp_contradInEq1" (formula "5") (term "1,0") (ifseqformula "23"))
                        (rule "inEqSimp_homoInEq1" (formula "5") (term "0,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,1,0"))
                        (rule "add_literals" (formula "5") (term "1,1,0,0,1,0"))
                        (rule "times_zero_1" (formula "5") (term "1,0,0,1,0"))
                        (rule "add_zero_right" (formula "5") (term "0,0,1,0"))
                        (rule "leq_literals" (formula "5") (term "0,1,0"))
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "inEqSimp_contradInEq1" (formula "7") (term "1,0,0,0") (ifseqformula "23"))
                        (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0,1,0,0,0"))
                        (rule "add_zero_right" (formula "7") (term "0,0,1,0,0,0"))
                        (rule "leq_literals" (formula "7") (term "0,1,0,0,0"))
                        (builtin "One Step Simplification" (formula "7"))
                        (rule "inEqSimp_contradInEq1" (formula "3") (term "0") (ifseqformula "23"))
                        (rule "inEqSimp_homoInEq1" (formula "3") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0,0"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "replace_known_left" (formula "5") (term "1") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "inEqSimp_contradInEq1" (formula "7") (term "1,0,0") (ifseqformula "21"))
                        (rule "qeq_literals" (formula "7") (term "0,1,0,0"))
                        (builtin "One Step Simplification" (formula "7"))
                        (rule "inEqSimp_contradInEq1" (formula "5") (term "1,0") (ifseqformula "22"))
                        (rule "inEqSimp_homoInEq1" (formula "5") (term "0,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,1,0"))
                        (rule "add_literals" (formula "5") (term "1,1,0,0,1,0"))
                        (rule "times_zero_1" (formula "5") (term "1,0,0,1,0"))
                        (rule "add_zero_right" (formula "5") (term "0,0,1,0"))
                        (rule "leq_literals" (formula "5") (term "0,1,0"))
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "inEqSimp_contradInEq1" (formula "4") (term "0") (ifseqformula "21"))
                        (rule "qeq_literals" (formula "4") (term "0,0"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "replace_known_left" (formula "5") (term "1") (ifseqformula "4"))
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "replace_known_left" (formula "5") (term "1,0") (ifseqformula "4"))
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "inEqSimp_contradInEq1" (formula "5") (term "1") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq1" (formula "5") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,1"))
                        (rule "add_literals" (formula "5") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "5") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "5") (term "0,0,1"))
                        (rule "leq_literals" (formula "5") (term "0,1"))
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "inEqSimp_contradInEq1" (formula "5") (term "1") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "5") (term "0,1"))
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "notLeft" (formula "5"))
                        (rule "allLeft" (formula "24") (inst "t=iv_1"))
                        (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "26"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
                        (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                        (rule "add_literals" (formula "24") (term "0,0,1"))
                        (rule "leq_literals" (formula "24") (term "0,1"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "24"))
                        (rule "qeq_literals" (formula "3") (term "0"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "closeFalse" (formula "3"))
                     )
                  )
                  (branch "Case 2"
                     (rule "andRight" (formula "22"))
                     (branch "Case 1"
                        (rule "allRight" (formula "22") (inst "sk=i_1_3"))
                        (rule "orRight" (formula "22"))
                        (rule "notRight" (formula "23"))
                        (rule "orRight" (formula "23"))
                        (rule "inEqSimp_leqRight" (formula "23"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_geqRight" (formula "24"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "allLeft" (formula "13") (inst "t=i_1_3"))
                        (rule "replace_known_left" (formula "13") (term "0,0,0") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "13"))
                        (rule "inEqSimp_commuteGeq" (formula "13") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "13") (term "1") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "13") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1"))
                        (rule "add_literals" (formula "13") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "13") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "13") (term "0,0,1"))
                        (rule "leq_literals" (formula "13") (term "0,1"))
                        (builtin "One Step Simplification" (formula "13"))
                        (rule "inEqSimp_contradInEq1" (formula "13") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "13") (term "0"))
                        (builtin "One Step Simplification" (formula "13"))
                        (rule "closeFalse" (formula "13"))
                     )
                     (branch "Case 2"
                        (rule "allRight" (formula "22") (inst "sk=i_1_2"))
                        (rule "orRight" (formula "22"))
                        (rule "notRight" (formula "23"))
                        (rule "orRight" (formula "23"))
                        (rule "inEqSimp_leqRight" (formula "23"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_geqRight" (formula "24"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "allLeft" (formula "14") (inst "t=i_1_2"))
                        (rule "replace_known_left" (formula "14") (term "0,0,0") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "14"))
                        (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1"))
                        (rule "add_literals" (formula "14") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "14") (term "0,0,1"))
                        (rule "leq_literals" (formula "14") (term "0,1"))
                        (builtin "One Step Simplification" (formula "14"))
                        (rule "inEqSimp_contradInEq1" (formula "14") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "14") (term "0"))
                        (builtin "One Step Simplification" (formula "14"))
                        (rule "closeFalse" (formula "14"))
                     )
                  )
               )
            )
            (branch "self.ciphertext[result_0].length >= 1 FALSE"
               (rule "eqSymm" (formula "17"))
               (rule "inEqSimp_geqRight" (formula "19"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "applyEq" (formula "19") (term "1,1,0") (ifseqformula "18"))
               (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
               (rule "qeq_literals" (formula "17"))
               (rule "closeFalse" (formula "17"))
            )
         )
         (branch "cipher.length >= 1 FALSE"
            (builtin "One Step Simplification" (formula "17"))
            (rule "replace_known_right" (formula "18") (term "0,1,1,0") (ifseqformula "20"))
            (builtin "One Step Simplification" (formula "18"))
            (rule "replace_known_right" (formula "19") (term "0,1,1,0") (ifseqformula "20"))
            (builtin "One Step Simplification" (formula "19"))
            (rule "replace_known_right" (formula "25") (term "0,1,0,0,1,0,1,0,1") (ifseqformula "20"))
            (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "20")))
            (rule "inEqSimp_geqRight" (formula "20"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_antiSymm" (formula "15") (ifseqformula "1"))
            (rule "applyEq" (formula "20") (term "1,1,0,0") (ifseqformula "15"))
            (builtin "One Step Simplification" (formula "20"))
            (rule "applyEq" (formula "1") (term "0") (ifseqformula "15"))
            (rule "leq_literals" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "applyEq" (formula "20") (term "1,1,1,0,0,0") (ifseqformula "14"))
            (rule "add_zero_right" (formula "20") (term "1,1,0,0,0"))
            (builtin "One Step Simplification" (formula "20"))
            (rule "applyEq" (formula "15") (term "0") (ifseqformula "14"))
            (rule "qeq_literals" (formula "15"))
            (rule "true_left" (formula "15"))
            (rule "applyEq" (formula "24") (term "1,1,1,0,1,1,0,1,0,1,0,1,0,1") (ifseqformula "14"))
            (rule "add_zero_right" (formula "24") (term "1,1,0,1,1,0,1,0,1,0,1,0,1"))
            (rule "applyEq" (formula "24") (term "1,1,1,0,1,0,1,0,1,1,0,1,0") (ifseqformula "14"))
            (rule "add_zero_right" (formula "24") (term "1,1,0,1,0,1,0,1,1,0,1,0"))
            (rule "inEqSimp_notGeq" (formula "17") (term "0"))
            (rule "mul_literals" (formula "17") (term "1,0,0,0"))
            (rule "add_literals" (formula "17") (term "0,0,0"))
            (rule "add_zero_left" (formula "17") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,1,0,1,0,1"))
            (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0,1,0,1,0,1"))
            (rule "add_literals" (formula "24") (term "0,0,0,0,0,1,0,1,0,1"))
            (rule "add_zero_left" (formula "24") (term "0,0,0,0,1,0,1,0,1"))
            (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,1,0,1,0"))
            (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0,1,0,1,0"))
            (rule "add_literals" (formula "24") (term "0,0,0,0,0,1,0,1,0"))
            (rule "add_zero_left" (formula "24") (term "0,0,0,0,1,0,1,0"))
            (rule "inEqSimp_or_tautInEq1" (formula "18") (term "0"))
            (rule "add_zero_right" (formula "18") (term "1,1,0"))
            (rule "qeq_literals" (formula "18") (term "1,0"))
            (builtin "One Step Simplification" (formula "18"))
            (rule "true_left" (formula "18"))
            (rule "nnf_notOr" (formula "23") (term "0,1,0,1,0"))
            (rule "inEqSimp_notLeq" (formula "23") (term "0,0,1,0,1,0"))
            (rule "mul_literals" (formula "23") (term "1,0,0,0,0,1,0,1,0"))
            (rule "add_zero_right" (formula "23") (term "0,0,0,0,1,0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0,0,1,0,1,0"))
            (rule "mul_literals" (formula "23") (term "1,0,0,1,0,1,0"))
            (rule "inEqSimp_and_subsumption6" (formula "23") (term "0,1,0,1,0"))
            (rule "less_literals" (formula "23") (term "0,1,0,1,0,1,0"))
            (builtin "One Step Simplification" (formula "23"))
            (rule "commute_or_2" (formula "18") (term "0"))
            (rule "inEqSimp_or_tautInEq1" (formula "18") (term "0,0"))
            (rule "add_zero_right" (formula "18") (term "1,1,0,0"))
            (rule "qeq_literals" (formula "18") (term "1,0,0"))
            (builtin "One Step Simplification" (formula "18"))
            (rule "true_left" (formula "18"))
            (rule "andRight" (formula "22"))
            (branch "Case 1"
               (rule "impRight" (formula "22"))
               (rule "allRight" (formula "23") (inst "sk=i_0"))
               (rule "orRight" (formula "23"))
               (rule "orRight" (formula "24"))
               (rule "orRight" (formula "23"))
               (rule "replace_known_right" (formula "26") (term "0,1,1,1,0,0") (ifseqformula "25"))
               (builtin "One Step Simplification" (formula "26"))
               (rule "add_zero_right" (formula "26") (term "1,1,0,0"))
               (rule "inEqSimp_geqRight" (formula "25"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_geqRight" (formula "25"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_leqRight" (formula "25"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
               (rule "polySimp_elimOne" (formula "2") (term "0"))
               (rule "nnf_ex2all" (formula "26"))
               (rule "nnf_notAnd" (formula "1") (term "0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "nnf_notAnd" (formula "1") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
               (rule "mul_literals" (formula "1") (term "1,0,0,1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,1,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,1,0,0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "allLeft" (formula "15") (inst "t=result_0"))
               (rule "replace_known_left" (formula "15") (term "0,0,0") (ifseqformula "4"))
               (builtin "One Step Simplification" (formula "15"))
               (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "20"))
               (rule "qeq_literals" (formula "15") (term "0,0"))
               (builtin "One Step Simplification" (formula "15"))
               (rule "inEqSimp_contradInEq0" (formula "21") (ifseqformula "15"))
               (rule "andLeft" (formula "21"))
               (rule "inEqSimp_homoInEq1" (formula "21"))
               (rule "polySimp_pullOutFactor1b" (formula "21") (term "0"))
               (rule "add_literals" (formula "21") (term "1,1,0"))
               (rule "times_zero_1" (formula "21") (term "1,0"))
               (rule "add_zero_right" (formula "21") (term "0"))
               (rule "leq_literals" (formula "21"))
               (rule "closeFalse" (formula "21"))
            )
            (branch "Case 2"
               (rule "andRight" (formula "22"))
               (branch "Case 1"
                  (rule "impRight" (formula "22"))
                  (rule "notLeft" (formula "1"))
                  (rule "nnf_ex2all" (formula "23"))
                  (rule "nnf_notAnd" (formula "1") (term "0"))
                  (rule "nnf_notAnd" (formula "1") (term "1,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                  (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                  (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,1,0"))
                  (rule "inEqSimp_notLeq" (formula "1") (term "0,0,0,1,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0,1,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,0,0,1,0"))
                  (rule "mul_literals" (formula "1") (term "1,0,0,0,1,0"))
                  (rule "inEqSimp_and_subsumption6" (formula "1") (term "0,0,1,0"))
                  (rule "less_literals" (formula "1") (term "0,1,0,0,1,0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAll" (formula "1") (term "1,0,1,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,1,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,1,0,1,0"))
                  (rule "inEqSimp_notLeq" (formula "1") (term "0,0,0,1,0,1,0"))
                  (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0,1,0,1,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,0,0,1,0,1,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0,0,0,1,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0,1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,1,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,0,1,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,1,0,0,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,0,1,0"))
                  (rule "commute_and_2" (formula "1") (term "0,1,0,1,0"))
                  (rule "commute_and" (formula "1") (term "0,0,1,0,1,0"))
                  (rule "ex_pull_out3" (formula "1") (term "0,1,0"))
                  (rule "cnf_rightDist" (formula "1") (term "0,0,1,0"))
                  (rule "commute_or" (formula "1") (term "1,0,0,1,0"))
                  (rule "cnf_rightDist" (formula "1") (term "0,0,0,1,0"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0,1,0"))
                  (rule "commute_or" (formula "1") (term "1,0,0,0,1,0"))
                  (rule "allLeft" (formula "11") (inst "t=result_0"))
                  (rule "inEqSimp_commuteGeq" (formula "11") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0") (ifseqformula "17"))
                  (rule "qeq_literals" (formula "11") (term "0,1,0"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "inEqSimp_contradInEq1" (formula "11") (term "1") (ifseqformula "18"))
                  (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1"))
                  (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "11") (term "0,0,1"))
                  (rule "leq_literals" (formula "11") (term "0,1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "notLeft" (formula "11"))
                  (rule "ex_pull_out2" (formula "1") (term "1,0"))
                  (rule "commute_or" (formula "1") (term "0,1,0"))
                  (rule "cnf_rightDist" (formula "1") (term "0,1,0"))
                  (rule "commute_or_2" (formula "1") (term "1,0,1,0"))
                  (rule "commute_or" (formula "1") (term "0,1,0,1,0"))
                  (rule "cnf_rightDist" (formula "1") (term "0,0,1,0"))
                  (rule "commute_or_2" (formula "1") (term "1,0,0,1,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,1,0"))
                  (rule "commute_or" (formula "1") (term "0,1,0,0,1,0"))
                  (rule "ex_pull_out3" (formula "1") (term "0"))
                  (rule "cnf_rightDist" (formula "1") (term "0,0"))
                  (rule "commute_or_2" (formula "1") (term "1,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,1,0,0"))
                  (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,1,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,1,0,0"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,1,0,0,0"))
                  (rule "cut_direct" (formula "18") (term "0"))
                  (branch "CUT: self.ciphertext[result_0].length <= 0 TRUE"
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "true_left" (formula "19"))
                     (rule "inEqSimp_antiSymm" (formula "14") (ifseqformula "18"))
                     (rule "applyEq" (formula "19") (term "0") (ifseqformula "14"))
                     (rule "leq_literals" (formula "19"))
                     (rule "true_left" (formula "19"))
                     (rule "applyEq" (formula "15") (term "0") (ifseqformula "14"))
                     (rule "qeq_literals" (formula "15"))
                     (rule "true_left" (formula "15"))
                     (rule "commute_and" (formula "1") (term "0,1,0,1,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_and_contradInEq0" (formula "1") (term "0,1,0,1,0,0,0,0,0,0,0"))
                     (rule "qeq_literals" (formula "1") (term "1,0,1,0,1,0,0,0,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0,0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "1") (term "1,0,0,0,0"))
                     (rule "shift_paren_or" (formula "1") (term "0,1,0,0,0,0"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0,0,0"))
                     (rule "commute_or" (formula "1") (term "1,0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,1,0,0,0,0"))
                     (rule "commute_or" (formula "1") (term "0,0,0,1,0,0,0,0"))
                     (rule "commute_and_2" (formula "1") (term "0,0,0"))
                     (rule "commute_and_2" (formula "1") (term "0,0"))
                     (rule "commute_and_2" (formula "1") (term "0,0,0,0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0") (ifseqformula "2"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "20"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0") (ifseqformula "3"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "20"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "allLeft" (formula "3") (inst "t=result_0"))
                     (builtin "One Step Simplification" (formula "3"))
                     (rule "exLeft" (formula "3") (inst "sk=iv_0"))
                     (rule "andLeft" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "narrowSelectArrayType" (formula "6") (term "0,0,0,0,0") (ifseqformula "8") (ifseqformula "24"))
                     (rule "eqSymm" (formula "6") (term "0,0,0,0"))
                     (rule "inEqSimp_commuteGeq" (formula "6") (term "1,0"))
                     (rule "inEqSimp_commuteGeq" (formula "5") (term "1,0,0"))
                     (rule "inEqSimp_commuteGeq" (formula "4") (term "1,0,0"))
                     (rule "inEqSimp_commuteGeq" (formula "3") (term "1,0,0"))
                     (rule "inEqSimp_homoInEq0" (formula "5") (term "1"))
                     (rule "polySimp_addComm1" (formula "5") (term "0,1"))
                     (rule "inEqSimp_homoInEq0" (formula "4") (term "1"))
                     (rule "polySimp_addComm1" (formula "4") (term "0,1"))
                     (rule "applyEq" (formula "4") (term "1,0,1") (ifseqformula "20"))
                     (rule "add_zero_right" (formula "4") (term "0,1"))
                     (rule "applyEq" (formula "5") (term "0,0,1,0,1") (ifseqformula "20"))
                     (rule "qeq_literals" (formula "5") (term "0,1,0,1"))
                     (builtin "One Step Simplification" (formula "5"))
                     (rule "add_zero_right" (formula "5") (term "0,1"))
                     (rule "applyEq" (formula "4") (term "0,1,0") (ifseqformula "19"))
                     (rule "qeq_literals" (formula "4") (term "1,0"))
                     (builtin "One Step Simplification" (formula "4"))
                     (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "19"))
                     (rule "qeq_literals" (formula "3") (term "1,0"))
                     (builtin "One Step Simplification" (formula "3"))
                     (rule "applyEq" (formula "5") (term "0,1") (ifseqformula "19"))
                     (rule "qeq_literals" (formula "5") (term "1"))
                     (builtin "One Step Simplification" (formula "5"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "4") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "4") (term "0,1"))
                     (rule "inEqSimp_contradInEq1" (formula "4") (term "0,0") (ifseqformula "21"))
                     (rule "qeq_literals" (formula "4") (term "0,0,0"))
                     (builtin "One Step Simplification" (formula "4"))
                     (rule "inEqSimp_contradInEq1" (formula "3") (term "1,0") (ifseqformula "22"))
                     (rule "inEqSimp_homoInEq1" (formula "3") (term "0,1,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,1,0"))
                     (rule "add_literals" (formula "3") (term "1,1,0,0,1,0"))
                     (rule "times_zero_1" (formula "3") (term "1,0,0,1,0"))
                     (rule "add_zero_right" (formula "3") (term "0,0,1,0"))
                     (rule "leq_literals" (formula "3") (term "0,1,0"))
                     (builtin "One Step Simplification" (formula "3"))
                     (rule "inEqSimp_contradInEq1" (formula "5") (term "1") (ifseqformula "22"))
                     (rule "inEqSimp_homoInEq1" (formula "5") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,1"))
                     (rule "add_literals" (formula "5") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "5") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "5") (term "0,0,1"))
                     (rule "leq_literals" (formula "5") (term "0,1"))
                     (builtin "One Step Simplification" (formula "5"))
                     (rule "inEqSimp_contradInEq1" (formula "4") (term "0") (ifseqformula "22"))
                     (rule "inEqSimp_homoInEq1" (formula "4") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,0"))
                     (rule "add_literals" (formula "4") (term "1,1,0,0,0"))
                     (rule "times_zero_1" (formula "4") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "4") (term "0,0,0"))
                     (rule "leq_literals" (formula "4") (term "0,0"))
                     (builtin "One Step Simplification" (formula "4"))
                     (rule "inEqSimp_contradInEq1" (formula "3") (term "0") (ifseqformula "21"))
                     (rule "qeq_literals" (formula "3") (term "0,0"))
                     (builtin "One Step Simplification" (formula "3"))
                     (rule "inEqSimp_contradInEq1" (formula "5") (term "1") (ifseqformula "21"))
                     (rule "qeq_literals" (formula "5") (term "0,1"))
                     (builtin "One Step Simplification" (formula "5"))
                     (rule "notLeft" (formula "5"))
                     (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "4"))
                     (rule "qeq_literals" (formula "3") (term "0"))
                     (builtin "One Step Simplification" (formula "3"))
                     (rule "closeFalse" (formula "3"))
                  )
                  (branch "CUT: self.ciphertext[result_0].length <= 0 FALSE"
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_leqRight" (formula "19"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "19"))
                     (rule "add_literals" (formula "1") (term "0"))
                     (rule "qeq_literals" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
               )
               (branch "Case 2"
                  (rule "andRight" (formula "22"))
                  (branch "Case 1"
                     (rule "allRight" (formula "22") (inst "sk=i_1_1"))
                     (rule "orRight" (formula "22"))
                     (rule "notRight" (formula "23"))
                     (rule "orRight" (formula "23"))
                     (rule "inEqSimp_leqRight" (formula "23"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_geqRight" (formula "24"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "allLeft" (formula "13") (inst "t=i_1_1"))
                     (rule "replace_known_left" (formula "13") (term "0,0,0") (ifseqformula "3"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "inEqSimp_commuteGeq" (formula "13") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "13") (term "1") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "13") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1"))
                     (rule "add_literals" (formula "13") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "13") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "13") (term "0,0,1"))
                     (rule "leq_literals" (formula "13") (term "0,1"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "inEqSimp_contradInEq1" (formula "13") (ifseqformula "2"))
                     (rule "qeq_literals" (formula "13") (term "0"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "closeFalse" (formula "13"))
                  )
                  (branch "Case 2"
                     (rule "allRight" (formula "22") (inst "sk=i_1_0"))
                     (rule "orRight" (formula "22"))
                     (rule "notRight" (formula "23"))
                     (rule "orRight" (formula "23"))
                     (rule "inEqSimp_leqRight" (formula "23"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_geqRight" (formula "24"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "allLeft" (formula "14") (inst "t=i_1_0"))
                     (rule "replace_known_left" (formula "14") (term "0,0,0") (ifseqformula "3"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "14") (term "0") (ifseqformula "2"))
                     (rule "qeq_literals" (formula "14") (term "0,0"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "inEqSimp_contradInEq1" (formula "14") (ifseqformula "1"))
                     (rule "andLeft" (formula "14"))
                     (rule "inEqSimp_homoInEq1" (formula "14"))
                     (rule "polySimp_pullOutFactor1b" (formula "14") (term "0"))
                     (rule "add_literals" (formula "14") (term "1,1,0"))
                     (rule "times_zero_1" (formula "14") (term "1,0"))
                     (rule "add_zero_right" (formula "14") (term "0"))
                     (rule "leq_literals" (formula "14"))
                     (rule "closeFalse" (formula "14"))
                  )
               )
            )
         )
      )
      (branch "Null Reference (x_arr_arr = null)"
         (builtin "One Step Simplification" (formula "24"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")))
         (rule "closeFalse" (formula "1"))
      )
      (branch "Index Out of Bounds (x_arr_arr != null, but i Out of Bounds!)"
         (builtin "One Step Simplification" (formula "24"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")))
         (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "1") (term "0,0,1"))
         (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "10"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
         (rule "mul_literals" (formula "1") (term "1,1"))
         (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "16"))
         (rule "qeq_literals" (formula "1") (term "0,1"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "17"))
         (rule "andLeft" (formula "1"))
         (rule "inEqSimp_homoInEq1" (formula "1"))
         (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
         (rule "add_literals" (formula "1") (term "1,1,0"))
         (rule "times_zero_1" (formula "1") (term "1,0"))
         (rule "add_zero_right" (formula "1") (term "0"))
         (rule "leq_literals" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
   )
)
(branch "Exceptional Post (indexOf)"
   (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "7")))
   (builtin "One Step Simplification" (formula "11"))
   (rule "translateJavaUnaryMinusInt" (formula "8") (term "1,0,0,0,0,1"))
   (rule "translateJavaUnaryMinusInt" (formula "8") (term "1,0,1,0,1"))
   (rule "neg_literal" (formula "8") (term "1,0,0,0,0,1"))
   (rule "neg_literal" (formula "8") (term "1,0,1,0,1"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "10"))
   (rule "notLeft" (formula "8"))
   (rule "close" (formula "11") (ifseqformula "10"))
)
(branch "Pre (indexOf)"
   (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "6")) (ifInst ""  (formula "7")) (ifInst ""  (formula "9")) (ifInst ""  (formula "1")) (ifInst ""  (formula "9")))
   (rule "eqSymm" (formula "6"))
   (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "9"))
   (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "10")))
   (rule "closeFalse" (formula "4"))
)
)

}
