\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Apr 07 13:21:52 CEST 2016
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=8000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Thu Apr 07 13:21:52 CEST 2016
name=verif.selectvoting.system.core.ConservativeExtension[verif.selectvoting.system.core.ConservativeExtension\\:\\:sort([[B,int,int)].JML normal_behavior operation contract.0
contract=verif.selectvoting.system.core.ConservativeExtension[verif.selectvoting.system.core.ConservativeExtension\\:\\:sort([[B,int,int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mihai" ) (keyVersion "6bc7ade97061383f11985e24decf735b7f2f0af2"))

(autoModeTime "5755")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1") (newnames "byteArrays,fromIndex,toIndex,exc,heapAtPre,o,f"))
(rule "translateJavaSubInt" (formula "1") (term "1,1,0,0,0,1,0,0,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "0,2,2,0,1,0,0,1,0,0,0,1,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "7"))
(rule "eqSymm" (formula "12") (term "1,0,0,1,0,1"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "11"))
(builtin "One Step Simplification" (formula "2"))
(rule "polySimp_elimSub" (formula "12") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "12") (term "1,1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_addComm0" (formula "12") (term "0,2,2,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_addComm0" (formula "12") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0,1,0,0,0,1"))
(rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "6"))
(rule "inEqSimp_commuteLeq" (formula "5"))
(rule "inEqSimp_commuteLeq" (formula "9"))
(rule "inEqSimp_commuteLeq" (formula "7"))
(rule "inEqSimp_commuteLeq" (formula "8"))
(rule "assignment" (formula "12") (term "1"))
(builtin "One Step Simplification" (formula "12"))
(rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "4") (term "1,1,0,0"))
(rule "mul_literals" (formula "4") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,1,1,0,0,0,1"))
(rule "mul_literals" (formula "12") (term "0,1,1,0,0,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "12") (term "0,1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,0,1,0,0,0,1"))
(rule "nonNull" (formula "10") (inst "i=i"))
(rule "greater_literals" (formula "10") (term "0,1"))
(builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "11")))
(rule "sub_literals" (formula "10") (term "2,1,0"))
(builtin "One Step Simplification" (formula "10"))
(rule "narrowSelectArrayType" (formula "10") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "11"))
(rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
(rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
(rule "array2seqDef" (formula "11") (term "1,0,0,0,0,1") (inst "u=u"))
(rule "array2seqDef" (formula "11") (term "0,0,0,0,0,1") (inst "u=u"))
(rule "nnf_imp2or" (formula "4") (term "0"))
(rule "nnf_notAnd" (formula "4") (term "0,0"))
(rule "inEqSimp_notGeq" (formula "4") (term "0,0,0"))
(rule "times_zero_1" (formula "4") (term "1,0,0,0,0,0"))
(rule "add_literals" (formula "4") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
(rule "mul_literals" (formula "4") (term "1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "4") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0"))
(rule "add_literals" (formula "4") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "4") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "4") (term "1,1,0,0"))
(rule "nnf_imp2or" (formula "11") (term "0,1,1,0,0,0,1"))
(rule "nnf_imp2or" (formula "11") (term "0,0,1,0,0,0,1"))
(rule "nnf_notAnd" (formula "11") (term "0,0,1,1,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,1,1,0,0,0,1"))
(rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,1,1,0,0,0,1"))
(rule "add_literals" (formula "11") (term "0,0,0,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,1,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "1,0,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,1,1,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,1,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,1,1,0,0,0,1"))
(rule "add_literals" (formula "11") (term "0,0,0,1,0,0,1,1,0,0,0,1"))
(rule "add_zero_left" (formula "11") (term "0,0,1,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,1,1,0,0,0,1"))
(rule "nnf_notAnd" (formula "11") (term "0,0,0,1,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0,1,0,0,0,1"))
(rule "add_literals" (formula "11") (term "0,0,0,1,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "0,1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,0,1,0,0,0,1"))
(rule "commute_or_2" (formula "4") (term "0"))
(rule "commute_or" (formula "4") (term "0,0"))
(rule "methodBodyExpand" (formula "11") (term "1") (newnames "heapBefore_sort,savedHeapBefore_sort,_byteArraysBefore_sort,_fromIndexBefore_sort,_toIndexBefore_sort"))
(builtin "One Step Simplification" (formula "11"))
(rule "ifUnfold" (formula "11") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "11") (term "1") (newnames "x"))
(rule "inequality_comparison_simple" (formula "11") (term "1"))
(builtin "One Step Simplification" (formula "11"))
(rule "replace_known_right" (formula "11") (term "0,0,1,0") (ifseqformula "10"))
(builtin "One Step Simplification" (formula "11"))
(rule "arrayLengthIsAShort" (formula "6") (term "0"))
(builtin "One Step Simplification" (formula "6"))
(rule "true_left" (formula "6"))
(rule "arrayLengthNotNegative" (formula "6") (term "0"))
(rule "ifSplit" (formula "12"))
(branch "if x true"
   (builtin "One Step Simplification" (formula "13"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "ifUnfold" (formula "12") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_1"))
   (rule "compound_assignment_3_nonsimple" (formula "12") (term "1"))
   (rule "ifElseUnfold" (formula "12") (term "1") (inst "#boolv=x_2"))
   (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_2"))
   (rule "compound_assignment_2" (formula "12") (term "1") (inst "#v=x_3"))
   (rule "variableDeclarationAssign" (formula "12") (term "1"))
   (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_3"))
   (rule "compound_assignment_3_nonsimple" (formula "12") (term "1"))
   (rule "ifElseUnfold" (formula "12") (term "1") (inst "#boolv=x_4"))
   (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_4"))
   (rule "compound_assignment_2" (formula "12") (term "1") (inst "#v=x_5"))
   (rule "variableDeclarationAssign" (formula "12") (term "1"))
   (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_5"))
   (rule "greater_equal_than_comparison_simple" (formula "12") (term "1"))
   (builtin "One Step Simplification" (formula "12"))
   (rule "replace_known_left" (formula "12") (term "0,0,1,0") (ifseqformula "5"))
   (builtin "One Step Simplification" (formula "12"))
   (rule "compound_assignment_1_new" (formula "12") (term "1"))
   (builtin "One Step Simplification" (formula "12"))
   (rule "ifElseSplit" (formula "12"))
   (branch "if x_4 true"
      (builtin "One Step Simplification" (formula "13"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch "if x_4 false"
      (builtin "One Step Simplification" (formula "13"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "compound_less_equal_than_comparison_2" (formula "12") (term "1") (inst "#v1=x_5") (inst "#v0=x_4"))
      (rule "variableDeclarationAssign" (formula "12") (term "1"))
      (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_6"))
      (rule "assignment" (formula "12") (term "1"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "variableDeclarationAssign" (formula "12") (term "1"))
      (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_7"))
      (rule "assignment_read_length" (formula "12") (term "1"))
      (branch "Normal Execution (_byteArrays != null)"
         (builtin "One Step Simplification" (formula "13"))
         (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "11")))
         (rule "false_right" (formula "12"))
         (rule "less_equal_than_comparison_simple" (formula "12") (term "1"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,1,0"))
         (rule "replace_known_left" (formula "12") (term "0,0,1,0") (ifseqformula "9"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "blockEmpty" (formula "12") (term "1"))
         (rule "compound_assignment_1_new" (formula "12") (term "1"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "ifElseSplit" (formula "12"))
         (branch "if x_2 true"
            (builtin "One Step Simplification" (formula "13"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if x_2 false"
            (builtin "One Step Simplification" (formula "13"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "less_than_comparison_simple" (formula "12") (term "1"))
            (builtin "One Step Simplification" (formula "12"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,1,0"))
            (rule "polySimp_addComm1" (formula "12") (term "0,0,0,1,0"))
            (rule "blockEmpty" (formula "12") (term "1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "12") (term "0,0,0,1,0"))
            (rule "ifSplit" (formula "12"))
            (branch "if x_1 true"
               (builtin "One Step Simplification" (formula "13"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "1"))
               (rule "inEqSimp_homoInEq0" (formula "11") (term "0"))
               (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0"))
               (rule "add_literals" (formula "11") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "11") (term "1,0,0"))
               (rule "add_zero_right" (formula "11") (term "0,0"))
               (rule "qeq_literals" (formula "11") (term "0"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "true_left" (formula "11"))
               (rule "for_to_while" (formula "12") (term "1") (inst "#outerLabel=_label1") (inst "#innerLabel=_label0"))
               (rule "variableDeclarationAssign" (formula "12") (term "1"))
               (rule "variableDeclaration" (formula "12") (term "1") (newnames "sorted"))
               (rule "assignment" (formula "12") (term "1"))
               (builtin "One Step Simplification" (formula "12"))
               (builtin "Loop Invariant" (formula "12") (newnames "variant,b,heapBefore_LOOP,sortedBefore_LOOP,sorted_0,heap_After_LOOP,anon_heap_LOOP,o,f"))
               (branch "Invariant Initially Valid"
                  (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "2")) (ifInst ""  (formula "11")))
                  (rule "translateJavaSubInt" (formula "12") (term "1,1,0,0,0,0,0,0,0"))
                  (rule "translateJavaAddInt" (formula "12") (term "0,2,2,0,1,0,0,0,0,0,0"))
                  (rule "polySimp_elimSub" (formula "12") (term "1,1,0,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "12") (term "1,1,1,0,0,0,0,0,0,0"))
                  (rule "polySimp_addComm0" (formula "12") (term "0,2,2,0,1,0,0,0,0,0,0"))
                  (rule "polySimp_addComm0" (formula "12") (term "1,1,0,0,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0,0,0,0,0"))
                  (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "12") (term "0,1,0,0,0,0"))
                  (rule "replace_known_left" (formula "12") (term "0,1,0,0,0,0") (ifseqformula "6"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,0,0,0"))
                  (rule "replace_known_left" (formula "12") (term "1,0,0,0,0") (ifseqformula "8"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "inEqSimp_commuteLeq" (formula "12") (term "1,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "12") (term "0,1,0,0,0"))
                  (rule "replace_known_left" (formula "12") (term "0,1,0,0,0") (ifseqformula "9"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,0,0"))
                  (rule "replace_known_left" (formula "12") (term "1,0,0,0") (ifseqformula "10"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,0"))
                  (rule "inEqSimp_homoInEq0" (formula "12") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1" (formula "12") (term "0,0,1,0"))
                  (rule "add_literals" (formula "12") (term "1,0,0,1,0"))
                  (rule "times_zero_1" (formula "12") (term "0,0,1,0"))
                  (rule "qeq_literals" (formula "12") (term "0,1,0"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,1"))
                  (rule "mul_literals" (formula "12") (term "0,1,1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,0,0"))
                  (rule "inEqSimp_subsumption1" (formula "12") (term "1,0") (ifseqformula "1"))
                  (rule "inEqSimp_homoInEq0" (formula "12") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1,0"))
                  (rule "add_literals" (formula "12") (term "1,1,0,0,1,0"))
                  (rule "times_zero_1" (formula "12") (term "1,0,0,1,0"))
                  (rule "add_zero_right" (formula "12") (term "0,0,1,0"))
                  (rule "qeq_literals" (formula "12") (term "0,1,0"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "nnf_imp2or" (formula "12") (term "0,0"))
                  (rule "nnf_imp2or" (formula "12") (term "0,1"))
                  (rule "nnf_notAnd" (formula "12") (term "0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0"))
                  (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0"))
                  (rule "inEqSimp_or_tautInEq0" (formula "12") (term "0,0,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "1,1,0,0,0"))
                  (rule "add_literals" (formula "12") (term "0,1,1,0,0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0,1,0,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "12") (term "0,0,1,0,0,0"))
                  (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,1,0,0,0"))
                  (rule "add_literals" (formula "12") (term "1,1,0,1,0,0,0"))
                  (rule "times_zero_1" (formula "12") (term "1,0,1,0,0,0"))
                  (rule "add_zero_right" (formula "12") (term "0,1,0,0,0"))
                  (rule "leq_literals" (formula "12") (term "1,0,0,0"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "allRight" (formula "12") (inst "sk=i_6"))
                  (rule "orRight" (formula "12"))
                  (rule "notRight" (formula "13"))
                  (rule "notRight" (formula "13"))
                  (rule "andLeft" (formula "1"))
                  (rule "inEqSimp_homoInEq0" (formula "2"))
                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "mul_literals" (formula "2") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                  (rule "allLeft" (formula "8") (inst "t=i_6"))
                  (rule "replace_known_left" (formula "8") (term "0,0,0") (ifseqformula "3"))
                  (builtin "One Step Simplification" (formula "8"))
                  (rule "inEqSimp_commuteGeq" (formula "8") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "8") (term "1") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq1" (formula "8") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1"))
                  (rule "add_literals" (formula "8") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "8") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "8") (term "0,0,1"))
                  (rule "leq_literals" (formula "8") (term "0,1"))
                  (builtin "One Step Simplification" (formula "8"))
                  (rule "inEqSimp_contradInEq1" (formula "8") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "8") (term "0"))
                  (builtin "One Step Simplification" (formula "8"))
                  (rule "closeFalse" (formula "8"))
               )
               (branch "Body Preserves Invariant"
                  (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "13")))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "translateJavaSubInt" (formula "12") (term "1,1,0,0,0,0,0,0,0,0"))
                  (rule "translateJavaAddInt" (formula "12") (term "0,2,2,0,1,0,0,0,0,0,0,0"))
                  (rule "translateJavaSubInt" (formula "14") (term "0,1,1,1,0,1"))
                  (rule "translateJavaAddInt" (formula "14") (term "0,2,2,0,1,0,0,0,0,0,0,0,0,0,1,1,0,1,1"))
                  (rule "translateJavaSubInt" (formula "14") (term "0,1,1,1,0,1,1"))
                  (rule "translateJavaSubInt" (formula "14") (term "1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1"))
                  (rule "andLeft" (formula "12"))
                  (rule "impRight" (formula "15"))
                  (rule "andLeft" (formula "13"))
                  (rule "andLeft" (formula "13"))
                  (rule "andLeft" (formula "14"))
                  (rule "andLeft" (formula "13"))
                  (rule "andLeft" (formula "13"))
                  (rule "andLeft" (formula "13"))
                  (rule "andLeft" (formula "15"))
                  (rule "andLeft" (formula "14"))
                  (rule "eqSymm" (formula "24") (term "1,0,0,1,0,1,1,0,1"))
                  (rule "polySimp_elimSub" (formula "24") (term "0,1,1,1,0,1"))
                  (rule "polySimp_elimSub" (formula "24") (term "0,1,1,1,0"))
                  (rule "polySimp_elimSub" (formula "24") (term "1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                  (rule "mul_literals" (formula "24") (term "1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                  (rule "polySimp_elimSub" (formula "13") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "13") (term "1,1,1,0,0"))
                  (rule "polySimp_addComm0" (formula "24") (term "0,2,2,0,1,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                  (rule "polySimp_addComm0" (formula "13") (term "0,2,2,0,1,0"))
                  (rule "polySimp_addComm0" (formula "24") (term "0,1,1,1,0"))
                  (rule "polySimp_addComm0" (formula "24") (term "1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                  (rule "polySimp_addComm0" (formula "13") (term "1,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,1,1,0,0,1,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,1,1,0,0,1,1,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                  (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                  (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "24") (term "1,1,0,0,0,0,0,0,1,1,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "24") (term "0,1,0,0,0,0,1,1,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "24") (term "1,1,0,0,0,0,0,0,0,1,1,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "24") (term "0,1,0,0,0,0,0,0,0,1,1,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "24") (term "0,1,0,0,0,0,0,0,1,1,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "24") (term "1,0,0,0,0,0,1,1,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1,1,0,0,1,1,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "20"))
                  (rule "inEqSimp_commuteLeq" (formula "19"))
                  (rule "inEqSimp_commuteLeq" (formula "18"))
                  (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "16"))
                  (rule "inEqSimp_commuteLeq" (formula "16"))
                  (rule "inEqSimp_commuteLeq" (formula "15"))
                  (rule "inEqSimp_commuteLeq" (formula "14"))
                  (rule "variableDeclarationAssign" (formula "1") (term "1"))
                  (rule "variableDeclarationAssign" (formula "20") (term "1"))
                  (rule "variableDeclaration" (formula "1") (term "1") (newnames "b_2"))
                  (rule "variableDeclaration" (formula "20") (term "1") (newnames "exc_1"))
                  (rule "assignment" (formula "20") (term "1"))
                  (builtin "One Step Simplification" (formula "20"))
                  (rule "variableDeclaration" (formula "20") (term "1") (newnames "thrownExc"))
                  (rule "blockThrow" (formula "20") (term "1,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                  (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                  (rule "mul_literals" (formula "20") (term "0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                  (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1,1,0,0,1,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,1,1,0,0,1,1,0,1"))
                  (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,1,1,0,0,1,1,0,1"))
                  (rule "mul_literals" (formula "20") (term "0,1,1,0,0,1,1,0,0,1,1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,1,1,0,0,1,1,0,1"))
                  (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,1,1,0,0,1,1,0,1"))
                  (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq0" (formula "14") (term "0"))
                  (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0"))
                  (rule "add_literals" (formula "14") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "14") (term "1,0,0"))
                  (rule "add_zero_right" (formula "14") (term "0,0"))
                  (rule "qeq_literals" (formula "14") (term "0"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "true_left" (formula "14"))
                  (rule "array2seqDef" (formula "16") (term "1") (inst "u=u"))
                  (rule "narrowSelectArrayType" (formula "16") (term "2,1") (ifseqformula "3") (ifseqformula "18"))
                  (rule "array2seqDef" (formula "16") (term "0") (inst "u=u"))
                  (rule "array2seqDef" (formula "19") (term "0,1,0,0,0,1,1,0,1") (inst "u=u"))
                  (rule "array2seqDef" (formula "19") (term "1,1,0,0,0,1,1,0,1") (inst "u=u"))
                  (rule "elementOfArrayRange" (formula "19") (term "0,0,0,0,1,0,1,1,0,1") (inst "iv=iv"))
                  (rule "inEqSimp_commuteLeq" (formula "19") (term "1,0,0,1,0,0,0,0,1,0,1,1,0,1"))
                  (rule "boxToDiamond" (formula "1") (term "1"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "nnf_imp2or" (formula "16") (term "0"))
                  (rule "nnf_imp2or" (formula "12") (term "0"))
                  (rule "nnf_notAnd" (formula "16") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                  (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                  (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "12") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                  (rule "nnf_imp2or" (formula "19") (term "0,1,1,0,0,1,1,0,1"))
                  (rule "nnf_imp2or" (formula "19") (term "0,0,0,0,0,0,0,0,0,1,1,0,1"))
                  (rule "nnf_notAnd" (formula "19") (term "0,0,1,1,0,0,1,1,0,1"))
                  (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0,1,1,0,0,1,1,0,1"))
                  (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,1,1,0,0,1,1,0,1"))
                  (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,1,1,0,0,1,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,1,1,0,0,1,1,0,1"))
                  (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,1,1,0,0,1,1,0,1"))
                  (rule "add_zero_left" (formula "19") (term "0,0,1,0,0,1,1,0,0,1,1,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0,1,1,0,0,1,1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,1,1,0,0,1,1,0,1"))
                  (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,1,1,0,0,1,1,0,1"))
                  (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0,1,1,0,0,1,1,0,1"))
                  (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0,1,1,0,0,1,1,0,1"))
                  (rule "add_literals" (formula "19") (term "0,0,0,0,0,1,1,0,0,1,1,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0,1,1,0,0,1,1,0,1"))
                  (rule "mul_literals" (formula "19") (term "1,0,0,0,1,1,0,0,1,1,0,1"))
                  (rule "nnf_notAnd" (formula "19") (term "0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                  (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                  (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                  (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                  (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                  (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                  (rule "mul_literals" (formula "19") (term "0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                  (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                  (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                  (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                  (rule "mul_literals" (formula "19") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                  (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                  (rule "commute_or_2" (formula "16") (term "0"))
                  (rule "commute_or" (formula "16") (term "0,0"))
                  (rule "less_than_comparison_simple" (formula "17") (term "1"))
                  (builtin "One Step Simplification" (formula "17"))
                  (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,1,0"))
                  (rule "polySimp_addComm1" (formula "17") (term "0,0,0,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "17") (term "0,0,0,1,0"))
                  (rule "methodCallEmpty" (formula "17") (term "1"))
                  (builtin "One Step Simplification" (formula "17"))
                  (rule "emptyModality" (formula "17") (term "1"))
                  (builtin "One Step Simplification" (formula "17"))
                  (rule "notRight" (formula "17"))
                  (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "1"))
                  (rule "inEqSimp_homoInEq0" (formula "15") (term "0"))
                  (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0"))
                  (rule "add_literals" (formula "15") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "15") (term "1,0,0"))
                  (rule "add_zero_right" (formula "15") (term "0,0"))
                  (rule "qeq_literals" (formula "15") (term "0"))
                  (builtin "One Step Simplification" (formula "15"))
                  (rule "true_left" (formula "15"))
                  (rule "ifUnfold" (formula "18") (term "1") (inst "#boolv=x"))
                  (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_8"))
                  (rule "less_than_comparison_simple" (formula "18") (term "1"))
                  (builtin "One Step Simplification" (formula "18"))
                  (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,1,0"))
                  (rule "polySimp_addComm1" (formula "18") (term "0,0,0,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "18") (term "0,0,0,1,0"))
                  (rule "replace_known_left" (formula "18") (term "0,0,1,0") (ifseqformula "1"))
                  (builtin "One Step Simplification" (formula "18"))
                  (rule "ifSplit" (formula "18"))
                  (branch "if x_8 true"
                     (builtin "One Step Simplification" (formula "1"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "true_left" (formula "1"))
                     (builtin "Use Operation Contract" (formula "18") (newnames "heapBefore_selSort,exc_0,heapAfter_selSort,anon_heap_selSort") (contract "verif.selectvoting.system.core.ConservativeExtension[verif.selectvoting.system.core.ConservativeExtension::selSort([[B,int,int)].JML normal_behavior operation contract.0"))
                     (branch "Post (selSort)"
                        (builtin "One Step Simplification" (formula "18"))
                        (builtin "One Step Simplification" (formula "20"))
                        (rule "translateJavaAddInt" (formula "18") (term "0,2,2,0,1,0,0,0,1,1"))
                        (rule "andLeft" (formula "18"))
                        (rule "andLeft" (formula "19"))
                        (rule "andLeft" (formula "20"))
                        (rule "andLeft" (formula "20"))
                        (rule "andLeft" (formula "21"))
                        (rule "polySimp_addComm0" (formula "20") (term "0,2,2,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                        (rule "blockEmpty" (formula "24") (term "1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                        (rule "array2seqDef" (formula "21") (term "1") (inst "u=u"))
                        (rule "array2seqDef" (formula "21") (term "0") (inst "u=u"))
                        (rule "nnf_imp2or" (formula "20") (term "0"))
                        (rule "nnf_imp2or" (formula "22") (term "0"))
                        (rule "nnf_notAnd" (formula "20") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "22") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
                        (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
                        (rule "add_literals" (formula "22") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                        (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                        (rule "commute_or_2" (formula "22") (term "0"))
                        (rule "commute_or" (formula "22") (term "0,0"))
                        (rule "preincrement" (formula "24") (term "1"))
                        (rule "compound_int_cast_expression" (formula "24") (term "1") (inst "#v=x"))
                        (rule "variableDeclarationAssign" (formula "24") (term "1"))
                        (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_9"))
                        (rule "remove_parentheses_right" (formula "24") (term "1"))
                        (rule "assignmentAdditionInt" (formula "24") (term "1"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "translateJavaAddInt" (formula "24") (term "0,1,0"))
                        (rule "polySimp_addComm0" (formula "24") (term "0,1,0"))
                        (rule "widening_identity_cast_5" (formula "24") (term "1"))
                        (rule "assignment" (formula "24") (term "1"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "tryEmpty" (formula "24") (term "1"))
                        (rule "methodCallEmpty" (formula "24") (term "1"))
                        (rule "emptyModality" (formula "24") (term "1"))
                        (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "7")) (ifInst ""  (formula "9")) (ifInst ""  (formula "10")) (ifInst ""  (formula "11")) (ifInst ""  (formula "23")))
                        (rule "seqPermTrans" (formula "21") (ifseqformula "15") (userinteraction))
                        (rule "eqSymm" (formula "25") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "25") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "25") (term "1,0,1"))
                        (rule "mul_literals" (formula "25") (term "0,1,0,1"))
                        (rule "polySimp_addComm0" (formula "25") (term "0,1"))
                        (rule "polySimp_addAssoc" (formula "25") (term "1,1,0,0,0,0,0,0,0,0"))
                        (rule "add_literals" (formula "25") (term "0,1,1,0,0,0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "25") (term "1,1,0,0,0,0,0,0,0,0"))
                        (rule "replace_known_left" (formula "25") (term "0,0,0,0,0,0") (ifseqformula "20"))
                        (builtin "One Step Simplification" (formula "25"))
                        (rule "precOfInt" (formula "25") (term "1"))
                        (rule "narrowSelectArrayType" (formula "25") (term "2,1,1,0,0,0") (ifseqformula "3") (ifseqformula "24"))
                        (rule "replace_known_left" (formula "25") (term "1,0,0,0") (ifseqformula "21"))
                        (builtin "One Step Simplification" (formula "25"))
                        (rule "inEqSimp_ltToLeq" (formula "25") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,1"))
                        (rule "polySimp_mulAssoc" (formula "25") (term "0,1,0,0,1,1"))
                        (rule "polySimp_mulComm0" (formula "25") (term "0,0,1,0,0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "25") (term "0,1,0,0,1,1"))
                        (rule "polySimp_elimOne" (formula "25") (term "0,1,0,0,1,1"))
                        (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,1"))
                        (rule "polySimp_addAssoc" (formula "25") (term "0,1,1"))
                        (rule "polySimp_addComm1" (formula "25") (term "0,0,1,1"))
                        (rule "polySimp_pullOutFactor2b" (formula "25") (term "0,1,1"))
                        (rule "add_literals" (formula "25") (term "1,1,0,1,1"))
                        (rule "times_zero_1" (formula "25") (term "1,0,1,1"))
                        (rule "add_zero_right" (formula "25") (term "0,1,1"))
                        (rule "polySimp_addAssoc" (formula "25") (term "0,1,1"))
                        (rule "polySimp_addComm1" (formula "25") (term "0,0,1,1"))
                        (rule "add_literals" (formula "25") (term "0,0,0,1,1"))
                        (rule "add_zero_left" (formula "25") (term "0,0,1,1"))
                        (rule "polySimp_pullOutFactor1" (formula "25") (term "0,1,1"))
                        (rule "add_literals" (formula "25") (term "1,0,1,1"))
                        (rule "times_zero_1" (formula "25") (term "0,1,1"))
                        (rule "leq_literals" (formula "25") (term "1,1"))
                        (builtin "One Step Simplification" (formula "25"))
                        (rule "inEqSimp_commuteLeq" (formula "25") (term "1,1,0,0,0"))
                        (rule "replace_known_left" (formula "25") (term "1,1,0,0,0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "25"))
                        (rule "inEqSimp_homoInEq1" (formula "25") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "25") (term "1,0,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "25") (term "1,0,1,0,0,0"))
                        (rule "mul_literals" (formula "25") (term "0,1,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "25") (term "0,1,0,0,0"))
                        (rule "polySimp_addComm0" (formula "25") (term "0,0,1,0,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "25") (term "1"))
                        (rule "times_zero_2" (formula "25") (term "1,0,1"))
                        (rule "add_zero_right" (formula "25") (term "0,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "25") (term "0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "25") (term "0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1"))
                        (rule "polySimp_mulComm0" (formula "25") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "25") (term "1,1"))
                        (rule "mul_literals" (formula "25") (term "0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1"))
                        (rule "polySimp_elimOne" (formula "25") (term "1,1,1"))
                        (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "25"))
                        (rule "inEqSimp_subsumption1" (formula "25") (term "1,0,0") (ifseqformula "14"))
                        (rule "inEqSimp_homoInEq0" (formula "25") (term "0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                        (rule "polySimp_addComm0" (formula "25") (term "0,0,0,1,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "25") (term "1,1,0,0,1,0,0"))
                        (rule "times_zero_1" (formula "25") (term "1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "25") (term "0,0,1,0,0"))
                        (rule "qeq_literals" (formula "25") (term "0,1,0,0"))
                        (builtin "One Step Simplification" (formula "25"))
                        (rule "inEqSimp_subsumption1" (formula "25") (term "0,0") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq0" (formula "25") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,0,0"))
                        (rule "add_literals" (formula "25") (term "1,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "25") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "25") (term "0,0,0,0"))
                        (rule "qeq_literals" (formula "25") (term "0,0,0"))
                        (builtin "One Step Simplification" (formula "25"))
                        (rule "andRight" (formula "25"))
                        (branch
                           (rule "allRight" (formula "25") (inst "sk=i_3"))
                           (rule "orRight" (formula "25"))
                           (rule "notRight" (formula "26"))
                           (rule "orRight" (formula "26"))
                           (rule "inEqSimp_geqRight" (formula "27"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "27"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_30"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "22"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "28")) (ifInst ""  (formula "8")))
                           (rule "elementOfArrayRangeConcrete" (formula "3") (term "0,0"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,0"))
                           (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                           (rule "ifEqualsNull" (formula "3"))
                           (rule "pullOutSelect" (formula "3") (term "0,1,1") (inst "selectSK=arr_31"))
                           (rule "simplifySelectOfAnon" (formula "3"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "29")) (ifInst ""  (formula "9")))
                           (rule "elementOfArrayRangeConcrete" (formula "3") (term "0,0"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,0"))
                           (rule "commute_and_2" (formula "4") (term "0"))
                           (rule "commute_and" (formula "4") (term "0,0"))
                           (rule "orLeft" (formula "4"))
                           (branch " byteArrays[i_3]@anon_heap_selSort«anonHeapFunction» = null ∧ i_3 ≥ fromIndex ∧ sorted_0 ≥ i_3"
                              (rule "andLeft" (formula "4"))
                              (rule "andLeft" (formula "4"))
                              (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "5"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "allLeft" (formula "30") (inst "t=i_3"))
                              (rule "replaceKnownSelect_taclet000101010_0" (formula "30") (term "0,0,0,0"))
                              (rule "replace_known_left" (formula "30") (term "0,0,0") (ifseqformula "7"))
                              (builtin "One Step Simplification" (formula "30"))
                              (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "30") (term "1") (ifseqformula "2"))
                              (rule "inEqSimp_homoInEq1" (formula "30") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,1"))
                              (rule "add_literals" (formula "30") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "30") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "30") (term "0,0,1"))
                              (rule "leq_literals" (formula "30") (term "0,1"))
                              (builtin "One Step Simplification" (formula "30"))
                              (rule "inEqSimp_contradInEq1" (formula "30") (ifseqformula "1"))
                              (rule "qeq_literals" (formula "30") (term "0"))
                              (builtin "One Step Simplification" (formula "30"))
                              (rule "closeFalse" (formula "30"))
                           )
                           (branch " ¬(i_3 ≥ fromIndex ∧ sorted_0 ≥ i_3) ∧ arr_31«selectSK» = null"
                              (rule "andLeft" (formula "4"))
                              (rule "notLeft" (formula "4"))
                              (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                              (rule "ifEqualsNull" (formula "3"))
                              (rule "commute_and_2" (formula "3") (term "0"))
                              (rule "commute_and" (formula "3") (term "0,0"))
                              (rule "orLeft" (formula "3"))
                              (branch " byteArrays[i_3]@anon_heap_LOOP«anonHeapFunction» = null ∧ i_3 ≥ fromIndex ∧ toIndex ≥ i_3"
                                 (rule "andLeft" (formula "3"))
                                 (rule "andLeft" (formula "3"))
                                 (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "4"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "inEqSimp_geqRight" (formula "31"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1"))
                                 (rule "mul_literals" (formula "1") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                 (rule "inEqSimp_exactShadow3" (formula "22") (ifseqformula "1"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "22") (term "0"))
                                 (rule "polySimp_addComm0" (formula "22") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "22"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1"))
                                 (rule "mul_literals" (formula "22") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "22") (term "1,1"))
                                 (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "22"))
                                 (rule "inEqSimp_homoInEq0" (formula "5") (term "0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0"))
                                 (rule "add_literals" (formula "5") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "5") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "5") (term "0,0"))
                                 (rule "qeq_literals" (formula "5") (term "0"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "allLeft" (formula "13") (inst "t=i_3"))
                                 (rule "inEqSimp_commuteGeq" (formula "13") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "13") (term "1") (ifseqformula "3"))
                                 (rule "inEqSimp_homoInEq1" (formula "13") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1"))
                                 (rule "add_literals" (formula "13") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "13") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "13") (term "0,0,1"))
                                 (rule "leq_literals" (formula "13") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "inEqSimp_contradInEq1" (formula "13") (term "1") (ifseqformula "2"))
                                 (rule "qeq_literals" (formula "13") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "notLeft" (formula "13"))
                                 (rule "allLeft" (formula "24") (inst "t=i_3"))
                                 (rule "replaceKnownSelect_taclet000101010_1" (formula "24") (term "0,0,0,0"))
                                 (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "6"))
                                 (builtin "One Step Simplification" (formula "24"))
                                 (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "3"))
                                 (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
                                 (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "24") (term "0,0,1"))
                                 (rule "leq_literals" (formula "24") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "24"))
                                 (rule "inEqSimp_contradInEq1" (formula "24") (ifseqformula "2"))
                                 (rule "qeq_literals" (formula "24") (term "0"))
                                 (builtin "One Step Simplification" (formula "24"))
                                 (rule "closeFalse" (formula "24"))
                              )
                              (branch " ¬(i_3 ≥ fromIndex ∧ toIndex ≥ i_3) ∧ byteArrays[i_3] = null"
                                 (rule "andLeft" (formula "3"))
                                 (rule "notLeft" (formula "3"))
                                 (rule "allLeft" (formula "11") (inst "t=i_3"))
                                 (rule "replace_known_left" (formula "11") (term "0,0,0") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "inEqSimp_commuteGeq" (formula "11") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "11") (term "0") (ifseqformula "1"))
                                 (rule "qeq_literals" (formula "11") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "11"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "inEqSimp_homoInEq1" (formula "2"))
                                 (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                 (rule "add_literals" (formula "2") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "2") (term "1,0"))
                                 (rule "add_zero_right" (formula "2") (term "0"))
                                 (rule "leq_literals" (formula "2"))
                                 (rule "closeFalse" (formula "2"))
                              )
                           )
                        )
                        (branch
                           (rule "allRight" (formula "25") (inst "sk=f_0"))
                           (rule "allRight" (formula "25") (inst "sk=o_0"))
                           (rule "orRight" (formula "25"))
                           (rule "orRight" (formula "25"))
                           (rule "eqSymm" (formula "25") (term "0,0,0,1"))
                           (rule "pullOutSelect" (formula "27") (term "0") (inst "selectSK=f_0_0"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "eqSymm" (formula "28"))
                           (rule "elementOfArrayRange" (formula "1") (term "0,0,0,0") (inst "iv=iv"))
                           (rule "eqSymm" (formula "1") (term "0,0,0,1,0,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1,0,0,0,0"))
                           (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
                           (rule "simplifySelectOfAnon" (formula "1"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "28")))
                           (rule "elementOfArrayRange" (formula "1") (term "0,0,0") (inst "iv=iv"))
                           (rule "eqSymm" (formula "1") (term "0,0,0,1,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1,0,0,0"))
                           (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "27"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "ifthenelse_split" (formula "1") (term "0"))
                           (branch " o_0 = byteArrays ∧ ∃ int iv; (arr(iv) = f_0 ∧ iv ≥ fromIndex ∧ iv ≤ sorted_0) ∧ ¬f_0 = java.lang.Object::<created> ∨ ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE) TRUE"
                              (rule "applyEqReverse" (formula "29") (term "1") (ifseqformula "2"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "eqSymm" (formula "28"))
                              (rule "orLeft" (formula "1"))
                              (branch " o_0 = byteArrays ∧ ∃ int iv; (arr(iv) = f_0 ∧ iv ≥ fromIndex ∧ iv ≤ sorted_0) ∧ ¬f_0 = java.lang.Object::<created>"
                                 (rule "andLeft" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "notLeft" (formula "3"))
                                 (rule "exLeft" (formula "2") (inst "sk=iv_0"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "eqSymm" (formula "2"))
                                 (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "30"))
                                 (rule "inEqSimp_commuteLeq" (formula "4"))
                                 (rule "applyEq" (formula "28") (term "0") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "28"))
                                 (rule "false_right" (formula "28"))
                                 (rule "applyEqRigid" (formula "29") (term "1,0,0,0") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "29"))
                                 (rule "applyEq" (formula "31") (term "2,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "31") (term "1,0") (ifseqformula "1"))
                                 (rule "narrowSelectArrayType" (formula "31") (term "0") (ifseqformula "21") (ifseqformula "28"))
                                 (rule "eqSymm" (formula "31"))
                                 (rule "applyEq" (formula "30") (term "0,0,0") (ifseqformula "1"))
                                 (rule "replace_known_right" (formula "30") (term "0,0") (ifseqformula "28"))
                                 (builtin "One Step Simplification" (formula "30"))
                                 (rule "notRight" (formula "30"))
                                 (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "30") (term "1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "30") (term "2,0") (ifseqformula "2"))
                                 (rule "narrowSelectArrayType" (formula "30") (term "0") (ifseqformula "7") (ifseqformula "28"))
                                 (rule "eqSymm" (formula "30"))
                                 (rule "nnf_ex2all" (formula "29"))
                                 (rule "nnf_notAnd" (formula "1") (term "0"))
                                 (rule "inEqSimp_notLeq" (formula "1") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                                 (rule "commute_or" (formula "1") (term "0,0"))
                                 (rule "commute_or_2" (formula "1") (term "0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "castDel" (formula "1") (term "0,0"))
                                 (rule "castDel" (formula "1") (term "0,1"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "1"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "4"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                 (rule "polySimp_addComm0" (formula "1") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,0"))
                                 (rule "leq_literals" (formula "1") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "1"))
                                 (rule "times_zero_1" (formula "15") (term "0,0"))
                                 (rule "add_zero_left" (formula "15") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                                 (rule "mul_literals" (formula "15") (term "1"))
                                 (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "1"))
                                 (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                                 (rule "mul_literals" (formula "7") (term "0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "7") (term "0"))
                                 (rule "polySimp_addComm1" (formula "7") (term "0,0"))
                                 (rule "add_literals" (formula "7") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                                 (rule "polySimp_mulComm0" (formula "7") (term "1"))
                                 (rule "polySimp_rightDist" (formula "7") (term "1"))
                                 (rule "mul_literals" (formula "7") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "7") (term "1,1"))
                                 (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "7"))
                                 (rule "inEqSimp_homoInEq0" (formula "4") (term "0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0"))
                                 (rule "add_literals" (formula "4") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "4") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "4") (term "0,0"))
                                 (rule "qeq_literals" (formula "4") (term "0"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "1"))
                                 (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                                 (rule "mul_literals" (formula "5") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "5") (term "0"))
                                 (rule "polySimp_addAssoc" (formula "5") (term "0,0"))
                                 (rule "add_literals" (formula "5") (term "0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                                 (rule "polySimp_elimOne" (formula "5") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "4"))
                                 (rule "andLeft" (formula "5"))
                                 (rule "inEqSimp_homoInEq1" (formula "5"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                                 (rule "mul_literals" (formula "5") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "5") (term "0"))
                                 (rule "polySimp_addComm0" (formula "5") (term "0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "5") (term "0"))
                                 (rule "add_literals" (formula "5") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "5") (term "1,0"))
                                 (rule "add_zero_right" (formula "5") (term "0"))
                                 (rule "leq_literals" (formula "5"))
                                 (rule "closeFalse" (formula "5"))
                              )
                              (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE)"
                                 (rule "andLeft" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "orRight" (formula "24"))
                                 (rule "replace_known_right" (formula "29") (term "0,0") (ifseqformula "26"))
                                 (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "24")))
                                 (rule "closeTrue" (formula "29"))
                              )
                           )
                           (branch " o_0 = byteArrays ∧ ∃ int iv; (arr(iv) = f_0 ∧ iv ≥ fromIndex ∧ iv ≤ sorted_0) ∧ ¬f_0 = java.lang.Object::<created> ∨ ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE) FALSE"
                              (rule "close" (formula "29") (ifseqformula "1"))
                           )
                        )
                     )
                     (branch "Exceptional Post (selSort)"
                        (builtin "One Step Simplification" (formula "18"))
                        (builtin "One Step Simplification" (formula "20"))
                        (rule "translateJavaAddInt" (formula "18") (term "0,2,2,0,1,0,0,0,1,1"))
                        (rule "andLeft" (formula "18"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1,0") (ifseqformula "18"))
                        (builtin "One Step Simplification" (formula "19"))
                        (rule "andLeft" (formula "19"))
                        (rule "andLeft" (formula "19"))
                        (rule "andLeft" (formula "21"))
                        (rule "notLeft" (formula "19"))
                        (rule "close" (formula "22") (ifseqformula "21"))
                     )
                     (branch "Pre (selSort)"
                        (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "17")) (ifInst ""  (formula "4")))
                        (rule "wellFormedAnon" (formula "18") (term "1"))
                        (rule "translateJavaAddInt" (formula "18") (term "0,2,2,0,1,0,0,1,1,1,1,0"))
                        (rule "translateJavaSubInt" (formula "18") (term "1,1,0,0,0,1,1,1,1,0"))
                        (rule "replace_known_left" (formula "18") (term "1,1") (ifseqformula "12"))
                        (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "3")))
                        (rule "polySimp_elimSub" (formula "18") (term "1,1,0,0,0,1,1,1,1"))
                        (rule "mul_literals" (formula "18") (term "1,1,1,0,0,0,1,1,1,1"))
                        (rule "polySimp_addComm0" (formula "18") (term "0,2,2,0,1,0,0,1,1,1,1"))
                        (rule "polySimp_addComm0" (formula "18") (term "1,1,0,0,0,1,1,1,1"))
                        (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,1"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,1"))
                        (rule "polySimp_addComm1" (formula "18") (term "0,1,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,0,1,1"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,0,1,1"))
                        (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,0,1,1,1,1"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,0,1,1,1,1"))
                        (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,0,1,1,1,1"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,0,1,1,1,1"))
                        (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,0,1,1,1,1"))
                        (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,0,1,1,1,1"))
                        (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0"))
                        (rule "replace_known_left" (formula "18") (term "0,0") (ifseqformula "7"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "inEqSimp_commuteLeq" (formula "18") (term "0,1,1,1"))
                        (rule "replace_known_left" (formula "18") (term "0,1,1,1") (ifseqformula "14"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,0,1,1"))
                        (rule "inEqSimp_commuteLeq" (formula "18") (term "0"))
                        (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "9"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,0,1"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,0,1"))
                        (rule "mul_literals" (formula "18") (term "0,1,1,0,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,0,1"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,0,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "0,1,0"))
                        (rule "polySimp_elimOne" (formula "18") (term "0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,0,1,1"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,0,1,1"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,0,1,1"))
                        (rule "mul_literals" (formula "18") (term "0,1,1,0,0,0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,0,1,1"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,0,1,1"))
                        (rule "nonNull" (formula "18") (term "1,1,1") (inst "i=i_3"))
                        (rule "greater_literals" (formula "18") (term "0,1,1,1,1"))
                        (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "17")))
                        (rule "sub_literals" (formula "18") (term "2,1,0,1,1,1"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,1,1,1"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,1,1,1"))
                        (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1,1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,1,1,1"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,1,1,1"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,1,1,1"))
                        (rule "mul_literals" (formula "18") (term "0,1,1,0,0,1,1,1"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,1,1,1"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,1,1,1"))
                        (rule "nnf_imp2or" (formula "18") (term "0,0,1"))
                        (rule "nnf_imp2or" (formula "18") (term "0,0,1,1"))
                        (rule "nnf_imp2or" (formula "18") (term "0,1,1,1"))
                        (rule "nnf_notAnd" (formula "18") (term "0,0,0,1"))
                        (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0,0,1"))
                        (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0,0,1"))
                        (rule "add_zero_right" (formula "18") (term "0,0,0,0,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,0,1"))
                        (rule "mul_literals" (formula "18") (term "1,0,0,0,0,1"))
                        (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0,0,1"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,0,1"))
                        (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,0,1"))
                        (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,0,1"))
                        (rule "add_zero_left" (formula "18") (term "0,0,1,0,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0,1"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0,1"))
                        (rule "nnf_notAnd" (formula "18") (term "0,0,0,1,1"))
                        (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0,0,1,1"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0,0,1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,0,1,1"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,1,1"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,0,1,1"))
                        (rule "mul_literals" (formula "18") (term "0,1,0,0,0,0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0,0,1,1"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0,0,1,1"))
                        (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0,0,1,1"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,0,1,1"))
                        (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,0,1,1"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,0,1,1"))
                        (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,0,1,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0,0,1,1"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,0,1,1"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,0,1,1"))
                        (rule "mul_literals" (formula "18") (term "0,1,1,0,0,0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,0,1,1"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,0,1,1"))
                        (rule "replace_known_left" (formula "18") (term "0,1,1") (ifseqformula "13"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "nnf_notAnd" (formula "18") (term "0,0,1,1"))
                        (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0,1,1"))
                        (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0,1,1"))
                        (rule "add_zero_right" (formula "18") (term "0,0,0,0,0,1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,1,1"))
                        (rule "mul_literals" (formula "18") (term "1,0,0,0,1,1"))
                        (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0,1,1"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,1,1"))
                        (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,1,1"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,1,1"))
                        (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,1,1"))
                        (rule "add_zero_left" (formula "18") (term "0,0,1,0,0,1,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,1,1"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,1,1"))
                        (rule "cut_direct" (formula "18") (term "0,0"))
                        (branch "CUT: sorted_0 ≥ 0 TRUE"
                           (builtin "One Step Simplification" (formula "19"))
                           (rule "cut_direct" (formula "19") (term "0"))
                           (branch "CUT: byteArrays.length ≥ 1 + sorted_0 TRUE"
                              (builtin "One Step Simplification" (formula "20"))
                              (rule "andRight" (formula "20"))
                              (branch
                                 (rule "allRight" (formula "20") (inst "sk=i_4"))
                                 (rule "orRight" (formula "20"))
                                 (rule "notRight" (formula "21"))
                                 (rule "orRight" (formula "21"))
                                 (rule "inEqSimp_geqRight" (formula "22"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "inEqSimp_leqRight" (formula "22"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0"))
                                 (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_34"))
                                 (rule "simplifySelectOfAnon" (formula "3"))
                                 (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "23")) (ifInst ""  (formula "10")))
                                 (rule "elementOfArrayRangeConcrete" (formula "3") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0"))
                                 (rule "applyEqRigid" (formula "3") (term "1") (ifseqformula "4"))
                                 (rule "ifEqualsNull" (formula "3"))
                                 (rule "commute_and_2" (formula "3") (term "0"))
                                 (rule "commute_and" (formula "3") (term "0,0"))
                                 (rule "orLeft" (formula "3"))
                                 (branch " byteArrays[i_4]@anon_heap_LOOP«anonHeapFunction» = null ∧ i_4 ≥ fromIndex ∧ toIndex ≥ i_4"
                                    (rule "andLeft" (formula "3"))
                                    (rule "andLeft" (formula "3"))
                                    (rule "allLeft" (formula "24") (inst "t=i_4"))
                                    (rule "replaceKnownSelect_taclet00020101010_0" (formula "24") (term "0,0,0,0"))
                                    (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "6"))
                                    (builtin "One Step Simplification" (formula "24"))
                                    (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "2"))
                                    (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
                                    (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "24") (term "0,0,1"))
                                    (rule "leq_literals" (formula "24") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "24"))
                                    (rule "inEqSimp_contradInEq1" (formula "24") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "24") (term "0"))
                                    (builtin "One Step Simplification" (formula "24"))
                                    (rule "closeFalse" (formula "24"))
                                 )
                                 (branch " ¬(i_4 ≥ fromIndex ∧ toIndex ≥ i_4) ∧ byteArrays[i_4] = null"
                                    (rule "andLeft" (formula "3"))
                                    (rule "notLeft" (formula "3"))
                                    (rule "allLeft" (formula "12") (inst "t=i_4"))
                                    (rule "replace_known_left" (formula "12") (term "0,0,0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "2"))
                                    (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
                                    (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "12") (term "0,0,1"))
                                    (rule "leq_literals" (formula "12") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "inEqSimp_contradInEq1" (formula "12") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "12") (term "0"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "closeFalse" (formula "12"))
                                 )
                              )
                              (branch
                                 (rule "allRight" (formula "20") (inst "sk=i_3_0"))
                                 (rule "orRight" (formula "20"))
                                 (rule "orRight" (formula "20"))
                                 (rule "notRight" (formula "22"))
                                 (rule "inEqSimp_geqRight" (formula "22"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "inEqSimp_leqRight" (formula "22"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0"))
                                 (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_32"))
                                 (rule "simplifySelectOfAnon" (formula "3"))
                                 (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "23")) (ifInst ""  (formula "10")))
                                 (rule "elementOfArrayRangeConcrete" (formula "3") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "narrowSelectArrayType" (formula "3") (term "1,0") (ifseqformula "18") (ifseqformula "23"))
                                 (rule "narrowSelectArrayType" (formula "3") (term "2,0") (ifseqformula "9") (ifseqformula "23"))
                                 (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,0"))
                                 (rule "applyEqRigid" (formula "3") (term "1") (ifseqformula "4"))
                                 (rule "ifEqualsNull" (formula "3"))
                                 (rule "commute_and_2" (formula "3") (term "0"))
                                 (rule "commute_and" (formula "3") (term "0,0"))
                                 (rule "orLeft" (formula "3"))
                                 (branch " byteArrays[i_3_0]@anon_heap_LOOP«anonHeapFunction» = null ∧ i_3_0 ≥ fromIndex ∧ toIndex ≥ i_3_0"
                                    (rule "andLeft" (formula "3"))
                                    (rule "andLeft" (formula "3"))
                                    (rule "allLeft" (formula "24") (inst "t=i_3_0"))
                                    (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "24") (term "1,0") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "24") (term "0,1,0"))
                                    (builtin "One Step Simplification" (formula "24"))
                                    (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "2"))
                                    (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
                                    (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "24") (term "0,0,1"))
                                    (rule "leq_literals" (formula "24") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "24"))
                                    (rule "notLeft" (formula "24"))
                                    (rule "pullOutSelect" (formula "25") (term "0") (inst "selectSK=arr_33"))
                                    (rule "simplifySelectOfAnon" (formula "1"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "27")) (ifInst ""  (formula "13")))
                                    (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0"))
                                    (rule "replace_known_left" (formula "1") (term "1,0,0") (ifseqformula "6"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
                                    (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "5"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "applyEqReverse" (formula "26") (term "0") (ifseqformula "1"))
                                    (rule "close" (formula "26") (ifseqformula "4"))
                                 )
                                 (branch " ¬(i_3_0 ≥ fromIndex ∧ toIndex ≥ i_3_0) ∧ byteArrays[i_3_0] = null"
                                    (rule "andLeft" (formula "3"))
                                    (rule "notLeft" (formula "3"))
                                    (rule "allLeft" (formula "12") (inst "t=i_3_0"))
                                    (rule "replace_known_left" (formula "12") (term "0,0,0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "2"))
                                    (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
                                    (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "12") (term "0,0,1"))
                                    (rule "leq_literals" (formula "12") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "12"))
                                    (rule "qeq_literals" (formula "1") (term "0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                              )
                           )
                           (branch "CUT: byteArrays.length ≥ 1 + sorted_0 FALSE"
                              (builtin "One Step Simplification" (formula "20"))
                              (rule "false_right" (formula "20"))
                              (rule "inEqSimp_geqRight" (formula "19"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1"))
                              (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "1"))
                              (rule "polySimp_mulComm0" (formula "11") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "1"))
                              (rule "polySimp_elimOne" (formula "11") (term "1"))
                              (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "1"))
                              (rule "times_zero_1" (formula "10") (term "0,0"))
                              (rule "add_zero_left" (formula "10") (term "0"))
                              (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "1"))
                              (rule "polySimp_mulComm0" (formula "13") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "13") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "13"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                              (rule "polySimp_elimOne" (formula "13") (term "0"))
                              (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "13"))
                              (rule "andLeft" (formula "3"))
                              (rule "inEqSimp_homoInEq1" (formula "3"))
                              (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                              (rule "add_literals" (formula "3") (term "1,1,0"))
                              (rule "times_zero_1" (formula "3") (term "1,0"))
                              (rule "add_zero_right" (formula "3") (term "0"))
                              (rule "leq_literals" (formula "3"))
                              (rule "closeFalse" (formula "3"))
                           )
                        )
                        (branch "CUT: sorted_0 ≥ 0 FALSE"
                           (builtin "One Step Simplification" (formula "19"))
                           (rule "false_right" (formula "19"))
                           (rule "inEqSimp_geqRight" (formula "18"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "1"))
                           (rule "polySimp_mulComm0" (formula "15") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "15") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "15"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                           (rule "polySimp_elimOne" (formula "15") (term "0"))
                           (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "15"))
                           (rule "qeq_literals" (formula "8") (term "0"))
                           (builtin "One Step Simplification" (formula "8"))
                           (rule "closeFalse" (formula "8"))
                        )
                     )
                  )
                  (branch "if x_8 false"
                     (builtin "One Step Simplification" (formula "19"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
               )
               (branch "Use Case"
                  (builtin "One Step Simplification" (formula "14"))
                  (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "13")))
                  (rule "translateJavaSubInt" (formula "12") (term "1,1,0,0,0,0,0,0,0,0"))
                  (rule "translateJavaAddInt" (formula "12") (term "0,2,2,0,1,0,0,0,0,0,0,0"))
                  (rule "andLeft" (formula "12"))
                  (rule "andLeft" (formula "12"))
                  (rule "andLeft" (formula "12"))
                  (rule "andLeft" (formula "13"))
                  (rule "andLeft" (formula "12"))
                  (rule "andLeft" (formula "12"))
                  (rule "andLeft" (formula "12"))
                  (rule "andLeft" (formula "14"))
                  (rule "andLeft" (formula "13"))
                  (rule "polySimp_elimSub" (formula "12") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "12") (term "1,1,1,0,0"))
                  (rule "polySimp_addComm0" (formula "12") (term "0,2,2,0,1,0"))
                  (rule "polySimp_addComm0" (formula "12") (term "1,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "19"))
                  (rule "inEqSimp_commuteLeq" (formula "18"))
                  (rule "inEqSimp_commuteLeq" (formula "17"))
                  (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "16"))
                  (rule "inEqSimp_commuteLeq" (formula "15"))
                  (rule "inEqSimp_commuteLeq" (formula "14"))
                  (rule "inEqSimp_commuteLeq" (formula "13"))
                  (rule "variableDeclarationAssign" (formula "19") (term "1"))
                  (rule "variableDeclaration" (formula "19") (term "1") (newnames "b_1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                  (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "1"))
                  (rule "inEqSimp_homoInEq0" (formula "13") (term "0"))
                  (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0"))
                  (rule "add_literals" (formula "13") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "13") (term "1,0,0"))
                  (rule "add_zero_right" (formula "13") (term "0,0"))
                  (rule "qeq_literals" (formula "13") (term "0"))
                  (builtin "One Step Simplification" (formula "13"))
                  (rule "true_left" (formula "13"))
                  (rule "array2seqDef" (formula "15") (term "1") (inst "u=u"))
                  (rule "narrowSelectArrayType" (formula "15") (term "2,1") (ifseqformula "2") (ifseqformula "17"))
                  (rule "array2seqDef" (formula "15") (term "0") (inst "u=u"))
                  (rule "nnf_imp2or" (formula "16") (term "0"))
                  (rule "nnf_imp2or" (formula "12") (term "0"))
                  (rule "nnf_notAnd" (formula "16") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                  (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0"))
                  (rule "add_literals" (formula "16") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                  (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "12") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                  (rule "commute_or_2" (formula "16") (term "0"))
                  (rule "commute_or" (formula "16") (term "0,0"))
                  (rule "less_than_comparison_simple" (formula "18") (term "1"))
                  (builtin "One Step Simplification" (formula "18"))
                  (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,1,0"))
                  (rule "polySimp_addComm1" (formula "18") (term "0,0,0,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "18") (term "0,0,0,1,0"))
                  (rule "methodCallEmpty" (formula "18") (term "1"))
                  (rule "emptyModality" (formula "18") (term "1"))
                  (builtin "One Step Simplification" (formula "18"))
                  (rule "impRight" (formula "18"))
                  (rule "notLeft" (formula "1"))
                  (rule "inEqSimp_geqRight" (formula "17"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1"))
                  (rule "inEqSimp_antiSymm" (formula "15") (ifseqformula "1"))
                  (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "1"))
                  (rule "times_zero_1" (formula "10") (term "0,0"))
                  (rule "add_zero_left" (formula "10") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                  (rule "mul_literals" (formula "2") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "mul_literals" (formula "2") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                  (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq0" (formula "16") (term "0"))
                  (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0"))
                  (rule "add_literals" (formula "16") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "16") (term "1,0,0"))
                  (rule "add_zero_right" (formula "16") (term "0,0"))
                  (rule "qeq_literals" (formula "16") (term "0"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "true_left" (formula "16"))
                  (rule "methodCallEmpty" (formula "21") (term "1"))
                  (rule "tryEmpty" (formula "21") (term "1"))
                  (rule "emptyModality" (formula "21") (term "1"))
                  (builtin "One Step Simplification" (formula "21"))
                  (rule "eqSymm" (formula "21") (term "1,0,0,1"))
                  (rule "narrowSelectArrayType" (formula "21") (term "2,1,0,0") (ifseqformula "4") (ifseqformula "20"))
                  (rule "replace_known_left" (formula "21") (term "0,0") (ifseqformula "18"))
                  (builtin "One Step Simplification" (formula "21"))
                  (rule "applyEq" (formula "21") (term "2,1,0,2,0,1,0,0,0") (ifseqformula "16"))
                  (rule "applyEq" (formula "21") (term "2,1,0,0,1,0,0,1") (ifseqformula "16"))
                  (rule "applyEq" (formula "21") (term "1,1,1,0,0,0,0") (ifseqformula "16"))
                  (rule "applyEq" (formula "21") (term "2,1,0,0,1,0,0,0") (ifseqformula "16"))
                  (rule "applyEq" (formula "21") (term "2,1,0,1,0,1,0,0,0") (ifseqformula "16"))
                  (rule "applyEq" (formula "21") (term "2,1,0,0,0,1,0,1,0") (ifseqformula "16"))
                  (rule "applyEq" (formula "18") (term "2,1,0,2,0") (ifseqformula "16"))
                  (rule "applyEq" (formula "13") (term "1") (ifseqformula "16"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "16"))
                  (rule "inEqSimp_homoInEq0" (formula "1"))
                  (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "1,0"))
                  (rule "times_zero_1" (formula "1") (term "0"))
                  (rule "qeq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "applyEq" (formula "16") (term "0") (ifseqformula "15"))
                  (rule "inEqSimp_homoInEq1" (formula "16"))
                  (rule "polySimp_pullOutFactor1" (formula "16") (term "0"))
                  (rule "add_literals" (formula "16") (term "1,0"))
                  (rule "times_zero_1" (formula "16") (term "0"))
                  (rule "leq_literals" (formula "16"))
                  (rule "true_left" (formula "16"))
                  (rule "applyEq" (formula "17") (term "2,1,0,0,0,0,0,0") (ifseqformula "15"))
                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "15"))
                  (rule "applyEq" (formula "13") (term "2,1,0,2,0,1,0") (ifseqformula "14"))
                  (rule "applyEq" (formula "13") (term "2,1,0,1,0,1,0") (ifseqformula "14"))
                  (rule "applyEq" (formula "13") (term "2,1,0,0,1,0") (ifseqformula "14"))
                  (rule "replace_known_left" (formula "18") (term "0,0") (ifseqformula "13"))
                  (builtin "One Step Simplification" (formula "18"))
                  (rule "applyEq" (formula "10") (term "0") (ifseqformula "14"))
                  (rule "andRight" (formula "17"))
                  (branch
                     (rule "allRight" (formula "17") (inst "sk=i_5"))
                     (rule "orRight" (formula "17"))
                     (rule "notRight" (formula "18"))
                     (rule "orRight" (formula "18"))
                     (rule "inEqSimp_geqRight" (formula "19"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_leqRight" (formula "19"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0"))
                     (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_35"))
                     (rule "simplifySelectOfAnon" (formula "3"))
                     (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "20")) (ifInst ""  (formula "7")))
                     (rule "elementOfArrayRangeConcrete" (formula "3") (term "0,0"))
                     (builtin "One Step Simplification" (formula "3"))
                     (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,0"))
                     (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                     (rule "ifEqualsNull" (formula "3"))
                     (rule "commute_and_2" (formula "3") (term "0"))
                     (rule "commute_and" (formula "3") (term "0,0"))
                     (rule "orLeft" (formula "3"))
                     (branch " byteArrays[i_5]@anon_heap_LOOP«anonHeapFunction» = null ∧ i_5 ≥ fromIndex ∧ sorted_0 ≥ i_5"
                        (rule "andLeft" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "allLeft" (formula "21") (inst "t=i_5"))
                        (rule "replaceKnownSelect_taclet0201010_0" (formula "21") (term "0,0,0,0"))
                        (rule "replace_known_left" (formula "21") (term "0,0,0") (ifseqformula "6"))
                        (builtin "One Step Simplification" (formula "21"))
                        (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
                        (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "21") (term "0,0,1"))
                        (rule "leq_literals" (formula "21") (term "0,1"))
                        (builtin "One Step Simplification" (formula "21"))
                        (rule "inEqSimp_contradInEq1" (formula "21") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "21") (term "0"))
                        (builtin "One Step Simplification" (formula "21"))
                        (rule "closeFalse" (formula "21"))
                     )
                     (branch " ¬(i_5 ≥ fromIndex ∧ sorted_0 ≥ i_5) ∧ byteArrays[i_5] = null"
                        (rule "andLeft" (formula "3"))
                        (rule "notLeft" (formula "3"))
                        (rule "allLeft" (formula "9") (inst "t=i_5"))
                        (rule "replace_known_left" (formula "9") (term "0,0,0") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "9"))
                        (rule "inEqSimp_commuteGeq" (formula "9") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "9") (term "0") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "9") (term "0,0"))
                        (builtin "One Step Simplification" (formula "9"))
                        (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "9"))
                        (rule "andLeft" (formula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "2"))
                        (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                        (rule "add_literals" (formula "2") (term "1,1,0"))
                        (rule "times_zero_1" (formula "2") (term "1,0"))
                        (rule "add_zero_right" (formula "2") (term "0"))
                        (rule "leq_literals" (formula "2"))
                        (rule "closeFalse" (formula "2"))
                     )
                  )
                  (branch
                     (rule "allRight" (formula "17") (inst "sk=f_1"))
                     (rule "allRight" (formula "17") (inst "sk=o_1"))
                     (rule "orRight" (formula "17"))
                     (rule "orRight" (formula "17"))
                     (rule "pullOutSelect" (formula "19") (term "0") (inst "selectSK=f_1_0"))
                     (rule "simplifySelectOfAnon" (formula "1"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")))
                     (rule "eqSymm" (formula "20"))
                     (rule "elementOfArrayRange" (formula "1") (term "0,0,0") (inst "iv=iv"))
                     (rule "eqSymm" (formula "1") (term "0,0,0,1,0,0,0"))
                     (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "18"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
                     (rule "closeFalse" (formula "1"))
                  )
               )
            )
            (branch "if x_1 false"
               (builtin "One Step Simplification" (formula "13"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "inEqSimp_geqRight" (formula "11"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1"))
               (rule "polySimp_elimOne" (formula "1") (term "1"))
               (rule "inEqSimp_antiSymm" (formula "11") (ifseqformula "1"))
               (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "1"))
               (rule "times_zero_1" (formula "9") (term "0,0"))
               (rule "add_zero_left" (formula "9") (term "0"))
               (rule "methodCallEmpty" (formula "14") (term "1"))
               (rule "tryEmpty" (formula "14") (term "1"))
               (rule "emptyModality" (formula "14") (term "1"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "applyEq" (formula "12") (term "0") (ifseqformula "11"))
               (rule "inEqSimp_homoInEq1" (formula "12"))
               (rule "polySimp_pullOutFactor1" (formula "12") (term "0"))
               (rule "add_literals" (formula "12") (term "1,0"))
               (rule "times_zero_1" (formula "12") (term "0"))
               (rule "leq_literals" (formula "12"))
               (rule "true_left" (formula "12"))
               (rule "applyEq" (formula "13") (term "1,1,1,0,0,0") (ifseqformula "11"))
               (rule "applyEq" (formula "1") (term "0") (ifseqformula "11"))
               (rule "inEqSimp_homoInEq0" (formula "1"))
               (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "1,0"))
               (rule "times_zero_1" (formula "1") (term "0"))
               (rule "qeq_literals" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "applyEq" (formula "8") (term "0") (ifseqformula "10"))
               (rule "applyEq" (formula "8") (term "1") (ifseqformula "9"))
               (rule "inEqSimp_or_tautInEq0" (formula "10") (term "0,0,0"))
               (rule "polySimp_addAssoc" (formula "10") (term "1,1,0,0,0"))
               (rule "add_literals" (formula "10") (term "0,1,1,0,0,0"))
               (rule "inEqSimp_homoInEq1" (formula "10") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0,1,0,0,0"))
               (rule "mul_literals" (formula "10") (term "0,1,0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "10") (term "0,1,0,0,0"))
               (rule "polySimp_addComm1" (formula "10") (term "0,0,1,0,0,0"))
               (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,1,0,0,0"))
               (rule "add_literals" (formula "10") (term "1,1,0,1,0,0,0"))
               (rule "times_zero_1" (formula "10") (term "1,0,1,0,0,0"))
               (rule "add_zero_right" (formula "10") (term "0,1,0,0,0"))
               (rule "leq_literals" (formula "10") (term "1,0,0,0"))
               (builtin "One Step Simplification" (formula "10"))
               (rule "allRight" (formula "10") (inst "sk=i_7"))
               (rule "orRight" (formula "10"))
               (rule "notRight" (formula "11"))
               (rule "orRight" (formula "11"))
               (rule "inEqSimp_leqRight" (formula "11"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_geqRight" (formula "12"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "allLeft" (formula "7") (inst "t=i_7"))
               (rule "replace_known_left" (formula "7") (term "0,0,0") (ifseqformula "3"))
               (builtin "One Step Simplification" (formula "7"))
               (rule "inEqSimp_commuteGeq" (formula "7") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "7") (term "1") (ifseqformula "1"))
               (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1"))
               (rule "add_literals" (formula "7") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "7") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "7") (term "0,0,1"))
               (rule "leq_literals" (formula "7") (term "0,1"))
               (builtin "One Step Simplification" (formula "7"))
               (rule "inEqSimp_contradInEq1" (formula "7") (ifseqformula "2"))
               (rule "qeq_literals" (formula "7") (term "0"))
               (builtin "One Step Simplification" (formula "7"))
               (rule "closeFalse" (formula "7"))
            )
         )
      )
      (branch "Null Reference (_byteArrays = null)"
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
         (rule "closeFalse" (formula "1"))
      )
   )
)
(branch "if x false"
   (builtin "One Step Simplification" (formula "13"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
)

}
