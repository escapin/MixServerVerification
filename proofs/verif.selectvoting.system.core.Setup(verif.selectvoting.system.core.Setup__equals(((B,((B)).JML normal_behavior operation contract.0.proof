\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sun Mar 20 14:07:42 CET 2016
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=6000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Sun Mar 20 14:07:42 CET 2016
name=verif.selectvoting.system.core.Setup[verif.selectvoting.system.core.Setup\\:\\:equals([[B,[[B)].JML normal_behavior operation contract.0
contract=verif.selectvoting.system.core.Setup[verif.selectvoting.system.core.Setup\\:\\:equals([[B,[[B)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mihai" ) (keyVersion "6bc7ade97061383f11985e24decf735b7f2f0af2"))

(autoModeTime "14224")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "a1,a2,result,exc,heapAtPre,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "2"))
(rule "notLeft" (formula "6"))
(rule "notLeft" (formula "5"))
(rule "andLeft" (formula "6"))
(rule "eqSymm" (formula "10") (term "0,0,0,1"))
(rule "eqSymm" (formula "10") (term "0,0,1,0,1"))
(rule "eqSymm" (formula "5"))
(rule "eqSymm" (formula "10") (term "0,0,0,0,0,1"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "8"))
(builtin "One Step Simplification" (formula "2"))
(rule "replace_known_right" (formula "3") (term "0") (ifseqformula "9"))
(builtin "One Step Simplification" (formula "3"))
(rule "assignment" (formula "10") (term "1"))
(builtin "One Step Simplification" (formula "10"))
(rule "nonNull" (formula "7") (inst "i=i"))
(rule "greater_literals" (formula "7") (term "0,1"))
(builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "9")))
(rule "sub_literals" (formula "7") (term "2,1,0"))
(builtin "One Step Simplification" (formula "7"))
(rule "narrowSelectArrayType" (formula "7") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "9"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
(rule "apply_eq_monomials" (formula "7") (term "1,0,0,1,0,0") (ifseqformula "5"))
(rule "polySimp_rightDist" (formula "7") (term "0,1,0,0,1,0,0"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,0,1,0,0,1,0,0"))
(rule "polySimp_elimOne" (formula "7") (term "1,0,1,0,0,1,0,0"))
(rule "polySimp_pullOutFactor1b" (formula "7") (term "1,0,0,1,0,0"))
(rule "add_literals" (formula "7") (term "1,1,1,0,0,1,0,0"))
(rule "times_zero_1" (formula "7") (term "1,1,0,0,1,0,0"))
(rule "add_zero_right" (formula "7") (term "1,0,0,1,0,0"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
(rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
(rule "nonNull" (formula "6") (inst "i=i"))
(rule "greater_literals" (formula "6") (term "0,1"))
(builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "8")))
(rule "sub_literals" (formula "6") (term "2,1,0"))
(builtin "One Step Simplification" (formula "6"))
(rule "narrowSelectArrayType" (formula "6") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "8"))
(rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
(rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
(rule "nnf_imp2or" (formula "7") (term "0"))
(rule "nnf_imp2or" (formula "6") (term "0"))
(rule "nnf_notAnd" (formula "7") (term "0,0"))
(rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
(rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
(rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
(rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
(rule "mul_literals" (formula "7") (term "1,0,0,0"))
(rule "nnf_notAnd" (formula "6") (term "0,0"))
(rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
(rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "6") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
(rule "mul_literals" (formula "6") (term "1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
(rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
(rule "commute_or_2" (formula "7") (term "0"))
(rule "commute_or_2" (formula "6") (term "0"))
(rule "commute_or" (formula "7") (term "0,0"))
(rule "commute_or" (formula "6") (term "0,0"))
(rule "methodBodyExpand" (formula "10") (term "1") (newnames "heapBefore_equals,savedHeapBefore_equals,_a1Before_equals,_a2Before_equals"))
(builtin "One Step Simplification" (formula "10"))
(rule "for_to_while" (formula "10") (term "1") (inst "#outerLabel=_label1") (inst "#innerLabel=_label0"))
(rule "variableDeclarationAssign" (formula "10") (term "1"))
(rule "variableDeclaration" (formula "10") (term "1") (newnames "i"))
(rule "assignment" (formula "10") (term "1"))
(builtin "One Step Simplification" (formula "10"))
(builtin "Loop Invariant" (formula "10") (newnames "variant,b,heapBefore_LOOP,iBefore_LOOP,i_0,heap_After_LOOP,anon_heap_LOOP,o,f"))
(branch "Invariant Initially Valid"
   (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "1")))
   (rule "leq_literals" (formula "10") (term "0,0,0"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "eqSymm" (formula "10") (term "1,0"))
   (rule "eqSymm" (formula "10") (term "1,0,1"))
   (rule "replace_known_left" (formula "10") (term "1,0") (ifseqformula "5"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1"))
   (rule "times_zero_1" (formula "10") (term "1,0,0,1,0,0,1"))
   (rule "add_zero_right" (formula "10") (term "0,0,1,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "10") (term "0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,1"))
   (rule "mul_literals" (formula "10") (term "1,1,0,0,1"))
   (rule "array2seqDef" (formula "10") (term "1,1,0,1") (inst "u=u"))
   (rule "eqSymm" (formula "10") (term "1,0,1"))
   (rule "array2seqDef" (formula "10") (term "1,1,0,1") (inst "u=u"))
   (rule "eqSymm" (formula "10") (term "1,0,1"))
   (rule "eqSeqDef" (formula "10") (term "1,0,1") (inst "iv=iv"))
   (rule "getOfSeqDef" (formula "10") (term "0,1,0,1,1,0,1"))
   (rule "castDel" (formula "10") (term "1,0,1,0,1,1,0,1"))
   (rule "castDel" (formula "10") (term "2,0,1,0,1,1,0,1"))
   (rule "add_zero_right" (formula "10") (term "0,2,1,0,1,0,1,1,0,1"))
   (rule "eqSymm" (formula "10") (term "1,0,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "10") (term "1,1,0,1,1,0,1,1,0,1"))
   (rule "mul_literals" (formula "10") (term "1,1,1,0,1,1,0,1,1,0,1"))
   (rule "add_zero_right" (formula "10") (term "1,1,0,1,1,0,1,1,0,1"))
   (rule "lenOfSeqDef" (formula "10") (term "1,1,0,0,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "10") (term "1,1,1,0,0,1,1,0,1"))
   (rule "times_zero_2" (formula "10") (term "1,1,1,1,0,0,1,1,0,1"))
   (rule "add_zero_right" (formula "10") (term "1,1,1,0,0,1,1,0,1"))
   (rule "lenOfSeqDef" (formula "10") (term "0,0,1,0,1"))
   (rule "eqSymm" (formula "10") (term "0,1,0,1"))
   (rule "polySimp_elimSub" (formula "10") (term "1,1,0,1,0,1"))
   (rule "mul_literals" (formula "10") (term "1,1,1,0,1,0,1"))
   (rule "add_zero_right" (formula "10") (term "1,1,0,1,0,1"))
   (rule "getOfSeqDef" (formula "10") (term "0,1,0,1,1,0,1"))
   (rule "castDel" (formula "10") (term "1,0,1,0,1,1,0,1"))
   (rule "castDel" (formula "10") (term "2,0,1,0,1,1,0,1"))
   (rule "add_zero_right" (formula "10") (term "0,2,1,0,1,0,1,1,0,1"))
   (rule "eqSymm" (formula "10") (term "1,0,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "10") (term "1,1,0,1,1,0,1,1,0,1"))
   (rule "mul_literals" (formula "10") (term "1,1,1,0,1,1,0,1,1,0,1"))
   (rule "add_zero_right" (formula "10") (term "1,1,0,1,1,0,1,1,0,1"))
   (rule "lenOfSeqDef" (formula "10") (term "0,0,1,0,1"))
   (rule "eqSymm" (formula "10") (term "0,1,0,1"))
   (rule "polySimp_elimSub" (formula "10") (term "1,1,0,1,0,1"))
   (rule "mul_literals" (formula "10") (term "1,1,1,0,1,0,1"))
   (rule "add_zero_right" (formula "10") (term "1,1,0,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1,1,0,0,1,1,0,1"))
   (rule "add_zero_right" (formula "10") (term "0,0,1,1,0,0,1,1,0,1"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,1,0,0,1,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0,1,1,0,1"))
   (rule "eqSymm" (formula "10") (term "1,0,1,1,0,1"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,1,1,0,1,1,0,1"))
   (rule "polySimp_addComm1" (formula "10") (term "0,1,0,1,1,0,1,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1,0,1,0,1"))
   (rule "add_zero_right" (formula "10") (term "0,0,1,0,1,0,1"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0,1,0,1"))
   (rule "add_zero_right" (formula "10") (term "0,0,0,0,1,0,1"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,1,0,1"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1,1,0,1"))
   (rule "polySimp_addComm1" (formula "10") (term "0,1,0,0,1,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0,1,1,0,1"))
   (rule "eqSymm" (formula "10") (term "1,0,1,1,0,1"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,1,1,0,1,1,0,1"))
   (rule "polySimp_addComm1" (formula "10") (term "0,1,0,1,1,0,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,1,1,0,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,0,1,1,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,1,0,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "10") (term "0,0,1,0,1,0,1"))
   (rule "polySimp_elimOne" (formula "10") (term "0,0,1,0,1,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0,0,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,0,1,0,1"))
   (rule "polySimp_elimOne" (formula "10") (term "0,0,0,0,1,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0,1,0,1,0,0,1,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,1,0,1,0,0,1,1,0,1"))
   (rule "polySimp_elimOne" (formula "10") (term "0,0,0,1,0,1,0,0,1,1,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "1,0,0,1,0,1,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,0,1,0,1,1,0,1"))
   (rule "eqSymm" (formula "10") (term "1,0,1,1,0,1"))
   (rule "polySimp_elimOne" (formula "10") (term "0,1,0,1,1,0,1,1,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "1,0,0,1,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,0,1,1,0,1"))
   (rule "polySimp_elimOne" (formula "10") (term "0,1,0,0,1,1,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "1,0,0,1,0,1,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,0,1,0,1,1,0,1"))
   (rule "eqSymm" (formula "10") (term "1,0,1,1,0,1"))
   (rule "polySimp_elimOne" (formula "10") (term "0,1,0,1,1,0,1,1,0,1"))
   (rule "nnf_imp2or" (formula "10") (term "0,1"))
   (rule "nnf_notAnd" (formula "10") (term "0,0,1"))
   (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,1"))
   (rule "mul_literals" (formula "10") (term "1,0,0,1,0,0,1"))
   (rule "add_literals" (formula "10") (term "0,0,1,0,0,1"))
   (rule "add_zero_left" (formula "10") (term "0,1,0,0,1"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "inEqSimp_geqRight" (formula "10"))
   (rule "times_zero_1" (formula "1") (term "1,0,0"))
   (rule "add_zero_right" (formula "1") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
   (rule "mul_literals" (formula "1") (term "1"))
   (rule "arrayLengthIsAShort" (formula "6") (term "1"))
   (builtin "One Step Simplification" (formula "6"))
   (rule "true_left" (formula "6"))
   (rule "arrayLengthIsAShort" (formula "6") (term "0"))
   (builtin "One Step Simplification" (formula "6"))
   (rule "true_left" (formula "6"))
   (rule "arrayLengthNotNegative" (formula "8") (term "1,1,0"))
   (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "1"))
   (rule "qeq_literals" (formula "8") (term "0"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "closeFalse" (formula "8"))
)
(branch "Body Preserves Invariant"
   (builtin "One Step Simplification" (formula "12"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "translateJavaSubInt" (formula "12") (term "0,1,1,1,1,0,1,1"))
   (rule "translateJavaSubInt" (formula "12") (term "0,1,1,1,0,1"))
   (rule "andLeft" (formula "9"))
   (rule "impRight" (formula "13"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "eqSymm" (formula "13") (term "1,0"))
   (rule "eqSymm" (formula "16") (term "1,0,1,0,0,1,1,1,0,1"))
   (rule "eqSymm" (formula "16") (term "1,0,0,0,1,1,1,0,1"))
   (rule "eqSymm" (formula "16") (term "0,0,1,0,1,1,1,0,1"))
   (rule "eqSymm" (formula "12"))
   (rule "polySimp_elimSub" (formula "15") (term "0,1,1,1,0"))
   (rule "polySimp_elimSub" (formula "15") (term "0,1,1,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "15") (term "0,1,1,1,0"))
   (rule "polySimp_addComm0" (formula "15") (term "0,1,1,1,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,0,0,1,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "15") (term "1,0,0,0,0,1,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,0,0,1,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,0,0,1,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "10"))
   (rule "inEqSimp_commuteLeq" (formula "11"))
   (rule "variableDeclarationAssign" (formula "1") (term "1"))
   (rule "variableDeclarationAssign" (formula "15") (term "1"))
   (rule "variableDeclaration" (formula "1") (term "1") (newnames "b_2"))
   (rule "variableDeclaration" (formula "15") (term "1") (newnames "rtrn"))
   (rule "assignment" (formula "15") (term "1"))
   (builtin "One Step Simplification" (formula "15"))
   (rule "variableDeclaration" (formula "15") (term "1") (newnames "returnExpr"))
   (rule "variableDeclarationAssign" (formula "15") (term "1"))
   (rule "variableDeclaration" (formula "15") (term "1") (newnames "exc_1"))
   (rule "assignment" (formula "15") (term "1"))
   (builtin "One Step Simplification" (formula "15"))
   (rule "variableDeclaration" (formula "15") (term "1") (newnames "thrownExc"))
   (rule "blockReturn" (formula "15") (term "1,0,1,0,1"))
   (rule "blockThrow" (formula "15") (term "1,0,0,1"))
   (rule "blockReturn" (formula "15") (term "1,0,1,0,1"))
   (rule "blockThrow" (formula "15") (term "1,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,0,0,1,1,1,0,1"))
   (rule "mul_literals" (formula "15") (term "0,1,1,0,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,0,0,1,1,1,0,1"))
   (rule "array2seqDef" (formula "12") (term "0,1,0") (inst "u=u"))
   (rule "array2seqDef" (formula "12") (term "1,1,0") (inst "u=u"))
   (rule "array2seqDef" (formula "15") (term "0,1,0,1,0,0,1,1,1,0,1") (inst "u=u"))
   (rule "array2seqDef" (formula "15") (term "1,1,0,1,0,0,1,1,1,0,1") (inst "u=u"))
   (rule "eqSeqDef" (formula "12") (term "1,0") (inst "iv=iv"))
   (rule "lenOfSeqDef" (formula "12") (term "0,0,1,0"))
   (rule "eqSymm" (formula "12") (term "0,1,0"))
   (rule "polySimp_elimSub" (formula "12") (term "1,1,0,1,0"))
   (rule "times_zero_2" (formula "12") (term "1,1,1,0,1,0"))
   (rule "add_zero_right" (formula "12") (term "1,1,0,1,0"))
   (rule "getOfSeqDef" (formula "12") (term "1,1,0,1,1,0"))
   (rule "castDel" (formula "12") (term "1,1,1,0,1,1,0"))
   (rule "castDel" (formula "12") (term "2,1,1,0,1,1,0"))
   (rule "add_zero_right" (formula "12") (term "0,2,1,1,1,0,1,1,0"))
   (rule "polySimp_elimSub" (formula "12") (term "1,1,0,1,1,0,1,1,0"))
   (rule "times_zero_2" (formula "12") (term "1,1,1,0,1,1,0,1,1,0"))
   (rule "add_zero_right" (formula "12") (term "1,1,0,1,1,0,1,1,0"))
   (rule "getOfSeqDef" (formula "12") (term "0,1,0,1,1,0"))
   (rule "castDel" (formula "12") (term "1,0,1,0,1,1,0"))
   (rule "castDel" (formula "12") (term "2,0,1,0,1,1,0"))
   (rule "add_zero_right" (formula "12") (term "0,2,1,0,1,0,1,1,0"))
   (rule "polySimp_elimSub" (formula "12") (term "1,1,0,0,1,0,1,1,0"))
   (rule "times_zero_2" (formula "12") (term "1,1,1,0,0,1,0,1,1,0"))
   (rule "add_zero_right" (formula "12") (term "1,1,0,0,1,0,1,1,0"))
   (rule "lenOfSeqDef" (formula "12") (term "1,1,0,0,1,1,0"))
   (rule "polySimp_elimSub" (formula "12") (term "1,1,1,0,0,1,1,0"))
   (rule "times_zero_2" (formula "12") (term "1,1,1,1,0,0,1,1,0"))
   (rule "add_zero_right" (formula "12") (term "1,1,1,0,0,1,1,0"))
   (rule "lenOfSeqDef" (formula "12") (term "0,0,1,0"))
   (rule "eqSymm" (formula "12") (term "0,1,0"))
   (rule "polySimp_elimSub" (formula "12") (term "1,1,0,1,0"))
   (rule "times_zero_2" (formula "12") (term "1,1,1,0,1,0"))
   (rule "add_zero_right" (formula "12") (term "1,1,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,1,1,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,1,1,0,1,1,0"))
   (rule "polySimp_addComm1" (formula "12") (term "0,1,0,1,1,0,1,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,1,0,1,1,0"))
   (rule "polySimp_addComm1" (formula "12") (term "0,1,0,0,1,0,1,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "12") (term "0,1,1,0,0,1,1,0"))
   (rule "add_zero_right" (formula "12") (term "0,0,1,1,0,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,1,0,0,1,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,1,0"))
   (rule "add_zero_right" (formula "12") (term "0,0,0,0,1,0"))
   (rule "eqSymm" (formula "12") (term "0,1,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,1,1,0"))
   (rule "polySimp_addComm1" (formula "12") (term "0,1,0,0,1,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,1,0"))
   (rule "add_zero_right" (formula "12") (term "0,0,0,0,1,0"))
   (rule "eqSymm" (formula "12") (term "0,1,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,1,1,0,1,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1,0,1,1,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "1,0,1,1,0,1,1,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,1,1,0,1,1,0"))
   (rule "polySimp_elimOne" (formula "12") (term "0,1,0,1,1,0,1,1,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "1,0,0,1,0,1,1,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0,1,0,1,1,0"))
   (rule "polySimp_elimOne" (formula "12") (term "0,1,0,0,1,0,1,1,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "1,0,0,1,1,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0,1,1,0"))
   (rule "polySimp_elimOne" (formula "12") (term "0,1,0,0,1,1,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,0,1,0"))
   (rule "eqSymm" (formula "12") (term "0,1,0"))
   (rule "polySimp_elimOne" (formula "12") (term "0,0,1,0,1,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0,1,0,0,1,1,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,1,0,0,1,1,0"))
   (rule "polySimp_elimOne" (formula "12") (term "0,0,0,1,0,0,1,1,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,0,1,0"))
   (rule "eqSymm" (formula "12") (term "0,1,0"))
   (rule "polySimp_elimOne" (formula "12") (term "0,0,1,0,1,0"))
   (rule "eqSeqDef" (formula "15") (term "1,0,1,0,0,1,1,1,0,1") (inst "iv=iv"))
   (rule "lenOfSeqDef" (formula "15") (term "0,0,1,0,1,0,0,1,1,1,0,1"))
   (rule "eqSymm" (formula "15") (term "0,1,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "15") (term "1,1,0,1,0,1,0,0,1,1,1,0,1"))
   (rule "times_zero_2" (formula "15") (term "1,1,1,0,1,0,1,0,0,1,1,1,0,1"))
   (rule "add_zero_right" (formula "15") (term "1,1,0,1,0,1,0,0,1,1,1,0,1"))
   (rule "getOfSeqDef" (formula "15") (term "0,1,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "castDel" (formula "15") (term "1,0,1,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "castDel" (formula "15") (term "2,0,1,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "add_zero_right" (formula "15") (term "0,2,1,0,1,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "eqSymm" (formula "15") (term "1,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "15") (term "1,1,0,1,1,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "times_zero_2" (formula "15") (term "1,1,1,0,1,1,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "add_zero_right" (formula "15") (term "1,1,0,1,1,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "lenOfSeqDef" (formula "15") (term "1,1,0,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "15") (term "1,1,1,0,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "times_zero_2" (formula "15") (term "1,1,1,1,0,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "add_zero_right" (formula "15") (term "1,1,1,0,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "lenOfSeqDef" (formula "15") (term "0,0,1,0,1,0,0,1,1,1,0,1"))
   (rule "eqSymm" (formula "15") (term "0,1,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "15") (term "1,1,0,1,0,1,0,0,1,1,1,0,1"))
   (rule "times_zero_2" (formula "15") (term "1,1,1,0,1,0,1,0,0,1,1,1,0,1"))
   (rule "add_zero_right" (formula "15") (term "1,1,0,1,0,1,0,0,1,1,1,0,1"))
   (rule "getOfSeqDef" (formula "15") (term "0,1,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "castDel" (formula "15") (term "1,0,1,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "castDel" (formula "15") (term "2,0,1,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "add_zero_right" (formula "15") (term "0,2,1,0,1,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "eqSymm" (formula "15") (term "1,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "15") (term "1,1,0,1,1,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "times_zero_2" (formula "15") (term "1,1,1,0,1,1,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "add_zero_right" (formula "15") (term "1,1,0,1,1,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "15") (term "0,1,1,0,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "add_zero_right" (formula "15") (term "0,0,1,1,0,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,1,0,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0,1,0,1,0,0,1,1,1,0,1"))
   (rule "add_zero_right" (formula "15") (term "0,0,0,0,1,0,1,0,0,1,1,1,0,1"))
   (rule "eqSymm" (formula "15") (term "0,1,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,1,0,1,0,0,1,1,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "eqSymm" (formula "15") (term "1,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,1,1,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_addComm1" (formula "15") (term "0,1,0,1,1,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_addComm1" (formula "15") (term "0,1,0,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0,1,0,1,0,0,1,1,1,0,1"))
   (rule "add_zero_right" (formula "15") (term "0,0,0,0,1,0,1,0,0,1,1,1,0,1"))
   (rule "eqSymm" (formula "15") (term "0,1,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,1,0,1,0,0,1,1,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "eqSymm" (formula "15") (term "1,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,1,1,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_addComm1" (formula "15") (term "0,1,0,1,1,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,1,1,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,0,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_elimOne" (formula "15") (term "0,1,0,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,0,1,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,0,1,0,1,0,0,1,1,1,0,1"))
   (rule "eqSymm" (formula "15") (term "0,1,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_elimOne" (formula "15") (term "0,0,1,0,1,0,1,0,0,1,1,1,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,0,0,1,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0,1,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "eqSymm" (formula "15") (term "1,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_elimOne" (formula "15") (term "0,1,0,1,1,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,1,0,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1,0,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1,0,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,0,1,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,0,1,0,1,0,0,1,1,1,0,1"))
   (rule "eqSymm" (formula "15") (term "0,1,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_elimOne" (formula "15") (term "0,0,1,0,1,0,1,0,0,1,1,1,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,0,0,1,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0,1,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "eqSymm" (formula "15") (term "1,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_elimOne" (formula "15") (term "0,1,0,1,1,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "boxToDiamond" (formula "1") (term "1"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "nnf_imp2or" (formula "11") (term "0"))
   (rule "nnf_notAnd" (formula "11") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
   (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "11") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
   (rule "mul_literals" (formula "11") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
   (rule "nnf_imp2or" (formula "11") (term "0,1,1,0"))
   (rule "nnf_notAnd" (formula "11") (term "0,0,1,1,0"))
   (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,1,1,0"))
   (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,1,1,0"))
   (rule "add_literals" (formula "11") (term "0,0,0,0,0,1,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,1,0"))
   (rule "mul_literals" (formula "11") (term "1,0,0,0,1,1,0"))
   (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0,1,1,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,1,1,0"))
   (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,1,1,0"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,1,1,0"))
   (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,1,1,0"))
   (rule "add_zero_left" (formula "11") (term "0,0,1,0,0,1,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,1,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,1,1,0"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,1,1,0"))
   (rule "nnf_imp2or" (formula "15") (term "0,1,0,0,1,1,1,0,1"))
   (rule "nnf_notAnd" (formula "15") (term "0,0,1,0,0,1,1,1,0,1"))
   (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,1,0,0,1,1,1,0,1"))
   (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,1,0,0,1,1,1,0,1"))
   (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,1,0,0,1,1,1,0,1"))
   (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,1,0,0,1,1,1,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,1,0,0,1,1,1,0,1"))
   (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,1,0,0,1,1,1,0,1"))
   (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0,1,0,0,1,1,1,0,1"))
   (rule "add_zero_right" (formula "15") (term "0,0,0,0,0,1,0,0,1,1,1,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,1,0,0,1,1,1,0,1"))
   (rule "mul_literals" (formula "15") (term "1,0,0,0,1,0,0,1,1,1,0,1"))
   (rule "nnf_imp2or" (formula "15") (term "0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "nnf_notAnd" (formula "15") (term "0,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "add_zero_right" (formula "15") (term "0,0,0,0,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "mul_literals" (formula "15") (term "1,0,0,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,1,1,0,1,0,0,1,1,1,0,1"))
   (rule "arrayLengthNotNegative" (formula "5") (term "1"))
   (rule "arrayLengthNotNegative" (formula "6") (term "0"))
   (rule "arrayLengthIsAShort" (formula "7") (term "1"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "true_left" (formula "7"))
   (rule "arrayLengthIsAShort" (formula "7") (term "0"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "true_left" (formula "7"))
   (rule "commute_or_2" (formula "13") (term "0,1,1,0"))
   (rule "compound_less_than_comparison_2" (formula "14") (term "1") (inst "#v1=x_1") (inst "#v0=x"))
   (rule "variableDeclarationAssign" (formula "14") (term "1"))
   (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_2"))
   (rule "assignment" (formula "14") (term "1"))
   (builtin "One Step Simplification" (formula "14"))
   (rule "variableDeclarationAssign" (formula "14") (term "1"))
   (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_3"))
   (rule "assignment_read_length" (formula "14") (term "1"))
   (branch "Normal Execution (_a1 != null)"
      (builtin "One Step Simplification" (formula "15"))
      (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "16")))
      (rule "false_right" (formula "14"))
      (rule "ifthenelse_to_or_right" (formula "13") (term "0,1,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "inEqSimp_notGeq" (formula "13") (term "0,1,1,0,1,0"))
      (rule "mul_literals" (formula "13") (term "1,0,0,0,1,1,0,1,0"))
      (rule "add_literals" (formula "13") (term "0,0,0,1,1,0,1,0"))
      (rule "add_zero_left" (formula "13") (term "0,0,1,1,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,1,0"))
      (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,1,0"))
      (rule "add_literals" (formula "13") (term "0,0,0,0,0,1,0"))
      (rule "add_zero_left" (formula "13") (term "0,0,0,0,1,0"))
      (rule "commute_or" (formula "13") (term "0,0,1,1,0"))
      (rule "shift_paren_or" (formula "13") (term "1,0,1,0"))
      (rule "less_than_comparison_simple" (formula "14") (term "1"))
      (builtin "One Step Simplification" (formula "14"))
      (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
      (rule "polySimp_addComm1" (formula "14") (term "0,0,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0,0"))
      (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,0"))
      (rule "polySimp_elimOne" (formula "14") (term "0,0,0,0"))
      (rule "methodCallEmpty" (formula "14") (term "1"))
      (rule "emptyModality" (formula "14") (term "1"))
      (builtin "One Step Simplification" (formula "14"))
      (rule "notRight" (formula "14"))
      (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "1"))
      (rule "inEqSimp_homoInEq0" (formula "13") (term "0"))
      (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0"))
      (rule "add_literals" (formula "13") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "13") (term "1,0,0"))
      (rule "add_zero_right" (formula "13") (term "0,0"))
      (rule "qeq_literals" (formula "13") (term "0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "true_left" (formula "13"))
      (rule "methodCallReturn" (formula "16") (term "1,0,1,0,1"))
      (rule "assignment" (formula "16") (term "1,0,1,0,1"))
      (rule "methodCallParamThrow" (formula "16") (term "1,0,0,1"))
      (rule "ifthenelse_to_or_left" (formula "13") (term "1,0,0,1,0"))
      (rule "eqSymm" (formula "13") (term "1,1,1,0,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "13") (term "0,0,1,0,0,1,0"))
      (rule "mul_literals" (formula "13") (term "1,0,0,0,0,1,0,0,1,0"))
      (rule "add_literals" (formula "13") (term "0,0,0,0,1,0,0,1,0"))
      (rule "add_zero_left" (formula "13") (term "0,0,0,1,0,0,1,0"))
      (rule "commute_or" (formula "13") (term "1,1,0,0,1,0"))
      (rule "cnf_rightDist" (formula "13") (term "0,0,1,0"))
      (rule "commute_or_2" (formula "13") (term "1,0,0,1,0"))
      (rule "inEqSimp_or_subsumption4" (formula "13") (term "0,1,0,0,1,0"))
      (rule "greater_literals" (formula "13") (term "0,0,0,1,0,0,1,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "shift_paren_or" (formula "13") (term "0,0,0,1,0"))
      (rule "ifthenelse_to_or_left" (formula "13") (term "0,0,0,1,1,0"))
      (rule "eqSymm" (formula "13") (term "1,1,0,0,0,1,1,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "eqSymm" (formula "13") (term "1,0,0,0,0,1,1,0"))
      (rule "nnf_notAnd" (formula "13") (term "0,0,0,0,0,1,1,0"))
      (rule "inEqSimp_notGeq" (formula "13") (term "1,0,0,0,0,0,1,1,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
      (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,0,0,0,1,1,0"))
      (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0,0,0,1,1,0"))
      (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0,0,0,1,1,0"))
      (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,0,0,0,1,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0,0,0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0,1,1,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0,1,1,0"))
      (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,0,0,0,1,1,0"))
      (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
      (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,0,0,0,1,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0,0,1,1,0"))
      (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,0,1,1,0"))
      (rule "nnf_notAnd" (formula "13") (term "0,1,1,0,0,0,1,1,0"))
      (rule "inEqSimp_notGeq" (formula "13") (term "1,0,1,1,0,0,0,1,1,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,1,1,0,0,0,1,1,0"))
      (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,1,1,0,0,0,1,1,0"))
      (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
      (rule "add_literals" (formula "13") (term "0,0,0,1,0,1,1,0,0,0,1,1,0"))
      (rule "add_zero_left" (formula "13") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,1,1,0,0,0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,1,1,0,0,0,1,1,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1,0,1,1,0,0,0,1,1,0"))
      (rule "inEqSimp_notGeq" (formula "13") (term "0,0,1,1,0,0,0,1,1,0"))
      (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,1,1,0,0,0,1,1,0"))
      (rule "add_literals" (formula "13") (term "0,0,0,0,1,1,0,0,0,1,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,1,1,0,0,0,1,1,0"))
      (rule "mul_literals" (formula "13") (term "1,0,0,1,1,0,0,0,1,1,0"))
      (rule "commute_or" (formula "13") (term "0,0,1,1,0"))
      (rule "commute_or_2" (formula "13") (term "0,1,1,0"))
      (rule "commute_or" (formula "13") (term "1,1,0,1,1,0"))
      (rule "commute_or_2" (formula "13") (term "0,1,0,1,1,0"))
      (rule "commute_or_2" (formula "13") (term "0,1,1,0,1,1,0"))
      (rule "commute_or" (formula "13") (term "0,0,1,0,1,1,0"))
      (rule "commute_or" (formula "13") (term "0,0,1,1,0,1,1,0"))
      (rule "cnf_rightDist" (formula "13") (term "1,1,0,1,1,0"))
      (rule "commute_or" (formula "13") (term "1,1,1,0,1,1,0"))
      (rule "cnf_rightDist" (formula "13") (term "0,1,1,0"))
      (rule "commute_or" (formula "13") (term "1,0,1,1,0"))
      (rule "commute_or_2" (formula "13") (term "0,0,1,1,0"))
      (rule "commute_or_2" (formula "13") (term "0,1,1,0,1,1,0"))
      (rule "inEqSimp_or_tautInEq1" (formula "13") (term "0,0,1,1,0,1,1,0"))
      (rule "add_zero_right" (formula "13") (term "1,1,0,0,1,1,0,1,1,0"))
      (rule "qeq_literals" (formula "13") (term "1,0,0,1,1,0,1,1,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "commute_or_2" (formula "13") (term "1,0,1,1,0"))
      (rule "shift_paren_or" (formula "13") (term "0,0,0,1,1,0"))
      (rule "shift_paren_or" (formula "13") (term "0,1,0,1,1,0"))
      (rule "shift_paren_or" (formula "13") (term "0,0,0,0,1,1,0"))
      (rule "shift_paren_or" (formula "13") (term "0,0,1,0,1,1,0"))
      (rule "commute_or" (formula "13") (term "0,0,0,0,0,1,1,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "ifUnfold" (formula "16") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_4"))
      (rule "compound_less_than_comparison_2" (formula "16") (term "1") (inst "#v1=x_6") (inst "#v0=x_5"))
      (rule "variableDeclarationAssign" (formula "16") (term "1"))
      (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_5"))
      (rule "assignment" (formula "16") (term "1"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "variableDeclarationAssign" (formula "16") (term "1"))
      (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_6"))
      (rule "assignment_read_length" (formula "16") (term "1"))
      (branch "Normal Execution (_a1 != null)"
         (builtin "One Step Simplification" (formula "17"))
         (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "14")))
         (rule "false_right" (formula "16"))
         (rule "less_than_comparison_simple" (formula "16") (term "1"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,1,0"))
         (rule "polySimp_addComm1" (formula "16") (term "0,0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "16") (term "0,0,0,1,0"))
         (rule "replace_known_left" (formula "16") (term "0,0,1,0") (ifseqformula "1"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "shift_paren_or" (formula "13") (term "0,0,0,1,0,1,1,0"))
         (rule "commute_or" (formula "13") (term "0,0,0,0,1,0,1,1,0"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "all_pull_out1" (formula "13") (term "1,0"))
         (rule "shift_paren_and" (formula "13") (term "0,1,0"))
         (rule "all_pull_out3" (formula "13") (term "0"))
         (rule "cnf_rightDist" (formula "13") (term "0,0"))
         (rule "distr_forallAnd" (formula "13") (term "0"))
         (rule "distr_forallAnd" (formula "13"))
         (rule "andLeft" (formula "13"))
         (rule "commute_or_2" (formula "14") (term "0,0"))
         (rule "commute_or_2" (formula "14") (term "0,0,0"))
         (rule "commute_or_2" (formula "14") (term "0,0,0,0"))
         (rule "cnf_rightDist" (formula "13") (term "0,0"))
         (rule "distr_forallAnd" (formula "13") (term "0"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "distr_forallAnd" (formula "13"))
         (rule "andLeft" (formula "13"))
         (rule "commute_or_2" (formula "14") (term "0,0"))
         (rule "commute_or_2" (formula "14") (term "0,0,0"))
         (rule "cnf_rightDist" (formula "13") (term "0"))
         (rule "distr_forallAnd" (formula "13"))
         (rule "andLeft" (formula "13"))
         (rule "commute_or_2" (formula "14") (term "0"))
         (rule "commute_or_2" (formula "14") (term "0,0"))
         (rule "commute_or" (formula "14") (term "0,0,0"))
         (rule "cnf_rightDist" (formula "13") (term "0"))
         (rule "distr_forallAnd" (formula "13"))
         (rule "andLeft" (formula "13"))
         (rule "commute_or_2" (formula "14") (term "0"))
         (rule "shift_paren_or" (formula "13") (term "0"))
         (rule "commute_or" (formula "14") (term "0,0"))
         (rule "shift_paren_or" (formula "13") (term "0,0"))
         (rule "shift_paren_or" (formula "16") (term "0,0,0,0"))
         (rule "shift_paren_or" (formula "17") (term "0,0,0,0,0"))
         (rule "ifthenelse_to_or_left" (formula "16") (term "0,0,0,0,0,0,0"))
         (rule "eqSymm" (formula "16") (term "1,0,0,0,0,0,0,0,0"))
         (rule "eqSymm" (formula "16") (term "1,1,0,0,0,0,0,0,0"))
         (rule "nnf_notAnd" (formula "16") (term "0,0,0,0,0,0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "16") (term "1,0,0,0,0,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0,0,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0,0,0,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
         (rule "add_literals" (formula "16") (term "0,0,0,1,0,0,0,0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "16") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,0,0,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0,0,0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0,0,0,0,0,0,0,0"))
         (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "16") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0,0,0,0,0,0"))
         (rule "commute_or" (formula "16") (term "0,0,0,0,0,0"))
         (rule "commute_or_2" (formula "16") (term "0,0,0,0,0"))
         (rule "commute_or_2" (formula "16") (term "0,0,0,0"))
         (rule "commute_or_2" (formula "16") (term "0,0,0"))
         (rule "commute_or_2" (formula "16") (term "0,0"))
         (rule "commute_or" (formula "16") (term "1,1,0,0"))
         (rule "commute_or_2" (formula "16") (term "0,1,0,0"))
         (rule "commute_or" (formula "16") (term "0,0,1,0,0"))
         (rule "cnf_rightDist" (formula "16") (term "1,1,0,0"))
         (rule "cnf_rightDist" (formula "16") (term "0,0"))
         (rule "distr_forallAnd" (formula "16") (term "0"))
         (rule "distr_forallAnd" (formula "16"))
         (rule "andLeft" (formula "16"))
         (rule "commute_or" (formula "17") (term "0,0"))
         (rule "commute_or_2" (formula "16") (term "0,0"))
         (rule "commute_or_2" (formula "16") (term "0,0,0"))
         (rule "commute_or" (formula "17") (term "1,1,0,0"))
         (rule "cnf_rightDist" (formula "17") (term "0,0"))
         (rule "distr_forallAnd" (formula "17") (term "0"))
         (rule "distr_forallAnd" (formula "17"))
         (rule "andLeft" (formula "17"))
         (rule "commute_or_2" (formula "17") (term "0,0"))
         (rule "shift_paren_or" (formula "18") (term "0,0"))
         (rule "commute_or_2" (formula "17") (term "0,0,0"))
         (rule "shift_paren_or" (formula "18") (term "0,0,0"))
         (rule "commute_or_2" (formula "17") (term "0,0,0,0"))
         (rule "commute_or_2" (formula "18") (term "0,0,0,0"))
         (rule "shift_paren_or" (formula "16") (term "0,0,0,0"))
         (rule "commute_or_2" (formula "17") (term "0,0,0,0,0"))
         (rule "commute_or_2" (formula "16") (term "0,0,0,0,0"))
         (rule "shift_paren_or" (formula "18") (term "0,0,0,0,0"))
         (rule "commute_or_2" (formula "16") (term "0,0,0,0,0,0"))
         (rule "shift_paren_or" (formula "17") (term "0,0,0,0,0,0"))
         (rule "shift_paren_or" (formula "18") (term "0,0,0,0,0,0"))
         (rule "commute_or" (formula "17") (term "0,0,0,0,0,0,0"))
         (rule "inEqSimp_or_tautInEq1" (formula "17") (term "0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "17") (term "1,1,0,0,0,0,0,0"))
         (rule "qeq_literals" (formula "17") (term "1,0,0,0,0,0,0"))
         (builtin "One Step Simplification" (formula "17"))
         (rule "true_left" (formula "17"))
         (rule "shift_paren_or" (formula "16") (term "0,0,0,0,0,0,0"))
         (rule "commute_or" (formula "16") (term "0,0,0,0,0,0,0,0"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "ifSplit" (formula "21"))
         (branch "if x_4 true"
            (builtin "One Step Simplification" (formula "22"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "ifUnfold" (formula "21") (term "1") (inst "#boolv=x"))
            (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_7"))
            (rule "compound_assignment_2" (formula "21") (term "1") (inst "#v=x_8"))
            (rule "variableDeclarationAssign" (formula "21") (term "1"))
            (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_8"))
            (rule "methodCallWithAssignmentUnfoldArguments" (formula "21") (term "1"))
            (rule "variableDeclarationAssign" (formula "21") (term "1"))
            (rule "variableDeclaration" (formula "21") (term "1") (newnames "var"))
            (rule "assignment_array2" (formula "21") (term "1"))
            (branch "Normal Execution (_a1 != null)"
               (builtin "One Step Simplification" (formula "22"))
               (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "19")))
               (rule "orRight" (formula "21"))
               (rule "inEqSimp_ltRight" (formula "22"))
               (rule "times_zero_1" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_leqRight" (formula "21"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "variableDeclarationAssign" (formula "22") (term "1"))
               (rule "variableDeclaration" (formula "22") (term "1") (newnames "var_1"))
               (rule "assignment_array2" (formula "22") (term "1"))
               (branch "Normal Execution (_a2 != null)"
                  (builtin "One Step Simplification" (formula "23"))
                  (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "21")))
                  (rule "orRight" (formula "22"))
                  (rule "inEqSimp_leqRight" (formula "22"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "inEqSimp_ltRight" (formula "23"))
                  (rule "times_zero_1" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "mul_literals" (formula "2") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "mul_literals" (formula "1") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (builtin "Use Operation Contract" (formula "22") (newnames "heapBefore_equal,result_0,exc_0") (contract "verif.utils.MessageTools[verif.utils.MessageTools::equal([B,[B)].JML normal_behavior operation contract.0"))
                  (branch "Post (equal)"
                     (builtin "One Step Simplification" (formula "20"))
                     (builtin "One Step Simplification" (formula "23"))
                     (rule "andLeft" (formula "20"))
                     (rule "andLeft" (formula "21"))
                     (rule "eqSymm" (formula "21") (term "0,1"))
                     (rule "eqSymm" (formula "21"))
                     (rule "assignment" (formula "24") (term "1"))
                     (builtin "One Step Simplification" (formula "24"))
                     (rule "blockEmpty" (formula "24") (term "1"))
                     (rule "array2seqDef" (formula "21") (term "1,0,0") (inst "u=u"))
                     (rule "eqSymm" (formula "21") (term "0,0"))
                     (rule "array2seqDef" (formula "21") (term "1,0,0") (inst "u=u"))
                     (rule "eqSymm" (formula "21") (term "0,0"))
                     (rule "eqSeqDef" (formula "21") (term "0,0") (inst "iv=iv"))
                     (rule "lenOfSeqDef" (formula "21") (term "1,1,0,0,1,0,0"))
                     (rule "polySimp_elimSub" (formula "21") (term "1,1,1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "21") (term "1,1,1,1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "21") (term "1,1,1,0,0,1,0,0"))
                     (rule "lenOfSeqDef" (formula "21") (term "0,0,0,0"))
                     (rule "eqSymm" (formula "21") (term "0,0,0"))
                     (rule "polySimp_elimSub" (formula "21") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "21") (term "1,1,1,0,0,0"))
                     (rule "add_zero_right" (formula "21") (term "1,1,0,0,0"))
                     (rule "getOfSeqDef" (formula "21") (term "1,1,0,1,0,0"))
                     (rule "castDel" (formula "21") (term "2,1,1,0,1,0,0"))
                     (rule "castDel" (formula "21") (term "1,1,1,0,1,0,0"))
                     (rule "add_zero_right" (formula "21") (term "0,2,1,1,1,0,1,0,0"))
                     (rule "polySimp_elimSub" (formula "21") (term "1,1,0,1,1,0,1,0,0"))
                     (rule "times_zero_2" (formula "21") (term "1,1,1,0,1,1,0,1,0,0"))
                     (rule "add_zero_right" (formula "21") (term "1,1,0,1,1,0,1,0,0"))
                     (rule "getOfSeqDef" (formula "21") (term "0,1,0,1,0,0"))
                     (rule "castDel" (formula "21") (term "1,0,1,0,1,0,0"))
                     (rule "castDel" (formula "21") (term "2,0,1,0,1,0,0"))
                     (rule "add_zero_right" (formula "21") (term "0,2,1,0,1,0,1,0,0"))
                     (rule "polySimp_elimSub" (formula "21") (term "1,1,0,0,1,0,1,0,0"))
                     (rule "times_zero_2" (formula "21") (term "1,1,1,0,0,1,0,1,0,0"))
                     (rule "add_zero_right" (formula "21") (term "1,1,0,0,1,0,1,0,0"))
                     (rule "lenOfSeqDef" (formula "21") (term "0,0,0,0"))
                     (rule "eqSymm" (formula "21") (term "0,0,0"))
                     (rule "polySimp_elimSub" (formula "21") (term "1,1,0,0,0"))
                     (rule "times_zero_2" (formula "21") (term "1,1,1,0,0,0"))
                     (rule "add_zero_right" (formula "21") (term "1,1,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "21") (term "0,1,1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "21") (term "0,0,1,1,0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,1,1,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,1,1,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,1,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,1,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0,0,0,0"))
                     (rule "add_zero_right" (formula "21") (term "0,0,0,0,0,0"))
                     (rule "eqSymm" (formula "21") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0,0,0,0"))
                     (rule "add_zero_right" (formula "21") (term "0,0,0,0,0,0"))
                     (rule "eqSymm" (formula "21") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,1,1,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,1,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,1,1,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,1,1,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,1,0,1,1,0,1,0,0"))
                     (rule "mul_literals" (formula "21") (term "0,1,1,0,1,1,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,1,1,0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,1,1,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,1,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0,1,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0,1,0,1,0,0"))
                     (rule "mul_literals" (formula "21") (term "0,1,1,0,0,1,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0,1,0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0,1,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "21") (term "0,1,1,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0,1,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "0,0,0,0,0,0"))
                     (rule "eqSymm" (formula "21") (term "0,0,0"))
                     (rule "polySimp_elimOne" (formula "21") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,1,1,1,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "0,0,1,1,1,0,0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "21") (term "0,0,1,1,1,0,0,1,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "0,0,0,0,0,0"))
                     (rule "eqSymm" (formula "21") (term "0,0,0"))
                     (rule "polySimp_elimOne" (formula "21") (term "0,0,1,0,0,0"))
                     (rule "nnf_imp2or" (formula "21") (term "0,1,0,0"))
                     (rule "nnf_notAnd" (formula "21") (term "0,0,1,0,0"))
                     (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,1,0,0"))
                     (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,1,0,0"))
                     (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "21") (term "0,0,0,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,1,0,0"))
                     (rule "mul_literals" (formula "21") (term "1,0,0,0,1,0,0"))
                     (rule "compound_assignment_1_new" (formula "24") (term "1"))
                     (builtin "One Step Simplification" (formula "24"))
                     (rule "commute_or_2" (formula "21") (term "0,1,0,0"))
                     (rule "commute_or" (formula "21") (term "0,0,1,0,0"))
                     (rule "ifSplit" (formula "24"))
                     (branch "if x_7 true"
                        (builtin "One Step Simplification" (formula "25"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "assignment" (formula "25") (term "1"))
                        (builtin "One Step Simplification" (formula "25"))
                        (rule "assignment" (formula "25") (term "1"))
                        (builtin "One Step Simplification" (formula "25"))
                        (rule "blockBreakNoLabel" (formula "25") (term "1"))
                        (rule "apply_eq_boolean" (formula "21") (term "1") (ifseqformula "22"))
                        (builtin "One Step Simplification" (formula "21"))
                        (rule "notLeft" (formula "21"))
                        (rule "blockBreakLabel" (formula "25") (term "1"))
                        (rule "blockEmpty" (formula "25") (term "1"))
                        (rule "tryEmpty" (formula "25") (term "1"))
                        (rule "methodCallEmpty" (formula "25") (term "1"))
                        (rule "emptyModality" (formula "25") (term "1"))
                        (builtin "One Step Simplification" (formula "25"))
                        (rule "methodCallEmpty" (formula "25") (term "1"))
                        (rule "tryEmpty" (formula "25") (term "1"))
                        (rule "emptyModality" (formula "25") (term "1"))
                        (builtin "One Step Simplification" (formula "25"))
                        (rule "notRight" (formula "25") (userinteraction))
                        (rule "array2seq2dDef" (formula "1") (term "0") (inst "u=u") (userinteraction))
                        (rule "array2seq2dDef" (formula "1") (term "1") (inst "u=u") (userinteraction))
                        (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                        (rule "applyEq" (formula "2") (term "0") (ifseqformula "9"))
                        (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "8"))
                        (rule "array2seqDef" (formula "1") (term "2,0") (inst "u=u_1"))
                        (rule "array2seqDef" (formula "1") (term "2,1") (inst "u=u_1"))
                        (rule "eqSeqDef" (formula "1") (inst "iv=iv"))
                        (rule "andLeft" (formula "1"))
                        (rule "lenOfSeqDef" (formula "1") (term "0"))
                        (rule "eqSymm" (formula "1"))
                        (rule "polySimp_elimSub" (formula "1") (term "1,1"))
                        (rule "times_zero_2" (formula "1") (term "1,1,1"))
                        (rule "add_zero_right" (formula "1") (term "1,1"))
                        (rule "getOfSeqDef" (formula "2") (term "1,1,0"))
                        (rule "castDel" (formula "2") (term "1,1,1,0"))
                        (rule "castDel" (formula "2") (term "2,1,1,0"))
                        (rule "add_zero_right" (formula "2") (term "0,2,1,2,1,1,1,0"))
                        (rule "add_zero_right" (formula "2") (term "0,2,0,1,1,1,1,0"))
                        (rule "eqSymm" (formula "2") (term "1,0"))
                        (rule "polySimp_elimSub" (formula "2") (term "1,1,0,0,1,0"))
                        (rule "times_zero_2" (formula "2") (term "1,1,1,0,0,1,0"))
                        (rule "add_zero_right" (formula "2") (term "1,1,0,0,1,0"))
                        (rule "lenOfSeqDef" (formula "2") (term "1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "2") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "2") (term "1,1,1,1,0,0"))
                        (rule "add_zero_right" (formula "2") (term "1,1,1,0,0"))
                        (rule "lenOfSeqDef" (formula "1") (term "0"))
                        (rule "polySimp_elimSub" (formula "1") (term "1,0"))
                        (rule "mul_literals" (formula "1") (term "1,1,0"))
                        (rule "add_zero_right" (formula "1") (term "1,0"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "getOfSeqDef" (formula "1") (term "1,1,0"))
                        (rule "castDel" (formula "1") (term "2,1,1,0"))
                        (rule "castDel" (formula "1") (term "1,1,1,0"))
                        (rule "add_zero_right" (formula "1") (term "0,2,1,2,1,1,1,0"))
                        (rule "add_zero_right" (formula "1") (term "0,2,0,1,1,1,1,0"))
                        (rule "eqSymm" (formula "1") (term "1,0"))
                        (rule "polySimp_elimSub" (formula "1") (term "1,1,0,0,1,0"))
                        (rule "times_zero_2" (formula "1") (term "1,1,1,0,0,1,0"))
                        (rule "add_zero_right" (formula "1") (term "1,1,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1,1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,1,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,1,0"))
                        (rule "eqSymm" (formula "1") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,1,1,0"))
                        (rule "eqSymm" (formula "1") (term "1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,1,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1,0"))
                        (rule "eqSymm" (formula "1") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,1,1,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,1,1,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,1,0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,1,1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,1,0,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,0,0,1,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,0"))
                        (rule "eqSymm" (formula "1") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                        (rule "nnf_imp2or" (formula "1") (term "0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                        (rule "commute_or_2" (formula "1") (term "0"))
                        (rule "commute_or" (formula "1") (term "0,0"))
                        (rule "ifthenelse_to_or_left" (formula "1") (term "0,0,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                        (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0,0,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0,1,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,0,0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,1,1,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "1") (term "0,0,1,1,0,0,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,1,1,0,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0,0,1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,1,1,0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,1,1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "1") (term "1,0,1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,1,1,0,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,1,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,1,1,0,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,1,0,1,1,0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0,1,0,1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,0,1,1,0,0,0"))
                        (rule "commute_or" (formula "1") (term "0,0"))
                        (rule "commute_or_2" (formula "1") (term "0"))
                        (rule "commute_or" (formula "1") (term "1,1,0"))
                        (rule "commute_or_2" (formula "1") (term "0,1,0"))
                        (rule "commute_or_2" (formula "1") (term "0,1,1,0"))
                        (rule "commute_or" (formula "1") (term "0,0,1,0"))
                        (rule "commute_or" (formula "1") (term "0,0,1,1,0"))
                        (rule "cnf_rightDist" (formula "1") (term "1,1,0"))
                        (rule "commute_or_2" (formula "1") (term "0,1,1,0"))
                        (rule "inEqSimp_or_tautInEq1" (formula "1") (term "0,0,1,1,0"))
                        (rule "add_zero_right" (formula "1") (term "1,1,0,0,1,1,0"))
                        (rule "qeq_literals" (formula "1") (term "1,0,0,1,1,0"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "shift_paren_or" (formula "1") (term "1,1,0"))
                        (rule "commute_or" (formula "1") (term "0,1,1,0"))
                        (rule "inEqSimp_or_tautInEq1" (formula "1") (term "1,1,0"))
                        (rule "inEqSimp_homoInEq1" (formula "1") (term "1,1,1,0"))
                        (rule "polySimp_pullOutFactor1" (formula "1") (term "0,1,1,1,0"))
                        (rule "add_literals" (formula "1") (term "1,0,1,1,1,0"))
                        (rule "times_zero_1" (formula "1") (term "0,1,1,1,0"))
                        (rule "leq_literals" (formula "1") (term "1,1,1,0"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "commute_or_2" (formula "1") (term "0"))
                        (rule "shift_paren_or" (formula "1") (term "0,0"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                        (rule "commute_or" (formula "1") (term "0,0,0,0"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "ifthenelse_split" (formula "20") (term "0,0"))
                        (branch "a2[i_0].length >= 1 TRUE"
                           (rule "eqSymm" (formula "21") (term "0"))
                           (rule "replace_known_left" (formula "21") (term "0,1,1,0,1") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "21"))
                           (rule "ifthenelse_to_or_left" (formula "2") (term "0,0,0,0"))
                           (rule "eqSymm" (formula "2") (term "1,1,0,0,0,0"))
                           (rule "eqSymm" (formula "2") (term "1,0,0,0,0,0"))
                           (rule "eqSeqDef" (formula "2") (term "1,0,0,0,0,0") (inst "iv=iv_1"))
                           (rule "lenOfSeqDef" (formula "2") (term "1,0,1,0,0,0,0,0"))
                           (rule "polySimp_elimSub" (formula "2") (term "1,1,0,1,0,0,0,0,0"))
                           (rule "times_zero_2" (formula "2") (term "1,1,1,0,1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "2") (term "1,1,0,1,0,0,0,0,0"))
                           (rule "lenOfSeqDef" (formula "2") (term "1,1,0,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_elimSub" (formula "2") (term "1,1,1,0,0,1,1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "2") (term "1,1,1,1,0,0,1,1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "2") (term "1,1,1,0,0,1,1,0,0,0,0,0"))
                           (rule "getOfSeqDef" (formula "2") (term "0,1,0,1,1,0,0,0,0,0"))
                           (rule "castDel" (formula "2") (term "1,0,1,0,1,1,0,0,0,0,0"))
                           (rule "castDel" (formula "2") (term "2,0,1,0,1,1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "2") (term "0,2,1,0,1,0,1,1,0,0,0,0,0"))
                           (rule "eqSymm" (formula "2") (term "1,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_elimSub" (formula "2") (term "1,1,0,1,1,0,1,1,0,0,0,0,0"))
                           (rule "times_zero_2" (formula "2") (term "1,1,1,0,1,1,0,1,1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "2") (term "1,1,0,1,1,0,1,1,0,0,0,0,0"))
                           (rule "lenOfSeqDef" (formula "2") (term "0,0,1,0,0,0,0,0"))
                           (rule "polySimp_elimSub" (formula "2") (term "1,0,0,1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "2") (term "1,1,0,0,1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "2") (term "1,0,0,1,0,0,0,0,0"))
                           (rule "getOfSeqDef" (formula "2") (term "0,1,0,1,1,0,0,0,0,0"))
                           (rule "castDel" (formula "2") (term "1,0,1,0,1,1,0,0,0,0,0"))
                           (rule "castDel" (formula "2") (term "2,0,1,0,1,1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "2") (term "0,2,1,0,1,0,1,1,0,0,0,0,0"))
                           (rule "eqSymm" (formula "2") (term "1,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_elimSub" (formula "2") (term "1,1,0,1,1,0,1,1,0,0,0,0,0"))
                           (rule "times_zero_2" (formula "2") (term "1,1,1,0,1,1,0,1,1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "2") (term "1,1,0,1,1,0,1,1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1,0,1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "2") (term "0,0,1,0,1,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1,1,0,0,1,1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "2") (term "0,0,1,1,0,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,1,0,0,1,1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,0,1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "2") (term "0,0,0,0,1,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0,1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0,1,1,0,0,0,0,0"))
                           (rule "eqSymm" (formula "2") (term "1,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,1,1,0,1,1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0,1,1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0,1,1,0,0,0,0,0"))
                           (rule "eqSymm" (formula "2") (term "1,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,1,1,0,1,1,0,0,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1,1,0,0,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,1,1,0,1,1,0,0,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1,0,1,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,1,0,1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0,0,1,0,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0,0,1,0,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,0,1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,0,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0,0,0,0,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,1,1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "2") (term "0,1,1,0,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,1,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0,1,1,0,0,0,0,0"))
                           (rule "eqSymm" (formula "2") (term "1,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,1,1,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "2") (term "1,1,0,1,1,0,1,1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "2") (term "0,1,1,0,1,1,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,1,1,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,1,1,0,1,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,1,1,1,0,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0,0,1,1,1,0,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0,0,1,1,1,0,0,1,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0,1,1,0,0,0,0,0"))
                           (rule "eqSymm" (formula "2") (term "1,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,1,1,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "2") (term "1,1,0,1,1,0,1,1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "2") (term "0,1,1,0,1,1,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,1,1,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,1,1,0,1,1,0,0,0,0,0"))
                           (rule "nnf_notAnd" (formula "2") (term "0,0,0,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,0,0,0,0"))
                           (rule "add_literals" (formula "2") (term "0,0,0,1,0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "2") (term "0,0,1,0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0,0,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0,0,0,0,0"))
                           (rule "times_zero_1" (formula "2") (term "1,0,0,0,0,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "2") (term "0,0,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0,0,0"))
                           (rule "nnf_imp2or" (formula "2") (term "0,1,1,0,0,0,0,0"))
                           (rule "nnf_notAnd" (formula "2") (term "0,0,1,1,0,0,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,1,1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,1,1,0,0,0,0,0"))
                           (rule "add_literals" (formula "2") (term "0,0,0,1,0,0,1,1,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "2") (term "0,0,1,0,0,1,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0,1,1,0,0,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0,1,1,0,0,0,0,0"))
                           (rule "times_zero_1" (formula "2") (term "1,0,0,0,0,0,1,1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "2") (term "0,0,0,0,0,1,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0,1,1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "2") (term "1,0,0,0,1,1,0,0,0,0,0"))
                           (rule "commute_or" (formula "2") (term "1,0,0,0,0"))
                           (rule "commute_or" (formula "2") (term "0,0,0"))
                           (rule "commute_or_2" (formula "2") (term "0,0"))
                           (rule "commute_or_2" (formula "2") (term "0"))
                           (rule "allLeft" (formula "11") (inst "t=i_0"))
                           (rule "inEqSimp_commuteGeq" (formula "11") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0") (ifseqformula "14"))
                           (rule "qeq_literals" (formula "11") (term "0,1,0"))
                           (builtin "One Step Simplification" (formula "11"))
                           (rule "inEqSimp_contradInEq1" (formula "11") (term "1") (ifseqformula "3"))
                           (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1"))
                           (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "11") (term "0,0,1"))
                           (rule "leq_literals" (formula "11") (term "0,1"))
                           (builtin "One Step Simplification" (formula "11"))
                           (rule "notLeft" (formula "11"))
                           (rule "narrowSelectArrayType" (formula "22") (term "1,0,0,0,0,1") (ifseqformula "4") (ifseqformula "21"))
                           (rule "allLeft" (formula "10") (inst "t=i_0"))
                           (rule "inEqSimp_commuteGeq" (formula "10") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "3"))
                           (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                           (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "10") (term "0,0,1"))
                           (rule "leq_literals" (formula "10") (term "0,1"))
                           (builtin "One Step Simplification" (formula "10"))
                           (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "14"))
                           (rule "qeq_literals" (formula "10") (term "0,1"))
                           (builtin "One Step Simplification" (formula "10"))
                           (rule "notLeft" (formula "10"))
                           (rule "narrowSelectArrayType" (formula "23") (term "1,1,0,0,0,1") (ifseqformula "4") (ifseqformula "21"))
                           (rule "cnf_rightDist" (formula "2") (term "1,1,0"))
                           (rule "commute_or" (formula "2") (term "1,1,1,0"))
                           (rule "commute_or_2" (formula "2") (term "0,1,1,0,1,0"))
                           (rule "ifthenelse_split" (formula "23") (term "0,0"))
                           (branch "a1[i_0].length >= 1 TRUE"
                              (rule "eqSymm" (formula "24") (term "0"))
                              (rule "commute_or" (formula "3") (term "0,0,1,1,0,1,0"))
                              (rule "ifthenelse_to_or_right" (formula "3") (term "0,1,0,1,0"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "inEqSimp_notGeq" (formula "3") (term "0,1,1,0,1,0,1,0"))
                              (rule "mul_literals" (formula "3") (term "1,0,0,0,1,1,0,1,0,1,0"))
                              (rule "add_literals" (formula "3") (term "0,0,0,1,1,0,1,0,1,0"))
                              (rule "add_zero_left" (formula "3") (term "0,0,1,1,0,1,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "3") (term "0,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0,1,0,1,0"))
                              (rule "add_literals" (formula "3") (term "0,0,0,0,0,1,0,1,0"))
                              (rule "add_zero_left" (formula "3") (term "0,0,0,0,1,0,1,0"))
                              (rule "shift_paren_or" (formula "3") (term "1,0,1,0,1,0"))
                              (rule "arrayLengthIsAShort" (formula "2") (term "0"))
                              (builtin "One Step Simplification" (formula "2"))
                              (rule "true_left" (formula "2"))
                              (rule "arrayLengthNotNegative" (formula "2") (term "0"))
                              (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "3"))
                              (rule "leq_literals" (formula "2") (term "0"))
                              (builtin "One Step Simplification" (formula "2"))
                              (rule "true_left" (formula "2"))
                              (rule "arrayLengthNotNegative" (formula "24") (term "1,1,1,0,1,0,0,0,1"))
                              (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "2"))
                              (rule "leq_literals" (formula "1") (term "0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "arrayLengthIsAShort" (formula "24") (term "1,1,1,0,1,0,0,0,1"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "all_pull_out1" (formula "3") (term "1,0,1,0"))
                              (rule "all_pull_out3" (formula "3") (term "0,1,0"))
                              (rule "cnf_rightDist" (formula "3") (term "0,0,1,0"))
                              (rule "commute_or_2" (formula "3") (term "1,0,0,1,0"))
                              (rule "commute_or_2" (formula "3") (term "0,1,0,0,1,0"))
                              (rule "cnf_rightDist" (formula "3") (term "0,0,0,1,0"))
                              (rule "commute_or_2" (formula "3") (term "1,0,0,0,1,0"))
                              (rule "shift_paren_or" (formula "3") (term "0,0,0,0,1,0"))
                              (rule "commute_or_2" (formula "3") (term "0,1,0,0,0,1,0"))
                              (rule "shift_paren_or" (formula "3") (term "0,0,1,0,0,1,0"))
                              (rule "commute_or" (formula "3") (term "0,0,1,0,0,0,1,0"))
                              (rule "all_pull_out0" (formula "3") (term "1,0"))
                              (rule "shift_paren_and" (formula "3") (term "0,1,0"))
                              (rule "all_pull_out3" (formula "3") (term "0"))
                              (rule "cnf_rightDist" (formula "3") (term "0,0"))
                              (rule "distr_forallAnd" (formula "3") (term "0"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "distr_forallAnd" (formula "3"))
                              (rule "andLeft" (formula "3"))
                              (rule "shift_paren_or" (formula "4") (term "0"))
                              (rule "shift_paren_or" (formula "4") (term "0,0"))
                              (rule "commute_or_2" (formula "4") (term "0,0,0"))
                              (rule "inEqSimp_or_tautInEq1" (formula "4") (term "0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "4") (term "1,0,0"))
                              (rule "polySimp_pullOutFactor1" (formula "4") (term "0,1,0,0"))
                              (rule "add_literals" (formula "4") (term "1,0,1,0,0"))
                              (rule "times_zero_1" (formula "4") (term "0,1,0,0"))
                              (rule "leq_literals" (formula "4") (term "1,0,0"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "true_left" (formula "4"))
                              (rule "cnf_rightDist" (formula "3") (term "0,0"))
                              (rule "distr_forallAnd" (formula "3") (term "0"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "distr_forallAnd" (formula "3"))
                              (rule "andLeft" (formula "3"))
                              (rule "shift_paren_or" (formula "4") (term "0"))
                              (rule "shift_paren_or" (formula "4") (term "0,0"))
                              (rule "inEqSimp_or_tautInEq3" (formula "4") (term "0,0,0"))
                              (rule "add_zero_right" (formula "4") (term "1,1,0,0,0"))
                              (rule "qeq_literals" (formula "4") (term "1,0,0,0"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "true_left" (formula "4"))
                              (rule "cnf_rightDist" (formula "3") (term "0,0"))
                              (rule "distr_forallAnd" (formula "3") (term "0"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "distr_forallAnd" (formula "3"))
                              (rule "andLeft" (formula "3"))
                              (rule "commute_or_2" (formula "4") (term "0,0"))
                              (rule "commute_or_2" (formula "4") (term "0,0,0"))
                              (rule "cnf_rightDist" (formula "3") (term "0"))
                              (rule "distr_forallAnd" (formula "3"))
                              (rule "andLeft" (formula "3"))
                              (rule "commute_or_2" (formula "4") (term "0"))
                              (rule "shift_paren_or" (formula "3") (term "0"))
                              (rule "commute_or_2" (formula "4") (term "0,0"))
                              (rule "shift_paren_or" (formula "3") (term "0,0"))
                              (rule "commute_or_2" (formula "4") (term "0,0,0"))
                              (rule "commute_or_2" (formula "3") (term "0,0,0"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
                              (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
                              (rule "commute_or_2" (formula "5") (term "0,0,0,0,0,0"))
                              (builtin "One Step Simplification" (formula "5"))
                              (rule "ifthenelse_to_or_left" (formula "3") (term "1,0"))
                              (rule "eqSymm" (formula "3") (term "1,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "3") (term "0,0,1,0"))
                              (rule "mul_literals" (formula "3") (term "1,0,0,0,0,1,0"))
                              (rule "add_literals" (formula "3") (term "0,0,0,0,1,0"))
                              (rule "add_zero_left" (formula "3") (term "0,0,0,1,0"))
                              (rule "commute_or" (formula "3") (term "1,1,0"))
                              (rule "cnf_rightDist" (formula "3") (term "0"))
                              (rule "distr_forallAnd" (formula "3"))
                              (rule "andLeft" (formula "3"))
                              (rule "commute_or_2" (formula "4") (term "0"))
                              (rule "shift_paren_or" (formula "3") (term "0"))
                              (rule "commute_or" (formula "4") (term "0,0"))
                              (rule "ifthenelse_to_or_right" (formula "6") (term "0,0,0,0,0,0,0"))
                              (builtin "One Step Simplification" (formula "6"))
                              (rule "nnf_notAnd" (formula "6") (term "0,0,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0,0,0,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0,0,0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0,0,0,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
                              (rule "add_literals" (formula "6") (term "0,0,0,1,0,0,0,0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "6") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0,0,0,0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0,0,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0,0,0,0,0,0,0,0"))
                              (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0,0,0,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "6") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0,0,0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "6") (term "1,0,0,0,0,0,0,0,0,0,0"))
                              (rule "nnf_notAnd" (formula "6") (term "0,1,1,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "6") (term "0,0,1,1,0,0,0,0,0,0,0"))
                              (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,1,1,0,0,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "6") (term "0,0,0,0,1,1,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,1,1,0,0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "6") (term "1,0,0,1,1,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "6") (term "1,0,1,1,0,0,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,1,1,0,0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,1,1,0,0,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,1,1,0,0,0,0,0,0,0"))
                              (rule "add_literals" (formula "6") (term "0,0,0,1,0,1,1,0,0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "6") (term "0,0,1,0,1,1,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,1,1,0,0,0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,1,1,0,0,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "6") (term "1,1,0,1,1,0,0,0,0,0,0,0"))
                              (rule "commute_or" (formula "6") (term "0,0,0,0,0,0"))
                              (rule "commute_or_2" (formula "6") (term "0,0,0,0,0"))
                              (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                              (rule "commute_or_2" (formula "6") (term "0,0,0"))
                              (rule "commute_or_2" (formula "6") (term "0,0"))
                              (rule "commute_or" (formula "6") (term "1,1,0,0"))
                              (rule "commute_or_2" (formula "6") (term "0,1,0,0"))
                              (rule "commute_or_2" (formula "6") (term "0,1,1,0,0"))
                              (rule "commute_or" (formula "6") (term "0,0,1,0,0"))
                              (rule "commute_or" (formula "6") (term "0,0,1,1,0,0"))
                              (rule "cnf_rightDist" (formula "6") (term "1,1,0,0"))
                              (rule "commute_or_2" (formula "6") (term "0,1,1,0,0"))
                              (rule "inEqSimp_or_tautInEq1" (formula "6") (term "0,0,1,1,0,0"))
                              (rule "add_zero_right" (formula "6") (term "1,1,0,0,1,1,0,0"))
                              (rule "qeq_literals" (formula "6") (term "1,0,0,1,1,0,0"))
                              (builtin "One Step Simplification" (formula "6"))
                              (rule "shift_paren_or" (formula "6") (term "1,1,0,0"))
                              (rule "commute_or" (formula "6") (term "0,1,1,0,0"))
                              (rule "cnf_rightDist" (formula "6") (term "0,0"))
                              (rule "distr_forallAnd" (formula "6") (term "0"))
                              (rule "distr_forallAnd" (formula "6"))
                              (rule "andLeft" (formula "6"))
                              (rule "commute_or_2" (formula "6") (term "0,0"))
                              (rule "shift_paren_or" (formula "7") (term "0,0"))
                              (rule "commute_or_2" (formula "7") (term "0,0,0"))
                              (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                              (rule "commute_or_2" (formula "7") (term "0,0,0,0"))
                              (rule "shift_paren_or" (formula "6") (term "0,0,0,0"))
                              (rule "commute_or_2" (formula "6") (term "0,0,0,0,0"))
                              (builtin "One Step Simplification" (formula "6"))
                              (rule "commute_or_2" (formula "6") (term "0,0,0,0,0"))
                              (rule "shift_paren_or" (formula "7") (term "0,0,0,0,0"))
                              (rule "commute_or_2" (formula "6") (term "0,0,0,0,0,0"))
                              (rule "commute_or_2" (formula "7") (term "0,0,0,0,0,0"))
                              (builtin "One Step Simplification" (formula "7"))
                              (rule "commute_or" (formula "6") (term "0,0,0,0,0,0,0"))
                              (rule "shift_paren_or" (formula "7") (term "0,0,0,0,0,0"))
                              (rule "shift_paren_or" (formula "7") (term "0,0,0,0,0,0,0"))
                              (rule "cut_direct" (formula "5") (term "0,1,1,0,0,0,0"))
                              (branch "CUT: a1.length >= 1 TRUE"
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "replace_known_left" (formula "8") (term "0,1,1,0,0,0,0,0,0") (ifseqformula "5"))
                                 (builtin "One Step Simplification" (formula "8"))
                                 (rule "replace_known_left" (formula "7") (term "0,1,1,0,0,0,0,0") (ifseqformula "5"))
                                 (builtin "One Step Simplification" (formula "7"))
                                 (rule "replace_known_left" (formula "4") (term "0,1,1,0,0,0,0") (ifseqformula "5"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "replace_known_left" (formula "3") (term "0,1,1,0,0,0,0") (ifseqformula "5"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "5"))
                                 (rule "leq_literals" (formula "14") (term "0"))
                                 (builtin "One Step Simplification" (formula "14"))
                                 (rule "true_left" (formula "14"))
                                 (rule "cut_direct" (formula "28") (term "0"))
                                 (branch "CUT: a2[i_0].length = a1[i_0].length TRUE"
                                    (builtin "One Step Simplification" (formula "29"))
                                    (rule "allRight" (formula "29") (inst "sk=iv_5"))
                                    (rule "orRight" (formula "29"))
                                    (rule "orRight" (formula "29"))
                                    (rule "inEqSimp_geqRight" (formula "31"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "inEqSimp_leqRight" (formula "31"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "replace_known_left" (formula "31") (term "0,0,1") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "1")))
                                    (rule "inEqSimp_homoInEq0" (formula "31") (term "0,0"))
                                    (rule "eqSymm" (formula "31"))
                                    (rule "polySimp_addComm1" (formula "31") (term "0,0,1"))
                                    (rule "inEqSimp_homoInEq0" (formula "31") (term "0,0"))
                                    (rule "eqSymm" (formula "31"))
                                    (rule "polySimp_addComm1" (formula "31") (term "0,0,1"))
                                    (rule "applyEq" (formula "5") (term "0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "30") (term "1,0,0,0") (ifseqformula "3"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "0,1"))
                                    (rule "polySimp_mulComm0" (formula "30") (term "1,0,1"))
                                    (rule "polySimp_rightDist" (formula "30") (term "1,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,1"))
                                    (rule "mul_literals" (formula "30") (term "0,1,0,1"))
                                    (rule "polySimp_elimOne" (formula "30") (term "1,1,0,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0"))
                                    (rule "replace_known_left" (formula "30") (term "0,1") (ifseqformula "2"))
                                    (builtin "One Step Simplification" (formula "30"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "30") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "30") (term "1,0,0"))
                                    (rule "mul_literals" (formula "30") (term "0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
                                    (rule "replace_known_left" (formula "30") (term "0,0") (ifseqformula "2"))
                                    (builtin "One Step Simplification" (formula "30"))
                                    (rule "ifthenelse_to_or_left" (formula "9") (term "0,0,0,0,0,0,0"))
                                    (rule "eqSymm" (formula "9") (term "1,1,0,0,0,0,0,0,0"))
                                    (rule "nnf_notAnd" (formula "9") (term "0,0,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,0,0,0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,0,0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,0,0,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
                                    (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,0,0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "9") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,0,0,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,0,0,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,0,0,0,0,0,0,0"))
                                    (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0,0,0,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "9") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,0,0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0,0,0,0,0,0"))
                                    (rule "commute_or" (formula "9") (term "0,0,0,0,0,0"))
                                    (rule "commute_or_2" (formula "9") (term "0,0,0,0,0"))
                                    (rule "commute_or_2" (formula "9") (term "0,0,0,0"))
                                    (rule "commute_or_2" (formula "9") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "9") (term "0,0"))
                                    (rule "commute_or" (formula "9") (term "1,1,0,0"))
                                    (rule "commute_or_2" (formula "9") (term "0,1,0,0"))
                                    (rule "commute_or" (formula "9") (term "0,0,1,0,0"))
                                    (rule "cnf_rightDist" (formula "9") (term "1,1,0,0"))
                                    (rule "cnf_rightDist" (formula "9") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "9") (term "0"))
                                    (rule "distr_forallAnd" (formula "9"))
                                    (rule "andLeft" (formula "9"))
                                    (rule "commute_or_2" (formula "9") (term "0,0"))
                                    (rule "commute_or" (formula "10") (term "0,0"))
                                    (rule "shift_paren_or" (formula "9") (term "0,0,0"))
                                    (rule "commute_or" (formula "10") (term "1,1,0,0"))
                                    (rule "commute_or_2" (formula "9") (term "0,0,0,0"))
                                    (rule "cnf_rightDist" (formula "10") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "10") (term "0"))
                                    (rule "distr_forallAnd" (formula "10"))
                                    (rule "andLeft" (formula "10"))
                                    (rule "commute_or_2" (formula "10") (term "0,0"))
                                    (rule "shift_paren_or" (formula "11") (term "0,0"))
                                    (rule "commute_or_2" (formula "10") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "11") (term "0,0,0"))
                                    (rule "shift_paren_or" (formula "10") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "11") (term "0,0,0,0"))
                                    (rule "commute_or_2" (formula "10") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_or_tautInEq1" (formula "10") (term "0,0,0,0"))
                                    (rule "add_zero_right" (formula "10") (term "1,1,0,0,0,0"))
                                    (rule "qeq_literals" (formula "10") (term "1,0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "10"))
                                    (rule "true_left" (formula "10"))
                                    (rule "shift_paren_or" (formula "9") (term "0,0,0,0,0"))
                                    (rule "shift_paren_or" (formula "10") (term "0,0,0,0,0"))
                                    (rule "commute_or_2" (formula "9") (term "0,0,0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "9"))
                                    (rule "commute_or_2" (formula "9") (term "0,0,0,0,0,0"))
                                    (rule "shift_paren_or" (formula "10") (term "0,0,0,0,0,0"))
                                    (rule "commute_or" (formula "9") (term "0,0,0,0,0,0,0"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "30") (term "0") (ifseqformula "13"))
                                    (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "30") (term "0") (ifseqformula "14"))
                                    (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "allLeft" (formula "20") (inst "t=iv_5"))
                                    (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "20") (term "1,0") (ifseqformula "3"))
                                    (rule "qeq_literals" (formula "20") (term "0,1,0"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "cut_direct" (formula "20") (term "1"))
                                    (branch "CUT: a1.length <= iv_5 TRUE"
                                       (builtin "One Step Simplification" (formula "21"))
                                       (rule "true_left" (formula "21"))
                                       (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "20"))
                                       (rule "polySimp_rightDist" (formula "14") (term "0,0"))
                                       (rule "mul_literals" (formula "14") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "1"))
                                       (rule "polySimp_rightDist" (formula "14") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
                                       (rule "mul_literals" (formula "14") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "14") (term "1,1"))
                                       (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "21"))
                                       (rule "mul_literals" (formula "9") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "9"))
                                       (rule "mul_literals" (formula "9") (term "1"))
                                       (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "9"))
                                       (rule "leq_literals" (formula "3") (term "0"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "allLeft" (formula "7") (inst "t=i_0"))
                                       (rule "inEqSimp_commuteGeq" (formula "7") (term "1,0,0,0"))
                                       (rule "applyEq" (formula "7") (term "0,1") (ifseqformula "4"))
                                       (rule "replace_known_left" (formula "7") (term "1") (ifseqformula "5"))
                                       (builtin "One Step Simplification" (formula "7"))
                                       (rule "true_left" (formula "7"))
                                       (rule "allLeft" (formula "13") (inst "t=i_0"))
                                       (rule "narrowSelectArrayType" (formula "13") (term "0,0,0,0,0,0,0,0") (ifseqformula "17") (ifseqformula "35"))
                                       (rule "inEqSimp_commuteGeq" (formula "13") (term "1,0,0,0,0,0"))
                                       (rule "applyEq" (formula "13") (term "0,0,1,1,0") (ifseqformula "4"))
                                       (rule "replace_known_left" (formula "13") (term "0,1,1,0") (ifseqformula "5"))
                                       (builtin "One Step Simplification" (formula "13"))
                                       (rule "applyEq" (formula "13") (term "1,1,0") (ifseqformula "4"))
                                       (rule "inEqSimp_contradInEq1" (formula "13") (term "1,0,0,0,0") (ifseqformula "16"))
                                       (rule "inEqSimp_homoInEq1" (formula "13") (term "0,1,0,0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1,0,0,0,0"))
                                       (rule "add_literals" (formula "13") (term "1,1,0,0,1,0,0,0,0"))
                                       (rule "times_zero_1" (formula "13") (term "1,0,0,1,0,0,0,0"))
                                       (rule "add_zero_right" (formula "13") (term "0,0,1,0,0,0,0"))
                                       (rule "leq_literals" (formula "13") (term "0,1,0,0,0,0"))
                                       (builtin "One Step Simplification" (formula "13"))
                                       (rule "inEqSimp_contradInEq1" (formula "13") (term "1,0,0,0,0") (ifseqformula "26"))
                                       (rule "qeq_literals" (formula "13") (term "0,1,0,0,0,0"))
                                       (builtin "One Step Simplification" (formula "13"))
                                       (rule "inEqSimp_or_tautInEq1" (formula "13") (term "0"))
                                       (rule "inEqSimp_homoInEq1" (formula "13") (term "1,0"))
                                       (rule "polySimp_pullOutFactor1" (formula "13") (term "0,1,0"))
                                       (rule "add_literals" (formula "13") (term "1,0,1,0"))
                                       (rule "times_zero_1" (formula "13") (term "0,1,0"))
                                       (rule "leq_literals" (formula "13") (term "1,0"))
                                       (builtin "One Step Simplification" (formula "13"))
                                       (rule "true_left" (formula "13"))
                                       (rule "allLeft" (formula "12") (inst "t=i_0"))
                                       (rule "narrowSelectArrayType" (formula "12") (term "0,0,0,0,0,0,0,0") (ifseqformula "17") (ifseqformula "34"))
                                       (rule "inEqSimp_commuteGeq" (formula "12") (term "1,0,0,0,0,0"))
                                       (rule "applyEq" (formula "12") (term "0,0,1,1,0") (ifseqformula "4"))
                                       (rule "replace_known_left" (formula "12") (term "0,1,1,0") (ifseqformula "5"))
                                       (builtin "One Step Simplification" (formula "12"))
                                       (rule "applyEq" (formula "12") (term "1,1,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "12") (term "1,1,1,0,0") (ifseqformula "4"))
                                       (rule "inEqSimp_contradInEq1" (formula "12") (term "1,0,0,0,0,0,0") (ifseqformula "26"))
                                       (rule "qeq_literals" (formula "12") (term "0,1,0,0,0,0,0,0"))
                                       (builtin "One Step Simplification" (formula "12"))
                                       (rule "inEqSimp_contradInEq1" (formula "12") (term "1,0,0,0,0,0") (ifseqformula "16"))
                                       (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1,0,0,0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "12") (term "1,1,0,0,1,0,0,0,0,0"))
                                       (rule "times_zero_1" (formula "12") (term "1,0,0,1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "12") (term "0,0,1,0,0,0,0,0"))
                                       (rule "leq_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                                       (builtin "One Step Simplification" (formula "12"))
                                       (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0,0"))
                                       (rule "add_literals" (formula "12") (term "1,0,1,0,0"))
                                       (rule "times_zero_1" (formula "12") (term "0,1,0,0"))
                                       (rule "leq_literals" (formula "12") (term "1,0,0"))
                                       (builtin "One Step Simplification" (formula "12"))
                                       (rule "true_left" (formula "12"))
                                       (rule "allLeft" (formula "11") (inst "t=i_0"))
                                       (rule "narrowSelectArrayType" (formula "11") (term "0,0,0,0,0,0,0,0") (ifseqformula "17") (ifseqformula "35"))
                                       (rule "eqSymm" (formula "11") (term "0,0,0,0,0,0,0"))
                                       (rule "narrowSelectArrayType" (formula "11") (term "0,0,0,0,0,0,0,0") (ifseqformula "17") (ifseqformula "34"))
                                       (rule "eqSymm" (formula "11") (term "0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0,0,0,0,0"))
                                       (rule "applyEq" (formula "11") (term "1,1,1,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "11") (term "0,0,1,1,0") (ifseqformula "4"))
                                       (rule "replace_known_left" (formula "11") (term "0,1,1,0") (ifseqformula "5"))
                                       (builtin "One Step Simplification" (formula "11"))
                                       (rule "applyEq" (formula "11") (term "1,1,0,0") (ifseqformula "4"))
                                       (builtin "One Step Simplification" (formula "11"))
                                       (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0,0,0,0") (ifseqformula "26"))
                                       (rule "qeq_literals" (formula "11") (term "0,1,0,0,0,0"))
                                       (builtin "One Step Simplification" (formula "11"))
                                       (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0,0,0") (ifseqformula "16"))
                                       (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1,0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1,0,0,0"))
                                       (rule "add_literals" (formula "11") (term "1,1,0,0,1,0,0,0"))
                                       (rule "times_zero_1" (formula "11") (term "1,0,0,1,0,0,0"))
                                       (rule "add_zero_right" (formula "11") (term "0,0,1,0,0,0"))
                                       (rule "leq_literals" (formula "11") (term "0,1,0,0,0"))
                                       (builtin "One Step Simplification" (formula "11"))
                                       (rule "commute_or" (formula "11") (term "0,0"))
                                       (rule "commute_or_2" (formula "11") (term "0"))
                                       (rule "allLeft" (formula "11") (inst "t=iv_5"))
                                       (rule "replace_known_right" (formula "11") (term "1") (ifseqformula "37"))
                                       (builtin "One Step Simplification" (formula "11"))
                                       (rule "inEqSimp_commuteGeq" (formula "11") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "11") (term "1") (ifseqformula "3"))
                                       (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1"))
                                       (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "11") (term "0,0,1"))
                                       (rule "leq_literals" (formula "11") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "11"))
                                       (rule "inEqSimp_contradInEq1" (formula "11") (ifseqformula "8"))
                                       (rule "qeq_literals" (formula "11") (term "0"))
                                       (builtin "One Step Simplification" (formula "11"))
                                       (rule "closeFalse" (formula "11"))
                                    )
                                    (branch "CUT: a1.length <= iv_5 FALSE"
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "notLeft" (formula "20"))
                                       (rule "inEqSimp_leqRight" (formula "32"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1"))
                                       (rule "mul_literals" (formula "1") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                       (rule "allLeft" (formula "22") (inst "t=iv_5"))
                                       (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1"))
                                       (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "22") (term "0,0,1"))
                                       (rule "leq_literals" (formula "22") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "22"))
                                       (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "4"))
                                       (rule "qeq_literals" (formula "22") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "22"))
                                       (rule "notLeft" (formula "22"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "32") (term "0") (ifseqformula "16"))
                                       (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "33"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "34") (term "0") (ifseqformula "17"))
                                       (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "35"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "allLeft" (formula "28") (inst "t=iv_5"))
                                       (rule "inEqSimp_contradInEq1" (formula "28") (term "0,0,0") (ifseqformula "6"))
                                       (rule "qeq_literals" (formula "28") (term "0,0,0,0"))
                                       (builtin "One Step Simplification" (formula "28"))
                                       (rule "arrayLengthIsAShort" (formula "28") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "28"))
                                       (rule "true_left" (formula "28"))
                                       (rule "arrayLengthNotNegative" (formula "28") (term "0,1,0"))
                                       (rule "arrayLengthIsAShort" (formula "29") (term "0,1,0"))
                                       (builtin "One Step Simplification" (formula "29"))
                                       (rule "true_left" (formula "29"))
                                       (rule "arrayLengthNotNegative" (formula "29") (term "0,1"))
                                       (rule "cut_direct" (formula "30") (term "0,0"))
                                       (branch "CUT: iv_5 >= i_0 TRUE"
                                          (builtin "One Step Simplification" (formula "31"))
                                          (rule "true_left" (formula "31"))
                                          (rule "allLeft" (formula "11") (inst "t=i_0"))
                                          (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0,0,0"))
                                          (rule "applyEq" (formula "11") (term "0,1") (ifseqformula "8"))
                                          (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "9"))
                                          (builtin "One Step Simplification" (formula "11"))
                                          (rule "true_left" (formula "11"))
                                          (rule "allLeft" (formula "10") (inst "t=iv_5"))
                                          (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0,0,0"))
                                          (rule "inEqSimp_contradInEq1" (formula "10") (term "1,0,0,0") (ifseqformula "3"))
                                          (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1,0,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1,0,0,0"))
                                          (rule "add_literals" (formula "10") (term "1,1,0,0,1,0,0,0"))
                                          (rule "times_zero_1" (formula "10") (term "1,0,0,1,0,0,0"))
                                          (rule "add_zero_right" (formula "10") (term "0,0,1,0,0,0"))
                                          (rule "leq_literals" (formula "10") (term "0,1,0,0,0"))
                                          (builtin "One Step Simplification" (formula "10"))
                                          (rule "inEqSimp_contradInEq1" (formula "10") (term "0,0,0") (ifseqformula "6"))
                                          (rule "qeq_literals" (formula "10") (term "0,0,0,0"))
                                          (builtin "One Step Simplification" (formula "10"))
                                          (rule "cut_direct" (formula "10") (term "1,0"))
                                          (branch "CUT: a2[iv_5].length <= 0 TRUE"
                                             (builtin "One Step Simplification" (formula "11"))
                                             (rule "true_left" (formula "11"))
                                             (rule "inEqSimp_antiSymm" (formula "30") (ifseqformula "10"))
                                             (rule "applyEq" (formula "31") (term "0") (ifseqformula "30"))
                                             (rule "qeq_literals" (formula "31"))
                                             (rule "true_left" (formula "31"))
                                             (rule "applyEq" (formula "10") (term "0") (ifseqformula "30"))
                                             (rule "leq_literals" (formula "10"))
                                             (rule "true_left" (formula "10"))
                                             (rule "allLeft" (formula "11") (inst "t=iv_5"))
                                             (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0,0,0"))
                                             (rule "applyEq" (formula "11") (term "0,1") (ifseqformula "30"))
                                             (rule "qeq_literals" (formula "11") (term "1"))
                                             (builtin "One Step Simplification" (formula "11"))
                                             (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0,0") (ifseqformula "3"))
                                             (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "11") (term "1,1,0,0,1,0,0"))
                                             (rule "times_zero_1" (formula "11") (term "1,0,0,1,0,0"))
                                             (rule "add_zero_right" (formula "11") (term "0,0,1,0,0"))
                                             (rule "leq_literals" (formula "11") (term "0,1,0,0"))
                                             (builtin "One Step Simplification" (formula "11"))
                                             (rule "inEqSimp_contradInEq1" (formula "11") (term "0,0") (ifseqformula "6"))
                                             (rule "qeq_literals" (formula "11") (term "0,0,0"))
                                             (builtin "One Step Simplification" (formula "11"))
                                             (rule "cut_direct" (formula "11") (term "0"))
                                             (branch "CUT: a1[iv_5].length <= 0 TRUE"
                                                (builtin "One Step Simplification" (formula "12"))
                                                (rule "true_left" (formula "12"))
                                                (rule "inEqSimp_antiSymm" (formula "29") (ifseqformula "11"))
                                                (rule "applyEq" (formula "30") (term "0") (ifseqformula "29"))
                                                (rule "qeq_literals" (formula "30"))
                                                (rule "true_left" (formula "30"))
                                                (rule "applyEq" (formula "11") (term "0") (ifseqformula "29"))
                                                (rule "leq_literals" (formula "11"))
                                                (rule "true_left" (formula "11"))
                                                (rule "allLeft" (formula "16") (inst "t=i_0"))
                                                (rule "narrowSelectArrayType" (formula "16") (term "0,0,0,0,0,0,0,0") (ifseqformula "19") (ifseqformula "41"))
                                                (rule "inEqSimp_commuteGeq" (formula "16") (term "1,0,0,0,0,0"))
                                                (rule "applyEq" (formula "16") (term "1,1,0,0") (ifseqformula "8"))
                                                (rule "applyEq" (formula "16") (term "0,0,1,1,0") (ifseqformula "8"))
                                                (rule "replace_known_left" (formula "16") (term "0,1,1,0") (ifseqformula "9"))
                                                (builtin "One Step Simplification" (formula "16"))
                                                (rule "applyEq" (formula "16") (term "1,1,0") (ifseqformula "8"))
                                                (builtin "One Step Simplification" (formula "16"))
                                                (rule "inEqSimp_contradInEq1" (formula "16") (term "1,0,0,0,0") (ifseqformula "18"))
                                                (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1,0,0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1,0,0,0,0"))
                                                (rule "add_literals" (formula "16") (term "1,1,0,0,1,0,0,0,0"))
                                                (rule "times_zero_1" (formula "16") (term "1,0,0,1,0,0,0,0"))
                                                (rule "add_zero_right" (formula "16") (term "0,0,1,0,0,0,0"))
                                                (rule "leq_literals" (formula "16") (term "0,1,0,0,0,0"))
                                                (builtin "One Step Simplification" (formula "16"))
                                                (rule "inEqSimp_contradInEq1" (formula "16") (term "1,0,0,0,0") (ifseqformula "27"))
                                                (rule "qeq_literals" (formula "16") (term "0,1,0,0,0,0"))
                                                (builtin "One Step Simplification" (formula "16"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "16") (term "0"))
                                                (rule "inEqSimp_homoInEq1" (formula "16") (term "1,0"))
                                                (rule "polySimp_pullOutFactor1" (formula "16") (term "0,1,0"))
                                                (rule "add_literals" (formula "16") (term "1,0,1,0"))
                                                (rule "times_zero_1" (formula "16") (term "0,1,0"))
                                                (rule "leq_literals" (formula "16") (term "1,0"))
                                                (builtin "One Step Simplification" (formula "16"))
                                                (rule "true_left" (formula "16"))
                                                (rule "allLeft" (formula "16") (inst "t=iv_5"))
                                                (rule "narrowSelectArrayType" (formula "16") (term "0,0,0,0,0,0,0,0") (ifseqformula "19") (ifseqformula "38"))
                                                (rule "inEqSimp_commuteGeq" (formula "16") (term "1,0,0,0,0,0"))
                                                (rule "applyEq" (formula "16") (term "1,1,1,0") (ifseqformula "30"))
                                                (builtin "One Step Simplification" (formula "16"))
                                                (rule "applyEq" (formula "16") (term "1,1,1,0,0,0") (ifseqformula "29"))
                                                (rule "add_zero_right" (formula "16") (term "1,1,0,0,0"))
                                                (builtin "One Step Simplification" (formula "16"))
                                                (rule "applyEq" (formula "16") (term "1,1,0,0") (ifseqformula "30"))
                                                (builtin "One Step Simplification" (formula "16"))
                                                (rule "inEqSimp_contradInEq1" (formula "16") (term "1,0,0,0,0") (ifseqformula "6"))
                                                (rule "qeq_literals" (formula "16") (term "0,1,0,0,0,0"))
                                                (builtin "One Step Simplification" (formula "16"))
                                                (rule "inEqSimp_contradInEq1" (formula "16") (term "1,0,0,0") (ifseqformula "3"))
                                                (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1,0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1,0,0,0"))
                                                (rule "add_literals" (formula "16") (term "1,1,0,0,1,0,0,0"))
                                                (rule "times_zero_1" (formula "16") (term "1,0,0,1,0,0,0"))
                                                (rule "add_zero_right" (formula "16") (term "0,0,1,0,0,0"))
                                                (rule "leq_literals" (formula "16") (term "0,1,0,0,0"))
                                                (builtin "One Step Simplification" (formula "16"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "16") (term "0"))
                                                (rule "add_zero_right" (formula "16") (term "1,1,0"))
                                                (rule "qeq_literals" (formula "16") (term "1,0"))
                                                (builtin "One Step Simplification" (formula "16"))
                                                (rule "true_left" (formula "16"))
                                                (rule "allLeft" (formula "15") (inst "t=i_0"))
                                                (rule "narrowSelectArrayType" (formula "15") (term "0,0,0,0,0,0,0,0") (ifseqformula "19") (ifseqformula "40"))
                                                (rule "inEqSimp_commuteGeq" (formula "15") (term "1,0,0,0,0,0"))
                                                (rule "applyEq" (formula "15") (term "0,0,1,1,0") (ifseqformula "8"))
                                                (rule "replace_known_left" (formula "15") (term "0,1,1,0") (ifseqformula "9"))
                                                (builtin "One Step Simplification" (formula "15"))
                                                (rule "applyEq" (formula "15") (term "1,1,0") (ifseqformula "8"))
                                                (rule "applyEq" (formula "15") (term "1,1,1,0,0") (ifseqformula "8"))
                                                (rule "inEqSimp_contradInEq1" (formula "15") (term "1,0,0,0,0,0") (ifseqformula "18"))
                                                (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1,0,0,0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "15") (term "1,1,0,0,1,0,0,0,0,0"))
                                                (rule "times_zero_1" (formula "15") (term "1,0,0,1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "15") (term "0,0,1,0,0,0,0,0"))
                                                (rule "leq_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                                                (builtin "One Step Simplification" (formula "15"))
                                                (rule "inEqSimp_contradInEq1" (formula "15") (term "1,0,0,0,0,0") (ifseqformula "27"))
                                                (rule "qeq_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                                                (builtin "One Step Simplification" (formula "15"))
                                                (rule "inEqSimp_or_tautInEq3" (formula "15") (term "0,0"))
                                                (rule "inEqSimp_homoInEq1" (formula "15") (term "1,0,0"))
                                                (rule "polySimp_pullOutFactor1" (formula "15") (term "0,1,0,0"))
                                                (rule "add_literals" (formula "15") (term "1,0,1,0,0"))
                                                (rule "times_zero_1" (formula "15") (term "0,1,0,0"))
                                                (rule "leq_literals" (formula "15") (term "1,0,0"))
                                                (builtin "One Step Simplification" (formula "15"))
                                                (rule "true_left" (formula "15"))
                                                (rule "allLeft" (formula "15") (inst "t=iv_5"))
                                                (rule "narrowSelectArrayType" (formula "15") (term "0,0,0,0,0,0,0,0") (ifseqformula "19") (ifseqformula "39"))
                                                (rule "inEqSimp_commuteGeq" (formula "15") (term "1,0,0,0,0,0"))
                                                (rule "applyEq" (formula "15") (term "0,0,1,1,0") (ifseqformula "30"))
                                                (rule "qeq_literals" (formula "15") (term "0,1,1,0"))
                                                (builtin "One Step Simplification" (formula "15"))
                                                (rule "applyEq" (formula "15") (term "1,1,0,0,0") (ifseqformula "29"))
                                                (rule "applyEq" (formula "15") (term "1,1,1,0,0") (ifseqformula "30"))
                                                (rule "add_zero_right" (formula "15") (term "1,1,0,0"))
                                                (rule "inEqSimp_contradInEq1" (formula "15") (term "1,0,0,0,0,0") (ifseqformula "3"))
                                                (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1,0,0,0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "15") (term "1,1,0,0,1,0,0,0,0,0"))
                                                (rule "times_zero_1" (formula "15") (term "1,0,0,1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "15") (term "0,0,1,0,0,0,0,0"))
                                                (rule "leq_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                                                (builtin "One Step Simplification" (formula "15"))
                                                (rule "inEqSimp_contradInEq1" (formula "15") (term "1,0,0,0,0,0") (ifseqformula "6"))
                                                (rule "qeq_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                                                (builtin "One Step Simplification" (formula "15"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "15") (term "0,0,0"))
                                                (rule "add_zero_right" (formula "15") (term "1,1,0,0,0"))
                                                (rule "qeq_literals" (formula "15") (term "1,0,0,0"))
                                                (builtin "One Step Simplification" (formula "15"))
                                                (rule "true_left" (formula "15"))
                                                (rule "allLeft" (formula "14") (inst "t=i_0"))
                                                (rule "narrowSelectArrayType" (formula "14") (term "0,0,0,0,0,0,0,0") (ifseqformula "19") (ifseqformula "41"))
                                                (rule "eqSymm" (formula "14") (term "0,0,0,0,0,0,0"))
                                                (rule "narrowSelectArrayType" (formula "14") (term "0,0,0,0,0,0,0,0") (ifseqformula "19") (ifseqformula "40"))
                                                (rule "eqSymm" (formula "14") (term "0,0,0,0,0,0,0"))
                                                (rule "inEqSimp_commuteGeq" (formula "14") (term "1,0,0,0,0,0"))
                                                (rule "applyEq" (formula "14") (term "1,1,1,0") (ifseqformula "8"))
                                                (rule "applyEq" (formula "14") (term "0,0,1,1,0") (ifseqformula "8"))
                                                (rule "replace_known_left" (formula "14") (term "0,1,1,0") (ifseqformula "9"))
                                                (builtin "One Step Simplification" (formula "14"))
                                                (rule "applyEq" (formula "14") (term "1,1,0,0") (ifseqformula "8"))
                                                (builtin "One Step Simplification" (formula "14"))
                                                (rule "inEqSimp_contradInEq1" (formula "14") (term "1,0,0,0,0") (ifseqformula "27"))
                                                (rule "qeq_literals" (formula "14") (term "0,1,0,0,0,0"))
                                                (builtin "One Step Simplification" (formula "14"))
                                                (rule "inEqSimp_contradInEq1" (formula "14") (term "1,0,0,0") (ifseqformula "18"))
                                                (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1,0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1,0,0,0"))
                                                (rule "add_literals" (formula "14") (term "1,1,0,0,1,0,0,0"))
                                                (rule "times_zero_1" (formula "14") (term "1,0,0,1,0,0,0"))
                                                (rule "add_zero_right" (formula "14") (term "0,0,1,0,0,0"))
                                                (rule "leq_literals" (formula "14") (term "0,1,0,0,0"))
                                                (builtin "One Step Simplification" (formula "14"))
                                                (rule "commute_or" (formula "14") (term "0,0"))
                                                (rule "commute_or_2" (formula "14") (term "0"))
                                                (rule "allLeft" (formula "15") (inst "t=iv_5"))
                                                (rule "narrowSelectArrayType" (formula "15") (term "1,0,0,0,0,0,0,0") (ifseqformula "20") (ifseqformula "40"))
                                                (rule "narrowSelectArrayType" (formula "15") (term "0,0,0,0,0,0,0,0") (ifseqformula "20") (ifseqformula "39"))
                                                (rule "inEqSimp_commuteGeq" (formula "15") (term "1,0,0,0,0,0"))
                                                (rule "applyEq" (formula "15") (term "0,0,1,1,0") (ifseqformula "31"))
                                                (rule "qeq_literals" (formula "15") (term "0,1,1,0"))
                                                (builtin "One Step Simplification" (formula "15"))
                                                (rule "applyEq" (formula "15") (term "1,1,0,0") (ifseqformula "31"))
                                                (builtin "One Step Simplification" (formula "15"))
                                                (rule "applyEq" (formula "15") (term "1,1,0,0") (ifseqformula "30"))
                                                (builtin "One Step Simplification" (formula "15"))
                                                (rule "inEqSimp_contradInEq1" (formula "15") (term "1,0,0,0") (ifseqformula "3"))
                                                (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1,0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1,0,0,0"))
                                                (rule "add_literals" (formula "15") (term "1,1,0,0,1,0,0,0"))
                                                (rule "times_zero_1" (formula "15") (term "1,0,0,1,0,0,0"))
                                                (rule "add_zero_right" (formula "15") (term "0,0,1,0,0,0"))
                                                (rule "leq_literals" (formula "15") (term "0,1,0,0,0"))
                                                (builtin "One Step Simplification" (formula "15"))
                                                (rule "inEqSimp_contradInEq1" (formula "15") (term "1,0,0,0") (ifseqformula "6"))
                                                (rule "qeq_literals" (formula "15") (term "0,1,0,0,0"))
                                                (builtin "One Step Simplification" (formula "15"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "15") (term "0"))
                                                (rule "add_zero_right" (formula "15") (term "1,1,0"))
                                                (rule "qeq_literals" (formula "15") (term "1,0"))
                                                (builtin "One Step Simplification" (formula "15"))
                                                (rule "true_left" (formula "15"))
                                                (rule "allLeft" (formula "14") (inst "t=iv_5"))
                                                (rule "replace_known_right" (formula "14") (term "1") (ifseqformula "43"))
                                                (builtin "One Step Simplification" (formula "14"))
                                                (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "7"))
                                                (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1"))
                                                (rule "add_literals" (formula "14") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "14") (term "1,0,0,1"))
                                                (rule "add_zero_right" (formula "14") (term "0,0,1"))
                                                (rule "leq_literals" (formula "14") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "14"))
                                                (rule "inEqSimp_contradInEq1" (formula "14") (ifseqformula "6"))
                                                (rule "qeq_literals" (formula "14") (term "0"))
                                                (builtin "One Step Simplification" (formula "14"))
                                                (rule "closeFalse" (formula "14"))
                                             )
                                             (branch "CUT: a1[iv_5].length <= 0 FALSE"
                                                (builtin "One Step Simplification" (formula "11"))
                                                (rule "inEqSimp_leqRight" (formula "38"))
                                                (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "12"))
                                                (rule "add_zero_right" (formula "1") (term "0"))
                                                (rule "qeq_literals" (formula "1"))
                                                (rule "closeFalse" (formula "1"))
                                             )
                                          )
                                          (branch "CUT: a2[iv_5].length <= 0 FALSE"
                                             (builtin "One Step Simplification" (formula "10"))
                                             (rule "inEqSimp_leqRight" (formula "38"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                             (rule "mul_literals" (formula "1") (term "1"))
                                             (rule "inEqSimp_subsumption1" (formula "31") (ifseqformula "1"))
                                             (rule "leq_literals" (formula "31") (term "0"))
                                             (builtin "One Step Simplification" (formula "31"))
                                             (rule "true_left" (formula "31"))
                                             (rule "cut_direct" (formula "11") (term "0"))
                                             (branch "CUT: a1[iv_5].length <= 0 TRUE"
                                                (builtin "One Step Simplification" (formula "12"))
                                                (rule "true_left" (formula "12"))
                                                (rule "inEqSimp_antiSymm" (formula "30") (ifseqformula "11"))
                                                (rule "applyEq" (formula "31") (term "0") (ifseqformula "30"))
                                                (rule "qeq_literals" (formula "31"))
                                                (rule "true_left" (formula "31"))
                                                (rule "applyEq" (formula "11") (term "0") (ifseqformula "30"))
                                                (rule "leq_literals" (formula "11"))
                                                (rule "true_left" (formula "11"))
                                                (rule "allLeft" (formula "17") (inst "t=i_0"))
                                                (rule "narrowSelectArrayType" (formula "17") (term "0,0,0,0,0,0,0,0") (ifseqformula "20") (ifseqformula "41"))
                                                (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0,0,0,0,0"))
                                                (rule "applyEq" (formula "17") (term "0,0,1,1,0") (ifseqformula "9"))
                                                (rule "replace_known_left" (formula "17") (term "0,1,1,0") (ifseqformula "10"))
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "applyEq" (formula "17") (term "1,1,0") (ifseqformula "9"))
                                                (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0,0,0,0") (ifseqformula "19"))
                                                (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1,0,0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1,0,0,0,0"))
                                                (rule "add_literals" (formula "17") (term "1,1,0,0,1,0,0,0,0"))
                                                (rule "times_zero_1" (formula "17") (term "1,0,0,1,0,0,0,0"))
                                                (rule "add_zero_right" (formula "17") (term "0,0,1,0,0,0,0"))
                                                (rule "leq_literals" (formula "17") (term "0,1,0,0,0,0"))
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0,0,0,0") (ifseqformula "28"))
                                                (rule "qeq_literals" (formula "17") (term "0,1,0,0,0,0"))
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "17") (term "0"))
                                                (rule "inEqSimp_homoInEq1" (formula "17") (term "1,0"))
                                                (rule "polySimp_pullOutFactor1" (formula "17") (term "0,1,0"))
                                                (rule "add_literals" (formula "17") (term "1,0,1,0"))
                                                (rule "times_zero_1" (formula "17") (term "0,1,0"))
                                                (rule "leq_literals" (formula "17") (term "1,0"))
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "true_left" (formula "17"))
                                                (rule "allLeft" (formula "14") (inst "t=iv_5"))
                                                (rule "inEqSimp_commuteGeq" (formula "14") (term "1,0,0,0"))
                                                (rule "applyEq" (formula "14") (term "0,1,0,0") (ifseqformula "30"))
                                                (rule "qeq_literals" (formula "14") (term "1,0,0"))
                                                (builtin "One Step Simplification" (formula "14"))
                                                (rule "inEqSimp_contradEq7" (formula "14") (term "1") (ifseqformula "1"))
                                                (rule "times_zero_1" (formula "14") (term "1,0,0,1"))
                                                (rule "add_zero_right" (formula "14") (term "0,0,1"))
                                                (rule "leq_literals" (formula "14") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "14"))
                                                (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "1"))
                                                (rule "qeq_literals" (formula "14") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "14"))
                                                (rule "inEqSimp_contradInEq1" (formula "14") (term "0") (ifseqformula "7"))
                                                (rule "qeq_literals" (formula "14") (term "0,0"))
                                                (builtin "One Step Simplification" (formula "14"))
                                                (rule "inEqSimp_contradInEq1" (formula "14") (ifseqformula "4"))
                                                (rule "andLeft" (formula "14"))
                                                (rule "inEqSimp_homoInEq1" (formula "14"))
                                                (rule "polySimp_pullOutFactor1b" (formula "14") (term "0"))
                                                (rule "add_literals" (formula "14") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "14") (term "1,0"))
                                                (rule "add_literals" (formula "14") (term "0"))
                                                (rule "leq_literals" (formula "14"))
                                                (rule "closeFalse" (formula "14"))
                                             )
                                             (branch "CUT: a1[iv_5].length <= 0 FALSE"
                                                (builtin "One Step Simplification" (formula "11"))
                                                (rule "inEqSimp_leqRight" (formula "38"))
                                                (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "applyEq" (formula "2") (term "0") (ifseqformula "12"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                (rule "mul_literals" (formula "1") (term "1"))
                                                (rule "inEqSimp_subsumption1" (formula "30") (ifseqformula "1"))
                                                (rule "leq_literals" (formula "30") (term "0"))
                                                (builtin "One Step Simplification" (formula "30"))
                                                (rule "true_left" (formula "30"))
                                                (rule "allLeft" (formula "13") (inst "t=iv_5"))
                                                (rule "inEqSimp_commuteGeq" (formula "13") (term "1,0,0,0"))
                                                (rule "applyEq" (formula "13") (term "0,1") (ifseqformula "11"))
                                                (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "13"))
                                                (rule "true_left" (formula "13"))
                                                (rule "allLeft" (formula "18") (inst "t=i_0"))
                                                (rule "narrowSelectArrayType" (formula "18") (term "0,0,0,0,0,0,0,0") (ifseqformula "21") (ifseqformula "41"))
                                                (rule "inEqSimp_commuteGeq" (formula "18") (term "1,0,0,0,0,0"))
                                                (rule "applyEq" (formula "18") (term "0,0,1,1,0") (ifseqformula "9"))
                                                (rule "replace_known_left" (formula "18") (term "0,1,1,0") (ifseqformula "10"))
                                                (builtin "One Step Simplification" (formula "18"))
                                                (rule "applyEq" (formula "18") (term "1,1,0") (ifseqformula "9"))
                                                (rule "inEqSimp_contradInEq1" (formula "18") (term "1,0,0,0,0,0") (ifseqformula "29"))
                                                (rule "qeq_literals" (formula "18") (term "0,1,0,0,0,0,0"))
                                                (builtin "One Step Simplification" (formula "18"))
                                                (rule "inEqSimp_contradInEq1" (formula "18") (term "1,0,0,0,0") (ifseqformula "20"))
                                                (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1,0,0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1,0,0,0,0"))
                                                (rule "add_literals" (formula "18") (term "1,1,0,0,1,0,0,0,0"))
                                                (rule "times_zero_1" (formula "18") (term "1,0,0,1,0,0,0,0"))
                                                (rule "add_zero_right" (formula "18") (term "0,0,1,0,0,0,0"))
                                                (rule "leq_literals" (formula "18") (term "0,1,0,0,0,0"))
                                                (builtin "One Step Simplification" (formula "18"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "18") (term "0"))
                                                (rule "inEqSimp_homoInEq1" (formula "18") (term "1,0"))
                                                (rule "polySimp_pullOutFactor1" (formula "18") (term "0,1,0"))
                                                (rule "add_literals" (formula "18") (term "1,0,1,0"))
                                                (rule "times_zero_1" (formula "18") (term "0,1,0"))
                                                (rule "leq_literals" (formula "18") (term "1,0"))
                                                (builtin "One Step Simplification" (formula "18"))
                                                (rule "true_left" (formula "18"))
                                                (rule "allLeft" (formula "18") (inst "t=iv_5"))
                                                (rule "narrowSelectArrayType" (formula "18") (term "0,0,0,0,0,0,0,0") (ifseqformula "21") (ifseqformula "38"))
                                                (rule "inEqSimp_commuteGeq" (formula "18") (term "1,0,0,0,0,0"))
                                                (rule "applyEq" (formula "18") (term "1,1,1,0") (ifseqformula "11"))
                                                (rule "applyEq" (formula "18") (term "1,1,0,0") (ifseqformula "11"))
                                                (rule "applyEq" (formula "18") (term "0,0,1,1,0") (ifseqformula "11"))
                                                (rule "replace_known_left" (formula "18") (term "0,1,1,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "18"))
                                                (rule "inEqSimp_contradInEq1" (formula "18") (term "1,0,0,0,0,0") (ifseqformula "7"))
                                                (rule "qeq_literals" (formula "18") (term "0,1,0,0,0,0,0"))
                                                (builtin "One Step Simplification" (formula "18"))
                                                (rule "inEqSimp_contradInEq1" (formula "18") (term "1,0,0,0,0") (ifseqformula "4"))
                                                (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1,0,0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1,0,0,0,0"))
                                                (rule "add_literals" (formula "18") (term "1,1,0,0,1,0,0,0,0"))
                                                (rule "times_zero_1" (formula "18") (term "1,0,0,1,0,0,0,0"))
                                                (rule "add_zero_right" (formula "18") (term "0,0,1,0,0,0,0"))
                                                (rule "leq_literals" (formula "18") (term "0,1,0,0,0,0"))
                                                (builtin "One Step Simplification" (formula "18"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "18") (term "0"))
                                                (rule "inEqSimp_homoInEq1" (formula "18") (term "1,0"))
                                                (rule "polySimp_pullOutFactor1" (formula "18") (term "0,1,0"))
                                                (rule "add_literals" (formula "18") (term "1,0,1,0"))
                                                (rule "times_zero_1" (formula "18") (term "0,1,0"))
                                                (rule "leq_literals" (formula "18") (term "1,0"))
                                                (builtin "One Step Simplification" (formula "18"))
                                                (rule "true_left" (formula "18"))
                                                (rule "allLeft" (formula "17") (inst "t=i_0"))
                                                (rule "narrowSelectArrayType" (formula "17") (term "0,0,0,0,0,0,0,0") (ifseqformula "21") (ifseqformula "40"))
                                                (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0,0,0,0,0"))
                                                (rule "applyEq" (formula "17") (term "1,1,1,0,0") (ifseqformula "9"))
                                                (rule "applyEq" (formula "17") (term "1,1,1,0") (ifseqformula "9"))
                                                (rule "applyEq" (formula "17") (term "0,0,1,1,0") (ifseqformula "9"))
                                                (rule "replace_known_left" (formula "17") (term "0,1,1,0") (ifseqformula "10"))
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0,0,0,0,0,0") (ifseqformula "29"))
                                                (rule "qeq_literals" (formula "17") (term "0,1,0,0,0,0,0,0"))
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0,0,0,0,0") (ifseqformula "20"))
                                                (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1,0,0,0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "17") (term "1,1,0,0,1,0,0,0,0,0"))
                                                (rule "times_zero_1" (formula "17") (term "1,0,0,1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "17") (term "0,0,1,0,0,0,0,0"))
                                                (rule "leq_literals" (formula "17") (term "0,1,0,0,0,0,0"))
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "inEqSimp_or_tautInEq3" (formula "17") (term "0,0"))
                                                (rule "inEqSimp_homoInEq1" (formula "17") (term "1,0,0"))
                                                (rule "polySimp_pullOutFactor1" (formula "17") (term "0,1,0,0"))
                                                (rule "add_literals" (formula "17") (term "1,0,1,0,0"))
                                                (rule "times_zero_1" (formula "17") (term "0,1,0,0"))
                                                (rule "leq_literals" (formula "17") (term "1,0,0"))
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "true_left" (formula "17"))
                                                (rule "allLeft" (formula "17") (inst "t=iv_5"))
                                                (rule "narrowSelectArrayType" (formula "17") (term "0,0,0,0,0,0,0,0") (ifseqformula "21") (ifseqformula "39"))
                                                (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0,0,0,0,0"))
                                                (rule "applyEq" (formula "17") (term "1,1,1,0") (ifseqformula "11"))
                                                (rule "applyEq" (formula "17") (term "0,0,1,1,0") (ifseqformula "11"))
                                                (rule "replace_known_left" (formula "17") (term "0,1,1,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "applyEq" (formula "17") (term "1,1,1,0,0") (ifseqformula "11"))
                                                (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0,0,0,0,0,0") (ifseqformula "7"))
                                                (rule "qeq_literals" (formula "17") (term "0,1,0,0,0,0,0,0"))
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0,0,0,0,0") (ifseqformula "4"))
                                                (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1,0,0,0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "17") (term "1,1,0,0,1,0,0,0,0,0"))
                                                (rule "times_zero_1" (formula "17") (term "1,0,0,1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "17") (term "0,0,1,0,0,0,0,0"))
                                                (rule "leq_literals" (formula "17") (term "0,1,0,0,0,0,0"))
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "17") (term "0"))
                                                (rule "inEqSimp_homoInEq1" (formula "17") (term "1,0"))
                                                (rule "polySimp_pullOutFactor1" (formula "17") (term "0,1,0"))
                                                (rule "add_literals" (formula "17") (term "1,0,1,0"))
                                                (rule "times_zero_1" (formula "17") (term "0,1,0"))
                                                (rule "leq_literals" (formula "17") (term "1,0"))
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "true_left" (formula "17"))
                                                (rule "allLeft" (formula "16") (inst "t=i_0"))
                                                (rule "narrowSelectArrayType" (formula "16") (term "0,0,0,0,0,0,0,0") (ifseqformula "21") (ifseqformula "41"))
                                                (rule "eqSymm" (formula "16") (term "0,0,0,0,0,0,0"))
                                                (rule "narrowSelectArrayType" (formula "16") (term "0,0,0,0,0,0,0,0") (ifseqformula "21") (ifseqformula "40"))
                                                (rule "eqSymm" (formula "16") (term "0,0,0,0,0,0,0"))
                                                (rule "inEqSimp_commuteGeq" (formula "16") (term "1,0,0,0,0,0"))
                                                (rule "applyEq" (formula "16") (term "1,1,1,0") (ifseqformula "9"))
                                                (rule "applyEq" (formula "16") (term "0,0,1,1,0") (ifseqformula "9"))
                                                (rule "replace_known_left" (formula "16") (term "0,1,1,0") (ifseqformula "10"))
                                                (builtin "One Step Simplification" (formula "16"))
                                                (rule "applyEq" (formula "16") (term "1,1,0,0") (ifseqformula "9"))
                                                (builtin "One Step Simplification" (formula "16"))
                                                (rule "inEqSimp_contradInEq1" (formula "16") (term "1,0,0,0") (ifseqformula "20"))
                                                (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1,0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1,0,0,0"))
                                                (rule "add_literals" (formula "16") (term "1,1,0,0,1,0,0,0"))
                                                (rule "times_zero_1" (formula "16") (term "1,0,0,1,0,0,0"))
                                                (rule "add_zero_right" (formula "16") (term "0,0,1,0,0,0"))
                                                (rule "leq_literals" (formula "16") (term "0,1,0,0,0"))
                                                (builtin "One Step Simplification" (formula "16"))
                                                (rule "inEqSimp_contradInEq1" (formula "16") (term "1,0,0,0") (ifseqformula "29"))
                                                (rule "qeq_literals" (formula "16") (term "0,1,0,0,0"))
                                                (builtin "One Step Simplification" (formula "16"))
                                                (rule "commute_or" (formula "16") (term "0,0"))
                                                (rule "commute_or_2" (formula "16") (term "0"))
                                                (rule "allLeft" (formula "17") (inst "t=iv_5"))
                                                (rule "narrowSelectArrayType" (formula "17") (term "1,0,0,0,0,0,0,0") (ifseqformula "22") (ifseqformula "40"))
                                                (rule "narrowSelectArrayType" (formula "17") (term "0,0,0,0,0,0,0,0") (ifseqformula "22") (ifseqformula "39"))
                                                (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0,0,0,0,0"))
                                                (rule "applyEq" (formula "17") (term "1,1,0,0") (ifseqformula "11"))
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "applyEq" (formula "17") (term "0,0,1,1,0") (ifseqformula "11"))
                                                (rule "replace_known_left" (formula "17") (term "0,1,1,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "applyEq" (formula "17") (term "1,1,0") (ifseqformula "11"))
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0,0,0") (ifseqformula "4"))
                                                (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1,0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1,0,0,0"))
                                                (rule "add_literals" (formula "17") (term "1,1,0,0,1,0,0,0"))
                                                (rule "times_zero_1" (formula "17") (term "1,0,0,1,0,0,0"))
                                                (rule "add_zero_right" (formula "17") (term "0,0,1,0,0,0"))
                                                (rule "leq_literals" (formula "17") (term "0,1,0,0,0"))
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0,0,0") (ifseqformula "7"))
                                                (rule "qeq_literals" (formula "17") (term "0,1,0,0,0"))
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "commute_or" (formula "17") (term "0,0"))
                                                (rule "commute_or_2" (formula "17") (term "0"))
                                                (rule "allLeft" (formula "16") (inst "t=iv_5"))
                                                (rule "replace_known_right" (formula "16") (term "1") (ifseqformula "44"))
                                                (builtin "One Step Simplification" (formula "16"))
                                                (rule "inEqSimp_commuteGeq" (formula "16") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "8"))
                                                (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
                                                (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
                                                (rule "add_zero_right" (formula "16") (term "0,0,1"))
                                                (rule "leq_literals" (formula "16") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "16"))
                                                (rule "inEqSimp_contradInEq1" (formula "16") (ifseqformula "7"))
                                                (rule "qeq_literals" (formula "16") (term "0"))
                                                (builtin "One Step Simplification" (formula "16"))
                                                (rule "closeFalse" (formula "16"))
                                             )
                                          )
                                       )
                                       (branch "CUT: iv_5 >= i_0 FALSE"
                                          (builtin "One Step Simplification" (formula "30"))
                                          (rule "inEqSimp_geqRight" (formula "37"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1"))
                                          (rule "mul_literals" (formula "1") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                          (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "1"))
                                          (rule "times_zero_1" (formula "7") (term "0,0"))
                                          (rule "add_zero_left" (formula "7") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                                          (rule "mul_literals" (formula "7") (term "1"))
                                          (rule "inEqSimp_subsumption1" (formula "28") (ifseqformula "7"))
                                          (rule "leq_literals" (formula "28") (term "0"))
                                          (builtin "One Step Simplification" (formula "28"))
                                          (rule "true_left" (formula "28"))
                                          (rule "allLeft" (formula "28") (inst "t=iv_5"))
                                          (rule "inEqSimp_contradInEq0" (formula "28") (term "1,0,0,0") (ifseqformula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,0"))
                                          (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,0"))
                                          (rule "polySimp_addComm0" (formula "28") (term "0,0,0,1,0,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1,0,0,0"))
                                          (rule "add_literals" (formula "28") (term "1,1,0,0,1,0,0,0"))
                                          (rule "times_zero_1" (formula "28") (term "1,0,0,1,0,0,0"))
                                          (rule "add_zero_right" (formula "28") (term "0,0,1,0,0,0"))
                                          (rule "leq_literals" (formula "28") (term "0,1,0,0,0"))
                                          (builtin "One Step Simplification" (formula "28"))
                                          (rule "inEqSimp_contradInEq1" (formula "28") (term "0,0,0") (ifseqformula "8"))
                                          (rule "qeq_literals" (formula "28") (term "0,0,0,0"))
                                          (builtin "One Step Simplification" (formula "28"))
                                          (rule "allLeft" (formula "34") (inst "t=iv_5"))
                                          (rule "inEqSimp_contradInEq0" (formula "34") (term "1,0,0,0") (ifseqformula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,0"))
                                          (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,0"))
                                          (rule "polySimp_addComm0" (formula "34") (term "0,0,0,1,0,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1,0,0,0"))
                                          (rule "add_literals" (formula "34") (term "1,1,0,0,1,0,0,0"))
                                          (rule "times_zero_1" (formula "34") (term "1,0,0,1,0,0,0"))
                                          (rule "add_zero_right" (formula "34") (term "0,0,1,0,0,0"))
                                          (rule "leq_literals" (formula "34") (term "0,1,0,0,0"))
                                          (builtin "One Step Simplification" (formula "34"))
                                          (rule "inEqSimp_contradInEq1" (formula "34") (term "0,0,0") (ifseqformula "8"))
                                          (rule "qeq_literals" (formula "34") (term "0,0,0,0"))
                                          (builtin "One Step Simplification" (formula "34"))
                                          (rule "cut_direct" (formula "32") (term "0"))
                                          (branch "CUT: a1[iv_5].length <= 0 TRUE"
                                             (builtin "One Step Simplification" (formula "33"))
                                             (rule "true_left" (formula "33"))
                                             (rule "replace_known_left" (formula "28") (term "0,0") (ifseqformula "32"))
                                             (builtin "One Step Simplification" (formula "28"))
                                             (rule "true_left" (formula "28"))
                                             (rule "inEqSimp_contradInEq0" (formula "33") (term "0,0") (ifseqformula "31"))
                                             (rule "qeq_literals" (formula "33") (term "0,0,0"))
                                             (builtin "One Step Simplification" (formula "33"))
                                             (rule "inEqSimp_antiSymm" (formula "29") (ifseqformula "31"))
                                             (rule "applyEq" (formula "32") (term "0") (ifseqformula "29"))
                                             (rule "leq_literals" (formula "32"))
                                             (rule "true_left" (formula "32"))
                                             (rule "applyEq" (formula "30") (term "0") (ifseqformula "29"))
                                             (rule "qeq_literals" (formula "30"))
                                             (rule "true_left" (formula "30"))
                                             (rule "allLeft" (formula "35") (inst "t=iv_5"))
                                             (rule "narrowSelectArrayType" (formula "35") (term "0,0,0,0,0,0,0,0") (ifseqformula "20") (ifseqformula "39"))
                                             (rule "inEqSimp_commuteLeq" (formula "35") (term "1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "35") (term "1,0,0"))
                                             (rule "inEqSimp_homoInEq1" (formula "35") (term "1,0,0,0"))
                                             (rule "polySimp_addComm1" (formula "35") (term "0,1,0,0,0"))
                                             (rule "applyEq" (formula "35") (term "0,1,0,0,1,0,0,0") (ifseqformula "29"))
                                             (rule "times_zero_2" (formula "35") (term "1,0,0,1,0,0,0"))
                                             (rule "add_literals" (formula "35") (term "0,0,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,0"))
                                             (rule "mul_literals" (formula "35") (term "1,1,0,0,0"))
                                             (rule "inEqSimp_contradInEq1" (formula "35") (term "1,0,0,0,0,0") (ifseqformula "8"))
                                             (rule "qeq_literals" (formula "35") (term "0,1,0,0,0,0,0"))
                                             (builtin "One Step Simplification" (formula "35"))
                                             (rule "inEqSimp_contradInEq0" (formula "35") (term "1,0,0,0,0") (ifseqformula "1"))
                                             (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1,0,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,0,0"))
                                             (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,0,0"))
                                             (rule "polySimp_addComm0" (formula "35") (term "0,0,0,1,0,0,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1,0,0,0,0"))
                                             (rule "add_literals" (formula "35") (term "1,1,0,0,1,0,0,0,0"))
                                             (rule "times_zero_1" (formula "35") (term "1,0,0,1,0,0,0,0"))
                                             (rule "add_zero_right" (formula "35") (term "0,0,1,0,0,0,0"))
                                             (rule "leq_literals" (formula "35") (term "0,1,0,0,0,0"))
                                             (builtin "One Step Simplification" (formula "35"))
                                             (rule "cut_direct" (formula "35") (term "0,1,1,0"))
                                             (branch "CUT: a2[iv_5].length >= 1 TRUE"
                                                (builtin "One Step Simplification" (formula "36"))
                                                (rule "inEqSimp_contradEq7" (formula "32") (term "1") (ifseqformula "35"))
                                                (rule "times_zero_1" (formula "32") (term "1,0,0,1"))
                                                (rule "add_zero_right" (formula "32") (term "0,0,1"))
                                                (rule "leq_literals" (formula "32") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "32"))
                                                (rule "inEqSimp_subsumption1" (formula "30") (ifseqformula "35"))
                                                (rule "leq_literals" (formula "30") (term "0"))
                                                (builtin "One Step Simplification" (formula "30"))
                                                (rule "true_left" (formula "30"))
                                                (rule "inEqSimp_contradInEq0" (formula "34") (ifseqformula "31"))
                                                (rule "qeq_literals" (formula "34") (term "0"))
                                                (builtin "One Step Simplification" (formula "34"))
                                                (rule "closeFalse" (formula "34"))
                                             )
                                             (branch "CUT: a2[iv_5].length >= 1 FALSE"
                                                (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_geqRight" (formula "39"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "replace_known_left" (formula "33") (term "0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "33"))
                                                (rule "true_left" (formula "33"))
                                                (rule "inEqSimp_antiSymm" (formula "31") (ifseqformula "1"))
                                                (rule "applyEq" (formula "32") (term "0") (ifseqformula "31"))
                                                (rule "qeq_literals" (formula "32"))
                                                (rule "true_left" (formula "32"))
                                                (rule "applyEq" (formula "35") (term "1,1,0,0") (ifseqformula "31"))
                                                (builtin "One Step Simplification" (formula "35"))
                                                (rule "applyEq" (formula "1") (term "0") (ifseqformula "31"))
                                                (rule "leq_literals" (formula "1"))
                                                (rule "true_left" (formula "1"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "34") (term "0"))
                                                (rule "add_zero_right" (formula "34") (term "1,1,0"))
                                                (rule "qeq_literals" (formula "34") (term "1,0"))
                                                (builtin "One Step Simplification" (formula "34"))
                                                (rule "true_left" (formula "34"))
                                                (rule "allLeft" (formula "33") (inst "t=iv_5"))
                                                (rule "narrowSelectArrayType" (formula "33") (term "0,0,0,0,0,0,0,0") (ifseqformula "20") (ifseqformula "38"))
                                                (rule "eqSymm" (formula "33") (term "0,0,0,0,0,0,0"))
                                                (rule "narrowSelectArrayType" (formula "33") (term "0,0,0,0,0,0,0,0") (ifseqformula "20") (ifseqformula "39"))
                                                (rule "eqSymm" (formula "33") (term "0,0,0,0,0,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "33") (term "1,0,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "33") (term "1,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "33") (term "1,0,0"))
                                                (rule "applyEq" (formula "33") (term "1,1,0,0,0") (ifseqformula "29"))
                                                (rule "applyEq" (formula "33") (term "1,1,1,0") (ifseqformula "30"))
                                                (builtin "One Step Simplification" (formula "33"))
                                                (rule "applyEq" (formula "33") (term "1,1,0,0") (ifseqformula "30"))
                                                (builtin "One Step Simplification" (formula "33"))
                                                (rule "inEqSimp_contradInEq0" (formula "33") (term "1,0,0") (ifseqformula "1"))
                                                (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0"))
                                                (rule "polySimp_addComm0" (formula "33") (term "0,0,0,1,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "33") (term "1,1,0,0,1,0,0"))
                                                (rule "times_zero_1" (formula "33") (term "1,0,0,1,0,0"))
                                                (rule "add_zero_right" (formula "33") (term "0,0,1,0,0"))
                                                (rule "leq_literals" (formula "33") (term "0,1,0,0"))
                                                (builtin "One Step Simplification" (formula "33"))
                                                (rule "inEqSimp_contradInEq1" (formula "33") (term "1,0,0") (ifseqformula "8"))
                                                (rule "qeq_literals" (formula "33") (term "0,1,0,0"))
                                                (builtin "One Step Simplification" (formula "33"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "33") (term "0"))
                                                (rule "add_zero_right" (formula "33") (term "1,1,0"))
                                                (rule "qeq_literals" (formula "33") (term "1,0"))
                                                (builtin "One Step Simplification" (formula "33"))
                                                (rule "true_left" (formula "33"))
                                                (rule "allLeft" (formula "35") (inst "t=iv_5"))
                                                (rule "narrowSelectArrayType" (formula "35") (term "0,0,0,0,0,0,0,0") (ifseqformula "20") (ifseqformula "39"))
                                                (rule "inEqSimp_commuteLeq" (formula "35") (term "1,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "35") (term "1,0,0,0"))
                                                (rule "inEqSimp_homoInEq1" (formula "35") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "35") (term "0,1,0,0"))
                                                (rule "applyEq" (formula "35") (term "1,1,0,0,0") (ifseqformula "29"))
                                                (rule "applyEq" (formula "35") (term "1,1,1,0") (ifseqformula "30"))
                                                (builtin "One Step Simplification" (formula "35"))
                                                (rule "applyEq" (formula "35") (term "0,1,0,0,1,0,0") (ifseqformula "30"))
                                                (rule "times_zero_2" (formula "35") (term "1,0,0,1,0,0"))
                                                (rule "add_literals" (formula "35") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0"))
                                                (rule "mul_literals" (formula "35") (term "1,1,0,0"))
                                                (rule "inEqSimp_contradInEq0" (formula "35") (term "1,0,0,0,0") (ifseqformula "1"))
                                                (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,0,0"))
                                                (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,0,0"))
                                                (rule "polySimp_addComm0" (formula "35") (term "0,0,0,1,0,0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1,0,0,0,0"))
                                                (rule "add_literals" (formula "35") (term "1,1,0,0,1,0,0,0,0"))
                                                (rule "times_zero_1" (formula "35") (term "1,0,0,1,0,0,0,0"))
                                                (rule "add_zero_right" (formula "35") (term "0,0,1,0,0,0,0"))
                                                (rule "leq_literals" (formula "35") (term "0,1,0,0,0,0"))
                                                (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (term "1,0,0,0,0") (ifseqformula "8"))
                                                (rule "qeq_literals" (formula "35") (term "0,1,0,0,0,0"))
                                                (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "35") (term "0,0,0"))
                                                (rule "add_zero_right" (formula "35") (term "1,1,0,0,0"))
                                                (rule "qeq_literals" (formula "35") (term "1,0,0,0"))
                                                (builtin "One Step Simplification" (formula "35"))
                                                (rule "true_left" (formula "35"))
                                                (rule "allLeft" (formula "13") (inst "t=i_0"))
                                                (rule "inEqSimp_commuteGeq" (formula "13") (term "1,0,0,0"))
                                                (rule "applyEq" (formula "13") (term "0,1") (ifseqformula "10"))
                                                (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "11"))
                                                (builtin "One Step Simplification" (formula "13"))
                                                (rule "true_left" (formula "13"))
                                                (rule "allLeft" (formula "18") (inst "t=i_0"))
                                                (rule "narrowSelectArrayType" (formula "18") (term "0,0,0,0,0,0,0,0") (ifseqformula "21") (ifseqformula "41"))
                                                (rule "inEqSimp_commuteGeq" (formula "18") (term "1,0,0,0,0,0"))
                                                (rule "applyEq" (formula "18") (term "0,0,1,1,0") (ifseqformula "10"))
                                                (rule "replace_known_left" (formula "18") (term "0,1,1,0") (ifseqformula "11"))
                                                (builtin "One Step Simplification" (formula "18"))
                                                (rule "applyEq" (formula "18") (term "1,1,0") (ifseqformula "10"))
                                                (rule "inEqSimp_contradInEq1" (formula "18") (term "1,0,0,0,0") (ifseqformula "20"))
                                                (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1,0,0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1,0,0,0,0"))
                                                (rule "add_literals" (formula "18") (term "1,1,0,0,1,0,0,0,0"))
                                                (rule "times_zero_1" (formula "18") (term "1,0,0,1,0,0,0,0"))
                                                (rule "add_zero_right" (formula "18") (term "0,0,1,0,0,0,0"))
                                                (rule "leq_literals" (formula "18") (term "0,1,0,0,0,0"))
                                                (builtin "One Step Simplification" (formula "18"))
                                                (rule "inEqSimp_contradInEq1" (formula "18") (term "1,0,0,0,0") (ifseqformula "7"))
                                                (rule "qeq_literals" (formula "18") (term "0,1,0,0,0,0"))
                                                (builtin "One Step Simplification" (formula "18"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "18") (term "0"))
                                                (rule "inEqSimp_homoInEq1" (formula "18") (term "1,0"))
                                                (rule "polySimp_pullOutFactor1" (formula "18") (term "0,1,0"))
                                                (rule "add_literals" (formula "18") (term "1,0,1,0"))
                                                (rule "times_zero_1" (formula "18") (term "0,1,0"))
                                                (rule "leq_literals" (formula "18") (term "1,0"))
                                                (builtin "One Step Simplification" (formula "18"))
                                                (rule "true_left" (formula "18"))
                                                (rule "allLeft" (formula "12") (inst "t=iv_5"))
                                                (rule "inEqSimp_commuteGeq" (formula "12") (term "1,0,0,0"))
                                                (rule "applyEq" (formula "12") (term "0,1,0") (ifseqformula "31"))
                                                (rule "leq_literals" (formula "12") (term "1,0"))
                                                (builtin "One Step Simplification" (formula "12"))
                                                (rule "true_left" (formula "12"))
                                                (rule "allLeft" (formula "18") (inst "t=iv_5"))
                                                (rule "narrowSelectArrayType" (formula "18") (term "0,0,0,0,0,0,0,0") (ifseqformula "21") (ifseqformula "38"))
                                                (rule "inEqSimp_commuteGeq" (formula "18") (term "1,0,0,0,0,0"))
                                                (rule "applyEq" (formula "18") (term "1,1,1,0") (ifseqformula "31"))
                                                (builtin "One Step Simplification" (formula "18"))
                                                (rule "applyEq" (formula "18") (term "1,1,1,0,0,0") (ifseqformula "30"))
                                                (rule "add_literals" (formula "18") (term "1,1,0,0,0"))
                                                (builtin "One Step Simplification" (formula "18"))
                                                (rule "applyEq" (formula "18") (term "1,1,0,0") (ifseqformula "31"))
                                                (builtin "One Step Simplification" (formula "18"))
                                                (rule "inEqSimp_contradInEq1" (formula "18") (term "1,0,0,0,0") (ifseqformula "8"))
                                                (rule "qeq_literals" (formula "18") (term "0,1,0,0,0,0"))
                                                (builtin "One Step Simplification" (formula "18"))
                                                (rule "inEqSimp_contradInEq1" (formula "18") (term "1,0,0,0") (ifseqformula "4"))
                                                (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1,0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1,0,0,0"))
                                                (rule "add_literals" (formula "18") (term "1,1,0,0,1,0,0,0"))
                                                (rule "times_zero_1" (formula "18") (term "1,0,0,1,0,0,0"))
                                                (rule "add_zero_right" (formula "18") (term "0,0,1,0,0,0"))
                                                (rule "leq_literals" (formula "18") (term "0,1,0,0,0"))
                                                (builtin "One Step Simplification" (formula "18"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "18") (term "0"))
                                                (rule "add_zero_right" (formula "18") (term "1,1,0"))
                                                (rule "qeq_literals" (formula "18") (term "1,0"))
                                                (builtin "One Step Simplification" (formula "18"))
                                                (rule "true_left" (formula "18"))
                                                (rule "allLeft" (formula "17") (inst "t=i_0"))
                                                (rule "narrowSelectArrayType" (formula "17") (term "0,0,0,0,0,0,0,0") (ifseqformula "21") (ifseqformula "40"))
                                                (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0,0,0,0,0"))
                                                (rule "applyEq" (formula "17") (term "1,1,1,0") (ifseqformula "10"))
                                                (rule "applyEq" (formula "17") (term "1,1,1,0,0") (ifseqformula "10"))
                                                (rule "applyEq" (formula "17") (term "0,0,1,1,0") (ifseqformula "10"))
                                                (rule "replace_known_left" (formula "17") (term "0,1,1,0") (ifseqformula "11"))
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0,0,0,0,0,0") (ifseqformula "7"))
                                                (rule "qeq_literals" (formula "17") (term "0,1,0,0,0,0,0,0"))
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0,0,0,0,0") (ifseqformula "20"))
                                                (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1,0,0,0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "17") (term "1,1,0,0,1,0,0,0,0,0"))
                                                (rule "times_zero_1" (formula "17") (term "1,0,0,1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "17") (term "0,0,1,0,0,0,0,0"))
                                                (rule "leq_literals" (formula "17") (term "0,1,0,0,0,0,0"))
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "17") (term "0"))
                                                (rule "inEqSimp_homoInEq1" (formula "17") (term "1,0"))
                                                (rule "polySimp_pullOutFactor1" (formula "17") (term "0,1,0"))
                                                (rule "add_literals" (formula "17") (term "1,0,1,0"))
                                                (rule "times_zero_1" (formula "17") (term "0,1,0"))
                                                (rule "leq_literals" (formula "17") (term "1,0"))
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "true_left" (formula "17"))
                                                (rule "allLeft" (formula "17") (inst "t=iv_5"))
                                                (rule "narrowSelectArrayType" (formula "17") (term "0,0,0,0,0,0,0,0") (ifseqformula "21") (ifseqformula "39"))
                                                (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0,0,0,0,0"))
                                                (rule "applyEq" (formula "17") (term "1,1,0,0,0") (ifseqformula "30"))
                                                (rule "applyEq" (formula "17") (term "1,1,1,0") (ifseqformula "31"))
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "applyEq" (formula "17") (term "1,1,1,0,0") (ifseqformula "31"))
                                                (rule "add_zero_right" (formula "17") (term "1,1,0,0"))
                                                (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0,0,0,0,0,0") (ifseqformula "8"))
                                                (rule "qeq_literals" (formula "17") (term "0,1,0,0,0,0,0,0"))
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0,0,0,0,0") (ifseqformula "4"))
                                                (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1,0,0,0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "17") (term "1,1,0,0,1,0,0,0,0,0"))
                                                (rule "times_zero_1" (formula "17") (term "1,0,0,1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "17") (term "0,0,1,0,0,0,0,0"))
                                                (rule "leq_literals" (formula "17") (term "0,1,0,0,0,0,0"))
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "17") (term "0,0,0"))
                                                (rule "add_zero_right" (formula "17") (term "1,1,0,0,0"))
                                                (rule "qeq_literals" (formula "17") (term "1,0,0,0"))
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "true_left" (formula "17"))
                                                (rule "allLeft" (formula "16") (inst "t=i_0"))
                                                (rule "narrowSelectArrayType" (formula "16") (term "1,0,0,0,0,0,0,0") (ifseqformula "21") (ifseqformula "40"))
                                                (rule "narrowSelectArrayType" (formula "16") (term "0,0,0,0,0,0,0,0") (ifseqformula "21") (ifseqformula "41"))
                                                (rule "inEqSimp_commuteGeq" (formula "16") (term "1,0,0,0,0,0"))
                                                (rule "applyEq" (formula "16") (term "1,1,1,0") (ifseqformula "10"))
                                                (rule "applyEq" (formula "16") (term "1,1,0,0") (ifseqformula "10"))
                                                (builtin "One Step Simplification" (formula "16"))
                                                (rule "applyEq" (formula "16") (term "0,0,1,1,0") (ifseqformula "10"))
                                                (rule "replace_known_left" (formula "16") (term "0,1,1,0") (ifseqformula "11"))
                                                (builtin "One Step Simplification" (formula "16"))
                                                (rule "inEqSimp_contradInEq1" (formula "16") (term "1,0,0,0,0") (ifseqformula "7"))
                                                (rule "qeq_literals" (formula "16") (term "0,1,0,0,0,0"))
                                                (builtin "One Step Simplification" (formula "16"))
                                                (rule "inEqSimp_contradInEq1" (formula "16") (term "1,0,0,0") (ifseqformula "20"))
                                                (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1,0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1,0,0,0"))
                                                (rule "add_literals" (formula "16") (term "1,1,0,0,1,0,0,0"))
                                                (rule "times_zero_1" (formula "16") (term "1,0,0,1,0,0,0"))
                                                (rule "add_zero_right" (formula "16") (term "0,0,1,0,0,0"))
                                                (rule "leq_literals" (formula "16") (term "0,1,0,0,0"))
                                                (builtin "One Step Simplification" (formula "16"))
                                                (rule "commute_or" (formula "16") (term "0,0"))
                                                (rule "commute_or_2" (formula "16") (term "0"))
                                                (rule "allLeft" (formula "17") (inst "t=iv_5"))
                                                (rule "narrowSelectArrayType" (formula "17") (term "1,0,0,0,0,0,0,0") (ifseqformula "22") (ifseqformula "40"))
                                                (rule "narrowSelectArrayType" (formula "17") (term "0,0,0,0,0,0,0,0") (ifseqformula "22") (ifseqformula "39"))
                                                (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0,0,0,0,0"))
                                                (rule "applyEq" (formula "17") (term "1,1,1,0") (ifseqformula "32"))
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "applyEq" (formula "17") (term "1,1,0,0,0") (ifseqformula "31"))
                                                (rule "applyEq" (formula "17") (term "1,1,0,0") (ifseqformula "32"))
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0,0,0") (ifseqformula "4"))
                                                (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1,0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1,0,0,0"))
                                                (rule "add_literals" (formula "17") (term "1,1,0,0,1,0,0,0"))
                                                (rule "times_zero_1" (formula "17") (term "1,0,0,1,0,0,0"))
                                                (rule "add_zero_right" (formula "17") (term "0,0,1,0,0,0"))
                                                (rule "leq_literals" (formula "17") (term "0,1,0,0,0"))
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0,0,0") (ifseqformula "8"))
                                                (rule "qeq_literals" (formula "17") (term "0,1,0,0,0"))
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "17") (term "0"))
                                                (rule "add_literals" (formula "17") (term "1,1,0"))
                                                (rule "qeq_literals" (formula "17") (term "1,0"))
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "true_left" (formula "17"))
                                                (rule "allLeft" (formula "16") (inst "t=iv_5"))
                                                (rule "replace_known_right" (formula "16") (term "1") (ifseqformula "43"))
                                                (builtin "One Step Simplification" (formula "16"))
                                                (rule "inEqSimp_commuteGeq" (formula "16") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "16") (term "0") (ifseqformula "8"))
                                                (rule "qeq_literals" (formula "16") (term "0,0"))
                                                (builtin "One Step Simplification" (formula "16"))
                                                (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "16"))
                                                (rule "andLeft" (formula "9"))
                                                (rule "inEqSimp_homoInEq1" (formula "9"))
                                                (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                                                (rule "add_literals" (formula "9") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "9") (term "1,0"))
                                                (rule "add_literals" (formula "9") (term "0"))
                                                (rule "leq_literals" (formula "9"))
                                                (rule "closeFalse" (formula "9"))
                                             )
                                          )
                                          (branch "CUT: a1[iv_5].length <= 0 FALSE"
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "replace_known_right" (formula "28") (term "0,0") (ifseqformula "40"))
                                             (builtin "One Step Simplification" (formula "28"))
                                             (rule "inEqSimp_leqRight" (formula "40"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                             (rule "mul_literals" (formula "1") (term "1"))
                                             (rule "replace_known_left" (formula "35") (term "0,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "35"))
                                             (rule "true_left" (formula "35"))
                                             (rule "inEqSimp_subsumption1" (formula "31") (ifseqformula "1"))
                                             (rule "leq_literals" (formula "31") (term "0"))
                                             (builtin "One Step Simplification" (formula "31"))
                                             (rule "true_left" (formula "31"))
                                             (rule "inEqSimp_subsumption1" (formula "31") (ifseqformula "32"))
                                             (rule "leq_literals" (formula "31") (term "0"))
                                             (builtin "One Step Simplification" (formula "31"))
                                             (rule "true_left" (formula "31"))
                                             (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "31"))
                                             (rule "qeq_literals" (formula "29") (term "0,0"))
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "applyEq" (formula "31") (term "0") (ifseqformula "29"))
                                             (rule "allLeft" (formula "34") (inst "t=iv_5"))
                                             (rule "narrowSelectArrayType" (formula "34") (term "0,0,0,0,0,0,0,0") (ifseqformula "21") (ifseqformula "38"))
                                             (rule "inEqSimp_commuteLeq" (formula "34") (term "1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "34") (term "1,0,0"))
                                             (rule "inEqSimp_homoInEq1" (formula "34") (term "1,0,0,0"))
                                             (rule "polySimp_addComm1" (formula "34") (term "0,1,0,0,0"))
                                             (rule "applyEq" (formula "34") (term "1,1,0,0") (ifseqformula "29"))
                                             (rule "applyEq" (formula "34") (term "1,1,1,0") (ifseqformula "29"))
                                             (rule "applyEq" (formula "34") (term "0,0,1,1,0") (ifseqformula "29"))
                                             (rule "replace_known_left" (formula "34") (term "0,1,1,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "34") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_contradInEq0" (formula "34") (term "1,0,0,0") (ifseqformula "2"))
                                             (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,0"))
                                             (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,0"))
                                             (rule "polySimp_addComm0" (formula "34") (term "0,0,0,1,0,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1,0,0,0"))
                                             (rule "add_literals" (formula "34") (term "1,1,0,0,1,0,0,0"))
                                             (rule "times_zero_1" (formula "34") (term "1,0,0,1,0,0,0"))
                                             (rule "add_zero_right" (formula "34") (term "0,0,1,0,0,0"))
                                             (rule "leq_literals" (formula "34") (term "0,1,0,0,0"))
                                             (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (term "1,0,0,0") (ifseqformula "9"))
                                             (rule "qeq_literals" (formula "34") (term "0,1,0,0,0"))
                                             (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "34") (term "0"))
                                             (rule "inEqSimp_homoInEq1" (formula "34") (term "1,0"))
                                             (rule "polySimp_pullOutFactor1" (formula "34") (term "0,1,0"))
                                             (rule "add_literals" (formula "34") (term "1,0,1,0"))
                                             (rule "times_zero_1" (formula "34") (term "0,1,0"))
                                             (rule "leq_literals" (formula "34") (term "1,0"))
                                             (builtin "One Step Simplification" (formula "34"))
                                             (rule "true_left" (formula "34"))
                                             (rule "allLeft" (formula "33") (inst "t=iv_5"))
                                             (rule "narrowSelectArrayType" (formula "33") (term "0,0,0,0,0,0,0,0") (ifseqformula "21") (ifseqformula "38"))
                                             (rule "eqSymm" (formula "33") (term "0,0,0,0,0,0,0"))
                                             (rule "narrowSelectArrayType" (formula "33") (term "0,0,0,0,0,0,0,0") (ifseqformula "21") (ifseqformula "39"))
                                             (rule "eqSymm" (formula "33") (term "0,0,0,0,0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "33") (term "1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "33") (term "1,0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "33") (term "1,0"))
                                             (rule "applyEq" (formula "33") (term "1,1,0,0") (ifseqformula "29"))
                                             (builtin "One Step Simplification" (formula "33"))
                                             (rule "applyEq" (formula "33") (term "0,0,1,1,0") (ifseqformula "29"))
                                             (rule "replace_known_left" (formula "33") (term "0,1,1,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "33"))
                                             (rule "applyEq" (formula "33") (term "1,1,0") (ifseqformula "29"))
                                             (builtin "One Step Simplification" (formula "33"))
                                             (rule "inEqSimp_contradInEq1" (formula "33") (term "1,0,0,0") (ifseqformula "9"))
                                             (rule "qeq_literals" (formula "33") (term "0,1,0,0,0"))
                                             (builtin "One Step Simplification" (formula "33"))
                                             (rule "inEqSimp_contradInEq0" (formula "33") (term "1,0,0") (ifseqformula "2"))
                                             (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "33") (term "0,0,0,1,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "33") (term "1,1,0,0,1,0,0"))
                                             (rule "times_zero_1" (formula "33") (term "1,0,0,1,0,0"))
                                             (rule "add_zero_right" (formula "33") (term "0,0,1,0,0"))
                                             (rule "leq_literals" (formula "33") (term "0,1,0,0"))
                                             (builtin "One Step Simplification" (formula "33"))
                                             (rule "commute_or" (formula "33") (term "0,0"))
                                             (rule "commute_or_2" (formula "33") (term "0"))
                                             (rule "allLeft" (formula "36") (inst "t=iv_5"))
                                             (rule "narrowSelectArrayType" (formula "36") (term "0,0,0,0,0,0,0,0") (ifseqformula "21") (ifseqformula "40"))
                                             (rule "inEqSimp_commuteLeq" (formula "36") (term "1,0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "36") (term "1,0"))
                                             (rule "inEqSimp_homoInEq1" (formula "36") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "36") (term "0,1,0,0"))
                                             (rule "applyEq" (formula "36") (term "0,0,1,1,0") (ifseqformula "29"))
                                             (rule "replace_known_left" (formula "36") (term "0,1,1,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "36"))
                                             (rule "applyEq" (formula "36") (term "1,1,0") (ifseqformula "29"))
                                             (rule "applyEq" (formula "36") (term "0,1,0,0,1,0,0") (ifseqformula "29"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "36") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_contradInEq1" (formula "36") (term "1,0,0,0,0,0") (ifseqformula "9"))
                                             (rule "qeq_literals" (formula "36") (term "0,1,0,0,0,0,0"))
                                             (builtin "One Step Simplification" (formula "36"))
                                             (rule "inEqSimp_contradInEq0" (formula "36") (term "1,0,0,0,0") (ifseqformula "2"))
                                             (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1,0,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,0,0"))
                                             (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,0,0"))
                                             (rule "polySimp_addComm0" (formula "36") (term "0,0,0,1,0,0,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1,0,0,0,0"))
                                             (rule "add_literals" (formula "36") (term "1,1,0,0,1,0,0,0,0"))
                                             (rule "times_zero_1" (formula "36") (term "1,0,0,1,0,0,0,0"))
                                             (rule "add_zero_right" (formula "36") (term "0,0,1,0,0,0,0"))
                                             (rule "leq_literals" (formula "36") (term "0,1,0,0,0,0"))
                                             (builtin "One Step Simplification" (formula "36"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "36") (term "0"))
                                             (rule "inEqSimp_homoInEq1" (formula "36") (term "1,0"))
                                             (rule "polySimp_pullOutFactor1" (formula "36") (term "0,1,0"))
                                             (rule "add_literals" (formula "36") (term "1,0,1,0"))
                                             (rule "times_zero_1" (formula "36") (term "0,1,0"))
                                             (rule "leq_literals" (formula "36") (term "1,0"))
                                             (builtin "One Step Simplification" (formula "36"))
                                             (rule "true_left" (formula "36"))
                                             (rule "allLeft" (formula "14") (inst "t=i_0"))
                                             (rule "inEqSimp_commuteGeq" (formula "14") (term "1,0,0,0"))
                                             (rule "applyEq" (formula "14") (term "0,1") (ifseqformula "11"))
                                             (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "12"))
                                             (builtin "One Step Simplification" (formula "14"))
                                             (rule "true_left" (formula "14"))
                                             (rule "allLeft" (formula "19") (inst "t=i_0"))
                                             (rule "narrowSelectArrayType" (formula "19") (term "0,0,0,0,0,0,0,0") (ifseqformula "22") (ifseqformula "42"))
                                             (rule "inEqSimp_commuteGeq" (formula "19") (term "1,0,0,0,0,0"))
                                             (rule "applyEq" (formula "19") (term "1,1,0,0") (ifseqformula "11"))
                                             (rule "applyEq" (formula "19") (term "1,1,1,0") (ifseqformula "11"))
                                             (rule "applyEq" (formula "19") (term "0,0,1,1,0") (ifseqformula "11"))
                                             (rule "replace_known_left" (formula "19") (term "0,1,1,0") (ifseqformula "12"))
                                             (builtin "One Step Simplification" (formula "19"))
                                             (rule "inEqSimp_contradInEq1" (formula "19") (term "1,0,0,0,0") (ifseqformula "21"))
                                             (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1,0,0,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1,0,0,0,0"))
                                             (rule "add_literals" (formula "19") (term "1,1,0,0,1,0,0,0,0"))
                                             (rule "times_zero_1" (formula "19") (term "1,0,0,1,0,0,0,0"))
                                             (rule "add_zero_right" (formula "19") (term "0,0,1,0,0,0,0"))
                                             (rule "leq_literals" (formula "19") (term "0,1,0,0,0,0"))
                                             (builtin "One Step Simplification" (formula "19"))
                                             (rule "inEqSimp_contradInEq1" (formula "19") (term "1,0,0,0,0") (ifseqformula "8"))
                                             (rule "qeq_literals" (formula "19") (term "0,1,0,0,0,0"))
                                             (builtin "One Step Simplification" (formula "19"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "19") (term "0"))
                                             (rule "inEqSimp_homoInEq1" (formula "19") (term "1,0"))
                                             (rule "polySimp_pullOutFactor1" (formula "19") (term "0,1,0"))
                                             (rule "add_literals" (formula "19") (term "1,0,1,0"))
                                             (rule "times_zero_1" (formula "19") (term "0,1,0"))
                                             (rule "leq_literals" (formula "19") (term "1,0"))
                                             (builtin "One Step Simplification" (formula "19"))
                                             (rule "true_left" (formula "19"))
                                             (rule "allLeft" (formula "14") (inst "t=iv_5"))
                                             (rule "inEqSimp_commuteGeq" (formula "14") (term "1,0,0,0"))
                                             (rule "applyEq" (formula "14") (term "0,1") (ifseqformula "30"))
                                             (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "14"))
                                             (rule "true_left" (formula "14"))
                                             (rule "allLeft" (formula "19") (inst "t=iv_5"))
                                             (rule "narrowSelectArrayType" (formula "19") (term "0,0,0,0,0,0,0,0") (ifseqformula "22") (ifseqformula "39"))
                                             (rule "inEqSimp_commuteGeq" (formula "19") (term "1,0,0,0,0,0"))
                                             (rule "applyEq" (formula "19") (term "1,1,1,0") (ifseqformula "30"))
                                             (rule "applyEq" (formula "19") (term "1,1,0,0") (ifseqformula "30"))
                                             (rule "applyEq" (formula "19") (term "0,0,1,1,0") (ifseqformula "30"))
                                             (rule "replace_known_left" (formula "19") (term "0,1,1,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "19"))
                                             (rule "inEqSimp_contradInEq1" (formula "19") (term "1,0,0,0,0,0") (ifseqformula "9"))
                                             (rule "qeq_literals" (formula "19") (term "0,1,0,0,0,0,0"))
                                             (builtin "One Step Simplification" (formula "19"))
                                             (rule "inEqSimp_contradInEq1" (formula "19") (term "1,0,0,0,0") (ifseqformula "5"))
                                             (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1,0,0,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1,0,0,0,0"))
                                             (rule "add_literals" (formula "19") (term "1,1,0,0,1,0,0,0,0"))
                                             (rule "times_zero_1" (formula "19") (term "1,0,0,1,0,0,0,0"))
                                             (rule "add_zero_right" (formula "19") (term "0,0,1,0,0,0,0"))
                                             (rule "leq_literals" (formula "19") (term "0,1,0,0,0,0"))
                                             (builtin "One Step Simplification" (formula "19"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "19") (term "0"))
                                             (rule "inEqSimp_homoInEq1" (formula "19") (term "1,0"))
                                             (rule "polySimp_pullOutFactor1" (formula "19") (term "0,1,0"))
                                             (rule "add_literals" (formula "19") (term "1,0,1,0"))
                                             (rule "times_zero_1" (formula "19") (term "0,1,0"))
                                             (rule "leq_literals" (formula "19") (term "1,0"))
                                             (builtin "One Step Simplification" (formula "19"))
                                             (rule "true_left" (formula "19"))
                                             (rule "allLeft" (formula "18") (inst "t=i_0"))
                                             (rule "narrowSelectArrayType" (formula "18") (term "0,0,0,0,0,0,0,0") (ifseqformula "22") (ifseqformula "41"))
                                             (rule "inEqSimp_commuteGeq" (formula "18") (term "1,0,0,0,0,0"))
                                             (rule "applyEq" (formula "18") (term "1,1,1,0") (ifseqformula "11"))
                                             (rule "applyEq" (formula "18") (term "1,1,1,0,0") (ifseqformula "11"))
                                             (rule "applyEq" (formula "18") (term "0,0,1,1,0") (ifseqformula "11"))
                                             (rule "replace_known_left" (formula "18") (term "0,1,1,0") (ifseqformula "12"))
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "inEqSimp_contradInEq1" (formula "18") (term "1,0,0,0,0,0,0") (ifseqformula "8"))
                                             (rule "qeq_literals" (formula "18") (term "0,1,0,0,0,0,0,0"))
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "inEqSimp_contradInEq1" (formula "18") (term "1,0,0,0,0,0") (ifseqformula "21"))
                                             (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1,0,0,0,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "18") (term "1,1,0,0,1,0,0,0,0,0"))
                                             (rule "times_zero_1" (formula "18") (term "1,0,0,1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "18") (term "0,0,1,0,0,0,0,0"))
                                             (rule "leq_literals" (formula "18") (term "0,1,0,0,0,0,0"))
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "inEqSimp_or_tautInEq3" (formula "18") (term "0,0"))
                                             (rule "inEqSimp_homoInEq1" (formula "18") (term "1,0,0"))
                                             (rule "polySimp_pullOutFactor1" (formula "18") (term "0,1,0,0"))
                                             (rule "add_literals" (formula "18") (term "1,0,1,0,0"))
                                             (rule "times_zero_1" (formula "18") (term "0,1,0,0"))
                                             (rule "leq_literals" (formula "18") (term "1,0,0"))
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "true_left" (formula "18"))
                                             (rule "allLeft" (formula "18") (inst "t=iv_5"))
                                             (rule "narrowSelectArrayType" (formula "18") (term "0,0,0,0,0,0,0,0") (ifseqformula "22") (ifseqformula "40"))
                                             (rule "inEqSimp_commuteGeq" (formula "18") (term "1,0,0,0,0,0"))
                                             (rule "applyEq" (formula "18") (term "1,1,1,0") (ifseqformula "30"))
                                             (rule "applyEq" (formula "18") (term "1,1,1,0,0") (ifseqformula "30"))
                                             (rule "applyEq" (formula "18") (term "0,0,1,1,0") (ifseqformula "30"))
                                             (rule "replace_known_left" (formula "18") (term "0,1,1,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "inEqSimp_contradInEq1" (formula "18") (term "1,0,0,0,0,0,0") (ifseqformula "9"))
                                             (rule "qeq_literals" (formula "18") (term "0,1,0,0,0,0,0,0"))
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "inEqSimp_contradInEq1" (formula "18") (term "1,0,0,0,0,0") (ifseqformula "5"))
                                             (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1,0,0,0,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "18") (term "1,1,0,0,1,0,0,0,0,0"))
                                             (rule "times_zero_1" (formula "18") (term "1,0,0,1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "18") (term "0,0,1,0,0,0,0,0"))
                                             (rule "leq_literals" (formula "18") (term "0,1,0,0,0,0,0"))
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "inEqSimp_or_tautInEq3" (formula "18") (term "0,0"))
                                             (rule "inEqSimp_homoInEq1" (formula "18") (term "1,0,0"))
                                             (rule "polySimp_pullOutFactor1" (formula "18") (term "0,1,0,0"))
                                             (rule "add_literals" (formula "18") (term "1,0,1,0,0"))
                                             (rule "times_zero_1" (formula "18") (term "0,1,0,0"))
                                             (rule "leq_literals" (formula "18") (term "1,0,0"))
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "true_left" (formula "18"))
                                             (rule "allLeft" (formula "17") (inst "t=i_0"))
                                             (rule "narrowSelectArrayType" (formula "17") (term "1,0,0,0,0,0,0,0") (ifseqformula "22") (ifseqformula "41"))
                                             (rule "narrowSelectArrayType" (formula "17") (term "0,0,0,0,0,0,0,0") (ifseqformula "22") (ifseqformula "42"))
                                             (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0,0,0,0,0"))
                                             (rule "applyEq" (formula "17") (term "0,0,1,1,0") (ifseqformula "11"))
                                             (rule "replace_known_left" (formula "17") (term "0,1,1,0") (ifseqformula "12"))
                                             (builtin "One Step Simplification" (formula "17"))
                                             (rule "applyEq" (formula "17") (term "1,1,0") (ifseqformula "11"))
                                             (builtin "One Step Simplification" (formula "17"))
                                             (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0,0,0,0") (ifseqformula "8"))
                                             (rule "qeq_literals" (formula "17") (term "0,1,0,0,0,0"))
                                             (builtin "One Step Simplification" (formula "17"))
                                             (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0,0,0") (ifseqformula "21"))
                                             (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1,0,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1,0,0,0"))
                                             (rule "add_literals" (formula "17") (term "1,1,0,0,1,0,0,0"))
                                             (rule "times_zero_1" (formula "17") (term "1,0,0,1,0,0,0"))
                                             (rule "add_zero_right" (formula "17") (term "0,0,1,0,0,0"))
                                             (rule "leq_literals" (formula "17") (term "0,1,0,0,0"))
                                             (builtin "One Step Simplification" (formula "17"))
                                             (rule "commute_or" (formula "17") (term "0,0"))
                                             (rule "commute_or_2" (formula "17") (term "0"))
                                             (rule "allLeft" (formula "18") (inst "t=iv_5"))
                                             (rule "narrowSelectArrayType" (formula "18") (term "1,0,0,0,0,0,0,0") (ifseqformula "23") (ifseqformula "41"))
                                             (rule "narrowSelectArrayType" (formula "18") (term "0,0,0,0,0,0,0,0") (ifseqformula "23") (ifseqformula "40"))
                                             (rule "inEqSimp_commuteGeq" (formula "18") (term "1,0,0,0,0,0"))
                                             (rule "applyEq" (formula "18") (term "0,0,1,1,0") (ifseqformula "31"))
                                             (rule "replace_known_left" (formula "18") (term "0,1,1,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "applyEq" (formula "18") (term "1,1,0") (ifseqformula "31"))
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "inEqSimp_contradInEq1" (formula "18") (term "1,0,0,0") (ifseqformula "5"))
                                             (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1,0,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1,0,0,0"))
                                             (rule "add_literals" (formula "18") (term "1,1,0,0,1,0,0,0"))
                                             (rule "times_zero_1" (formula "18") (term "1,0,0,1,0,0,0"))
                                             (rule "add_zero_right" (formula "18") (term "0,0,1,0,0,0"))
                                             (rule "leq_literals" (formula "18") (term "0,1,0,0,0"))
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "inEqSimp_contradInEq1" (formula "18") (term "1,0,0,0") (ifseqformula "9"))
                                             (rule "qeq_literals" (formula "18") (term "0,1,0,0,0"))
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "commute_or" (formula "18") (term "0,0"))
                                             (rule "commute_or_2" (formula "18") (term "0"))
                                             (rule "allLeft" (formula "17") (inst "t=iv_5"))
                                             (rule "replace_known_right" (formula "17") (term "1") (ifseqformula "44"))
                                             (builtin "One Step Simplification" (formula "17"))
                                             (rule "inEqSimp_commuteGeq" (formula "17") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "17") (term "0") (ifseqformula "9"))
                                             (rule "qeq_literals" (formula "17") (term "0,0"))
                                             (builtin "One Step Simplification" (formula "17"))
                                             (rule "inEqSimp_contradInEq1" (formula "17") (ifseqformula "10"))
                                             (rule "andLeft" (formula "17"))
                                             (rule "inEqSimp_homoInEq1" (formula "17"))
                                             (rule "polySimp_pullOutFactor1b" (formula "17") (term "0"))
                                             (rule "add_literals" (formula "17") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "17") (term "1,0"))
                                             (rule "add_literals" (formula "17") (term "0"))
                                             (rule "leq_literals" (formula "17"))
                                             (rule "closeFalse" (formula "17"))
                                          )
                                       )
                                    )
                                 )
                                 (branch "CUT: a2[i_0].length = a1[i_0].length FALSE"
                                    (builtin "One Step Simplification" (formula "29"))
                                    (rule "false_right" (formula "29"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "2") (term "0,0") (ifseqformula "10"))
                                    (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "28"))
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "ifthenelse_to_or_left" (formula "8") (term "0,0,0,0,0,0,0"))
                                    (rule "eqSymm" (formula "8") (term "1,1,0,0,0,0,0,0,0"))
                                    (rule "nnf_notAnd" (formula "8") (term "0,0,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0,0,0,0,0,0,0,0"))
                                    (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0,0,0,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "8") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,0,0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0,0,0,0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0,0,0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0,0,0,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
                                    (rule "add_literals" (formula "8") (term "0,0,0,1,0,0,0,0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "8") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0,0,0,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0,0,0,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0,0,0,0,0,0,0"))
                                    (rule "commute_or" (formula "8") (term "0,0,0,0,0,0"))
                                    (rule "commute_or_2" (formula "8") (term "0,0,0,0,0"))
                                    (rule "commute_or_2" (formula "8") (term "0,0,0,0"))
                                    (rule "commute_or_2" (formula "8") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "8") (term "0,0"))
                                    (rule "commute_or_2" (formula "8") (term "0,1,0,0"))
                                    (rule "commute_or" (formula "8") (term "1,1,0,0"))
                                    (rule "commute_or" (formula "8") (term "0,0,1,0,0"))
                                    (rule "cnf_rightDist" (formula "8") (term "1,1,0,0"))
                                    (rule "cnf_rightDist" (formula "8") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "8") (term "0"))
                                    (rule "distr_forallAnd" (formula "8"))
                                    (rule "andLeft" (formula "8"))
                                    (rule "commute_or" (formula "9") (term "0,0"))
                                    (rule "commute_or_2" (formula "8") (term "0,0"))
                                    (rule "commute_or" (formula "9") (term "1,1,0,0"))
                                    (rule "shift_paren_or" (formula "8") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "8") (term "0,0,0,0"))
                                    (rule "cnf_rightDist" (formula "9") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "9") (term "0"))
                                    (rule "distr_forallAnd" (formula "9"))
                                    (rule "andLeft" (formula "9"))
                                    (rule "commute_or_2" (formula "9") (term "0,0"))
                                    (rule "shift_paren_or" (formula "10") (term "0,0"))
                                    (rule "commute_or_2" (formula "9") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "10") (term "0,0,0"))
                                    (rule "shift_paren_or" (formula "9") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "10") (term "0,0,0,0"))
                                    (rule "commute_or_2" (formula "9") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_or_tautInEq1" (formula "9") (term "0,0,0,0"))
                                    (rule "add_zero_right" (formula "9") (term "1,1,0,0,0,0"))
                                    (rule "qeq_literals" (formula "9") (term "1,0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "9"))
                                    (rule "true_left" (formula "9"))
                                    (rule "shift_paren_or" (formula "8") (term "0,0,0,0,0"))
                                    (rule "shift_paren_or" (formula "9") (term "0,0,0,0,0"))
                                    (rule "commute_or_2" (formula "8") (term "0,0,0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "8"))
                                    (rule "commute_or_2" (formula "8") (term "0,0,0,0,0,0"))
                                    (rule "shift_paren_or" (formula "9") (term "0,0,0,0,0,0"))
                                    (rule "commute_or" (formula "8") (term "0,0,0,0,0,0,0"))
                                    (rule "allLeft" (formula "4") (inst "t=i_0"))
                                    (rule "replace_known_right" (formula "4") (term "1") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "inEqSimp_commuteGeq" (formula "4") (term "1,0,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "4") (term "1") (ifseqformula "3"))
                                    (rule "qeq_literals" (formula "4") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "inEqSimp_contradInEq1" (formula "4") (term "1") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "4") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "inEqSimp_contradInEq1" (formula "4") (term "0") (ifseqformula "21"))
                                    (rule "qeq_literals" (formula "4") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "inEqSimp_contradInEq0" (formula "12") (ifseqformula "4"))
                                    (rule "andLeft" (formula "12"))
                                    (rule "inEqSimp_homoInEq1" (formula "12"))
                                    (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
                                    (rule "add_literals" (formula "12") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "12") (term "1,0"))
                                    (rule "add_zero_right" (formula "12") (term "0"))
                                    (rule "leq_literals" (formula "12"))
                                    (rule "closeFalse" (formula "12"))
                                 )
                              )
                              (branch "CUT: a1.length >= 1 FALSE"
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "replace_known_right" (formula "3") (term "0,1,1,0,0,0,0") (ifseqformula "26"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "replace_known_right" (formula "6") (term "0,1,1,0,0,0,0,0") (ifseqformula "26"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "replace_known_right" (formula "4") (term "0,1,1,0,0,0,0") (ifseqformula "26"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "replace_known_right" (formula "7") (term "0,1,1,0,0,0,0,0,0") (ifseqformula "26"))
                                 (builtin "One Step Simplification" (formula "7"))
                                 (rule "inEqSimp_geqRight" (formula "26"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_antiSymm" (formula "14") (ifseqformula "1"))
                                 (rule "applyEq" (formula "6") (term "1,1,0,0,0,0,0") (ifseqformula "14"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "applyEq" (formula "4") (term "1,1,0,0,0,0,0") (ifseqformula "14"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "applyEq" (formula "9") (term "0") (ifseqformula "14"))
                                 (rule "inEqSimp_homoInEq1" (formula "9"))
                                 (rule "times_zero_2" (formula "9") (term "1,0"))
                                 (rule "add_zero_right" (formula "9") (term "0"))
                                 (rule "applyEq" (formula "1") (term "0") (ifseqformula "14"))
                                 (rule "leq_literals" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "applyEq" (formula "14") (term "0") (ifseqformula "13"))
                                 (rule "qeq_literals" (formula "14"))
                                 (rule "true_left" (formula "14"))
                                 (rule "applyEq" (formula "6") (term "1,1,0,0,0,0,0,0") (ifseqformula "13"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "applyEq" (formula "15") (term "1,1,0") (ifseqformula "13"))
                                 (rule "applyEq" (formula "4") (term "1,1,0,0,0,0,0") (ifseqformula "13"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "applyEq" (formula "7") (term "1,1,0,0,0,0,0,0,0") (ifseqformula "13"))
                                 (builtin "One Step Simplification" (formula "7"))
                                 (rule "applyEq" (formula "16") (term "1,1,0") (ifseqformula "13"))
                                 (rule "applyEq" (formula "14") (term "1") (ifseqformula "13"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "8"))
                                 (rule "mul_literals" (formula "8") (term "1"))
                                 (rule "inEqSimp_contradInEq0" (formula "18") (ifseqformula "8"))
                                 (rule "qeq_literals" (formula "18") (term "0"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "closeFalse" (formula "18"))
                              )
                           )
                           (branch "a1[i_0].length >= 1 FALSE"
                              (rule "eqSymm" (formula "24") (term "0"))
                              (rule "inEqSimp_geqRight" (formula "23"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_contradEq7" (formula "24") (term "0") (ifseqformula "2"))
                              (rule "times_zero_1" (formula "24") (term "1,0,0,0"))
                              (rule "add_zero_right" (formula "24") (term "0,0,0"))
                              (rule "leq_literals" (formula "24") (term "0,0"))
                              (builtin "One Step Simplification" (formula "24"))
                              (rule "false_right" (formula "24"))
                              (rule "commute_or" (formula "3") (term "0,0,1,1,0,1,0"))
                              (rule "ifthenelse_to_or_left" (formula "3") (term "0,1,0,1,0"))
                              (rule "eqSymm" (formula "3") (term "1,1,0,1,0,1,0"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "eqSymm" (formula "3") (term "1,0,0,1,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "3") (term "0,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0,1,0,1,0"))
                              (rule "add_literals" (formula "3") (term "0,0,0,0,0,1,0,1,0"))
                              (rule "add_zero_left" (formula "3") (term "0,0,0,0,1,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "3") (term "0,1,1,0,1,0,1,0"))
                              (rule "mul_literals" (formula "3") (term "1,0,0,0,1,1,0,1,0,1,0"))
                              (rule "add_literals" (formula "3") (term "0,0,0,1,1,0,1,0,1,0"))
                              (rule "add_zero_left" (formula "3") (term "0,0,1,1,0,1,0,1,0"))
                              (rule "commute_or" (formula "3") (term "1,0,1,0,1,0"))
                              (rule "arrayLengthIsAShort" (formula "2") (term "0"))
                              (builtin "One Step Simplification" (formula "2"))
                              (rule "true_left" (formula "2"))
                              (rule "arrayLengthNotNegative" (formula "2") (term "0"))
                              (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "3"))
                              (rule "leq_literals" (formula "2") (term "0"))
                              (builtin "One Step Simplification" (formula "2"))
                              (rule "true_left" (formula "2"))
                              (rule "all_pull_out1" (formula "3") (term "1,0,1,0"))
                              (rule "all_pull_out3" (formula "3") (term "0,1,0"))
                              (rule "cnf_rightDist" (formula "3") (term "0,0,1,0"))
                              (rule "commute_or_2" (formula "3") (term "1,0,0,1,0"))
                              (rule "commute_or_2" (formula "3") (term "0,1,0,0,1,0"))
                              (rule "cnf_rightDist" (formula "3") (term "0,0,0,1,0"))
                              (rule "commute_or_2" (formula "3") (term "1,0,0,0,1,0"))
                              (rule "shift_paren_or" (formula "3") (term "0,0,0,0,1,0"))
                              (rule "commute_or_2" (formula "3") (term "0,1,0,0,0,1,0"))
                              (rule "shift_paren_or" (formula "3") (term "0,0,1,0,0,1,0"))
                              (rule "commute_or" (formula "3") (term "0,0,1,0,0,0,1,0"))
                              (rule "all_pull_out0" (formula "3") (term "1,0"))
                              (rule "shift_paren_and" (formula "3") (term "0,1,0"))
                              (rule "all_pull_out3" (formula "3") (term "0"))
                              (rule "cnf_rightDist" (formula "3") (term "0,0"))
                              (rule "distr_forallAnd" (formula "3") (term "0"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "distr_forallAnd" (formula "3"))
                              (rule "andLeft" (formula "3"))
                              (rule "shift_paren_or" (formula "4") (term "0"))
                              (rule "shift_paren_or" (formula "4") (term "0,0"))
                              (rule "commute_or_2" (formula "4") (term "0,0,0"))
                              (rule "inEqSimp_or_tautInEq1" (formula "4") (term "0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "4") (term "1,0,0"))
                              (rule "polySimp_pullOutFactor1" (formula "4") (term "0,1,0,0"))
                              (rule "add_literals" (formula "4") (term "1,0,1,0,0"))
                              (rule "times_zero_1" (formula "4") (term "0,1,0,0"))
                              (rule "leq_literals" (formula "4") (term "1,0,0"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "true_left" (formula "4"))
                              (rule "cnf_rightDist" (formula "3") (term "0,0"))
                              (rule "distr_forallAnd" (formula "3") (term "0"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "distr_forallAnd" (formula "3"))
                              (rule "andLeft" (formula "3"))
                              (rule "shift_paren_or" (formula "4") (term "0"))
                              (rule "shift_paren_or" (formula "4") (term "0,0"))
                              (rule "inEqSimp_or_tautInEq3" (formula "4") (term "0,0,0"))
                              (rule "add_zero_right" (formula "4") (term "1,1,0,0,0"))
                              (rule "qeq_literals" (formula "4") (term "1,0,0,0"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "true_left" (formula "4"))
                              (rule "cnf_rightDist" (formula "3") (term "0,0"))
                              (rule "distr_forallAnd" (formula "3") (term "0"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "distr_forallAnd" (formula "3"))
                              (rule "andLeft" (formula "3"))
                              (rule "commute_or_2" (formula "4") (term "0,0"))
                              (rule "commute_or_2" (formula "4") (term "0,0,0"))
                              (rule "cnf_rightDist" (formula "3") (term "0"))
                              (rule "distr_forallAnd" (formula "3"))
                              (rule "andLeft" (formula "3"))
                              (rule "commute_or_2" (formula "4") (term "0"))
                              (rule "shift_paren_or" (formula "3") (term "0"))
                              (rule "commute_or_2" (formula "4") (term "0,0"))
                              (rule "shift_paren_or" (formula "3") (term "0,0"))
                              (rule "commute_or_2" (formula "4") (term "0,0,0"))
                              (rule "commute_or_2" (formula "3") (term "0,0,0"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
                              (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
                              (rule "commute_or_2" (formula "5") (term "0,0,0,0,0,0"))
                              (builtin "One Step Simplification" (formula "5"))
                              (rule "ifthenelse_to_or_left" (formula "3") (term "1,0"))
                              (rule "eqSymm" (formula "3") (term "1,1,1,0"))
                              (rule "eqSymm" (formula "3") (term "1,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "3") (term "0,0,1,0"))
                              (rule "mul_literals" (formula "3") (term "1,0,0,0,0,1,0"))
                              (rule "add_literals" (formula "3") (term "0,0,0,0,1,0"))
                              (rule "add_zero_left" (formula "3") (term "0,0,0,1,0"))
                              (rule "cnf_rightDist" (formula "3") (term "0"))
                              (rule "distr_forallAnd" (formula "3"))
                              (rule "andLeft" (formula "3"))
                              (rule "commute_or_2" (formula "4") (term "0"))
                              (rule "shift_paren_or" (formula "3") (term "0"))
                              (rule "commute_or_2" (formula "3") (term "0,0"))
                              (rule "shift_paren_or" (formula "4") (term "0,0"))
                              (rule "commute_or" (formula "4") (term "0,0,0"))
                              (rule "ifthenelse_to_or_left" (formula "6") (term "0,0,0,0,0,0,0"))
                              (rule "eqSymm" (formula "6") (term "1,1,0,0,0,0,0,0,0"))
                              (builtin "One Step Simplification" (formula "6"))
                              (rule "eqSymm" (formula "6") (term "1,0,0,0,0,0,0,0,0"))
                              (rule "nnf_notAnd" (formula "6") (term "0,0,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0,0,0,0,0,0,0,0"))
                              (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0,0,0,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "6") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0,0,0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "6") (term "1,0,0,0,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0,0,0,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0,0,0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0,0,0,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
                              (rule "add_literals" (formula "6") (term "0,0,0,1,0,0,0,0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "6") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0,0,0,0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0,0,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0,0,0,0,0,0,0"))
                              (rule "nnf_notAnd" (formula "6") (term "0,1,1,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "6") (term "0,0,1,1,0,0,0,0,0,0,0"))
                              (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,1,1,0,0,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "6") (term "0,0,0,0,1,1,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,1,1,0,0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "6") (term "1,0,0,1,1,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "6") (term "1,0,1,1,0,0,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,1,1,0,0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,1,1,0,0,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,1,1,0,0,0,0,0,0,0"))
                              (rule "add_literals" (formula "6") (term "0,0,0,1,0,1,1,0,0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "6") (term "0,0,1,0,1,1,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,1,1,0,0,0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,1,1,0,0,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "6") (term "1,1,0,1,1,0,0,0,0,0,0,0"))
                              (rule "commute_or" (formula "6") (term "0,0,0,0,0,0"))
                              (rule "commute_or_2" (formula "6") (term "0,0,0,0,0"))
                              (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                              (rule "commute_or_2" (formula "6") (term "0,0,0"))
                              (rule "commute_or_2" (formula "6") (term "0,0"))
                              (rule "commute_or_2" (formula "6") (term "0,1,0,0"))
                              (rule "commute_or" (formula "6") (term "1,1,0,0"))
                              (rule "commute_or" (formula "6") (term "0,0,1,0,0"))
                              (rule "commute_or_2" (formula "6") (term "0,1,1,0,0"))
                              (rule "commute_or" (formula "6") (term "0,0,1,1,0,0"))
                              (rule "cnf_rightDist" (formula "6") (term "1,1,0,0"))
                              (rule "commute_or_2" (formula "6") (term "0,1,1,0,0"))
                              (rule "inEqSimp_or_tautInEq1" (formula "6") (term "0,0,1,1,0,0"))
                              (rule "add_zero_right" (formula "6") (term "1,1,0,0,1,1,0,0"))
                              (rule "qeq_literals" (formula "6") (term "1,0,0,1,1,0,0"))
                              (builtin "One Step Simplification" (formula "6"))
                              (rule "commute_or" (formula "6") (term "1,1,0,0"))
                              (rule "cnf_rightDist" (formula "6") (term "0,0"))
                              (rule "distr_forallAnd" (formula "6") (term "0"))
                              (rule "distr_forallAnd" (formula "6"))
                              (rule "andLeft" (formula "6"))
                              (rule "commute_or_2" (formula "6") (term "0,0"))
                              (rule "shift_paren_or" (formula "7") (term "0,0"))
                              (rule "commute_or_2" (formula "7") (term "0,0,0"))
                              (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                              (rule "commute_or_2" (formula "7") (term "0,0,0,0"))
                              (rule "shift_paren_or" (formula "6") (term "0,0,0,0"))
                              (rule "commute_or_2" (formula "6") (term "0,0,0,0,0"))
                              (builtin "One Step Simplification" (formula "6"))
                              (rule "commute_or_2" (formula "6") (term "0,0,0,0,0"))
                              (rule "shift_paren_or" (formula "7") (term "0,0,0,0,0"))
                              (rule "commute_or_2" (formula "6") (term "0,0,0,0,0,0"))
                              (rule "commute_or_2" (formula "7") (term "0,0,0,0,0,0"))
                              (builtin "One Step Simplification" (formula "7"))
                              (rule "commute_or" (formula "6") (term "0,0,0,0,0,0,0"))
                              (rule "shift_paren_or" (formula "7") (term "0,0,0,0,0,0"))
                              (rule "shift_paren_or" (formula "7") (term "0,0,0,0,0,0,0"))
                              (rule "cut_direct" (formula "5") (term "0,1,1,0,0,0,0"))
                              (branch "CUT: a1.length >= 1 TRUE"
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "replace_known_left" (formula "7") (term "0,1,1,0,0,0,0,0") (ifseqformula "5"))
                                 (builtin "One Step Simplification" (formula "7"))
                                 (rule "replace_known_left" (formula "4") (term "0,1,1,0,0,0,0") (ifseqformula "5"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "replace_known_left" (formula "8") (term "0,1,1,0,0,0,0,0,0") (ifseqformula "5"))
                                 (builtin "One Step Simplification" (formula "8"))
                                 (rule "replace_known_left" (formula "3") (term "0,1,1,0,0,0,0") (ifseqformula "5"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "5"))
                                 (rule "leq_literals" (formula "14") (term "0"))
                                 (builtin "One Step Simplification" (formula "14"))
                                 (rule "true_left" (formula "14"))
                                 (rule "arrayLengthNotNegative" (formula "1") (term "0"))
                                 (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "2"))
                                 (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                 (rule "qeq_literals" (formula "2"))
                                 (rule "true_left" (formula "2"))
                                 (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                 (rule "leq_literals" (formula "2"))
                                 (rule "true_left" (formula "2"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "2") (term "0,0") (ifseqformula "10"))
                                 (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "28"))
                                 (builtin "One Step Simplification" (formula "2"))
                                 (rule "ifthenelse_to_or_left" (formula "8") (term "0,0,0,0,0,0,0"))
                                 (rule "eqSymm" (formula "8") (term "1,0,0,0,0,0,0,0,0"))
                                 (rule "eqSymm" (formula "8") (term "1,1,0,0,0,0,0,0,0"))
                                 (rule "nnf_notAnd" (formula "8") (term "0,0,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0,0,0,0,0,0,0,0"))
                                 (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0,0,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "8") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,0,0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0,0,0,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0,0,0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0,0,0,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "8") (term "0,0,0,1,0,0,0,0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "8") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0,0,0,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0,0,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0,0,0,0,0,0,0"))
                                 (rule "commute_or" (formula "8") (term "0,0,0,0,0,0"))
                                 (rule "commute_or_2" (formula "8") (term "0,0,0,0,0"))
                                 (rule "commute_or_2" (formula "8") (term "0,0,0,0"))
                                 (rule "commute_or_2" (formula "8") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "8") (term "0,0"))
                                 (rule "commute_or" (formula "8") (term "1,1,0,0"))
                                 (rule "commute_or_2" (formula "8") (term "0,1,0,0"))
                                 (rule "commute_or" (formula "8") (term "0,0,1,0,0"))
                                 (rule "cnf_rightDist" (formula "8") (term "1,1,0,0"))
                                 (rule "cnf_rightDist" (formula "8") (term "0,0"))
                                 (rule "distr_forallAnd" (formula "8") (term "0"))
                                 (rule "distr_forallAnd" (formula "8"))
                                 (rule "andLeft" (formula "8"))
                                 (rule "commute_or_2" (formula "8") (term "0,0"))
                                 (rule "commute_or" (formula "9") (term "0,0"))
                                 (rule "commute_or_2" (formula "8") (term "0,0,0"))
                                 (rule "commute_or" (formula "9") (term "1,1,0,0"))
                                 (rule "cnf_rightDist" (formula "9") (term "0,0"))
                                 (rule "distr_forallAnd" (formula "9") (term "0"))
                                 (rule "distr_forallAnd" (formula "9"))
                                 (rule "andLeft" (formula "9"))
                                 (rule "commute_or_2" (formula "9") (term "0,0"))
                                 (rule "shift_paren_or" (formula "10") (term "0,0"))
                                 (rule "commute_or_2" (formula "9") (term "0,0,0"))
                                 (rule "shift_paren_or" (formula "10") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "10") (term "0,0,0,0"))
                                 (rule "shift_paren_or" (formula "8") (term "0,0,0,0"))
                                 (rule "shift_paren_or" (formula "9") (term "0,0,0,0"))
                                 (rule "commute_or_2" (formula "9") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "9") (term "0,0,0,0"))
                                 (rule "add_zero_right" (formula "9") (term "1,1,0,0,0,0"))
                                 (rule "qeq_literals" (formula "9") (term "1,0,0,0,0"))
                                 (builtin "One Step Simplification" (formula "9"))
                                 (rule "true_left" (formula "9"))
                                 (rule "shift_paren_or" (formula "9") (term "0,0,0,0,0"))
                                 (rule "shift_paren_or" (formula "8") (term "0,0,0,0,0"))
                                 (rule "commute_or_2" (formula "8") (term "0,0,0,0,0,0"))
                                 (builtin "One Step Simplification" (formula "8"))
                                 (rule "commute_or_2" (formula "8") (term "0,0,0,0,0,0"))
                                 (rule "shift_paren_or" (formula "9") (term "0,0,0,0,0,0"))
                                 (rule "commute_or" (formula "8") (term "0,0,0,0,0,0,0"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "28") (term "0") (ifseqformula "12"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "29"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "arrayLengthIsAShort" (formula "2") (term "0"))
                                 (builtin "One Step Simplification" (formula "2"))
                                 (rule "true_left" (formula "2"))
                                 (rule "allLeft" (formula "6") (inst "t=i_0"))
                                 (rule "inEqSimp_commuteGeq" (formula "6") (term "1,0,0,0"))
                                 (rule "applyEq" (formula "6") (term "0,1,0,0") (ifseqformula "2"))
                                 (rule "qeq_literals" (formula "6") (term "1,0,0"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "inEqSimp_contradEq7" (formula "6") (term "1") (ifseqformula "4"))
                                 (rule "times_zero_1" (formula "6") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "6") (term "0,0,1"))
                                 (rule "leq_literals" (formula "6") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "inEqSimp_contradInEq1" (formula "6") (term "1") (ifseqformula "4"))
                                 (rule "qeq_literals" (formula "6") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "inEqSimp_contradInEq1" (formula "6") (term "1") (ifseqformula "13"))
                                 (rule "inEqSimp_homoInEq1" (formula "6") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1"))
                                 (rule "add_literals" (formula "6") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "6") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "6") (term "0,0,1"))
                                 (rule "leq_literals" (formula "6") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "inEqSimp_contradInEq0" (formula "22") (ifseqformula "6"))
                                 (rule "qeq_literals" (formula "22") (term "0"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "closeFalse" (formula "22"))
                              )
                              (branch "CUT: a1.length >= 1 FALSE"
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "replace_known_right" (formula "4") (term "0,1,1,0,0,0,0") (ifseqformula "26"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "replace_known_right" (formula "3") (term "0,1,1,0,0,0,0") (ifseqformula "26"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "replace_known_right" (formula "6") (term "0,1,1,0,0,0,0,0") (ifseqformula "26"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "replace_known_right" (formula "7") (term "0,1,1,0,0,0,0,0,0") (ifseqformula "26"))
                                 (builtin "One Step Simplification" (formula "7"))
                                 (rule "inEqSimp_geqRight" (formula "26"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_antiSymm" (formula "14") (ifseqformula "1"))
                                 (rule "applyEq" (formula "15") (term "0") (ifseqformula "14"))
                                 (rule "qeq_literals" (formula "15"))
                                 (rule "true_left" (formula "15"))
                                 (rule "applyEq" (formula "1") (term "0") (ifseqformula "14"))
                                 (rule "leq_literals" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "applyEq" (formula "3") (term "1,1,0,0,0,0,0") (ifseqformula "13"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "applyEq" (formula "15") (term "1,1,0") (ifseqformula "13"))
                                 (rule "applyEq" (formula "6") (term "1,1,0,0,0,0,0,0") (ifseqformula "13"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "applyEq" (formula "16") (term "1,1,0") (ifseqformula "13"))
                                 (rule "applyEq" (formula "7") (term "1,1,0,0,0,0,0,0,0") (ifseqformula "13"))
                                 (builtin "One Step Simplification" (formula "7"))
                                 (rule "applyEq" (formula "8") (term "0") (ifseqformula "13"))
                                 (rule "inEqSimp_homoInEq1" (formula "8"))
                                 (rule "times_zero_2" (formula "8") (term "1,0"))
                                 (rule "add_zero_right" (formula "8") (term "0"))
                                 (rule "applyEq" (formula "4") (term "1,1,0,0,0,0,0") (ifseqformula "13"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "applyEq" (formula "5") (term "1,1,0,0,0,0,0") (ifseqformula "13"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "applyEq" (formula "14") (term "1") (ifseqformula "13"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "8"))
                                 (rule "mul_literals" (formula "8") (term "1"))
                                 (rule "inEqSimp_contradInEq0" (formula "18") (ifseqformula "8"))
                                 (rule "qeq_literals" (formula "18") (term "0"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "closeFalse" (formula "18"))
                              )
                           )
                        )
                        (branch "a2[i_0].length >= 1 FALSE"
                           (rule "eqSymm" (formula "21") (term "0"))
                           (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "20")))
                           (rule "inEqSimp_geqRight" (formula "20"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_notGeq" (formula "21") (term "0,0"))
                           (rule "mul_literals" (formula "21") (term "1,0,0,0,0"))
                           (rule "add_literals" (formula "21") (term "0,0,0,0"))
                           (rule "add_zero_left" (formula "21") (term "0,0,0"))
                           (rule "inEqSimp_or_tautInEq1" (formula "21") (term "0,1"))
                           (rule "add_zero_right" (formula "21") (term "1,1,0,1"))
                           (rule "qeq_literals" (formula "21") (term "1,0,1"))
                           (builtin "One Step Simplification" (formula "21"))
                           (rule "orRight" (formula "21"))
                           (rule "inEqSimp_leqRight" (formula "21"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "inEqSimp_contradEq7" (formula "22") (ifseqformula "1"))
                           (rule "times_zero_1" (formula "22") (term "1,0,0"))
                           (rule "add_zero_right" (formula "22") (term "0,0"))
                           (rule "leq_literals" (formula "22") (term "0"))
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "false_right" (formula "22"))
                           (rule "ifthenelse_to_or_left" (formula "3") (term "0,0,0,0"))
                           (rule "eqSymm" (formula "3") (term "1,0,0,0,0,0"))
                           (rule "eqSymm" (formula "3") (term "1,1,0,0,0,0"))
                           (rule "eqSeqDef" (formula "3") (term "1,0,0,0,0,0") (inst "iv=iv_1"))
                           (rule "getOfSeqDef" (formula "3") (term "0,1,0,1,1,0,0,0,0,0"))
                           (rule "castDel" (formula "3") (term "1,0,1,0,1,1,0,0,0,0,0"))
                           (rule "castDel" (formula "3") (term "2,0,1,0,1,1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "3") (term "0,2,1,0,1,0,1,1,0,0,0,0,0"))
                           (rule "eqSymm" (formula "3") (term "1,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_elimSub" (formula "3") (term "1,1,0,1,1,0,1,1,0,0,0,0,0"))
                           (rule "times_zero_2" (formula "3") (term "1,1,1,0,1,1,0,1,1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "3") (term "1,1,0,1,1,0,1,1,0,0,0,0,0"))
                           (rule "lenOfSeqDef" (formula "3") (term "1,1,0,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_elimSub" (formula "3") (term "1,1,1,0,0,1,1,0,0,0,0,0"))
                           (rule "times_zero_2" (formula "3") (term "1,1,1,1,0,0,1,1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "3") (term "1,1,1,0,0,1,1,0,0,0,0,0"))
                           (rule "lenOfSeqDef" (formula "3") (term "0,0,1,0,0,0,0,0"))
                           (rule "eqSymm" (formula "3") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_elimSub" (formula "3") (term "1,1,0,1,0,0,0,0,0"))
                           (rule "times_zero_2" (formula "3") (term "1,1,1,0,1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "3") (term "1,1,0,1,0,0,0,0,0"))
                           (rule "getOfSeqDef" (formula "3") (term "0,1,0,1,1,0,0,0,0,0"))
                           (rule "castDel" (formula "3") (term "1,0,1,0,1,1,0,0,0,0,0"))
                           (rule "castDel" (formula "3") (term "2,0,1,0,1,1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "3") (term "0,2,1,0,1,0,1,1,0,0,0,0,0"))
                           (rule "eqSymm" (formula "3") (term "1,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_elimSub" (formula "3") (term "1,1,0,1,1,0,1,1,0,0,0,0,0"))
                           (rule "times_zero_2" (formula "3") (term "1,1,1,0,1,1,0,1,1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "3") (term "1,1,0,1,1,0,1,1,0,0,0,0,0"))
                           (rule "lenOfSeqDef" (formula "3") (term "0,0,1,0,0,0,0,0"))
                           (rule "eqSymm" (formula "3") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_elimSub" (formula "3") (term "1,1,0,1,0,0,0,0,0"))
                           (rule "times_zero_2" (formula "3") (term "1,1,1,0,1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "3") (term "1,1,0,1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "3") (term "0,1,1,0,0,1,1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "3") (term "0,0,1,1,0,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,1,0,0,1,1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0,1,0,1,1,0,0,0,0,0"))
                           (rule "eqSymm" (formula "3") (term "1,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,1,1,0,1,1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0,0,1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "3") (term "0,0,0,0,1,0,0,0,0,0"))
                           (rule "eqSymm" (formula "3") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0,1,1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0,1,0,1,1,0,0,0,0,0"))
                           (rule "eqSymm" (formula "3") (term "1,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,1,1,0,1,1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0,0,1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "3") (term "0,0,0,0,1,0,0,0,0,0"))
                           (rule "eqSymm" (formula "3") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,1,0,0,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0,1,1,0,0,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0,1,0,1,1,0,0,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,1,1,0,1,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0,1,0,0,1,0,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0,1,0,0,1,0,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "3") (term "0,0,0,1,0,0,1,0,0,1,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0,1,0,1,1,0,0,0,0,0"))
                           (rule "eqSymm" (formula "3") (term "1,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,1,1,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,1,0,1,1,0,1,1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,1,0,1,1,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,1,1,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,1,1,0,1,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0,0,1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0,0,1,0,0,0,0,0"))
                           (rule "eqSymm" (formula "3") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "3") (term "0,0,1,0,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0,1,1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,1,0,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0,1,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0,1,0,1,1,0,0,0,0,0"))
                           (rule "eqSymm" (formula "3") (term "1,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,1,1,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,1,0,1,1,0,1,1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,1,0,1,1,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,1,1,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,1,1,0,1,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0,0,1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0,0,1,0,0,0,0,0"))
                           (rule "eqSymm" (formula "3") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "3") (term "0,0,1,0,1,0,0,0,0,0"))
                           (rule "nnf_notAnd" (formula "3") (term "0,0,0,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "3") (term "1,0,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,0,0,1,0,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0,0,0,0,0"))
                           (rule "add_literals" (formula "3") (term "0,0,0,1,0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "3") (term "0,0,1,0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0,0,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "3") (term "0,0,0,0,0,0,0"))
                           (rule "times_zero_1" (formula "3") (term "1,0,0,0,0,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "3") (term "0,0,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0,0,0"))
                           (rule "nnf_imp2or" (formula "3") (term "0,1,1,0,0,0,0,0"))
                           (rule "nnf_notAnd" (formula "3") (term "0,0,1,1,0,0,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "3") (term "0,0,0,1,1,0,0,0,0,0"))
                           (rule "times_zero_1" (formula "3") (term "1,0,0,0,0,0,1,1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "3") (term "0,0,0,0,0,1,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,0,1,1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "3") (term "1,0,0,0,1,1,0,0,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "3") (term "1,0,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0,1,1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,0,0,1,0,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0,1,1,0,0,0,0,0"))
                           (rule "add_literals" (formula "3") (term "0,0,0,1,0,0,1,1,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "3") (term "0,0,1,0,0,1,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,1,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0,1,1,0,0,0,0,0"))
                           (rule "commute_or" (formula "3") (term "1,0,0,0,0"))
                           (rule "allLeft" (formula "11") (inst "t=i_0"))
                           (rule "inEqSimp_commuteGeq" (formula "11") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0") (ifseqformula "15"))
                           (rule "qeq_literals" (formula "11") (term "0,1,0"))
                           (builtin "One Step Simplification" (formula "11"))
                           (rule "inEqSimp_contradInEq1" (formula "11") (term "1") (ifseqformula "4"))
                           (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1"))
                           (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "11") (term "0,0,1"))
                           (rule "leq_literals" (formula "11") (term "0,1"))
                           (builtin "One Step Simplification" (formula "11"))
                           (rule "notLeft" (formula "11"))
                           (rule "allLeft" (formula "12") (inst "t=i_0"))
                           (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "12") (term "1,0") (ifseqformula "15"))
                           (rule "qeq_literals" (formula "12") (term "0,1,0"))
                           (builtin "One Step Simplification" (formula "12"))
                           (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "4"))
                           (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
                           (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "12") (term "0,0,1"))
                           (rule "leq_literals" (formula "12") (term "0,1"))
                           (builtin "One Step Simplification" (formula "12"))
                           (rule "notLeft" (formula "12"))
                           (rule "commute_or" (formula "3") (term "0,0,0"))
                           (rule "commute_or_2" (formula "3") (term "0,0"))
                           (rule "commute_or_2" (formula "3") (term "0"))
                           (rule "cnf_rightDist" (formula "3") (term "1,1,0"))
                           (rule "commute_or" (formula "3") (term "1,1,1,0"))
                           (rule "commute_or_2" (formula "3") (term "0,1,1,0,1,0"))
                           (rule "commute_or" (formula "3") (term "0,0,1,1,0,1,0"))
                           (rule "arrayLengthNotNegative" (formula "2") (term "0"))
                           (rule "inEqSimp_antiSymm" (formula "2") (ifseqformula "3"))
                           (rule "applyEq" (formula "4") (term "0") (ifseqformula "2"))
                           (rule "leq_literals" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
                           (rule "qeq_literals" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "arrayLengthNotNegative" (formula "1") (term "0"))
                           (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "2"))
                           (rule "leq_literals" (formula "1") (term "0"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "arrayLengthIsAShort" (formula "1") (term "0"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "ifthenelse_to_or_left" (formula "3") (term "0,1,0,1,0"))
                           (rule "eqSymm" (formula "3") (term "1,0,0,1,0,1,0"))
                           (rule "eqSymm" (formula "3") (term "1,1,0,1,0,1,0"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "inEqSimp_notGeq" (formula "3") (term "0,0,0,1,0,1,0"))
                           (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0,1,0,1,0"))
                           (rule "add_literals" (formula "3") (term "0,0,0,0,0,1,0,1,0"))
                           (rule "add_zero_left" (formula "3") (term "0,0,0,0,1,0,1,0"))
                           (rule "inEqSimp_notGeq" (formula "3") (term "0,1,1,0,1,0,1,0"))
                           (rule "mul_literals" (formula "3") (term "1,0,0,0,1,1,0,1,0,1,0"))
                           (rule "add_literals" (formula "3") (term "0,0,0,1,1,0,1,0,1,0"))
                           (rule "add_zero_left" (formula "3") (term "0,0,1,1,0,1,0,1,0"))
                           (rule "commute_or" (formula "3") (term "1,0,1,0,1,0"))
                           (rule "all_pull_out1" (formula "3") (term "1,0,1,0"))
                           (rule "all_pull_out3" (formula "3") (term "0,1,0"))
                           (rule "cnf_rightDist" (formula "3") (term "0,0,1,0"))
                           (rule "commute_or_2" (formula "3") (term "1,0,0,1,0"))
                           (rule "commute_or_2" (formula "3") (term "0,1,0,0,1,0"))
                           (rule "cnf_rightDist" (formula "3") (term "0,0,0,1,0"))
                           (rule "commute_or_2" (formula "3") (term "1,0,0,0,1,0"))
                           (rule "shift_paren_or" (formula "3") (term "0,0,0,0,1,0"))
                           (rule "commute_or_2" (formula "3") (term "0,1,0,0,0,1,0"))
                           (rule "shift_paren_or" (formula "3") (term "0,0,1,0,0,1,0"))
                           (rule "commute_or" (formula "3") (term "0,0,1,0,0,0,1,0"))
                           (rule "all_pull_out0" (formula "3") (term "1,0"))
                           (rule "shift_paren_and" (formula "3") (term "0,1,0"))
                           (rule "all_pull_out3" (formula "3") (term "0"))
                           (rule "cnf_rightDist" (formula "3") (term "0,0"))
                           (rule "distr_forallAnd" (formula "3") (term "0"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "distr_forallAnd" (formula "3"))
                           (rule "andLeft" (formula "3"))
                           (rule "shift_paren_or" (formula "4") (term "0"))
                           (rule "shift_paren_or" (formula "4") (term "0,0"))
                           (rule "commute_or_2" (formula "4") (term "0,0,0"))
                           (rule "inEqSimp_or_tautInEq1" (formula "4") (term "0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "4") (term "1,0,0"))
                           (rule "polySimp_pullOutFactor1" (formula "4") (term "0,1,0,0"))
                           (rule "add_literals" (formula "4") (term "1,0,1,0,0"))
                           (rule "times_zero_1" (formula "4") (term "0,1,0,0"))
                           (rule "leq_literals" (formula "4") (term "1,0,0"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "cnf_rightDist" (formula "3") (term "0,0"))
                           (rule "distr_forallAnd" (formula "3") (term "0"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "distr_forallAnd" (formula "3"))
                           (rule "andLeft" (formula "3"))
                           (rule "shift_paren_or" (formula "4") (term "0"))
                           (rule "shift_paren_or" (formula "4") (term "0,0"))
                           (rule "inEqSimp_or_tautInEq3" (formula "4") (term "0,0,0"))
                           (rule "add_zero_right" (formula "4") (term "1,1,0,0,0"))
                           (rule "qeq_literals" (formula "4") (term "1,0,0,0"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "cnf_rightDist" (formula "3") (term "0,0"))
                           (rule "distr_forallAnd" (formula "3") (term "0"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "distr_forallAnd" (formula "3"))
                           (rule "andLeft" (formula "3"))
                           (rule "commute_or_2" (formula "4") (term "0,0"))
                           (rule "commute_or_2" (formula "4") (term "0,0,0"))
                           (rule "cnf_rightDist" (formula "3") (term "0"))
                           (rule "distr_forallAnd" (formula "3"))
                           (rule "andLeft" (formula "3"))
                           (rule "commute_or_2" (formula "4") (term "0"))
                           (rule "shift_paren_or" (formula "3") (term "0"))
                           (rule "commute_or_2" (formula "4") (term "0,0"))
                           (rule "shift_paren_or" (formula "3") (term "0,0"))
                           (rule "commute_or_2" (formula "4") (term "0,0,0"))
                           (rule "commute_or_2" (formula "3") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
                           (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
                           (rule "commute_or_2" (formula "5") (term "0,0,0,0,0,0"))
                           (builtin "One Step Simplification" (formula "5"))
                           (rule "ifthenelse_to_or_left" (formula "3") (term "1,0"))
                           (rule "eqSymm" (formula "3") (term "1,0,1,0"))
                           (rule "eqSymm" (formula "3") (term "1,1,1,0"))
                           (rule "inEqSimp_notGeq" (formula "3") (term "0,0,1,0"))
                           (rule "mul_literals" (formula "3") (term "1,0,0,0,0,1,0"))
                           (rule "add_literals" (formula "3") (term "0,0,0,0,1,0"))
                           (rule "add_zero_left" (formula "3") (term "0,0,0,1,0"))
                           (rule "cnf_rightDist" (formula "3") (term "0"))
                           (rule "distr_forallAnd" (formula "3"))
                           (rule "andLeft" (formula "3"))
                           (rule "commute_or_2" (formula "4") (term "0"))
                           (rule "shift_paren_or" (formula "3") (term "0"))
                           (rule "commute_or_2" (formula "3") (term "0,0"))
                           (rule "shift_paren_or" (formula "4") (term "0,0"))
                           (rule "commute_or" (formula "4") (term "0,0,0"))
                           (rule "ifthenelse_to_or_right" (formula "6") (term "0,0,0,0,0,0,0"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "nnf_notAnd" (formula "6") (term "0,0,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0,0,0,0,0,0,0,0"))
                           (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0,0,0,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "6") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0,0,0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "6") (term "1,0,0,0,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0,0,0,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0,0,0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0,0,0,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
                           (rule "add_literals" (formula "6") (term "0,0,0,1,0,0,0,0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "6") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0,0,0,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0,0,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0,0,0,0,0,0,0"))
                           (rule "nnf_notAnd" (formula "6") (term "0,1,1,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "6") (term "1,0,1,1,0,0,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,1,1,0,0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,1,1,0,0,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,1,1,0,0,0,0,0,0,0"))
                           (rule "add_literals" (formula "6") (term "0,0,0,1,0,1,1,0,0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "6") (term "0,0,1,0,1,1,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,1,1,0,0,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,1,1,0,0,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "6") (term "1,1,0,1,1,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "6") (term "0,0,1,1,0,0,0,0,0,0,0"))
                           (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,1,1,0,0,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "6") (term "0,0,0,0,1,1,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,1,1,0,0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "6") (term "1,0,0,1,1,0,0,0,0,0,0,0"))
                           (rule "commute_or" (formula "6") (term "0,0,0,0,0,0"))
                           (rule "commute_or_2" (formula "6") (term "0,0,0,0,0"))
                           (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                           (rule "commute_or_2" (formula "6") (term "0,0,0"))
                           (rule "commute_or_2" (formula "6") (term "0,0"))
                           (rule "commute_or_2" (formula "6") (term "0,1,0,0"))
                           (rule "commute_or" (formula "6") (term "1,1,0,0"))
                           (rule "commute_or" (formula "6") (term "0,0,1,0,0"))
                           (rule "commute_or_2" (formula "6") (term "0,1,1,0,0"))
                           (rule "commute_or" (formula "6") (term "0,0,1,1,0,0"))
                           (rule "cnf_rightDist" (formula "6") (term "1,1,0,0"))
                           (rule "commute_or_2" (formula "6") (term "0,1,1,0,0"))
                           (rule "inEqSimp_or_tautInEq1" (formula "6") (term "0,0,1,1,0,0"))
                           (rule "add_zero_right" (formula "6") (term "1,1,0,0,1,1,0,0"))
                           (rule "qeq_literals" (formula "6") (term "1,0,0,1,1,0,0"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "shift_paren_or" (formula "6") (term "1,1,0,0"))
                           (rule "commute_or" (formula "6") (term "0,1,1,0,0"))
                           (rule "cnf_rightDist" (formula "6") (term "0,0"))
                           (rule "distr_forallAnd" (formula "6") (term "0"))
                           (rule "distr_forallAnd" (formula "6"))
                           (rule "andLeft" (formula "6"))
                           (rule "commute_or_2" (formula "6") (term "0,0"))
                           (rule "shift_paren_or" (formula "7") (term "0,0"))
                           (rule "commute_or_2" (formula "7") (term "0,0,0"))
                           (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                           (rule "commute_or_2" (formula "7") (term "0,0,0,0"))
                           (rule "shift_paren_or" (formula "6") (term "0,0,0,0"))
                           (rule "commute_or_2" (formula "6") (term "0,0,0,0,0"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "commute_or_2" (formula "6") (term "0,0,0,0,0"))
                           (rule "shift_paren_or" (formula "7") (term "0,0,0,0,0"))
                           (rule "commute_or_2" (formula "6") (term "0,0,0,0,0,0"))
                           (rule "commute_or_2" (formula "7") (term "0,0,0,0,0,0"))
                           (builtin "One Step Simplification" (formula "7"))
                           (rule "commute_or" (formula "6") (term "0,0,0,0,0,0,0"))
                           (rule "shift_paren_or" (formula "7") (term "0,0,0,0,0,0"))
                           (rule "shift_paren_or" (formula "7") (term "0,0,0,0,0,0,0"))
                           (rule "cut_direct" (formula "5") (term "0,1,1,0,0,0,0"))
                           (branch "CUT: a1.length >= 1 TRUE"
                              (builtin "One Step Simplification" (formula "6"))
                              (rule "replace_known_left" (formula "4") (term "0,1,1,0,0,0,0") (ifseqformula "5"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "replace_known_left" (formula "3") (term "0,1,1,0,0,0,0") (ifseqformula "5"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "replace_known_left" (formula "7") (term "0,1,1,0,0,0,0,0") (ifseqformula "5"))
                              (builtin "One Step Simplification" (formula "7"))
                              (rule "replace_known_left" (formula "8") (term "0,1,1,0,0,0,0,0,0") (ifseqformula "5"))
                              (builtin "One Step Simplification" (formula "8"))
                              (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "5"))
                              (rule "leq_literals" (formula "14") (term "0"))
                              (builtin "One Step Simplification" (formula "14"))
                              (rule "true_left" (formula "14"))
                              (rule "arrayLengthIsAShort" (formula "2") (term "0"))
                              (builtin "One Step Simplification" (formula "2"))
                              (rule "true_left" (formula "2"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "1") (term "0,0") (ifseqformula "10"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "28"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "ifthenelse_to_or_left" (formula "8") (term "0,0,0,0,0,0,0"))
                              (rule "eqSymm" (formula "8") (term "1,1,0,0,0,0,0,0,0"))
                              (rule "nnf_notAnd" (formula "8") (term "0,0,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0,0,0,0,0,0,0,0"))
                              (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0,0,0,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "8") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,0,0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0,0,0,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0,0,0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0,0,0,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
                              (rule "add_literals" (formula "8") (term "0,0,0,1,0,0,0,0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "8") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0,0,0,0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0,0,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0,0,0,0,0,0,0"))
                              (rule "commute_or" (formula "8") (term "0,0,0,0,0,0"))
                              (rule "commute_or_2" (formula "8") (term "0,0,0,0,0"))
                              (rule "commute_or_2" (formula "8") (term "0,0,0,0"))
                              (rule "commute_or_2" (formula "8") (term "0,0,0"))
                              (rule "commute_or_2" (formula "8") (term "0,0"))
                              (rule "commute_or" (formula "8") (term "1,1,0,0"))
                              (rule "commute_or_2" (formula "8") (term "0,1,0,0"))
                              (rule "commute_or" (formula "8") (term "0,0,1,0,0"))
                              (rule "cnf_rightDist" (formula "8") (term "1,1,0,0"))
                              (rule "cnf_rightDist" (formula "8") (term "0,0"))
                              (rule "distr_forallAnd" (formula "8") (term "0"))
                              (rule "distr_forallAnd" (formula "8"))
                              (rule "andLeft" (formula "8"))
                              (rule "commute_or_2" (formula "8") (term "0,0"))
                              (rule "commute_or" (formula "9") (term "0,0"))
                              (rule "shift_paren_or" (formula "8") (term "0,0,0"))
                              (rule "commute_or" (formula "9") (term "1,1,0,0"))
                              (rule "commute_or_2" (formula "8") (term "0,0,0,0"))
                              (rule "cnf_rightDist" (formula "9") (term "0,0"))
                              (rule "distr_forallAnd" (formula "9") (term "0"))
                              (rule "distr_forallAnd" (formula "9"))
                              (rule "andLeft" (formula "9"))
                              (rule "commute_or_2" (formula "9") (term "0,0"))
                              (rule "shift_paren_or" (formula "10") (term "0,0"))
                              (rule "commute_or_2" (formula "9") (term "0,0,0"))
                              (rule "commute_or_2" (formula "10") (term "0,0,0"))
                              (rule "shift_paren_or" (formula "9") (term "0,0,0,0"))
                              (rule "shift_paren_or" (formula "10") (term "0,0,0,0"))
                              (rule "commute_or_2" (formula "9") (term "0,0,0,0,0"))
                              (rule "inEqSimp_or_tautInEq1" (formula "9") (term "0,0,0,0"))
                              (rule "add_zero_right" (formula "9") (term "1,1,0,0,0,0"))
                              (rule "qeq_literals" (formula "9") (term "1,0,0,0,0"))
                              (builtin "One Step Simplification" (formula "9"))
                              (rule "true_left" (formula "9"))
                              (rule "shift_paren_or" (formula "8") (term "0,0,0,0,0"))
                              (rule "shift_paren_or" (formula "9") (term "0,0,0,0,0"))
                              (rule "commute_or_2" (formula "8") (term "0,0,0,0,0,0"))
                              (builtin "One Step Simplification" (formula "8"))
                              (rule "commute_or_2" (formula "8") (term "0,0,0,0,0,0"))
                              (rule "shift_paren_or" (formula "9") (term "0,0,0,0,0,0"))
                              (rule "commute_or" (formula "8") (term "0,0,0,0,0,0,0"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "28") (term "0") (ifseqformula "12"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "29"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "allLeft" (formula "5") (inst "t=i_0"))
                              (rule "inEqSimp_commuteGeq" (formula "5") (term "1,0,0,0"))
                              (rule "applyEq" (formula "5") (term "0,1") (ifseqformula "4"))
                              (rule "eqSymm" (formula "5") (term "1"))
                              (rule "applyEq" (formula "5") (term "0,1,0") (ifseqformula "4"))
                              (rule "leq_literals" (formula "5") (term "1,0"))
                              (builtin "One Step Simplification" (formula "5"))
                              (rule "true_left" (formula "5"))
                              (rule "allLeft" (formula "8") (inst "t=i_0"))
                              (rule "inEqSimp_commuteGeq" (formula "8") (term "1,0,0,0"))
                              (rule "applyEq" (formula "8") (term "0,1") (ifseqformula "4"))
                              (rule "qeq_literals" (formula "8") (term "1"))
                              (builtin "One Step Simplification" (formula "8"))
                              (rule "inEqSimp_contradEq7" (formula "8") (term "1") (ifseqformula "3"))
                              (rule "times_zero_1" (formula "8") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "8") (term "0,0,1"))
                              (rule "leq_literals" (formula "8") (term "0,1"))
                              (builtin "One Step Simplification" (formula "8"))
                              (rule "inEqSimp_contradInEq1" (formula "8") (term "1,0") (ifseqformula "13"))
                              (rule "inEqSimp_homoInEq1" (formula "8") (term "0,1,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1,0"))
                              (rule "add_literals" (formula "8") (term "1,1,0,0,1,0"))
                              (rule "times_zero_1" (formula "8") (term "1,0,0,1,0"))
                              (rule "add_zero_right" (formula "8") (term "0,0,1,0"))
                              (rule "leq_literals" (formula "8") (term "0,1,0"))
                              (builtin "One Step Simplification" (formula "8"))
                              (rule "inEqSimp_contradInEq1" (formula "8") (term "1") (ifseqformula "3"))
                              (rule "qeq_literals" (formula "8") (term "0,1"))
                              (builtin "One Step Simplification" (formula "8"))
                              (rule "inEqSimp_contradInEq1" (formula "8") (ifseqformula "22"))
                              (rule "qeq_literals" (formula "8") (term "0"))
                              (builtin "One Step Simplification" (formula "8"))
                              (rule "closeFalse" (formula "8"))
                           )
                           (branch "CUT: a1.length >= 1 FALSE"
                              (builtin "One Step Simplification" (formula "5"))
                              (rule "replace_known_right" (formula "4") (term "0,1,1,0,0,0,0") (ifseqformula "26"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "replace_known_right" (formula "3") (term "0,1,1,0,0,0,0") (ifseqformula "26"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "replace_known_right" (formula "6") (term "0,1,1,0,0,0,0,0") (ifseqformula "26"))
                              (builtin "One Step Simplification" (formula "6"))
                              (rule "replace_known_right" (formula "7") (term "0,1,1,0,0,0,0,0,0") (ifseqformula "26"))
                              (builtin "One Step Simplification" (formula "7"))
                              (rule "inEqSimp_geqRight" (formula "26"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_antiSymm" (formula "14") (ifseqformula "1"))
                              (rule "applyEq" (formula "9") (term "0") (ifseqformula "14"))
                              (rule "inEqSimp_homoInEq1" (formula "9"))
                              (rule "times_zero_2" (formula "9") (term "1,0"))
                              (rule "add_zero_right" (formula "9") (term "0"))
                              (rule "applyEq" (formula "6") (term "1,1,0,0,0,0,0") (ifseqformula "14"))
                              (builtin "One Step Simplification" (formula "6"))
                              (rule "applyEq" (formula "5") (term "1,1,0,0,0,0,0") (ifseqformula "14"))
                              (builtin "One Step Simplification" (formula "5"))
                              (rule "applyEq" (formula "15") (term "0") (ifseqformula "14"))
                              (rule "qeq_literals" (formula "15"))
                              (rule "true_left" (formula "15"))
                              (rule "applyEq" (formula "7") (term "1,1,0,0,0,0,0,0") (ifseqformula "14"))
                              (builtin "One Step Simplification" (formula "7"))
                              (rule "applyEq" (formula "17") (term "1,1,0") (ifseqformula "14"))
                              (rule "applyEq" (formula "4") (term "1,1,0,0,0,0,0") (ifseqformula "14"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "applyEq" (formula "1") (term "0") (ifseqformula "14"))
                              (rule "leq_literals" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "applyEq" (formula "7") (term "1,1,0,0,0,0,0,0,0") (ifseqformula "13"))
                              (builtin "One Step Simplification" (formula "7"))
                              (rule "applyEq" (formula "15") (term "1,1,0") (ifseqformula "13"))
                              (rule "applyEq" (formula "14") (term "1") (ifseqformula "13"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "8"))
                              (rule "mul_literals" (formula "8") (term "1"))
                              (rule "inEqSimp_contradInEq0" (formula "18") (ifseqformula "8"))
                              (rule "qeq_literals" (formula "18") (term "0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "closeFalse" (formula "18"))
                           )
                        )
                     )
                     (branch "if x_7 false"
                        (builtin "One Step Simplification" (formula "25"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "blockEmpty" (formula "25") (term "1"))
                        (rule "unusedLabel" (formula "25") (term "1"))
                        (rule "postincrement" (formula "25") (term "1"))
                        (rule "compound_int_cast_expression" (formula "25") (term "1") (inst "#v=x"))
                        (rule "variableDeclarationAssign" (formula "25") (term "1"))
                        (rule "variableDeclaration" (formula "25") (term "1") (newnames "x_11"))
                        (rule "remove_parentheses_right" (formula "25") (term "1"))
                        (rule "assignmentAdditionInt" (formula "25") (term "1"))
                        (builtin "One Step Simplification" (formula "25"))
                        (rule "translateJavaAddInt" (formula "25") (term "0,1,0"))
                        (rule "polySimp_addComm0" (formula "25") (term "0,1,0"))
                        (rule "widening_identity_cast_5" (formula "25") (term "1"))
                        (rule "assignment" (formula "25") (term "1"))
                        (builtin "One Step Simplification" (formula "25"))
                        (rule "tryEmpty" (formula "25") (term "1"))
                        (rule "methodCallEmpty" (formula "25") (term "1"))
                        (rule "emptyModality" (formula "25") (term "1"))
                        (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "3")) (ifInst ""  (formula "10")))
                        (rule "polySimp_mulComm0" (formula "25") (term "0,0,1"))
                        (rule "polySimp_rightDist" (formula "25") (term "0,0,1"))
                        (rule "mul_literals" (formula "25") (term "0,0,0,1"))
                        (rule "precOfInt" (formula "25") (term "1"))
                        (rule "inEqSimp_ltToLeq" (formula "25") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,1"))
                        (rule "polySimp_mulAssoc" (formula "25") (term "0,1,0,0,1,1"))
                        (rule "polySimp_mulComm0" (formula "25") (term "0,0,1,0,0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "25") (term "0,1,0,0,1,1"))
                        (rule "polySimp_elimOne" (formula "25") (term "0,1,0,0,1,1"))
                        (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,1"))
                        (rule "polySimp_addAssoc" (formula "25") (term "0,1,1"))
                        (rule "polySimp_addComm1" (formula "25") (term "0,0,1,1"))
                        (rule "polySimp_pullOutFactor2b" (formula "25") (term "0,1,1"))
                        (rule "add_literals" (formula "25") (term "1,1,0,1,1"))
                        (rule "times_zero_1" (formula "25") (term "1,0,1,1"))
                        (rule "add_zero_right" (formula "25") (term "0,1,1"))
                        (rule "polySimp_addAssoc" (formula "25") (term "0,1,1"))
                        (rule "polySimp_addComm1" (formula "25") (term "0,0,1,1"))
                        (rule "add_literals" (formula "25") (term "0,0,0,1,1"))
                        (rule "add_zero_left" (formula "25") (term "0,0,1,1"))
                        (rule "polySimp_pullOutFactor1" (formula "25") (term "0,1,1"))
                        (rule "add_literals" (formula "25") (term "1,0,1,1"))
                        (rule "times_zero_1" (formula "25") (term "0,1,1"))
                        (rule "leq_literals" (formula "25") (term "1,1"))
                        (builtin "One Step Simplification" (formula "25"))
                        (rule "inEqSimp_homoInEq0" (formula "25") (term "1"))
                        (rule "times_zero_2" (formula "25") (term "1,0,1"))
                        (rule "add_zero_right" (formula "25") (term "0,1"))
                        (rule "applyEq" (formula "2") (term "0") (ifseqformula "10"))
                        (rule "applyEq" (formula "8") (term "0") (ifseqformula "9"))
                        (rule "applyEq" (formula "20") (term "1") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "20"))
                        (rule "andLeft" (formula "20"))
                        (rule "applyEq" (formula "21") (term "1,1,0") (ifseqformula "20"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "0,0"))
                        (rule "mul_literals" (formula "24") (term "1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "24") (term "1,1"))
                        (rule "mul_literals" (formula "24") (term "0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1"))
                        (rule "polySimp_elimOne" (formula "24") (term "1,1,1"))
                        (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "2"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "inEqSimp_subsumption1" (formula "24") (term "0") (ifseqformula "12"))
                        (rule "leq_literals" (formula "24") (term "0,0"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "allRight" (formula "24") (inst "sk=j_0"))
                        (rule "cutUpperBound" (formula "24") (ifseqformula "14"))
                        (branch "Case 1"
                           (rule "crossInst" (formula "15") (inst "sk=j_8") (ifseqformula "25"))
                           (rule "orRight" (formula "26"))
                           (rule "andLeft" (formula "15"))
                           (rule "orRight" (formula "27"))
                           (rule "inEqSimp_geqRight" (formula "28"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "inEqSimp_leqRight" (formula "28"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "29") (term "1,0,0,1"))
                           (rule "inEqSimp_homoInEq1" (formula "29") (term "1,0,1,1,0,1"))
                           (rule "eqSymm" (formula "29") (term "1,0,1"))
                           (rule "polySimp_addComm1" (formula "29") (term "0,1,0,0,1,0,1"))
                           (rule "inEqSimp_homoInEq1" (formula "29") (term "1,0,1,1,0,1"))
                           (rule "eqSymm" (formula "29") (term "1,0,1"))
                           (rule "polySimp_addComm1" (formula "29") (term "0,1,0,0,1,0,1"))
                           (rule "applyEq" (formula "29") (term "0,2,1,1,0,1,0,1") (ifseqformula "3"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
                           (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "3"))
                           (rule "polySimp_addAssoc" (formula "2") (term "0"))
                           (rule "polySimp_addComm0" (formula "2") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "2") (term "0"))
                           (rule "add_literals" (formula "2") (term "1,1,0"))
                           (rule "times_zero_1" (formula "2") (term "1,0"))
                           (rule "add_zero_right" (formula "2") (term "0"))
                           (rule "leq_literals" (formula "2"))
                           (rule "closeFalse" (formula "2"))
                        )
                        (branch "Case 2"
                           (rule "crossInst" (formula "15") (inst "sk=j_1") (ifseqformula "25"))
                           (rule "orRight" (formula "26"))
                           (rule "notLeft" (formula "1"))
                           (rule "andLeft" (formula "14"))
                           (rule "orRight" (formula "27"))
                           (rule "inEqSimp_leqRight" (formula "27"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "28"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "29") (term "1,0,0,1"))
                           (rule "inEqSimp_homoInEq1" (formula "29") (term "1,0,1,1,0,1"))
                           (rule "eqSymm" (formula "29") (term "1,0,1"))
                           (rule "polySimp_addComm1" (formula "29") (term "0,1,0,0,1,0,1"))
                           (rule "inEqSimp_homoInEq1" (formula "29") (term "1,0,1,1,0,1"))
                           (rule "eqSymm" (formula "29") (term "1,0,1"))
                           (rule "polySimp_addComm1" (formula "29") (term "0,1,0,0,1,0,1"))
                           (rule "applyEq" (formula "17") (term "0,0,0,0") (ifseqformula "16"))
                           (rule "applyEqRigid" (formula "17") (term "0,2,0,0,1") (ifseqformula "16"))
                           (rule "applyEqRigid" (formula "17") (term "0,1,0,0") (ifseqformula "16"))
                           (rule "applyEq" (formula "17") (term "0,2,0,0,1,0") (ifseqformula "16"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,1,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,1,1,0,1"))
                           (rule "polySimp_rightDist" (formula "29") (term "1,1,0,1,1,0,1"))
                           (rule "mul_literals" (formula "29") (term "0,1,1,0,1,1,0,1"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,1,1,0,1"))
                           (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,1,1,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,1,0,1"))
                           (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,1,0,1"))
                           (rule "mul_literals" (formula "29") (term "0,1,1,0,0,1,0,1"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,1,0,1"))
                           (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,1,0,1"))
                           (rule "inEqSimp_contradEq3" (formula "26") (ifseqformula "1"))
                           (rule "polySimp_rightDist" (formula "26") (term "1,0,0"))
                           (rule "mul_literals" (formula "26") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "26") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "26") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0"))
                           (rule "add_literals" (formula "26") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "26") (term "1,0,0"))
                           (rule "add_zero_right" (formula "26") (term "0,0"))
                           (rule "qeq_literals" (formula "26") (term "0"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "false_right" (formula "26"))
                           (rule "inEqSimp_contradInEq1" (formula "17") (term "0,0,0") (ifseqformula "2"))
                           (rule "qeq_literals" (formula "17") (term "0,0,0,0"))
                           (builtin "One Step Simplification" (formula "17"))
                           (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                           (rule "times_zero_1" (formula "2") (term "0,0"))
                           (rule "add_zero_left" (formula "2") (term "0"))
                           (rule "ifthenelse_to_or_left" (formula "25") (term "0,0,0"))
                           (rule "eqSymm" (formula "25") (term "1,1,0,0,0"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "eqSymm" (formula "25") (term "1,0,0,0,0"))
                           (rule "nnf_notAnd" (formula "25") (term "0,0,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,0,0,0"))
                           (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "25") (term "0,0,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0,0,0,0"))
                           (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "25") (term "0,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0,0"))
                           (rule "nnf_notAnd" (formula "25") (term "0,1,1,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "25") (term "0,0,1,1,0,0,0"))
                           (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,1,1,0,0,0"))
                           (rule "add_zero_right" (formula "25") (term "0,0,0,0,1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,1,1,0,0,0"))
                           (rule "mul_literals" (formula "25") (term "1,0,0,1,1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "25") (term "1,0,1,1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,1,1,0,0,0"))
                           (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,1,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,1,1,0,0,0"))
                           (rule "add_literals" (formula "25") (term "0,0,0,1,0,1,1,0,0,0"))
                           (rule "add_zero_left" (formula "25") (term "0,0,1,0,1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,1,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "25") (term "1,1,0,1,1,0,0,0"))
                           (rule "commute_or" (formula "25") (term "0,0"))
                           (rule "commute_or_2" (formula "25") (term "0"))
                           (rule "commute_or" (formula "25") (term "1,1,0"))
                           (rule "commute_or_2" (formula "25") (term "0,1,0"))
                           (rule "commute_or_2" (formula "25") (term "0,1,1,0"))
                           (rule "commute_or" (formula "25") (term "0,0,1,0"))
                           (rule "commute_or" (formula "25") (term "0,0,1,1,0"))
                           (rule "cnf_rightDist" (formula "25") (term "1,1,0"))
                           (rule "commute_or_2" (formula "25") (term "0,1,1,0"))
                           (rule "inEqSimp_or_tautInEq1" (formula "25") (term "0,0,1,1,0"))
                           (rule "add_zero_right" (formula "25") (term "1,1,0,0,1,1,0"))
                           (rule "qeq_literals" (formula "25") (term "1,0,0,1,1,0"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "commute_or" (formula "25") (term "1,1,0"))
                           (rule "cnf_rightDist" (formula "25") (term "0"))
                           (rule "distr_forallAnd" (formula "25"))
                           (rule "andLeft" (formula "25"))
                           (rule "commute_or_2" (formula "25") (term "0"))
                           (rule "shift_paren_or" (formula "26") (term "0"))
                           (rule "commute_or_2" (formula "26") (term "0,0"))
                           (rule "shift_paren_or" (formula "25") (term "0,0"))
                           (rule "commute_or_2" (formula "26") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "shift_paren_or" (formula "25") (term "0,0,0"))
                           (rule "commute_or" (formula "25") (term "0,0,0,0"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "ifthenelse_split" (formula "24") (term "0"))
                           (branch "a2[i_0].length >= 1 TRUE"
                              (rule "eqSymm" (formula "25"))
                              (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "25"))
                              (rule "applyEq" (formula "26") (term "1,1,0") (ifseqformula "25"))
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "inEqSimp_or_tautInEq1" (formula "27") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "27") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "27") (term "0,1,0"))
                              (rule "add_literals" (formula "27") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "27") (term "0,1,0"))
                              (rule "leq_literals" (formula "27") (term "1,0"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "ifthenelse_split" (formula "29") (term "0,0"))
                              (branch "a2[j_0].length >= 1 TRUE"
                                 (rule "eqSymm" (formula "30") (term "0"))
                                 (rule "replace_known_left" (formula "30") (term "0,1,1,0,0,1") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "30"))
                                 (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "true_left" (formula "18"))
                                 (rule "ifthenelse_to_or_left" (formula "26") (term "0,0,0"))
                                 (rule "eqSymm" (formula "26") (term "1,0,0,0,0"))
                                 (rule "eqSymm" (formula "26") (term "1,1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "26") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,0,0,0"))
                                 (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "26") (term "0,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,0,0"))
                                 (rule "commute_or" (formula "26") (term "0,0"))
                                 (rule "commute_or_2" (formula "26") (term "0"))
                                 (rule "commute_or_2" (formula "26") (term "0,1,0"))
                                 (rule "commute_or" (formula "26") (term "1,1,0"))
                                 (rule "commute_or" (formula "26") (term "0,0,1,0"))
                                 (rule "cnf_rightDist" (formula "26") (term "1,1,0"))
                                 (rule "cnf_rightDist" (formula "26") (term "0"))
                                 (rule "distr_forallAnd" (formula "26"))
                                 (rule "andLeft" (formula "26"))
                                 (rule "commute_or" (formula "27") (term "0"))
                                 (rule "commute_or_2" (formula "26") (term "0"))
                                 (rule "commute_or" (formula "27") (term "1,1,0"))
                                 (rule "shift_paren_or" (formula "26") (term "0,0"))
                                 (rule "cnf_rightDist" (formula "27") (term "0"))
                                 (rule "distr_forallAnd" (formula "27"))
                                 (rule "andLeft" (formula "27"))
                                 (rule "commute_or_2" (formula "27") (term "0"))
                                 (rule "shift_paren_or" (formula "28") (term "0"))
                                 (rule "commute_or_2" (formula "28") (term "0,0"))
                                 (rule "shift_paren_or" (formula "27") (term "0,0"))
                                 (rule "commute_or" (formula "27") (term "0,0,0"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "27") (term "0,0"))
                                 (rule "add_zero_right" (formula "27") (term "1,1,0,0"))
                                 (rule "qeq_literals" (formula "27") (term "1,0,0"))
                                 (builtin "One Step Simplification" (formula "27"))
                                 (rule "true_left" (formula "27"))
                                 (rule "shift_paren_or" (formula "26") (term "0,0,0"))
                                 (rule "commute_or" (formula "26") (term "0,0,0,0"))
                                 (builtin "One Step Simplification" (formula "26"))
                                 (rule "allLeft" (formula "12") (inst "t=i_0"))
                                 (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "5"))
                                 (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
                                 (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "12") (term "0,0,1"))
                                 (rule "leq_literals" (formula "12") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "16"))
                                 (rule "qeq_literals" (formula "12") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "notLeft" (formula "12"))
                                 (rule "narrowSelectArrayType" (formula "26") (term "1,0,0,0,0") (ifseqformula "6") (ifseqformula "28"))
                                 (rule "allLeft" (formula "13") (inst "t=i_0"))
                                 (rule "inEqSimp_commuteGeq" (formula "13") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "13") (term "1") (ifseqformula "5"))
                                 (rule "inEqSimp_homoInEq1" (formula "13") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1"))
                                 (rule "add_literals" (formula "13") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "13") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "13") (term "0,0,1"))
                                 (rule "leq_literals" (formula "13") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "inEqSimp_contradInEq1" (formula "13") (term "1") (ifseqformula "16"))
                                 (rule "qeq_literals" (formula "13") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "notLeft" (formula "13"))
                                 (rule "narrowSelectArrayType" (formula "26") (term "0,0,0,0,0") (ifseqformula "6") (ifseqformula "28"))
                                 (rule "narrowSelectArrayType" (formula "27") (term "0,0,0,0,0") (ifseqformula "6") (ifseqformula "28"))
                                 (rule "commute_or" (formula "26") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "26") (term "0,0"))
                                 (rule "commute_or_2" (formula "26") (term "0"))
                                 (rule "ifthenelse_split" (formula "25") (term "0"))
                                 (branch "a1[i_0].length >= 1 TRUE"
                                    (rule "eqSymm" (formula "26"))
                                    (rule "applyEq" (formula "27") (term "1,1,0,0") (ifseqformula "26"))
                                    (builtin "One Step Simplification" (formula "27"))
                                    (rule "applyEq" (formula "24") (term "0") (ifseqformula "26"))
                                    (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "25"))
                                    (rule "inEqSimp_or_tautInEq1" (formula "27") (term "0"))
                                    (rule "inEqSimp_homoInEq1" (formula "27") (term "1,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "27") (term "0,1,0"))
                                    (rule "add_literals" (formula "27") (term "1,0,1,0"))
                                    (rule "times_zero_1" (formula "27") (term "0,1,0"))
                                    (rule "leq_literals" (formula "27") (term "1,0"))
                                    (builtin "One Step Simplification" (formula "27"))
                                    (rule "true_left" (formula "27"))
                                    (rule "ifthenelse_split" (formula "31") (term "0,0"))
                                    (branch "a1[j_0].length >= 1 TRUE"
                                       (rule "eqSymm" (formula "32") (term "0"))
                                       (rule "arrayLengthIsAShort" (formula "2") (term "0"))
                                       (builtin "One Step Simplification" (formula "2"))
                                       (rule "true_left" (formula "2"))
                                       (rule "arrayLengthNotNegative" (formula "2") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "3"))
                                       (rule "leq_literals" (formula "2") (term "0"))
                                       (builtin "One Step Simplification" (formula "2"))
                                       (rule "true_left" (formula "2"))
                                       (rule "arrayLengthNotNegative" (formula "32") (term "1,1,1,0,1,1,0,1"))
                                       (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "2"))
                                       (rule "leq_literals" (formula "1") (term "0"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "arrayLengthIsAShort" (formula "32") (term "1,1,1,0,1,1,0,1"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "allLeft" (formula "14") (inst "t=j_0"))
                                       (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "14") (term "1,0") (ifseqformula "4"))
                                       (rule "qeq_literals" (formula "14") (term "0,1,0"))
                                       (builtin "One Step Simplification" (formula "14"))
                                       (rule "allLeft" (formula "13") (inst "t=j_0"))
                                       (rule "inEqSimp_commuteGeq" (formula "13") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "13") (term "1,0") (ifseqformula "4"))
                                       (rule "qeq_literals" (formula "13") (term "0,1,0"))
                                       (builtin "One Step Simplification" (formula "13"))
                                       (rule "allLeft" (formula "19") (inst "t=j_0"))
                                       (rule "inEqSimp_contradInEq1" (formula "19") (term "0,0,0,0") (ifseqformula "4"))
                                       (rule "qeq_literals" (formula "19") (term "0,0,0,0,0"))
                                       (builtin "One Step Simplification" (formula "19"))
                                       (rule "inEqSimp_contradInEq1" (formula "19") (term "1,0,0") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "19") (term "0,1,0,0"))
                                       (builtin "One Step Simplification" (formula "19"))
                                       (rule "inEqSimp_contradInEq1" (formula "19") (term "1,0") (ifseqformula "2"))
                                       (rule "qeq_literals" (formula "19") (term "0,1,0"))
                                       (builtin "One Step Simplification" (formula "19"))
                                       (rule "allLeft" (formula "25") (inst "t=j_0"))
                                       (rule "replace_known_left" (formula "25") (term "0,0,1,0") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "25"))
                                       (rule "inEqSimp_commuteLeq" (formula "25") (term "1,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "25") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "25") (term "0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "25") (term "1,0,0,0,0") (ifseqformula "4"))
                                       (rule "qeq_literals" (formula "25") (term "0,1,0,0,0,0"))
                                       (builtin "One Step Simplification" (formula "25"))
                                       (rule "commute_or_2" (formula "25") (term "0,0"))
                                       (rule "commute_or_2" (formula "25") (term "0"))
                                       (rule "cut_direct" (formula "25") (term "1,0"))
                                       (branch "CUT: j_0 >= i_0 TRUE"
                                          (builtin "One Step Simplification" (formula "26"))
                                          (rule "true_left" (formula "26"))
                                          (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "25"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "true_left" (formula "19"))
                                          (rule "inEqSimp_antiSymm" (formula "24") (ifseqformula "3"))
                                          (rule "applyEq" (formula "25") (term "0") (ifseqformula "24"))
                                          (rule "inEqSimp_homoInEq1" (formula "25"))
                                          (rule "polySimp_pullOutFactor1" (formula "25") (term "0"))
                                          (rule "add_literals" (formula "25") (term "1,0"))
                                          (rule "times_zero_1" (formula "25") (term "0"))
                                          (rule "leq_literals" (formula "25"))
                                          (rule "true_left" (formula "25"))
                                          (rule "applyEq" (formula "35") (term "0,2,0,1,1,1,0,0,1,0,1") (ifseqformula "24"))
                                          (rule "eqSymm" (formula "35") (term "1,0,1"))
                                          (rule "applyEq" (formula "13") (term "1,1") (ifseqformula "24"))
                                          (rule "applyEqRigid" (formula "1") (term "0,2,0,0") (ifseqformula "24"))
                                          (rule "applyEqRigid" (formula "12") (term "0,2,0,0,0") (ifseqformula "23"))
                                          (rule "replace_known_right" (formula "12") (term "0,0") (ifseqformula "31"))
                                          (builtin "One Step Simplification" (formula "12"))
                                          (rule "true_left" (formula "12"))
                                          (rule "applyEq" (formula "33") (term "0,2,0,0,0") (ifseqformula "22"))
                                          (rule "eqSymm" (formula "33") (term "0"))
                                          (rule "applyEqRigid" (formula "1") (term "0,2,0,0") (ifseqformula "22"))
                                          (rule "applyEq" (formula "3") (term "0") (ifseqformula "22"))
                                          (rule "applyEq" (formula "32") (term "0,2,0,1,1,0,0,1") (ifseqformula "21"))
                                          (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "21"))
                                          (rule "inEqSimp_homoInEq0" (formula "2"))
                                          (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
                                          (rule "add_literals" (formula "2") (term "1,0"))
                                          (rule "times_zero_1" (formula "2") (term "0"))
                                          (rule "qeq_literals" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "applyEq" (formula "11") (term "0,2,0,0,0") (ifseqformula "20"))
                                          (rule "replace_known_right" (formula "11") (term "0,0") (ifseqformula "27"))
                                          (builtin "One Step Simplification" (formula "11"))
                                          (rule "true_left" (formula "11"))
                                          (rule "applyEq" (formula "30") (term "1,1,0,0,1") (ifseqformula "24"))
                                          (rule "applyEqRigid" (formula "30") (term "0,2,0,0,0") (ifseqformula "19"))
                                          (rule "eqSymm" (formula "30") (term "0"))
                                          (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "24"))
                                          (builtin "One Step Simplification" (formula "30"))
                                          (rule "allRight" (formula "30") (inst "sk=iv_3"))
                                          (rule "cutUpperBound" (formula "30") (ifseqformula "16"))
                                          (branch "Case 1"
                                             (rule "crossInst" (formula "17") (inst "sk=j_7") (ifseqformula "31"))
                                             (rule "orRight" (formula "32"))
                                             (rule "andLeft" (formula "17"))
                                             (rule "orRight" (formula "33"))
                                             (rule "eqSymm" (formula "1"))
                                             (rule "inEqSimp_geqRight" (formula "34"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0"))
                                             (rule "inEqSimp_leqRight" (formula "34"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "replace_known_left" (formula "35") (term "0,0,1") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "1")))
                                             (rule "inEqSimp_homoInEq0" (formula "35") (term "0,0"))
                                             (rule "eqSymm" (formula "35"))
                                             (rule "polySimp_addComm1" (formula "35") (term "0,0,1"))
                                             (rule "inEqSimp_homoInEq0" (formula "35") (term "0,0"))
                                             (rule "eqSymm" (formula "35"))
                                             (rule "polySimp_addComm1" (formula "35") (term "0,0,1"))
                                             (rule "applyEq" (formula "4") (term "0") (ifseqformula "29"))
                                             (rule "applyEqRigid" (formula "17") (term "1") (ifseqformula "23"))
                                             (rule "applyEq" (formula "29") (term "1,1,0,0") (ifseqformula "3"))
                                             (rule "applyEq" (formula "27") (term "0") (ifseqformula "3"))
                                             (rule "applyEqRigid" (formula "19") (term "0,0,0,0") (ifseqformula "18"))
                                             (rule "applyEq" (formula "19") (term "0,2,0,0,1") (ifseqformula "18"))
                                             (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "3"))
                                             (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                             (rule "add_literals" (formula "2") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "2") (term "1,0"))
                                             (rule "add_zero_right" (formula "2") (term "0"))
                                             (rule "leq_literals" (formula "2"))
                                             (rule "closeFalse" (formula "2"))
                                          )
                                          (branch "Case 2"
                                             (rule "crossInst" (formula "17") (inst "sk=j_6") (ifseqformula "31"))
                                             (rule "orRight" (formula "32"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "andLeft" (formula "16"))
                                             (rule "orRight" (formula "33"))
                                             (rule "eqSymm" (formula "28"))
                                             (rule "inEqSimp_geqRight" (formula "34"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0"))
                                             (rule "inEqSimp_leqRight" (formula "34"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "1")))
                                             (rule "inEqSimp_homoInEq0" (formula "35") (term "0,1"))
                                             (rule "polySimp_addComm1" (formula "35") (term "0,0,1"))
                                             (rule "inEqSimp_homoInEq0" (formula "35") (term "0,0"))
                                             (rule "polySimp_addComm1" (formula "35") (term "0,0,0"))
                                             (rule "applyEq" (formula "3") (term "0") (ifseqformula "28"))
                                             (rule "applyEqRigid" (formula "16") (term "1") (ifseqformula "22"))
                                             (rule "applyEqRigid" (formula "34") (term "0,2,0,1,0,0,0") (ifseqformula "22"))
                                             (rule "eqSymm" (formula "34"))
                                             (rule "applyEq" (formula "18") (term "0,1,0,0") (ifseqformula "17"))
                                             (rule "applyEqRigid" (formula "18") (term "0,2,0,0,1") (ifseqformula "17"))
                                             (rule "applyEq" (formula "18") (term "0,0,0,0") (ifseqformula "17"))
                                             (rule "applyEq" (formula "18") (term "0,2,0,0,1,0") (ifseqformula "17"))
                                             (rule "applyEq" (formula "34") (term "1,0,0,0") (ifseqformula "27"))
                                             (rule "applyEq" (formula "34") (term "0,2,1,1,0") (ifseqformula "22"))
                                             (rule "eqSymm" (formula "34"))
                                             (rule "narrowSelectArrayType" (formula "34") (term "1,1") (ifseqformula "5") (ifseqformula "30"))
                                             (rule "applyEqRigid" (formula "34") (term "0,2,1,1,0") (ifseqformula "22"))
                                             (rule "narrowSelectArrayType" (formula "34") (term "1,0") (ifseqformula "5") (ifseqformula "31"))
                                             (rule "eqSymm" (formula "34"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                             (rule "polySimp_elimOne" (formula "2") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "0,1"))
                                             (rule "polySimp_mulComm0" (formula "34") (term "1,0,1"))
                                             (rule "polySimp_rightDist" (formula "34") (term "1,0,1"))
                                             (rule "mul_literals" (formula "34") (term "0,1,0,1"))
                                             (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,1"))
                                             (rule "polySimp_elimOne" (formula "34") (term "1,1,0,1"))
                                             (rule "replace_known_left" (formula "34") (term "0,1") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "0,0"))
                                             (rule "polySimp_mulComm0" (formula "34") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "34") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "34") (term "0,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0"))
                                             (rule "replace_known_left" (formula "34") (term "0,0") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_contradEq7" (formula "29") (ifseqformula "2"))
                                             (rule "polySimp_mulComm0" (formula "29") (term "1,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0"))
                                             (rule "add_literals" (formula "29") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "29") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "29") (term "0,0"))
                                             (rule "leq_literals" (formula "29") (term "0"))
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "false_right" (formula "29"))
                                             (rule "inEqSimp_contradInEq1" (formula "18") (term "0,0,0") (ifseqformula "1"))
                                             (rule "qeq_literals" (formula "18") (term "0,0,0,0"))
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "allLeft" (formula "28") (inst "t=iv_3"))
                                             (rule "replace_known_right" (formula "28") (term "1") (ifseqformula "34"))
                                             (builtin "One Step Simplification" (formula "28"))
                                             (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "28") (term "0") (ifseqformula "1"))
                                             (rule "qeq_literals" (formula "28") (term "0,0"))
                                             (builtin "One Step Simplification" (formula "28"))
                                             (rule "inEqSimp_contradInEq1" (formula "28") (ifseqformula "2"))
                                             (rule "andLeft" (formula "28"))
                                             (rule "inEqSimp_homoInEq1" (formula "28"))
                                             (rule "polySimp_pullOutFactor1b" (formula "28") (term "0"))
                                             (rule "add_literals" (formula "28") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "28") (term "1,0"))
                                             (rule "add_zero_right" (formula "28") (term "0"))
                                             (rule "leq_literals" (formula "28"))
                                             (rule "closeFalse" (formula "28"))
                                          )
                                       )
                                       (branch "CUT: j_0 >= i_0 FALSE"
                                          (builtin "One Step Simplification" (formula "25"))
                                          (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "32"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "replace_known_left" (formula "37") (term "0") (ifseqformula "19"))
                                          (builtin "One Step Simplification" (formula "37"))
                                          (rule "allRight" (formula "37") (inst "sk=iv_2"))
                                          (rule "cutUpperBound" (formula "37") (ifseqformula "22"))
                                          (branch "Case 1"
                                             (rule "crossInst" (formula "23") (inst "sk=j_5") (ifseqformula "38"))
                                             (rule "orRight" (formula "39"))
                                             (rule "andLeft" (formula "23"))
                                             (rule "orRight" (formula "40"))
                                             (rule "eqSymm" (formula "1"))
                                             (rule "inEqSimp_geqRight" (formula "35"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                             (rule "inEqSimp_leqRight" (formula "40"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "replace_known_left" (formula "42") (term "0,0,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "1")))
                                             (rule "inEqSimp_geqRight" (formula "41"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0"))
                                             (rule "inEqSimp_homoInEq0" (formula "42") (term "0,0"))
                                             (rule "eqSymm" (formula "42"))
                                             (rule "polySimp_addComm1" (formula "42") (term "0,0,1"))
                                             (rule "inEqSimp_homoInEq0" (formula "42") (term "0,0"))
                                             (rule "eqSymm" (formula "42"))
                                             (rule "polySimp_addComm1" (formula "42") (term "0,0,1"))
                                             (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "4"))
                                             (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                             (rule "add_literals" (formula "1") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "1") (term "1,0"))
                                             (rule "add_zero_right" (formula "1") (term "0"))
                                             (rule "leq_literals" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                          (branch "Case 2"
                                             (rule "crossInst" (formula "23") (inst "sk=j_4") (ifseqformula "38"))
                                             (rule "orRight" (formula "39"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "andLeft" (formula "22"))
                                             (rule "orRight" (formula "40"))
                                             (rule "eqSymm" (formula "34"))
                                             (rule "inEqSimp_geqRight" (formula "35"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                             (rule "inEqSimp_geqRight" (formula "41"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0"))
                                             (rule "inEqSimp_leqRight" (formula "41"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "replace_known_left" (formula "42") (term "0,0,1") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "1")))
                                             (rule "inEqSimp_homoInEq0" (formula "42") (term "0,0"))
                                             (rule "eqSymm" (formula "42"))
                                             (rule "polySimp_addComm1" (formula "42") (term "0,0,1"))
                                             (rule "inEqSimp_homoInEq0" (formula "42") (term "0,0"))
                                             (rule "eqSymm" (formula "42"))
                                             (rule "polySimp_addComm1" (formula "42") (term "0,0,1"))
                                             (rule "applyEqRigid" (formula "26") (term "0,2,0,0,1") (ifseqformula "25"))
                                             (rule "applyEq" (formula "37") (term "0") (ifseqformula "22"))
                                             (rule "applyEq" (formula "26") (term "0,2,0,0,1,0") (ifseqformula "25"))
                                             (rule "applyEq" (formula "42") (term "1,0,0,0") (ifseqformula "22"))
                                             (rule "applyEqRigid" (formula "26") (term "0,0,0,0") (ifseqformula "25"))
                                             (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "22"))
                                             (rule "applyEq" (formula "30") (term "1,1,0") (ifseqformula "22"))
                                             (rule "applyEqRigid" (formula "26") (term "0,1,0,0") (ifseqformula "25"))
                                             (rule "applyEq" (formula "5") (term "0") (ifseqformula "22"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                             (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                             (rule "polySimp_rightDist" (formula "3") (term "1"))
                                             (rule "mul_literals" (formula "3") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "0,1"))
                                             (rule "polySimp_mulComm0" (formula "41") (term "1,0,1"))
                                             (rule "polySimp_rightDist" (formula "41") (term "1,0,1"))
                                             (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,1"))
                                             (rule "mul_literals" (formula "41") (term "0,1,0,1"))
                                             (rule "polySimp_elimOne" (formula "41") (term "1,1,0,1"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "0,0"))
                                             (rule "polySimp_mulComm0" (formula "41") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "41") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "41") (term "0,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "41") (term "1,1,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                             (rule "polySimp_elimOne" (formula "2") (term "0"))
                                             (rule "replace_known_left" (formula "41") (term "0,1") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "2")))
                                             (rule "inEqSimp_contradEq7" (formula "36") (ifseqformula "2"))
                                             (rule "polySimp_mulComm0" (formula "36") (term "1,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0"))
                                             (rule "add_literals" (formula "36") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "36") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "36") (term "0,0"))
                                             (rule "leq_literals" (formula "36") (term "0"))
                                             (builtin "One Step Simplification" (formula "36"))
                                             (rule "false_right" (formula "36"))
                                             (rule "inEqSimp_subsumption0" (formula "5") (ifseqformula "3"))
                                             (rule "inEqSimp_homoInEq0" (formula "5") (term "0"))
                                             (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "5") (term "1,0,0"))
                                             (rule "mul_literals" (formula "5") (term "0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "5") (term "0,0"))
                                             (rule "polySimp_addComm0" (formula "5") (term "0,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0"))
                                             (rule "add_literals" (formula "5") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "5") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "5") (term "0,0"))
                                             (rule "qeq_literals" (formula "5") (term "0"))
                                             (builtin "One Step Simplification" (formula "5"))
                                             (rule "true_left" (formula "5"))
                                             (rule "inEqSimp_contradInEq1" (formula "24") (term "0,0,0") (ifseqformula "1"))
                                             (rule "qeq_literals" (formula "24") (term "0,0,0,0"))
                                             (builtin "One Step Simplification" (formula "24"))
                                             (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "3"))
                                             (rule "times_zero_1" (formula "5") (term "0,0"))
                                             (rule "add_zero_left" (formula "5") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                                             (rule "mul_literals" (formula "5") (term "1"))
                                             (rule "inEqSimp_subsumption1" (formula "20") (ifseqformula "5"))
                                             (rule "leq_literals" (formula "20") (term "0"))
                                             (builtin "One Step Simplification" (formula "20"))
                                             (rule "true_left" (formula "20"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "28") (term "0"))
                                             (rule "inEqSimp_homoInEq1" (formula "28") (term "1,0"))
                                             (rule "polySimp_pullOutFactor1" (formula "28") (term "0,1,0"))
                                             (rule "add_literals" (formula "28") (term "1,0,1,0"))
                                             (rule "times_zero_1" (formula "28") (term "0,1,0"))
                                             (rule "leq_literals" (formula "28") (term "1,0"))
                                             (builtin "One Step Simplification" (formula "28"))
                                             (rule "true_left" (formula "28"))
                                             (rule "allLeft" (formula "27") (inst "t=j_0"))
                                             (rule "inEqSimp_commuteLeq" (formula "27") (term "1,0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "27") (term "1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "27") (term "1,0"))
                                             (rule "applyEq" (formula "27") (term "0,0,1,1,0") (ifseqformula "20"))
                                             (rule "replace_known_left" (formula "27") (term "0,1,1,0") (ifseqformula "4"))
                                             (builtin "One Step Simplification" (formula "27"))
                                             (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "20"))
                                             (builtin "One Step Simplification" (formula "27"))
                                             (rule "inEqSimp_contradInEq0" (formula "27") (term "1,0,0") (ifseqformula "3"))
                                             (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "27") (term "0,0,0,1,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "27") (term "1,1,0,0,1,0,0"))
                                             (rule "times_zero_1" (formula "27") (term "1,0,0,1,0,0"))
                                             (rule "add_zero_right" (formula "27") (term "0,0,1,0,0"))
                                             (rule "leq_literals" (formula "27") (term "0,1,0,0"))
                                             (builtin "One Step Simplification" (formula "27"))
                                             (rule "inEqSimp_contradInEq1" (formula "27") (term "1,0,0") (ifseqformula "6"))
                                             (rule "qeq_literals" (formula "27") (term "0,1,0,0"))
                                             (builtin "One Step Simplification" (formula "27"))
                                             (rule "allLeft" (formula "30") (inst "t=j_0"))
                                             (rule "inEqSimp_commuteLeq" (formula "30") (term "1,0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "30") (term "1,0"))
                                             (rule "inEqSimp_homoInEq1" (formula "30") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "30") (term "0,1,0,0"))
                                             (rule "applyEq" (formula "30") (term "1,1,1,0") (ifseqformula "20"))
                                             (rule "applyEq" (formula "30") (term "0,0,1,1,0") (ifseqformula "20"))
                                             (rule "replace_known_left" (formula "30") (term "0,1,1,0") (ifseqformula "4"))
                                             (builtin "One Step Simplification" (formula "30"))
                                             (rule "applyEq" (formula "30") (term "0,1,0,0,1,0,0") (ifseqformula "20"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "30") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_contradInEq0" (formula "30") (term "1,0,0,0,0") (ifseqformula "3"))
                                             (rule "inEqSimp_homoInEq1" (formula "30") (term "0,1,0,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,0,0"))
                                             (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,0,0"))
                                             (rule "polySimp_addComm0" (formula "30") (term "0,0,0,1,0,0,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,1,0,0,0,0"))
                                             (rule "add_literals" (formula "30") (term "1,1,0,0,1,0,0,0,0"))
                                             (rule "times_zero_1" (formula "30") (term "1,0,0,1,0,0,0,0"))
                                             (rule "add_zero_right" (formula "30") (term "0,0,1,0,0,0,0"))
                                             (rule "leq_literals" (formula "30") (term "0,1,0,0,0,0"))
                                             (builtin "One Step Simplification" (formula "30"))
                                             (rule "inEqSimp_contradInEq1" (formula "30") (term "1,0,0,0,0") (ifseqformula "6"))
                                             (rule "qeq_literals" (formula "30") (term "0,1,0,0,0,0"))
                                             (builtin "One Step Simplification" (formula "30"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "30") (term "0"))
                                             (rule "inEqSimp_homoInEq1" (formula "30") (term "1,0"))
                                             (rule "polySimp_pullOutFactor1" (formula "30") (term "0,1,0"))
                                             (rule "add_literals" (formula "30") (term "1,0,1,0"))
                                             (rule "times_zero_1" (formula "30") (term "0,1,0"))
                                             (rule "leq_literals" (formula "30") (term "1,0"))
                                             (builtin "One Step Simplification" (formula "30"))
                                             (rule "true_left" (formula "30"))
                                             (rule "arrayLengthNotNegative" (formula "32") (term "0"))
                                             (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "33"))
                                             (rule "leq_literals" (formula "32") (term "0"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "true_left" (formula "32"))
                                             (rule "arrayLengthIsAShort" (formula "32") (term "0"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "true_left" (formula "32"))
                                             (rule "arrayLengthNotNegative" (formula "33") (term "0"))
                                             (rule "applyEq" (formula "33") (term "0") (ifseqformula "34"))
                                             (rule "inEqSimp_subsumption1" (formula "33") (ifseqformula "32"))
                                             (rule "leq_literals" (formula "33") (term "0"))
                                             (builtin "One Step Simplification" (formula "33"))
                                             (rule "true_left" (formula "33"))
                                             (rule "arrayLengthIsAShort" (formula "33") (term "0"))
                                             (builtin "One Step Simplification" (formula "33"))
                                             (rule "true_left" (formula "33"))
                                             (rule "cut_direct" (formula "15") (term "1"))
                                             (branch "CUT: a1.length <= j_0 TRUE"
                                                (builtin "One Step Simplification" (formula "16"))
                                                (rule "true_left" (formula "16"))
                                                (rule "replace_known_left" (formula "17") (term "1") (ifseqformula "15"))
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "true_left" (formula "17"))
                                                (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "15"))
                                                (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                                (rule "mul_literals" (formula "8") (term "0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                                                (rule "polySimp_mulComm0" (formula "8") (term "1"))
                                                (rule "polySimp_rightDist" (formula "8") (term "1"))
                                                (rule "mul_literals" (formula "8") (term "0,1"))
                                                (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                                                (rule "polySimp_elimOne" (formula "8") (term "1,1"))
                                                (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "3"))
                                                (rule "andLeft" (formula "8"))
                                                (rule "inEqSimp_homoInEq1" (formula "8"))
                                                (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "8") (term "1,0"))
                                                (rule "mul_literals" (formula "8") (term "0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "8") (term "0"))
                                                (rule "polySimp_addComm1" (formula "8") (term "0,0"))
                                                (rule "add_literals" (formula "8") (term "0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "8") (term "0"))
                                                (rule "add_literals" (formula "8") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "8") (term "1,0"))
                                                (rule "add_zero_right" (formula "8") (term "0"))
                                                (rule "leq_literals" (formula "8"))
                                                (rule "closeFalse" (formula "8"))
                                             )
                                             (branch "CUT: a1.length <= j_0 FALSE"
                                                (builtin "One Step Simplification" (formula "15"))
                                                (rule "notLeft" (formula "15"))
                                                (rule "replace_known_right" (formula "16") (term "1") (ifseqformula "35"))
                                                (builtin "One Step Simplification" (formula "16"))
                                                (rule "notLeft" (formula "16"))
                                                (rule "narrowSelectArrayType" (formula "40") (term "1") (ifseqformula "9") (ifseqformula "34"))
                                                (rule "narrowSelectArrayType" (formula "25") (term "0,0,0,0") (ifseqformula "9") (ifseqformula "33"))
                                                (rule "eqSymm" (formula "25") (term "0,0,0"))
                                                (rule "narrowSelectArrayType" (formula "40") (term "0") (ifseqformula "9") (ifseqformula "33"))
                                                (rule "narrowSelectArrayType" (formula "25") (term "0,0,0,0") (ifseqformula "9") (ifseqformula "34"))
                                                (rule "eqSymm" (formula "25") (term "0,0,0"))
                                                (rule "inEqSimp_leqRight" (formula "35"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                (rule "mul_literals" (formula "1") (term "0,1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                (rule "commute_or" (formula "26") (term "0,0"))
                                                (rule "commute_or_2" (formula "26") (term "0"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "37") (term "0") (ifseqformula "10"))
                                                (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "38"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "37") (term "0") (ifseqformula "11"))
                                                (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "38"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "allLeft" (formula "26") (inst "t=j_0"))
                                                (rule "applyEq" (formula "26") (term "0,1") (ifseqformula "21"))
                                                (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "7"))
                                                (builtin "One Step Simplification" (formula "26"))
                                                (rule "true_left" (formula "26"))
                                                (rule "allLeft" (formula "35") (inst "t=j_0"))
                                                (rule "inEqSimp_commuteGeq" (formula "35") (term "1,0"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (term "0,0") (ifseqformula "9"))
                                                (rule "qeq_literals" (formula "35") (term "0,0,0"))
                                                (builtin "One Step Simplification" (formula "35"))
                                                (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                (rule "inEqSimp_commuteGeq" (formula "36") (term "1,0"))
                                                (rule "inEqSimp_contradInEq1" (formula "36") (term "0,0") (ifseqformula "8"))
                                                (rule "qeq_literals" (formula "36") (term "0,0,0"))
                                                (builtin "One Step Simplification" (formula "36"))
                                                (rule "arrayLengthIsAShort" (formula "25") (term "0,1,0"))
                                                (builtin "One Step Simplification" (formula "25"))
                                                (rule "true_left" (formula "25"))
                                                (rule "cut_direct" (formula "25") (term "0,0"))
                                                (branch "CUT: iv_2 >= i_0 TRUE"
                                                   (builtin "One Step Simplification" (formula "26"))
                                                   (rule "true_left" (formula "26"))
                                                   (rule "allLeft" (formula "28") (inst "t=iv_2"))
                                                   (rule "replace_known_right" (formula "28") (term "1") (ifseqformula "45"))
                                                   (builtin "One Step Simplification" (formula "28"))
                                                   (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "5"))
                                                   (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                                                   (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                                                   (rule "add_zero_right" (formula "28") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "28") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "28"))
                                                   (rule "inEqSimp_contradInEq1" (formula "28") (ifseqformula "4"))
                                                   (rule "qeq_literals" (formula "28") (term "0"))
                                                   (builtin "One Step Simplification" (formula "28"))
                                                   (rule "closeFalse" (formula "28"))
                                                )
                                                (branch "CUT: iv_2 >= i_0 FALSE"
                                                   (builtin "One Step Simplification" (formula "25"))
                                                   (rule "inEqSimp_geqRight" (formula "38"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                   (rule "mul_literals" (formula "1") (term "0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                   (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "1"))
                                                   (rule "mul_literals" (formula "5") (term "0,0"))
                                                   (rule "add_zero_left" (formula "5") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                                                   (rule "mul_literals" (formula "5") (term "1"))
                                                   (rule "allLeft" (formula "29") (inst "t=iv_2"))
                                                   (rule "replace_known_right" (formula "29") (term "1") (ifseqformula "46"))
                                                   (builtin "One Step Simplification" (formula "29"))
                                                   (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "5"))
                                                   (rule "qeq_literals" (formula "29") (term "0,0"))
                                                   (builtin "One Step Simplification" (formula "29"))
                                                   (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "29"))
                                                   (rule "andLeft" (formula "6"))
                                                   (rule "inEqSimp_homoInEq1" (formula "6"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "6") (term "0"))
                                                   (rule "add_literals" (formula "6") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "6") (term "1,0"))
                                                   (rule "add_zero_right" (formula "6") (term "0"))
                                                   (rule "leq_literals" (formula "6"))
                                                   (rule "closeFalse" (formula "6"))
                                                )
                                             )
                                          )
                                       )
                                    )
                                    (branch "a1[j_0].length >= 1 FALSE"
                                       (rule "eqSymm" (formula "32") (term "0"))
                                       (rule "inEqSimp_geqRight" (formula "31"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_contradEq7" (formula "32") (term "0") (ifseqformula "2"))
                                       (rule "times_zero_1" (formula "32") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "32") (term "0,0,0"))
                                       (rule "leq_literals" (formula "32") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "32"))
                                       (rule "false_right" (formula "32"))
                                       (rule "arrayLengthIsAShort" (formula "2") (term "0"))
                                       (builtin "One Step Simplification" (formula "2"))
                                       (rule "true_left" (formula "2"))
                                       (rule "arrayLengthNotNegative" (formula "2") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "3"))
                                       (rule "leq_literals" (formula "2") (term "0"))
                                       (builtin "One Step Simplification" (formula "2"))
                                       (rule "true_left" (formula "2"))
                                       (rule "allLeft" (formula "14") (inst "t=j_0"))
                                       (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "14") (term "1,0") (ifseqformula "4"))
                                       (rule "qeq_literals" (formula "14") (term "0,1,0"))
                                       (builtin "One Step Simplification" (formula "14"))
                                       (rule "allLeft" (formula "13") (inst "t=j_0"))
                                       (rule "inEqSimp_commuteGeq" (formula "13") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "13") (term "1,0") (ifseqformula "4"))
                                       (rule "qeq_literals" (formula "13") (term "0,1,0"))
                                       (builtin "One Step Simplification" (formula "13"))
                                       (rule "allLeft" (formula "22") (inst "t=j_0"))
                                       (rule "inEqSimp_contradEq7" (formula "22") (term "1") (ifseqformula "2"))
                                       (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
                                       (rule "add_literals" (formula "22") (term "0,0,1"))
                                       (rule "leq_literals" (formula "22") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "22"))
                                       (rule "inEqSimp_contradInEq0" (formula "22") (term "1,0") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "22") (term "0,1,0"))
                                       (builtin "One Step Simplification" (formula "22"))
                                       (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "2"))
                                       (rule "qeq_literals" (formula "22") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "22"))
                                       (rule "inEqSimp_contradInEq1" (formula "22") (term "0") (ifseqformula "4"))
                                       (rule "qeq_literals" (formula "22") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "22"))
                                       (rule "inEqSimp_antiSymm" (formula "22") (ifseqformula "3"))
                                       (rule "applyEqRigid" (formula "1") (term "0,2,0,0") (ifseqformula "22"))
                                       (rule "applyEq" (formula "13") (term "0,2,0,0,0") (ifseqformula "22"))
                                       (rule "replace_known_right" (formula "13") (term "0,0") (ifseqformula "33"))
                                       (builtin "One Step Simplification" (formula "13"))
                                       (rule "true_left" (formula "13"))
                                       (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "21"))
                                       (rule "inEqSimp_homoInEq0" (formula "3"))
                                       (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
                                       (rule "add_literals" (formula "3") (term "1,0"))
                                       (rule "times_zero_1" (formula "3") (term "0"))
                                       (rule "qeq_literals" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "applyEqRigid" (formula "13") (term "1,1") (ifseqformula "20"))
                                       (rule "applyEq" (formula "21") (term "0") (ifseqformula "20"))
                                       (rule "inEqSimp_homoInEq1" (formula "21"))
                                       (rule "polySimp_pullOutFactor1" (formula "21") (term "0"))
                                       (rule "add_literals" (formula "21") (term "1,0"))
                                       (rule "times_zero_1" (formula "21") (term "0"))
                                       (rule "leq_literals" (formula "21"))
                                       (rule "true_left" (formula "21"))
                                       (rule "applyEqRigid" (formula "13") (term "0,2,0,0,0") (ifseqformula "20"))
                                       (rule "replace_known_right" (formula "13") (term "0,0") (ifseqformula "29"))
                                       (builtin "One Step Simplification" (formula "13"))
                                       (rule "true_left" (formula "13"))
                                       (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "19"))
                                       (rule "applyEq" (formula "2") (term "0,2,0,0") (ifseqformula "18"))
                                       (rule "applyEq" (formula "16") (term "1") (ifseqformula "18"))
                                       (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "24"))
                                       (rule "qeq_literals" (formula "1") (term "0"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                 )
                                 (branch "a1[i_0].length >= 1 FALSE"
                                    (rule "eqSymm" (formula "25"))
                                    (rule "inEqSimp_geqRight" (formula "28"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "applyEq" (formula "28") (term "1,1,0") (ifseqformula "26"))
                                    (rule "applyEq" (formula "27") (term "1,1,0,0") (ifseqformula "26"))
                                    (rule "applyEq" (formula "25") (term "0") (ifseqformula "26"))
                                    (rule "qeq_literals" (formula "25"))
                                    (rule "closeFalse" (formula "25"))
                                 )
                              )
                              (branch "a2[j_0].length >= 1 FALSE"
                                 (rule "eqSymm" (formula "30") (term "0"))
                                 (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "29")))
                                 (rule "replace_known_right" (formula "17") (term "1") (ifseqformula "29"))
                                 (builtin "One Step Simplification" (formula "17"))
                                 (rule "inEqSimp_geqRight" (formula "29"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_notGeq" (formula "30") (term "0,0"))
                                 (rule "mul_literals" (formula "30") (term "1,0,0,0,0"))
                                 (rule "add_literals" (formula "30") (term "0,0,0,0"))
                                 (rule "add_zero_left" (formula "30") (term "0,0,0"))
                                 (rule "inEqSimp_or_tautInEq0" (formula "30") (term "0,0,1"))
                                 (rule "add_zero_right" (formula "30") (term "1,1,0,0,1"))
                                 (rule "qeq_literals" (formula "30") (term "1,0,0,1"))
                                 (builtin "One Step Simplification" (formula "30"))
                                 (rule "orRight" (formula "30"))
                                 (rule "replace_known_right" (formula "18") (term "1") (ifseqformula "30"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "inEqSimp_leqRight" (formula "30"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                 (rule "mul_literals" (formula "1") (term "1"))
                                 (rule "inEqSimp_contradEq7" (formula "31") (ifseqformula "1"))
                                 (rule "times_zero_1" (formula "31") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "31") (term "0,0"))
                                 (rule "leq_literals" (formula "31") (term "0"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "false_right" (formula "31"))
                                 (rule "inEqSimp_antiSymm" (formula "19") (ifseqformula "3"))
                                 (rule "applyEqRigid" (formula "1") (term "0,2,0,0") (ifseqformula "19"))
                                 (rule "replace_known_left" (formula "28") (term "0,0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "28"))
                                 (rule "eqSymm" (formula "28"))
                                 (rule "applyEq" (formula "2") (term "0,2,0,0") (ifseqformula "19"))
                                 (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "19"))
                                 (rule "applyEq" (formula "3") (term "0") (ifseqformula "18"))
                                 (rule "inEqSimp_homoInEq0" (formula "3"))
                                 (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
                                 (rule "add_literals" (formula "3") (term "1,0"))
                                 (rule "times_zero_1" (formula "3") (term "0"))
                                 (rule "qeq_literals" (formula "3"))
                                 (rule "true_left" (formula "3"))
                                 (rule "applyEqRigid" (formula "18") (term "0") (ifseqformula "17"))
                                 (rule "inEqSimp_homoInEq1" (formula "18"))
                                 (rule "polySimp_pullOutFactor1" (formula "18") (term "0"))
                                 (rule "add_literals" (formula "18") (term "1,0"))
                                 (rule "times_zero_1" (formula "18") (term "0"))
                                 (rule "leq_literals" (formula "18"))
                                 (rule "true_left" (formula "18"))
                                 (rule "applyEq" (formula "26") (term "1,1,0") (ifseqformula "25"))
                                 (rule "applyEq" (formula "24") (term "0") (ifseqformula "25"))
                                 (rule "applyEq" (formula "2") (term "0") (ifseqformula "24"))
                                 (rule "applyEqRigid" (formula "16") (term "1") (ifseqformula "17"))
                                 (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
                                 (rule "qeq_literals" (formula "1") (term "0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                           )
                           (branch "a2[i_0].length >= 1 FALSE"
                              (rule "eqSymm" (formula "24"))
                              (builtin "One Step Simplification" (formula "24"))
                              (rule "inEqSimp_geqRight" (formula "27"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_notGeq" (formula "25") (term "0"))
                              (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                              (rule "add_literals" (formula "25") (term "0,0,0"))
                              (rule "add_zero_left" (formula "25") (term "0,0"))
                              (rule "ifthenelse_split" (formula "30") (term "0,0"))
                              (branch "a2[j_0].length >= 1 TRUE"
                                 (rule "eqSymm" (formula "31") (term "0"))
                                 (rule "replace_known_left" (formula "31") (term "0,1,1,0,0,1") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "true_left" (formula "19"))
                                 (rule "ifthenelse_to_or_left" (formula "26") (term "0,0,0,0"))
                                 (rule "eqSymm" (formula "26") (term "1,1,0,0,0,0"))
                                 (rule "eqSymm" (formula "26") (term "1,0,0,0,0,0"))
                                 (rule "nnf_notAnd" (formula "26") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,0,0,0,0"))
                                 (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "26") (term "0,0,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0,0"))
                                 (rule "commute_or" (formula "26") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "26") (term "0,0"))
                                 (rule "commute_or_2" (formula "26") (term "0"))
                                 (rule "commute_or_2" (formula "26") (term "0,1,0"))
                                 (rule "commute_or" (formula "26") (term "1,1,0"))
                                 (rule "commute_or" (formula "26") (term "0,0,1,0"))
                                 (rule "cnf_rightDist" (formula "26") (term "1,1,0"))
                                 (rule "cnf_rightDist" (formula "26") (term "0"))
                                 (rule "distr_forallAnd" (formula "26"))
                                 (rule "andLeft" (formula "26"))
                                 (rule "commute_or" (formula "27") (term "0"))
                                 (rule "commute_or_2" (formula "26") (term "0"))
                                 (rule "commute_or_2" (formula "26") (term "0,0"))
                                 (rule "commute_or" (formula "27") (term "1,1,0"))
                                 (rule "cnf_rightDist" (formula "27") (term "0"))
                                 (rule "distr_forallAnd" (formula "27"))
                                 (rule "andLeft" (formula "27"))
                                 (rule "commute_or_2" (formula "27") (term "0"))
                                 (rule "shift_paren_or" (formula "28") (term "0"))
                                 (rule "commute_or_2" (formula "27") (term "0,0"))
                                 (rule "shift_paren_or" (formula "28") (term "0,0"))
                                 (rule "commute_or_2" (formula "28") (term "0,0,0"))
                                 (rule "shift_paren_or" (formula "26") (term "0,0,0"))
                                 (rule "shift_paren_or" (formula "27") (term "0,0,0"))
                                 (rule "commute_or" (formula "27") (term "0,0,0,0"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "27") (term "0,0,0"))
                                 (rule "add_zero_right" (formula "27") (term "1,1,0,0,0"))
                                 (rule "qeq_literals" (formula "27") (term "1,0,0,0"))
                                 (builtin "One Step Simplification" (formula "27"))
                                 (rule "true_left" (formula "27"))
                                 (rule "shift_paren_or" (formula "26") (term "0,0,0,0"))
                                 (rule "commute_or" (formula "26") (term "0,0,0,0,0"))
                                 (builtin "One Step Simplification" (formula "26"))
                                 (rule "allLeft" (formula "14") (inst "t=i_0"))
                                 (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "6"))
                                 (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1"))
                                 (rule "add_literals" (formula "14") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "14") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "14") (term "0,0,1"))
                                 (rule "leq_literals" (formula "14") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "14"))
                                 (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "17"))
                                 (rule "qeq_literals" (formula "14") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "14"))
                                 (rule "notLeft" (formula "14"))
                                 (rule "narrowSelectArrayType" (formula "26") (term "0,0,0,0,0,0") (ifseqformula "7") (ifseqformula "29"))
                                 (rule "eqSymm" (formula "26") (term "0,0,0,0,0"))
                                 (rule "narrowSelectArrayType" (formula "27") (term "0,0,0,0,0,0") (ifseqformula "7") (ifseqformula "29"))
                                 (rule "allLeft" (formula "13") (inst "t=i_0"))
                                 (rule "inEqSimp_commuteGeq" (formula "13") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "13") (term "1,0") (ifseqformula "17"))
                                 (rule "qeq_literals" (formula "13") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "inEqSimp_contradInEq1" (formula "13") (term "1") (ifseqformula "6"))
                                 (rule "inEqSimp_homoInEq1" (formula "13") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1"))
                                 (rule "add_literals" (formula "13") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "13") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "13") (term "0,0,1"))
                                 (rule "leq_literals" (formula "13") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "notLeft" (formula "13"))
                                 (rule "narrowSelectArrayType" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "7") (ifseqformula "29"))
                                 (rule "narrowSelectArrayType" (formula "26") (term "0,0,0,0,0,0") (ifseqformula "7") (ifseqformula "29"))
                                 (rule "eqSymm" (formula "26") (term "0,0,0,0,0"))
                                 (rule "commute_or" (formula "26") (term "0,0,0,0"))
                                 (rule "commute_or_2" (formula "26") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "26") (term "0,0"))
                                 (rule "commute_or_2" (formula "26") (term "0"))
                                 (rule "cut_direct" (formula "28") (term "0,1,1,0"))
                                 (branch "CUT: a1[i_0].length >= 1 TRUE"
                                    (builtin "One Step Simplification" (formula "29"))
                                    (rule "replace_known_left" (formula "26") (term "0,1,1,0,0") (ifseqformula "28"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "replace_known_left" (formula "27") (term "0,1,1,0") (ifseqformula "28"))
                                    (builtin "One Step Simplification" (formula "27"))
                                    (rule "inEqSimp_contradEq7" (formula "25") (term "1") (ifseqformula "28"))
                                    (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "25") (term "0,0,1"))
                                    (rule "leq_literals" (formula "25") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "25"))
                                    (rule "inEqSimp_contradInEq1" (formula "25") (ifseqformula "28"))
                                    (rule "qeq_literals" (formula "25") (term "0"))
                                    (builtin "One Step Simplification" (formula "25"))
                                    (rule "closeFalse" (formula "25"))
                                 )
                                 (branch "CUT: a1[i_0].length >= 1 FALSE"
                                    (builtin "One Step Simplification" (formula "28"))
                                    (rule "replace_known_right" (formula "27") (term "0,1,1,0") (ifseqformula "29"))
                                    (builtin "One Step Simplification" (formula "27"))
                                    (rule "replace_known_right" (formula "26") (term "0,1,1,0,0") (ifseqformula "29"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "inEqSimp_geqRight" (formula "29"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "replace_known_left" (formula "26") (term "0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "true_left" (formula "26"))
                                    (rule "commute_or_2" (formula "28") (term "0"))
                                    (rule "commute_or_2" (formula "27") (term "0"))
                                    (rule "commute_or_2" (formula "26") (term "0,0"))
                                    (rule "commute_or_2" (formula "28") (term "0,0"))
                                    (rule "inEqSimp_or_tautInEq1" (formula "28") (term "0,0,0"))
                                    (rule "add_zero_right" (formula "28") (term "1,1,0,0,0"))
                                    (rule "qeq_literals" (formula "28") (term "1,0,0,0"))
                                    (builtin "One Step Simplification" (formula "28"))
                                    (rule "true_left" (formula "28"))
                                    (rule "commute_or_2" (formula "27") (term "0,0"))
                                    (rule "inEqSimp_or_tautInEq1" (formula "27") (term "0,0,0"))
                                    (rule "add_zero_right" (formula "27") (term "1,1,0,0,0"))
                                    (rule "qeq_literals" (formula "27") (term "1,0,0,0"))
                                    (builtin "One Step Simplification" (formula "27"))
                                    (rule "true_left" (formula "27"))
                                    (rule "commute_or_2" (formula "26") (term "0,0,0"))
                                    (rule "inEqSimp_or_tautInEq0" (formula "26") (term "0,0,0,0"))
                                    (rule "add_zero_right" (formula "26") (term "1,1,0,0,0,0"))
                                    (rule "qeq_literals" (formula "26") (term "1,0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "true_left" (formula "26"))
                                    (rule "ifthenelse_split" (formula "30") (term "0,0"))
                                    (branch "a1[j_0].length >= 1 TRUE"
                                       (rule "eqSymm" (formula "31") (term "0"))
                                       (rule "arrayLengthIsAShort" (formula "4") (term "0"))
                                       (builtin "One Step Simplification" (formula "4"))
                                       (rule "true_left" (formula "4"))
                                       (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                                       (rule "inEqSimp_antiSymm" (formula "4") (ifseqformula "5"))
                                       (rule "applyEq" (formula "5") (term "0") (ifseqformula "4"))
                                       (rule "qeq_literals" (formula "5"))
                                       (rule "true_left" (formula "5"))
                                       (rule "applyEq" (formula "5") (term "0") (ifseqformula "4"))
                                       (rule "leq_literals" (formula "5"))
                                       (rule "true_left" (formula "5"))
                                       (rule "arrayLengthIsAShort" (formula "3") (term "0"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "arrayLengthNotNegative" (formula "3") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "4"))
                                       (rule "leq_literals" (formula "3") (term "0"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "arrayLengthNotNegative" (formula "31") (term "1,1,1,0,1,1,0,1"))
                                       (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "2"))
                                       (rule "leq_literals" (formula "1") (term "0"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "arrayLengthIsAShort" (formula "31") (term "1,1,1,0,1,1,0,1"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "allLeft" (formula "16") (inst "t=j_0"))
                                       (rule "inEqSimp_commuteGeq" (formula "16") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "16") (term "1,0") (ifseqformula "6"))
                                       (rule "qeq_literals" (formula "16") (term "0,1,0"))
                                       (builtin "One Step Simplification" (formula "16"))
                                       (rule "allLeft" (formula "15") (inst "t=j_0"))
                                       (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "15") (term "1,0") (ifseqformula "6"))
                                       (rule "qeq_literals" (formula "15") (term "0,1,0"))
                                       (builtin "One Step Simplification" (formula "15"))
                                       (rule "allLeft" (formula "21") (inst "t=j_0"))
                                       (rule "inEqSimp_contradInEq1" (formula "21") (term "1,0,0") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "21") (term "0,1,0,0"))
                                       (builtin "One Step Simplification" (formula "21"))
                                       (rule "inEqSimp_contradInEq1" (formula "21") (term "1,0") (ifseqformula "3"))
                                       (rule "qeq_literals" (formula "21") (term "0,1,0"))
                                       (builtin "One Step Simplification" (formula "21"))
                                       (rule "inEqSimp_contradInEq1" (formula "21") (term "0,0") (ifseqformula "6"))
                                       (rule "qeq_literals" (formula "21") (term "0,0,0"))
                                       (builtin "One Step Simplification" (formula "21"))
                                       (rule "allLeft" (formula "27") (inst "t=j_0"))
                                       (rule "replace_known_left" (formula "27") (term "0,0,1,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "27"))
                                       (rule "inEqSimp_commuteLeq" (formula "27") (term "1,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "27") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "27") (term "0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "27") (term "1,0,0,0,0") (ifseqformula "6"))
                                       (rule "qeq_literals" (formula "27") (term "0,1,0,0,0,0"))
                                       (builtin "One Step Simplification" (formula "27"))
                                       (rule "commute_or_2" (formula "27") (term "0,0"))
                                       (rule "commute_or_2" (formula "27") (term "0"))
                                       (rule "allLeft" (formula "29") (inst "t=j_0"))
                                       (rule "replace_known_left" (formula "29") (term "0,0,1,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "29"))
                                       (rule "inEqSimp_commuteLeq" (formula "29") (term "1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "29") (term "1,0,0,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "29") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "29") (term "0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "29") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "29") (term "1,0,0,0,0,0") (ifseqformula "6"))
                                       (rule "qeq_literals" (formula "29") (term "0,1,0,0,0,0,0"))
                                       (builtin "One Step Simplification" (formula "29"))
                                       (rule "inEqSimp_or_tautInEq1" (formula "29") (term "0"))
                                       (rule "inEqSimp_homoInEq1" (formula "29") (term "1,0"))
                                       (rule "polySimp_pullOutFactor1" (formula "29") (term "0,1,0"))
                                       (rule "add_literals" (formula "29") (term "1,0,1,0"))
                                       (rule "times_zero_1" (formula "29") (term "0,1,0"))
                                       (rule "leq_literals" (formula "29") (term "1,0"))
                                       (builtin "One Step Simplification" (formula "29"))
                                       (rule "true_left" (formula "29"))
                                       (rule "allLeft" (formula "26") (inst "t=j_0"))
                                       (rule "replace_known_left" (formula "26") (term "0,0,1,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "26"))
                                       (rule "inEqSimp_commuteLeq" (formula "26") (term "1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "26") (term "1,0,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "26") (term "1,0,0,0,0") (ifseqformula "6"))
                                       (rule "qeq_literals" (formula "26") (term "0,1,0,0,0,0"))
                                       (builtin "One Step Simplification" (formula "26"))
                                       (rule "commute_or_2" (formula "26") (term "0,0"))
                                       (rule "commute_or_2" (formula "26") (term "0"))
                                       (rule "cut_direct" (formula "28") (term "1,0"))
                                       (branch "CUT: j_0 >= i_0 TRUE"
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "true_left" (formula "29"))
                                          (rule "replace_known_left" (formula "26") (term "1,0") (ifseqformula "28"))
                                          (builtin "One Step Simplification" (formula "26"))
                                          (rule "true_left" (formula "26"))
                                          (rule "replace_known_left" (formula "21") (term "0") (ifseqformula "27"))
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "inEqSimp_antiSymm" (formula "26") (ifseqformula "5"))
                                          (rule "applyEq" (formula "15") (term "1,1") (ifseqformula "26"))
                                          (rule "applyEqRigid" (formula "17") (term "0,2,0,0,0") (ifseqformula "26"))
                                          (rule "replace_known_right" (formula "17") (term "0,0") (ifseqformula "32"))
                                          (builtin "One Step Simplification" (formula "17"))
                                          (rule "true_left" (formula "17"))
                                          (rule "applyEq" (formula "1") (term "0,2,0,0") (ifseqformula "25"))
                                          (rule "applyEq" (formula "26") (term "0") (ifseqformula "25"))
                                          (rule "inEqSimp_homoInEq1" (formula "26"))
                                          (rule "polySimp_pullOutFactor1" (formula "26") (term "0"))
                                          (rule "add_literals" (formula "26") (term "1,0"))
                                          (rule "times_zero_1" (formula "26") (term "0"))
                                          (rule "leq_literals" (formula "26"))
                                          (rule "true_left" (formula "26"))
                                          (rule "applyEqRigid" (formula "15") (term "0,2,0,0,0") (ifseqformula "25"))
                                          (rule "replace_known_right" (formula "15") (term "0,0") (ifseqformula "29"))
                                          (builtin "One Step Simplification" (formula "15"))
                                          (rule "true_left" (formula "15"))
                                          (rule "applyEqRigid" (formula "32") (term "0,2,0,1,1,1,0,0,1,0,1") (ifseqformula "24"))
                                          (rule "eqSymm" (formula "32") (term "1,0,1"))
                                          (rule "applyEqRigid" (formula "32") (term "0,2,0,0,0") (ifseqformula "24"))
                                          (rule "eqSymm" (formula "32") (term "0"))
                                          (rule "applyEq" (formula "6") (term "0") (ifseqformula "24"))
                                          (rule "applyEq" (formula "3") (term "0,2,0,0") (ifseqformula "23"))
                                          (rule "applyEq" (formula "31") (term "0,2,0,1,1,0,0,1") (ifseqformula "23"))
                                          (rule "applyEqRigid" (formula "5") (term "0") (ifseqformula "23"))
                                          (rule "inEqSimp_homoInEq0" (formula "5"))
                                          (rule "polySimp_pullOutFactor1" (formula "5") (term "0"))
                                          (rule "add_literals" (formula "5") (term "1,0"))
                                          (rule "times_zero_1" (formula "5") (term "0"))
                                          (rule "qeq_literals" (formula "5"))
                                          (rule "true_left" (formula "5"))
                                          (rule "applyEq" (formula "3") (term "0") (ifseqformula "4"))
                                          (rule "qeq_literals" (formula "3"))
                                          (rule "closeFalse" (formula "3"))
                                       )
                                       (branch "CUT: j_0 >= i_0 FALSE"
                                          (builtin "One Step Simplification" (formula "28"))
                                          (rule "replace_known_right" (formula "26") (term "1,0") (ifseqformula "32"))
                                          (builtin "One Step Simplification" (formula "26"))
                                          (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "32"))
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "replace_known_left" (formula "37") (term "0") (ifseqformula "21"))
                                          (builtin "One Step Simplification" (formula "37"))
                                          (rule "allRight" (formula "37") (inst "sk=iv_1"))
                                          (rule "cutUpperBound" (formula "37") (ifseqformula "24"))
                                          (branch "Case 1"
                                             (rule "crossInst" (formula "25") (inst "sk=j_3") (ifseqformula "38"))
                                             (rule "orRight" (formula "39"))
                                             (rule "andLeft" (formula "25"))
                                             (rule "orRight" (formula "40"))
                                             (rule "eqSymm" (formula "1"))
                                             (rule "inEqSimp_geqRight" (formula "35"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                             (rule "inEqSimp_geqRight" (formula "41"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0"))
                                             (rule "inEqSimp_leqRight" (formula "41"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "replace_known_left" (formula "42") (term "0,0,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "1")))
                                             (rule "inEqSimp_homoInEq0" (formula "42") (term "0,1"))
                                             (rule "polySimp_addComm1" (formula "42") (term "0,0,1"))
                                             (rule "inEqSimp_homoInEq0" (formula "42") (term "0,0"))
                                             (rule "polySimp_addComm1" (formula "42") (term "0,0,0"))
                                             (rule "applyEqRigid" (formula "29") (term "0,2,0,0,1") (ifseqformula "28"))
                                             (rule "applyEq" (formula "42") (term "1,0,0,0") (ifseqformula "25"))
                                             (rule "applyEqRigid" (formula "29") (term "0,2,0,0,1,0") (ifseqformula "28"))
                                             (rule "applyEq" (formula "29") (term "0,0,0,0") (ifseqformula "28"))
                                             (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "25"))
                                             (rule "applyEqRigid" (formula "29") (term "0,1,0,0") (ifseqformula "28"))
                                             (rule "applyEq" (formula "4") (term "0") (ifseqformula "25"))
                                             (rule "applyEq" (formula "32") (term "1,1,0") (ifseqformula "25"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "applyEq" (formula "7") (term "0") (ifseqformula "25"))
                                             (rule "applyEq" (formula "33") (term "1,1,0") (ifseqformula "24"))
                                             (rule "applyEq" (formula "33") (term "1,1,1,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "31") (term "1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "4"))
                                             (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                             (rule "add_literals" (formula "2") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "2") (term "1,0"))
                                             (rule "add_zero_right" (formula "2") (term "0"))
                                             (rule "leq_literals" (formula "2"))
                                             (rule "closeFalse" (formula "2"))
                                          )
                                          (branch "Case 2"
                                             (rule "crossInst" (formula "25") (inst "sk=j_2") (ifseqformula "38"))
                                             (rule "orRight" (formula "39"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "andLeft" (formula "24"))
                                             (rule "orRight" (formula "40"))
                                             (rule "eqSymm" (formula "34"))
                                             (rule "inEqSimp_geqRight" (formula "35"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                             (rule "inEqSimp_leqRight" (formula "40"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "replace_known_left" (formula "42") (term "0,0,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "1")))
                                             (rule "inEqSimp_geqRight" (formula "41"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0"))
                                             (rule "inEqSimp_homoInEq0" (formula "42") (term "0,1"))
                                             (rule "polySimp_addComm1" (formula "42") (term "0,0,1"))
                                             (rule "inEqSimp_homoInEq0" (formula "42") (term "0,0"))
                                             (rule "polySimp_addComm1" (formula "42") (term "0,0,0"))
                                             (rule "applyEq" (formula "28") (term "0,2,0,0,1,0") (ifseqformula "27"))
                                             (rule "applyEqRigid" (formula "28") (term "0,0,0,0") (ifseqformula "27"))
                                             (rule "applyEq" (formula "28") (term "0,1,0,0") (ifseqformula "27"))
                                             (rule "applyEq" (formula "42") (term "1,0,0,0") (ifseqformula "24"))
                                             (rule "applyEqRigid" (formula "28") (term "0,2,0,0,1") (ifseqformula "27"))
                                             (rule "applyEq" (formula "37") (term "0") (ifseqformula "24"))
                                             (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "24"))
                                             (rule "applyEq" (formula "6") (term "0") (ifseqformula "24"))
                                             (rule "applyEq" (formula "30") (term "1,1,0") (ifseqformula "23"))
                                             (builtin "One Step Simplification" (formula "30"))
                                             (rule "applyEq" (formula "32") (term "1,1,0") (ifseqformula "23"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                             (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                             (rule "polySimp_rightDist" (formula "3") (term "1"))
                                             (rule "mul_literals" (formula "3") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "0,1"))
                                             (rule "polySimp_mulComm0" (formula "41") (term "1,0,1"))
                                             (rule "polySimp_rightDist" (formula "41") (term "1,0,1"))
                                             (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,1"))
                                             (rule "mul_literals" (formula "41") (term "0,1,0,1"))
                                             (rule "polySimp_elimOne" (formula "41") (term "1,1,0,1"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "0,0"))
                                             (rule "polySimp_mulComm0" (formula "41") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "41") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "41") (term "0,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "41") (term "1,1,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                             (rule "polySimp_elimOne" (formula "1") (term "0"))
                                             (rule "replace_known_left" (formula "41") (term "0,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "1")))
                                             (rule "inEqSimp_contradEq7" (formula "36") (ifseqformula "1"))
                                             (rule "polySimp_mulComm0" (formula "36") (term "1,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0"))
                                             (rule "add_literals" (formula "36") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "36") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "36") (term "0,0"))
                                             (rule "leq_literals" (formula "36") (term "0"))
                                             (builtin "One Step Simplification" (formula "36"))
                                             (rule "false_right" (formula "36"))
                                             (rule "inEqSimp_subsumption0" (formula "7") (ifseqformula "3"))
                                             (rule "inEqSimp_homoInEq0" (formula "7") (term "0"))
                                             (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "7") (term "1,0,0"))
                                             (rule "mul_literals" (formula "7") (term "0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
                                             (rule "polySimp_addComm0" (formula "7") (term "0,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0"))
                                             (rule "add_literals" (formula "7") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "7") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "7") (term "0,0"))
                                             (rule "qeq_literals" (formula "7") (term "0"))
                                             (builtin "One Step Simplification" (formula "7"))
                                             (rule "true_left" (formula "7"))
                                             (rule "inEqSimp_contradInEq1" (formula "26") (term "0,0,0") (ifseqformula "2"))
                                             (rule "qeq_literals" (formula "26") (term "0,0,0,0"))
                                             (builtin "One Step Simplification" (formula "26"))
                                             (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "3"))
                                             (rule "times_zero_1" (formula "7") (term "0,0"))
                                             (rule "add_zero_left" (formula "7") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                                             (rule "mul_literals" (formula "7") (term "1"))
                                             (rule "inEqSimp_subsumption1" (formula "22") (ifseqformula "7"))
                                             (rule "leq_literals" (formula "22") (term "0"))
                                             (builtin "One Step Simplification" (formula "22"))
                                             (rule "true_left" (formula "22"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "31") (term "0"))
                                             (rule "inEqSimp_homoInEq1" (formula "31") (term "1,0"))
                                             (rule "polySimp_pullOutFactor1" (formula "31") (term "0,1,0"))
                                             (rule "add_literals" (formula "31") (term "1,0,1,0"))
                                             (rule "times_zero_1" (formula "31") (term "0,1,0"))
                                             (rule "leq_literals" (formula "31") (term "1,0"))
                                             (builtin "One Step Simplification" (formula "31"))
                                             (rule "true_left" (formula "31"))
                                             (rule "arrayLengthIsAShort" (formula "5") (term "0"))
                                             (builtin "One Step Simplification" (formula "5"))
                                             (rule "true_left" (formula "5"))
                                             (rule "arrayLengthNotNegative" (formula "5") (term "0"))
                                             (rule "inEqSimp_antiSymm" (formula "5") (ifseqformula "6"))
                                             (rule "applyEq" (formula "6") (term "0") (ifseqformula "5"))
                                             (rule "qeq_literals" (formula "6"))
                                             (rule "true_left" (formula "6"))
                                             (rule "applyEq" (formula "6") (term "0") (ifseqformula "5"))
                                             (rule "leq_literals" (formula "6"))
                                             (rule "true_left" (formula "6"))
                                             (rule "cut_direct" (formula "17") (term "1"))
                                             (branch "CUT: a1.length <= j_0 TRUE"
                                                (builtin "One Step Simplification" (formula "18"))
                                                (rule "true_left" (formula "18"))
                                                (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "17"))
                                                (builtin "One Step Simplification" (formula "19"))
                                                (rule "true_left" (formula "19"))
                                                (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "17"))
                                                (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                                                (rule "mul_literals" (formula "10") (term "0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                                                (rule "polySimp_mulComm0" (formula "10") (term "1"))
                                                (rule "polySimp_rightDist" (formula "10") (term "1"))
                                                (rule "mul_literals" (formula "10") (term "0,1"))
                                                (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
                                                (rule "polySimp_elimOne" (formula "10") (term "1,1"))
                                                (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "10"))
                                                (rule "andLeft" (formula "3"))
                                                (rule "inEqSimp_homoInEq1" (formula "3"))
                                                (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                (rule "add_literals" (formula "3") (term "0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                (rule "add_literals" (formula "3") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "3") (term "1,0"))
                                                (rule "add_zero_right" (formula "3") (term "0"))
                                                (rule "leq_literals" (formula "3"))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                             (branch "CUT: a1.length <= j_0 FALSE"
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "notLeft" (formula "17"))
                                                (rule "replace_known_right" (formula "18") (term "1") (ifseqformula "34"))
                                                (builtin "One Step Simplification" (formula "18"))
                                                (rule "notLeft" (formula "18"))
                                                (rule "narrowSelectArrayType" (formula "27") (term "0,0,0,0") (ifseqformula "11") (ifseqformula "32"))
                                                (rule "eqSymm" (formula "27") (term "0,0,0"))
                                                (rule "narrowSelectArrayType" (formula "39") (term "1") (ifseqformula "11") (ifseqformula "33"))
                                                (rule "narrowSelectArrayType" (formula "39") (term "0") (ifseqformula "11") (ifseqformula "32"))
                                                (rule "narrowSelectArrayType" (formula "27") (term "0,0,0,0") (ifseqformula "11") (ifseqformula "33"))
                                                (rule "eqSymm" (formula "27") (term "0,0,0"))
                                                (rule "inEqSimp_leqRight" (formula "34"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                (rule "mul_literals" (formula "1") (term "0,1"))
                                                (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                (rule "commute_or" (formula "28") (term "0,0"))
                                                (rule "commute_or_2" (formula "28") (term "0"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "36") (term "0") (ifseqformula "12"))
                                                (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "37"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "36") (term "0") (ifseqformula "13"))
                                                (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "37"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "allLeft" (formula "28") (inst "t=j_0"))
                                                (rule "applyEq" (formula "28") (term "0,1") (ifseqformula "23"))
                                                (rule "replace_known_left" (formula "28") (term "1") (ifseqformula "7"))
                                                (builtin "One Step Simplification" (formula "28"))
                                                (rule "true_left" (formula "28"))
                                                (rule "allLeft" (formula "30") (inst "t=iv_1"))
                                                (rule "replace_known_right" (formula "30") (term "1") (ifseqformula "42"))
                                                (builtin "One Step Simplification" (formula "30"))
                                                (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "30") (term "0") (ifseqformula "5"))
                                                (rule "qeq_literals" (formula "30") (term "0,0"))
                                                (builtin "One Step Simplification" (formula "30"))
                                                (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "30"))
                                                (rule "andLeft" (formula "4"))
                                                (rule "inEqSimp_homoInEq1" (formula "4"))
                                                (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                                                (rule "add_literals" (formula "4") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "4") (term "1,0"))
                                                (rule "add_zero_right" (formula "4") (term "0"))
                                                (rule "leq_literals" (formula "4"))
                                                (rule "closeFalse" (formula "4"))
                                             )
                                          )
                                       )
                                    )
                                    (branch "a1[j_0].length >= 1 FALSE"
                                       (rule "eqSymm" (formula "31") (term "0"))
                                       (rule "inEqSimp_geqRight" (formula "30"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_contradEq7" (formula "31") (term "0") (ifseqformula "3"))
                                       (rule "times_zero_1" (formula "31") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "31") (term "0,0,0"))
                                       (rule "leq_literals" (formula "31") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "31"))
                                       (rule "false_right" (formula "31"))
                                       (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                                       (rule "inEqSimp_antiSymm" (formula "4") (ifseqformula "5"))
                                       (rule "applyEq" (formula "5") (term "0") (ifseqformula "4"))
                                       (rule "qeq_literals" (formula "5"))
                                       (rule "true_left" (formula "5"))
                                       (rule "applyEq" (formula "5") (term "0") (ifseqformula "4"))
                                       (rule "leq_literals" (formula "5"))
                                       (rule "true_left" (formula "5"))
                                       (rule "arrayLengthNotNegative" (formula "3") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "4"))
                                       (rule "leq_literals" (formula "3") (term "0"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "arrayLengthIsAShort" (formula "3") (term "0"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "allLeft" (formula "16") (inst "t=j_0"))
                                       (rule "inEqSimp_commuteGeq" (formula "16") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "16") (term "1,0") (ifseqformula "6"))
                                       (rule "qeq_literals" (formula "16") (term "0,1,0"))
                                       (builtin "One Step Simplification" (formula "16"))
                                       (rule "allLeft" (formula "15") (inst "t=j_0"))
                                       (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "15") (term "1,0") (ifseqformula "6"))
                                       (rule "qeq_literals" (formula "15") (term "0,1,0"))
                                       (builtin "One Step Simplification" (formula "15"))
                                       (rule "allLeft" (formula "24") (inst "t=j_0"))
                                       (rule "inEqSimp_contradEq7" (formula "24") (term "1") (ifseqformula "3"))
                                       (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "24") (term "0,0,1"))
                                       (rule "leq_literals" (formula "24") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "24"))
                                       (rule "inEqSimp_contradInEq1" (formula "24") (term "0,0,0") (ifseqformula "6"))
                                       (rule "qeq_literals" (formula "24") (term "0,0,0,0"))
                                       (builtin "One Step Simplification" (formula "24"))
                                       (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "3"))
                                       (rule "qeq_literals" (formula "24") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "24"))
                                       (rule "inEqSimp_contradInEq0" (formula "24") (term "1") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "24") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "24"))
                                       (rule "inEqSimp_antiSymm" (formula "24") (ifseqformula "5"))
                                       (rule "applyEq" (formula "1") (term "0,2,0,0") (ifseqformula "24"))
                                       (rule "applyEqRigid" (formula "16") (term "0,2,0,0,0") (ifseqformula "23"))
                                       (rule "replace_known_right" (formula "16") (term "0,0") (ifseqformula "31"))
                                       (builtin "One Step Simplification" (formula "16"))
                                       (rule "true_left" (formula "16"))
                                       (rule "applyEqRigid" (formula "23") (term "0") (ifseqformula "22"))
                                       (rule "inEqSimp_homoInEq1" (formula "23"))
                                       (rule "polySimp_pullOutFactor1" (formula "23") (term "0"))
                                       (rule "add_literals" (formula "23") (term "1,0"))
                                       (rule "times_zero_1" (formula "23") (term "0"))
                                       (rule "leq_literals" (formula "23"))
                                       (rule "true_left" (formula "23"))
                                       (rule "applyEq" (formula "2") (term "0,2,0,0") (ifseqformula "22"))
                                       (rule "applyEqRigid" (formula "14") (term "1,1") (ifseqformula "22"))
                                       (rule "applyEq" (formula "5") (term "0") (ifseqformula "22"))
                                       (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "21"))
                                       (rule "inEqSimp_homoInEq0" (formula "4"))
                                       (rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
                                       (rule "add_literals" (formula "4") (term "1,0"))
                                       (rule "times_zero_1" (formula "4") (term "0"))
                                       (rule "qeq_literals" (formula "4"))
                                       (rule "true_left" (formula "4"))
                                       (rule "applyEq" (formula "12") (term "0,2,0,0,0") (ifseqformula "20"))
                                       (rule "replace_known_right" (formula "12") (term "0,0") (ifseqformula "26"))
                                       (builtin "One Step Simplification" (formula "12"))
                                       (rule "true_left" (formula "12"))
                                       (rule "applyEq" (formula "2") (term "0") (ifseqformula "3"))
                                       (rule "qeq_literals" (formula "2"))
                                       (rule "closeFalse" (formula "2"))
                                    )
                                 )
                              )
                              (branch "a2[j_0].length >= 1 FALSE"
                                 (rule "eqSymm" (formula "31") (term "0"))
                                 (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "30")))
                                 (rule "replace_known_right" (formula "18") (term "1") (ifseqformula "30"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "inEqSimp_geqRight" (formula "30"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_notGeq" (formula "31") (term "0,0"))
                                 (rule "mul_literals" (formula "31") (term "1,0,0,0,0"))
                                 (rule "add_literals" (formula "31") (term "0,0,0,0"))
                                 (rule "add_zero_left" (formula "31") (term "0,0,0"))
                                 (rule "inEqSimp_or_tautInEq0" (formula "31") (term "0,0,1"))
                                 (rule "add_zero_right" (formula "31") (term "1,1,0,0,1"))
                                 (rule "qeq_literals" (formula "31") (term "1,0,0,1"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "orRight" (formula "31"))
                                 (rule "replace_known_right" (formula "19") (term "1") (ifseqformula "31"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "inEqSimp_leqRight" (formula "31"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                 (rule "mul_literals" (formula "1") (term "1"))
                                 (rule "inEqSimp_contradEq7" (formula "32") (ifseqformula "1"))
                                 (rule "times_zero_1" (formula "32") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "32") (term "0,0"))
                                 (rule "leq_literals" (formula "32") (term "0"))
                                 (builtin "One Step Simplification" (formula "32"))
                                 (rule "false_right" (formula "32"))
                                 (rule "inEqSimp_antiSymm" (formula "20") (ifseqformula "4"))
                                 (rule "applyEq" (formula "4") (term "0") (ifseqformula "20"))
                                 (rule "inEqSimp_homoInEq0" (formula "4"))
                                 (rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
                                 (rule "add_literals" (formula "4") (term "1,0"))
                                 (rule "times_zero_1" (formula "4") (term "0"))
                                 (rule "qeq_literals" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "applyEq" (formula "1") (term "0,2,0,0") (ifseqformula "19"))
                                 (rule "replace_known_left" (formula "28") (term "0,1,1,0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "28"))
                                 (rule "replace_known_left" (formula "29") (term "0,1,1,0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "29"))
                                 (rule "applyEqRigid" (formula "2") (term "0,2,0,0") (ifseqformula "19"))
                                 (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "18"))
                                 (rule "applyEqRigid" (formula "18") (term "0") (ifseqformula "17"))
                                 (rule "inEqSimp_homoInEq1" (formula "18"))
                                 (rule "polySimp_pullOutFactor1" (formula "18") (term "0"))
                                 (rule "add_literals" (formula "18") (term "1,0"))
                                 (rule "times_zero_1" (formula "18") (term "0"))
                                 (rule "leq_literals" (formula "18"))
                                 (rule "true_left" (formula "18"))
                                 (rule "applyEq" (formula "16") (term "1") (ifseqformula "17"))
                                 (rule "inEqSimp_contradEq7" (formula "24") (term "1") (ifseqformula "1"))
                                 (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "24") (term "0,0,1"))
                                 (rule "leq_literals" (formula "24") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "24"))
                                 (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "24"))
                                 (rule "qeq_literals" (formula "1") (term "0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                           )
                        )
                     )
                  )
                  (branch "Exceptional Post (equal)"
                     (builtin "One Step Simplification" (formula "20"))
                     (builtin "One Step Simplification" (formula "23"))
                     (rule "andLeft" (formula "20"))
                     (rule "andLeft" (formula "20"))
                     (rule "andLeft" (formula "22"))
                     (rule "notLeft" (formula "20"))
                     (rule "close" (formula "23") (ifseqformula "22"))
                  )
                  (branch "Pre (equal)"
                     (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "3")))
                     (rule "applyEq" (formula "8") (term "0") (ifseqformula "9"))
                     (rule "applyEq" (formula "1") (term "0") (ifseqformula "8"))
                     (rule "shift_paren_and" (formula "20"))
                     (rule "allLeft" (formula "8") (inst "t=i_0"))
                     (rule "inEqSimp_commuteGeq" (formula "8") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "8") (term "1") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "8") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1"))
                     (rule "add_literals" (formula "8") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "8") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "8") (term "0,0,1"))
                     (rule "leq_literals" (formula "8") (term "0,1"))
                     (builtin "One Step Simplification" (formula "8"))
                     (rule "inEqSimp_contradInEq1" (formula "8") (term "1") (ifseqformula "12"))
                     (rule "qeq_literals" (formula "8") (term "0,1"))
                     (builtin "One Step Simplification" (formula "8"))
                     (rule "notLeft" (formula "8"))
                     (rule "replace_known_right" (formula "21") (term "0,1,0") (ifseqformula "18"))
                     (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "18")))
                     (rule "commute_and" (formula "21") (term "0"))
                     (rule "allLeft" (formula "9") (inst "t=i_0"))
                     (rule "inEqSimp_commuteGeq" (formula "9") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "9") (term "1,0") (ifseqformula "12"))
                     (rule "qeq_literals" (formula "9") (term "0,1,0"))
                     (builtin "One Step Simplification" (formula "9"))
                     (rule "inEqSimp_contradInEq1" (formula "9") (term "1") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "9") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1"))
                     (rule "add_literals" (formula "9") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "9") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "9") (term "0,0,1"))
                     (rule "leq_literals" (formula "9") (term "0,1"))
                     (builtin "One Step Simplification" (formula "9"))
                     (rule "notLeft" (formula "9"))
                     (rule "replace_known_right" (formula "22") (term "0,1,0") (ifseqformula "18"))
                     (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "18")))
                     (rule "cut_direct" (formula "22") (term "1"))
                     (branch "CUT: a2[i_0].<created> = TRUE TRUE"
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "referencedObjectIsCreatedRight" (formula "23") (ifseqformula "20"))
                        (rule "close" (formula "23") (ifseqformula "3"))
                     )
                     (branch "CUT: a2[i_0].<created> = TRUE FALSE"
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "referencedObjectIsCreatedRight" (formula "22") (ifseqformula "18"))
                        (rule "close" (formula "22") (ifseqformula "2"))
                     )
                  )
               )
               (branch "Null Reference (_a2 = null)"
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "Index Out of Bounds (_a2 != null, but i Out of Bounds!)"
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")))
                  (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "1") (term "0,0,1"))
                  (rule "blockThrow" (formula "23") (term "1"))
                  (builtin "One Step Simplification" (formula "23"))
                  (rule "blockThrow" (formula "23") (term "1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "mul_literals" (formula "2") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                  (rule "mul_literals" (formula "1") (term "1,1"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "13"))
                  (rule "qeq_literals" (formula "1") (term "0,1"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "1"))
                  (rule "times_zero_1" (formula "8") (term "0,0"))
                  (rule "add_zero_left" (formula "8") (term "0"))
                  (rule "methodCallEmpty" (formula "22") (term "1,1,0,1,0,1"))
                  (rule "tryCatchThrow" (formula "22") (term "1,0,0,1"))
                  (rule "ifElseUnfold" (formula "22") (term "1,0,0,1") (inst "#boolv=x"))
                  (rule "variableDeclaration" (formula "22") (term "1,0,0,1") (newnames "x_9"))
                  (rule "equality_comparison_simple" (formula "22") (term "1,0,0,1"))
                  (rule "tryEmpty" (formula "22") (term "1,1,0,1,0,1"))
                  (rule "emptyModality" (formula "22") (term "1,1,0,1,0,1"))
                  (builtin "One Step Simplification" (formula "22"))
                  (rule "throwUnfold" (formula "22") (term "1") (inst "#v0=a"))
                  (rule "variableDeclarationAssign" (formula "22") (term "1"))
                  (rule "variableDeclaration" (formula "22") (term "1") (newnames "a"))
                  (rule "unusedLabel" (formula "22") (term "1"))
                  (rule "instanceCreationAssignment" (formula "22") (term "1") (inst "#v0=a_1"))
                  (rule "variableDeclarationAssign" (formula "22") (term "1"))
                  (rule "variableDeclaration" (formula "22") (term "1") (newnames "a_1"))
                  (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "22") (term "1") (inst "#v0=a_2"))
                  (rule "variableDeclaration" (formula "22") (term "1") (newnames "a_2"))
                  (rule "methodBodyExpand" (formula "22") (term "1") (newnames "heapBefore_<createObject>,savedHeapBefore_<createObject>"))
                  (builtin "One Step Simplification" (formula "22"))
                  (rule "variableDeclaration" (formula "22") (term "1") (newnames "__NEW__"))
                  (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "22") (term "1") (inst "#v0=a_3"))
                  (rule "variableDeclaration" (formula "22") (term "1") (newnames "a_3"))
                  (rule "allocateInstance" (formula "22"))
                  (builtin "One Step Simplification" (formula "23"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "notLeft" (formula "2"))
                  (rule "notLeft" (formula "1"))
                  (rule "blockEmpty" (formula "25") (term "1"))
                  (rule "assignment" (formula "25") (term "1"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "methodBodyExpand" (formula "25") (term "1") (newnames "heapBefore_<create>,savedHeapBefore_<create>"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "assignment_write_attribute_this" (formula "25") (term "1"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "methodCallWithinClass" (formula "25") (term "1"))
                  (rule "methodBodyExpand" (formula "25") (term "1") (newnames "heapBefore_<prepareEnter>,savedHeapBefore_<prepareEnter>"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "methodCallSuper" (formula "25") (term "1"))
                  (rule "methodBodyExpand" (formula "25") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "methodCallSuper" (formula "25") (term "1"))
                  (rule "methodBodyExpand" (formula "25") (term "1") (newnames "heapBefore_<prepare>_0,savedHeapBefore_<prepare>_0"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "methodCallSuper" (formula "25") (term "1"))
                  (rule "methodBodyExpand" (formula "25") (term "1") (newnames "heapBefore_<prepare>_1,savedHeapBefore_<prepare>_1"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "methodCallSuper" (formula "25") (term "1"))
                  (rule "methodBodyExpand" (formula "25") (term "1") (newnames "heapBefore_<prepare>_2,savedHeapBefore_<prepare>_2"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "methodCallSuper" (formula "25") (term "1"))
                  (rule "methodBodyExpand" (formula "25") (term "1") (newnames "heapBefore_<prepare>_3,savedHeapBefore_<prepare>_3"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "methodCallEmpty" (formula "25") (term "1"))
                  (rule "blockEmpty" (formula "25") (term "1"))
                  (rule "assignment_write_attribute_this" (formula "25") (term "1"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "castDel" (formula "25") (term "1,0,1,0"))
                  (rule "assignment_write_attribute_this" (formula "25") (term "1"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "castDel" (formula "25") (term "1,0,1,0"))
                  (rule "methodCallEmpty" (formula "25") (term "1"))
                  (rule "methodCallEmpty" (formula "25") (term "1"))
                  (rule "methodCallEmpty" (formula "25") (term "1"))
                  (rule "methodCallEmpty" (formula "25") (term "1"))
                  (rule "methodCallEmpty" (formula "25") (term "1"))
                  (rule "blockEmpty" (formula "25") (term "1"))
                  (rule "methodCallReturnIgnoreResult" (formula "25") (term "1"))
                  (rule "methodCallReturn" (formula "25") (term "1"))
                  (rule "assignment" (formula "25") (term "1"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "methodCallEmpty" (formula "25") (term "1"))
                  (rule "blockEmpty" (formula "25") (term "1"))
                  (rule "assignment" (formula "25") (term "1"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "methodBodyExpand" (formula "25") (term "1") (newnames "heapBefore_<init>,savedHeapBefore_<init>"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "methodCallSuper" (formula "25") (term "1"))
                  (rule "methodBodyExpand" (formula "25") (term "1") (newnames "heapBefore_<init>_0,savedHeapBefore_<init>_0"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "methodCallSuper" (formula "25") (term "1"))
                  (rule "methodBodyExpand" (formula "25") (term "1") (newnames "heapBefore_<init>_1,savedHeapBefore_<init>_1"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "methodCallSuper" (formula "25") (term "1"))
                  (rule "methodBodyExpand" (formula "25") (term "1") (newnames "heapBefore_<init>_2,savedHeapBefore_<init>_2"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "methodCallSuper" (formula "25") (term "1"))
                  (rule "methodBodyExpand" (formula "25") (term "1") (newnames "heapBefore_<init>_3,savedHeapBefore_<init>_3"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "methodCallSuper" (formula "25") (term "1"))
                  (rule "methodBodyExpand" (formula "25") (term "1") (newnames "heapBefore_<init>_4,savedHeapBefore_<init>_4"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "methodCallEmpty" (formula "25") (term "1"))
                  (rule "blockEmpty" (formula "25") (term "1"))
                  (rule "assignment_write_attribute_this" (formula "25") (term "1"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "castDel" (formula "25") (term "1,0,1,0"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "assignment_write_attribute_this" (formula "25") (term "1"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "castDel" (formula "25") (term "1,0,1,0"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "methodCallEmpty" (formula "25") (term "1"))
                  (rule "methodCallEmpty" (formula "25") (term "1"))
                  (rule "methodCallEmpty" (formula "25") (term "1"))
                  (rule "methodCallEmpty" (formula "25") (term "1"))
                  (rule "methodCallEmpty" (formula "25") (term "1"))
                  (rule "blockEmpty" (formula "25") (term "1"))
                  (rule "assignment_write_attribute" (formula "25") (term "1"))
                  (branch "Normal Execution (a_1 != null)"
                     (builtin "One Step Simplification" (formula "26"))
                     (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "21")))
                     (rule "false_right" (formula "25"))
                     (rule "assignment" (formula "25") (term "1"))
                     (builtin "One Step Simplification" (formula "25"))
                     (rule "tryCatchThrow" (formula "25") (term "1"))
                     (rule "ifElseUnfold" (formula "25") (term "1") (inst "#boolv=x"))
                     (rule "variableDeclaration" (formula "25") (term "1") (newnames "x_10"))
                     (rule "equality_comparison_simple" (formula "25") (term "1"))
                     (builtin "One Step Simplification" (formula "25"))
                     (rule "replace_known_right" (formula "25") (term "0,0,1,0") (ifseqformula "21"))
                     (builtin "One Step Simplification" (formula "25"))
                     (rule "ifElseSplit" (formula "25"))
                     (branch "if x_10 true"
                        (builtin "One Step Simplification" (formula "26"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "if x_10 false"
                        (builtin "One Step Simplification" (formula "26"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "ifElseSplit" (formula "25"))
                        (branch "if a instanceof java.lang.Throwable true"
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")))
                           (rule "true_left" (formula "1"))
                           (rule "variableDeclaration" (formula "25") (term "1") (newnames "e"))
                           (rule "reference_type_cast" (formula "25") (term "1"))
                           (branch "Normal Execution (a instanceof java.lang.Throwable)"
                              (builtin "One Step Simplification" (formula "26"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "assignment" (formula "25") (term "1"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "assignment" (formula "25") (term "1"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "methodCallEmpty" (formula "25") (term "1"))
                              (rule "emptyModality" (formula "25") (term "1"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "replace_known_right" (formula "25") (term "0,0,1,0") (ifseqformula "21"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "ifElseSplit" (formula "25"))
                              (branch "if x_9 true"
                                 (builtin "One Step Simplification" (formula "26"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "if x_9 false"
                                 (builtin "One Step Simplification" (formula "26"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "ifElseSplit" (formula "25"))
                                 (branch "if thrownExc instanceof java.lang.Throwable true"
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")))
                                    (rule "true_left" (formula "1"))
                                    (rule "variableDeclaration" (formula "25") (term "1") (newnames "e_1"))
                                    (rule "reference_type_cast" (formula "25") (term "1"))
                                    (branch "Normal Execution (thrownExc instanceof java.lang.Throwable)"
                                       (builtin "One Step Simplification" (formula "26"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "assignment" (formula "25") (term "1"))
                                       (builtin "One Step Simplification" (formula "25"))
                                       (rule "emptyModality" (formula "25") (term "1"))
                                       (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "21")))
                                       (rule "false_right" (formula "25"))
                                       (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                                       (rule "applyEq" (formula "2") (term "0") (ifseqformula "9"))
                                       (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "2"))
                                       (rule "andLeft" (formula "3"))
                                       (rule "inEqSimp_homoInEq1" (formula "3"))
                                       (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                       (rule "add_literals" (formula "3") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "3") (term "1,0"))
                                       (rule "add_zero_right" (formula "3") (term "0"))
                                       (rule "leq_literals" (formula "3"))
                                       (rule "closeFalse" (formula "3"))
                                    )
                                    (branch "ClassCastException (!(thrownExc instanceof java.lang.Throwable))"
                                       (builtin "One Step Simplification" (formula "26"))
                                       (builtin "One Step Simplification" (formula "25"))
                                       (rule "closeTrue" (formula "25"))
                                    )
                                 )
                                 (branch "if thrownExc instanceof java.lang.Throwable false"
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")))
                                    (rule "closeFalse" (formula "1"))
                                 )
                              )
                           )
                           (branch "ClassCastException (!(a instanceof java.lang.Throwable))"
                              (builtin "One Step Simplification" (formula "26"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "closeTrue" (formula "25"))
                           )
                        )
                        (branch "if a instanceof java.lang.Throwable false"
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                  )
                  (branch "Null Reference (a_1 = null)"
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")))
                     (rule "closeFalse" (formula "1"))
                  )
               )
            )
            (branch "Null Reference (_a1 = null)"
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
               (rule "closeFalse" (formula "1"))
            )
            (branch "Index Out of Bounds (_a1 != null, but i Out of Bounds!)"
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
               (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "1") (term "0,0,1"))
               (rule "blockThrow" (formula "22") (term "1"))
               (rule "blockThrow" (formula "22") (term "1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
               (rule "mul_literals" (formula "1") (term "1,1"))
               (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "13"))
               (rule "qeq_literals" (formula "1") (term "0,1"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
               (rule "andLeft" (formula "1"))
               (rule "inEqSimp_homoInEq1" (formula "1"))
               (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "1,1,0"))
               (rule "times_zero_1" (formula "1") (term "1,0"))
               (rule "add_literals" (formula "1") (term "0"))
               (rule "leq_literals" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "if x_4 false"
            (builtin "One Step Simplification" (formula "22"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "Null Reference (_a1 = null)"
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Null Reference (_a1 = null)"
      (builtin "One Step Simplification" (formula "15"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Use Case"
   (builtin "One Step Simplification" (formula "9"))
   (builtin "One Step Simplification" (formula "12"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "eqSymm" (formula "12") (term "1,0"))
   (rule "eqSymm" (formula "11"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "9"))
   (rule "inEqSimp_commuteLeq" (formula "10"))
   (rule "variableDeclarationAssign" (formula "14") (term "1"))
   (rule "variableDeclaration" (formula "14") (term "1") (newnames "b_1"))
   (rule "blockEmpty" (formula "14") (term "1,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
   (rule "array2seqDef" (formula "11") (term "1,1,0") (inst "u=u"))
   (rule "eqSymm" (formula "11") (term "1,0"))
   (rule "array2seqDef" (formula "11") (term "1,1,0") (inst "u=u"))
   (rule "eqSymm" (formula "11") (term "1,0"))
   (rule "eqSeqDef" (formula "11") (term "1,0") (inst "iv=iv"))
   (rule "lenOfSeqDef" (formula "11") (term "0,0,1,0"))
   (rule "eqSymm" (formula "11") (term "0,1,0"))
   (rule "polySimp_elimSub" (formula "11") (term "1,1,0,1,0"))
   (rule "mul_literals" (formula "11") (term "1,1,1,0,1,0"))
   (rule "add_zero_right" (formula "11") (term "1,1,0,1,0"))
   (rule "getOfSeqDef" (formula "11") (term "0,1,0,1,1,0"))
   (rule "castDel" (formula "11") (term "2,0,1,0,1,1,0"))
   (rule "castDel" (formula "11") (term "1,0,1,0,1,1,0"))
   (rule "add_zero_right" (formula "11") (term "0,2,1,0,1,0,1,1,0"))
   (rule "eqSymm" (formula "11") (term "1,0,1,1,0"))
   (rule "polySimp_elimSub" (formula "11") (term "1,1,0,1,1,0,1,1,0"))
   (rule "mul_literals" (formula "11") (term "1,1,1,0,1,1,0,1,1,0"))
   (rule "add_zero_right" (formula "11") (term "1,1,0,1,1,0,1,1,0"))
   (rule "lenOfSeqDef" (formula "11") (term "1,1,0,0,1,1,0"))
   (rule "polySimp_elimSub" (formula "11") (term "1,1,1,0,0,1,1,0"))
   (rule "mul_literals" (formula "11") (term "1,1,1,1,0,0,1,1,0"))
   (rule "add_zero_right" (formula "11") (term "1,1,1,0,0,1,1,0"))
   (rule "lenOfSeqDef" (formula "11") (term "0,0,1,0"))
   (rule "eqSymm" (formula "11") (term "0,1,0"))
   (rule "polySimp_elimSub" (formula "11") (term "1,1,0,1,0"))
   (rule "mul_literals" (formula "11") (term "1,1,1,0,1,0"))
   (rule "add_zero_right" (formula "11") (term "1,1,0,1,0"))
   (rule "getOfSeqDef" (formula "11") (term "0,1,0,1,1,0"))
   (rule "castDel" (formula "11") (term "2,0,1,0,1,1,0"))
   (rule "castDel" (formula "11") (term "1,0,1,0,1,1,0"))
   (rule "add_zero_right" (formula "11") (term "0,2,1,0,1,0,1,1,0"))
   (rule "eqSymm" (formula "11") (term "1,0,1,1,0"))
   (rule "polySimp_elimSub" (formula "11") (term "1,1,0,1,1,0,1,1,0"))
   (rule "mul_literals" (formula "11") (term "1,1,1,0,1,1,0,1,1,0"))
   (rule "add_zero_right" (formula "11") (term "1,1,0,1,1,0,1,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1,1,0,0,1,1,0"))
   (rule "add_zero_right" (formula "11") (term "0,0,1,1,0,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,1,0,0,1,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1,0,1,0"))
   (rule "add_zero_right" (formula "11") (term "0,0,1,0,1,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,1,0"))
   (rule "add_zero_right" (formula "11") (term "0,0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0,1,1,0"))
   (rule "eqSymm" (formula "11") (term "1,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,1,1,0,1,1,0"))
   (rule "polySimp_addComm1" (formula "11") (term "0,1,0,1,1,0,1,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,1,1,0"))
   (rule "polySimp_addComm1" (formula "11") (term "0,1,0,0,1,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0,1,1,0"))
   (rule "eqSymm" (formula "11") (term "1,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,1,1,0,1,1,0"))
   (rule "polySimp_addComm1" (formula "11") (term "0,1,0,1,1,0,1,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,0,1,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,1,1,0,1,1,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,1,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "0,0,1,0,1,0"))
   (rule "polySimp_elimOne" (formula "11") (term "0,0,1,0,1,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "11") (term "0,0,0,0,1,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,0,1,0,1,0,0,1,1,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,1,0,1,0,0,1,1,0"))
   (rule "polySimp_elimOne" (formula "11") (term "0,0,0,1,0,1,0,0,1,1,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "1,0,0,1,0,1,1,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0,0,1,0,1,1,0"))
   (rule "eqSymm" (formula "11") (term "1,0,1,1,0"))
   (rule "polySimp_elimOne" (formula "11") (term "0,1,0,1,1,0,1,1,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "1,0,0,1,1,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0,0,1,1,0"))
   (rule "polySimp_elimOne" (formula "11") (term "0,1,0,0,1,1,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "1,0,0,1,0,1,1,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0,0,1,0,1,1,0"))
   (rule "eqSymm" (formula "11") (term "1,0,1,1,0"))
   (rule "polySimp_elimOne" (formula "11") (term "0,1,0,1,1,0,1,1,0"))
   (rule "nnf_imp2or" (formula "11") (term "0"))
   (rule "nnf_notAnd" (formula "11") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
   (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
   (rule "mul_literals" (formula "11") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
   (rule "nnf_imp2or" (formula "11") (term "0,1,1,0"))
   (rule "nnf_notAnd" (formula "11") (term "0,0,1,1,0"))
   (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0,1,1,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,1,1,0"))
   (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,1,1,0"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,1,1,0"))
   (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,1,1,0"))
   (rule "add_zero_left" (formula "11") (term "0,0,1,0,0,1,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,1,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,1,1,0"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,1,1,0"))
   (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,1,1,0"))
   (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,1,1,0"))
   (rule "add_zero_right" (formula "11") (term "0,0,0,0,0,1,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,1,0"))
   (rule "mul_literals" (formula "11") (term "1,0,0,0,1,1,0"))
   (rule "compound_less_than_comparison_2" (formula "14") (term "1") (inst "#v1=x_1") (inst "#v0=x"))
   (rule "variableDeclarationAssign" (formula "14") (term "1"))
   (rule "variableDeclaration" (formula "14") (term "1") (newnames "x"))
   (rule "assignment" (formula "14") (term "1"))
   (builtin "One Step Simplification" (formula "14"))
   (rule "variableDeclarationAssign" (formula "14") (term "1"))
   (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_1"))
   (rule "assignment_read_length" (formula "14") (term "1"))
   (branch "Normal Execution (_a1 != null)"
      (builtin "One Step Simplification" (formula "15"))
      (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "12")))
      (rule "false_right" (formula "14"))
      (rule "commute_or_2" (formula "11") (term "0,1,1,0"))
      (rule "commute_or" (formula "11") (term "0,0,1,1,0"))
      (rule "arrayLengthIsAShort" (formula "5") (term "0"))
      (builtin "One Step Simplification" (formula "5"))
      (rule "true_left" (formula "5"))
      (rule "arrayLengthIsAShort" (formula "5") (term "1"))
      (builtin "One Step Simplification" (formula "5"))
      (rule "true_left" (formula "5"))
      (rule "arrayLengthNotNegative" (formula "5") (term "0"))
      (rule "ifthenelse_to_or_right" (formula "12") (term "0,1,0"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "inEqSimp_notGeq" (formula "12") (term "0,1,1,0,1,0"))
      (rule "mul_literals" (formula "12") (term "1,0,0,0,1,1,0,1,0"))
      (rule "add_literals" (formula "12") (term "0,0,0,1,1,0,1,0"))
      (rule "add_zero_left" (formula "12") (term "0,0,1,1,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,1,0"))
      (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0,1,0"))
      (rule "add_literals" (formula "12") (term "0,0,0,0,0,1,0"))
      (rule "add_zero_left" (formula "12") (term "0,0,0,0,1,0"))
      (rule "shift_paren_or" (formula "12") (term "1,0,1,0"))
      (rule "arrayLengthNotNegative" (formula "6") (term "1"))
      (rule "less_than_comparison_simple" (formula "16") (term "1"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "16") (term "0,0,0,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "16") (term "0,0,0,1,0"))
      (rule "methodCallEmpty" (formula "16") (term "1"))
      (rule "emptyModality" (formula "16") (term "1"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "impRight" (formula "16"))
      (rule "notLeft" (formula "1"))
      (rule "inEqSimp_geqRight" (formula "14"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1"))
      (rule "polySimp_elimOne" (formula "1") (term "1"))
      (rule "inEqSimp_antiSymm" (formula "13") (ifseqformula "1"))
      (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "1"))
      (rule "mul_literals" (formula "7") (term "0,0"))
      (rule "add_zero_left" (formula "7") (term "0"))
      (rule "methodCallReturn" (formula "18") (term "1"))
      (rule "assignment" (formula "18") (term "1"))
      (builtin "One Step Simplification" (formula "18"))
      (rule "methodCallEmpty" (formula "18") (term "1"))
      (rule "tryEmpty" (formula "18") (term "1"))
      (rule "emptyModality" (formula "18") (term "1"))
      (builtin "One Step Simplification" (formula "18"))
      (rule "array2seq2dDef" (formula "18") (term "0") (inst "u=u") (userinteraction))
      (rule "array2seq2dDef" (formula "18") (term "1") (inst "u=u") (userinteraction))
      (rule "applyEq" (formula "6") (term "0") (ifseqformula "8"))
      (rule "applyEq" (formula "17") (term "1,0") (ifseqformula "7"))
      (rule "applyEq" (formula "9") (term "1,1,0") (ifseqformula "12"))
      (rule "applyEq" (formula "6") (term "0") (ifseqformula "12"))
      (rule "applyEq" (formula "12") (term "0") (ifseqformula "11"))
      (rule "inEqSimp_homoInEq1" (formula "12"))
      (rule "polySimp_pullOutFactor1" (formula "12") (term "0"))
      (rule "add_literals" (formula "12") (term "1,0"))
      (rule "times_zero_1" (formula "12") (term "0"))
      (rule "leq_literals" (formula "12"))
      (rule "true_left" (formula "12"))
      (rule "applyEq" (formula "1") (term "0") (ifseqformula "11"))
      (rule "inEqSimp_homoInEq0" (formula "1"))
      (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
      (rule "add_literals" (formula "1") (term "1,0"))
      (rule "times_zero_1" (formula "1") (term "0"))
      (rule "qeq_literals" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "applyEq" (formula "6") (term "1,1,0") (ifseqformula "10"))
      (rule "applyEq" (formula "14") (term "1,0") (ifseqformula "10"))
      (rule "eqSymm" (formula "14"))
      (rule "applyEq" (formula "14") (term "1,0") (ifseqformula "10"))
      (rule "eqSymm" (formula "14"))
      (rule "applyEq" (formula "5") (term "1") (ifseqformula "10"))
      (rule "array2seqDef" (formula "14") (term "2,0") (inst "u=u_1"))
      (rule "array2seqDef" (formula "14") (term "2,1") (inst "u=u_1"))
      (rule "eqSeqDef" (formula "14") (inst "iv=iv"))
      (rule "lenOfSeqDef" (formula "14") (term "0,0"))
      (rule "eqSymm" (formula "14") (term "0"))
      (rule "polySimp_elimSub" (formula "14") (term "1,1,0"))
      (rule "times_zero_2" (formula "14") (term "1,1,1,0"))
      (rule "add_zero_right" (formula "14") (term "1,1,0"))
      (rule "getOfSeqDef" (formula "14") (term "0,1,0,1"))
      (rule "castDel" (formula "14") (term "1,0,1,0,1"))
      (rule "castDel" (formula "14") (term "2,0,1,0,1"))
      (rule "add_zero_right" (formula "14") (term "0,2,1,2,1,0,1,0,1"))
      (rule "add_zero_right" (formula "14") (term "0,2,0,1,1,0,1,0,1"))
      (rule "polySimp_elimSub" (formula "14") (term "1,1,0,0,1,0,1"))
      (rule "times_zero_2" (formula "14") (term "1,1,1,0,0,1,0,1"))
      (rule "add_zero_right" (formula "14") (term "1,1,0,0,1,0,1"))
      (rule "getOfSeqDef" (formula "14") (term "1,1,0,1"))
      (rule "castDel" (formula "14") (term "1,1,1,0,1"))
      (rule "castDel" (formula "14") (term "2,1,1,0,1"))
      (rule "add_zero_right" (formula "14") (term "0,2,0,1,1,1,1,0,1"))
      (rule "add_zero_right" (formula "14") (term "0,2,1,2,1,1,1,0,1"))
      (rule "eqSymm" (formula "14") (term "1,0,1"))
      (rule "polySimp_elimSub" (formula "14") (term "1,1,0,0,1,0,1"))
      (rule "times_zero_2" (formula "14") (term "1,1,1,0,0,1,0,1"))
      (rule "add_zero_right" (formula "14") (term "1,1,0,0,1,0,1"))
      (rule "eqSymm" (formula "14") (term "1,0,1"))
      (rule "lenOfSeqDef" (formula "14") (term "1,1,0,0,1"))
      (rule "polySimp_elimSub" (formula "14") (term "1,1,1,0,0,1"))
      (rule "times_zero_2" (formula "14") (term "1,1,1,1,0,0,1"))
      (rule "add_zero_right" (formula "14") (term "1,1,1,0,0,1"))
      (rule "lenOfSeqDef" (formula "14") (term "0,0"))
      (rule "polySimp_elimSub" (formula "14") (term "1,0,0"))
      (rule "times_zero_2" (formula "14") (term "1,1,0,0"))
      (rule "add_zero_right" (formula "14") (term "1,0,0"))
      (builtin "One Step Simplification" (formula "14"))
      (rule "allRight" (formula "14") (inst "sk=iv_6"))
      (rule "impRight" (formula "14"))
      (rule "andLeft" (formula "1"))
      (rule "replace_known_left" (formula "16") (term "0,0,0") (ifseqformula "1"))
      (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "1")))
      (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1"))
      (rule "add_zero_right" (formula "2") (term "0,0,1"))
      (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0"))
      (rule "eqSymm" (formula "16"))
      (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "2"))
      (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "2") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0"))
      (rule "eqSymm" (formula "16"))
      (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
      (rule "polySimp_elimOne" (formula "2") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0"))
      (rule "eqSymm" (formula "16"))
      (rule "polySimp_mulComm0" (formula "16") (term "1,0,1"))
      (rule "polySimp_rightDist" (formula "16") (term "1,0,1"))
      (rule "mul_literals" (formula "16") (term "0,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,1"))
      (rule "polySimp_elimOne" (formula "16") (term "1,1,0,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
      (rule "polySimp_elimOne" (formula "2") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0"))
      (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "16") (term "1,0,0"))
      (rule "mul_literals" (formula "16") (term "0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
      (rule "eqSymm" (formula "16"))
      (rule "ifthenelse_to_or_left" (formula "13") (term "1,0,0,1,0"))
      (rule "eqSymm" (formula "13") (term "1,1,1,0,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "13") (term "0,0,1,0,0,1,0"))
      (rule "mul_literals" (formula "13") (term "1,0,0,0,0,1,0,0,1,0"))
      (rule "add_literals" (formula "13") (term "0,0,0,0,1,0,0,1,0"))
      (rule "add_zero_left" (formula "13") (term "0,0,0,1,0,0,1,0"))
      (rule "commute_or" (formula "13") (term "1,1,0,0,1,0"))
      (rule "ifthenelse_to_or_left" (formula "13") (term "0,0,0,1,1,0"))
      (rule "eqSymm" (formula "13") (term "1,1,0,0,0,1,1,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "eqSymm" (formula "13") (term "1,0,0,0,0,1,1,0"))
      (rule "nnf_notAnd" (formula "13") (term "0,0,0,0,0,1,1,0"))
      (rule "inEqSimp_notGeq" (formula "13") (term "1,0,0,0,0,0,1,1,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
      (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,0,0,0,1,1,0"))
      (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0,0,0,1,1,0"))
      (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0,0,0,1,1,0"))
      (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,0,0,0,1,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0,0,0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0,1,1,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0,1,1,0"))
      (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,0,0,0,1,1,0"))
      (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
      (rule "add_literals" (formula "13") (term "0,0,0,0,0,0,0,0,1,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0,0,1,1,0"))
      (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,0,1,1,0"))
      (rule "nnf_notAnd" (formula "13") (term "0,1,1,0,0,0,1,1,0"))
      (rule "inEqSimp_notGeq" (formula "13") (term "0,0,1,1,0,0,0,1,1,0"))
      (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,1,1,0,0,0,1,1,0"))
      (rule "add_literals" (formula "13") (term "0,0,0,0,1,1,0,0,0,1,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,1,1,0,0,0,1,1,0"))
      (rule "mul_literals" (formula "13") (term "1,0,0,1,1,0,0,0,1,1,0"))
      (rule "inEqSimp_notGeq" (formula "13") (term "1,0,1,1,0,0,0,1,1,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,1,1,0,0,0,1,1,0"))
      (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,1,1,0,0,0,1,1,0"))
      (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
      (rule "add_literals" (formula "13") (term "0,0,0,1,0,1,1,0,0,0,1,1,0"))
      (rule "add_zero_left" (formula "13") (term "0,0,1,0,1,1,0,0,0,1,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,1,1,0,0,0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,1,1,0,0,0,1,1,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1,0,1,1,0,0,0,1,1,0"))
      (rule "cnf_rightDist" (formula "13") (term "0,0,1,0"))
      (rule "commute_or" (formula "13") (term "0,0,1,1,0"))
      (rule "commute_or_2" (formula "13") (term "0,1,1,0"))
      (rule "commute_or_2" (formula "13") (term "1,0,0,1,0"))
      (rule "inEqSimp_or_subsumption4" (formula "13") (term "0,1,0,0,1,0"))
      (rule "greater_literals" (formula "13") (term "0,0,0,1,0,0,1,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "commute_or_2" (formula "13") (term "0,1,0,1,1,0"))
      (rule "commute_or" (formula "13") (term "1,1,0,1,1,0"))
      (rule "shift_paren_or" (formula "13") (term "0,0,0,1,0"))
      (rule "commute_or" (formula "13") (term "0,0,1,0,1,1,0"))
      (rule "commute_or_2" (formula "13") (term "0,1,1,0,1,1,0"))
      (rule "commute_or" (formula "13") (term "0,0,1,1,0,1,1,0"))
      (rule "cnf_rightDist" (formula "13") (term "1,1,0,1,1,0"))
      (rule "commute_or_2" (formula "13") (term "0,1,1,0,1,1,0"))
      (rule "inEqSimp_or_tautInEq1" (formula "13") (term "0,0,1,1,0,1,1,0"))
      (rule "add_zero_right" (formula "13") (term "1,1,0,0,1,1,0,1,1,0"))
      (rule "qeq_literals" (formula "13") (term "1,0,0,1,1,0,1,1,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "commute_or" (formula "13") (term "1,1,0,1,1,0"))
      (rule "cnf_rightDist" (formula "13") (term "0,1,1,0"))
      (rule "commute_or_2" (formula "13") (term "0,0,1,1,0"))
      (rule "shift_paren_or" (formula "13") (term "1,0,1,1,0"))
      (rule "commute_or_2" (formula "13") (term "0,1,0,1,1,0"))
      (rule "shift_paren_or" (formula "13") (term "0,0,0,1,1,0"))
      (rule "commute_or_2" (formula "13") (term "0,0,1,0,1,1,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "shift_paren_or" (formula "13") (term "0,0,0,0,1,1,0"))
      (rule "commute_or" (formula "13") (term "0,0,0,0,0,1,1,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "ifthenelse_split" (formula "16") (term "1"))
      (branch "iv_6 <= -1 + i_0 TRUE"
         (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "1"))
         (builtin "One Step Simplification" (formula "17"))
         (rule "equalityToSeqGetAndSeqLenRight" (formula "17") (inst "iv=iv"))
         (rule "lenOfSeqDef" (formula "17") (term "1,1,0,0,1"))
         (rule "polySimp_elimSub" (formula "17") (term "1,1,1,0,0,1"))
         (rule "mul_literals" (formula "17") (term "1,1,1,1,0,0,1"))
         (rule "add_zero_right" (formula "17") (term "1,1,1,0,0,1"))
         (rule "lenOfSeqDef" (formula "17") (term "0,0"))
         (rule "eqSymm" (formula "17") (term "0"))
         (rule "polySimp_elimSub" (formula "17") (term "1,1,0"))
         (rule "times_zero_2" (formula "17") (term "1,1,1,0"))
         (rule "add_zero_right" (formula "17") (term "1,1,0"))
         (rule "getOfSeqDef" (formula "17") (term "0,1,0,1"))
         (rule "castDel" (formula "17") (term "1,0,1,0,1"))
         (rule "castDel" (formula "17") (term "2,0,1,0,1"))
         (rule "add_zero_right" (formula "17") (term "0,2,1,0,1,0,1"))
         (rule "eqSymm" (formula "17") (term "1,0,1"))
         (rule "polySimp_elimSub" (formula "17") (term "1,1,0,1,1,0,1"))
         (rule "times_zero_2" (formula "17") (term "1,1,1,0,1,1,0,1"))
         (rule "add_zero_right" (formula "17") (term "1,1,0,1,1,0,1"))
         (rule "lenOfSeqDef" (formula "17") (term "0,0"))
         (rule "eqSymm" (formula "17") (term "0"))
         (rule "polySimp_elimSub" (formula "17") (term "1,1,0"))
         (rule "times_zero_2" (formula "17") (term "1,1,1,0"))
         (rule "add_zero_right" (formula "17") (term "1,1,0"))
         (rule "getOfSeqDef" (formula "17") (term "0,1,0,1"))
         (rule "castDel" (formula "17") (term "2,0,1,0,1"))
         (rule "castDel" (formula "17") (term "1,0,1,0,1"))
         (rule "add_zero_right" (formula "17") (term "0,2,1,0,1,0,1"))
         (rule "eqSymm" (formula "17") (term "1,0,1"))
         (rule "polySimp_elimSub" (formula "17") (term "1,1,0,1,1,0,1"))
         (rule "times_zero_2" (formula "17") (term "1,1,1,0,1,1,0,1"))
         (rule "add_zero_right" (formula "17") (term "1,1,0,1,1,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "17") (term "0,1,1,0,0,1"))
         (rule "add_zero_right" (formula "17") (term "0,0,1,1,0,0,1"))
         (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,1,0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "17") (term "0,1,0"))
         (rule "add_zero_right" (formula "17") (term "0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0"))
         (rule "add_zero_right" (formula "17") (term "0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1,0,1"))
         (rule "eqSymm" (formula "17") (term "1,0,1"))
         (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,1,1,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1"))
         (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1,0,1"))
         (rule "eqSymm" (formula "17") (term "1,0,1"))
         (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,1,1,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,1,1,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1,0,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,1,0"))
         (rule "polySimp_mulLiterals" (formula "17") (term "0,0,1,0"))
         (rule "polySimp_elimOne" (formula "17") (term "0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0,0"))
         (rule "polySimp_elimOne" (formula "17") (term "0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1"))
         (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,1"))
         (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,1"))
         (rule "mul_literals" (formula "17") (term "0,1,1,0,0,1"))
         (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1,0,1"))
         (rule "eqSymm" (formula "17") (term "1,0,1"))
         (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,1,1,0,1"))
         (rule "polySimp_rightDist" (formula "17") (term "1,1,0,1,1,0,1"))
         (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,1,1,0,1"))
         (rule "mul_literals" (formula "17") (term "0,1,1,0,1,1,0,1"))
         (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,1,1,0,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,1,1,1,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "17") (term "0,0,1,1,1,0,0,1"))
         (rule "polySimp_elimOne" (formula "17") (term "0,0,1,1,1,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1,0,1"))
         (rule "eqSymm" (formula "17") (term "1,0,1"))
         (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,1,1,0,1"))
         (rule "polySimp_rightDist" (formula "17") (term "1,1,0,1,1,0,1"))
         (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,1,1,0,1"))
         (rule "mul_literals" (formula "17") (term "0,1,1,0,1,1,0,1"))
         (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,1,1,0,1"))
         (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
         (rule "times_zero_1" (formula "2") (term "0,0"))
         (rule "add_zero_left" (formula "2") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "2"))
         (rule "mul_literals" (formula "2") (term "1"))
         (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "2"))
         (builtin "One Step Simplification" (formula "4"))
         (rule "inEqSimp_homoInEq1" (formula "4"))
         (rule "polySimp_addComm1" (formula "4") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "4"))
         (rule "polySimp_mulComm0" (formula "4") (term "1"))
         (rule "polySimp_rightDist" (formula "4") (term "1"))
         (rule "mul_literals" (formula "4") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
         (rule "polySimp_elimOne" (formula "4") (term "1,1"))
         (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "2"))
         (rule "leq_literals" (formula "12") (term "0"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "true_left" (formula "12"))
         (rule "nnf_imp2or" (formula "16") (term "0,1"))
         (rule "nnf_notAnd" (formula "16") (term "0,0,1"))
         (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0,1"))
         (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0,1"))
         (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0,1"))
         (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,1"))
         (rule "add_literals" (formula "16") (term "0,0,0,1,0,0,1"))
         (rule "add_zero_left" (formula "16") (term "0,0,1,0,0,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,1"))
         (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,1"))
         (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0,1"))
         (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0,1"))
         (rule "add_zero_right" (formula "16") (term "0,0,0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,1"))
         (rule "mul_literals" (formula "16") (term "1,0,0,0,1"))
         (rule "all_pull_out1" (formula "13") (term "1,0"))
         (rule "shift_paren_and" (formula "13") (term "0,1,0"))
         (rule "ifthenelse_split" (formula "16") (term "1,0"))
         (branch "a1[iv_6].length >= 1 TRUE"
            (rule "ifthenelse_split" (formula "17") (term "0,0"))
            (branch "a2[iv_6].length >= 1 TRUE"
               (rule "replace_known_left" (formula "18") (term "0,1,1,0,0,1") (ifseqformula "1"))
               (builtin "One Step Simplification" (formula "18"))
               (rule "all_pull_out3" (formula "15") (term "0"))
               (rule "cnf_rightDist" (formula "15") (term "0,0"))
               (rule "distr_forallAnd" (formula "15") (term "0"))
               (rule "distr_forallAnd" (formula "15"))
               (rule "andLeft" (formula "15"))
               (rule "commute_or_2" (formula "16") (term "0,0"))
               (rule "commute_or_2" (formula "16") (term "0,0,0"))
               (rule "commute_or_2" (formula "16") (term "0,0,0,0"))
               (rule "cnf_rightDist" (formula "15") (term "0,0"))
               (rule "distr_forallAnd" (formula "15") (term "0"))
               (builtin "One Step Simplification" (formula "15"))
               (rule "distr_forallAnd" (formula "15"))
               (rule "andLeft" (formula "15"))
               (rule "commute_or_2" (formula "16") (term "0,0"))
               (rule "commute_or_2" (formula "16") (term "0,0,0"))
               (rule "cnf_rightDist" (formula "15") (term "0"))
               (rule "distr_forallAnd" (formula "15"))
               (rule "andLeft" (formula "15"))
               (rule "commute_or_2" (formula "16") (term "0"))
               (rule "commute_or_2" (formula "16") (term "0,0"))
               (rule "commute_or" (formula "16") (term "0,0,0"))
               (rule "cnf_rightDist" (formula "15") (term "0"))
               (rule "distr_forallAnd" (formula "15"))
               (rule "andLeft" (formula "15"))
               (rule "commute_or_2" (formula "16") (term "0"))
               (rule "shift_paren_or" (formula "15") (term "0"))
               (rule "commute_or" (formula "16") (term "0,0"))
               (rule "shift_paren_or" (formula "15") (term "0,0"))
               (rule "shift_paren_or" (formula "18") (term "0,0,0,0"))
               (rule "shift_paren_or" (formula "19") (term "0,0,0,0,0"))
               (rule "allLeft" (formula "12") (inst "t=iv_6"))
               (rule "inEqSimp_contradInEq0" (formula "12") (term "1") (ifseqformula "3"))
               (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1"))
               (rule "mul_literals" (formula "12") (term "0,1,0,0,1"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,0,1"))
               (rule "polySimp_addComm0" (formula "12") (term "0,0,0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
               (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "12") (term "0,0,1"))
               (rule "leq_literals" (formula "12") (term "0,1"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "5"))
               (rule "qeq_literals" (formula "12") (term "0,1"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "notLeft" (formula "12"))
               (rule "narrowSelectArrayType" (formula "23") (term "1,0,1,0,1") (ifseqformula "6") (ifseqformula "20"))
               (rule "allLeft" (formula "11") (inst "t=iv_6"))
               (rule "inEqSimp_contradInEq0" (formula "11") (term "1") (ifseqformula "3"))
               (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1"))
               (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1"))
               (rule "mul_literals" (formula "11") (term "0,1,0,0,1"))
               (rule "polySimp_addAssoc" (formula "11") (term "0,0,1"))
               (rule "polySimp_addComm0" (formula "11") (term "0,0,0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1"))
               (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "11") (term "0,0,1"))
               (rule "leq_literals" (formula "11") (term "0,1"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "inEqSimp_contradInEq1" (formula "11") (term "1") (ifseqformula "5"))
               (rule "qeq_literals" (formula "11") (term "0,1"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "notLeft" (formula "11"))
               (rule "narrowSelectArrayType" (formula "24") (term "1,1,1,0,1") (ifseqformula "6") (ifseqformula "20"))
               (rule "ifthenelse_to_or_left" (formula "18") (term "0,0,0,0,0,0,0"))
               (rule "eqSymm" (formula "18") (term "1,0,0,0,0,0,0,0,0"))
               (rule "eqSymm" (formula "18") (term "1,1,0,0,0,0,0,0,0"))
               (rule "nnf_notAnd" (formula "18") (term "0,0,0,0,0,0,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "18") (term "1,0,0,0,0,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,0,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,0,0,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
               (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,0,0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "18") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,0,0,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0,0,0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0,0,0,0,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0,0,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "18") (term "1,0,0,0,0,0,0,0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "18") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,0,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "18") (term "1,0,0,0,0,0,0,0,0,0,0"))
               (rule "commute_or" (formula "18") (term "0,0,0,0,0,0"))
               (rule "commute_or_2" (formula "18") (term "0,0,0,0,0"))
               (rule "commute_or_2" (formula "18") (term "0,0,0,0"))
               (rule "commute_or_2" (formula "18") (term "0,0,0"))
               (rule "commute_or_2" (formula "18") (term "0,0"))
               (rule "commute_or" (formula "18") (term "1,1,0,0"))
               (rule "commute_or_2" (formula "18") (term "0,1,0,0"))
               (rule "commute_or" (formula "18") (term "0,0,1,0,0"))
               (rule "cnf_rightDist" (formula "18") (term "1,1,0,0"))
               (rule "cnf_rightDist" (formula "18") (term "0,0"))
               (rule "distr_forallAnd" (formula "18") (term "0"))
               (rule "distr_forallAnd" (formula "18"))
               (rule "andLeft" (formula "18"))
               (rule "commute_or" (formula "19") (term "0,0"))
               (rule "commute_or_2" (formula "18") (term "0,0"))
               (rule "commute_or_2" (formula "18") (term "0,0,0"))
               (rule "commute_or" (formula "19") (term "1,1,0,0"))
               (rule "cnf_rightDist" (formula "19") (term "0,0"))
               (rule "distr_forallAnd" (formula "19") (term "0"))
               (rule "distr_forallAnd" (formula "19"))
               (rule "andLeft" (formula "19"))
               (rule "commute_or_2" (formula "19") (term "0,0"))
               (rule "shift_paren_or" (formula "20") (term "0,0"))
               (rule "commute_or_2" (formula "19") (term "0,0,0"))
               (rule "shift_paren_or" (formula "20") (term "0,0,0"))
               (rule "commute_or_2" (formula "19") (term "0,0,0,0"))
               (rule "commute_or_2" (formula "20") (term "0,0,0,0"))
               (rule "shift_paren_or" (formula "18") (term "0,0,0,0"))
               (rule "commute_or_2" (formula "19") (term "0,0,0,0,0"))
               (rule "commute_or_2" (formula "18") (term "0,0,0,0,0"))
               (rule "shift_paren_or" (formula "20") (term "0,0,0,0,0"))
               (rule "commute_or_2" (formula "18") (term "0,0,0,0,0,0"))
               (rule "shift_paren_or" (formula "19") (term "0,0,0,0,0,0"))
               (rule "shift_paren_or" (formula "20") (term "0,0,0,0,0,0"))
               (rule "commute_or" (formula "19") (term "0,0,0,0,0,0,0"))
               (rule "inEqSimp_or_tautInEq1" (formula "19") (term "0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "19") (term "1,1,0,0,0,0,0,0"))
               (rule "qeq_literals" (formula "19") (term "1,0,0,0,0,0,0"))
               (builtin "One Step Simplification" (formula "19"))
               (rule "true_left" (formula "19"))
               (rule "shift_paren_or" (formula "18") (term "0,0,0,0,0,0,0"))
               (rule "commute_or" (formula "18") (term "0,0,0,0,0,0,0,0"))
               (builtin "One Step Simplification" (formula "18"))
               (rule "arrayLengthIsAShort" (formula "2") (term "0"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "arrayLengthNotNegative" (formula "2") (term "0"))
               (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "3"))
               (rule "leq_literals" (formula "2") (term "0"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "arrayLengthIsAShort" (formula "1") (term "0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "arrayLengthNotNegative" (formula "1") (term "0"))
               (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "2"))
               (rule "leq_literals" (formula "1") (term "0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "cut_direct" (formula "25") (term "0"))
               (branch "CUT: a2[iv_6].length = a1[iv_6].length TRUE"
                  (builtin "One Step Simplification" (formula "26"))
                  (rule "allRight" (formula "26") (inst "sk=iv_8"))
                  (rule "cutUpperBound" (formula "26") (ifseqformula "17"))
                  (branch "Case 1"
                     (rule "crossInst" (formula "18") (inst "sk=j_14") (ifseqformula "27"))
                     (rule "orRight" (formula "28"))
                     (rule "andLeft" (formula "18"))
                     (rule "orRight" (formula "29"))
                     (rule "eqSymm" (formula "1"))
                     (rule "inEqSimp_geqRight" (formula "30"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_leqRight" (formula "30"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "replace_known_left" (formula "31") (term "0,0,1") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "1")))
                     (rule "inEqSimp_homoInEq0" (formula "31") (term "0,0"))
                     (rule "eqSymm" (formula "31"))
                     (rule "polySimp_addComm1" (formula "31") (term "0,0,1"))
                     (rule "inEqSimp_homoInEq0" (formula "31") (term "0,0"))
                     (rule "eqSymm" (formula "31"))
                     (rule "polySimp_addComm1" (formula "31") (term "0,0,1"))
                     (rule "applyEq" (formula "5") (term "0") (ifseqformula "4"))
                     (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
                     (rule "eqSymm" (formula "4"))
                     (rule "applyEqRigid" (formula "20") (term "0,2,0,0,1") (ifseqformula "19"))
                     (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "3"))
                     (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                     (rule "add_literals" (formula "2") (term "1,1,0"))
                     (rule "times_zero_1" (formula "2") (term "1,0"))
                     (rule "add_zero_right" (formula "2") (term "0"))
                     (rule "leq_literals" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
                  (branch "Case 2"
                     (rule "crossInst" (formula "18") (inst "sk=j_13") (ifseqformula "27"))
                     (rule "orRight" (formula "28"))
                     (rule "notLeft" (formula "1"))
                     (rule "andLeft" (formula "17"))
                     (rule "orRight" (formula "29"))
                     (rule "eqSymm" (formula "24"))
                     (rule "inEqSimp_geqRight" (formula "30"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_leqRight" (formula "30"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "replace_known_left" (formula "31") (term "0,0,1") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "1")))
                     (rule "inEqSimp_homoInEq0" (formula "31") (term "0,0"))
                     (rule "eqSymm" (formula "31"))
                     (rule "polySimp_addComm1" (formula "31") (term "0,0,1"))
                     (rule "inEqSimp_homoInEq0" (formula "31") (term "0,0"))
                     (rule "eqSymm" (formula "31"))
                     (rule "polySimp_addComm1" (formula "31") (term "0,0,1"))
                     (rule "applyEq" (formula "31") (term "1,0,0,0") (ifseqformula "3"))
                     (rule "applyEqRigid" (formula "20") (term "0,0,0,0") (ifseqformula "19"))
                     (rule "applyEqRigid" (formula "20") (term "0,1,0,0") (ifseqformula "19"))
                     (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "20") (term "0,2,0,0,1,0") (ifseqformula "19"))
                     (rule "applyEqRigid" (formula "20") (term "0,2,0,0,1") (ifseqformula "19"))
                     (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
                     (rule "applyEq" (formula "25") (term "0") (ifseqformula "3"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "30") (term "1,0,1"))
                     (rule "polySimp_rightDist" (formula "30") (term "1,0,1"))
                     (rule "mul_literals" (formula "30") (term "0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,1"))
                     (rule "polySimp_elimOne" (formula "30") (term "1,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "30") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "30") (term "1,0,0"))
                     (rule "mul_literals" (formula "30") (term "0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0"))
                     (rule "replace_known_left" (formula "30") (term "0,1") (ifseqformula "2"))
                     (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "2")))
                     (rule "inEqSimp_contradEq7" (formula "25") (ifseqformula "2"))
                     (rule "polySimp_mulComm0" (formula "25") (term "1,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0"))
                     (rule "add_literals" (formula "25") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "25") (term "1,0,0"))
                     (rule "add_zero_right" (formula "25") (term "0,0"))
                     (rule "leq_literals" (formula "25") (term "0"))
                     (builtin "One Step Simplification" (formula "25"))
                     (rule "false_right" (formula "25"))
                     (rule "inEqSimp_contradInEq1" (formula "19") (term "0,0,0") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "19") (term "0,0,0,0"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "allLeft" (formula "20") (inst "t=iv_6"))
                     (rule "applyEq" (formula "20") (term "0,1") (ifseqformula "3"))
                     (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "4"))
                     (builtin "One Step Simplification" (formula "20"))
                     (rule "true_left" (formula "20"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "4") (term "0,0") (ifseqformula "8"))
                     (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "26"))
                     (builtin "One Step Simplification" (formula "4"))
                     (rule "cut_direct" (formula "20") (term "0,0"))
                     (branch "CUT: iv_8 >= i_0 TRUE"
                        (builtin "One Step Simplification" (formula "21"))
                        (rule "true_left" (formula "21"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "27") (term "0") (ifseqformula "9"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "28"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "allLeft" (formula "26") (inst "t=iv_6"))
                        (rule "narrowSelectArrayType" (formula "26") (term "0,0,0,0,0,0,0,0") (ifseqformula "10") (ifseqformula "28"))
                        (rule "inEqSimp_commuteLeq" (formula "26") (term "1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "26") (term "1,0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "26") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "26") (term "0,1,0,0"))
                        (rule "applyEq" (formula "26") (term "0,0,1,1,0") (ifseqformula "4"))
                        (rule "replace_known_left" (formula "26") (term "0,1,1,0") (ifseqformula "6"))
                        (builtin "One Step Simplification" (formula "26"))
                        (rule "applyEq" (formula "26") (term "1,1,0") (ifseqformula "4"))
                        (rule "applyEq" (formula "26") (term "0,1,0,0,1,0,0") (ifseqformula "4"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
                        (rule "inEqSimp_contradInEq0" (formula "26") (term "1,0,0,0,0") (ifseqformula "7"))
                        (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "26") (term "0,0,0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "26") (term "1,1,0,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "26") (term "1,0,0,1,0,0,0,0"))
                        (rule "add_zero_right" (formula "26") (term "0,0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "26") (term "0,1,0,0,0,0"))
                        (builtin "One Step Simplification" (formula "26"))
                        (rule "inEqSimp_contradInEq1" (formula "26") (term "1,0,0,0,0") (ifseqformula "9"))
                        (rule "qeq_literals" (formula "26") (term "0,1,0,0,0,0"))
                        (builtin "One Step Simplification" (formula "26"))
                        (rule "inEqSimp_or_tautInEq1" (formula "26") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "26") (term "1,0"))
                        (rule "polySimp_pullOutFactor1" (formula "26") (term "0,1,0"))
                        (rule "add_literals" (formula "26") (term "1,0,1,0"))
                        (rule "times_zero_1" (formula "26") (term "0,1,0"))
                        (rule "leq_literals" (formula "26") (term "1,0"))
                        (builtin "One Step Simplification" (formula "26"))
                        (rule "true_left" (formula "26"))
                        (rule "allLeft" (formula "24") (inst "t=iv_6"))
                        (rule "narrowSelectArrayType" (formula "24") (term "0,0,0,0,0,0,0,0") (ifseqformula "10") (ifseqformula "29"))
                        (rule "eqSymm" (formula "24") (term "0,0,0,0,0,0,0"))
                        (rule "narrowSelectArrayType" (formula "24") (term "0,0,0,0,0,0,0,0") (ifseqformula "10") (ifseqformula "28"))
                        (rule "eqSymm" (formula "24") (term "0,0,0,0,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "24") (term "1,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "24") (term "1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "24") (term "1,0,0"))
                        (rule "applyEq" (formula "24") (term "1,1,1,0") (ifseqformula "4"))
                        (rule "applyEq" (formula "24") (term "1,1,0,0") (ifseqformula "4"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "applyEq" (formula "24") (term "0,0,1,1,0") (ifseqformula "4"))
                        (rule "replace_known_left" (formula "24") (term "0,1,1,0") (ifseqformula "6"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "inEqSimp_contradInEq0" (formula "24") (term "1,0,0") (ifseqformula "7"))
                        (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                        (rule "polySimp_addComm0" (formula "24") (term "0,0,0,1,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "24") (term "1,1,0,0,1,0,0"))
                        (rule "times_zero_1" (formula "24") (term "1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "24") (term "0,0,1,0,0"))
                        (rule "leq_literals" (formula "24") (term "0,1,0,0"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "inEqSimp_contradInEq1" (formula "24") (term "1,0,0") (ifseqformula "9"))
                        (rule "qeq_literals" (formula "24") (term "0,1,0,0"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "commute_or" (formula "24") (term "0,0"))
                        (rule "commute_or_2" (formula "24") (term "0"))
                        (rule "allLeft" (formula "24") (inst "t=iv_8"))
                        (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "33"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
                        (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "24") (term "0,0,1"))
                        (rule "leq_literals" (formula "24") (term "0,1"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "24"))
                        (rule "qeq_literals" (formula "2") (term "0"))
                        (builtin "One Step Simplification" (formula "2"))
                        (rule "closeFalse" (formula "2"))
                     )
                     (branch "CUT: iv_8 >= i_0 FALSE"
                        (builtin "One Step Simplification" (formula "20"))
                        (rule "inEqSimp_geqRight" (formula "26"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1"))
                        (rule "mul_literals" (formula "1") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                        (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                        (rule "times_zero_1" (formula "2") (term "0,0"))
                        (rule "add_zero_left" (formula "2") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "mul_literals" (formula "2") (term "1"))
                        (rule "allLeft" (formula "15") (inst "t=iv_8"))
                        (rule "inEqSimp_contradInEq1" (formula "15") (term "1,0") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "15") (term "0,1,0"))
                        (builtin "One Step Simplification" (formula "15"))
                        (rule "inEqSimp_contradInEq0" (formula "15") (term "1") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "15") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,0,1"))
                        (rule "polySimp_addComm0" (formula "15") (term "0,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
                        (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "15") (term "0,0,1"))
                        (rule "leq_literals" (formula "15") (term "0,1"))
                        (builtin "One Step Simplification" (formula "15"))
                        (rule "notLeft" (formula "15"))
                        (rule "allLeft" (formula "16") (inst "t=iv_8"))
                        (rule "inEqSimp_contradInEq1" (formula "16") (term "1,0") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "16") (term "0,1,0"))
                        (builtin "One Step Simplification" (formula "16"))
                        (rule "inEqSimp_contradInEq0" (formula "16") (term "1") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "16") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,1"))
                        (rule "polySimp_addComm0" (formula "16") (term "0,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
                        (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "16") (term "0,0,1"))
                        (rule "leq_literals" (formula "16") (term "0,1"))
                        (builtin "One Step Simplification" (formula "16"))
                        (rule "notLeft" (formula "16"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "30") (term "0") (ifseqformula "10"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "31"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "arrayLengthNotNegative" (formula "22") (term "0,1"))
                        (rule "arrayLengthIsAShort" (formula "23") (term "0,1"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "true_left" (formula "23"))
                        (rule "cut_direct" (formula "23") (term "1"))
                        (branch "CUT: a2[iv_8].length >= 1 TRUE"
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "true_left" (formula "24"))
                           (rule "inEqSimp_subsumption1" (formula "22") (ifseqformula "23"))
                           (rule "leq_literals" (formula "22") (term "0"))
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "true_left" (formula "22"))
                           (rule "allLeft" (formula "27") (inst "t=iv_6"))
                           (rule "narrowSelectArrayType" (formula "27") (term "0,0,0,0,0,0,0,0") (ifseqformula "11") (ifseqformula "31"))
                           (rule "inEqSimp_commuteLeq" (formula "27") (term "1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "27") (term "1,0,0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "27") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "27") (term "0,1,0,0"))
                           (rule "applyEq" (formula "27") (term "1,1,1,0") (ifseqformula "5"))
                           (rule "applyEq" (formula "27") (term "0,0,1,1,0") (ifseqformula "5"))
                           (rule "replace_known_left" (formula "27") (term "0,1,1,0") (ifseqformula "7"))
                           (builtin "One Step Simplification" (formula "27"))
                           (rule "applyEq" (formula "27") (term "0,1,0,0,1,0,0") (ifseqformula "5"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
                           (rule "inEqSimp_contradInEq0" (formula "27") (term "1,0,0,0,0") (ifseqformula "8"))
                           (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,0,0"))
                           (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,0,0"))
                           (rule "polySimp_addComm0" (formula "27") (term "0,0,0,1,0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1,0,0,0,0"))
                           (rule "add_literals" (formula "27") (term "1,1,0,0,1,0,0,0,0"))
                           (rule "times_zero_1" (formula "27") (term "1,0,0,1,0,0,0,0"))
                           (rule "add_zero_right" (formula "27") (term "0,0,1,0,0,0,0"))
                           (rule "leq_literals" (formula "27") (term "0,1,0,0,0,0"))
                           (builtin "One Step Simplification" (formula "27"))
                           (rule "inEqSimp_contradInEq1" (formula "27") (term "1,0,0,0,0") (ifseqformula "10"))
                           (rule "qeq_literals" (formula "27") (term "0,1,0,0,0,0"))
                           (builtin "One Step Simplification" (formula "27"))
                           (rule "inEqSimp_or_tautInEq1" (formula "27") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "27") (term "1,0"))
                           (rule "polySimp_pullOutFactor1" (formula "27") (term "0,1,0"))
                           (rule "add_literals" (formula "27") (term "1,0,1,0"))
                           (rule "times_zero_1" (formula "27") (term "0,1,0"))
                           (rule "leq_literals" (formula "27") (term "1,0"))
                           (builtin "One Step Simplification" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "allLeft" (formula "25") (inst "t=iv_6"))
                           (rule "narrowSelectArrayType" (formula "25") (term "0,0,0,0,0,0,0,0") (ifseqformula "11") (ifseqformula "32"))
                           (rule "eqSymm" (formula "25") (term "0,0,0,0,0,0,0"))
                           (rule "narrowSelectArrayType" (formula "25") (term "0,0,0,0,0,0,0,0") (ifseqformula "11") (ifseqformula "31"))
                           (rule "eqSymm" (formula "25") (term "0,0,0,0,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "25") (term "1,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "25") (term "1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "25") (term "1,0,0"))
                           (rule "applyEq" (formula "25") (term "0,0,1,1,0") (ifseqformula "5"))
                           (rule "replace_known_left" (formula "25") (term "0,1,1,0") (ifseqformula "7"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "applyEq" (formula "25") (term "1,1,0") (ifseqformula "5"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "inEqSimp_contradInEq1" (formula "25") (term "1,0,0,0") (ifseqformula "10"))
                           (rule "qeq_literals" (formula "25") (term "0,1,0,0,0"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "inEqSimp_contradInEq0" (formula "25") (term "1,0,0") (ifseqformula "8"))
                           (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                           (rule "polySimp_addComm0" (formula "25") (term "0,0,0,1,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "25") (term "1,1,0,0,1,0,0"))
                           (rule "times_zero_1" (formula "25") (term "1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "25") (term "0,0,1,0,0"))
                           (rule "leq_literals" (formula "25") (term "0,1,0,0"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "commute_or" (formula "25") (term "0,0"))
                           (rule "commute_or_2" (formula "25") (term "0"))
                           (rule "allLeft" (formula "25") (inst "t=iv_8"))
                           (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "36"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "25") (term "0") (ifseqformula "3"))
                           (rule "qeq_literals" (formula "25") (term "0,0"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "25"))
                           (rule "andLeft" (formula "4"))
                           (rule "inEqSimp_homoInEq1" (formula "4"))
                           (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                           (rule "add_literals" (formula "4") (term "1,1,0"))
                           (rule "times_zero_1" (formula "4") (term "1,0"))
                           (rule "add_zero_right" (formula "4") (term "0"))
                           (rule "leq_literals" (formula "4"))
                           (rule "closeFalse" (formula "4"))
                        )
                        (branch "CUT: a2[iv_8].length >= 1 FALSE"
                           (builtin "One Step Simplification" (formula "23"))
                           (rule "inEqSimp_geqRight" (formula "29"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_antiSymm" (formula "23") (ifseqformula "1"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "23"))
                           (rule "leq_literals" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "applyEq" (formula "23") (term "0") (ifseqformula "22"))
                           (rule "qeq_literals" (formula "23"))
                           (rule "true_left" (formula "23"))
                           (rule "allLeft" (formula "28") (inst "t=iv_6"))
                           (rule "narrowSelectArrayType" (formula "28") (term "0,0,0,0,0,0,0,0") (ifseqformula "11") (ifseqformula "32"))
                           (rule "inEqSimp_commuteLeq" (formula "28") (term "1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "28") (term "1,0,0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "28") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "28") (term "0,1,0,0"))
                           (rule "applyEq" (formula "28") (term "0,0,1,1,0") (ifseqformula "5"))
                           (rule "replace_known_left" (formula "28") (term "0,1,1,0") (ifseqformula "7"))
                           (builtin "One Step Simplification" (formula "28"))
                           (rule "applyEq" (formula "28") (term "1,1,0") (ifseqformula "5"))
                           (rule "applyEq" (formula "28") (term "0,1,0,0,1,0,0") (ifseqformula "5"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "28") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0"))
                           (rule "inEqSimp_contradInEq0" (formula "28") (term "1,0,0,0,0") (ifseqformula "8"))
                           (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,0,0"))
                           (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,0,0"))
                           (rule "polySimp_addComm0" (formula "28") (term "0,0,0,1,0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1,0,0,0,0"))
                           (rule "add_literals" (formula "28") (term "1,1,0,0,1,0,0,0,0"))
                           (rule "times_zero_1" (formula "28") (term "1,0,0,1,0,0,0,0"))
                           (rule "add_zero_right" (formula "28") (term "0,0,1,0,0,0,0"))
                           (rule "leq_literals" (formula "28") (term "0,1,0,0,0,0"))
                           (builtin "One Step Simplification" (formula "28"))
                           (rule "inEqSimp_contradInEq1" (formula "28") (term "1,0,0,0,0") (ifseqformula "10"))
                           (rule "qeq_literals" (formula "28") (term "0,1,0,0,0,0"))
                           (builtin "One Step Simplification" (formula "28"))
                           (rule "inEqSimp_or_tautInEq1" (formula "28") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "28") (term "1,0"))
                           (rule "polySimp_pullOutFactor1" (formula "28") (term "0,1,0"))
                           (rule "add_literals" (formula "28") (term "1,0,1,0"))
                           (rule "times_zero_1" (formula "28") (term "0,1,0"))
                           (rule "leq_literals" (formula "28") (term "1,0"))
                           (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "arrayLengthIsAShort" (formula "23") (term "0"))
                           (builtin "One Step Simplification" (formula "23"))
                           (rule "true_left" (formula "23"))
                           (rule "arrayLengthNotNegative" (formula "23") (term "0"))
                           (rule "inEqSimp_antiSymm" (formula "23") (ifseqformula "24"))
                           (rule "applyEq" (formula "24") (term "0") (ifseqformula "23"))
                           (rule "qeq_literals" (formula "24"))
                           (rule "true_left" (formula "24"))
                           (rule "applyEq" (formula "24") (term "0") (ifseqformula "23"))
                           (rule "leq_literals" (formula "24"))
                           (rule "true_left" (formula "24"))
                           (rule "allLeft" (formula "26") (inst "t=iv_6"))
                           (rule "narrowSelectArrayType" (formula "26") (term "0,0,0,0,0,0,0,0") (ifseqformula "11") (ifseqformula "33"))
                           (rule "eqSymm" (formula "26") (term "0,0,0,0,0,0,0"))
                           (rule "narrowSelectArrayType" (formula "26") (term "0,0,0,0,0,0,0,0") (ifseqformula "11") (ifseqformula "32"))
                           (rule "eqSymm" (formula "26") (term "0,0,0,0,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "26") (term "1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "26") (term "1,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "26") (term "1,0,0"))
                           (rule "applyEq" (formula "26") (term "1,1,0,0") (ifseqformula "5"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "applyEq" (formula "26") (term "1,1,1,0") (ifseqformula "5"))
                           (rule "applyEq" (formula "26") (term "0,0,1,1,0") (ifseqformula "5"))
                           (rule "replace_known_left" (formula "26") (term "0,1,1,0") (ifseqformula "7"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "inEqSimp_contradInEq0" (formula "26") (term "1,0,0") (ifseqformula "8"))
                           (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                           (rule "polySimp_addComm0" (formula "26") (term "0,0,0,1,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "26") (term "1,1,0,0,1,0,0"))
                           (rule "times_zero_1" (formula "26") (term "1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "26") (term "0,0,1,0,0"))
                           (rule "leq_literals" (formula "26") (term "0,1,0,0"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "inEqSimp_contradInEq1" (formula "26") (term "1,0,0") (ifseqformula "10"))
                           (rule "qeq_literals" (formula "26") (term "0,1,0,0"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "commute_or" (formula "26") (term "0,0"))
                           (rule "commute_or_2" (formula "26") (term "0"))
                           (rule "allLeft" (formula "26") (inst "t=iv_8"))
                           (rule "replace_known_right" (formula "26") (term "1") (ifseqformula "37"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "3"))
                           (rule "qeq_literals" (formula "26") (term "0,0"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "inEqSimp_contradInEq1" (formula "26") (ifseqformula "4"))
                           (rule "andLeft" (formula "26"))
                           (rule "inEqSimp_homoInEq1" (formula "26"))
                           (rule "polySimp_pullOutFactor1b" (formula "26") (term "0"))
                           (rule "add_literals" (formula "26") (term "1,1,0"))
                           (rule "times_zero_1" (formula "26") (term "1,0"))
                           (rule "add_zero_right" (formula "26") (term "0"))
                           (rule "leq_literals" (formula "26"))
                           (rule "closeFalse" (formula "26"))
                        )
                     )
                  )
               )
               (branch "CUT: a2[iv_6].length = a1[iv_6].length FALSE"
                  (builtin "One Step Simplification" (formula "26"))
                  (rule "false_right" (formula "26"))
                  (rule "allLeft" (formula "15") (inst "t=iv_6"))
                  (rule "replace_known_right" (formula "15") (term "1") (ifseqformula "26"))
                  (builtin "One Step Simplification" (formula "15"))
                  (rule "inEqSimp_contradInEq1" (formula "15") (term "0,0,0") (ifseqformula "5"))
                  (rule "qeq_literals" (formula "15") (term "0,0,0,0"))
                  (builtin "One Step Simplification" (formula "15"))
                  (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "15") (term "0,1"))
                  (builtin "One Step Simplification" (formula "15"))
                  (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "15") (term "0,1"))
                  (builtin "One Step Simplification" (formula "15"))
                  (rule "inEqSimp_contradInEq0" (formula "15") (ifseqformula "3"))
                  (rule "andLeft" (formula "15"))
                  (rule "inEqSimp_homoInEq1" (formula "15"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                  (rule "mul_literals" (formula "15") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "15") (term "0"))
                  (rule "polySimp_addComm0" (formula "15") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "15") (term "0"))
                  (rule "add_literals" (formula "15") (term "1,1,0"))
                  (rule "times_zero_1" (formula "15") (term "1,0"))
                  (rule "add_zero_right" (formula "15") (term "0"))
                  (rule "leq_literals" (formula "15"))
                  (rule "closeFalse" (formula "15"))
               )
            )
            (branch "a2[iv_6].length >= 1 FALSE"
               (rule "eqSymm" (formula "18") (term "0"))
               (rule "replace_known_right" (formula "18") (term "0,1,1,0,0,1") (ifseqformula "17"))
               (builtin "One Step Simplification" (formula "18"))
               (rule "inEqSimp_geqRight" (formula "17"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_contradEq7" (formula "18") (term "0") (ifseqformula "2"))
               (rule "times_zero_1" (formula "18") (term "1,0,0,0"))
               (rule "add_literals" (formula "18") (term "0,0,0"))
               (rule "leq_literals" (formula "18") (term "0,0"))
               (builtin "One Step Simplification" (formula "18"))
               (rule "false_right" (formula "18"))
               (rule "all_pull_out3" (formula "15") (term "0"))
               (rule "cnf_rightDist" (formula "15") (term "0,0"))
               (rule "distr_forallAnd" (formula "15") (term "0"))
               (rule "distr_forallAnd" (formula "15"))
               (rule "andLeft" (formula "15"))
               (rule "commute_or_2" (formula "16") (term "0,0"))
               (rule "commute_or_2" (formula "16") (term "0,0,0"))
               (rule "commute_or_2" (formula "16") (term "0,0,0,0"))
               (rule "cnf_rightDist" (formula "15") (term "0,0"))
               (rule "distr_forallAnd" (formula "15") (term "0"))
               (builtin "One Step Simplification" (formula "15"))
               (rule "distr_forallAnd" (formula "15"))
               (rule "andLeft" (formula "15"))
               (rule "commute_or_2" (formula "16") (term "0,0"))
               (rule "commute_or_2" (formula "16") (term "0,0,0"))
               (rule "cnf_rightDist" (formula "15") (term "0"))
               (rule "distr_forallAnd" (formula "15"))
               (rule "andLeft" (formula "15"))
               (rule "commute_or_2" (formula "16") (term "0"))
               (rule "commute_or_2" (formula "16") (term "0,0"))
               (rule "commute_or" (formula "16") (term "0,0,0"))
               (rule "cnf_rightDist" (formula "15") (term "0"))
               (rule "distr_forallAnd" (formula "15"))
               (rule "andLeft" (formula "15"))
               (rule "commute_or_2" (formula "16") (term "0"))
               (rule "shift_paren_or" (formula "15") (term "0"))
               (rule "commute_or" (formula "16") (term "0,0"))
               (rule "shift_paren_or" (formula "15") (term "0,0"))
               (rule "shift_paren_or" (formula "18") (term "0,0,0,0"))
               (rule "shift_paren_or" (formula "19") (term "0,0,0,0,0"))
               (rule "allLeft" (formula "12") (inst "t=iv_6"))
               (rule "inEqSimp_contradInEq0" (formula "12") (term "1") (ifseqformula "3"))
               (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1"))
               (rule "mul_literals" (formula "12") (term "0,1,0,0,1"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,0,1"))
               (rule "polySimp_addComm0" (formula "12") (term "0,0,0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
               (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "12") (term "0,0,1"))
               (rule "leq_literals" (formula "12") (term "0,1"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "5"))
               (rule "qeq_literals" (formula "12") (term "0,1"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "notLeft" (formula "12"))
               (rule "allLeft" (formula "11") (inst "t=iv_6"))
               (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0") (ifseqformula "5"))
               (rule "qeq_literals" (formula "11") (term "0,1,0"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "inEqSimp_contradInEq0" (formula "11") (term "1") (ifseqformula "3"))
               (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1"))
               (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1"))
               (rule "mul_literals" (formula "11") (term "0,1,0,0,1"))
               (rule "polySimp_addAssoc" (formula "11") (term "0,0,1"))
               (rule "polySimp_addComm0" (formula "11") (term "0,0,0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1"))
               (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "11") (term "0,0,1"))
               (rule "leq_literals" (formula "11") (term "0,1"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "notLeft" (formula "11"))
               (rule "ifthenelse_to_or_left" (formula "18") (term "0,0,0,0,0,0,0"))
               (rule "eqSymm" (formula "18") (term "1,0,0,0,0,0,0,0,0"))
               (rule "eqSymm" (formula "18") (term "1,1,0,0,0,0,0,0,0"))
               (rule "nnf_notAnd" (formula "18") (term "0,0,0,0,0,0,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0,0,0,0,0,0,0,0"))
               (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0,0,0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "18") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,0,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "18") (term "1,0,0,0,0,0,0,0,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "18") (term "1,0,0,0,0,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,0,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,0,0,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
               (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,0,0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "18") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,0,0,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0,0,0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0,0,0,0,0,0,0"))
               (rule "commute_or" (formula "18") (term "0,0,0,0,0,0"))
               (rule "commute_or_2" (formula "18") (term "0,0,0,0,0"))
               (rule "commute_or_2" (formula "18") (term "0,0,0,0"))
               (rule "commute_or_2" (formula "18") (term "0,0,0"))
               (rule "commute_or_2" (formula "18") (term "0,0"))
               (rule "commute_or_2" (formula "18") (term "0,1,0,0"))
               (rule "commute_or" (formula "18") (term "1,1,0,0"))
               (rule "commute_or" (formula "18") (term "0,0,1,0,0"))
               (rule "cnf_rightDist" (formula "18") (term "1,1,0,0"))
               (rule "cnf_rightDist" (formula "18") (term "0,0"))
               (rule "distr_forallAnd" (formula "18") (term "0"))
               (rule "distr_forallAnd" (formula "18"))
               (rule "andLeft" (formula "18"))
               (rule "commute_or" (formula "19") (term "0,0"))
               (rule "commute_or_2" (formula "18") (term "0,0"))
               (rule "commute_or_2" (formula "18") (term "0,0,0"))
               (rule "commute_or" (formula "19") (term "1,1,0,0"))
               (rule "cnf_rightDist" (formula "19") (term "0,0"))
               (rule "distr_forallAnd" (formula "19") (term "0"))
               (rule "distr_forallAnd" (formula "19"))
               (rule "andLeft" (formula "19"))
               (rule "commute_or_2" (formula "19") (term "0,0"))
               (rule "shift_paren_or" (formula "20") (term "0,0"))
               (rule "commute_or_2" (formula "19") (term "0,0,0"))
               (rule "shift_paren_or" (formula "20") (term "0,0,0"))
               (rule "commute_or_2" (formula "19") (term "0,0,0,0"))
               (rule "commute_or_2" (formula "20") (term "0,0,0,0"))
               (rule "shift_paren_or" (formula "18") (term "0,0,0,0"))
               (rule "commute_or_2" (formula "19") (term "0,0,0,0,0"))
               (rule "commute_or_2" (formula "18") (term "0,0,0,0,0"))
               (rule "shift_paren_or" (formula "20") (term "0,0,0,0,0"))
               (rule "commute_or_2" (formula "18") (term "0,0,0,0,0,0"))
               (rule "shift_paren_or" (formula "19") (term "0,0,0,0,0,0"))
               (rule "shift_paren_or" (formula "20") (term "0,0,0,0,0,0"))
               (rule "commute_or" (formula "19") (term "0,0,0,0,0,0,0"))
               (rule "inEqSimp_or_tautInEq1" (formula "19") (term "0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "19") (term "1,1,0,0,0,0,0,0"))
               (rule "qeq_literals" (formula "19") (term "1,0,0,0,0,0,0"))
               (builtin "One Step Simplification" (formula "19"))
               (rule "true_left" (formula "19"))
               (rule "shift_paren_or" (formula "18") (term "0,0,0,0,0,0,0"))
               (rule "allLeft" (formula "16") (inst "t=iv_6"))
               (rule "inEqSimp_contradInEq0" (formula "16") (term "1") (ifseqformula "1"))
               (rule "qeq_literals" (formula "16") (term "0,1"))
               (builtin "One Step Simplification" (formula "16"))
               (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "2"))
               (rule "qeq_literals" (formula "16") (term "0,1"))
               (builtin "One Step Simplification" (formula "16"))
               (rule "inEqSimp_contradInEq0" (formula "16") (term "1") (ifseqformula "3"))
               (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1"))
               (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1"))
               (rule "mul_literals" (formula "16") (term "0,1,0,0,1"))
               (rule "polySimp_addAssoc" (formula "16") (term "0,0,1"))
               (rule "polySimp_addComm0" (formula "16") (term "0,0,0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
               (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "16") (term "0,0,1"))
               (rule "leq_literals" (formula "16") (term "0,1"))
               (builtin "One Step Simplification" (formula "16"))
               (rule "inEqSimp_contradInEq1" (formula "16") (ifseqformula "5"))
               (rule "qeq_literals" (formula "16") (term "0"))
               (builtin "One Step Simplification" (formula "16"))
               (rule "closeFalse" (formula "16"))
            )
         )
         (branch "a1[iv_6].length >= 1 FALSE"
            (builtin "One Step Simplification" (formula "17"))
            (rule "inEqSimp_geqRight" (formula "16"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_notGeq" (formula "17") (term "0,0"))
            (rule "mul_literals" (formula "17") (term "1,0,0,0,0"))
            (rule "add_literals" (formula "17") (term "0,0,0,0"))
            (rule "add_zero_left" (formula "17") (term "0,0,0"))
            (rule "all_pull_out3" (formula "14") (term "0"))
            (rule "cnf_rightDist" (formula "14") (term "0,0"))
            (rule "distr_forallAnd" (formula "14") (term "0"))
            (rule "distr_forallAnd" (formula "14"))
            (rule "andLeft" (formula "14"))
            (rule "commute_or_2" (formula "15") (term "0,0"))
            (rule "commute_or_2" (formula "15") (term "0,0,0"))
            (rule "commute_or_2" (formula "15") (term "0,0,0,0"))
            (rule "cnf_rightDist" (formula "14") (term "0,0"))
            (rule "distr_forallAnd" (formula "14") (term "0"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "distr_forallAnd" (formula "14"))
            (rule "andLeft" (formula "14"))
            (rule "commute_or_2" (formula "15") (term "0,0"))
            (rule "commute_or_2" (formula "15") (term "0,0,0"))
            (rule "cnf_rightDist" (formula "14") (term "0"))
            (rule "distr_forallAnd" (formula "14"))
            (rule "andLeft" (formula "14"))
            (rule "commute_or_2" (formula "15") (term "0"))
            (rule "commute_or_2" (formula "15") (term "0,0"))
            (rule "commute_or" (formula "15") (term "0,0,0"))
            (rule "cnf_rightDist" (formula "14") (term "0"))
            (rule "distr_forallAnd" (formula "14"))
            (rule "andLeft" (formula "14"))
            (rule "commute_or_2" (formula "15") (term "0"))
            (rule "shift_paren_or" (formula "14") (term "0"))
            (rule "commute_or" (formula "15") (term "0,0"))
            (rule "shift_paren_or" (formula "14") (term "0,0"))
            (rule "shift_paren_or" (formula "17") (term "0,0,0,0"))
            (rule "shift_paren_or" (formula "18") (term "0,0,0,0,0"))
            (rule "allLeft" (formula "11") (inst "t=iv_6"))
            (rule "inEqSimp_contradInEq0" (formula "11") (term "1") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1"))
            (rule "mul_literals" (formula "11") (term "0,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,0,1"))
            (rule "polySimp_addComm0" (formula "11") (term "0,0,0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1"))
            (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "11") (term "0,0,1"))
            (rule "leq_literals" (formula "11") (term "0,1"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "inEqSimp_contradInEq1" (formula "11") (term "1") (ifseqformula "4"))
            (rule "qeq_literals" (formula "11") (term "0,1"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "notLeft" (formula "11"))
            (rule "narrowSelectArrayType" (formula "22") (term "1,0,1,0,1") (ifseqformula "5") (ifseqformula "19"))
            (rule "allLeft" (formula "10") (inst "t=iv_6"))
            (rule "inEqSimp_contradInEq0" (formula "10") (term "1") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1"))
            (rule "mul_literals" (formula "10") (term "0,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "10") (term "0,0,1"))
            (rule "polySimp_addComm0" (formula "10") (term "0,0,0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
            (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "10") (term "0,0,1"))
            (rule "leq_literals" (formula "10") (term "0,1"))
            (builtin "One Step Simplification" (formula "10"))
            (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "4"))
            (rule "qeq_literals" (formula "10") (term "0,1"))
            (builtin "One Step Simplification" (formula "10"))
            (rule "notLeft" (formula "10"))
            (rule "narrowSelectArrayType" (formula "23") (term "1,1,1,0,1") (ifseqformula "5") (ifseqformula "19"))
            (rule "ifthenelse_split" (formula "23") (term "1,1,0,0,1"))
            (branch "a2[iv_6].length >= 1 TRUE"
               (rule "inEqSimp_contradEq7" (formula "24") (term "1,0") (ifseqformula "1"))
               (rule "times_zero_1" (formula "24") (term "1,0,0,1,0"))
               (rule "add_zero_right" (formula "24") (term "0,0,1,0"))
               (rule "leq_literals" (formula "24") (term "0,1,0"))
               (builtin "One Step Simplification" (formula "24"))
               (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "1"))
               (rule "qeq_literals" (formula "24") (term "0,0"))
               (builtin "One Step Simplification" (formula "24"))
               (rule "false_right" (formula "24"))
               (rule "ifthenelse_to_or_left" (formula "18") (term "0,0,0,0,0,0,0"))
               (rule "eqSymm" (formula "18") (term "1,0,0,0,0,0,0,0,0"))
               (rule "eqSymm" (formula "18") (term "1,1,0,0,0,0,0,0,0"))
               (rule "nnf_notAnd" (formula "18") (term "0,0,0,0,0,0,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0,0,0,0,0,0,0,0"))
               (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0,0,0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "18") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,0,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "18") (term "1,0,0,0,0,0,0,0,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "18") (term "1,0,0,0,0,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,0,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,0,0,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
               (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,0,0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "18") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,0,0,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0,0,0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0,0,0,0,0,0,0"))
               (rule "commute_or" (formula "18") (term "0,0,0,0,0,0"))
               (rule "commute_or_2" (formula "18") (term "0,0,0,0,0"))
               (rule "commute_or_2" (formula "18") (term "0,0,0,0"))
               (rule "commute_or_2" (formula "18") (term "0,0,0"))
               (rule "commute_or_2" (formula "18") (term "0,0"))
               (rule "commute_or_2" (formula "18") (term "0,1,0,0"))
               (rule "commute_or" (formula "18") (term "1,1,0,0"))
               (rule "commute_or" (formula "18") (term "0,0,1,0,0"))
               (rule "cnf_rightDist" (formula "18") (term "1,1,0,0"))
               (rule "cnf_rightDist" (formula "18") (term "0,0"))
               (rule "distr_forallAnd" (formula "18") (term "0"))
               (rule "distr_forallAnd" (formula "18"))
               (rule "andLeft" (formula "18"))
               (rule "commute_or" (formula "19") (term "0,0"))
               (rule "commute_or_2" (formula "18") (term "0,0"))
               (rule "commute_or_2" (formula "18") (term "0,0,0"))
               (rule "commute_or" (formula "19") (term "1,1,0,0"))
               (rule "cnf_rightDist" (formula "19") (term "0,0"))
               (rule "distr_forallAnd" (formula "19") (term "0"))
               (rule "distr_forallAnd" (formula "19"))
               (rule "andLeft" (formula "19"))
               (rule "commute_or_2" (formula "19") (term "0,0"))
               (rule "shift_paren_or" (formula "20") (term "0,0"))
               (rule "commute_or_2" (formula "19") (term "0,0,0"))
               (rule "shift_paren_or" (formula "20") (term "0,0,0"))
               (rule "commute_or_2" (formula "19") (term "0,0,0,0"))
               (rule "commute_or_2" (formula "20") (term "0,0,0,0"))
               (rule "shift_paren_or" (formula "18") (term "0,0,0,0"))
               (rule "commute_or_2" (formula "19") (term "0,0,0,0,0"))
               (rule "commute_or_2" (formula "18") (term "0,0,0,0,0"))
               (rule "shift_paren_or" (formula "20") (term "0,0,0,0,0"))
               (rule "commute_or_2" (formula "18") (term "0,0,0,0,0,0"))
               (rule "shift_paren_or" (formula "19") (term "0,0,0,0,0,0"))
               (rule "shift_paren_or" (formula "20") (term "0,0,0,0,0,0"))
               (rule "commute_or" (formula "19") (term "0,0,0,0,0,0,0"))
               (rule "inEqSimp_or_tautInEq1" (formula "19") (term "0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "19") (term "1,1,0,0,0,0,0,0"))
               (rule "qeq_literals" (formula "19") (term "1,0,0,0,0,0,0"))
               (builtin "One Step Simplification" (formula "19"))
               (rule "true_left" (formula "19"))
               (rule "shift_paren_or" (formula "18") (term "0,0,0,0,0,0,0"))
               (rule "commute_or" (formula "18") (term "0,0,0,0,0,0,0,0"))
               (builtin "One Step Simplification" (formula "18"))
               (rule "arrayLengthIsAShort" (formula "2") (term "0"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "arrayLengthNotNegative" (formula "2") (term "0"))
               (rule "inEqSimp_antiSymm" (formula "2") (ifseqformula "3"))
               (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
               (rule "qeq_literals" (formula "3"))
               (rule "true_left" (formula "3"))
               (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
               (rule "leq_literals" (formula "3"))
               (rule "true_left" (formula "3"))
               (rule "allLeft" (formula "17") (inst "t=iv_6"))
               (rule "applyEq" (formula "17") (term "0,1,0,0") (ifseqformula "2"))
               (rule "qeq_literals" (formula "17") (term "1,0,0"))
               (builtin "One Step Simplification" (formula "17"))
               (rule "inEqSimp_contradEq7" (formula "17") (term "1") (ifseqformula "1"))
               (rule "times_zero_1" (formula "17") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "17") (term "0,0,1"))
               (rule "leq_literals" (formula "17") (term "0,1"))
               (builtin "One Step Simplification" (formula "17"))
               (rule "inEqSimp_contradInEq0" (formula "17") (term "1,0") (ifseqformula "3"))
               (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0"))
               (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0"))
               (rule "polySimp_addComm0" (formula "17") (term "0,0,0,1,0"))
               (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1,0"))
               (rule "add_literals" (formula "17") (term "1,1,0,0,1,0"))
               (rule "times_zero_1" (formula "17") (term "1,0,0,1,0"))
               (rule "add_zero_right" (formula "17") (term "0,0,1,0"))
               (rule "leq_literals" (formula "17") (term "0,1,0"))
               (builtin "One Step Simplification" (formula "17"))
               (rule "inEqSimp_contradInEq1" (formula "17") (term "1") (ifseqformula "1"))
               (rule "qeq_literals" (formula "17") (term "0,1"))
               (builtin "One Step Simplification" (formula "17"))
               (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "17"))
               (rule "qeq_literals" (formula "5") (term "0"))
               (builtin "One Step Simplification" (formula "5"))
               (rule "closeFalse" (formula "5"))
            )
            (branch "a2[iv_6].length >= 1 FALSE"
               (rule "inEqSimp_geqRight" (formula "23"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "replace_known_left" (formula "24") (term "0,0") (ifseqformula "1"))
               (builtin "One Step Simplification" (formula "24"))
               (rule "allRight" (formula "24") (inst "sk=iv_7"))
               (rule "cutUpperBound" (formula "24") (ifseqformula "16"))
               (branch "Case 1"
                  (rule "crossInst" (formula "17") (inst "sk=j_12") (ifseqformula "25"))
                  (rule "orRight" (formula "26"))
                  (rule "andLeft" (formula "17"))
                  (rule "orRight" (formula "27"))
                  (rule "replace_known_right" (formula "29") (term "0,0,1") (ifseqformula "28"))
                  (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "28")))
                  (rule "closeTrue" (formula "29"))
               )
               (branch "Case 2"
                  (rule "crossInst" (formula "17") (inst "sk=j_11") (ifseqformula "25"))
                  (rule "orRight" (formula "26"))
                  (rule "notLeft" (formula "1"))
                  (rule "andLeft" (formula "16"))
                  (rule "orRight" (formula "27"))
                  (rule "replace_known_right" (formula "29") (term "0,0,0") (ifseqformula "28"))
                  (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "28")))
                  (rule "closeTrue" (formula "29"))
               )
            )
         )
      )
      (branch "iv_6 <= -1 + i_0 FALSE"
         (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "16")))
         (rule "closeTrue" (formula "17"))
      )
   )
   (branch "Null Reference (_a1 = null)"
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
      (rule "closeFalse" (formula "1"))
   )
)
)

}
