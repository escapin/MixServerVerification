\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Jul 10 11:13:51 CEST 2017
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=5000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , permissions-permissions\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Mon Jul 10 11:13:51 CEST 2017
name=verif.selectvoting.system.core.MixServer[verif.selectvoting.system.core.MixServer\\:\\:extractBallots([B)].JML behavior operation contract.0
contract=verif.selectvoting.system.core.MixServer[verif.selectvoting.system.core.MixServer\\:\\:extractBallots([B)].JML behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mihai" ) (keyVersion "0814267c8a184b1e7da1309b7a9875095ca72975"))
(keyLog "1" (keyUser "mihai" ) (keyVersion "0814267c8a184b1e7da1309b7a9875095ca72975"))

(autoModeTime "98039")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1") (newnames "msg,self,result,exc,heapAtPre,o,f"))
(rule "impRight" (formula "1") (userinteraction))
(rule "assignment" (formula "2") (term "1") (userinteraction))
(rule "methodBodyExpand" (formula "2") (term "1,1") (newnames "heapBefore_extractBallots,savedHeapBefore_extractBallots") (userinteraction))
(builtin "One Step Simplification" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "9"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "variableDeclarationAssign" (formula "11") (term "1") (userinteraction))
(rule "variableDeclaration" (formula "11") (term "1") (newnames "res") (userinteraction))
(builtin "Use Operation Contract" (formula "11") (newnames "heapBefore_splidAndCheck,result_0,exc_0,heapAfter_splidAndCheck,anon_heap_splidAndCheck") (contract "verif.selectvoting.system.core.MixServer[verif.selectvoting.system.core.MixServer::splidAndCheck([B)].JML behavior operation contract.0"))
(branch "Post (splidAndCheck)"
   (builtin "One Step Simplification" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "11"))
   (rule "replace_known_left" (formula "13") (term "0") (ifseqformula "11") (userinteraction))
   (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "11") (userinteraction))
   (builtin "One Step Simplification" (formula "14"))
   (rule "true_left" (formula "14") (userinteraction))
   (builtin "One Step Simplification" (formula "13"))
   (rule "andLeft" (formula "13"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "14"))
   (rule "notLeft" (formula "15"))
   (rule "notLeft" (formula "14"))
   (builtin "One Step Simplification" (formula "20"))
   (rule "assignment" (formula "20") (term "1") (userinteraction))
   (builtin "One Step Simplification" (formula "20"))
   (builtin "Use Operation Contract" (formula "20") (newnames "heapBefore_decryptBallotsAndRemoveElectionId,result_1,exc_1,heapAfter_decryptBallotsAndRemoveElectionId,anon_heap_decryptBallotsAndRemoveElectionId") (contract "verif.selectvoting.system.core.MixServer[verif.selectvoting.system.core.MixServer::decryptBallotsAndRemoveElectionId([[B)].JML behavior operation contract.0"))
   (branch "Post (decryptBallotsAndRemoveElectionId)"
      (builtin "One Step Simplification" (formula "17"))
      (rule "assignment" (formula "22") (term "1,1") (userinteraction))
      (rule "methodCallReturn" (formula "22") (term "1,1,1") (userinteraction))
      (rule "assignment" (formula "22") (term "1,1,1") (userinteraction))
      (rule "methodCallEmpty" (formula "22") (term "1,1,1,1") (userinteraction))
      (rule "tryEmpty" (formula "22") (term "1,1,1,1") (userinteraction))
      (rule "emptyModality" (formula "22") (term "1,1,1,1") (userinteraction))
      (builtin "One Step Simplification" (formula "22"))
      (rule "andLeft" (formula "17"))
      (rule "andLeft" (formula "18"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "18"))
      (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "18") (userinteraction))
      (rule "replace_known_left" (formula "21") (term "0,0") (ifseqformula "18") (userinteraction))
      (builtin "One Step Simplification" (formula "21"))
      (builtin "One Step Simplification" (formula "20"))
      (rule "true_left" (formula "21"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "21"))
      (rule "andLeft" (formula "22"))
      (rule "andLeft" (formula "21"))
      (rule "notLeft" (formula "22"))
      (rule "notLeft" (formula "21"))
      (rule "andRight" (formula "29") (userinteraction))
      (branch "Case 1"
         (rule "andRight" (formula "29") (userinteraction))
         (branch "Case 1"
            (rule "close" (formula "29") (ifseqformula "20") (userinteraction))
         )
         (branch "Case 2"
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (ifseqformula "10"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1") (ifseqformula "17"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "12") (term "1") (ifseqformula "10"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "0,1") (ifseqformula "10"))
            (rule "orRight" (formula "23"))
            (rule "eqSymm" (formula "13"))
            (rule "eqSymm" (formula "7"))
            (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "29"))
            (builtin "One Step Simplification" (formula "4"))
            (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "27"))
            (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "26")))
            (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "25"))
            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "23")) (ifInst ""  (formula "24")))
            (rule "replace_known_left" (formula "30") (term "0,1") (ifseqformula "21"))
            (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "23")) (ifInst ""  (formula "25")) (ifInst ""  (formula "22")))
            (rule "closeTrue" (formula "30"))
         )
      )
      (branch "Case 2"
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (ifseqformula "10"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1") (ifseqformula "17"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "12") (term "1") (ifseqformula "10"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "0,1") (ifseqformula "10"))
         (rule "orRight" (formula "23"))
         (rule "allRight" (formula "30") (inst "sk=f_1"))
         (rule "allRight" (formula "30") (inst "sk=o_1"))
         (rule "orRight" (formula "30"))
         (rule "eqSymm" (formula "7"))
         (rule "eqSymm" (formula "13"))
         (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "29"))
         (builtin "One Step Simplification" (formula "4"))
         (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "27"))
         (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "26")))
         (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "25"))
         (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "23")) (ifInst ""  (formula "24")))
         (rule "nonNull" (formula "22") (inst "i=i"))
         (rule "sub_literals" (formula "22") (term "2,1,0,1,1"))
         (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "25")))
         (rule "greater_literals" (formula "22") (term "0"))
         (builtin "One Step Simplification" (formula "22"))
         (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "15") (inst "i=i"))
         (rule "greater_literals" (formula "15") (term "0,1"))
         (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "27")))
         (rule "sub_literals" (formula "15") (term "2,1,0"))
         (builtin "One Step Simplification" (formula "15"))
         (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
         (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
         (rule "array2seqDef" (formula "7") (term "0") (inst "u=u"))
         (rule "array2seqDef" (formula "7") (term "1") (inst "u=u"))
         (rule "narrowSelectArrayType" (formula "7") (term "2,1") (ifseqformula "1") (ifseqformula "29"))
         (rule "eqSeqDef" (formula "7") (inst "iv=iv"))
         (rule "andLeft" (formula "7"))
         (rule "getOfSeqDef" (formula "8") (term "0,1,0"))
         (rule "castDel" (formula "8") (term "2,0,1,0"))
         (rule "castDel" (formula "8") (term "1,0,1,0"))
         (rule "add_zero_right" (formula "8") (term "0,2,1,0,1,0"))
         (rule "eqSymm" (formula "8") (term "1,0"))
         (rule "polySimp_elimSub" (formula "8") (term "1,1,0,1,1,0"))
         (rule "mul_literals" (formula "8") (term "1,1,1,0,1,1,0"))
         (rule "add_zero_right" (formula "8") (term "1,1,0,1,1,0"))
         (rule "lenOfSeqDef" (formula "7") (term "0"))
         (rule "eqSymm" (formula "7"))
         (rule "polySimp_elimSub" (formula "7") (term "1,1"))
         (rule "times_zero_2" (formula "7") (term "1,1,1"))
         (rule "add_zero_right" (formula "7") (term "1,1"))
         (rule "lenOfSeqDef" (formula "8") (term "1,1,0,0"))
         (rule "polySimp_elimSub" (formula "8") (term "1,1,1,0,0"))
         (rule "times_zero_2" (formula "8") (term "1,1,1,1,0,0"))
         (rule "add_zero_right" (formula "8") (term "1,1,1,0,0"))
         (rule "getOfSeqDef" (formula "8") (term "0,1,0"))
         (rule "castDel" (formula "8") (term "2,0,1,0"))
         (rule "castDel" (formula "8") (term "1,0,1,0"))
         (rule "add_zero_right" (formula "8") (term "0,2,1,0,1,0"))
         (rule "eqSymm" (formula "8") (term "1,0"))
         (rule "polySimp_elimSub" (formula "8") (term "1,1,0,1,1,0"))
         (rule "mul_literals" (formula "8") (term "1,1,1,0,1,1,0"))
         (rule "add_zero_right" (formula "8") (term "1,1,0,1,1,0"))
         (rule "lenOfSeqDef" (formula "7") (term "0"))
         (rule "eqSymm" (formula "7"))
         (rule "polySimp_elimSub" (formula "7") (term "1,1"))
         (rule "mul_literals" (formula "7") (term "1,1,1"))
         (rule "add_zero_right" (formula "7") (term "1,1"))
         (rule "inEqSimp_ltToLeq" (formula "8") (term "0,1,1,0,0"))
         (rule "add_zero_right" (formula "8") (term "0,0,1,1,0,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,1,0"))
         (rule "eqSymm" (formula "8") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0"))
         (rule "add_zero_right" (formula "7") (term "0,0,0"))
         (rule "eqSymm" (formula "7"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,1,0"))
         (rule "eqSymm" (formula "8") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0"))
         (rule "add_zero_right" (formula "7") (term "0,0,0"))
         (rule "eqSymm" (formula "7"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,1,0"))
         (rule "applyEq" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "7"))
         (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,1,0"))
         (rule "eqSymm" (formula "8") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,1,1,0"))
         (rule "polySimp_rightDist" (formula "8") (term "1,1,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,1,1,0"))
         (rule "mul_literals" (formula "8") (term "0,1,1,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,1,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0"))
         (rule "eqSymm" (formula "7"))
         (rule "polySimp_elimOne" (formula "7") (term "0,0,1"))
         (rule "applyEq" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "7"))
         (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,1,0"))
         (rule "eqSymm" (formula "8") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,1,1,0"))
         (rule "polySimp_rightDist" (formula "8") (term "1,1,0,1,1,0"))
         (rule "mul_literals" (formula "8") (term "0,1,1,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,1,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0"))
         (rule "eqSymm" (formula "7"))
         (rule "polySimp_elimOne" (formula "7") (term "0,0,1"))
         (rule "applyEq" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "7"))
         (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
         (rule "pullOutSelect" (formula "21") (term "1,1") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_1"))
         (rule "simplifySelectOfAnonEQ" (formula "21") (ifseqformula "18"))
         (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "30")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "0,0,0") (ifseqformula "11"))
         (rule "replace_known_left" (formula "21") (term "0,0,0,0") (ifseqformula "2"))
         (builtin "One Step Simplification" (formula "21"))
         (rule "simplifySelectOfAnonEQ" (formula "21") (ifseqformula "11"))
         (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "30")) (ifInst ""  (formula "2")))
         (rule "applyEqReverse" (formula "22") (term "1,1") (ifseqformula "21"))
         (rule "hideAuxiliaryEq" (formula "21"))
         (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=f_1_0"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "12"))
         (rule "eqSymm" (formula "33"))
         (rule "pullOutSelect" (formula "15") (term "1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_1"))
         (rule "simplifySelectOfAnonEQ" (formula "15") (ifseqformula "12"))
         (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "31")) (ifInst ""  (formula "3")))
         (rule "applyEqReverse" (formula "16") (term "1,0") (ifseqformula "15"))
         (rule "hideAuxiliaryEq" (formula "15"))
         (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_1_1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "33")))
         (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "nnf_imp2or" (formula "24") (term "0"))
         (rule "nnf_imp2or" (formula "17") (term "0"))
         (rule "nnf_imp2or" (formula "9") (term "0"))
         (rule "nnf_notAnd" (formula "24") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
         (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "24") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
         (rule "mul_literals" (formula "24") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "17") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
         (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "17") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
         (rule "mul_literals" (formula "17") (term "1,0,0,0"))
         (rule "nnf_notAnd" (formula "9") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
         (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "9") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
         (rule "mul_literals" (formula "9") (term "1,0,0,0"))
         (rule "Definition_axiom_for_ghostFieldsPre_in_verif_selectvoting_system_core_MixServer" (formula "7") (term "0") (inst "i=i"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "andLeft" (formula "7"))
         (rule "andLeft" (formula "7"))
         (rule "andLeft" (formula "7"))
         (rule "andLeft" (formula "7"))
         (rule "andLeft" (formula "7"))
         (rule "andLeft" (formula "7"))
         (rule "eqSymm" (formula "13"))
         (rule "eqSymm" (formula "12"))
         (rule "eqSymm" (formula "11"))
         (rule "eqSymm" (formula "10"))
         (rule "eqSymm" (formula "8") (term "1,0"))
         (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
         (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "13"))
         (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "12"))
         (rule "applyEq" (formula "13") (term "1") (ifseqformula "12"))
         (rule "applyEq" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "12"))
         (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
         (rule "array2seqDef" (formula "11") (term "0,1,0") (inst "u=u"))
         (rule "array2seqDef" (formula "11") (term "0,0") (inst "u=u"))
         (rule "array2seqDef" (formula "11") (term "1,1,0") (inst "u=u"))
         (rule "array2seqDef" (formula "11") (term "1") (inst "u=u"))
         (rule "array2seqDef" (formula "10") (term "1") (inst "u=u"))
         (rule "eqSymm" (formula "10"))
         (rule "applyEq" (formula "11") (term "1,1,0") (ifseqformula "10"))
         (rule "array2seqDef" (formula "8") (term "1,0,0,1,0") (inst "u=u"))
         (rule "array2seqDef" (formula "8") (term "0,0,0,1,0") (inst "u=u"))
         (rule "array2seqDef" (formula "8") (term "1,1,0") (inst "u=u"))
         (rule "eqSymm" (formula "8") (term "1,0"))
         (rule "eqSeqDef" (formula "11") (inst "iv=iv"))
         (rule "andLeft" (formula "11"))
         (rule "lenOfSeqDef" (formula "11") (term "1"))
         (rule "polySimp_elimSub" (formula "11") (term "1,1"))
         (rule "mul_literals" (formula "11") (term "1,1,1"))
         (rule "add_zero_right" (formula "11") (term "1,1"))
         (rule "getOfSeqDef" (formula "12") (term "1,1,0"))
         (rule "castDel" (formula "12") (term "1,1,1,0"))
         (rule "castDel" (formula "12") (term "2,1,1,0"))
         (rule "add_zero_right" (formula "12") (term "0,2,1,1,1,0"))
         (rule "polySimp_elimSub" (formula "12") (term "1,1,0,1,1,0"))
         (rule "times_zero_2" (formula "12") (term "1,1,1,0,1,1,0"))
         (rule "add_zero_right" (formula "12") (term "1,1,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
         (rule "polySimp_addComm1" (formula "12") (term "0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1"))
         (rule "add_zero_right" (formula "11") (term "0,0,1"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,1,1,0"))
         (rule "applyEq" (formula "12") (term "0,1,0,1,0,0") (ifseqformula "11"))
         (rule "polySimp_addComm1" (formula "12") (term "0,1,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "11") (term "0,0,1"))
         (rule "polySimp_elimOne" (formula "11") (term "0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,1,1,0"))
         (rule "polySimp_rightDist" (formula "12") (term "1,1,0,1,1,0"))
         (rule "mul_literals" (formula "12") (term "0,1,1,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,1,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,1,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "0,0,1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "12") (term "0,0,1,1,1,0,0"))
         (rule "eqSeqDef2" (formula "10") (inst "iv=iv") (ifseqformula "10"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "true_left" (formula "10"))
         (rule "nnf_imp2or" (formula "8") (term "0"))
         (rule "nnf_imp2or" (formula "11") (term "0"))
         (rule "nnf_notAnd" (formula "8") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
         (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "8") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
         (rule "mul_literals" (formula "8") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "11") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
         (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
         (rule "mul_literals" (formula "11") (term "1,0,0,0"))
         (rule "commute_or_2" (formula "30") (term "0"))
         (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "16") (ifseqformula "4"))
         (rule "andLeft" (formula "16"))
         (rule "notLeft" (formula "17"))
         (rule "andLeft" (formula "16"))
         (rule "notLeft" (formula "17"))
         (rule "andLeft" (formula "16"))
         (rule "notLeft" (formula "17"))
         (rule "andLeft" (formula "16"))
         (rule "andLeft" (formula "16"))
         (rule "notLeft" (formula "18"))
         (rule "andLeft" (formula "16"))
         (rule "andLeft" (formula "16"))
         (rule "andLeft" (formula "16"))
         (rule "notLeft" (formula "16"))
         (rule "notLeft" (formula "16"))
         (rule "narrowSelectArrayType" (formula "15") (term "1,0,1,0") (ifseqformula "2") (ifseqformula "33"))
         (rule "narrowSelectArrayType" (formula "10") (term "2,0,1,0,0") (ifseqformula "2") (ifseqformula "38"))
         (rule "narrowSelectArrayType" (formula "11") (term "2,0,1,0,0,1,0") (ifseqformula "2") (ifseqformula "38"))
         (rule "narrowSelectArrayType" (formula "8") (term "2,0,0,1,1,0") (ifseqformula "2") (ifseqformula "38"))
         (rule "narrowSelectArrayType" (formula "11") (term "1,1,1,0") (ifseqformula "2") (ifseqformula "34"))
         (rule "nonNull" (formula "18") (inst "i=i"))
         (rule "greater_literals" (formula "18") (term "0,1"))
         (builtin "One Step Simplification" (formula "18"))
         (rule "sub_literals" (formula "18") (term "2,1,0,1"))
         (builtin "One Step Simplification" (formula "18"))
         (rule "andLeft" (formula "18"))
         (rule "notLeft" (formula "18"))
         (rule "narrowSelectArrayType" (formula "18") (term "0,0,1,0") (ifseqformula "2") (ifseqformula "33"))
         (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
         (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "17") (inst "i=i"))
         (rule "sub_literals" (formula "17") (term "2,1,0,1,1"))
         (builtin "One Step Simplification" (formula "17"))
         (rule "greater_literals" (formula "17") (term "0,1"))
         (builtin "One Step Simplification" (formula "17"))
         (rule "andLeft" (formula "17"))
         (rule "notLeft" (formula "17"))
         (rule "narrowSelectArrayType" (formula "17") (term "0,0,1,0") (ifseqformula "2") (ifseqformula "33"))
         (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
         (rule "applyEq" (formula "17") (term "0,1,0,0,1,0,0") (ifseqformula "12"))
         (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "16") (inst "i=i"))
         (rule "greater_literals" (formula "16") (term "0,1"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "sub_literals" (formula "16") (term "2,1,0,1"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "andLeft" (formula "16"))
         (rule "notLeft" (formula "16"))
         (rule "narrowSelectArrayType" (formula "16") (term "0,0,1,0") (ifseqformula "2") (ifseqformula "33"))
         (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
         (rule "applyEq" (formula "16") (term "0,1,0,0,1,0,0") (ifseqformula "13"))
         (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
         (rule "nnf_imp2or" (formula "18") (term "0"))
         (rule "nnf_imp2or" (formula "17") (term "0"))
         (rule "nnf_imp2or" (formula "16") (term "0"))
         (rule "nnf_notAnd" (formula "18") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
         (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
         (rule "mul_literals" (formula "18") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "17") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
         (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "17") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
         (rule "mul_literals" (formula "17") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "16") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
         (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
         (rule "mul_literals" (formula "16") (term "1,0,0,0"))
         (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "31") (ifseqformula "4"))
         (rule "replaceKnownSelect_taclet100_0" (formula "31") (term "1,1,0,0,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet100_2" (formula "31") (term "1,1,0,0,0,0"))
         (rule "andLeft" (formula "31"))
         (rule "notLeft" (formula "32"))
         (rule "andLeft" (formula "31"))
         (rule "notLeft" (formula "32"))
         (rule "andLeft" (formula "31"))
         (rule "andLeft" (formula "31"))
         (rule "notLeft" (formula "33"))
         (rule "notLeft" (formula "32"))
         (rule "andLeft" (formula "31"))
         (rule "andLeft" (formula "31"))
         (rule "andLeft" (formula "31"))
         (rule "andLeft" (formula "31"))
         (rule "notLeft" (formula "31"))
         (rule "notLeft" (formula "31"))
         (rule "nonNull" (formula "33") (inst "i=i"))
         (rule "greater_literals" (formula "33") (term "0,1"))
         (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "43")))
         (rule "sub_literals" (formula "33") (term "2,1,0"))
         (builtin "One Step Simplification" (formula "33"))
         (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "33") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "32") (inst "i=i"))
         (rule "sub_literals" (formula "32") (term "2,1,0,1,1"))
         (builtin "One Step Simplification" (formula "32"))
         (rule "greater_literals" (formula "32") (term "0,1"))
         (builtin "One Step Simplification" (formula "32"))
         (rule "andLeft" (formula "32"))
         (rule "notLeft" (formula "32"))
         (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "32") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "31") (inst "i=i"))
         (rule "greater_literals" (formula "31") (term "0,1"))
         (builtin "One Step Simplification" (formula "31"))
         (rule "sub_literals" (formula "31") (term "2,1,0,1"))
         (builtin "One Step Simplification" (formula "31"))
         (rule "andLeft" (formula "31"))
         (rule "notLeft" (formula "31"))
         (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0"))
         (rule "mul_literals" (formula "31") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0"))
         (rule "pullOutSelect" (formula "42") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "58")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "21"))
         (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "4"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "58")) (ifInst ""  (formula "4")))
         (rule "applyEqReverse" (formula "43") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "41") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "21"))
         (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "4"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")) (ifInst ""  (formula "4")))
         (rule "applyEqReverse" (formula "42") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "40") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "56")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "21"))
         (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "4"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "56")) (ifInst ""  (formula "4")))
         (rule "applyEqReverse" (formula "41") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "39") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "21"))
         (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "4"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")) (ifInst ""  (formula "4")))
         (rule "applyEqReverse" (formula "40") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "38") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "21"))
         (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "4"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")) (ifInst ""  (formula "4")))
         (rule "applyEqReverse" (formula "39") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "37") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "21"))
         (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "4"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")) (ifInst ""  (formula "4")))
         (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "32") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_1"))
         (rule "applyEq" (formula "33") (term "0,1,1,1,0,0") (ifseqformula "32"))
         (rule "applyEq" (formula "37") (term "0") (ifseqformula "32"))
         (rule "simplifySelectOfAnonEQ" (formula "32") (ifseqformula "27"))
         (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "52")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "32") (term "0,0,0") (ifseqformula "20"))
         (rule "replace_known_left" (formula "32") (term "0,0,0,0") (ifseqformula "3"))
         (builtin "One Step Simplification" (formula "32"))
         (rule "simplifySelectOfAnonEQ" (formula "32") (ifseqformula "20"))
         (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "52")) (ifInst ""  (formula "3")))
         (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "32"))
         (rule "applyEqReverse" (formula "33") (term "1,0,0,1,0") (ifseqformula "32"))
         (rule "applyEqReverse" (formula "33") (term "0,1,1,1,0,0") (ifseqformula "32"))
         (rule "hideAuxiliaryEq" (formula "32"))
         (rule "applyEq" (formula "32") (term "1,1,1,0,0") (ifseqformula "12"))
         (rule "pullOutSelect" (formula "31") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_2"))
         (rule "applyEq" (formula "36") (term "0") (ifseqformula "31"))
         (rule "applyEq" (formula "32") (term "0,1,1,1,0,0") (ifseqformula "31"))
         (rule "simplifySelectOfAnonEQ" (formula "31") (ifseqformula "27"))
         (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "51")))
         (rule "replaceKnownSelect_taclet100_4" (formula "31") (term "2,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet100_5" (formula "31") (term "2,0"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "31") (term "0,0,0") (ifseqformula "20"))
         (rule "replace_known_left" (formula "31") (term "0,0,0,0") (ifseqformula "3"))
         (builtin "One Step Simplification" (formula "31"))
         (rule "applyEqReverse" (formula "32") (term "1,0,0,1,0") (ifseqformula "31"))
         (rule "applyEqReverse" (formula "32") (term "0,1,1,1,0,0") (ifseqformula "31"))
         (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "31"))
         (rule "hideAuxiliaryEq" (formula "31"))
         (rule "applyEq" (formula "31") (term "1,1,1,0,0") (ifseqformula "13"))
         (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "24") (ifseqformula "4"))
         (rule "replaceKnownSelect_taclet100_9" (formula "24") (term "0,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet100_10" (formula "24") (term "0,0,1"))
         (rule "replaceKnownSelect_taclet100_12" (formula "24") (term "0,0,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet100_13" (formula "24") (term "0,0,1,0"))
         (rule "replaceKnownSelect_taclet100_15" (formula "24") (term "0,0,1,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet100_16" (formula "24") (term "0,0,1,0,0"))
         (rule "replaceKnownSelect_taclet100_18" (formula "24") (term "0,0,1,0,0,0"))
         (rule "replaceKnownSelect_taclet100_1" (formula "24") (term "1,1,0,0,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet100_19" (formula "24") (term "0,0,1,0,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet100_2" (formula "24") (term "1,1,0,0,0,0"))
         (rule "replaceKnownSelect_taclet100_27" (formula "24") (term "1,1,0,0,0,0,0"))
         (rule "replaceKnownSelect_taclet100_4" (formula "24") (term "1,1,0,0,0,0,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet100_28" (formula "24") (term "1,1,0,0,0,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet100_5" (formula "24") (term "1,1,0,0,0,0,0,0"))
         (rule "replaceKnownSelect_taclet100_24" (formula "24") (term "0,0,1,0,0,0,0,0,0,0"))
         (rule "replaceKnownSelect_taclet100_21" (formula "24") (term "0,0,0,0,0,0,0,0,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet100_25" (formula "24") (term "0,0,1,0,0,0,0,0,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet100_22" (formula "24") (term "0,0,0,0,0,0,0,0,0,0"))
         (rule "andLeft" (formula "24"))
         (rule "notLeft" (formula "25"))
         (rule "andLeft" (formula "24"))
         (rule "andLeft" (formula "24"))
         (rule "notLeft" (formula "26"))
         (rule "notLeft" (formula "25"))
         (rule "andLeft" (formula "24"))
         (rule "notLeft" (formula "25"))
         (rule "andLeft" (formula "24"))
         (rule "andLeft" (formula "24"))
         (rule "andLeft" (formula "24"))
         (rule "andLeft" (formula "24"))
         (rule "notLeft" (formula "25"))
         (rule "notLeft" (formula "24"))
         (rule "nonNull" (formula "26") (inst "i=i"))
         (rule "greater_literals" (formula "26") (term "0,1"))
         (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "39")))
         (rule "sub_literals" (formula "26") (term "2,1,0"))
         (builtin "One Step Simplification" (formula "26"))
         (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
         (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "25") (inst "i=i"))
         (rule "greater_literals" (formula "25") (term "0,1"))
         (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "38")))
         (rule "sub_literals" (formula "25") (term "2,1,0"))
         (builtin "One Step Simplification" (formula "25"))
         (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
         (rule "applyEq" (formula "25") (term "0,1,0,0,1,0,0") (ifseqformula "12"))
         (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
         (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
         (rule "nonNull" (formula "24") (inst "i=i"))
         (rule "greater_literals" (formula "24") (term "0,1"))
         (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "37")))
         (rule "sub_literals" (formula "24") (term "2,1,0"))
         (builtin "One Step Simplification" (formula "24"))
         (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
         (rule "applyEq" (formula "24") (term "0,1,0,0,1,0,0") (ifseqformula "13"))
         (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
         (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
         (rule "commute_or_2" (formula "27") (term "0"))
         (rule "Contract_axiom_for_ghostFieldsNonNull_in_MixServer" (formula "7") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
         (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "52")) (ifInst ""  (formula "2")) (ifInst ""  (formula "40")) (ifInst ""  (formula "39")) (ifInst ""  (formula "38")) (ifInst ""  (formula "41")) (ifInst ""  (formula "42")))
         (rule "eqSymm" (formula "7"))
         (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0,1,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0,0,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,0,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,1,0,0,0"))
         (rule "applyEq" (formula "7") (term "1") (ifseqformula "8"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "andLeft" (formula "7"))
         (rule "andLeft" (formula "7"))
         (rule "applyEq" (formula "9") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
         (rule "applyEq" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
         (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
         (rule "Definition_axiom_for_ghostFieldsNonNull_in_verif_selectvoting_system_core_MixServer" (formula "10") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
         (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "42")) (ifInst ""  (formula "41")) (ifInst ""  (formula "40")) (ifInst ""  (formula "43")) (ifInst ""  (formula "44")))
         (rule "andLeft" (formula "10"))
         (rule "andLeft" (formula "10"))
         (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
         (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
         (rule "applyEq" (formula "12") (term "0,1,0,0,1,0,0") (ifseqformula "18"))
         (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
         (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
         (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
         (rule "nnf_imp2or" (formula "37") (term "0"))
         (rule "nnf_imp2or" (formula "36") (term "0"))
         (rule "cut_direct" (formula "55") (term "0,0"))
         (branch "CUT: o_1 = null TRUE"
            (builtin "One Step Simplification" (formula "56"))
            (rule "false_right" (formula "56"))
            (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
            (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "56")))
            (rule "closeFalse" (formula "2"))
         )
         (branch "CUT: o_1 = null FALSE"
            (builtin "One Step Simplification" (formula "56"))
            (rule "notRight" (formula "56"))
            (rule "replace_known_left" (formula "2") (term "0,0,1,0,0") (ifseqformula "1"))
            (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "56")) (ifInst ""  (formula "57")))
            (rule "closeFalse" (formula "2"))
         )
      )
   )
   (branch "Exceptional Post (decryptBallotsAndRemoveElectionId)"
      (builtin "One Step Simplification" (formula "17"))
      (builtin "One Step Simplification" (formula "22"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "12") (term "1") (ifseqformula "10"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "17") (term "0,0,0,1,1,0,1,1") (ifseqformula "10"))
      (rule "andLeft" (formula "17"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "1,0") (ifseqformula "17"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "0,1,0") (ifseqformula "10"))
      (rule "andLeft" (formula "18"))
      (rule "andLeft" (formula "18"))
      (rule "andLeft" (formula "20"))
      (rule "notLeft" (formula "18"))
      (rule "eqSymm" (formula "7"))
      (rule "eqSymm" (formula "13"))
      (rule "eqSymm" (formula "26") (term "1,0,0,1,0,1"))
      (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "21"))
      (builtin "One Step Simplification" (formula "19"))
      (rule "true_left" (formula "19"))
      (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "24"))
      (builtin "One Step Simplification" (formula "4"))
      (rule "replace_known_right" (formula "12") (term "0,1") (ifseqformula "21"))
      (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "22")))
      (rule "replace_known_right" (formula "19") (term "0,0") (ifseqformula "20"))
      (builtin "One Step Simplification" (formula "19"))
      (rule "andLeft" (formula "19"))
      (rule "nonNull" (formula "15") (inst "i=i"))
      (rule "greater_literals" (formula "15") (term "0,1"))
      (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "23")))
      (rule "sub_literals" (formula "15") (term "2,1,0"))
      (builtin "One Step Simplification" (formula "15"))
      (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
      (rule "nonNull" (formula "26") (term "1,1,1,1,0,0,0,1") (inst "i=i"))
      (rule "sub_literals" (formula "26") (term "2,1,0,1,1,1,1,1,1,0,0,0,1"))
      (builtin "One Step Simplification" (formula "26"))
      (rule "greater_literals" (formula "26") (term "0,1,1,1,1,1,0,0,0,1"))
      (builtin "One Step Simplification" (formula "26"))
      (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "mul_literals" (formula "26") (term "0,1,1,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "array2seqDef" (formula "7") (term "1") (inst "u=u"))
      (rule "eqSymm" (formula "7"))
      (rule "narrowSelectArrayType" (formula "7") (term "2,0") (ifseqformula "1") (ifseqformula "25"))
      (rule "array2seqDef" (formula "7") (term "1") (inst "u=u"))
      (rule "eqSymm" (formula "7"))
      (rule "eqSeqDef" (formula "7") (inst "iv=iv"))
      (rule "andLeft" (formula "7"))
      (rule "lenOfSeqDef" (formula "8") (term "1,1,0,0"))
      (rule "polySimp_elimSub" (formula "8") (term "1,1,1,0,0"))
      (rule "times_zero_2" (formula "8") (term "1,1,1,1,0,0"))
      (rule "add_zero_right" (formula "8") (term "1,1,1,0,0"))
      (rule "lenOfSeqDef" (formula "7") (term "1"))
      (rule "polySimp_elimSub" (formula "7") (term "1,1"))
      (rule "mul_literals" (formula "7") (term "1,1,1"))
      (rule "add_zero_right" (formula "7") (term "1,1"))
      (rule "lenOfSeqDef" (formula "7") (term "0"))
      (rule "polySimp_elimSub" (formula "7") (term "1,0"))
      (rule "times_zero_2" (formula "7") (term "1,1,0"))
      (rule "add_zero_right" (formula "7") (term "1,0"))
      (rule "getOfSeqDef" (formula "8") (term "1,1,0"))
      (rule "castDel" (formula "8") (term "2,1,1,0"))
      (rule "castDel" (formula "8") (term "1,1,1,0"))
      (rule "add_zero_right" (formula "8") (term "0,2,1,1,1,0"))
      (rule "polySimp_elimSub" (formula "8") (term "1,1,0,1,1,0"))
      (rule "times_zero_2" (formula "8") (term "1,1,1,0,1,1,0"))
      (rule "add_zero_right" (formula "8") (term "1,1,0,1,1,0"))
      (rule "getOfSeqDef" (formula "8") (term "0,1,0"))
      (rule "castDel" (formula "8") (term "1,0,1,0"))
      (rule "castDel" (formula "8") (term "2,0,1,0"))
      (rule "add_zero_right" (formula "8") (term "0,2,1,0,1,0"))
      (rule "polySimp_elimSub" (formula "8") (term "1,1,0,0,1,0"))
      (rule "times_zero_2" (formula "8") (term "1,1,1,0,0,1,0"))
      (rule "add_zero_right" (formula "8") (term "1,1,0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "8") (term "0,1,1,0,0"))
      (rule "add_zero_right" (formula "8") (term "0,0,1,1,0,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "7") (term "0,1"))
      (rule "add_zero_right" (formula "7") (term "0,0,1"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0"))
      (rule "add_zero_right" (formula "7") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,1,1,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,1,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,1,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,1,0"))
      (rule "applyEq" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "7"))
      (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,1"))
      (rule "polySimp_mulLiterals" (formula "7") (term "0,0,1"))
      (rule "polySimp_elimOne" (formula "7") (term "0,0,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,0"))
      (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0"))
      (rule "polySimp_elimOne" (formula "7") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,1,1,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,1,1,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,1,0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,1,1,0"))
      (rule "mul_literals" (formula "8") (term "0,1,1,0,1,1,0"))
      (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,1,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,1,0"))
      (rule "mul_literals" (formula "8") (term "0,1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,0,1,0,0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "0,0,0,1,0,0,1,0,0"))
      (rule "polySimp_elimOne" (formula "8") (term "0,0,0,1,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
      (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
      (rule "pullOutSelect" (formula "14") (term "1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_3"))
      (rule "simplifySelectOfAnonEQ" (formula "14") (ifseqformula "11"))
      (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "26")) (ifInst ""  (formula "2")))
      (rule "applyEqReverse" (formula "15") (term "1,0") (ifseqformula "14"))
      (rule "hideAuxiliaryEq" (formula "14"))
      (rule "nnf_imp2or" (formula "16") (term "0"))
      (rule "nnf_imp2or" (formula "8") (term "0"))
      (rule "nnf_imp2or" (formula "27") (term "0,1,1,1,1,1,0,0,0,1"))
      (rule "nnf_notAnd" (formula "16") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
      (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
      (rule "mul_literals" (formula "16") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
      (rule "nnf_notAnd" (formula "8") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
      (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
      (rule "mul_literals" (formula "8") (term "1,0,0,0"))
      (rule "nnf_notAnd" (formula "27") (term "0,0,1,1,1,1,1,0,0,0,1"))
      (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "add_zero_left" (formula "27") (term "0,0,1,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "add_literals" (formula "27") (term "0,0,0,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "mul_literals" (formula "27") (term "1,0,0,0,1,1,1,1,1,0,0,0,1"))
      (rule "Definition_axiom_for_ghostFieldsPre_in_verif_selectvoting_system_core_MixServer" (formula "6") (term "0") (inst "i=i"))
      (builtin "One Step Simplification" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "eqSymm" (formula "12"))
      (rule "eqSymm" (formula "11"))
      (rule "eqSymm" (formula "10"))
      (rule "eqSymm" (formula "9"))
      (rule "eqSymm" (formula "7") (term "1,0"))
      (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
      (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "12"))
      (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "11"))
      (rule "applyEq" (formula "12") (term "1") (ifseqformula "11"))
      (rule "applyEq" (formula "7") (term "0,1,0,0,1,0,0") (ifseqformula "11"))
      (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
      (rule "array2seqDef" (formula "10") (term "0,1,0") (inst "u=u"))
      (rule "array2seqDef" (formula "10") (term "1") (inst "u=u"))
      (rule "eqSymm" (formula "10"))
      (rule "array2seqDef" (formula "9") (term "1") (inst "u=u"))
      (rule "eqSymm" (formula "9"))
      (rule "array2seqDef" (formula "7") (term "0,0,0,1,0") (inst "u=u"))
      (rule "array2seqDef" (formula "7") (term "1,0,0,1,0") (inst "u=u"))
      (rule "array2seqDef" (formula "7") (term "1,1,0") (inst "u=u"))
      (rule "eqSymm" (formula "7") (term "1,0"))
      (rule "array2seqDef" (formula "10") (term "1,1,1") (inst "u=u"))
      (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "9"))
      (rule "array2seqDef" (formula "10") (term "0,1") (inst "u=u"))
      (rule "eqSymm" (formula "10"))
      (rule "eqSeqDef" (formula "10") (inst "iv=iv"))
      (rule "andLeft" (formula "10"))
      (rule "lenOfSeqDef" (formula "10") (term "1"))
      (rule "polySimp_elimSub" (formula "10") (term "1,1"))
      (rule "times_zero_2" (formula "10") (term "1,1,1"))
      (rule "add_zero_right" (formula "10") (term "1,1"))
      (rule "getOfSeqDef" (formula "11") (term "1,1,0"))
      (rule "castDel" (formula "11") (term "1,1,1,0"))
      (rule "castDel" (formula "11") (term "2,1,1,0"))
      (rule "add_zero_right" (formula "11") (term "0,2,1,1,1,0"))
      (rule "polySimp_elimSub" (formula "11") (term "1,1,0,1,1,0"))
      (rule "times_zero_2" (formula "11") (term "1,1,1,0,1,1,0"))
      (rule "add_zero_right" (formula "11") (term "1,1,0,1,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
      (rule "polySimp_addComm1" (formula "11") (term "0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1"))
      (rule "add_zero_right" (formula "10") (term "0,0,1"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,1,1,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,1,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,1,1,0"))
      (rule "applyEq" (formula "11") (term "0,1,0,1,0,0") (ifseqformula "10"))
      (rule "polySimp_addComm1" (formula "11") (term "0,1,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,1"))
      (rule "polySimp_mulLiterals" (formula "10") (term "0,0,1"))
      (rule "polySimp_elimOne" (formula "10") (term "0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,1,1,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,1,1,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,1,0,1,1,0"))
      (rule "mul_literals" (formula "11") (term "0,1,1,0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,1,1,0"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,1,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,1,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "0,0,1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "11") (term "0,0,1,1,1,0,0"))
      (rule "eqSeqDef2" (formula "9") (inst "iv=iv") (ifseqformula "9"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "true_left" (formula "9"))
      (rule "nnf_imp2or" (formula "7") (term "0"))
      (rule "commute_or_2" (formula "25"))
      (rule "nnf_imp2or" (formula "10") (term "0"))
      (rule "nnf_notAnd" (formula "7") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
      (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
      (rule "mul_literals" (formula "7") (term "1,0,0,0"))
      (rule "nnf_notAnd" (formula "10") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
      (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
      (rule "mul_literals" (formula "10") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
      (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "15") (ifseqformula "3"))
      (rule "andLeft" (formula "15"))
      (rule "notLeft" (formula "16"))
      (rule "andLeft" (formula "15"))
      (rule "notLeft" (formula "16"))
      (rule "andLeft" (formula "15"))
      (rule "notLeft" (formula "16"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "15"))
      (rule "notLeft" (formula "17"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "15"))
      (rule "notLeft" (formula "16"))
      (rule "notLeft" (formula "15"))
      (rule "narrowSelectArrayType" (formula "9") (term "2,0,1,0,0") (ifseqformula "1") (ifseqformula "35"))
      (rule "narrowSelectArrayType" (formula "10") (term "1,1,1,0") (ifseqformula "1") (ifseqformula "30"))
      (rule "narrowSelectArrayType" (formula "7") (term "2,0,0,1,1,0") (ifseqformula "1") (ifseqformula "35"))
      (rule "narrowSelectArrayType" (formula "14") (term "1,0,1,0") (ifseqformula "1") (ifseqformula "31"))
      (rule "narrowSelectArrayType" (formula "10") (term "2,0,1,0,0,1,0") (ifseqformula "1") (ifseqformula "35"))
      (rule "nonNull" (formula "17") (inst "i=i"))
      (rule "greater_literals" (formula "17") (term "0,1"))
      (builtin "One Step Simplification" (formula "17"))
      (rule "sub_literals" (formula "17") (term "2,1,0,1"))
      (builtin "One Step Simplification" (formula "17"))
      (rule "andLeft" (formula "17"))
      (rule "notLeft" (formula "17"))
      (rule "narrowSelectArrayType" (formula "17") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "30"))
      (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
      (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
      (rule "nonNull" (formula "16") (inst "i=i"))
      (rule "sub_literals" (formula "16") (term "2,1,0,1,1"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "greater_literals" (formula "16") (term "0,1"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "andLeft" (formula "16"))
      (rule "notLeft" (formula "16"))
      (rule "narrowSelectArrayType" (formula "16") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "30"))
      (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
      (rule "applyEq" (formula "16") (term "0,1,0,0,1,0,0") (ifseqformula "11"))
      (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
      (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
      (rule "nonNull" (formula "15") (inst "i=i"))
      (rule "sub_literals" (formula "15") (term "2,1,0,1,1"))
      (builtin "One Step Simplification" (formula "15"))
      (rule "greater_literals" (formula "15") (term "0,1"))
      (builtin "One Step Simplification" (formula "15"))
      (rule "andLeft" (formula "15"))
      (rule "notLeft" (formula "15"))
      (rule "narrowSelectArrayType" (formula "15") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "30"))
      (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
      (rule "applyEq" (formula "15") (term "0,1,0,0,1,0,0") (ifseqformula "12"))
      (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
      (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
      (rule "nnf_imp2or" (formula "17") (term "0"))
      (rule "nnf_imp2or" (formula "16") (term "0"))
      (rule "nnf_imp2or" (formula "15") (term "0"))
      (rule "nnf_notAnd" (formula "17") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
      (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
      (rule "mul_literals" (formula "17") (term "1,0,0,0"))
      (rule "nnf_notAnd" (formula "16") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
      (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
      (rule "mul_literals" (formula "16") (term "1,0,0,0"))
      (rule "nnf_notAnd" (formula "15") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
      (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
      (rule "mul_literals" (formula "15") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
      (rule "commute_or_2" (formula "24") (term "0"))
      (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "23") (ifseqformula "3"))
      (rule "replaceKnownSelect_taclet10_0" (formula "23") (term "1,1,0,0,0,0,0,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet10_1" (formula "23") (term "1,1,0,0,0,0,0,0"))
      (rule "andLeft" (formula "23"))
      (rule "notLeft" (formula "24"))
      (rule "andLeft" (formula "23"))
      (rule "andLeft" (formula "23"))
      (rule "notLeft" (formula "25"))
      (rule "andLeft" (formula "23"))
      (rule "notLeft" (formula "25"))
      (rule "andLeft" (formula "23"))
      (rule "notLeft" (formula "25"))
      (rule "andLeft" (formula "23"))
      (rule "andLeft" (formula "23"))
      (rule "andLeft" (formula "23"))
      (rule "notLeft" (formula "24"))
      (rule "notLeft" (formula "23"))
      (rule "nonNull" (formula "25") (inst "i=i"))
      (rule "greater_literals" (formula "25") (term "0,1"))
      (builtin "One Step Simplification" (formula "25"))
      (rule "sub_literals" (formula "25") (term "2,1,0,1"))
      (builtin "One Step Simplification" (formula "25"))
      (rule "andLeft" (formula "25"))
      (rule "notLeft" (formula "25"))
      (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
      (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
      (rule "nonNull" (formula "24") (inst "i=i"))
      (rule "sub_literals" (formula "24") (term "2,1,0,1,1"))
      (builtin "One Step Simplification" (formula "24"))
      (rule "greater_literals" (formula "24") (term "0,1"))
      (builtin "One Step Simplification" (formula "24"))
      (rule "andLeft" (formula "24"))
      (rule "notLeft" (formula "24"))
      (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
      (rule "nonNull" (formula "23") (inst "i=i"))
      (rule "greater_literals" (formula "23") (term "0,1"))
      (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "40")))
      (rule "sub_literals" (formula "23") (term "2,1,0"))
      (builtin "One Step Simplification" (formula "23"))
      (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
      (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0") (ifseqformula "12"))
      (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
      (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
      (rule "pullOutSelect" (formula "39") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_2"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")) (ifInst ""  (formula "3")))
      (rule "applyEqReverse" (formula "40") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "38") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_2"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "52")) (ifInst ""  (formula "3")))
      (rule "applyEqReverse" (formula "39") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "37") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_2"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "51")) (ifInst ""  (formula "3")))
      (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "36") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_2"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "50")) (ifInst ""  (formula "3")))
      (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_2"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")) (ifInst ""  (formula "3")))
      (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_2"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")) (ifInst ""  (formula "3")))
      (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "25") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_2"))
      (rule "applyEq" (formula "34") (term "0") (ifseqformula "25"))
      (rule "applyEq" (formula "26") (term "0,1,1,1,0,0") (ifseqformula "25"))
      (rule "simplifySelectOfAnonEQ" (formula "25") (ifseqformula "19"))
      (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "47")) (ifInst ""  (formula "2")))
      (rule "applyEqReverse" (formula "26") (term "1,0,0,1,0") (ifseqformula "25"))
      (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "25"))
      (rule "applyEqReverse" (formula "26") (term "0,1,1,1,0,0") (ifseqformula "25"))
      (rule "hideAuxiliaryEq" (formula "25"))
      (rule "pullOutSelect" (formula "24") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_2"))
      (rule "applyEq" (formula "25") (term "0,1,1,1,0,0") (ifseqformula "24"))
      (rule "applyEq" (formula "33") (term "0") (ifseqformula "24"))
      (rule "simplifySelectOfAnonEQ" (formula "24") (ifseqformula "19"))
      (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "46")) (ifInst ""  (formula "2")))
      (rule "applyEqReverse" (formula "25") (term "1,0,0,1,0") (ifseqformula "24"))
      (rule "applyEqReverse" (formula "25") (term "0,1,1,1,0,0") (ifseqformula "24"))
      (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "24"))
      (rule "hideAuxiliaryEq" (formula "24"))
      (rule "applyEq" (formula "24") (term "1,1,1,0,0") (ifseqformula "11"))
      (rule "Contract_axiom_for_ghostFieldsNonNull_in_MixServer" (formula "6") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
      (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "45")) (ifInst ""  (formula "1")) (ifInst ""  (formula "35")) (ifInst ""  (formula "34")) (ifInst ""  (formula "33")) (ifInst ""  (formula "37")) (ifInst ""  (formula "36")))
      (rule "eqSymm" (formula "6"))
      (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,1,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0,0,0"))
      (rule "applyEq" (formula "6") (term "1") (ifseqformula "7"))
      (builtin "One Step Simplification" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "applyEq" (formula "7") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
      (rule "applyEq" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
      (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
      (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
      (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
      (rule "Definition_axiom_for_ghostFieldsNonNull_in_verif_selectvoting_system_core_MixServer" (formula "9") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
      (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "37")) (ifInst ""  (formula "36")) (ifInst ""  (formula "35")) (ifInst ""  (formula "39")) (ifInst ""  (formula "38")))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "9"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
      (rule "applyEq" (formula "10") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
      (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
      (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
      (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
      (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
      (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
      (rule "nnf_imp2or" (formula "25") (term "0"))
      (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "32") (ifseqformula "3"))
      (rule "andLeft" (formula "32"))
      (rule "notLeft" (formula "33"))
      (rule "andLeft" (formula "32"))
      (rule "andLeft" (formula "32"))
      (rule "notLeft" (formula "34"))
      (rule "andLeft" (formula "32"))
      (rule "notLeft" (formula "34"))
      (rule "notLeft" (formula "33"))
      (rule "andLeft" (formula "32"))
      (rule "andLeft" (formula "32"))
      (rule "andLeft" (formula "32"))
      (rule "andLeft" (formula "32"))
      (rule "notLeft" (formula "33"))
      (rule "notLeft" (formula "32"))
      (rule "nonNull" (formula "34") (inst "i=i"))
      (rule "sub_literals" (formula "34") (term "2,1,0,1,1"))
      (builtin "One Step Simplification" (formula "34"))
      (rule "greater_literals" (formula "34") (term "0,1"))
      (builtin "One Step Simplification" (formula "34"))
      (rule "andLeft" (formula "34"))
      (rule "notLeft" (formula "34"))
      (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "34") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0"))
      (rule "nonNull" (formula "33") (inst "i=i"))
      (rule "greater_literals" (formula "33") (term "0,1"))
      (builtin "One Step Simplification" (formula "33"))
      (rule "sub_literals" (formula "33") (term "2,1,0,1"))
      (builtin "One Step Simplification" (formula "33"))
      (rule "andLeft" (formula "33"))
      (rule "notLeft" (formula "33"))
      (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "33") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0"))
      (rule "nonNull" (formula "32") (inst "i=i"))
      (rule "greater_literals" (formula "32") (term "0,1"))
      (builtin "One Step Simplification" (formula "32"))
      (rule "sub_literals" (formula "32") (term "2,1,0,1"))
      (builtin "One Step Simplification" (formula "32"))
      (rule "andLeft" (formula "32"))
      (rule "notLeft" (formula "32"))
      (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "32") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0"))
      (rule "pullOutSelect" (formula "44") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_3"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "58")))
      (rule "replaceKnownSelect_taclet10_2" (formula "1") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet10_3" (formula "1") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "22"))
      (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "3"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "45") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "43") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_3"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")))
      (rule "replaceKnownSelect_taclet10_4" (formula "1") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet10_5" (formula "1") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "22"))
      (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "3"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "44") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "42") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_3"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "56")))
      (rule "replaceKnownSelect_taclet10_6" (formula "1") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet10_7" (formula "1") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "22"))
      (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "3"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "43") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "41") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_3"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")))
      (rule "replaceKnownSelect_taclet10_8" (formula "1") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet10_9" (formula "1") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "22"))
      (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "3"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "42") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "40") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_3"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")))
      (rule "replaceKnownSelect_taclet10_10" (formula "1") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet10_11" (formula "1") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "22"))
      (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "3"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "41") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "39") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_3"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")))
      (rule "replaceKnownSelect_taclet10_12" (formula "1") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet10_13" (formula "1") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "22"))
      (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "3"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "40") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "34") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_3"))
      (rule "applyEq" (formula "39") (term "0") (ifseqformula "34"))
      (rule "applyEq" (formula "35") (term "0,1,1,1,0,0") (ifseqformula "34"))
      (rule "simplifySelectOfAnonEQ" (formula "34") (ifseqformula "30"))
      (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "52")))
      (rule "replaceKnownSelect_taclet10_14" (formula "34") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet10_15" (formula "34") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "34") (term "0,0,0") (ifseqformula "21"))
      (rule "replace_known_left" (formula "34") (term "0,0,0,0") (ifseqformula "2"))
      (builtin "One Step Simplification" (formula "34"))
      (rule "applyEqReverse" (formula "35") (term "0,1,1,1,0,0") (ifseqformula "34"))
      (rule "applyEqReverse" (formula "35") (term "1,0,0,1,0") (ifseqformula "34"))
      (rule "applyEqReverse" (formula "39") (term "0") (ifseqformula "34"))
      (rule "hideAuxiliaryEq" (formula "34"))
      (rule "pullOutSelect" (formula "33") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_3"))
      (rule "applyEq" (formula "34") (term "0,1,1,1,0,0") (ifseqformula "33"))
      (rule "applyEq" (formula "38") (term "0") (ifseqformula "33"))
      (rule "simplifySelectOfAnonEQ" (formula "33") (ifseqformula "30"))
      (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "51")))
      (rule "replaceKnownSelect_taclet10_16" (formula "33") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet10_17" (formula "33") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "33") (term "0,0,0") (ifseqformula "21"))
      (rule "replace_known_left" (formula "33") (term "0,0,0,0") (ifseqformula "2"))
      (builtin "One Step Simplification" (formula "33"))
      (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "33"))
      (rule "applyEqReverse" (formula "34") (term "0,1,1,1,0,0") (ifseqformula "33"))
      (rule "applyEqReverse" (formula "34") (term "1,0,0,1,0") (ifseqformula "33"))
      (rule "hideAuxiliaryEq" (formula "33"))
      (rule "applyEq" (formula "33") (term "1,1,1,0,0") (ifseqformula "13"))
      (rule "pullOutSelect" (formula "32") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_4"))
      (rule "applyEq" (formula "37") (term "0") (ifseqformula "32"))
      (rule "applyEq" (formula "33") (term "0,1,1,1,0,0") (ifseqformula "32"))
      (rule "simplifySelectOfAnonEQ" (formula "32") (ifseqformula "30"))
      (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "50")))
      (rule "replaceKnownSelect_taclet10_0" (formula "32") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet10_1" (formula "32") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "32") (term "0,0,0") (ifseqformula "21"))
      (rule "replace_known_left" (formula "32") (term "0,0,0,0") (ifseqformula "2"))
      (builtin "One Step Simplification" (formula "32"))
      (rule "applyEqReverse" (formula "33") (term "1,0,0,1,0") (ifseqformula "32"))
      (rule "applyEqReverse" (formula "33") (term "0,1,1,1,0,0") (ifseqformula "32"))
      (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "32"))
      (rule "hideAuxiliaryEq" (formula "32"))
      (rule "applyEq" (formula "32") (term "1,1,1,0,0") (ifseqformula "14"))
      (rule "nnf_imp2or" (formula "27") (term "0"))
      (rule "nnf_imp2or" (formula "26") (term "0"))
      (rule "nnf_imp2or" (formula "6") (term "0"))
      (rule "nnf_imp2or" (formula "7") (term "0"))
      (rule "nnf_imp2or" (formula "8") (term "0"))
      (rule "methodCallParamThrow" (formula "50") (term "1"))
      (builtin "One Step Simplification" (formula "50"))
      (rule "commute_or_2" (formula "9") (term "0"))
      (rule "commute_or_2" (formula "16") (term "0"))
      (rule "commute_or_2" (formula "12") (term "0"))
      (rule "nnf_notAnd" (formula "25") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
      (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
      (rule "mul_literals" (formula "25") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
      (rule "commute_or_2" (formula "19") (term "0"))
      (rule "arrayLengthNotNegative" (formula "15") (term "1,1"))
      (rule "arrayLengthIsAShort" (formula "16") (term "1,1"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "true_left" (formula "16"))
      (rule "arrayLengthIsAShort" (formula "16") (term "1,0"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "true_left" (formula "16"))
      (rule "arrayLengthNotNegative" (formula "16") (term "1,0"))
      (rule "commute_or_2" (formula "20") (term "0"))
      (rule "commute_or_2" (formula "19") (term "0"))
      (rule "commute_or" (formula "30") (term "0,0"))
      (rule "equalityToSeqGetAndSeqLenLeft" (formula "26") (inst "iv=iv"))
      (rule "andLeft" (formula "26"))
      (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
      (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "28"))
      (builtin "One Step Simplification" (formula "26"))
      (rule "true_left" (formula "26"))
      (rule "applyEq" (formula "26") (term "0,0,1,0") (ifseqformula "27"))
      (builtin "One Step Simplification" (formula "26"))
      (rule "true_left" (formula "26"))
      (rule "nnf_imp2or" (formula "36") (term "0"))
      (rule "nnf_imp2or" (formula "35") (term "0"))
      (rule "nnf_imp2or" (formula "34") (term "0"))
      (rule "arrayLengthIsAShort" (formula "14") (term "0"))
      (builtin "One Step Simplification" (formula "14"))
      (rule "true_left" (formula "14"))
      (rule "arrayLengthNotNegative" (formula "14") (term "0"))
      (rule "applyEq" (formula "14") (term "0") (ifseqformula "15"))
      (rule "arrayLengthNotNegative" (formula "13") (term "1"))
      (rule "arrayLengthIsAShort" (formula "13") (term "1"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "true_left" (formula "13"))
      (rule "arrayLengthIsAShort" (formula "13") (term "0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "true_left" (formula "13"))
      (rule "arrayLengthNotNegative" (formula "13") (term "0"))
      (rule "applyEq" (formula "13") (term "0") (ifseqformula "14"))
      (rule "nnf_notAnd" (formula "30") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "30") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0"))
      (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "30") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
      (rule "mul_literals" (formula "30") (term "1,0,0,0"))
      (rule "nnf_notAnd" (formula "29") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0"))
      (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "29") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0"))
      (rule "mul_literals" (formula "29") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "29") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0"))
      (rule "nnf_notAnd" (formula "6") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
      (rule "mul_literals" (formula "6") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "6") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
      (rule "mul_literals" (formula "6") (term "1,0,0,0"))
      (rule "nnf_notAnd" (formula "7") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
      (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
      (rule "mul_literals" (formula "7") (term "1,0,0,0"))
      (rule "nnf_notAnd" (formula "8") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
      (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
      (rule "mul_literals" (formula "8") (term "1,0,0,0"))
      (rule "arrayLengthNotNegative" (formula "11") (term "1,0,1,0,0"))
      (rule "arrayLengthNotNegative" (formula "12") (term "1,0,0,0"))
      (rule "arrayLengthIsAShort" (formula "13") (term "1,0,1,0,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "true_left" (formula "13"))
      (rule "arrayLengthIsAShort" (formula "13") (term "1,0,0,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "true_left" (formula "13"))
      (rule "arrayLengthIsAShort" (formula "13") (term "1,1"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "true_left" (formula "13"))
      (rule "arrayLengthNotNegative" (formula "13") (term "1,1"))
      (rule "nnf_notAnd" (formula "40") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "40") (term "0,0,0"))
      (rule "times_zero_1" (formula "40") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "40") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "0,0,0"))
      (rule "mul_literals" (formula "40") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "40") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "40") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "40") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "40") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "40") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "40") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "40") (term "1,1,0,0"))
      (rule "nnf_notAnd" (formula "39") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "39") (term "0,0,0"))
      (rule "times_zero_1" (formula "39") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "39") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "0,0,0"))
      (rule "mul_literals" (formula "39") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "39") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "39") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "39") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "39") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "39") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "39") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "39") (term "1,1,0,0"))
      (rule "nnf_notAnd" (formula "38") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0"))
      (rule "times_zero_1" (formula "38") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "38") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0"))
      (rule "mul_literals" (formula "38") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "38") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "38") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0"))
      (rule "lenNonNegative" (formula "14") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "14"))
      (rule "applyEq" (formula "14") (term "0") (ifseqformula "15"))
      (rule "arrayLengthIsAShort" (formula "35") (term "1,1,0"))
      (builtin "One Step Simplification" (formula "35"))
      (rule "true_left" (formula "35"))
      (rule "arrayLengthNotNegative" (formula "35") (term "1,1,0"))
      (rule "commute_or_2" (formula "32") (term "0"))
      (rule "commute_or" (formula "9") (term "0,0"))
      (rule "commute_or" (formula "23") (term "0,0"))
      (rule "commute_or" (formula "16") (term "0,0"))
      (rule "commute_or" (formula "26") (term "0,0"))
      (rule "commute_or" (formula "25") (term "0,0"))
      (rule "commute_or" (formula "24") (term "0,0"))
      (rule "commute_or_2" (formula "34") (term "0"))
      (rule "commute_or_2" (formula "33") (term "0"))
      (rule "commute_or_2" (formula "6") (term "0"))
      (rule "commute_or_2" (formula "7") (term "0"))
      (rule "tryCatchThrow" (formula "58") (term "1"))
      (rule "commute_or_2" (formula "8") (term "0"))
      (rule "commute_or_2" (formula "42") (term "0"))
      (rule "commute_or_2" (formula "41") (term "0"))
      (rule "commute_or_2" (formula "40") (term "0"))
      (rule "commute_or" (formula "32") (term "0,0"))
      (rule "commute_or" (formula "34") (term "0,0"))
      (rule "commute_or" (formula "33") (term "0,0"))
      (rule "commute_or" (formula "6") (term "0,0"))
      (rule "commute_or" (formula "6") (term "0,0"))
      (rule "commute_or" (formula "6") (term "0,0"))
      (rule "commute_or" (formula "39") (term "0,0"))
      (rule "commute_or" (formula "38") (term "0,0"))
      (rule "commute_or" (formula "37") (term "0,0"))
      (rule "ifthenelse_to_or_right" (formula "20") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "20"))
      (rule "nnf_notAnd" (formula "20") (term "0,0,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,0,0,0"))
      (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0,0,0,0"))
      (rule "add_literals" (formula "20") (term "0,0,0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,0,0,0"))
      (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,0,0,0"))
      (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,0,0,0"))
      (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,0,0,0"))
      (rule "add_zero_left" (formula "20") (term "0,0,1,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,0,0"))
      (rule "nnf_notAnd" (formula "20") (term "0,1,1,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "20") (term "0,0,1,1,0,0,0"))
      (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,1,1,0,0,0"))
      (rule "add_literals" (formula "20") (term "0,0,0,0,1,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,1,1,0,0,0"))
      (rule "mul_literals" (formula "20") (term "1,0,0,1,1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "20") (term "1,0,1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,1,1,0,0,0"))
      (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,1,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,1,1,0,0,0"))
      (rule "add_literals" (formula "20") (term "0,0,0,1,0,1,1,0,0,0"))
      (rule "add_zero_left" (formula "20") (term "0,0,1,0,1,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "20") (term "1,1,0,1,1,0,0,0"))
      (rule "commute_or" (formula "20") (term "0,0"))
      (rule "commute_or_2" (formula "20") (term "0"))
      (rule "commute_or" (formula "20") (term "1,1,0"))
      (rule "commute_or_2" (formula "20") (term "0,1,0"))
      (rule "commute_or_2" (formula "20") (term "0,1,1,0"))
      (rule "commute_or" (formula "20") (term "0,0,1,0"))
      (rule "commute_or" (formula "20") (term "0,0,1,1,0"))
      (rule "ifthenelse_to_or_right" (formula "13") (term "0,0,0"))
      (rule "nnf_notAnd" (formula "13") (term "0,0,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0,0,0"))
      (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0,0,0"))
      (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0,0,0"))
      (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,0,0,0"))
      (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,0,0,0"))
      (rule "add_literals" (formula "13") (term "0,0,0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0,0"))
      (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,0"))
      (rule "commute_or" (formula "13") (term "0,0"))
      (rule "commute_or_2" (formula "13") (term "0"))
      (rule "commute_or_2" (formula "13") (term "0,1,0"))
      (rule "commute_or" (formula "13") (term "1,1,0"))
      (rule "commute_or" (formula "13") (term "0,0,1,0"))
      (rule "cnf_rightDist" (formula "20") (term "1,1,0"))
      (rule "commute_or_2" (formula "20") (term "0,1,1,0"))
      (rule "inEqSimp_or_tautInEq1" (formula "20") (term "0,0,1,1,0"))
      (rule "add_zero_right" (formula "20") (term "1,1,0,0,1,1,0"))
      (rule "qeq_literals" (formula "20") (term "1,0,0,1,1,0"))
      (builtin "One Step Simplification" (formula "20"))
      (rule "shift_paren_or" (formula "20") (term "1,1,0"))
      (rule "commute_or" (formula "20") (term "0,1,1,0"))
      (rule "cnf_rightDist" (formula "20") (term "0"))
      (rule "distr_forallAnd" (formula "20"))
      (rule "andLeft" (formula "20"))
      (rule "commute_or_2" (formula "20") (term "0"))
      (rule "shift_paren_or" (formula "21") (term "0"))
      (rule "commute_or_2" (formula "21") (term "0,0"))
      (rule "shift_paren_or" (formula "20") (term "0,0"))
      (rule "commute_or_2" (formula "21") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "21"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0,1,0") (ifseqformula "1"))
      (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "47"))
      (builtin "One Step Simplification" (formula "19"))
      (rule "shift_paren_or" (formula "21") (term "0,0,0"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "30") (term "1,0") (ifseqformula "1"))
      (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "44"))
      (builtin "One Step Simplification" (formula "30"))
      (rule "commute_or" (formula "21") (term "0,0,0,0"))
      (builtin "One Step Simplification" (formula "21"))
      (rule "cnf_rightDist" (formula "13") (term "1,1,0"))
      (rule "cnf_rightDist" (formula "13") (term "0"))
      (rule "distr_forallAnd" (formula "13"))
      (rule "andLeft" (formula "13"))
      (rule "commute_or" (formula "14") (term "0"))
      (rule "commute_or_2" (formula "13") (term "0"))
      (rule "commute_or" (formula "14") (term "1,1,0"))
      (rule "shift_paren_or" (formula "13") (term "0,0"))
      (rule "cnf_rightDist" (formula "14") (term "0"))
      (rule "distr_forallAnd" (formula "14"))
      (rule "andLeft" (formula "14"))
      (rule "commute_or_2" (formula "14") (term "0"))
      (rule "shift_paren_or" (formula "15") (term "0"))
      (rule "commute_or_2" (formula "15") (term "0,0"))
      (rule "shift_paren_or" (formula "14") (term "0,0"))
      (rule "commute_or" (formula "14") (term "0,0,0"))
      (rule "inEqSimp_or_tautInEq1" (formula "14") (term "0,0"))
      (rule "add_literals" (formula "14") (term "1,1,0,0"))
      (rule "qeq_literals" (formula "14") (term "1,0,0"))
      (builtin "One Step Simplification" (formula "14"))
      (rule "true_left" (formula "14"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "15") (term "0,1") (ifseqformula "1"))
      (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "48"))
      (builtin "One Step Simplification" (formula "15"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "7") (term "1,1") (ifseqformula "1"))
      (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "48"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "shift_paren_or" (formula "14") (term "0,0,0"))
      (rule "commute_or" (formula "14") (term "0,0,0,0"))
      (builtin "One Step Simplification" (formula "14"))
      (rule "ifElseUnfold" (formula "61") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "61") (term "1") (newnames "x_1"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "0,1,0,0,0") (ifseqformula "1"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "0,1,0,1,0,0") (ifseqformula "1"))
      (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "57"))
      (builtin "One Step Simplification" (formula "14"))
      (rule "ifthenelse_to_or_left" (formula "26") (term "0,0,0,0"))
      (rule "eqSymm" (formula "26") (term "1,1,0,0,0,0"))
      (rule "nnf_notAnd" (formula "26") (term "0,0,0,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0,0,0,0"))
      (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0,0,0,0"))
      (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,0,0,0,0"))
      (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0,0,0,0,0"))
      (rule "add_literals" (formula "26") (term "0,0,0,0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0,0"))
      (rule "commute_or" (formula "26") (term "0,0,0"))
      (rule "commute_or_2" (formula "26") (term "0,0"))
      (rule "commute_or_2" (formula "26") (term "0"))
      (rule "commute_or" (formula "26") (term "1,1,0"))
      (rule "cnf_rightDist" (formula "26") (term "1,1,0"))
      (rule "cnf_rightDist" (formula "26") (term "0"))
      (rule "distr_forallAnd" (formula "26"))
      (rule "andLeft" (formula "26"))
      (rule "commute_or" (formula "27") (term "0"))
      (rule "shift_paren_or" (formula "26") (term "0"))
      (rule "commute_or_2" (formula "26") (term "0,0"))
      (rule "commute_or" (formula "27") (term "1,1,0"))
      (rule "cnf_rightDist" (formula "27") (term "0"))
      (rule "distr_forallAnd" (formula "27"))
      (rule "andLeft" (formula "27"))
      (rule "commute_or_2" (formula "27") (term "0"))
      (rule "shift_paren_or" (formula "28") (term "0"))
      (rule "commute_or_2" (formula "27") (term "0,0"))
      (rule "commute_or_2" (formula "28") (term "0,0"))
      (rule "shift_paren_or" (formula "26") (term "0,0,0"))
      (rule "shift_paren_or" (formula "27") (term "0,0,0"))
      (rule "shift_paren_or" (formula "28") (term "0,0,0"))
      (rule "commute_or_2" (formula "26") (term "0,0,0,0"))
      (builtin "One Step Simplification" (formula "26"))
      (rule "commute_or" (formula "27") (term "0,0,0,0"))
      (rule "inEqSimp_or_tautInEq1" (formula "27") (term "0,0,0"))
      (rule "add_zero_right" (formula "27") (term "1,1,0,0,0"))
      (rule "qeq_literals" (formula "27") (term "1,0,0,0"))
      (builtin "One Step Simplification" (formula "27"))
      (rule "true_left" (formula "27"))
      (rule "equality_comparison_simple" (formula "64") (term "1"))
      (builtin "One Step Simplification" (formula "64"))
      (rule "replace_known_right" (formula "64") (term "0,0,1,0") (ifseqformula "59"))
      (builtin "One Step Simplification" (formula "64"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "15") (term "0,1,1") (ifseqformula "1"))
      (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "54"))
      (builtin "One Step Simplification" (formula "15"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "56") (term "0") (ifseqformula "1"))
      (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "57"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "59") (term "0") (ifseqformula "2"))
      (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "60"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "59") (term "0") (ifseqformula "3"))
      (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "60"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "ifElseSplit" (formula "68"))
      (branch "if x_1 true"
         (builtin "One Step Simplification" (formula "69"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "if x_1 false"
         (builtin "One Step Simplification" (formula "69"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "ifElseSplit" (formula "68"))
         (branch "if exc_1 instanceof java.lang.Throwable true"
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "64")))
            (rule "true_left" (formula "1"))
            (rule "variableDeclaration" (formula "68") (term "1") (newnames "e_1"))
            (rule "reference_type_cast" (formula "68") (term "1"))
            (branch "Normal Execution (exc_1 instanceof java.lang.Throwable)"
               (builtin "One Step Simplification" (formula "69"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "assignment" (formula "68") (term "1"))
               (builtin "One Step Simplification" (formula "68"))
               (rule "emptyModality" (formula "68") (term "1"))
               (builtin "One Step Simplification" (formula "68") (ifInst ""  (formula "63")) (ifInst ""  (formula "63")) (ifInst ""  (formula "53")))
               (rule "eqSymm" (formula "68") (term "1,0,0,1"))
               (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "68") (term "0") (ifseqformula "6"))
               (rule "replaceKnownSelect_taclet10_18" (formula "68") (term "0,0,1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10_19" (formula "68") (term "0,0,1,0"))
               (rule "replaceKnownSelect_taclet10_20" (formula "68") (term "0,0,1,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10_21" (formula "68") (term "0,0,1,0,0"))
               (rule "replaceKnownSelect_taclet10_22" (formula "68") (term "0,0,1,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10_23" (formula "68") (term "0,0,1,0,0,0"))
               (rule "replaceKnownSelect_taclet10_24" (formula "68") (term "0,0,1,0,0,0,0"))
               (rule "replaceKnownSelect_taclet10_30" (formula "68") (term "1,1,0,0,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10_25" (formula "68") (term "0,0,1,0,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10_31" (formula "68") (term "1,1,0,0,0,0,0"))
               (rule "replaceKnownSelect_taclet10_32" (formula "68") (term "1,1,0,0,0,0,0,0"))
               (rule "replaceKnownSelect_taclet10_34" (formula "68") (term "1,1,0,0,0,0,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10_33" (formula "68") (term "1,1,0,0,0,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10_35" (formula "68") (term "1,1,0,0,0,0,0,0,0"))
               (rule "replaceKnownSelect_taclet10_26" (formula "68") (term "0,0,1,0,0,0,0,0,0,0,0"))
               (rule "replaceKnownSelect_taclet10_28" (formula "68") (term "0,0,0,0,0,0,0,0,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10_27" (formula "68") (term "0,0,1,0,0,0,0,0,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10_29" (formula "68") (term "0,0,0,0,0,0,0,0,0,0,0"))
               (rule "replace_known_right" (formula "68") (term "0,1,0,0,0") (ifseqformula "60"))
               (builtin "One Step Simplification" (formula "68") (ifInst ""  (formula "57")) (ifInst ""  (formula "58")) (ifInst ""  (formula "59")) (ifInst ""  (formula "61")) (ifInst ""  (formula "62")))
               (rule "nonNull" (formula "68") (term "1,0,0") (inst "i=i"))
               (rule "greater_literals" (formula "68") (term "0,1,1,0,0"))
               (builtin "One Step Simplification" (formula "68") (ifInst ""  (formula "55")))
               (rule "sub_literals" (formula "68") (term "2,1,0,1,0,0"))
               (builtin "One Step Simplification" (formula "68"))
               (rule "inEqSimp_ltToLeq" (formula "68") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "68") (term "1,0,0,1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "68") (term "0,0,0,1,0,0"))
               (rule "applyEq" (formula "68") (term "0,1,0,0,1,0,0,1,0,0") (ifseqformula "23"))
               (rule "inEqSimp_sepPosMonomial0" (formula "68") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "68") (term "1,1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "68") (term "1,1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "68") (term "1,1,1,0,0,1,0,0"))
               (rule "mul_literals" (formula "68") (term "0,1,1,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "68") (term "1,1,1,0,0,1,0,0"))
               (rule "nonNull" (formula "68") (term "1,0") (inst "i=i"))
               (rule "greater_literals" (formula "68") (term "0,1,1,0"))
               (builtin "One Step Simplification" (formula "68") (ifInst ""  (formula "56")))
               (rule "sub_literals" (formula "68") (term "2,1,0,1,0"))
               (builtin "One Step Simplification" (formula "68"))
               (rule "inEqSimp_ltToLeq" (formula "68") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "68") (term "1,0,0,1,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "68") (term "0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "68") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "68") (term "1,1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "68") (term "1,1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "68") (term "1,1,1,0,0,1,0"))
               (rule "mul_literals" (formula "68") (term "0,1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "68") (term "1,1,1,0,0,1,0"))
               (rule "nonNull" (formula "68") (term "0,0,0") (inst "i=i"))
               (rule "greater_literals" (formula "68") (term "0,1,0,0,0"))
               (builtin "One Step Simplification" (formula "68") (ifInst ""  (formula "54")))
               (rule "sub_literals" (formula "68") (term "2,1,0,0,0,0"))
               (builtin "One Step Simplification" (formula "68"))
               (rule "inEqSimp_ltToLeq" (formula "68") (term "1,0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "68") (term "1,0,0,1,0,0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "68") (term "0,0,0,0,0,0"))
               (rule "applyEq" (formula "68") (term "0,1,0,0,1,0,0,0,0,0") (ifseqformula "25"))
               (rule "inEqSimp_sepPosMonomial0" (formula "68") (term "1,0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "68") (term "1,1,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "68") (term "1,1,0,0,0,0,0"))
               (rule "mul_literals" (formula "68") (term "0,1,1,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "68") (term "1,1,1,0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "68") (term "1,1,1,0,0,0,0,0"))
               (rule "nnf_imp2or" (formula "68") (term "0,1,0"))
               (rule "nnf_imp2or" (formula "68") (term "0,1,0,0"))
               (rule "nnf_imp2or" (formula "68") (term "0,0,0,0"))
               (rule "nnf_notAnd" (formula "68") (term "0,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "68") (term "1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "68") (term "1,0,0,1,0,0,1,0"))
               (rule "mul_literals" (formula "68") (term "0,1,0,0,1,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "68") (term "0,0,1,0,0,1,0"))
               (rule "add_literals" (formula "68") (term "0,0,0,1,0,0,1,0"))
               (rule "add_zero_left" (formula "68") (term "0,0,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "68") (term "1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "68") (term "1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "68") (term "1,1,0,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "68") (term "0,0,0,1,0"))
               (rule "mul_literals" (formula "68") (term "1,0,0,0,0,0,1,0"))
               (rule "add_literals" (formula "68") (term "0,0,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "68") (term "0,0,0,1,0"))
               (rule "mul_literals" (formula "68") (term "1,0,0,0,1,0"))
               (rule "nnf_notAnd" (formula "68") (term "0,0,1,0,0"))
               (rule "inEqSimp_notLeq" (formula "68") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "68") (term "1,0,0,1,0,0,1,0,0"))
               (rule "mul_literals" (formula "68") (term "0,1,0,0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "68") (term "0,0,1,0,0,1,0,0"))
               (rule "add_literals" (formula "68") (term "0,0,0,1,0,0,1,0,0"))
               (rule "add_zero_left" (formula "68") (term "0,0,1,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "68") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "68") (term "1,1,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "68") (term "1,1,0,0,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "68") (term "0,0,0,1,0,0"))
               (rule "times_zero_1" (formula "68") (term "1,0,0,0,0,0,1,0,0"))
               (rule "add_literals" (formula "68") (term "0,0,0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "68") (term "0,0,0,1,0,0"))
               (rule "mul_literals" (formula "68") (term "1,0,0,0,1,0,0"))
               (rule "nnf_notAnd" (formula "68") (term "0,0,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "68") (term "1,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "68") (term "1,0,0,1,0,0,0,0,0"))
               (rule "mul_literals" (formula "68") (term "0,1,0,0,1,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "68") (term "0,0,1,0,0,0,0,0"))
               (rule "add_literals" (formula "68") (term "0,0,0,1,0,0,0,0,0"))
               (rule "add_zero_left" (formula "68") (term "0,0,1,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "68") (term "1,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "68") (term "1,1,0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "68") (term "1,1,0,0,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "68") (term "0,0,0,0,0,0"))
               (rule "times_zero_1" (formula "68") (term "1,0,0,0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "68") (term "0,0,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "68") (term "0,0,0,0,0,0"))
               (rule "mul_literals" (formula "68") (term "1,0,0,0,0,0,0"))
               (rule "andRight" (formula "68"))
               (branch "Case 1"
                  (rule "andRight" (formula "68"))
                  (branch "Case 1"
                     (rule "andRight" (formula "68"))
                     (branch "Case 1"
                        (rule "allRight" (formula "68") (inst "sk=i_5"))
                        (rule "orRight" (formula "68"))
                        (rule "orRight" (formula "68"))
                        (rule "notRight" (formula "70"))
                        (rule "inEqSimp_geqRight" (formula "70"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "70"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_5"))
                        (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "52"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "58")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "41"))
                        (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "44"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "41"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "58")) (ifInst ""  (formula "44")))
                        (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "7") (ifseqformula "57"))
                        (rule "ifthenelse_split" (formula "22") (term "1"))
                        (branch "self.unsigned.length ≥ 1 TRUE"
                           (rule "replace_known_left" (formula "24") (term "0,1,1,0") (ifseqformula "22"))
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "replace_known_left" (formula "18") (term "0,0") (ifseqformula "22"))
                           (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "17")))
                           (rule "true_left" (formula "18"))
                           (rule "replace_known_left" (formula "24") (term "0,1,1,0") (ifseqformula "21"))
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "21"))
                           (rule "leq_literals" (formula "17") (term "0"))
                           (builtin "One Step Simplification" (formula "17"))
                           (rule "true_left" (formula "17"))
                           (rule "inEqSimp_or_tautInEq1" (formula "23") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "23") (term "1,0"))
                           (rule "polySimp_pullOutFactor1" (formula "23") (term "0,1,0"))
                           (rule "add_literals" (formula "23") (term "1,0,1,0"))
                           (rule "times_zero_1" (formula "23") (term "0,1,0"))
                           (rule "leq_literals" (formula "23") (term "1,0"))
                           (builtin "One Step Simplification" (formula "23"))
                           (rule "true_left" (formula "23"))
                           (rule "ifthenelse_split" (formula "30") (term "1"))
                           (branch "msg.length ≥ 1 TRUE"
                              (rule "replace_known_left" (formula "33") (term "0,1,1,0") (ifseqformula "30"))
                              (builtin "One Step Simplification" (formula "33"))
                              (rule "replace_known_left" (formula "34") (term "0,1,1,0") (ifseqformula "30"))
                              (builtin "One Step Simplification" (formula "34"))
                              (rule "replace_known_left" (formula "32") (term "0,1,1,0,0") (ifseqformula "30"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "inEqSimp_subsumption1" (formula "27") (ifseqformula "30"))
                              (rule "leq_literals" (formula "27") (term "0"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "commute_or_2" (formula "32") (term "0"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "commute_or_2" (formula "33") (term "0"))
                              (rule "inEqSimp_or_tautInEq1" (formula "33") (term "0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0,0"))
                              (rule "polySimp_pullOutFactor1" (formula "33") (term "0,1,0,0"))
                              (rule "add_literals" (formula "33") (term "1,0,1,0,0"))
                              (rule "times_zero_1" (formula "33") (term "0,1,0,0"))
                              (rule "leq_literals" (formula "33") (term "1,0,0"))
                              (builtin "One Step Simplification" (formula "33"))
                              (rule "true_left" (formula "33"))
                              (rule "commute_or_2" (formula "31") (term "0,0"))
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "ifthenelse_split" (formula "30") (term "0"))
                              (branch "self.concatenated.length ≥ 1 TRUE"
                                 (rule "applyEq" (formula "27") (term "0") (ifseqformula "31"))
                                 (rule "applyEq" (formula "33") (term "1,1,1,0") (ifseqformula "31"))
                                 (rule "applyEq" (formula "30") (term "0") (ifseqformula "31"))
                                 (rule "applyEq" (formula "31") (term "1,1,0,0") (ifseqformula "30"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "inEqSimp_subsumption1" (formula "27") (ifseqformula "29"))
                                 (rule "leq_literals" (formula "27") (term "0"))
                                 (builtin "One Step Simplification" (formula "27"))
                                 (rule "true_left" (formula "27"))
                                 (rule "inEqSimp_or_tautInEq3" (formula "31") (term "0"))
                                 (rule "inEqSimp_homoInEq1" (formula "31") (term "1,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "31") (term "0,1,0"))
                                 (rule "add_literals" (formula "31") (term "1,0,1,0"))
                                 (rule "times_zero_1" (formula "31") (term "0,1,0"))
                                 (rule "leq_literals" (formula "31") (term "1,0"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "true_left" (formula "31"))
                                 (rule "allLeft" (formula "31") (inst "t=i_5"))
                                 (rule "replace_known_left" (formula "31") (term "0,0,0") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "31") (term "1") (ifseqformula "2"))
                                 (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,1"))
                                 (rule "add_literals" (formula "31") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "31") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "31") (term "0,0,1"))
                                 (rule "leq_literals" (formula "31") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "31"))
                                 (rule "qeq_literals" (formula "1") (term "0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "self.concatenated.length ≥ 1 FALSE"
                                 (rule "eqSymm" (formula "30"))
                                 (rule "inEqSimp_geqRight" (formula "54"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "applyEq" (formula "32") (term "1,1,0,0,0") (ifseqformula "31"))
                                 (rule "applyEq" (formula "33") (term "1,1,0,0") (ifseqformula "31"))
                                 (rule "applyEq" (formula "30") (term "0") (ifseqformula "31"))
                                 (rule "qeq_literals" (formula "30"))
                                 (rule "closeFalse" (formula "30"))
                              )
                           )
                           (branch "msg.length ≥ 1 FALSE"
                              (builtin "One Step Simplification" (formula "30"))
                              (rule "replace_known_right" (formula "31") (term "0,1,1,0,0") (ifseqformula "55"))
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "replace_known_right" (formula "32") (term "0,1,1,0") (ifseqformula "55"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "replace_known_right" (formula "33") (term "0,1,1,0") (ifseqformula "55"))
                              (builtin "One Step Simplification" (formula "33"))
                              (rule "inEqSimp_geqRight" (formula "55"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_antiSymm" (formula "28") (ifseqformula "1"))
                              (rule "applyEq" (formula "35") (term "1,1,1,0,0,0") (ifseqformula "28"))
                              (rule "add_zero_right" (formula "35") (term "1,1,0,0,0"))
                              (builtin "One Step Simplification" (formula "35"))
                              (rule "applyEq" (formula "33") (term "1,1,0,0,0,0") (ifseqformula "28"))
                              (rule "applyEq" (formula "34") (term "1,1,0,0,0") (ifseqformula "28"))
                              (rule "applyEq" (formula "29") (term "0") (ifseqformula "28"))
                              (rule "qeq_literals" (formula "29"))
                              (rule "true_left" (formula "29"))
                              (rule "applyEq" (formula "1") (term "0") (ifseqformula "28"))
                              (rule "leq_literals" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "inEqSimp_notGeq" (formula "30") (term "0"))
                              (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                              (rule "add_literals" (formula "30") (term "0,0,0"))
                              (rule "add_zero_left" (formula "30") (term "0,0"))
                              (rule "inEqSimp_or_tautInEq0" (formula "31") (term "0,0,0,0"))
                              (rule "add_zero_right" (formula "31") (term "1,1,0,0,0,0"))
                              (rule "qeq_literals" (formula "31") (term "1,0,0,0,0"))
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "true_left" (formula "31"))
                              (rule "inEqSimp_or_tautInEq1" (formula "31") (term "0,0,0"))
                              (rule "add_zero_right" (formula "31") (term "1,1,0,0,0"))
                              (rule "qeq_literals" (formula "31") (term "1,0,0,0"))
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "true_left" (formula "31"))
                              (rule "commute_or_2" (formula "31") (term "0"))
                              (rule "inEqSimp_or_tautInEq1" (formula "31") (term "0,0"))
                              (rule "add_zero_right" (formula "31") (term "1,1,0,0"))
                              (rule "qeq_literals" (formula "31") (term "1,0,0"))
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "true_left" (formula "31"))
                              (rule "allLeft" (formula "31") (inst "t=i_5"))
                              (rule "replace_known_left" (formula "31") (term "0,0,0") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "31") (term "0") (ifseqformula "1"))
                              (rule "qeq_literals" (formula "31") (term "0,0"))
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "31"))
                              (rule "andLeft" (formula "2"))
                              (rule "inEqSimp_homoInEq1" (formula "2"))
                              (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                              (rule "add_literals" (formula "2") (term "1,1,0"))
                              (rule "times_zero_1" (formula "2") (term "1,0"))
                              (rule "add_zero_right" (formula "2") (term "0"))
                              (rule "leq_literals" (formula "2"))
                              (rule "closeFalse" (formula "2"))
                           )
                        )
                        (branch "self.unsigned.length ≥ 1 FALSE"
                           (rule "replace_known_right" (formula "24") (term "0,1,1,0") (ifseqformula "57"))
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "replace_known_right" (formula "18") (term "0,0") (ifseqformula "57"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "qeq_literals" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "replace_known_right" (formula "22") (term "0,1,1,0") (ifseqformula "56"))
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "inEqSimp_geqRight" (formula "56"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_antiSymm" (formula "18") (ifseqformula "1"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "18"))
                           (rule "leq_literals" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "applyEq" (formula "23") (term "1,1,0,0") (ifseqformula "17"))
                           (builtin "One Step Simplification" (formula "23"))
                           (rule "applyEq" (formula "18") (term "0") (ifseqformula "17"))
                           (rule "qeq_literals" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "applyEq" (formula "23") (term "1,1,1,0,0") (ifseqformula "17"))
                           (rule "add_zero_right" (formula "23") (term "1,1,0,0"))
                           (builtin "One Step Simplification" (formula "23"))
                           (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0"))
                           (rule "add_literals" (formula "22") (term "1,1,0"))
                           (rule "qeq_literals" (formula "22") (term "1,0"))
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "true_left" (formula "22"))
                           (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0"))
                           (rule "add_zero_right" (formula "22") (term "1,1,0"))
                           (rule "qeq_literals" (formula "22") (term "1,0"))
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "true_left" (formula "22"))
                           (rule "ifthenelse_split" (formula "29") (term "1"))
                           (branch "msg.length ≥ 1 TRUE"
                              (rule "replace_known_left" (formula "32") (term "0,1,1,0") (ifseqformula "29"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "replace_known_left" (formula "31") (term "0,1,1,0,0") (ifseqformula "29"))
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "replace_known_left" (formula "33") (term "0,1,1,0") (ifseqformula "29"))
                              (builtin "One Step Simplification" (formula "33"))
                              (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "29"))
                              (rule "leq_literals" (formula "26") (term "0"))
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "true_left" (formula "26"))
                              (rule "commute_or_2" (formula "31") (term "0"))
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "commute_or_2" (formula "32") (term "0"))
                              (rule "inEqSimp_or_tautInEq1" (formula "32") (term "0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0,0"))
                              (rule "polySimp_pullOutFactor1" (formula "32") (term "0,1,0,0"))
                              (rule "add_literals" (formula "32") (term "1,0,1,0,0"))
                              (rule "times_zero_1" (formula "32") (term "0,1,0,0"))
                              (rule "leq_literals" (formula "32") (term "1,0,0"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "true_left" (formula "32"))
                              (rule "commute_or_2" (formula "30") (term "0,0"))
                              (builtin "One Step Simplification" (formula "30"))
                              (rule "ifthenelse_split" (formula "29") (term "0"))
                              (branch "self.concatenated.length ≥ 1 TRUE"
                                 (rule "applyEq" (formula "29") (term "0") (ifseqformula "30"))
                                 (rule "applyEq" (formula "31") (term "1,1,1,0") (ifseqformula "29"))
                                 (rule "applyEq" (formula "26") (term "0") (ifseqformula "29"))
                                 (rule "applyEq" (formula "30") (term "1,1,0,0") (ifseqformula "29"))
                                 (builtin "One Step Simplification" (formula "30"))
                                 (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "28"))
                                 (rule "leq_literals" (formula "26") (term "0"))
                                 (builtin "One Step Simplification" (formula "26"))
                                 (rule "true_left" (formula "26"))
                                 (rule "inEqSimp_or_tautInEq3" (formula "30") (term "0"))
                                 (rule "inEqSimp_homoInEq1" (formula "30") (term "1,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "30") (term "0,1,0"))
                                 (rule "add_literals" (formula "30") (term "1,0,1,0"))
                                 (rule "times_zero_1" (formula "30") (term "0,1,0"))
                                 (rule "leq_literals" (formula "30") (term "1,0"))
                                 (builtin "One Step Simplification" (formula "30"))
                                 (rule "true_left" (formula "30"))
                                 (rule "allLeft" (formula "30") (inst "t=i_5"))
                                 (rule "replace_known_left" (formula "30") (term "0,0,0") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "30"))
                                 (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "30") (term "1") (ifseqformula "2"))
                                 (rule "inEqSimp_homoInEq1" (formula "30") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,1"))
                                 (rule "add_literals" (formula "30") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "30") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "30") (term "0,0,1"))
                                 (rule "leq_literals" (formula "30") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "30"))
                                 (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "30"))
                                 (rule "qeq_literals" (formula "1") (term "0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "self.concatenated.length ≥ 1 FALSE"
                                 (rule "eqSymm" (formula "29"))
                                 (rule "inEqSimp_geqRight" (formula "53"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "applyEq" (formula "32") (term "1,1,0,0") (ifseqformula "30"))
                                 (rule "applyEq" (formula "31") (term "1,1,0,0,0") (ifseqformula "30"))
                                 (rule "applyEq" (formula "29") (term "0") (ifseqformula "30"))
                                 (rule "qeq_literals" (formula "29"))
                                 (rule "closeFalse" (formula "29"))
                              )
                           )
                           (branch "msg.length ≥ 1 FALSE"
                              (builtin "One Step Simplification" (formula "29"))
                              (rule "replace_known_right" (formula "30") (term "0,1,1,0,0") (ifseqformula "54"))
                              (builtin "One Step Simplification" (formula "30"))
                              (rule "replace_known_right" (formula "32") (term "0,1,1,0") (ifseqformula "54"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "replace_known_right" (formula "31") (term "0,1,1,0") (ifseqformula "54"))
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "inEqSimp_geqRight" (formula "54"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_antiSymm" (formula "27") (ifseqformula "1"))
                              (rule "applyEq" (formula "34") (term "1,1,1,0,0,0") (ifseqformula "27"))
                              (rule "add_literals" (formula "34") (term "1,1,0,0,0"))
                              (builtin "One Step Simplification" (formula "34"))
                              (rule "applyEq" (formula "1") (term "0") (ifseqformula "27"))
                              (rule "leq_literals" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "applyEq" (formula "32") (term "1,1,0,0,0") (ifseqformula "26"))
                              (rule "applyEq" (formula "27") (term "0") (ifseqformula "26"))
                              (rule "qeq_literals" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "applyEq" (formula "30") (term "1,1,0,0,0,0") (ifseqformula "26"))
                              (rule "inEqSimp_notGeq" (formula "29") (term "0"))
                              (rule "mul_literals" (formula "29") (term "1,0,0,0"))
                              (rule "add_literals" (formula "29") (term "0,0,0"))
                              (rule "add_zero_left" (formula "29") (term "0,0"))
                              (rule "inEqSimp_or_tautInEq1" (formula "31") (term "0,0,0"))
                              (rule "add_zero_right" (formula "31") (term "1,1,0,0,0"))
                              (rule "qeq_literals" (formula "31") (term "1,0,0,0"))
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "true_left" (formula "31"))
                              (rule "inEqSimp_or_tautInEq0" (formula "30") (term "0,0,0,0"))
                              (rule "add_zero_right" (formula "30") (term "1,1,0,0,0,0"))
                              (rule "qeq_literals" (formula "30") (term "1,0,0,0,0"))
                              (builtin "One Step Simplification" (formula "30"))
                              (rule "true_left" (formula "30"))
                              (rule "commute_or_2" (formula "30") (term "0"))
                              (rule "inEqSimp_or_tautInEq1" (formula "30") (term "0,0"))
                              (rule "add_zero_right" (formula "30") (term "1,1,0,0"))
                              (rule "qeq_literals" (formula "30") (term "1,0,0"))
                              (builtin "One Step Simplification" (formula "30"))
                              (rule "true_left" (formula "30"))
                              (rule "allLeft" (formula "30") (inst "t=i_5"))
                              (rule "replace_known_left" (formula "30") (term "0,0,0") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "30"))
                              (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "30") (term "0") (ifseqformula "1"))
                              (rule "qeq_literals" (formula "30") (term "0,0"))
                              (builtin "One Step Simplification" (formula "30"))
                              (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "30"))
                              (rule "andLeft" (formula "2"))
                              (rule "inEqSimp_homoInEq1" (formula "2"))
                              (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                              (rule "add_literals" (formula "2") (term "1,1,0"))
                              (rule "times_zero_1" (formula "2") (term "1,0"))
                              (rule "add_zero_right" (formula "2") (term "0"))
                              (rule "leq_literals" (formula "2"))
                              (rule "closeFalse" (formula "2"))
                           )
                        )
                     )
                     (branch "Case 2"
                        (rule "allRight" (formula "68") (inst "sk=i_4"))
                        (rule "orRight" (formula "68"))
                        (rule "orRight" (formula "68"))
                        (rule "notRight" (formula "70"))
                        (rule "inEqSimp_geqRight" (formula "70"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "70"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_4"))
                        (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "52"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "59")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "41"))
                        (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "14"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "41"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "59")) (ifInst ""  (formula "14")))
                        (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "7") (ifseqformula "58"))
                        (rule "ifthenelse_split" (formula "22") (term "1"))
                        (branch "self.unsigned.length ≥ 1 TRUE"
                           (rule "replace_known_left" (formula "24") (term "0,1,1,0") (ifseqformula "22"))
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "replace_known_left" (formula "18") (term "0,0") (ifseqformula "22"))
                           (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "17")))
                           (rule "true_left" (formula "18"))
                           (rule "replace_known_left" (formula "24") (term "0,1,1,0") (ifseqformula "21"))
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "21"))
                           (rule "leq_literals" (formula "17") (term "0"))
                           (builtin "One Step Simplification" (formula "17"))
                           (rule "true_left" (formula "17"))
                           (rule "inEqSimp_or_tautInEq1" (formula "23") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "23") (term "1,0"))
                           (rule "polySimp_pullOutFactor1" (formula "23") (term "0,1,0"))
                           (rule "add_literals" (formula "23") (term "1,0,1,0"))
                           (rule "times_zero_1" (formula "23") (term "0,1,0"))
                           (rule "leq_literals" (formula "23") (term "1,0"))
                           (builtin "One Step Simplification" (formula "23"))
                           (rule "true_left" (formula "23"))
                           (rule "ifthenelse_split" (formula "30") (term "1"))
                           (branch "msg.length ≥ 1 TRUE"
                              (rule "replace_known_left" (formula "33") (term "0,1,1,0") (ifseqformula "30"))
                              (builtin "One Step Simplification" (formula "33"))
                              (rule "replace_known_left" (formula "34") (term "0,1,1,0") (ifseqformula "30"))
                              (builtin "One Step Simplification" (formula "34"))
                              (rule "replace_known_left" (formula "32") (term "0,1,1,0,0") (ifseqformula "30"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "inEqSimp_subsumption1" (formula "27") (ifseqformula "30"))
                              (rule "leq_literals" (formula "27") (term "0"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "commute_or_2" (formula "32") (term "0"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "commute_or_2" (formula "33") (term "0"))
                              (rule "inEqSimp_or_tautInEq1" (formula "33") (term "0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0,0"))
                              (rule "polySimp_pullOutFactor1" (formula "33") (term "0,1,0,0"))
                              (rule "add_literals" (formula "33") (term "1,0,1,0,0"))
                              (rule "times_zero_1" (formula "33") (term "0,1,0,0"))
                              (rule "leq_literals" (formula "33") (term "1,0,0"))
                              (builtin "One Step Simplification" (formula "33"))
                              (rule "true_left" (formula "33"))
                              (rule "commute_or_2" (formula "31") (term "0,0"))
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "ifthenelse_split" (formula "30") (term "0"))
                              (branch "self.concatenated.length ≥ 1 TRUE"
                                 (rule "applyEq" (formula "27") (term "0") (ifseqformula "31"))
                                 (rule "applyEq" (formula "33") (term "1,1,1,0") (ifseqformula "31"))
                                 (rule "applyEq" (formula "30") (term "0") (ifseqformula "31"))
                                 (rule "applyEq" (formula "31") (term "1,1,0,0") (ifseqformula "30"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "inEqSimp_subsumption1" (formula "27") (ifseqformula "29"))
                                 (rule "leq_literals" (formula "27") (term "0"))
                                 (builtin "One Step Simplification" (formula "27"))
                                 (rule "true_left" (formula "27"))
                                 (rule "inEqSimp_or_tautInEq3" (formula "31") (term "0"))
                                 (rule "inEqSimp_homoInEq1" (formula "31") (term "1,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "31") (term "0,1,0"))
                                 (rule "add_literals" (formula "31") (term "1,0,1,0"))
                                 (rule "times_zero_1" (formula "31") (term "0,1,0"))
                                 (rule "leq_literals" (formula "31") (term "1,0"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "true_left" (formula "31"))
                                 (rule "allLeft" (formula "32") (inst "t=i_4"))
                                 (rule "replace_known_left" (formula "32") (term "0,0,0") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "32"))
                                 (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "32") (term "1") (ifseqformula "2"))
                                 (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1"))
                                 (rule "add_literals" (formula "32") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "32") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "32") (term "0,0,1"))
                                 (rule "leq_literals" (formula "32") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "32"))
                                 (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "32"))
                                 (rule "qeq_literals" (formula "1") (term "0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "self.concatenated.length ≥ 1 FALSE"
                                 (rule "eqSymm" (formula "30"))
                                 (rule "inEqSimp_geqRight" (formula "54"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "applyEq" (formula "32") (term "1,1,0,0,0") (ifseqformula "31"))
                                 (rule "applyEq" (formula "33") (term "1,1,0,0") (ifseqformula "31"))
                                 (rule "applyEq" (formula "30") (term "0") (ifseqformula "31"))
                                 (rule "qeq_literals" (formula "30"))
                                 (rule "closeFalse" (formula "30"))
                              )
                           )
                           (branch "msg.length ≥ 1 FALSE"
                              (builtin "One Step Simplification" (formula "30"))
                              (rule "replace_known_right" (formula "31") (term "0,1,1,0,0") (ifseqformula "55"))
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "replace_known_right" (formula "32") (term "0,1,1,0") (ifseqformula "55"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "replace_known_right" (formula "33") (term "0,1,1,0") (ifseqformula "55"))
                              (builtin "One Step Simplification" (formula "33"))
                              (rule "inEqSimp_geqRight" (formula "55"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_antiSymm" (formula "28") (ifseqformula "1"))
                              (rule "applyEq" (formula "35") (term "1,1,1,0,0,0") (ifseqformula "28"))
                              (rule "add_zero_right" (formula "35") (term "1,1,0,0,0"))
                              (builtin "One Step Simplification" (formula "35"))
                              (rule "applyEq" (formula "33") (term "1,1,0,0,0,0") (ifseqformula "28"))
                              (rule "applyEq" (formula "34") (term "1,1,0,0,0") (ifseqformula "28"))
                              (rule "applyEq" (formula "29") (term "0") (ifseqformula "28"))
                              (rule "qeq_literals" (formula "29"))
                              (rule "true_left" (formula "29"))
                              (rule "applyEq" (formula "1") (term "0") (ifseqformula "28"))
                              (rule "leq_literals" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "inEqSimp_notGeq" (formula "30") (term "0"))
                              (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                              (rule "add_literals" (formula "30") (term "0,0,0"))
                              (rule "add_zero_left" (formula "30") (term "0,0"))
                              (rule "inEqSimp_or_tautInEq0" (formula "31") (term "0,0,0,0"))
                              (rule "add_zero_right" (formula "31") (term "1,1,0,0,0,0"))
                              (rule "qeq_literals" (formula "31") (term "1,0,0,0,0"))
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "true_left" (formula "31"))
                              (rule "inEqSimp_or_tautInEq1" (formula "31") (term "0,0,0"))
                              (rule "add_zero_right" (formula "31") (term "1,1,0,0,0"))
                              (rule "qeq_literals" (formula "31") (term "1,0,0,0"))
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "true_left" (formula "31"))
                              (rule "commute_or_2" (formula "31") (term "0"))
                              (rule "inEqSimp_or_tautInEq1" (formula "31") (term "0,0"))
                              (rule "add_zero_right" (formula "31") (term "1,1,0,0"))
                              (rule "qeq_literals" (formula "31") (term "1,0,0"))
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "true_left" (formula "31"))
                              (rule "allLeft" (formula "32") (inst "t=i_4"))
                              (rule "replace_known_left" (formula "32") (term "0,0,0") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "32") (term "0") (ifseqformula "1"))
                              (rule "qeq_literals" (formula "32") (term "0,0"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "32"))
                              (rule "andLeft" (formula "2"))
                              (rule "inEqSimp_homoInEq1" (formula "2"))
                              (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                              (rule "add_literals" (formula "2") (term "1,1,0"))
                              (rule "times_zero_1" (formula "2") (term "1,0"))
                              (rule "add_zero_right" (formula "2") (term "0"))
                              (rule "leq_literals" (formula "2"))
                              (rule "closeFalse" (formula "2"))
                           )
                        )
                        (branch "self.unsigned.length ≥ 1 FALSE"
                           (rule "replace_known_right" (formula "24") (term "0,1,1,0") (ifseqformula "57"))
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "replace_known_right" (formula "18") (term "0,0") (ifseqformula "57"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "qeq_literals" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "replace_known_right" (formula "22") (term "0,1,1,0") (ifseqformula "56"))
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "inEqSimp_geqRight" (formula "56"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_antiSymm" (formula "18") (ifseqformula "1"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "18"))
                           (rule "leq_literals" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "applyEq" (formula "23") (term "1,1,0,0") (ifseqformula "17"))
                           (builtin "One Step Simplification" (formula "23"))
                           (rule "applyEq" (formula "18") (term "0") (ifseqformula "17"))
                           (rule "qeq_literals" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "applyEq" (formula "23") (term "1,1,1,0,0") (ifseqformula "17"))
                           (rule "add_zero_right" (formula "23") (term "1,1,0,0"))
                           (builtin "One Step Simplification" (formula "23"))
                           (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0"))
                           (rule "add_literals" (formula "22") (term "1,1,0"))
                           (rule "qeq_literals" (formula "22") (term "1,0"))
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "true_left" (formula "22"))
                           (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0"))
                           (rule "add_zero_right" (formula "22") (term "1,1,0"))
                           (rule "qeq_literals" (formula "22") (term "1,0"))
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "true_left" (formula "22"))
                           (rule "ifthenelse_split" (formula "29") (term "1"))
                           (branch "msg.length ≥ 1 TRUE"
                              (rule "replace_known_left" (formula "32") (term "0,1,1,0") (ifseqformula "29"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "replace_known_left" (formula "31") (term "0,1,1,0,0") (ifseqformula "29"))
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "replace_known_left" (formula "33") (term "0,1,1,0") (ifseqformula "29"))
                              (builtin "One Step Simplification" (formula "33"))
                              (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "29"))
                              (rule "leq_literals" (formula "26") (term "0"))
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "true_left" (formula "26"))
                              (rule "commute_or_2" (formula "31") (term "0"))
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "commute_or_2" (formula "32") (term "0"))
                              (rule "inEqSimp_or_tautInEq1" (formula "32") (term "0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0,0"))
                              (rule "polySimp_pullOutFactor1" (formula "32") (term "0,1,0,0"))
                              (rule "add_literals" (formula "32") (term "1,0,1,0,0"))
                              (rule "times_zero_1" (formula "32") (term "0,1,0,0"))
                              (rule "leq_literals" (formula "32") (term "1,0,0"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "true_left" (formula "32"))
                              (rule "commute_or_2" (formula "30") (term "0,0"))
                              (builtin "One Step Simplification" (formula "30"))
                              (rule "ifthenelse_split" (formula "29") (term "0"))
                              (branch "self.concatenated.length ≥ 1 TRUE"
                                 (rule "applyEq" (formula "29") (term "0") (ifseqformula "30"))
                                 (rule "applyEq" (formula "31") (term "1,1,1,0") (ifseqformula "29"))
                                 (rule "applyEq" (formula "26") (term "0") (ifseqformula "29"))
                                 (rule "applyEq" (formula "30") (term "1,1,0,0") (ifseqformula "29"))
                                 (builtin "One Step Simplification" (formula "30"))
                                 (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "28"))
                                 (rule "leq_literals" (formula "26") (term "0"))
                                 (builtin "One Step Simplification" (formula "26"))
                                 (rule "true_left" (formula "26"))
                                 (rule "inEqSimp_or_tautInEq3" (formula "30") (term "0"))
                                 (rule "inEqSimp_homoInEq1" (formula "30") (term "1,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "30") (term "0,1,0"))
                                 (rule "add_literals" (formula "30") (term "1,0,1,0"))
                                 (rule "times_zero_1" (formula "30") (term "0,1,0"))
                                 (rule "leq_literals" (formula "30") (term "1,0"))
                                 (builtin "One Step Simplification" (formula "30"))
                                 (rule "true_left" (formula "30"))
                                 (rule "allLeft" (formula "31") (inst "t=i_4"))
                                 (rule "replace_known_left" (formula "31") (term "0,0,0") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "31") (term "1") (ifseqformula "2"))
                                 (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,1"))
                                 (rule "add_literals" (formula "31") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "31") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "31") (term "0,0,1"))
                                 (rule "leq_literals" (formula "31") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "31"))
                                 (rule "qeq_literals" (formula "1") (term "0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "self.concatenated.length ≥ 1 FALSE"
                                 (rule "eqSymm" (formula "29"))
                                 (rule "inEqSimp_geqRight" (formula "53"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "applyEq" (formula "32") (term "1,1,0,0") (ifseqformula "30"))
                                 (rule "applyEq" (formula "31") (term "1,1,0,0,0") (ifseqformula "30"))
                                 (rule "applyEq" (formula "29") (term "0") (ifseqformula "30"))
                                 (rule "qeq_literals" (formula "29"))
                                 (rule "closeFalse" (formula "29"))
                              )
                           )
                           (branch "msg.length ≥ 1 FALSE"
                              (builtin "One Step Simplification" (formula "29"))
                              (rule "replace_known_right" (formula "30") (term "0,1,1,0,0") (ifseqformula "54"))
                              (builtin "One Step Simplification" (formula "30"))
                              (rule "replace_known_right" (formula "32") (term "0,1,1,0") (ifseqformula "54"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "replace_known_right" (formula "31") (term "0,1,1,0") (ifseqformula "54"))
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "inEqSimp_geqRight" (formula "54"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_antiSymm" (formula "27") (ifseqformula "1"))
                              (rule "applyEq" (formula "34") (term "1,1,1,0,0,0") (ifseqformula "27"))
                              (rule "add_literals" (formula "34") (term "1,1,0,0,0"))
                              (builtin "One Step Simplification" (formula "34"))
                              (rule "applyEq" (formula "1") (term "0") (ifseqformula "27"))
                              (rule "leq_literals" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "applyEq" (formula "32") (term "1,1,0,0,0") (ifseqformula "26"))
                              (rule "applyEq" (formula "27") (term "0") (ifseqformula "26"))
                              (rule "qeq_literals" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "applyEq" (formula "30") (term "1,1,0,0,0,0") (ifseqformula "26"))
                              (rule "inEqSimp_notGeq" (formula "29") (term "0"))
                              (rule "mul_literals" (formula "29") (term "1,0,0,0"))
                              (rule "add_literals" (formula "29") (term "0,0,0"))
                              (rule "add_zero_left" (formula "29") (term "0,0"))
                              (rule "inEqSimp_or_tautInEq1" (formula "31") (term "0,0,0"))
                              (rule "add_zero_right" (formula "31") (term "1,1,0,0,0"))
                              (rule "qeq_literals" (formula "31") (term "1,0,0,0"))
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "true_left" (formula "31"))
                              (rule "inEqSimp_or_tautInEq0" (formula "30") (term "0,0,0,0"))
                              (rule "add_zero_right" (formula "30") (term "1,1,0,0,0,0"))
                              (rule "qeq_literals" (formula "30") (term "1,0,0,0,0"))
                              (builtin "One Step Simplification" (formula "30"))
                              (rule "true_left" (formula "30"))
                              (rule "commute_or_2" (formula "30") (term "0"))
                              (rule "inEqSimp_or_tautInEq1" (formula "30") (term "0,0"))
                              (rule "add_zero_right" (formula "30") (term "1,1,0,0"))
                              (rule "qeq_literals" (formula "30") (term "1,0,0"))
                              (builtin "One Step Simplification" (formula "30"))
                              (rule "true_left" (formula "30"))
                              (rule "allLeft" (formula "31") (inst "t=i_4"))
                              (rule "replace_known_left" (formula "31") (term "0,0,0") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "31") (term "0") (ifseqformula "1"))
                              (rule "qeq_literals" (formula "31") (term "0,0"))
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "31"))
                              (rule "andLeft" (formula "2"))
                              (rule "inEqSimp_homoInEq1" (formula "2"))
                              (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                              (rule "add_literals" (formula "2") (term "1,1,0"))
                              (rule "times_zero_1" (formula "2") (term "1,0"))
                              (rule "add_zero_right" (formula "2") (term "0"))
                              (rule "leq_literals" (formula "2"))
                              (rule "closeFalse" (formula "2"))
                           )
                        )
                     )
                  )
                  (branch "Case 2"
                     (rule "allRight" (formula "68") (inst "sk=i_3"))
                     (rule "orRight" (formula "68"))
                     (rule "orRight" (formula "68"))
                     (rule "notRight" (formula "70"))
                     (rule "inEqSimp_leqRight" (formula "69"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_geqRight" (formula "70"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_3"))
                     (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "52"))
                     (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "60")))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "41"))
                     (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "26"))
                     (builtin "One Step Simplification" (formula "3"))
                     (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "41"))
                     (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "60")) (ifInst ""  (formula "26")))
                     (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "7") (ifseqformula "59"))
                     (rule "ifthenelse_split" (formula "22") (term "1"))
                     (branch "self.unsigned.length ≥ 1 TRUE"
                        (rule "replace_known_left" (formula "24") (term "0,1,1,0") (ifseqformula "22"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "replace_known_left" (formula "18") (term "0,0") (ifseqformula "22"))
                        (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "17")))
                        (rule "true_left" (formula "18"))
                        (rule "replace_known_left" (formula "24") (term "0,1,1,0") (ifseqformula "21"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "21"))
                        (rule "leq_literals" (formula "17") (term "0"))
                        (builtin "One Step Simplification" (formula "17"))
                        (rule "true_left" (formula "17"))
                        (rule "inEqSimp_or_tautInEq1" (formula "23") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "23") (term "1,0"))
                        (rule "polySimp_pullOutFactor1" (formula "23") (term "0,1,0"))
                        (rule "add_literals" (formula "23") (term "1,0,1,0"))
                        (rule "times_zero_1" (formula "23") (term "0,1,0"))
                        (rule "leq_literals" (formula "23") (term "1,0"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "true_left" (formula "23"))
                        (rule "ifthenelse_split" (formula "30") (term "1"))
                        (branch "msg.length ≥ 1 TRUE"
                           (rule "replace_known_left" (formula "33") (term "0,1,1,0") (ifseqformula "30"))
                           (builtin "One Step Simplification" (formula "33"))
                           (rule "replace_known_left" (formula "32") (term "0,1,1,0,0") (ifseqformula "30"))
                           (builtin "One Step Simplification" (formula "32"))
                           (rule "replace_known_left" (formula "34") (term "0,1,1,0") (ifseqformula "30"))
                           (builtin "One Step Simplification" (formula "34"))
                           (rule "inEqSimp_subsumption1" (formula "27") (ifseqformula "30"))
                           (rule "leq_literals" (formula "27") (term "0"))
                           (builtin "One Step Simplification" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "commute_or_2" (formula "32") (term "0"))
                           (builtin "One Step Simplification" (formula "32"))
                           (rule "commute_or_2" (formula "33") (term "0"))
                           (rule "inEqSimp_or_tautInEq1" (formula "33") (term "0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0,0"))
                           (rule "polySimp_pullOutFactor1" (formula "33") (term "0,1,0,0"))
                           (rule "add_literals" (formula "33") (term "1,0,1,0,0"))
                           (rule "times_zero_1" (formula "33") (term "0,1,0,0"))
                           (rule "leq_literals" (formula "33") (term "1,0,0"))
                           (builtin "One Step Simplification" (formula "33"))
                           (rule "true_left" (formula "33"))
                           (rule "commute_or_2" (formula "31") (term "0,0"))
                           (builtin "One Step Simplification" (formula "31"))
                           (rule "ifthenelse_split" (formula "30") (term "0"))
                           (branch "self.concatenated.length ≥ 1 TRUE"
                              (rule "applyEq" (formula "33") (term "1,1,1,0") (ifseqformula "31"))
                              (rule "applyEq" (formula "30") (term "0") (ifseqformula "31"))
                              (rule "applyEq" (formula "31") (term "1,1,0,0") (ifseqformula "30"))
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "applyEq" (formula "27") (term "0") (ifseqformula "30"))
                              (rule "inEqSimp_subsumption1" (formula "27") (ifseqformula "29"))
                              (rule "leq_literals" (formula "27") (term "0"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "inEqSimp_or_tautInEq3" (formula "31") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "31") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "31") (term "0,1,0"))
                              (rule "add_literals" (formula "31") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "31") (term "0,1,0"))
                              (rule "leq_literals" (formula "31") (term "1,0"))
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "true_left" (formula "31"))
                              (rule "allLeft" (formula "33") (inst "t=i_3"))
                              (rule "replace_known_left" (formula "33") (term "0,0,0") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "33"))
                              (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "33") (term "0") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "33") (term "0,0"))
                              (builtin "One Step Simplification" (formula "33"))
                              (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "33"))
                              (rule "andLeft" (formula "1"))
                              (rule "inEqSimp_homoInEq1" (formula "1"))
                              (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                              (rule "add_literals" (formula "1") (term "1,1,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0"))
                              (rule "add_zero_right" (formula "1") (term "0"))
                              (rule "leq_literals" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "self.concatenated.length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "30"))
                              (rule "inEqSimp_geqRight" (formula "54"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "33") (term "1,1,0,0") (ifseqformula "31"))
                              (rule "applyEq" (formula "32") (term "1,1,0,0,0") (ifseqformula "31"))
                              (rule "applyEq" (formula "30") (term "0") (ifseqformula "31"))
                              (rule "qeq_literals" (formula "30"))
                              (rule "closeFalse" (formula "30"))
                           )
                        )
                        (branch "msg.length ≥ 1 FALSE"
                           (builtin "One Step Simplification" (formula "30"))
                           (rule "replace_known_right" (formula "31") (term "0,1,1,0,0") (ifseqformula "55"))
                           (builtin "One Step Simplification" (formula "31"))
                           (rule "replace_known_right" (formula "32") (term "0,1,1,0") (ifseqformula "55"))
                           (builtin "One Step Simplification" (formula "32"))
                           (rule "replace_known_right" (formula "33") (term "0,1,1,0") (ifseqformula "55"))
                           (builtin "One Step Simplification" (formula "33"))
                           (rule "inEqSimp_geqRight" (formula "55"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_antiSymm" (formula "28") (ifseqformula "1"))
                           (rule "applyEq" (formula "35") (term "1,1,1,0,0,0") (ifseqformula "28"))
                           (rule "add_zero_right" (formula "35") (term "1,1,0,0,0"))
                           (builtin "One Step Simplification" (formula "35"))
                           (rule "applyEq" (formula "33") (term "1,1,0,0,0,0") (ifseqformula "28"))
                           (rule "applyEq" (formula "34") (term "1,1,0,0,0") (ifseqformula "28"))
                           (rule "applyEq" (formula "29") (term "0") (ifseqformula "28"))
                           (rule "qeq_literals" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "28"))
                           (rule "leq_literals" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "inEqSimp_notGeq" (formula "30") (term "0"))
                           (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                           (rule "add_literals" (formula "30") (term "0,0,0"))
                           (rule "add_zero_left" (formula "30") (term "0,0"))
                           (rule "inEqSimp_or_tautInEq0" (formula "31") (term "0,0,0,0"))
                           (rule "add_zero_right" (formula "31") (term "1,1,0,0,0,0"))
                           (rule "qeq_literals" (formula "31") (term "1,0,0,0,0"))
                           (builtin "One Step Simplification" (formula "31"))
                           (rule "true_left" (formula "31"))
                           (rule "inEqSimp_or_tautInEq1" (formula "31") (term "0,0,0"))
                           (rule "add_zero_right" (formula "31") (term "1,1,0,0,0"))
                           (rule "qeq_literals" (formula "31") (term "1,0,0,0"))
                           (builtin "One Step Simplification" (formula "31"))
                           (rule "true_left" (formula "31"))
                           (rule "commute_or_2" (formula "31") (term "0"))
                           (rule "inEqSimp_or_tautInEq1" (formula "31") (term "0,0"))
                           (rule "add_zero_right" (formula "31") (term "1,1,0,0"))
                           (rule "qeq_literals" (formula "31") (term "1,0,0"))
                           (builtin "One Step Simplification" (formula "31"))
                           (rule "true_left" (formula "31"))
                           (rule "allLeft" (formula "33") (inst "t=i_3"))
                           (rule "replace_known_left" (formula "33") (term "0,0,0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "33"))
                           (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "33") (term "0") (ifseqformula "2"))
                           (rule "qeq_literals" (formula "33") (term "0,0"))
                           (builtin "One Step Simplification" (formula "33"))
                           (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "33"))
                           (rule "andLeft" (formula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "1"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,1,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0"))
                           (rule "add_zero_right" (formula "1") (term "0"))
                           (rule "leq_literals" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                     (branch "self.unsigned.length ≥ 1 FALSE"
                        (rule "replace_known_right" (formula "24") (term "0,1,1,0") (ifseqformula "57"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "replace_known_right" (formula "23") (term "0,1,1,0") (ifseqformula "57"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "replace_known_right" (formula "18") (term "0,0") (ifseqformula "57"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "qeq_literals" (formula "18"))
                        (rule "true_left" (formula "18"))
                        (rule "inEqSimp_geqRight" (formula "56"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_antiSymm" (formula "18") (ifseqformula "1"))
                        (rule "applyEq" (formula "25") (term "1,1,1,0,0") (ifseqformula "18"))
                        (rule "add_literals" (formula "25") (term "1,1,0,0"))
                        (builtin "One Step Simplification" (formula "25"))
                        (rule "applyEq" (formula "24") (term "1,1,0,0") (ifseqformula "18"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "applyEq" (formula "19") (term "0") (ifseqformula "18"))
                        (rule "qeq_literals" (formula "19"))
                        (rule "true_left" (formula "19"))
                        (rule "applyEq" (formula "1") (term "0") (ifseqformula "18"))
                        (rule "leq_literals" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "inEqSimp_or_tautInEq1" (formula "23") (term "0"))
                        (rule "add_literals" (formula "23") (term "1,1,0"))
                        (rule "qeq_literals" (formula "23") (term "1,0"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "true_left" (formula "23"))
                        (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0"))
                        (rule "add_zero_right" (formula "22") (term "1,1,0"))
                        (rule "qeq_literals" (formula "22") (term "1,0"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "true_left" (formula "22"))
                        (rule "ifthenelse_split" (formula "29") (term "1"))
                        (branch "msg.length ≥ 1 TRUE"
                           (rule "replace_known_left" (formula "32") (term "0,1,1,0") (ifseqformula "29"))
                           (builtin "One Step Simplification" (formula "32"))
                           (rule "replace_known_left" (formula "33") (term "0,1,1,0") (ifseqformula "29"))
                           (builtin "One Step Simplification" (formula "33"))
                           (rule "replace_known_left" (formula "31") (term "0,1,1,0,0") (ifseqformula "29"))
                           (builtin "One Step Simplification" (formula "31"))
                           (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "29"))
                           (rule "leq_literals" (formula "26") (term "0"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "true_left" (formula "26"))
                           (rule "commute_or_2" (formula "31") (term "0"))
                           (builtin "One Step Simplification" (formula "31"))
                           (rule "commute_or_2" (formula "32") (term "0"))
                           (rule "inEqSimp_or_tautInEq1" (formula "32") (term "0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0,0"))
                           (rule "polySimp_pullOutFactor1" (formula "32") (term "0,1,0,0"))
                           (rule "add_literals" (formula "32") (term "1,0,1,0,0"))
                           (rule "times_zero_1" (formula "32") (term "0,1,0,0"))
                           (rule "leq_literals" (formula "32") (term "1,0,0"))
                           (builtin "One Step Simplification" (formula "32"))
                           (rule "true_left" (formula "32"))
                           (rule "commute_or_2" (formula "30") (term "0,0"))
                           (builtin "One Step Simplification" (formula "30"))
                           (rule "ifthenelse_split" (formula "29") (term "0"))
                           (branch "self.concatenated.length ≥ 1 TRUE"
                              (rule "applyEq" (formula "29") (term "0") (ifseqformula "30"))
                              (rule "applyEq" (formula "30") (term "1,1,0,0") (ifseqformula "29"))
                              (builtin "One Step Simplification" (formula "30"))
                              (rule "applyEq" (formula "31") (term "1,1,1,0") (ifseqformula "29"))
                              (rule "applyEq" (formula "26") (term "0") (ifseqformula "29"))
                              (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "28"))
                              (rule "leq_literals" (formula "26") (term "0"))
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "true_left" (formula "26"))
                              (rule "inEqSimp_or_tautInEq3" (formula "30") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "30") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "30") (term "0,1,0"))
                              (rule "add_literals" (formula "30") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "30") (term "0,1,0"))
                              (rule "leq_literals" (formula "30") (term "1,0"))
                              (builtin "One Step Simplification" (formula "30"))
                              (rule "true_left" (formula "30"))
                              (rule "allLeft" (formula "32") (inst "t=i_3"))
                              (rule "replace_known_left" (formula "32") (term "0,0,0") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "32") (term "1") (ifseqformula "1"))
                              (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1"))
                              (rule "add_literals" (formula "32") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "32") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "32") (term "0,0,1"))
                              (rule "leq_literals" (formula "32") (term "0,1"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "inEqSimp_contradInEq1" (formula "32") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "32") (term "0"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "closeFalse" (formula "32"))
                           )
                           (branch "self.concatenated.length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "29"))
                              (rule "inEqSimp_geqRight" (formula "53"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "31") (term "1,1,0,0,0") (ifseqformula "30"))
                              (rule "applyEq" (formula "29") (term "0") (ifseqformula "30"))
                              (rule "qeq_literals" (formula "29"))
                              (rule "closeFalse" (formula "29"))
                           )
                        )
                        (branch "msg.length ≥ 1 FALSE"
                           (builtin "One Step Simplification" (formula "29"))
                           (rule "replace_known_right" (formula "32") (term "0,1,1,0") (ifseqformula "54"))
                           (builtin "One Step Simplification" (formula "32"))
                           (rule "replace_known_right" (formula "30") (term "0,1,1,0,0") (ifseqformula "54"))
                           (builtin "One Step Simplification" (formula "30"))
                           (rule "replace_known_right" (formula "31") (term "0,1,1,0") (ifseqformula "54"))
                           (builtin "One Step Simplification" (formula "31"))
                           (rule "inEqSimp_geqRight" (formula "54"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_antiSymm" (formula "27") (ifseqformula "1"))
                           (rule "applyEq" (formula "28") (term "0") (ifseqformula "27"))
                           (rule "qeq_literals" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "applyEq" (formula "32") (term "1,1,0,0,0") (ifseqformula "27"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "27"))
                           (rule "leq_literals" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "applyEq" (formula "30") (term "1,1,0,0,0,0") (ifseqformula "26"))
                           (rule "applyEq" (formula "32") (term "1,1,1,0,0,0") (ifseqformula "26"))
                           (rule "add_literals" (formula "32") (term "1,1,0,0,0"))
                           (builtin "One Step Simplification" (formula "32"))
                           (rule "inEqSimp_notGeq" (formula "29") (term "0"))
                           (rule "mul_literals" (formula "29") (term "1,0,0,0"))
                           (rule "add_literals" (formula "29") (term "0,0,0"))
                           (rule "add_zero_left" (formula "29") (term "0,0"))
                           (rule "inEqSimp_or_tautInEq1" (formula "31") (term "0,0,0"))
                           (rule "add_zero_right" (formula "31") (term "1,1,0,0,0"))
                           (rule "qeq_literals" (formula "31") (term "1,0,0,0"))
                           (builtin "One Step Simplification" (formula "31"))
                           (rule "true_left" (formula "31"))
                           (rule "inEqSimp_or_tautInEq0" (formula "30") (term "0,0,0,0"))
                           (rule "add_zero_right" (formula "30") (term "1,1,0,0,0,0"))
                           (rule "qeq_literals" (formula "30") (term "1,0,0,0,0"))
                           (builtin "One Step Simplification" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "commute_or_2" (formula "30") (term "0"))
                           (rule "inEqSimp_or_tautInEq1" (formula "30") (term "0,0"))
                           (rule "add_zero_right" (formula "30") (term "1,1,0,0"))
                           (rule "qeq_literals" (formula "30") (term "1,0,0"))
                           (builtin "One Step Simplification" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "allLeft" (formula "32") (inst "t=i_3"))
                           (rule "replace_known_left" (formula "32") (term "0,0,0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "32"))
                           (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "32") (term "0") (ifseqformula "2"))
                           (rule "qeq_literals" (formula "32") (term "0,0"))
                           (builtin "One Step Simplification" (formula "32"))
                           (rule "inEqSimp_contradInEq1" (formula "32") (ifseqformula "1"))
                           (rule "andLeft" (formula "32"))
                           (rule "inEqSimp_homoInEq1" (formula "32"))
                           (rule "polySimp_pullOutFactor1b" (formula "32") (term "0"))
                           (rule "add_literals" (formula "32") (term "1,1,0"))
                           (rule "times_zero_1" (formula "32") (term "1,0"))
                           (rule "add_zero_right" (formula "32") (term "0"))
                           (rule "leq_literals" (formula "32"))
                           (rule "closeFalse" (formula "32"))
                        )
                     )
                  )
               )
               (branch "Case 2"
                  (rule "allRight" (formula "68") (inst "sk=f_2"))
                  (rule "allRight" (formula "68") (inst "sk=o_2"))
                  (rule "orRight" (formula "68"))
                  (rule "pullOutSelect" (formula "69") (term "0") (inst "selectSK=f_2_0"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "49"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "38"))
                  (rule "eqSymm" (formula "70"))
                  (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_2_1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "39"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "70")))
                  (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "ifthenelse_split" (formula "20") (term "1"))
                  (branch "self.unsigned.length ≥ 1 TRUE"
                     (rule "replace_known_left" (formula "22") (term "0,1,1,0") (ifseqformula "20"))
                     (builtin "One Step Simplification" (formula "22"))
                     (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "20"))
                     (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
                     (rule "true_left" (formula "16"))
                     (rule "replace_known_left" (formula "22") (term "0,1,1,0") (ifseqformula "19"))
                     (builtin "One Step Simplification" (formula "22"))
                     (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "19"))
                     (rule "leq_literals" (formula "15") (term "0"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "true_left" (formula "15"))
                     (rule "inEqSimp_or_tautInEq1" (formula "21") (term "0"))
                     (rule "inEqSimp_homoInEq1" (formula "21") (term "1,0"))
                     (rule "polySimp_pullOutFactor1" (formula "21") (term "0,1,0"))
                     (rule "add_literals" (formula "21") (term "1,0,1,0"))
                     (rule "times_zero_1" (formula "21") (term "0,1,0"))
                     (rule "leq_literals" (formula "21") (term "1,0"))
                     (builtin "One Step Simplification" (formula "21"))
                     (rule "true_left" (formula "21"))
                     (rule "ifthenelse_split" (formula "28") (term "1"))
                     (branch "msg.length ≥ 1 TRUE"
                        (rule "replace_known_left" (formula "32") (term "0,1,1,0") (ifseqformula "28"))
                        (builtin "One Step Simplification" (formula "32"))
                        (rule "replace_known_left" (formula "31") (term "0,1,1,0") (ifseqformula "28"))
                        (builtin "One Step Simplification" (formula "31"))
                        (rule "replace_known_left" (formula "30") (term "0,1,1,0,0") (ifseqformula "28"))
                        (builtin "One Step Simplification" (formula "30"))
                        (rule "inEqSimp_subsumption1" (formula "25") (ifseqformula "28"))
                        (rule "leq_literals" (formula "25") (term "0"))
                        (builtin "One Step Simplification" (formula "25"))
                        (rule "true_left" (formula "25"))
                        (rule "commute_or_2" (formula "31") (term "0"))
                        (rule "inEqSimp_or_tautInEq1" (formula "31") (term "0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "31") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor1" (formula "31") (term "0,1,0,0"))
                        (rule "add_literals" (formula "31") (term "1,0,1,0,0"))
                        (rule "times_zero_1" (formula "31") (term "0,1,0,0"))
                        (rule "leq_literals" (formula "31") (term "1,0,0"))
                        (builtin "One Step Simplification" (formula "31"))
                        (rule "true_left" (formula "31"))
                        (rule "commute_or_2" (formula "30") (term "0"))
                        (builtin "One Step Simplification" (formula "30"))
                        (rule "commute_or_2" (formula "29") (term "0,0"))
                        (builtin "One Step Simplification" (formula "29"))
                        (rule "ifthenelse_split" (formula "28") (term "0"))
                        (branch "self.concatenated.length ≥ 1 TRUE"
                           (rule "applyEq" (formula "31") (term "1,1,1,0") (ifseqformula "29"))
                           (rule "applyEq" (formula "25") (term "0") (ifseqformula "29"))
                           (rule "applyEq" (formula "28") (term "0") (ifseqformula "29"))
                           (rule "applyEq" (formula "29") (term "1,1,0,0") (ifseqformula "28"))
                           (builtin "One Step Simplification" (formula "29"))
                           (rule "inEqSimp_subsumption1" (formula "25") (ifseqformula "27"))
                           (rule "leq_literals" (formula "25") (term "0"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "true_left" (formula "25"))
                           (rule "inEqSimp_or_tautInEq3" (formula "29") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "29") (term "1,0"))
                           (rule "polySimp_pullOutFactor1" (formula "29") (term "0,1,0"))
                           (rule "add_literals" (formula "29") (term "1,0,1,0"))
                           (rule "times_zero_1" (formula "29") (term "0,1,0"))
                           (rule "leq_literals" (formula "29") (term "1,0"))
                           (builtin "One Step Simplification" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "cut_direct" (formula "15") (term "0"))
                           (branch "CUT: verif.selectvoting.system.core.Tag.BALLOTS = null TRUE"
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "true_left" (formula "16"))
                              (rule "applyEq" (formula "19") (term "0,1,0,0,0") (ifseqformula "15"))
                              (rule "applyEq" (formula "19") (term "1,2,0,0,0") (ifseqformula "15"))
                              (rule "applyEq" (formula "20") (term "0,1,0,0,0,0,0,0") (ifseqformula "15"))
                              (rule "applyEq" (formula "20") (term "1,2,0,0,0,0,0,0") (ifseqformula "15"))
                              (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "15"))
                              (rule "cut_direct" (formula "49") (term "0"))
                              (branch "CUT: java.lang.Error::instance(exc_1) = TRUE TRUE"
                                 (rule "instanceof_not_compatible_5" (formula "50") (term "1") (ifseqformula "49"))
                                 (builtin "One Step Simplification" (formula "50") (ifInst ""  (formula "60")))
                                 (rule "true_left" (formula "50"))
                                 (rule "cut_direct" (formula "45") (term "0,0"))
                                 (branch "CUT: exc_1.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "true_left" (formula "46"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "51"))
                                       (rule "applyEqReverse" (formula "68") (term "1") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "eqSymm" (formula "67"))
                                       (rule "replace_known_right" (formula "66") (term "0,0") (ifseqformula "49"))
                                       (builtin "One Step Simplification" (formula "66") (ifInst ""  (formula "50")))
                                       (rule "closeTrue" (formula "66"))
                                    )
                                    (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) FALSE"
                                       (rule "close" (formula "66") (ifseqformula "1"))
                                    )
                                 )
                                 (branch "CUT: exc_1.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "45"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "51"))
                                       (rule "applyEqReverse" (formula "69") (term "1") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "eqSymm" (formula "68"))
                                       (rule "replace_known_right" (formula "67") (term "0,0") (ifseqformula "49"))
                                       (builtin "One Step Simplification" (formula "67") (ifInst ""  (formula "50")))
                                       (rule "closeTrue" (formula "67"))
                                    )
                                    (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) FALSE"
                                       (rule "close" (formula "67") (ifseqformula "1"))
                                    )
                                 )
                              )
                              (branch "CUT: java.lang.Error::instance(exc_1) = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "49"))
                                 (rule "instanceof_not_compatible_5" (formula "50") (ifseqformula "49"))
                                 (rule "cut_direct" (formula "45") (term "0,0"))
                                 (branch "CUT: exc_1.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "true_left" (formula "46"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "51"))
                                       (rule "applyEqReverse" (formula "68") (term "1") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "eqSymm" (formula "67"))
                                       (rule "replace_known_right" (formula "66") (term "0,0") (ifseqformula "49"))
                                       (builtin "One Step Simplification" (formula "66") (ifInst ""  (formula "50")))
                                       (rule "closeTrue" (formula "66"))
                                    )
                                    (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) FALSE"
                                       (rule "close" (formula "66") (ifseqformula "1"))
                                    )
                                 )
                                 (branch "CUT: exc_1.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "45"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "51"))
                                       (rule "applyEqReverse" (formula "69") (term "1") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "eqSymm" (formula "68"))
                                       (rule "replace_known_right" (formula "67") (term "0,0") (ifseqformula "49"))
                                       (builtin "One Step Simplification" (formula "67") (ifInst ""  (formula "50")))
                                       (rule "closeTrue" (formula "67"))
                                    )
                                    (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) FALSE"
                                       (rule "close" (formula "67") (ifseqformula "1"))
                                    )
                                 )
                              )
                           )
                           (branch "CUT: verif.selectvoting.system.core.Tag.BALLOTS = null FALSE"
                              (builtin "One Step Simplification" (formula "15"))
                              (rule "narrowSelectArrayType" (formula "20") (term "2,0,0,0,0,0,0") (ifseqformula "5") (ifseqformula "50"))
                              (rule "narrowSelectArrayType" (formula "19") (term "2,0,0,0") (ifseqformula "5") (ifseqformula "50"))
                              (rule "cut_direct" (formula "49") (term "0"))
                              (branch "CUT: java.lang.Error::instance(exc_1) = TRUE TRUE"
                                 (rule "instanceof_not_compatible_5" (formula "50") (term "1") (ifseqformula "49"))
                                 (builtin "One Step Simplification" (formula "50") (ifInst ""  (formula "61")))
                                 (rule "true_left" (formula "50"))
                                 (rule "cut_direct" (formula "45") (term "0,0"))
                                 (branch "CUT: exc_1.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "true_left" (formula "46"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "50"))
                                       (rule "applyEqReverse" (formula "69") (term "1") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "eqSymm" (formula "68"))
                                       (rule "replace_known_right" (formula "67") (term "0,1") (ifseqformula "49"))
                                       (builtin "One Step Simplification" (formula "67") (ifInst ""  (formula "51")))
                                       (rule "closeTrue" (formula "67"))
                                    )
                                    (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) FALSE"
                                       (rule "close" (formula "67") (ifseqformula "1"))
                                    )
                                 )
                                 (branch "CUT: exc_1.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "45"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "51"))
                                       (rule "applyEqReverse" (formula "70") (term "1") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "eqSymm" (formula "69"))
                                       (rule "replace_known_right" (formula "68") (term "0,0") (ifseqformula "49"))
                                       (builtin "One Step Simplification" (formula "68") (ifInst ""  (formula "50")))
                                       (rule "closeTrue" (formula "68"))
                                    )
                                    (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) FALSE"
                                       (rule "close" (formula "68") (ifseqformula "1"))
                                    )
                                 )
                              )
                              (branch "CUT: java.lang.Error::instance(exc_1) = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "49"))
                                 (rule "instanceof_not_compatible_5" (formula "50") (ifseqformula "49"))
                                 (rule "cut_direct" (formula "45") (term "0,0"))
                                 (branch "CUT: exc_1.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "true_left" (formula "46"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "50"))
                                       (rule "applyEqReverse" (formula "69") (term "1") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "eqSymm" (formula "68"))
                                       (rule "replace_known_right" (formula "67") (term "0,1") (ifseqformula "49"))
                                       (builtin "One Step Simplification" (formula "67") (ifInst ""  (formula "51")))
                                       (rule "closeTrue" (formula "67"))
                                    )
                                    (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) FALSE"
                                       (rule "close" (formula "67") (ifseqformula "1"))
                                    )
                                 )
                                 (branch "CUT: exc_1.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "45"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "51"))
                                       (rule "applyEqReverse" (formula "70") (term "1") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "eqSymm" (formula "69"))
                                       (rule "replace_known_right" (formula "68") (term "0,0") (ifseqformula "49"))
                                       (builtin "One Step Simplification" (formula "68") (ifInst ""  (formula "50")))
                                       (rule "closeTrue" (formula "68"))
                                    )
                                    (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) FALSE"
                                       (rule "close" (formula "68") (ifseqformula "1"))
                                    )
                                 )
                              )
                           )
                        )
                        (branch "self.concatenated.length ≥ 1 FALSE"
                           (rule "eqSymm" (formula "28"))
                           (rule "inEqSimp_geqRight" (formula "52"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "applyEq" (formula "28") (term "0") (ifseqformula "29"))
                           (rule "qeq_literals" (formula "28"))
                           (rule "closeFalse" (formula "28"))
                        )
                     )
                     (branch "msg.length ≥ 1 FALSE"
                        (builtin "One Step Simplification" (formula "28"))
                        (rule "replace_known_right" (formula "31") (term "0,1,1,0") (ifseqformula "53"))
                        (builtin "One Step Simplification" (formula "31"))
                        (rule "replace_known_right" (formula "30") (term "0,1,1,0") (ifseqformula "53"))
                        (builtin "One Step Simplification" (formula "30"))
                        (rule "replace_known_right" (formula "29") (term "0,1,1,0,0") (ifseqformula "53"))
                        (builtin "One Step Simplification" (formula "29"))
                        (rule "inEqSimp_geqRight" (formula "53"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_antiSymm" (formula "26") (ifseqformula "1"))
                        (rule "applyEq" (formula "27") (term "0") (ifseqformula "26"))
                        (rule "qeq_literals" (formula "27"))
                        (rule "true_left" (formula "27"))
                        (rule "applyEq" (formula "1") (term "0") (ifseqformula "26"))
                        (rule "leq_literals" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "applyEq" (formula "29") (term "1,1,0,0,0,0") (ifseqformula "25"))
                        (rule "applyEq" (formula "30") (term "1,1,0,0,0") (ifseqformula "25"))
                        (rule "applyEq" (formula "31") (term "1,1,1,0,0,0") (ifseqformula "25"))
                        (rule "add_literals" (formula "31") (term "1,1,0,0,0"))
                        (builtin "One Step Simplification" (formula "31"))
                        (rule "inEqSimp_notGeq" (formula "28") (term "0"))
                        (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                        (rule "add_literals" (formula "28") (term "0,0,0"))
                        (rule "add_zero_left" (formula "28") (term "0,0"))
                        (rule "inEqSimp_or_tautInEq0" (formula "29") (term "0,0,0,0"))
                        (rule "add_zero_right" (formula "29") (term "1,1,0,0,0,0"))
                        (rule "qeq_literals" (formula "29") (term "1,0,0,0,0"))
                        (builtin "One Step Simplification" (formula "29"))
                        (rule "true_left" (formula "29"))
                        (rule "inEqSimp_or_tautInEq1" (formula "29") (term "0,0,0"))
                        (rule "add_zero_right" (formula "29") (term "1,1,0,0,0"))
                        (rule "qeq_literals" (formula "29") (term "1,0,0,0"))
                        (builtin "One Step Simplification" (formula "29"))
                        (rule "true_left" (formula "29"))
                        (rule "commute_or_2" (formula "29") (term "0"))
                        (rule "inEqSimp_or_tautInEq1" (formula "29") (term "0,0"))
                        (rule "add_zero_right" (formula "29") (term "1,1,0,0"))
                        (rule "qeq_literals" (formula "29") (term "1,0,0"))
                        (builtin "One Step Simplification" (formula "29"))
                        (rule "true_left" (formula "29"))
                        (rule "cut_direct" (formula "15") (term "0"))
                        (branch "CUT: verif.selectvoting.system.core.Tag.BALLOTS = null TRUE"
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "true_left" (formula "16"))
                           (rule "applyEq" (formula "20") (term "1,2,0,0,0,0,0,0") (ifseqformula "15"))
                           (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "15"))
                           (rule "applyEq" (formula "20") (term "0,1,0,0,0,0,0,0") (ifseqformula "15"))
                           (rule "applyEq" (formula "19") (term "0,1,0,0,0") (ifseqformula "15"))
                           (rule "applyEq" (formula "19") (term "1,2,0,0,0") (ifseqformula "15"))
                           (rule "cut_direct" (formula "49") (term "0"))
                           (branch "CUT: java.lang.Error::instance(exc_1) = TRUE TRUE"
                              (rule "instanceof_not_compatible_5" (formula "50") (term "1") (ifseqformula "49"))
                              (builtin "One Step Simplification" (formula "50") (ifInst ""  (formula "60")))
                              (rule "true_left" (formula "50"))
                              (rule "cut_direct" (formula "45") (term "0,0"))
                              (branch "CUT: exc_1.<created> = TRUE TRUE"
                                 (builtin "One Step Simplification" (formula "46"))
                                 (rule "true_left" (formula "46"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "orRight" (formula "51"))
                                    (rule "applyEqReverse" (formula "68") (term "1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "eqSymm" (formula "67"))
                                    (rule "replace_known_right" (formula "66") (term "0,1") (ifseqformula "50"))
                                    (builtin "One Step Simplification" (formula "66") (ifInst ""  (formula "49")))
                                    (rule "closeTrue" (formula "66"))
                                 )
                                 (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) FALSE"
                                    (rule "close" (formula "66") (ifseqformula "1"))
                                 )
                              )
                              (branch "CUT: exc_1.<created> = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "45"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "orRight" (formula "51"))
                                    (rule "applyEqReverse" (formula "69") (term "1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "eqSymm" (formula "68"))
                                    (rule "replace_known_right" (formula "67") (term "0,1") (ifseqformula "50"))
                                    (builtin "One Step Simplification" (formula "67") (ifInst ""  (formula "49")))
                                    (rule "closeTrue" (formula "67"))
                                 )
                                 (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) FALSE"
                                    (rule "close" (formula "67") (ifseqformula "1"))
                                 )
                              )
                           )
                           (branch "CUT: java.lang.Error::instance(exc_1) = TRUE FALSE"
                              (builtin "One Step Simplification" (formula "49"))
                              (rule "instanceof_not_compatible_5" (formula "50") (ifseqformula "49"))
                              (rule "cut_direct" (formula "45") (term "0,0"))
                              (branch "CUT: exc_1.<created> = TRUE TRUE"
                                 (builtin "One Step Simplification" (formula "46"))
                                 (rule "true_left" (formula "46"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "orRight" (formula "51"))
                                    (rule "applyEqReverse" (formula "68") (term "1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "eqSymm" (formula "67"))
                                    (rule "replace_known_right" (formula "66") (term "0,0") (ifseqformula "49"))
                                    (builtin "One Step Simplification" (formula "66") (ifInst ""  (formula "50")))
                                    (rule "closeTrue" (formula "66"))
                                 )
                                 (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) FALSE"
                                    (rule "close" (formula "66") (ifseqformula "1"))
                                 )
                              )
                              (branch "CUT: exc_1.<created> = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "45"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "orRight" (formula "51"))
                                    (rule "applyEqReverse" (formula "69") (term "1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "eqSymm" (formula "68"))
                                    (rule "replace_known_right" (formula "67") (term "0,1") (ifseqformula "50"))
                                    (builtin "One Step Simplification" (formula "67") (ifInst ""  (formula "49")))
                                    (rule "closeTrue" (formula "67"))
                                 )
                                 (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) FALSE"
                                    (rule "close" (formula "67") (ifseqformula "1"))
                                 )
                              )
                           )
                        )
                        (branch "CUT: verif.selectvoting.system.core.Tag.BALLOTS = null FALSE"
                           (builtin "One Step Simplification" (formula "15"))
                           (rule "narrowSelectArrayType" (formula "19") (term "2,0,0,0") (ifseqformula "5") (ifseqformula "50"))
                           (rule "narrowSelectArrayType" (formula "20") (term "2,0,0,0,0,0,0") (ifseqformula "5") (ifseqformula "50"))
                           (rule "cut_direct" (formula "45") (term "0,0"))
                           (branch "CUT: exc_1.<created> = TRUE TRUE"
                              (builtin "One Step Simplification" (formula "46"))
                              (rule "true_left" (formula "46"))
                              (rule "cut_direct" (formula "49") (term "0"))
                              (branch "CUT: java.lang.Error::instance(exc_1) = TRUE TRUE"
                                 (rule "instanceof_not_compatible_5" (formula "50") (term "1") (ifseqformula "49"))
                                 (builtin "One Step Simplification" (formula "50") (ifInst ""  (formula "61")))
                                 (rule "true_left" (formula "50"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "orRight" (formula "50"))
                                    (rule "applyEqReverse" (formula "69") (term "1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "eqSymm" (formula "68"))
                                    (rule "replace_known_right" (formula "67") (term "0,0") (ifseqformula "51"))
                                    (builtin "One Step Simplification" (formula "67") (ifInst ""  (formula "49")))
                                    (rule "closeTrue" (formula "67"))
                                 )
                                 (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) FALSE"
                                    (rule "close" (formula "67") (ifseqformula "1"))
                                 )
                              )
                              (branch "CUT: java.lang.Error::instance(exc_1) = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "49"))
                                 (rule "instanceof_not_compatible_5" (formula "50") (ifseqformula "49"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "orRight" (formula "50"))
                                    (rule "applyEqReverse" (formula "69") (term "1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "eqSymm" (formula "68"))
                                    (rule "replace_known_right" (formula "67") (term "0,0") (ifseqformula "51"))
                                    (builtin "One Step Simplification" (formula "67") (ifInst ""  (formula "49")))
                                    (rule "closeTrue" (formula "67"))
                                 )
                                 (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) FALSE"
                                    (rule "close" (formula "67") (ifseqformula "1"))
                                 )
                              )
                           )
                           (branch "CUT: exc_1.<created> = TRUE FALSE"
                              (builtin "One Step Simplification" (formula "45"))
                              (rule "cut_direct" (formula "49") (term "0"))
                              (branch "CUT: java.lang.Error::instance(exc_1) = TRUE TRUE"
                                 (rule "instanceof_not_compatible_5" (formula "50") (term "1") (ifseqformula "49"))
                                 (builtin "One Step Simplification" (formula "50") (ifInst ""  (formula "62")))
                                 (rule "true_left" (formula "50"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "orRight" (formula "51"))
                                    (rule "applyEqReverse" (formula "70") (term "1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "eqSymm" (formula "69"))
                                    (rule "replace_known_right" (formula "68") (term "0,1") (ifseqformula "50"))
                                    (builtin "One Step Simplification" (formula "68") (ifInst ""  (formula "49")))
                                    (rule "closeTrue" (formula "68"))
                                 )
                                 (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) FALSE"
                                    (rule "close" (formula "68") (ifseqformula "1"))
                                 )
                              )
                              (branch "CUT: java.lang.Error::instance(exc_1) = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "49"))
                                 (rule "instanceof_not_compatible_5" (formula "50") (ifseqformula "49"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "orRight" (formula "51"))
                                    (rule "applyEqReverse" (formula "70") (term "1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "eqSymm" (formula "69"))
                                    (rule "replace_known_right" (formula "68") (term "0,1") (ifseqformula "50"))
                                    (builtin "One Step Simplification" (formula "68") (ifInst ""  (formula "49")))
                                    (rule "closeTrue" (formula "68"))
                                 )
                                 (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) FALSE"
                                    (rule "close" (formula "68") (ifseqformula "1"))
                                 )
                              )
                           )
                        )
                     )
                  )
                  (branch "self.unsigned.length ≥ 1 FALSE"
                     (rule "replace_known_right" (formula "22") (term "0,1,1,0") (ifseqformula "55"))
                     (builtin "One Step Simplification" (formula "22"))
                     (rule "replace_known_right" (formula "21") (term "0,1,1,0") (ifseqformula "55"))
                     (builtin "One Step Simplification" (formula "21"))
                     (rule "replace_known_right" (formula "16") (term "0,0") (ifseqformula "55"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "qeq_literals" (formula "16"))
                     (rule "true_left" (formula "16"))
                     (rule "inEqSimp_geqRight" (formula "54"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_antiSymm" (formula "16") (ifseqformula "1"))
                     (rule "applyEq" (formula "23") (term "1,1,1,0,0") (ifseqformula "16"))
                     (rule "add_zero_right" (formula "23") (term "1,1,0,0"))
                     (builtin "One Step Simplification" (formula "23"))
                     (rule "applyEq" (formula "22") (term "1,1,0,0") (ifseqformula "16"))
                     (builtin "One Step Simplification" (formula "22"))
                     (rule "applyEq" (formula "1") (term "0") (ifseqformula "16"))
                     (rule "leq_literals" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "applyEq" (formula "16") (term "0") (ifseqformula "15"))
                     (rule "qeq_literals" (formula "16"))
                     (rule "true_left" (formula "16"))
                     (rule "inEqSimp_or_tautInEq1" (formula "21") (term "0"))
                     (rule "add_zero_right" (formula "21") (term "1,1,0"))
                     (rule "qeq_literals" (formula "21") (term "1,0"))
                     (builtin "One Step Simplification" (formula "21"))
                     (rule "true_left" (formula "21"))
                     (rule "inEqSimp_or_tautInEq1" (formula "20") (term "0"))
                     (rule "add_zero_right" (formula "20") (term "1,1,0"))
                     (rule "qeq_literals" (formula "20") (term "1,0"))
                     (builtin "One Step Simplification" (formula "20"))
                     (rule "true_left" (formula "20"))
                     (rule "ifthenelse_split" (formula "27") (term "1"))
                     (branch "msg.length ≥ 1 TRUE"
                        (rule "replace_known_left" (formula "29") (term "0,1,1,0,0") (ifseqformula "27"))
                        (builtin "One Step Simplification" (formula "29"))
                        (rule "replace_known_left" (formula "31") (term "0,1,1,0") (ifseqformula "27"))
                        (builtin "One Step Simplification" (formula "31"))
                        (rule "replace_known_left" (formula "30") (term "0,1,1,0") (ifseqformula "27"))
                        (builtin "One Step Simplification" (formula "30"))
                        (rule "inEqSimp_subsumption1" (formula "24") (ifseqformula "27"))
                        (rule "leq_literals" (formula "24") (term "0"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "true_left" (formula "24"))
                        (rule "commute_or_2" (formula "30") (term "0"))
                        (rule "inEqSimp_or_tautInEq1" (formula "30") (term "0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "30") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor1" (formula "30") (term "0,1,0,0"))
                        (rule "add_literals" (formula "30") (term "1,0,1,0,0"))
                        (rule "times_zero_1" (formula "30") (term "0,1,0,0"))
                        (rule "leq_literals" (formula "30") (term "1,0,0"))
                        (builtin "One Step Simplification" (formula "30"))
                        (rule "true_left" (formula "30"))
                        (rule "commute_or_2" (formula "29") (term "0"))
                        (builtin "One Step Simplification" (formula "29"))
                        (rule "commute_or_2" (formula "28") (term "0,0"))
                        (builtin "One Step Simplification" (formula "28"))
                        (rule "ifthenelse_split" (formula "27") (term "0"))
                        (branch "self.concatenated.length ≥ 1 TRUE"
                           (rule "applyEq" (formula "29") (term "1,1,0,0") (ifseqformula "28"))
                           (builtin "One Step Simplification" (formula "29"))
                           (rule "applyEq" (formula "30") (term "1,1,1,0") (ifseqformula "28"))
                           (rule "applyEq" (formula "24") (term "0") (ifseqformula "28"))
                           (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
                           (rule "inEqSimp_subsumption1" (formula "24") (ifseqformula "26"))
                           (rule "leq_literals" (formula "24") (term "0"))
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "true_left" (formula "24"))
                           (rule "inEqSimp_or_tautInEq3" (formula "28") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "28") (term "1,0"))
                           (rule "polySimp_pullOutFactor1" (formula "28") (term "0,1,0"))
                           (rule "add_literals" (formula "28") (term "1,0,1,0"))
                           (rule "times_zero_1" (formula "28") (term "0,1,0"))
                           (rule "leq_literals" (formula "28") (term "1,0"))
                           (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "cut_direct" (formula "16") (term "0"))
                           (branch "CUT: verif.selectvoting.system.core.Tag.BALLOTS = null TRUE"
                              (builtin "One Step Simplification" (formula "17"))
                              (rule "true_left" (formula "17"))
                              (rule "applyEq" (formula "19") (term "0,1,0,0,0") (ifseqformula "16"))
                              (rule "applyEq" (formula "19") (term "1,2,0,0,0") (ifseqformula "16"))
                              (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "16"))
                              (rule "cut_direct" (formula "48") (term "1"))
                              (branch "CUT: java.lang.RuntimeException::instance(exc_1) = TRUE TRUE"
                                 (rule "instanceof_not_compatible_5" (formula "49") (term "0") (ifseqformula "48"))
                                 (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "59")))
                                 (rule "true_left" (formula "49"))
                                 (rule "cut_direct" (formula "44") (term "0,0"))
                                 (branch "CUT: exc_1.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "45"))
                                    (rule "true_left" (formula "45"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "50"))
                                       (rule "applyEqReverse" (formula "67") (term "1") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "eqSymm" (formula "66"))
                                       (rule "replace_known_right" (formula "65") (term "0,1") (ifseqformula "49"))
                                       (builtin "One Step Simplification" (formula "65") (ifInst ""  (formula "48")))
                                       (rule "closeTrue" (formula "65"))
                                    )
                                    (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) FALSE"
                                       (rule "close" (formula "65") (ifseqformula "1"))
                                    )
                                 )
                                 (branch "CUT: exc_1.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "44"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "49"))
                                       (rule "applyEqReverse" (formula "68") (term "1") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "eqSymm" (formula "67"))
                                       (rule "replace_known_right" (formula "66") (term "0,1") (ifseqformula "48"))
                                       (builtin "One Step Simplification" (formula "66") (ifInst ""  (formula "50")))
                                       (rule "closeTrue" (formula "66"))
                                    )
                                    (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) FALSE"
                                       (rule "close" (formula "66") (ifseqformula "1"))
                                    )
                                 )
                              )
                              (branch "CUT: java.lang.RuntimeException::instance(exc_1) = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "48"))
                                 (rule "instanceof_not_compatible_5" (formula "49") (ifseqformula "48"))
                                 (rule "cut_direct" (formula "44") (term "0,0"))
                                 (branch "CUT: exc_1.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "45"))
                                    (rule "true_left" (formula "45"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "50"))
                                       (rule "applyEqReverse" (formula "67") (term "1") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "eqSymm" (formula "66"))
                                       (rule "replace_known_right" (formula "65") (term "0,0") (ifseqformula "48"))
                                       (builtin "One Step Simplification" (formula "65") (ifInst ""  (formula "49")))
                                       (rule "closeTrue" (formula "65"))
                                    )
                                    (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) FALSE"
                                       (rule "close" (formula "65") (ifseqformula "1"))
                                    )
                                 )
                                 (branch "CUT: exc_1.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "44"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "49"))
                                       (rule "applyEqReverse" (formula "68") (term "1") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "eqSymm" (formula "67"))
                                       (rule "replace_known_right" (formula "66") (term "0,0") (ifseqformula "50"))
                                       (builtin "One Step Simplification" (formula "66") (ifInst ""  (formula "48")))
                                       (rule "closeTrue" (formula "66"))
                                    )
                                    (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) FALSE"
                                       (rule "close" (formula "66") (ifseqformula "1"))
                                    )
                                 )
                              )
                           )
                           (branch "CUT: verif.selectvoting.system.core.Tag.BALLOTS = null FALSE"
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "narrowSelectArrayType" (formula "19") (term "2,0,0,0") (ifseqformula "5") (ifseqformula "49"))
                              (rule "cut_direct" (formula "48") (term "1"))
                              (branch "CUT: java.lang.RuntimeException::instance(exc_1) = TRUE TRUE"
                                 (rule "instanceof_not_compatible_5" (formula "49") (term "0") (ifseqformula "48"))
                                 (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "60")))
                                 (rule "true_left" (formula "49"))
                                 (rule "cut_direct" (formula "44") (term "0,0"))
                                 (branch "CUT: exc_1.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "45"))
                                    (rule "true_left" (formula "45"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "49"))
                                       (rule "applyEqReverse" (formula "68") (term "1") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "eqSymm" (formula "67"))
                                       (rule "replace_known_right" (formula "66") (term "0,0") (ifseqformula "50"))
                                       (builtin "One Step Simplification" (formula "66") (ifInst ""  (formula "48")))
                                       (rule "closeTrue" (formula "66"))
                                    )
                                    (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) FALSE"
                                       (rule "close" (formula "66") (ifseqformula "1"))
                                    )
                                 )
                                 (branch "CUT: exc_1.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "44"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "49"))
                                       (rule "applyEqReverse" (formula "69") (term "1") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "eqSymm" (formula "68"))
                                       (rule "replace_known_right" (formula "67") (term "0,0") (ifseqformula "50"))
                                       (builtin "One Step Simplification" (formula "67") (ifInst ""  (formula "48")))
                                       (rule "closeTrue" (formula "67"))
                                    )
                                    (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) FALSE"
                                       (rule "close" (formula "67") (ifseqformula "1"))
                                    )
                                 )
                              )
                              (branch "CUT: java.lang.RuntimeException::instance(exc_1) = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "48"))
                                 (rule "instanceof_not_compatible_5" (formula "49") (ifseqformula "48"))
                                 (rule "cut_direct" (formula "44") (term "0,0"))
                                 (branch "CUT: exc_1.<created> = TRUE TRUE"
                                    (builtin "One Step Simplification" (formula "45"))
                                    (rule "true_left" (formula "45"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "49"))
                                       (rule "applyEqReverse" (formula "68") (term "1") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "eqSymm" (formula "67"))
                                       (rule "replace_known_right" (formula "66") (term "0,0") (ifseqformula "50"))
                                       (builtin "One Step Simplification" (formula "66") (ifInst ""  (formula "48")))
                                       (rule "closeTrue" (formula "66"))
                                    )
                                    (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) FALSE"
                                       (rule "close" (formula "66") (ifseqformula "1"))
                                    )
                                 )
                                 (branch "CUT: exc_1.<created> = TRUE FALSE"
                                    (builtin "One Step Simplification" (formula "44"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "49"))
                                       (rule "applyEqReverse" (formula "69") (term "1") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "eqSymm" (formula "68"))
                                       (rule "replace_known_right" (formula "67") (term "0,1") (ifseqformula "48"))
                                       (builtin "One Step Simplification" (formula "67") (ifInst ""  (formula "50")))
                                       (rule "closeTrue" (formula "67"))
                                    )
                                    (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) FALSE"
                                       (rule "close" (formula "67") (ifseqformula "1"))
                                    )
                                 )
                              )
                           )
                        )
                        (branch "self.concatenated.length ≥ 1 FALSE"
                           (rule "eqSymm" (formula "27"))
                           (rule "inEqSimp_geqRight" (formula "51"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
                           (rule "qeq_literals" (formula "27"))
                           (rule "closeFalse" (formula "27"))
                        )
                     )
                     (branch "msg.length ≥ 1 FALSE"
                        (builtin "One Step Simplification" (formula "27"))
                        (rule "replace_known_right" (formula "30") (term "0,1,1,0") (ifseqformula "52"))
                        (builtin "One Step Simplification" (formula "30"))
                        (rule "replace_known_right" (formula "28") (term "0,1,1,0,0") (ifseqformula "52"))
                        (builtin "One Step Simplification" (formula "28"))
                        (rule "replace_known_right" (formula "29") (term "0,1,1,0") (ifseqformula "52"))
                        (builtin "One Step Simplification" (formula "29"))
                        (rule "inEqSimp_geqRight" (formula "52"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_antiSymm" (formula "25") (ifseqformula "1"))
                        (rule "applyEq" (formula "32") (term "1,1,1,0,0,0") (ifseqformula "25"))
                        (rule "add_literals" (formula "32") (term "1,1,0,0,0"))
                        (builtin "One Step Simplification" (formula "32"))
                        (rule "applyEq" (formula "1") (term "0") (ifseqformula "25"))
                        (rule "leq_literals" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "applyEq" (formula "29") (term "1,1,0,0,0,0") (ifseqformula "24"))
                        (rule "applyEq" (formula "30") (term "1,1,0,0,0") (ifseqformula "24"))
                        (rule "applyEq" (formula "25") (term "0") (ifseqformula "24"))
                        (rule "qeq_literals" (formula "25"))
                        (rule "true_left" (formula "25"))
                        (rule "inEqSimp_notGeq" (formula "27") (term "0"))
                        (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                        (rule "add_literals" (formula "27") (term "0,0,0"))
                        (rule "add_zero_left" (formula "27") (term "0,0"))
                        (rule "inEqSimp_or_tautInEq0" (formula "28") (term "0,0,0,0"))
                        (rule "add_literals" (formula "28") (term "1,1,0,0,0,0"))
                        (rule "qeq_literals" (formula "28") (term "1,0,0,0,0"))
                        (builtin "One Step Simplification" (formula "28"))
                        (rule "true_left" (formula "28"))
                        (rule "inEqSimp_or_tautInEq1" (formula "28") (term "0,0,0"))
                        (rule "add_zero_right" (formula "28") (term "1,1,0,0,0"))
                        (rule "qeq_literals" (formula "28") (term "1,0,0,0"))
                        (builtin "One Step Simplification" (formula "28"))
                        (rule "true_left" (formula "28"))
                        (rule "commute_or_2" (formula "28") (term "0"))
                        (rule "inEqSimp_or_tautInEq1" (formula "28") (term "0,0"))
                        (rule "add_zero_right" (formula "28") (term "1,1,0,0"))
                        (rule "qeq_literals" (formula "28") (term "1,0,0"))
                        (builtin "One Step Simplification" (formula "28"))
                        (rule "true_left" (formula "28"))
                        (rule "cut_direct" (formula "16") (term "0"))
                        (branch "CUT: verif.selectvoting.system.core.Tag.BALLOTS = null TRUE"
                           (builtin "One Step Simplification" (formula "17"))
                           (rule "true_left" (formula "17"))
                           (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "16"))
                           (rule "applyEq" (formula "19") (term "0,1,0,0,0") (ifseqformula "16"))
                           (rule "applyEq" (formula "19") (term "1,2,0,0,0") (ifseqformula "16"))
                           (rule "cut_direct" (formula "48") (term "1"))
                           (branch "CUT: java.lang.RuntimeException::instance(exc_1) = TRUE TRUE"
                              (rule "instanceof_not_compatible_5" (formula "49") (term "0") (ifseqformula "48"))
                              (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "59")))
                              (rule "true_left" (formula "49"))
                              (rule "cut_direct" (formula "44") (term "0,0"))
                              (branch "CUT: exc_1.<created> = TRUE TRUE"
                                 (builtin "One Step Simplification" (formula "45"))
                                 (rule "true_left" (formula "45"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "orRight" (formula "50"))
                                    (rule "applyEqReverse" (formula "67") (term "1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "eqSymm" (formula "66"))
                                    (rule "replace_known_right" (formula "65") (term "0,1") (ifseqformula "49"))
                                    (builtin "One Step Simplification" (formula "65") (ifInst ""  (formula "48")))
                                    (rule "closeTrue" (formula "65"))
                                 )
                                 (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) FALSE"
                                    (rule "close" (formula "65") (ifseqformula "1"))
                                 )
                              )
                              (branch "CUT: exc_1.<created> = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "44"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "orRight" (formula "49"))
                                    (rule "applyEqReverse" (formula "68") (term "1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "eqSymm" (formula "67"))
                                    (rule "replace_known_right" (formula "66") (term "0,1") (ifseqformula "48"))
                                    (builtin "One Step Simplification" (formula "66") (ifInst ""  (formula "50")))
                                    (rule "closeTrue" (formula "66"))
                                 )
                                 (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) FALSE"
                                    (rule "close" (formula "66") (ifseqformula "1"))
                                 )
                              )
                           )
                           (branch "CUT: java.lang.RuntimeException::instance(exc_1) = TRUE FALSE"
                              (builtin "One Step Simplification" (formula "48"))
                              (rule "instanceof_not_compatible_5" (formula "49") (ifseqformula "48"))
                              (rule "cut_direct" (formula "44") (term "0,0"))
                              (branch "CUT: exc_1.<created> = TRUE TRUE"
                                 (builtin "One Step Simplification" (formula "45"))
                                 (rule "true_left" (formula "45"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "orRight" (formula "50"))
                                    (rule "applyEqReverse" (formula "67") (term "1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "eqSymm" (formula "66"))
                                    (rule "replace_known_right" (formula "65") (term "0,1") (ifseqformula "49"))
                                    (builtin "One Step Simplification" (formula "65") (ifInst ""  (formula "48")))
                                    (rule "closeTrue" (formula "65"))
                                 )
                                 (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) FALSE"
                                    (rule "close" (formula "65") (ifseqformula "1"))
                                 )
                              )
                              (branch "CUT: exc_1.<created> = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "44"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "orRight" (formula "49"))
                                    (rule "applyEqReverse" (formula "68") (term "1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "eqSymm" (formula "67"))
                                    (rule "replace_known_right" (formula "66") (term "0,0") (ifseqformula "50"))
                                    (builtin "One Step Simplification" (formula "66") (ifInst ""  (formula "48")))
                                    (rule "closeTrue" (formula "66"))
                                 )
                                 (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) FALSE"
                                    (rule "close" (formula "66") (ifseqformula "1"))
                                 )
                              )
                           )
                        )
                        (branch "CUT: verif.selectvoting.system.core.Tag.BALLOTS = null FALSE"
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "narrowSelectArrayType" (formula "19") (term "2,0,0,0") (ifseqformula "5") (ifseqformula "49"))
                           (rule "cut_direct" (formula "48") (term "0"))
                           (branch "CUT: java.lang.Error::instance(exc_1) = TRUE TRUE"
                              (rule "instanceof_not_compatible_5" (formula "49") (term "1") (ifseqformula "48"))
                              (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "60")))
                              (rule "true_left" (formula "49"))
                              (rule "cut_direct" (formula "44") (term "0,0"))
                              (branch "CUT: exc_1.<created> = TRUE TRUE"
                                 (builtin "One Step Simplification" (formula "45"))
                                 (rule "true_left" (formula "45"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "orRight" (formula "49"))
                                    (rule "applyEqReverse" (formula "68") (term "1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "eqSymm" (formula "67"))
                                    (rule "replace_known_right" (formula "66") (term "0,0") (ifseqformula "50"))
                                    (builtin "One Step Simplification" (formula "66") (ifInst ""  (formula "48")))
                                    (rule "closeTrue" (formula "66"))
                                 )
                                 (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) FALSE"
                                    (rule "close" (formula "66") (ifseqformula "1"))
                                 )
                              )
                              (branch "CUT: exc_1.<created> = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "44"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "orRight" (formula "50"))
                                    (rule "applyEqReverse" (formula "69") (term "1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "eqSymm" (formula "68"))
                                    (rule "replace_known_right" (formula "67") (term "0,1") (ifseqformula "49"))
                                    (builtin "One Step Simplification" (formula "67") (ifInst ""  (formula "48")))
                                    (rule "closeTrue" (formula "67"))
                                 )
                                 (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) FALSE"
                                    (rule "close" (formula "67") (ifseqformula "1"))
                                 )
                              )
                           )
                           (branch "CUT: java.lang.Error::instance(exc_1) = TRUE FALSE"
                              (builtin "One Step Simplification" (formula "48"))
                              (rule "instanceof_not_compatible_5" (formula "49") (ifseqformula "48"))
                              (rule "cut_direct" (formula "44") (term "0,0"))
                              (branch "CUT: exc_1.<created> = TRUE TRUE"
                                 (builtin "One Step Simplification" (formula "45"))
                                 (rule "true_left" (formula "45"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "orRight" (formula "49"))
                                    (rule "applyEqReverse" (formula "68") (term "1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "eqSymm" (formula "67"))
                                    (rule "replace_known_right" (formula "66") (term "0,1") (ifseqformula "48"))
                                    (builtin "One Step Simplification" (formula "66") (ifInst ""  (formula "50")))
                                    (rule "closeTrue" (formula "66"))
                                 )
                                 (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) FALSE"
                                    (rule "close" (formula "66") (ifseqformula "1"))
                                 )
                              )
                              (branch "CUT: exc_1.<created> = TRUE FALSE"
                                 (builtin "One Step Simplification" (formula "44"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "orRight" (formula "50"))
                                    (rule "applyEqReverse" (formula "69") (term "1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "eqSymm" (formula "68"))
                                    (rule "replace_known_right" (formula "67") (term "0,0") (ifseqformula "48"))
                                    (builtin "One Step Simplification" (formula "67") (ifInst ""  (formula "49")))
                                    (rule "closeTrue" (formula "67"))
                                 )
                                 (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_splidAndCheck«anonHeapFunction» = TRUE) FALSE"
                                    (rule "close" (formula "67") (ifseqformula "1"))
                                 )
                              )
                           )
                        )
                     )
                  )
               )
            )
            (branch "ClassCastException (!(exc_1 instanceof java.lang.Throwable))"
               (builtin "One Step Simplification" (formula "68"))
               (rule "closeTrue" (formula "68"))
            )
         )
         (branch "if exc_1 instanceof java.lang.Throwable false"
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "64")))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
   (branch "Pre (decryptBallotsAndRemoveElectionId)"
      (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "13")) (ifInst ""  (formula "14")) (ifInst ""  (formula "15")) (ifInst ""  (formula "17")))
      (rule "andRight" (formula "20") (userinteraction))
      (branch "Case 1"
         (rule "Definition_axiom_for_ghostFieldsPre_in_verif_selectvoting_system_core_MixServer" (formula "6") (term "0") (inst "i=i") (userinteraction))
         (builtin "One Step Simplification" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "Definition_axiom_for_ghostFieldsPre_in_verif_selectvoting_system_core_MixServer" (formula "26") (term "0") (inst "i=i") (userinteraction))
         (builtin "One Step Simplification" (formula "26"))
         (rule "andRight" (formula "26"))
         (branch "Case 1"
            (rule "andRight" (formula "26"))
            (branch "Case 1"
               (rule "andRight" (formula "26"))
               (branch "Case 1"
                  (rule "andRight" (formula "26"))
                  (branch "Case 1"
                     (rule "andRight" (formula "26"))
                     (branch "Case 1"
                        (rule "andRight" (formula "26"))
                        (branch "Case 1"
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "1") (ifseqformula "16"))
                           (rule "eqSymm" (formula "12"))
                           (rule "eqSymm" (formula "11"))
                           (rule "eqSymm" (formula "10"))
                           (rule "eqSymm" (formula "9"))
                           (rule "eqSymm" (formula "19"))
                           (rule "eqSymm" (formula "13"))
                           (rule "eqSymm" (formula "7") (term "1,0"))
                           (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "25"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "23"))
                           (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "22")))
                           (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
                           (rule "applyEq" (formula "10") (term "1,1,0") (ifseqformula "13"))
                           (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "12"))
                           (rule "applyEq" (formula "9") (term "1") (ifseqformula "13"))
                           (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "11"))
                           (rule "applyEq" (formula "12") (term "1") (ifseqformula "11"))
                           (rule "applyEq" (formula "7") (term "0,1,0,0,1,0,0") (ifseqformula "11"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "21") (inst "i=i"))
                           (rule "sub_literals" (formula "21") (term "2,1,0,1,1"))
                           (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "23")))
                           (rule "greater_literals" (formula "21") (term "0"))
                           (builtin "One Step Simplification" (formula "21"))
                           (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                           (rule "array2seqDef" (formula "10") (term "0,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "10") (term "1") (inst "u=u"))
                           (rule "array2seqDef" (formula "10") (term "0,1,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "13") (term "0") (inst "u=u"))
                           (rule "array2seqDef" (formula "13") (term "1") (inst "u=u"))
                           (rule "narrowSelectArrayType" (formula "13") (term "2,1") (ifseqformula "1") (ifseqformula "25"))
                           (rule "array2seqDef" (formula "7") (term "1,0,0,1,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "7") (term "1,1,0") (inst "u=u"))
                           (rule "eqSymm" (formula "7") (term "1,0"))
                           (rule "array2seqDef" (formula "10") (term "1,1,0") (inst "u=u"))
                           (rule "narrowSelectArrayType" (formula "10") (term "2,1,1,0") (ifseqformula "1") (ifseqformula "25"))
                           (rule "array2seqDef" (formula "9") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "9"))
                           (rule "narrowSelectArrayType" (formula "9") (term "2,0") (ifseqformula "1") (ifseqformula "25"))
                           (rule "applyEq" (formula "13") (term "1") (ifseqformula "9"))
                           (rule "applyEq" (formula "10") (term "1,1,0") (ifseqformula "9"))
                           (rule "array2seqDef" (formula "7") (term "0,0,1,1,0") (inst "u=u"))
                           (rule "eqSeqDef" (formula "10") (inst "iv=iv"))
                           (rule "andLeft" (formula "10"))
                           (rule "getOfSeqDef" (formula "11") (term "1,1,0"))
                           (rule "castDel" (formula "11") (term "1,1,1,0"))
                           (rule "castDel" (formula "11") (term "2,1,1,0"))
                           (rule "add_zero_right" (formula "11") (term "0,2,1,1,1,0"))
                           (rule "polySimp_elimSub" (formula "11") (term "1,1,0,1,1,0"))
                           (rule "times_zero_2" (formula "11") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "11") (term "1,1,0,1,1,0"))
                           (rule "lenOfSeqDef" (formula "10") (term "1"))
                           (rule "polySimp_elimSub" (formula "10") (term "1,1"))
                           (rule "times_zero_2" (formula "10") (term "1,1,1"))
                           (rule "add_zero_right" (formula "10") (term "1,1"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "11") (term "0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1"))
                           (rule "add_zero_right" (formula "10") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,1,1,0"))
                           (rule "applyEq" (formula "11") (term "0,1,0,1,0,0") (ifseqformula "10"))
                           (rule "polySimp_addComm1" (formula "11") (term "0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "0,0,1"))
                           (rule "polySimp_elimOne" (formula "10") (term "0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,0,1,0,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,1,0,0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "0,0,0,1,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                           (rule "eqSeqDef2" (formula "14") (inst "iv=iv") (ifseqformula "14"))
                           (builtin "One Step Simplification" (formula "14"))
                           (rule "true_left" (formula "14"))
                           (rule "eqSeqDef2" (formula "9") (inst "iv=iv") (ifseqformula "9"))
                           (builtin "One Step Simplification" (formula "9"))
                           (rule "true_left" (formula "9"))
                           (rule "pullOutSelect" (formula "18") (term "1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_6"))
                           (rule "simplifySelectOfAnonEQ" (formula "18") (ifseqformula "15"))
                           (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "24")) (ifInst ""  (formula "2")))
                           (rule "applyEqReverse" (formula "19") (term "1,0") (ifseqformula "18"))
                           (rule "hideAuxiliaryEq" (formula "18"))
                           (rule "nnf_imp2or" (formula "20") (term "0"))
                           (rule "nnf_imp2or" (formula "7") (term "0"))
                           (rule "nnf_imp2or" (formula "10") (term "0"))
                           (rule "nnf_notAnd" (formula "20") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                           (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                           (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "7") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
                           (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
                           (rule "mul_literals" (formula "7") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "10") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
                           (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                           (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
                           (rule "Contract_axiom_for_ghostFieldsNonNull_in_MixServer" (formula "6") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
                           (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "24")) (ifInst ""  (formula "1")))
                           (rule "eqSymm" (formula "6"))
                           (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,1,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,1,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0,0,0,0"))
                           (rule "applyEq" (formula "6") (term "1") (ifseqformula "7"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "andLeft" (formula "6"))
                           (rule "andLeft" (formula "6"))
                           (rule "andLeft" (formula "6"))
                           (rule "andLeft" (formula "6"))
                           (rule "notLeft" (formula "7"))
                           (rule "andLeft" (formula "6"))
                           (rule "andLeft" (formula "6"))
                           (rule "notLeft" (formula "8"))
                           (rule "andLeft" (formula "6"))
                           (rule "notLeft" (formula "8"))
                           (rule "notLeft" (formula "7"))
                           (rule "notLeft" (formula "6"))
                           (rule "narrowSelectArrayType" (formula "13") (term "1,1,1,0") (ifseqformula "1") (ifseqformula "28"))
                           (rule "applyEq" (formula "7") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
                           (rule "applyEq" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
                           (rule "nnf_imp2or" (formula "6") (term "0"))
                           (rule "nnf_imp2or" (formula "7") (term "0"))
                           (rule "nnf_imp2or" (formula "8") (term "0"))
                           (rule "nnf_notAnd" (formula "6") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
                           (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "6") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
                           (rule "mul_literals" (formula "6") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "7") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
                           (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
                           (rule "mul_literals" (formula "7") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "8") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
                           (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "8") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                           (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                           (rule "Definition_axiom_for_ghostFieldsNonNull_in_verif_selectvoting_system_core_MixServer" (formula "9") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
                           (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "24")) (ifInst ""  (formula "25")) (ifInst ""  (formula "26")) (ifInst ""  (formula "27")) (ifInst ""  (formula "28")))
                           (rule "andLeft" (formula "9"))
                           (rule "andLeft" (formula "9"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                           (rule "applyEq" (formula "10") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                           (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                           (rule "Definition_axiom_for_ghostFieldsNonNull_in_verif_selectvoting_system_core_MixServer" (formula "35") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
                           (builtin "One Step Simplification" (formula "35"))
                           (rule "replaceKnownSelect_taclet000000020_0" (formula "35") (term "0,1,1,0,0,1"))
                           (rule "replaceKnownSelect_taclet000000020_0" (formula "35") (term "1,0,0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet000000020_1" (formula "35") (term "0,1,1,0,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet000000020_1" (formula "35") (term "1,0,0,1,0,1"))
                           (rule "replaceKnownSelect_taclet000000020_0" (formula "35") (term "0,0,1,0,0,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet000000020_1" (formula "35") (term "0,0,1,0,0,0,0,0"))
                           (rule "replace_known_right" (formula "35") (term "0,1,0,0,0,0,0") (ifseqformula "28"))
                           (builtin "One Step Simplification" (formula "35"))
                           (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,1"))
                           (rule "applyEq" (formula "35") (term "0,1,0,0,1,0,0,1") (ifseqformula "17"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1,0"))
                           (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1"))
                           (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1"))
                           (rule "pullOutSelect" (formula "35") (term "0,0,1,0,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "34")) (ifInst ""  (formula "3")))
                           (rule "applyEqReverse" (formula "36") (term "0,0,1,0,0,0,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "replace_known_right" (formula "35") (term "0,1,0,0,0,0") (ifseqformula "29"))
                           (builtin "One Step Simplification" (formula "35"))
                           (rule "pullOutSelect" (formula "35") (term "0,0,1,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "34")) (ifInst ""  (formula "3")))
                           (rule "applyEqReverse" (formula "36") (term "0,0,1,0,0,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "replace_known_right" (formula "35") (term "0,1,0,0,0") (ifseqformula "30"))
                           (builtin "One Step Simplification" (formula "35"))
                           (rule "pullOutSelect" (formula "35") (term "0,0,1,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_5"))
                           (rule "applyEq" (formula "36") (term "1,0,0,1,0,1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "36") (term "0,1,1,1,0,0,1,0") (ifseqformula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "34")) (ifInst ""  (formula "3")))
                           (rule "applyEqReverse" (formula "36") (term "0,0,1,0,0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "36") (term "1,0,0,1,0,1,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "36") (term "0,1,1,1,0,0,1,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "replace_known_right" (formula "35") (term "0,1,0,0,0") (ifseqformula "27"))
                           (builtin "One Step Simplification" (formula "35"))
                           (rule "applyEq" (formula "35") (term "1,1,1,0,0,1,0") (ifseqformula "16"))
                           (rule "pullOutSelect" (formula "35") (term "0,0,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_5"))
                           (rule "applyEq" (formula "36") (term "1,0,0,1,0,1,0,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "36") (term "0,1,1,1,0,0,1,0,0") (ifseqformula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "34")) (ifInst ""  (formula "3")))
                           (rule "applyEqReverse" (formula "36") (term "0,0,0,0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "36") (term "1,0,0,1,0,1,0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "36") (term "0,1,1,1,0,0,1,0,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "replace_known_right" (formula "35") (term "0,0,0,0") (ifseqformula "26"))
                           (builtin "One Step Simplification" (formula "35"))
                           (rule "nnf_imp2or" (formula "9") (term "0"))
                           (rule "nnf_imp2or" (formula "10") (term "0"))
                           (rule "nnf_imp2or" (formula "11") (term "0"))
                           (rule "nnf_imp2or" (formula "35") (term "0,1"))
                           (rule "nnf_notAnd" (formula "9") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
                           (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                           (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "9") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
                           (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                           (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "9") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
                           (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "9") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                           (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
                           (rule "nnf_imp2or" (formula "32") (term "0,1,0"))
                           (rule "nnf_imp2or" (formula "32") (term "0,0,0"))
                           (rule "nnf_notAnd" (formula "32") (term "0,0,1"))
                           (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0,1"))
                           (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0,1"))
                           (rule "add_literals" (formula "32") (term "0,0,0,1,0,0,1"))
                           (rule "add_zero_left" (formula "32") (term "0,0,1,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0,1"))
                           (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0,1"))
                           (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0,1"))
                           (rule "add_zero_right" (formula "32") (term "0,0,0,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0,1"))
                           (rule "mul_literals" (formula "32") (term "1,0,0,0,1"))
                           (rule "commute_or_2" (formula "22") (term "0"))
                           (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "21") (ifseqformula "3"))
                           (rule "replaceKnownSelect_taclet000000020_8" (formula "21") (term "1,1,0,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet000000020_9" (formula "21") (term "1,1,0,0,0,0"))
                           (rule "replaceKnownSelect_taclet000000020_6" (formula "21") (term "1,1,0,0,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet000000020_7" (formula "21") (term "1,1,0,0,0,0,0"))
                           (rule "replaceKnownSelect_taclet000000020_0" (formula "21") (term "1,1,0,0,0,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet000000020_1" (formula "21") (term "1,1,0,0,0,0,0,0"))
                           (rule "replaceKnownSelect_taclet000000020_4" (formula "21") (term "0,0,0,0,0,0,0,0,0,0"))
                           (rule "replaceKnownSelect_taclet000000020_2" (formula "21") (term "0,0,1,0,0,0,0,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet000000020_5" (formula "21") (term "0,0,0,0,0,0,0,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet000000020_3" (formula "21") (term "0,0,1,0,0,0,0,0,0,0"))
                           (rule "andLeft" (formula "21"))
                           (rule "notLeft" (formula "22"))
                           (rule "andLeft" (formula "21"))
                           (rule "notLeft" (formula "22"))
                           (rule "andLeft" (formula "21"))
                           (rule "andLeft" (formula "21"))
                           (rule "notLeft" (formula "23"))
                           (rule "notLeft" (formula "22"))
                           (rule "andLeft" (formula "21"))
                           (rule "andLeft" (formula "21"))
                           (rule "andLeft" (formula "21"))
                           (rule "andLeft" (formula "21"))
                           (rule "notLeft" (formula "21"))
                           (rule "notLeft" (formula "21"))
                           (rule "nonNull" (formula "23") (inst "i=i"))
                           (rule "greater_literals" (formula "23") (term "0,1"))
                           (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "29")))
                           (rule "sub_literals" (formula "23") (term "2,1,0"))
                           (builtin "One Step Simplification" (formula "23"))
                           (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "22") (inst "i=i"))
                           (rule "greater_literals" (formula "22") (term "0,1"))
                           (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "30")))
                           (rule "sub_literals" (formula "22") (term "2,1,0"))
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                           (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0") (ifseqformula "13"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "21") (inst "i=i"))
                           (rule "greater_literals" (formula "21") (term "0,1"))
                           (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "31")))
                           (rule "sub_literals" (formula "21") (term "2,1,0"))
                           (builtin "One Step Simplification" (formula "21"))
                           (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                           (rule "applyEq" (formula "21") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                           (rule "pullOutSelect" (formula "28") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "37")) (ifInst ""  (formula "3")))
                           (rule "applyEqReverse" (formula "29") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "narrowSelectArrayType" (formula "9") (term "2,0,0,1,1,0") (ifseqformula "1") (ifseqformula "28"))
                           (rule "narrowSelectArrayType" (formula "11") (term "2,0,1,0,0") (ifseqformula "1") (ifseqformula "28"))
                           (rule "narrowSelectArrayType" (formula "12") (term "2,0,1,0,0,1,0") (ifseqformula "1") (ifseqformula "28"))
                           (rule "pullOutSelect" (formula "27") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "37")) (ifInst ""  (formula "3")))
                           (rule "applyEqReverse" (formula "28") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "26") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "37")) (ifInst ""  (formula "3")))
                           (rule "applyEqReverse" (formula "27") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "25") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "37")) (ifInst ""  (formula "3")))
                           (rule "applyEqReverse" (formula "26") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "15") (ifseqformula "3"))
                           (rule "andLeft" (formula "15"))
                           (rule "notLeft" (formula "16"))
                           (rule "andLeft" (formula "15"))
                           (rule "andLeft" (formula "15"))
                           (rule "notLeft" (formula "17"))
                           (rule "notLeft" (formula "16"))
                           (rule "andLeft" (formula "15"))
                           (rule "notLeft" (formula "16"))
                           (rule "andLeft" (formula "15"))
                           (rule "andLeft" (formula "15"))
                           (rule "andLeft" (formula "15"))
                           (rule "andLeft" (formula "15"))
                           (rule "notLeft" (formula "15"))
                           (rule "notLeft" (formula "15"))
                           (rule "nonNull" (formula "17") (inst "i=i"))
                           (rule "greater_literals" (formula "17") (term "0,1"))
                           (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "31")))
                           (rule "sub_literals" (formula "17") (term "2,1,0"))
                           (builtin "One Step Simplification" (formula "17"))
                           (rule "narrowSelectArrayType" (formula "17") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "31"))
                           (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "16") (inst "i=i"))
                           (rule "sub_literals" (formula "16") (term "2,1,0,1,1"))
                           (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "32")))
                           (rule "greater_literals" (formula "16") (term "0"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "narrowSelectArrayType" (formula "16") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "32"))
                           (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                           (rule "applyEq" (formula "16") (term "0,1,0,0,1,0,0") (ifseqformula "13"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "15") (inst "i=i"))
                           (rule "greater_literals" (formula "15") (term "0,1"))
                           (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "33")))
                           (rule "sub_literals" (formula "15") (term "2,1,0"))
                           (builtin "One Step Simplification" (formula "15"))
                           (rule "narrowSelectArrayType" (formula "15") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "33"))
                           (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                           (rule "applyEq" (formula "15") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                           (rule "nnf_notAnd" (formula "40") (term "0,0,1,0"))
                           (rule "inEqSimp_notLeq" (formula "40") (term "1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "40") (term "1,0,0,1,0,0,1,0"))
                           (rule "mul_literals" (formula "40") (term "0,1,0,0,1,0,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "40") (term "0,0,1,0,0,1,0"))
                           (rule "add_literals" (formula "40") (term "0,0,0,1,0,0,1,0"))
                           (rule "add_zero_left" (formula "40") (term "0,0,1,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "40") (term "1,1,0,0,1,0"))
                           (rule "inEqSimp_notGeq" (formula "40") (term "0,0,0,1,0"))
                           (rule "times_zero_1" (formula "40") (term "1,0,0,0,0,0,1,0"))
                           (rule "add_literals" (formula "40") (term "0,0,0,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "0,0,0,1,0"))
                           (rule "mul_literals" (formula "40") (term "1,0,0,0,1,0"))
                           (rule "nnf_notAnd" (formula "40") (term "0,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "40") (term "1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "40") (term "1,0,0,1,0,0,0,0"))
                           (rule "mul_literals" (formula "40") (term "0,1,0,0,1,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "40") (term "0,0,1,0,0,0,0"))
                           (rule "add_literals" (formula "40") (term "0,0,0,1,0,0,0,0"))
                           (rule "add_zero_left" (formula "40") (term "0,0,1,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "1,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "40") (term "1,1,0,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "40") (term "0,0,0,0,0"))
                           (rule "times_zero_1" (formula "40") (term "1,0,0,0,0,0,0,0"))
                           (rule "add_literals" (formula "40") (term "0,0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "0,0,0,0,0"))
                           (rule "mul_literals" (formula "40") (term "1,0,0,0,0,0"))
                           (rule "nnf_imp2or" (formula "25") (term "0"))
                           (rule "nnf_imp2or" (formula "24") (term "0"))
                           (rule "commute_or_2" (formula "6") (term "0"))
                           (rule "nnf_imp2or" (formula "23") (term "0"))
                           (rule "commute_or_2" (formula "7") (term "0"))
                           (rule "commute_or_2" (formula "8") (term "0"))
                           (rule "nnf_imp2or" (formula "17") (term "0"))
                           (rule "nnf_imp2or" (formula "16") (term "0"))
                           (rule "nnf_imp2or" (formula "15") (term "0"))
                           (rule "arrayLengthIsAShort" (formula "14") (term "0"))
                           (builtin "One Step Simplification" (formula "14"))
                           (rule "true_left" (formula "14"))
                           (rule "arrayLengthNotNegative" (formula "14") (term "0"))
                           (rule "applyEq" (formula "14") (term "0") (ifseqformula "15"))
                           (rule "arrayLengthIsAShort" (formula "13") (term "0"))
                           (builtin "One Step Simplification" (formula "13"))
                           (rule "true_left" (formula "13"))
                           (rule "arrayLengthNotNegative" (formula "13") (term "0"))
                           (rule "applyEq" (formula "13") (term "0") (ifseqformula "14"))
                           (rule "arrayLengthIsAShort" (formula "13") (term "1"))
                           (builtin "One Step Simplification" (formula "13"))
                           (rule "true_left" (formula "13"))
                           (rule "arrayLengthNotNegative" (formula "13") (term "1"))
                           (rule "ifthenelse_split" (formula "11") (term "1"))
                           (branch "self.unsigned.length ≥ 1 TRUE"
                              (rule "replace_known_left" (formula "13") (term "0,1,1,0,0") (ifseqformula "11"))
                              (builtin "One Step Simplification" (formula "13"))
                              (rule "nnf_notAnd" (formula "27") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                              (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "27") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                              (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "26") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                              (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                              (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "25") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                              (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "19") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
                              (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                              (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "18") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                              (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                              (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "17") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
                              (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                              (rule "mul_literals" (formula "17") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
                              (rule "arrayLengthIsAShort" (formula "12") (term "1,0,1,0,0"))
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "arrayLengthNotNegative" (formula "12") (term "1,0,1,0,0"))
                              (rule "arrayLengthIsAShort" (formula "13") (term "1,0,0,0"))
                              (builtin "One Step Simplification" (formula "13"))
                              (rule "true_left" (formula "13"))
                              (rule "arrayLengthNotNegative" (formula "13") (term "1,0,0,0"))
                              (rule "equalityToSeqGetAndSeqLenLeft" (formula "26") (inst "iv=iv"))
                              (rule "andLeft" (formula "26"))
                              (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                              (rule "applyEq" (formula "27") (term "0,0,1,0,0,1,0,0") (ifseqformula "28"))
                              (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "28"))
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "true_left" (formula "26"))
                              (rule "applyEq" (formula "26") (term "0,0,1,0") (ifseqformula "27"))
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "true_left" (formula "26"))
                              (rule "commute_or" (formula "30") (term "0,0"))
                              (rule "commute_or_2" (formula "9") (term "0"))
                              (rule "commute_or" (formula "6") (term "0,0"))
                              (rule "commute_or" (formula "7") (term "0,0"))
                              (rule "commute_or" (formula "8") (term "0,0"))
                              (rule "commute_or_2" (formula "15") (term "0"))
                              (rule "commute_or_2" (formula "29") (term "0"))
                              (rule "commute_or_2" (formula "28") (term "0"))
                              (rule "andRight" (formula "44"))
                              (branch "Case 1"
                                 (rule "commute_or_2" (formula "27") (term "0"))
                                 (rule "commute_or_2" (formula "21") (term "0"))
                                 (rule "commute_or_2" (formula "20") (term "0"))
                                 (rule "commute_or_2" (formula "19") (term "0"))
                                 (rule "arrayLengthIsAShort" (formula "30") (term "1,1,0"))
                                 (builtin "One Step Simplification" (formula "30"))
                                 (rule "true_left" (formula "30"))
                                 (rule "arrayLengthNotNegative" (formula "30") (term "1,1,0"))
                                 (rule "commute_or" (formula "9") (term "0,0"))
                                 (rule "commute_or" (formula "15") (term "0,0"))
                                 (rule "commute_or" (formula "29") (term "0,0"))
                                 (rule "commute_or" (formula "28") (term "0,0"))
                                 (rule "commute_or" (formula "27") (term "0,0"))
                                 (rule "commute_or" (formula "21") (term "0,0"))
                                 (rule "commute_or" (formula "20") (term "0,0"))
                                 (rule "commute_or" (formula "19") (term "0,0"))
                                 (rule "andRight" (formula "42"))
                                 (branch "Case 1"
                                    (rule "allRight" (formula "42") (inst "sk=i_1_1"))
                                    (rule "orRight" (formula "42"))
                                    (rule "orRight" (formula "42"))
                                    (rule "notRight" (formula "44"))
                                    (rule "inEqSimp_geqRight" (formula "44"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "inEqSimp_leqRight" (formula "44"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0"))
                                    (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_65"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "24"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "37")))
                                    (rule "ifthenelse_negated" (formula "3") (term "0"))
                                    (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                                    (rule "ifEqualsNull" (formula "3"))
                                    (rule "lenNonNegative" (formula "18") (term "0"))
                                    (rule "inEqSimp_commuteLeq" (formula "18"))
                                    (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                                    (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "15"))
                                    (rule "leq_literals" (formula "18") (term "0"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "true_left" (formula "18"))
                                    (rule "cnf_rightDist" (formula "3"))
                                    (rule "andLeft" (formula "3"))
                                    (rule "commute_or" (formula "3"))
                                    (rule "cnf_rightDist" (formula "4"))
                                    (rule "andLeft" (formula "4"))
                                    (rule "commute_or" (formula "4"))
                                    (rule "cnf_rightDist" (formula "3"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "commute_or" (formula "3"))
                                    (rule "ifthenelse_to_or_right" (formula "21") (term "0,0,0"))
                                    (rule "nnf_notAnd" (formula "21") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,0,0,0"))
                                    (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "21") (term "0,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0,0"))
                                    (rule "commute_or" (formula "21") (term "0,0"))
                                    (rule "commute_or_2" (formula "21") (term "0"))
                                    (rule "commute_or" (formula "21") (term "1,1,0"))
                                    (rule "commute_or_2" (formula "21") (term "0,1,0"))
                                    (rule "commute_or" (formula "21") (term "0,0,1,0"))
                                    (rule "cnf_rightDist" (formula "21") (term "1,1,0"))
                                    (rule "cnf_rightDist" (formula "21") (term "0"))
                                    (rule "distr_forallAnd" (formula "21"))
                                    (rule "andLeft" (formula "21"))
                                    (rule "commute_or" (formula "22") (term "0"))
                                    (rule "shift_paren_or" (formula "21") (term "0"))
                                    (rule "commute_or_2" (formula "21") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "21"))
                                    (rule "commute_or" (formula "22") (term "1,1,0"))
                                    (rule "shift_paren_or" (formula "21") (term "0,0"))
                                    (rule "commute_or" (formula "21") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "21"))
                                    (rule "cnf_rightDist" (formula "22") (term "0"))
                                    (rule "distr_forallAnd" (formula "22"))
                                    (rule "andLeft" (formula "22"))
                                    (rule "commute_or_2" (formula "22") (term "0"))
                                    (rule "shift_paren_or" (formula "23") (term "0"))
                                    (rule "commute_or_2" (formula "23") (term "0,0"))
                                    (rule "inEqSimp_or_tautInEq1" (formula "23") (term "0"))
                                    (rule "inEqSimp_homoInEq1" (formula "23") (term "1,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "23") (term "0,1,0"))
                                    (rule "add_literals" (formula "23") (term "1,0,1,0"))
                                    (rule "times_zero_1" (formula "23") (term "0,1,0"))
                                    (rule "leq_literals" (formula "23") (term "1,0"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "true_left" (formula "23"))
                                    (rule "shift_paren_or" (formula "22") (term "0,0"))
                                    (rule "commute_or" (formula "22") (term "0,0,0"))
                                    (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0,0"))
                                    (rule "add_literals" (formula "22") (term "1,1,0,0"))
                                    (rule "qeq_literals" (formula "22") (term "1,0,0"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "true_left" (formula "22"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "16") (term "1,0") (ifseqformula "7"))
                                    (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "42"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "17") (term "1,1") (ifseqformula "7"))
                                    (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "42"))
                                    (builtin "One Step Simplification" (formula "17"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "0,1") (ifseqformula "7"))
                                    (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "42"))
                                    (builtin "One Step Simplification" (formula "24"))
                                    (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "24"))
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "true_left" (formula "4"))
                                    (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "23"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "true_left" (formula "4"))
                                    (rule "arrayLengthIsAShort" (formula "20") (term "1"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "true_left" (formula "20"))
                                    (rule "arrayLengthNotNegative" (formula "17") (term "0"))
                                    (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "18"))
                                    (rule "leq_literals" (formula "17") (term "0"))
                                    (builtin "One Step Simplification" (formula "17"))
                                    (rule "true_left" (formula "17"))
                                    (rule "allLeft" (formula "10") (inst "t=i_1_1"))
                                    (rule "replace_known_left" (formula "10") (term "0,0,0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "10"))
                                    (rule "inEqSimp_commuteGeq" (formula "10") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "2"))
                                    (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                                    (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "10") (term "0,0,1"))
                                    (rule "leq_literals" (formula "10") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "10"))
                                    (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "10") (term "0"))
                                    (builtin "One Step Simplification" (formula "10"))
                                    (rule "closeFalse" (formula "10"))
                                 )
                                 (branch "Case 2"
                                    (rule "allRight" (formula "42") (inst "sk=i_0_1"))
                                    (rule "orRight" (formula "42"))
                                    (rule "orRight" (formula "42"))
                                    (rule "notRight" (formula "44"))
                                    (rule "inEqSimp_geqRight" (formula "44"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "inEqSimp_leqRight" (formula "44"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0"))
                                    (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_64"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "24"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "38")))
                                    (rule "ifthenelse_negated" (formula "3") (term "0"))
                                    (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                                    (rule "ifEqualsNull" (formula "3"))
                                    (rule "lenNonNegative" (formula "18") (term "0"))
                                    (rule "inEqSimp_commuteLeq" (formula "18"))
                                    (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                                    (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "15"))
                                    (rule "leq_literals" (formula "18") (term "0"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "true_left" (formula "18"))
                                    (rule "cnf_rightDist" (formula "3"))
                                    (rule "andLeft" (formula "3"))
                                    (rule "commute_or" (formula "3"))
                                    (rule "cnf_rightDist" (formula "4"))
                                    (rule "andLeft" (formula "4"))
                                    (rule "commute_or" (formula "4"))
                                    (rule "cnf_rightDist" (formula "3"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "commute_or" (formula "3"))
                                    (rule "ifthenelse_to_or_right" (formula "21") (term "0,0,0"))
                                    (rule "nnf_notAnd" (formula "21") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,0,0,0"))
                                    (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "21") (term "0,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0,0"))
                                    (rule "commute_or" (formula "21") (term "0,0"))
                                    (rule "commute_or_2" (formula "21") (term "0"))
                                    (rule "commute_or" (formula "21") (term "1,1,0"))
                                    (rule "commute_or_2" (formula "21") (term "0,1,0"))
                                    (rule "commute_or" (formula "21") (term "0,0,1,0"))
                                    (rule "cnf_rightDist" (formula "21") (term "1,1,0"))
                                    (rule "cnf_rightDist" (formula "21") (term "0"))
                                    (rule "distr_forallAnd" (formula "21"))
                                    (rule "andLeft" (formula "21"))
                                    (rule "commute_or" (formula "22") (term "0"))
                                    (rule "shift_paren_or" (formula "21") (term "0"))
                                    (rule "commute_or_2" (formula "21") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "21"))
                                    (rule "commute_or" (formula "22") (term "1,1,0"))
                                    (rule "shift_paren_or" (formula "21") (term "0,0"))
                                    (rule "commute_or" (formula "21") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "21"))
                                    (rule "cnf_rightDist" (formula "22") (term "0"))
                                    (rule "distr_forallAnd" (formula "22"))
                                    (rule "andLeft" (formula "22"))
                                    (rule "commute_or_2" (formula "22") (term "0"))
                                    (rule "shift_paren_or" (formula "23") (term "0"))
                                    (rule "commute_or_2" (formula "23") (term "0,0"))
                                    (rule "inEqSimp_or_tautInEq1" (formula "23") (term "0"))
                                    (rule "inEqSimp_homoInEq1" (formula "23") (term "1,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "23") (term "0,1,0"))
                                    (rule "add_literals" (formula "23") (term "1,0,1,0"))
                                    (rule "times_zero_1" (formula "23") (term "0,1,0"))
                                    (rule "leq_literals" (formula "23") (term "1,0"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "true_left" (formula "23"))
                                    (rule "shift_paren_or" (formula "22") (term "0,0"))
                                    (rule "commute_or" (formula "22") (term "0,0,0"))
                                    (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0,0"))
                                    (rule "add_literals" (formula "22") (term "1,1,0,0"))
                                    (rule "qeq_literals" (formula "22") (term "1,0,0"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "true_left" (formula "22"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "16") (term "1,0") (ifseqformula "7"))
                                    (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "42"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "17") (term "1,1") (ifseqformula "7"))
                                    (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "42"))
                                    (builtin "One Step Simplification" (formula "17"))
                                    (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "17"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "17"))
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "true_left" (formula "4"))
                                    (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "true_left" (formula "4"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0,1") (ifseqformula "5"))
                                    (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "arrayLengthIsAShort" (formula "20") (term "1"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "true_left" (formula "20"))
                                    (rule "arrayLengthNotNegative" (formula "17") (term "0"))
                                    (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "18"))
                                    (rule "leq_literals" (formula "17") (term "0"))
                                    (builtin "One Step Simplification" (formula "17"))
                                    (rule "true_left" (formula "17"))
                                    (rule "allLeft" (formula "11") (inst "t=i_0_1"))
                                    (rule "replace_known_left" (formula "11") (term "0,0,0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "11"))
                                    (rule "inEqSimp_commuteGeq" (formula "11") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "11") (term "0") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "11") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "11"))
                                    (rule "inEqSimp_contradInEq1" (formula "11") (ifseqformula "2"))
                                    (rule "andLeft" (formula "11"))
                                    (rule "inEqSimp_homoInEq1" (formula "11"))
                                    (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
                                    (rule "add_literals" (formula "11") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "11") (term "1,0"))
                                    (rule "add_literals" (formula "11") (term "0"))
                                    (rule "leq_literals" (formula "11"))
                                    (rule "closeFalse" (formula "11"))
                                 )
                              )
                              (branch "Case 2"
                                 (rule "allRight" (formula "44") (inst "sk=i_8"))
                                 (rule "orRight" (formula "44"))
                                 (rule "notRight" (formula "45"))
                                 (rule "orRight" (formula "45"))
                                 (rule "inEqSimp_leqRight" (formula "45"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_geqRight" (formula "46"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0"))
                                 (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_63"))
                                 (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "27"))
                                 (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "41")))
                                 (rule "ifthenelse_negated" (formula "3") (term "0"))
                                 (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                                 (rule "ifEqualsNull" (formula "3"))
                                 (rule "commute_or_2" (formula "31") (term "0"))
                                 (rule "commute_or_2" (formula "25") (term "0"))
                                 (rule "commute_or_2" (formula "24") (term "0"))
                                 (rule "commute_or_2" (formula "23") (term "0"))
                                 (rule "arrayLengthIsAShort" (formula "34") (term "1,1,0"))
                                 (builtin "One Step Simplification" (formula "34"))
                                 (rule "true_left" (formula "34"))
                                 (rule "arrayLengthNotNegative" (formula "34") (term "1,1,0"))
                                 (rule "commute_or" (formula "13") (term "0,0"))
                                 (rule "commute_or" (formula "19") (term "0,0"))
                                 (rule "commute_or" (formula "33") (term "0,0"))
                                 (rule "commute_or" (formula "32") (term "0,0"))
                                 (rule "commute_or" (formula "31") (term "0,0"))
                                 (rule "commute_or" (formula "25") (term "0,0"))
                                 (rule "commute_or" (formula "24") (term "0,0"))
                                 (rule "commute_or" (formula "23") (term "0,0"))
                                 (rule "cnf_rightDist" (formula "3"))
                                 (rule "andLeft" (formula "3"))
                                 (rule "commute_or" (formula "3"))
                                 (rule "cnf_rightDist" (formula "4"))
                                 (rule "andLeft" (formula "4"))
                                 (rule "commute_or" (formula "4"))
                                 (rule "cnf_rightDist" (formula "3"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "commute_or" (formula "3"))
                                 (rule "lenNonNegative" (formula "20") (term "0"))
                                 (rule "inEqSimp_commuteLeq" (formula "20"))
                                 (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                                 (rule "inEqSimp_subsumption1" (formula "20") (ifseqformula "17"))
                                 (rule "leq_literals" (formula "20") (term "0"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "true_left" (formula "20"))
                                 (rule "ifthenelse_to_or_right" (formula "21") (term "0,0,0"))
                                 (rule "nnf_notAnd" (formula "21") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,0,0,0"))
                                 (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "21") (term "0,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0,0"))
                                 (rule "commute_or" (formula "21") (term "0,0"))
                                 (rule "commute_or_2" (formula "21") (term "0"))
                                 (rule "commute_or" (formula "21") (term "1,1,0"))
                                 (rule "commute_or_2" (formula "21") (term "0,1,0"))
                                 (rule "commute_or" (formula "21") (term "0,0,1,0"))
                                 (rule "cnf_rightDist" (formula "21") (term "1,1,0"))
                                 (rule "cnf_rightDist" (formula "21") (term "0"))
                                 (rule "distr_forallAnd" (formula "21"))
                                 (rule "andLeft" (formula "21"))
                                 (rule "commute_or" (formula "22") (term "0"))
                                 (rule "shift_paren_or" (formula "21") (term "0"))
                                 (rule "commute_or_2" (formula "21") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "21"))
                                 (rule "commute_or" (formula "22") (term "1,1,0"))
                                 (rule "shift_paren_or" (formula "21") (term "0,0"))
                                 (rule "commute_or" (formula "21") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "21"))
                                 (rule "cnf_rightDist" (formula "22") (term "0"))
                                 (rule "distr_forallAnd" (formula "22"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "commute_or_2" (formula "22") (term "0"))
                                 (rule "shift_paren_or" (formula "23") (term "0"))
                                 (rule "commute_or_2" (formula "23") (term "0,0"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "23") (term "0"))
                                 (rule "inEqSimp_homoInEq1" (formula "23") (term "1,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "23") (term "0,1,0"))
                                 (rule "add_literals" (formula "23") (term "1,0,1,0"))
                                 (rule "times_zero_1" (formula "23") (term "0,1,0"))
                                 (rule "leq_literals" (formula "23") (term "1,0"))
                                 (builtin "One Step Simplification" (formula "23"))
                                 (rule "true_left" (formula "23"))
                                 (rule "shift_paren_or" (formula "22") (term "0,0"))
                                 (rule "commute_or" (formula "22") (term "0,0,0"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0,0"))
                                 (rule "add_zero_right" (formula "22") (term "1,1,0,0"))
                                 (rule "qeq_literals" (formula "22") (term "1,0,0"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "true_left" (formula "22"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "16") (term "1,1") (ifseqformula "7"))
                                 (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "41"))
                                 (builtin "One Step Simplification" (formula "16"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "17") (term "1,0") (ifseqformula "7"))
                                 (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "43"))
                                 (builtin "One Step Simplification" (formula "17"))
                                 (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "17"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "16"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0,1") (ifseqformula "5"))
                                 (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "40"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "arrayLengthIsAShort" (formula "20") (term "1"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "true_left" (formula "20"))
                                 (rule "arrayLengthNotNegative" (formula "20") (term "1"))
                                 (rule "inEqSimp_subsumption1" (formula "20") (ifseqformula "17"))
                                 (rule "leq_literals" (formula "20") (term "0"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "true_left" (formula "20"))
                                 (rule "allLeft" (formula "12") (inst "t=i_8"))
                                 (rule "replace_known_left" (formula "12") (term "0,0,0") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "1"))
                                 (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
                                 (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "12") (term "0,0,1"))
                                 (rule "leq_literals" (formula "12") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "inEqSimp_contradInEq1" (formula "12") (ifseqformula "2"))
                                 (rule "qeq_literals" (formula "12") (term "0"))
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "closeFalse" (formula "12"))
                              )
                           )
                           (branch "self.unsigned.length ≥ 1 FALSE"
                              (rule "replace_known_right" (formula "12") (term "0,1,1,0,0") (ifseqformula "28"))
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "inEqSimp_geqRight" (formula "28"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_or_tautInEq0" (formula "13") (term "0,0"))
                              (rule "add_literals" (formula "13") (term "1,1,0,0"))
                              (rule "qeq_literals" (formula "13") (term "1,0,0"))
                              (builtin "One Step Simplification" (formula "13"))
                              (rule "true_left" (formula "13"))
                              (rule "nnf_notAnd" (formula "26") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                              (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                              (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "25") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                              (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "24") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                              (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                              (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "18") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                              (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                              (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "17") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
                              (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                              (rule "mul_literals" (formula "17") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "16") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                              (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                              (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                              (rule "arrayLengthIsAShort" (formula "12") (term "1,0,1,0,0"))
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "arrayLengthNotNegative" (formula "12") (term "1,0,0,0"))
                              (rule "arrayLengthNotNegative" (formula "13") (term "1,0,1,0,0"))
                              (rule "arrayLengthIsAShort" (formula "14") (term "1,0,0,0"))
                              (builtin "One Step Simplification" (formula "14"))
                              (rule "true_left" (formula "14"))
                              (rule "equalityToSeqGetAndSeqLenLeft" (formula "25") (inst "iv=iv"))
                              (rule "andLeft" (formula "25"))
                              (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                              (rule "applyEq" (formula "26") (term "0,0,1,0,0,1,0,0") (ifseqformula "27"))
                              (rule "applyEq" (formula "26") (term "0,0,1,0") (ifseqformula "27"))
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "true_left" (formula "26"))
                              (rule "applyEq" (formula "25") (term "0,0") (ifseqformula "26"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "true_left" (formula "25"))
                              (rule "commute_or" (formula "29") (term "0,0"))
                              (rule "commute_or_2" (formula "10") (term "0"))
                              (rule "commute_or" (formula "7") (term "0,0"))
                              (rule "commute_or" (formula "8") (term "0,0"))
                              (rule "commute_or" (formula "9") (term "0,0"))
                              (rule "commute_or_2" (formula "28") (term "0"))
                              (rule "commute_or_2" (formula "27") (term "0"))
                              (rule "andRight" (formula "43"))
                              (branch "Case 1"
                                 (rule "commute_or_2" (formula "26") (term "0"))
                                 (rule "commute_or_2" (formula "20") (term "0"))
                                 (rule "commute_or_2" (formula "19") (term "0"))
                                 (rule "commute_or_2" (formula "18") (term "0"))
                                 (rule "arrayLengthIsAShort" (formula "29") (term "1,1,0"))
                                 (builtin "One Step Simplification" (formula "29"))
                                 (rule "true_left" (formula "29"))
                                 (rule "arrayLengthNotNegative" (formula "29") (term "1,1,0"))
                                 (rule "commute_or" (formula "10") (term "0,0"))
                                 (rule "commute_or" (formula "28") (term "0,0"))
                                 (rule "commute_or" (formula "27") (term "0,0"))
                                 (rule "commute_or" (formula "26") (term "0,0"))
                                 (rule "commute_or" (formula "20") (term "0,0"))
                                 (rule "commute_or" (formula "19") (term "0,0"))
                                 (rule "commute_or" (formula "18") (term "0,0"))
                                 (rule "andRight" (formula "41"))
                                 (branch "Case 1"
                                    (rule "allRight" (formula "41") (inst "sk=i_1_0"))
                                    (rule "orRight" (formula "41"))
                                    (rule "orRight" (formula "41"))
                                    (rule "notRight" (formula "43"))
                                    (rule "inEqSimp_leqRight" (formula "42"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_geqRight" (formula "43"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "0"))
                                    (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_62"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "23"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "36")))
                                    (rule "ifthenelse_negated" (formula "3") (term "0"))
                                    (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                                    (rule "ifEqualsNull" (formula "3"))
                                    (rule "lenNonNegative" (formula "18") (term "0"))
                                    (rule "inEqSimp_commuteLeq" (formula "18"))
                                    (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                                    (rule "qeq_literals" (formula "18"))
                                    (rule "true_left" (formula "18"))
                                    (rule "cnf_rightDist" (formula "3"))
                                    (rule "andLeft" (formula "3"))
                                    (rule "commute_or" (formula "3"))
                                    (rule "cnf_rightDist" (formula "4"))
                                    (rule "andLeft" (formula "4"))
                                    (rule "commute_or" (formula "4"))
                                    (rule "cnf_rightDist" (formula "3"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "commute_or" (formula "3"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "17") (term "1,1") (ifseqformula "8"))
                                    (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "17"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "0,0") (ifseqformula "8"))
                                    (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "42"))
                                    (builtin "One Step Simplification" (formula "24"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0,1") (ifseqformula "8"))
                                    (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "41"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "22"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "22"))
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "true_left" (formula "4"))
                                    (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "true_left" (formula "4"))
                                    (rule "arrayLengthIsAShort" (formula "5") (term "0"))
                                    (builtin "One Step Simplification" (formula "5"))
                                    (rule "true_left" (formula "5"))
                                    (rule "arrayLengthNotNegative" (formula "5") (term "0"))
                                    (rule "inEqSimp_antiSymm" (formula "5") (ifseqformula "6"))
                                    (rule "applyEq" (formula "6") (term "0") (ifseqformula "5"))
                                    (rule "qeq_literals" (formula "6"))
                                    (rule "true_left" (formula "6"))
                                    (rule "applyEq" (formula "6") (term "0") (ifseqformula "5"))
                                    (rule "leq_literals" (formula "6"))
                                    (rule "true_left" (formula "6"))
                                    (rule "allLeft" (formula "11") (inst "t=i_1_0"))
                                    (rule "replace_known_left" (formula "11") (term "0,0,0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "11"))
                                    (rule "inEqSimp_commuteGeq" (formula "11") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "11") (term "1") (ifseqformula "1"))
                                    (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1"))
                                    (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "11") (term "0,0,1"))
                                    (rule "leq_literals" (formula "11") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "11"))
                                    (rule "inEqSimp_contradInEq1" (formula "11") (ifseqformula "2"))
                                    (rule "qeq_literals" (formula "11") (term "0"))
                                    (builtin "One Step Simplification" (formula "11"))
                                    (rule "closeFalse" (formula "11"))
                                 )
                                 (branch "Case 2"
                                    (rule "allRight" (formula "41") (inst "sk=i_0_0"))
                                    (rule "orRight" (formula "41"))
                                    (rule "orRight" (formula "41"))
                                    (rule "notRight" (formula "43"))
                                    (rule "inEqSimp_leqRight" (formula "42"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_geqRight" (formula "43"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "0"))
                                    (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_61"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "23"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "37")))
                                    (rule "ifthenelse_negated" (formula "3") (term "0"))
                                    (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                                    (rule "ifEqualsNull" (formula "3"))
                                    (rule "lenNonNegative" (formula "18") (term "0"))
                                    (rule "inEqSimp_commuteLeq" (formula "18"))
                                    (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                                    (rule "qeq_literals" (formula "18"))
                                    (rule "true_left" (formula "18"))
                                    (rule "cnf_rightDist" (formula "3"))
                                    (rule "andLeft" (formula "3"))
                                    (rule "commute_or" (formula "3"))
                                    (rule "cnf_rightDist" (formula "4"))
                                    (rule "andLeft" (formula "4"))
                                    (rule "commute_or" (formula "4"))
                                    (rule "cnf_rightDist" (formula "3"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "commute_or" (formula "3"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "17") (term "1,1") (ifseqformula "8"))
                                    (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "17"))
                                    (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "17"))
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "true_left" (formula "4"))
                                    (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "16"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "true_left" (formula "4"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0,0") (ifseqformula "6"))
                                    (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0,1") (ifseqformula "6"))
                                    (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "39"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "arrayLengthIsAShort" (formula "5") (term "0"))
                                    (builtin "One Step Simplification" (formula "5"))
                                    (rule "true_left" (formula "5"))
                                    (rule "arrayLengthNotNegative" (formula "5") (term "0"))
                                    (rule "inEqSimp_antiSymm" (formula "5") (ifseqformula "6"))
                                    (rule "applyEq" (formula "6") (term "0") (ifseqformula "5"))
                                    (rule "qeq_literals" (formula "6"))
                                    (rule "true_left" (formula "6"))
                                    (rule "applyEq" (formula "6") (term "0") (ifseqformula "5"))
                                    (rule "leq_literals" (formula "6"))
                                    (rule "true_left" (formula "6"))
                                    (rule "allLeft" (formula "12") (inst "t=i_0_0"))
                                    (rule "replace_known_left" (formula "12") (term "0,0,0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "1"))
                                    (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
                                    (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "12") (term "0,0,1"))
                                    (rule "leq_literals" (formula "12") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "inEqSimp_contradInEq1" (formula "12") (ifseqformula "2"))
                                    (rule "qeq_literals" (formula "12") (term "0"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "closeFalse" (formula "12"))
                                 )
                              )
                              (branch "Case 2"
                                 (rule "allRight" (formula "43") (inst "sk=i_7"))
                                 (rule "orRight" (formula "43"))
                                 (rule "orRight" (formula "43"))
                                 (rule "notRight" (formula "45"))
                                 (rule "inEqSimp_leqRight" (formula "44"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_geqRight" (formula "45"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0"))
                                 (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_60"))
                                 (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "26"))
                                 (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "40")))
                                 (rule "ifthenelse_negated" (formula "3") (term "0"))
                                 (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                                 (rule "ifEqualsNull" (formula "3"))
                                 (rule "commute_or_2" (formula "30") (term "0"))
                                 (rule "commute_or_2" (formula "24") (term "0"))
                                 (rule "commute_or_2" (formula "23") (term "0"))
                                 (rule "commute_or_2" (formula "22") (term "0"))
                                 (rule "arrayLengthIsAShort" (formula "33") (term "1,1,0"))
                                 (builtin "One Step Simplification" (formula "33"))
                                 (rule "true_left" (formula "33"))
                                 (rule "arrayLengthNotNegative" (formula "33") (term "1,1,0"))
                                 (rule "commute_or" (formula "14") (term "0,0"))
                                 (rule "commute_or" (formula "32") (term "0,0"))
                                 (rule "commute_or" (formula "31") (term "0,0"))
                                 (rule "commute_or" (formula "30") (term "0,0"))
                                 (rule "commute_or" (formula "24") (term "0,0"))
                                 (rule "commute_or" (formula "23") (term "0,0"))
                                 (rule "commute_or" (formula "22") (term "0,0"))
                                 (rule "cnf_rightDist" (formula "3"))
                                 (rule "andLeft" (formula "3"))
                                 (rule "commute_or" (formula "3"))
                                 (rule "cnf_rightDist" (formula "4"))
                                 (rule "andLeft" (formula "4"))
                                 (rule "commute_or" (formula "4"))
                                 (rule "cnf_rightDist" (formula "3"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "commute_or" (formula "3"))
                                 (rule "lenNonNegative" (formula "20") (term "0"))
                                 (rule "inEqSimp_commuteLeq" (formula "20"))
                                 (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                                 (rule "qeq_literals" (formula "20"))
                                 (rule "true_left" (formula "20"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "17") (term "1,1") (ifseqformula "8"))
                                 (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "40"))
                                 (builtin "One Step Simplification" (formula "17"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "0,0") (ifseqformula "8"))
                                 (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "42"))
                                 (builtin "One Step Simplification" (formula "24"))
                                 (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "24"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "24"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0,1") (ifseqformula "6"))
                                 (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "39"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "arrayLengthIsAShort" (formula "5") (term "0"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "arrayLengthNotNegative" (formula "5") (term "0"))
                                 (rule "inEqSimp_antiSymm" (formula "5") (ifseqformula "6"))
                                 (rule "applyEq" (formula "6") (term "0") (ifseqformula "5"))
                                 (rule "qeq_literals" (formula "6"))
                                 (rule "true_left" (formula "6"))
                                 (rule "applyEq" (formula "6") (term "0") (ifseqformula "5"))
                                 (rule "leq_literals" (formula "6"))
                                 (rule "true_left" (formula "6"))
                                 (rule "allLeft" (formula "13") (inst "t=i_7"))
                                 (rule "replace_known_left" (formula "13") (term "0,0,0") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "inEqSimp_commuteGeq" (formula "13") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "13") (term "1") (ifseqformula "1"))
                                 (rule "inEqSimp_homoInEq1" (formula "13") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1"))
                                 (rule "add_literals" (formula "13") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "13") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "13") (term "0,0,1"))
                                 (rule "leq_literals" (formula "13") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "inEqSimp_contradInEq1" (formula "13") (ifseqformula "2"))
                                 (rule "qeq_literals" (formula "13") (term "0"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "closeFalse" (formula "13"))
                              )
                           )
                        )
                        (branch
                           (rule "allRight" (formula "26") (inst "sk=i_9") (userinteraction))
                           (rule "impRight" (formula "26") (userinteraction))
                           (rule "allLeftHide" (formula "8") (inst "t=i_9") (userinteraction))
                           (rule "impLeft" (formula "8") (userinteraction))
                           (branch "Case 1"
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "1") (ifseqformula "16"))
                              (rule "andLeft" (formula "1"))
                              (rule "eqSymm" (formula "14"))
                              (rule "eqSymm" (formula "13"))
                              (rule "eqSymm" (formula "12"))
                              (rule "eqSymm" (formula "28"))
                              (rule "eqSymm" (formula "20"))
                              (rule "eqSymm" (formula "11"))
                              (rule "eqSymm" (formula "10"))
                              (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "23"))
                              (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "27"))
                              (builtin "One Step Simplification" (formula "6"))
                              (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "25"))
                              (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "24")))
                              (rule "inEqSimp_ltRight" (formula "23"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "1") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "3") (term "0"))
                              (rule "inEqSimp_commuteLeq" (formula "2"))
                              (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "13"))
                              (rule "applyEq" (formula "12") (term "1,1,0") (ifseqformula "15"))
                              (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "14"))
                              (rule "applyEq" (formula "11") (term "1") (ifseqformula "15"))
                              (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "13"))
                              (rule "applyEq" (formula "14") (term "1") (ifseqformula "13"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                              (rule "polySimp_elimOne" (formula "3") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "nonNull" (formula "23") (inst "i=i"))
                              (rule "greater_literals" (formula "23") (term "0,1"))
                              (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "25")))
                              (rule "sub_literals" (formula "23") (term "2,1,0"))
                              (builtin "One Step Simplification" (formula "23"))
                              (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                              (rule "array2seqDef" (formula "15") (term "0") (inst "u=u"))
                              (rule "array2seqDef" (formula "15") (term "1") (inst "u=u"))
                              (rule "narrowSelectArrayType" (formula "15") (term "2,1") (ifseqformula "4") (ifseqformula "27"))
                              (rule "array2seqDef" (formula "28") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "28"))
                              (rule "array2seqDef" (formula "12") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "12"))
                              (rule "array2seqDef" (formula "11") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "11"))
                              (rule "narrowSelectArrayType" (formula "11") (term "2,0") (ifseqformula "4") (ifseqformula "27"))
                              (rule "applyEq" (formula "15") (term "1") (ifseqformula "11"))
                              (rule "array2seqDef" (formula "28") (term "1,0,1") (inst "u=u"))
                              (rule "array2seqDef" (formula "28") (term "0,0,1") (inst "u=u"))
                              (rule "array2seqDef" (formula "12") (term "0,1,1") (inst "u=u"))
                              (rule "array2seqDef" (formula "12") (term "1,1,1") (inst "u=u"))
                              (rule "narrowSelectArrayType" (formula "12") (term "2,1,1,1") (ifseqformula "4") (ifseqformula "27"))
                              (rule "applyEq" (formula "12") (term "1,1,1") (ifseqformula "11"))
                              (rule "array2seqDef" (formula "12") (term "0,1") (inst "u=u"))
                              (rule "eqSymm" (formula "12"))
                              (rule "equalityToSeqGetAndSeqLenRight" (formula "28") (inst "iv=iv"))
                              (rule "lenOfSeqDef" (formula "28") (term "0,0"))
                              (rule "eqSymm" (formula "28") (term "0"))
                              (rule "polySimp_elimSub" (formula "28") (term "1,1,0"))
                              (rule "times_zero_2" (formula "28") (term "1,1,1,0"))
                              (rule "add_zero_right" (formula "28") (term "1,1,0"))
                              (rule "lenOfSeqDef" (formula "28") (term "1,1,0,0,1"))
                              (rule "polySimp_elimSub" (formula "28") (term "1,1,1,0,0,1"))
                              (rule "times_zero_2" (formula "28") (term "1,1,1,1,0,0,1"))
                              (rule "add_zero_right" (formula "28") (term "1,1,1,0,0,1"))
                              (rule "getOfSeqDef" (formula "28") (term "0,1,0,1"))
                              (rule "castDel" (formula "28") (term "2,0,1,0,1"))
                              (rule "castDel" (formula "28") (term "1,0,1,0,1"))
                              (rule "add_zero_right" (formula "28") (term "0,2,1,0,1,0,1"))
                              (rule "eqSymm" (formula "28") (term "1,0,1"))
                              (rule "polySimp_elimSub" (formula "28") (term "1,1,0,1,1,0,1"))
                              (rule "mul_literals" (formula "28") (term "1,1,1,0,1,1,0,1"))
                              (rule "add_zero_right" (formula "28") (term "1,1,0,1,1,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "28") (term "0,1,0"))
                              (rule "add_zero_right" (formula "28") (term "0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "28") (term "0,1,1,0,0,1"))
                              (rule "add_zero_right" (formula "28") (term "0,0,1,1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,1,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,1,1,0,1"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,1,1,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,1,1,0,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "28") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "28") (term "0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,1,1,0,1"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,1,1,0,1"))
                              (rule "polySimp_rightDist" (formula "28") (term "1,1,0,1,1,0,1"))
                              (rule "mul_literals" (formula "28") (term "0,1,1,0,1,1,0,1"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,1,1,0,1"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,1,1,0,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "28") (term "0,0,1,0,0,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "0,0,0,1,0,0,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "28") (term "0,0,0,1,0,0,1,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,1"))
                              (rule "mul_literals" (formula "28") (term "0,1,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,1"))
                              (rule "eqSeqDef2" (formula "15") (inst "iv=iv") (ifseqformula "15"))
                              (builtin "One Step Simplification" (formula "15"))
                              (rule "true_left" (formula "15"))
                              (rule "eqSeqDef" (formula "12") (inst "iv=iv"))
                              (rule "andLeft" (formula "12"))
                              (rule "getOfSeqDef" (formula "13") (term "1,1,0"))
                              (rule "castDel" (formula "13") (term "1,1,1,0"))
                              (rule "castDel" (formula "13") (term "2,1,1,0"))
                              (rule "add_zero_right" (formula "13") (term "0,2,1,1,1,0"))
                              (rule "polySimp_elimSub" (formula "13") (term "1,1,0,1,1,0"))
                              (rule "times_zero_2" (formula "13") (term "1,1,1,0,1,1,0"))
                              (rule "add_zero_right" (formula "13") (term "1,1,0,1,1,0"))
                              (rule "lenOfSeqDef" (formula "12") (term "1"))
                              (rule "polySimp_elimSub" (formula "12") (term "1,1"))
                              (rule "times_zero_2" (formula "12") (term "1,1,1"))
                              (rule "add_zero_right" (formula "12") (term "1,1"))
                              (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                              (rule "polySimp_addComm1" (formula "13") (term "0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "12") (term "0,1"))
                              (rule "add_zero_right" (formula "12") (term "0,0,1"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,1,1,0"))
                              (rule "applyEq" (formula "13") (term "0,1,0,1,0,0") (ifseqformula "12"))
                              (rule "polySimp_addComm1" (formula "13") (term "0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "13") (term "0,1,1,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,1,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "12") (term "0,0,1"))
                              (rule "polySimp_elimOne" (formula "12") (term "0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,1,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "0,0,1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "13") (term "0,0,1,1,1,0,0"))
                              (rule "eqSeqDef2" (formula "11") (inst "iv=iv") (ifseqformula "11"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "true_left" (formula "11"))
                              (rule "pullOutSelect" (formula "20") (term "1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_26"))
                              (rule "simplifySelectOfAnonEQ" (formula "20") (ifseqformula "17"))
                              (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "26")) (ifInst ""  (formula "5")))
                              (rule "applyEqReverse" (formula "21") (term "1,0") (ifseqformula "20"))
                              (rule "hideAuxiliaryEq" (formula "20"))
                              (rule "pullOutSelect" (formula "3") (term "0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_23"))
                              (rule "applyEq" (formula "28") (term "1,1,1,1,1,0,1") (ifseqformula "3"))
                              (rule "applyEq" (formula "28") (term "1,0,1,1,1,1,0,0,1") (ifseqformula "3"))
                              (rule "applyEq" (formula "28") (term "1,0,0,0,1,1,1,0,0,1") (ifseqformula "3"))
                              (rule "applyEq" (formula "28") (term "1,0,0,0,1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "28") (term "1,0,1,1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "28") (term "1,0,1,1,1,0,1,1,0,1") (ifseqformula "3"))
                              (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "18"))
                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "26")) (ifInst ""  (formula "6")))
                              (rule "applyEqReverse" (formula "4") (term "0,0") (ifseqformula "3"))
                              (rule "applyEqReverse" (formula "28") (term "1,1,1,1,1,0,1") (ifseqformula "3"))
                              (rule "applyEqReverse" (formula "28") (term "1,0,1,1,1,1,0,0,1") (ifseqformula "3"))
                              (rule "applyEqReverse" (formula "28") (term "1,0,0,0,1,1,1,0,0,1") (ifseqformula "3"))
                              (rule "applyEqReverse" (formula "28") (term "1,0,0,0,1,0") (ifseqformula "3"))
                              (rule "applyEqReverse" (formula "28") (term "1,0,1,1,0") (ifseqformula "3"))
                              (rule "applyEqReverse" (formula "28") (term "1,0,1,1,1,0,1,1,0,1") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "applyEq" (formula "3") (term "0") (ifseqformula "13"))
                              (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "3"))
                              (rule "andLeft" (formula "1"))
                              (rule "inEqSimp_homoInEq1" (formula "1"))
                              (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                              (rule "add_literals" (formula "1") (term "1,1,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0"))
                              (rule "add_zero_right" (formula "1") (term "0"))
                              (rule "leq_literals" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "Case 2"
                              (rule "cut" (inst "cutFormula=  array2seq(heapAfter_splidAndCheck,
            byte[]::select(heapAfter_splidAndCheck,
                           byte[][]::select(heapAfter_splidAndCheck,
                                            self,
                                            verif.selectvoting.system.core.MixServer::$encrypted),
                           arr(i_9)))
= array2seq(heap,
            byte[]::select(heap,
                           byte[][]::select(heap,
                                            self,
                                            verif.selectvoting.system.core.MixServer::$encrypted),
                           arr(i_9)))") (userinteraction))
                              (branch "CUT: array2seq(heapAfter_splidAndCheck, self.encrypted[i_9]@heapAfter_splidAndCheck) = array2seq(heap, self.encrypted[i_9]) TRUE"
                                 (rule "applyEq" (formula "28") (term "0") (ifseqformula "1") (userinteraction))
                                 (rule "applyEq" (formula "28") (term "0") (ifseqformula "9") (userinteraction))
                                 (rule "cut" (inst "cutFormula=  array2seq(heapAfter_splidAndCheck,
            byte[]::select(heapAfter_splidAndCheck,
                           self,
                           verif.selectvoting.system.core.MixServer::$electionID))
= array2seq(heap,
            byte[]::select(heap,
                           self,
                           verif.selectvoting.system.core.MixServer::$electionID))") (userinteraction))
                                 (branch "CUT: array2seq(heapAfter_splidAndCheck, self.electionID@heapAfter_splidAndCheck) = array2seq(heap, self.electionID) TRUE"
                                    (rule "applyEq" (formula "29") (term "0,0,1") (ifseqformula "1") (userinteraction))
                                    (rule "cut" (inst "cutFormula=  array2seq(heapAfter_splidAndCheck,
            byte[]::select(heapAfter_splidAndCheck,
                           byte[][]::select(heapAfter_splidAndCheck,
                                            self,
                                            verif.selectvoting.system.core.MixServer::$chosen),
                           arr(i_9)))
= array2seq(heap,
            byte[]::select(heap,
                           byte[][]::select(heap,
                                            self,
                                            verif.selectvoting.system.core.MixServer::$chosen),
                           arr(i_9)))") (userinteraction))
                                    (branch "CUT: array2seq(heapAfter_splidAndCheck, self.chosen[i_9]@heapAfter_splidAndCheck) = array2seq(heap, self.chosen[i_9]) TRUE"
                                       (rule "applyEq" (formula "30") (term "1,0,1") (ifseqformula "1") (userinteraction))
                                       (builtin "One Step Simplification" (formula "30"))
                                       (rule "closeTrue" (formula "30") (userinteraction))
                                    )
                                    (branch "CUT: array2seq(heapAfter_splidAndCheck, self.chosen[i_9]@heapAfter_splidAndCheck) = array2seq(heap, self.chosen[i_9]) FALSE"
                                       (rule "equalityToSeqGetAndSeqLenRight" (formula "25") (inst "iv=iv") (userinteraction))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "1") (ifseqformula "19"))
                                       (rule "andLeft" (formula "3"))
                                       (rule "eqSymm" (formula "17"))
                                       (rule "eqSymm" (formula "14"))
                                       (rule "eqSymm" (formula "11"))
                                       (rule "eqSymm" (formula "31"))
                                       (rule "eqSymm" (formula "16"))
                                       (rule "eqSymm" (formula "15"))
                                       (rule "eqSymm" (formula "13"))
                                       (rule "eqSymm" (formula "23"))
                                       (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "30"))
                                       (builtin "One Step Simplification" (formula "8"))
                                       (rule "replace_known_right" (formula "22") (term "0,1") (ifseqformula "27"))
                                       (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "28")))
                                       (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "4"))
                                       (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "4") (term "0"))
                                       (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "3"))
                                       (rule "applyEq" (formula "13") (term "0,0,0") (ifseqformula "16"))
                                       (rule "applyEq" (formula "13") (term "1") (ifseqformula "17"))
                                       (rule "applyEq" (formula "31") (term "1") (ifseqformula "11"))
                                       (rule "applyEq" (formula "14") (term "1,1,0") (ifseqformula "17"))
                                       (rule "applyEq" (formula "13") (term "0,0,0") (ifseqformula "15"))
                                       (rule "applyEq" (formula "16") (term "1") (ifseqformula "15"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1"))
                                       (rule "mul_literals" (formula "26") (term "0,1,1,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1"))
                                       (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                                       (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                       (rule "polySimp_elimOne" (formula "4") (term "0"))
                                       (rule "array2seqDef" (formula "2") (term "0") (inst "u=u"))
                                       (rule "array2seqDef" (formula "26") (term "0,1,0") (inst "u=u"))
                                       (rule "eqSymm" (formula "26") (term "0"))
                                       (rule "lenOfSeqDef" (formula "26") (term "0,0"))
                                       (rule "polySimp_elimSub" (formula "26") (term "1,0,0"))
                                       (rule "times_zero_2" (formula "26") (term "1,1,0,0"))
                                       (rule "add_zero_right" (formula "26") (term "1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "26") (term "0,0,0"))
                                       (rule "add_zero_right" (formula "26") (term "0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "26") (term "0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "26") (term "0,0,0,0"))
                                       (rule "array2seqDef" (formula "2") (term "1") (inst "u=u"))
                                       (rule "array2seqDef" (formula "1") (term "1") (inst "u=u"))
                                       (rule "eqSymm" (formula "1"))
                                       (rule "array2seqDef" (formula "26") (term "0,0,1,0,1") (inst "u=u"))
                                       (rule "getOfSeqDef" (formula "26") (term "0,1,0,1"))
                                       (rule "castDel" (formula "26") (term "1,0,1,0,1"))
                                       (rule "castDel" (formula "26") (term "2,0,1,0,1"))
                                       (rule "add_zero_right" (formula "26") (term "0,2,1,0,1,0,1"))
                                       (rule "polySimp_elimSub" (formula "26") (term "1,1,0,0,1,0,1"))
                                       (rule "times_zero_2" (formula "26") (term "1,1,1,0,0,1,0,1"))
                                       (rule "add_zero_right" (formula "26") (term "1,1,0,0,1,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,1,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1,0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1,0,1"))
                                       (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1,0,1"))
                                       (rule "mul_literals" (formula "26") (term "0,1,1,0,0,1,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1,0,1"))
                                       (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,1,0,1"))
                                       (rule "array2seqDef" (formula "26") (term "0,1,1,0,1") (inst "u=u"))
                                       (rule "eqSymm" (formula "26") (term "1,0,1"))
                                       (rule "getOfSeqDef" (formula "26") (term "0,1,0,1"))
                                       (rule "castDel" (formula "26") (term "1,0,1,0,1"))
                                       (rule "castDel" (formula "26") (term "2,0,1,0,1"))
                                       (rule "add_zero_right" (formula "26") (term "0,2,1,0,1,0,1"))
                                       (rule "polySimp_elimSub" (formula "26") (term "1,1,0,0,1,0,1"))
                                       (rule "mul_literals" (formula "26") (term "1,1,1,0,0,1,0,1"))
                                       (rule "add_zero_right" (formula "26") (term "1,1,0,0,1,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,1,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1,0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,1,0,1"))
                                       (rule "eqSymm" (formula "26") (term "1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,1,1,0,1"))
                                       (rule "polySimp_rightDist" (formula "26") (term "1,1,0,1,1,0,1"))
                                       (rule "mul_literals" (formula "26") (term "0,1,1,0,1,1,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,1,1,0,1"))
                                       (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,1,1,0,1"))
                                       (rule "nonNull" (formula "25") (inst "i=i"))
                                       (rule "greater_literals" (formula "25") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "28")))
                                       (rule "sub_literals" (formula "25") (term "2,1,0"))
                                       (builtin "One Step Simplification" (formula "25"))
                                       (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                                       (rule "array2seqDef" (formula "17") (term "1") (inst "u=u"))
                                       (rule "eqSymm" (formula "17"))
                                       (rule "narrowSelectArrayType" (formula "17") (term "2,0") (ifseqformula "5") (ifseqformula "30"))
                                       (rule "array2seqDef" (formula "14") (term "1") (inst "u=u"))
                                       (rule "eqSymm" (formula "14"))
                                       (rule "array2seqDef" (formula "11") (term "1,0,0") (inst "u=u"))
                                       (rule "array2seqDef" (formula "11") (term "1") (inst "u=u"))
                                       (rule "eqSymm" (formula "11"))
                                       (rule "applyEq" (formula "2") (term "1") (ifseqformula "11"))
                                       (rule "array2seqDef" (formula "31") (term "0,0,0") (inst "u=u"))
                                       (rule "applyEq" (formula "31") (term "0,0,0") (ifseqformula "1"))
                                       (rule "array2seqDef" (formula "31") (term "1,0,0") (inst "u=u"))
                                       (rule "array2seqDef" (formula "13") (term "1") (inst "u=u"))
                                       (rule "eqSymm" (formula "13"))
                                       (rule "narrowSelectArrayType" (formula "13") (term "2,0") (ifseqformula "5") (ifseqformula "30"))
                                       (rule "applyEq" (formula "13") (term "0") (ifseqformula "17"))
                                       (rule "eqSymm" (formula "13"))
                                       (rule "array2seqDef" (formula "31") (term "1") (inst "u=u"))
                                       (rule "applyEq" (formula "31") (term "1") (ifseqformula "11"))
                                       (rule "array2seqDef" (formula "26") (term "0,1,1,1,0,0,1") (inst "u=u"))
                                       (rule "lenOfSeqDef" (formula "26") (term "1,1,1,0,0,1"))
                                       (rule "polySimp_elimSub" (formula "26") (term "1,1,1,1,0,0,1"))
                                       (rule "times_zero_2" (formula "26") (term "1,1,1,1,1,0,0,1"))
                                       (rule "add_zero_right" (formula "26") (term "1,1,1,1,0,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "26") (term "0,1,1,1,0,0,1"))
                                       (rule "add_zero_right" (formula "26") (term "0,0,1,1,1,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,1,1,0,0,1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,1,1,1,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "26") (term "0,0,1,1,1,0,0,1"))
                                       (rule "polySimp_elimOne" (formula "26") (term "0,0,1,1,1,0,0,1"))
                                       (rule "array2seqDef" (formula "26") (term "0,1,0") (inst "u=u"))
                                       (rule "eqSymm" (formula "26") (term "0"))
                                       (rule "lenOfSeqDef" (formula "26") (term "0,0"))
                                       (rule "polySimp_elimSub" (formula "26") (term "1,0,0"))
                                       (rule "mul_literals" (formula "26") (term "1,1,0,0"))
                                       (rule "add_zero_right" (formula "26") (term "1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "26") (term "0,0,0"))
                                       (rule "add_zero_right" (formula "26") (term "0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "26") (term "0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "26") (term "0,0,0,0"))
                                       (rule "array2seqDef" (formula "1") (term "1") (inst "u=u"))
                                       (rule "eqSymm" (formula "1"))
                                       (rule "array2seqDef" (formula "17") (term "1") (inst "u=u"))
                                       (rule "eqSymm" (formula "17"))
                                       (rule "array2seqDef" (formula "14") (term "0,1,1") (inst "u=u"))
                                       (rule "array2seqDef" (formula "14") (term "1,1,1") (inst "u=u"))
                                       (rule "narrowSelectArrayType" (formula "14") (term "2,1,1,1") (ifseqformula "5") (ifseqformula "30"))
                                       (rule "array2seqDef" (formula "14") (term "0,1") (inst "u=u"))
                                       (rule "eqSymm" (formula "14"))
                                       (rule "pullOutSelect" (formula "23") (term "1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_29"))
                                       (rule "simplifySelectOfAnonEQ" (formula "23") (ifseqformula "20"))
                                       (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "30")) (ifInst ""  (formula "6")))
                                       (rule "applyEqReverse" (formula "24") (term "1,0") (ifseqformula "23"))
                                       (rule "hideAuxiliaryEq" (formula "23"))
                                       (rule "array2seqDef" (formula "11") (term "0,0,1") (inst "u=u"))
                                       (rule "array2seqDef" (formula "2") (term "0,0,1") (inst "u=u"))
                                       (rule "array2seqDef" (formula "31") (term "0,0,0") (inst "u=u"))
                                       (rule "array2seqDef" (formula "13") (term "1") (inst "u=u"))
                                       (rule "eqSymm" (formula "13"))
                                       (rule "applyEq" (formula "13") (term "0") (ifseqformula "17"))
                                       (rule "applyEq" (formula "17") (term "1") (ifseqformula "13"))
                                       (rule "applyEq" (formula "14") (term "1,1,0") (ifseqformula "13"))
                                       (rule "array2seqDef" (formula "31") (term "0,0,1") (inst "u=u"))
                                       (rule "pullOutSelect" (formula "4") (term "0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_26"))
                                       (rule "applyEq" (formula "2") (term "1,0,1,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "2") (term "1,1,2,0") (ifseqformula "4"))
                                       (rule "simplifySelectOfAnonEQ" (formula "4") (ifseqformula "21"))
                                       (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "30")) (ifInst ""  (formula "7")))
                                       (rule "applyEqReverse" (formula "5") (term "0,0") (ifseqformula "4"))
                                       (rule "applyEqReverse" (formula "2") (term "1,0,1,0") (ifseqformula "4"))
                                       (rule "applyEqReverse" (formula "2") (term "1,1,2,0") (ifseqformula "4"))
                                       (rule "hideAuxiliaryEq" (formula "4"))
                                       (rule "applyEq" (formula "4") (term "0") (ifseqformula "15"))
                                       (rule "eqSeqDef" (formula "1") (inst "iv=iv"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "lenOfSeqDef" (formula "1") (term "0"))
                                       (rule "eqSymm" (formula "1"))
                                       (rule "polySimp_elimSub" (formula "1") (term "1,1"))
                                       (rule "times_zero_2" (formula "1") (term "1,1,1"))
                                       (rule "add_zero_right" (formula "1") (term "1,1"))
                                       (rule "getOfSeqDef" (formula "2") (term "0,1,0"))
                                       (rule "castDel" (formula "2") (term "2,0,1,0"))
                                       (rule "castDel" (formula "2") (term "1,0,1,0"))
                                       (rule "add_zero_right" (formula "2") (term "0,2,1,0,1,0"))
                                       (rule "eqSymm" (formula "2") (term "1,0"))
                                       (rule "polySimp_elimSub" (formula "2") (term "1,1,0,1,1,0"))
                                       (rule "times_zero_2" (formula "2") (term "1,1,1,0,1,1,0"))
                                       (rule "add_zero_right" (formula "2") (term "1,1,0,1,1,0"))
                                       (rule "lenOfSeqDef" (formula "2") (term "1,1,0,0"))
                                       (rule "polySimp_elimSub" (formula "2") (term "1,1,1,0,0"))
                                       (rule "times_zero_2" (formula "2") (term "1,1,1,1,0,0"))
                                       (rule "add_zero_right" (formula "2") (term "1,1,1,0,0"))
                                       (rule "lenOfSeqDef" (formula "1") (term "0"))
                                       (rule "eqSymm" (formula "1"))
                                       (rule "polySimp_elimSub" (formula "1") (term "1,1"))
                                       (rule "mul_literals" (formula "1") (term "1,1,1"))
                                       (rule "add_zero_right" (formula "1") (term "1,1"))
                                       (rule "getOfSeqDef" (formula "2") (term "0,1,0"))
                                       (rule "castDel" (formula "2") (term "2,0,1,0"))
                                       (rule "castDel" (formula "2") (term "1,0,1,0"))
                                       (rule "add_zero_right" (formula "2") (term "0,2,1,0,1,0"))
                                       (rule "eqSymm" (formula "2") (term "1,0"))
                                       (rule "polySimp_elimSub" (formula "2") (term "1,1,0,1,1,0"))
                                       (rule "times_zero_2" (formula "2") (term "1,1,1,0,1,1,0"))
                                       (rule "add_zero_right" (formula "2") (term "1,1,0,1,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1,1,0,0"))
                                       (rule "add_zero_right" (formula "2") (term "0,0,1,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0"))
                                       (rule "add_zero_right" (formula "1") (term "0,0,0"))
                                       (rule "eqSymm" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0"))
                                       (rule "eqSymm" (formula "2") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,1,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0"))
                                       (rule "add_zero_right" (formula "1") (term "0,0,0"))
                                       (rule "eqSymm" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0"))
                                       (rule "eqSymm" (formula "2") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,1,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,1,1,0"))
                                       (rule "apply_eq_monomials" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "1"))
                                       (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0,0,1,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "2") (term "1,0,0,1,0,0"))
                                       (rule "add_literals" (formula "2") (term "1,1,1,0,0,1,0,0"))
                                       (rule "times_zero_1" (formula "2") (term "1,1,0,0,1,0,0"))
                                       (rule "add_zero_right" (formula "2") (term "1,0,0,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                                       (rule "eqSymm" (formula "1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "0,0,1"))
                                       (rule "applyEq" (formula "2") (term "0,1,0,0,1,0,0") (ifseqformula "1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0"))
                                       (rule "eqSymm" (formula "2") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,1,1,0"))
                                       (rule "polySimp_rightDist" (formula "2") (term "1,1,0,1,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,1,1,0"))
                                       (rule "mul_literals" (formula "2") (term "0,1,1,0,1,1,0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,1,1,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                                       (rule "eqSymm" (formula "1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "0,0,1"))
                                       (rule "apply_eq_monomials" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "1"))
                                       (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0,0,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "1,0,1,0,0,1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "2") (term "1,0,0,1,0,0"))
                                       (rule "add_literals" (formula "2") (term "1,1,1,0,0,1,0,0"))
                                       (rule "times_zero_1" (formula "2") (term "1,1,0,0,1,0,0"))
                                       (rule "add_zero_right" (formula "2") (term "1,0,0,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0"))
                                       (rule "eqSymm" (formula "2") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,1,1,0"))
                                       (rule "polySimp_rightDist" (formula "2") (term "1,1,0,1,1,0"))
                                       (rule "mul_literals" (formula "2") (term "0,1,1,0,1,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,1,1,0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,1,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "2") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0"))
                                       (rule "eqSeqDef" (formula "15") (inst "iv=iv"))
                                       (rule "andLeft" (formula "15"))
                                       (rule "lenOfSeqDef" (formula "15") (term "1"))
                                       (rule "polySimp_elimSub" (formula "15") (term "1,1"))
                                       (rule "mul_literals" (formula "15") (term "1,1,1"))
                                       (rule "add_zero_right" (formula "15") (term "1,1"))
                                       (rule "getOfSeqDef" (formula "16") (term "1,1,0"))
                                       (rule "castDel" (formula "16") (term "1,1,1,0"))
                                       (rule "castDel" (formula "16") (term "2,1,1,0"))
                                       (rule "add_zero_right" (formula "16") (term "0,2,1,1,1,0"))
                                       (rule "polySimp_elimSub" (formula "16") (term "1,1,0,1,1,0"))
                                       (rule "times_zero_2" (formula "16") (term "1,1,1,0,1,1,0"))
                                       (rule "add_zero_right" (formula "16") (term "1,1,0,1,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                                       (rule "polySimp_addComm1" (formula "16") (term "0,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "15") (term "0,1"))
                                       (rule "add_zero_right" (formula "15") (term "0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,1,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,1,1,0"))
                                       (rule "applyEq" (formula "16") (term "0,1,0,1,0,0") (ifseqformula "15"))
                                       (rule "polySimp_addComm1" (formula "16") (term "0,1,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "0,0,1"))
                                       (rule "polySimp_elimOne" (formula "15") (term "0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,1,1,0"))
                                       (rule "polySimp_rightDist" (formula "16") (term "1,1,0,1,1,0"))
                                       (rule "mul_literals" (formula "16") (term "0,1,1,0,1,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,1,1,0"))
                                       (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,1,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,1,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "16") (term "0,0,1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "16") (term "0,0,1,1,1,0,0"))
                                       (rule "equalityToSeqGetAndSeqLenRight" (formula "33") (inst "iv=iv"))
                                       (rule "lenOfSeqDefEQ" (formula "33") (term "1,0") (ifseqformula "3"))
                                       (rule "polySimp_elimSub" (formula "33") (term "1,1,0"))
                                       (rule "times_zero_2" (formula "33") (term "1,1,1,0"))
                                       (rule "add_zero_right" (formula "33") (term "1,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,1"))
                                       (rule "polySimp_addComm1" (formula "33") (term "0,1,0,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "33") (term "0,1,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "33") (term "1,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "33") (term "0,1,0,0,1"))
                                       (rule "polySimp_elimOne" (formula "33") (term "0,1,0,0,1"))
                                       (rule "pullOutSelect" (formula "28") (term "0,1,1,1,0,0,1,0,1") (inst "selectSK=arr_394"))
                                       (rule "applyEq" (formula "29") (term "0,1,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "29") (term "0,0,0,1,1,1,0,0,1") (ifseqformula "1"))
                                       (rule "applyEq" (formula "29") (term "0,0,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "34") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "1"))
                                       (rule "applyEq" (formula "29") (term "1,1,0,1,0,1") (ifseqformula "1"))
                                       (rule "applyEq" (formula "29") (term "0,1,1,1,1,0,0,1") (ifseqformula "1"))
                                       (rule "applyEq" (formula "34") (term "1,2,1,0,0,0,1,0,0,1") (ifseqformula "1"))
                                       (rule "applyEq" (formula "34") (term "0,1,1,0,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "34") (term "0,1,1,0,0,0,1,0,0,1") (ifseqformula "1"))
                                       (rule "applyEq" (formula "34") (term "1,2,1,0,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "34") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "eqSymm" (formula "29") (term "0"))
                                       (rule "eqSymm" (formula "29") (term "1,0,1"))
                                       (rule "pullOutSelect" (formula "4") (term "0,1,0") (inst "selectSK=arr_395"))
                                       (rule "applyEq" (formula "35") (term "0,0,0,1,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "5") (term "1,2,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "35") (term "0,1,1,0") (ifseqformula "4"))
                                       (rule "simplifySelectOfAnonEQ" (formula "4") (ifseqformula "24"))
                                       (builtin "One Step Simplification" (formula "4"))
                                       (rule "eqSeqDef2" (formula "21") (inst "iv=iv") (ifseqformula "16"))
                                       (rule "andLeft" (formula "21"))
                                       (rule "getOfSeqDef" (formula "22") (term "1,1,0"))
                                       (rule "castDel" (formula "22") (term "1,1,1,0"))
                                       (rule "castDel" (formula "22") (term "2,1,1,0"))
                                       (rule "add_zero_right" (formula "22") (term "0,2,1,1,1,0"))
                                       (rule "polySimp_elimSub" (formula "22") (term "1,1,0,1,1,0"))
                                       (rule "times_zero_2" (formula "22") (term "1,1,1,0,1,1,0"))
                                       (rule "add_zero_right" (formula "22") (term "1,1,0,1,1,0"))
                                       (rule "lenOfSeqDef" (formula "21") (term "0"))
                                       (rule "eqSymm" (formula "21"))
                                       (rule "polySimp_elimSub" (formula "21") (term "1,1"))
                                       (rule "times_zero_2" (formula "21") (term "1,1,1"))
                                       (rule "add_zero_right" (formula "21") (term "1,1"))
                                       (rule "getOfSeqDef" (formula "22") (term "0,1,0"))
                                       (rule "castDel" (formula "22") (term "1,0,1,0"))
                                       (rule "castDel" (formula "22") (term "2,0,1,0"))
                                       (rule "add_zero_right" (formula "22") (term "0,2,1,0,1,0"))
                                       (rule "polySimp_elimSub" (formula "22") (term "1,1,0,0,1,0"))
                                       (rule "mul_literals" (formula "22") (term "1,1,1,0,0,1,0"))
                                       (rule "add_zero_right" (formula "22") (term "1,1,0,0,1,0"))
                                       (rule "lenOfSeqDef" (formula "22") (term "1,1,0,0"))
                                       (rule "polySimp_elimSub" (formula "22") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "22") (term "1,1,1,1,0,0"))
                                       (rule "add_zero_right" (formula "22") (term "1,1,1,0,0"))
                                       (rule "lenOfSeqDef" (formula "21") (term "0"))
                                       (rule "eqSymm" (formula "21"))
                                       (rule "polySimp_elimSub" (formula "21") (term "1,1"))
                                       (rule "times_zero_2" (formula "21") (term "1,1,1"))
                                       (rule "add_zero_right" (formula "21") (term "1,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,1,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "22") (term "0,1,1,0,0"))
                                       (rule "add_zero_right" (formula "22") (term "0,0,1,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0"))
                                       (rule "add_zero_right" (formula "21") (term "0,0,0"))
                                       (rule "eqSymm" (formula "21"))
                                       (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0"))
                                       (rule "add_zero_right" (formula "21") (term "0,0,0"))
                                       (rule "eqSymm" (formula "21"))
                                       (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,1,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1,0"))
                                       (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0") (ifseqformula "21"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,1,1,0"))
                                       (rule "polySimp_rightDist" (formula "22") (term "1,1,0,1,1,0"))
                                       (rule "mul_literals" (formula "22") (term "0,1,1,0,1,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,1,1,0"))
                                       (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,1,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,1,0"))
                                       (rule "mul_literals" (formula "22") (term "0,1,1,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,1,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "21") (term "0,0,0"))
                                       (rule "eqSymm" (formula "21"))
                                       (rule "polySimp_elimOne" (formula "21") (term "0,0,1"))
                                       (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0") (ifseqformula "21"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "21") (term "0,0,0"))
                                       (rule "eqSymm" (formula "21"))
                                       (rule "polySimp_elimOne" (formula "21") (term "0,0,1"))
                                       (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0") (ifseqformula "21"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                                       (rule "eqSeqDef2" (formula "14") (inst "iv=iv") (ifseqformula "14"))
                                       (builtin "One Step Simplification" (formula "14"))
                                       (rule "true_left" (formula "14"))
                                       (rule "eqSeqDef2" (formula "15") (inst "iv=iv") (ifseqformula "15"))
                                       (builtin "One Step Simplification" (formula "15"))
                                       (rule "true_left" (formula "15"))
                                       (rule "pullOutSelect" (formula "2") (term "0,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_23"))
                                       (rule "applyEq" (formula "35") (term "1,2,0,0,0,0,1,0,1") (ifseqformula "2"))
                                       (rule "applyEq" (formula "35") (term "1,2,0,0,0,0,1,0,0,1") (ifseqformula "2"))
                                       (rule "applyEq" (formula "4") (term "1,1,0,1,0") (ifseqformula "2"))
                                       (rule "applyEq" (formula "35") (term "0,1,0,0,0,0,1,0,0,1") (ifseqformula "2"))
                                       (rule "applyEq" (formula "4") (term "0,1,1,1,0,0,1,0") (ifseqformula "2"))
                                       (rule "applyEq" (formula "35") (term "1,2,0,0,0,0,0") (ifseqformula "2"))
                                       (rule "applyEq" (formula "35") (term "0,1,0,0,0,0,0") (ifseqformula "2"))
                                       (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "2"))
                                       (rule "applyEq" (formula "35") (term "0,1,0,0,0,0,1,0,1") (ifseqformula "2"))
                                       (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "24"))
                                       (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "33")) (ifInst ""  (formula "10")))
                                       (rule "applyEqReverse" (formula "35") (term "1,2,0,0,0,0,1,0,1") (ifseqformula "2"))
                                       (rule "applyEqReverse" (formula "35") (term "1,2,0,0,0,0,1,0,0,1") (ifseqformula "2"))
                                       (rule "applyEqReverse" (formula "4") (term "1,1,0,1,0") (ifseqformula "2"))
                                       (rule "applyEqReverse" (formula "35") (term "0,1,0,0,0,0,1,0,0,1") (ifseqformula "2"))
                                       (rule "applyEqReverse" (formula "3") (term "0,0,0,0") (ifseqformula "2"))
                                       (rule "applyEqReverse" (formula "4") (term "0,1,1,1,0,0,1,0") (ifseqformula "2"))
                                       (rule "applyEqReverse" (formula "35") (term "1,2,0,0,0,0,0") (ifseqformula "2"))
                                       (rule "applyEqReverse" (formula "35") (term "0,1,0,0,0,0,0") (ifseqformula "2"))
                                       (rule "applyEqReverse" (formula "3") (term "0,1,0") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "applyEqReverse" (formula "34") (term "0,1,0,0,0,0,1,0,1") (ifseqformula "2"))
                                       (rule "hideAuxiliaryEq" (formula "2"))
                                       (rule "eqSeqDef2" (formula "4") (inst "iv=iv") (ifseqformula "4"))
                                       (builtin "One Step Simplification" (formula "4"))
                                       (rule "true_left" (formula "4"))
                                       (rule "pullOutSelect" (formula "1") (term "1,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_24"))
                                       (rule "applyEq" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "2") (term "1,2,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "2") (term "0,0,0,0,0") (ifseqformula "1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "31")) (ifInst ""  (formula "8")))
                                       (rule "applyEqReverse" (formula "2") (term "1,1,0") (ifseqformula "1"))
                                       (rule "applyEqReverse" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "1"))
                                       (rule "applyEqReverse" (formula "2") (term "1,2,0") (ifseqformula "1"))
                                       (rule "applyEqReverse" (formula "2") (term "0,0,0,0,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "nnf_imp2or" (formula "26") (term "0"))
                                       (rule "Contract_axiom_for_ghostFieldsNonNull_in_MixServer" (formula "11") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
                                       (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "31")) (ifInst ""  (formula "6")))
                                       (rule "eqSymm" (formula "11"))
                                       (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,1,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,1,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,0,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,0,0,0"))
                                       (rule "applyEq" (formula "11") (term "1") (ifseqformula "12"))
                                       (builtin "One Step Simplification" (formula "11"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "notLeft" (formula "12"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "notLeft" (formula "12"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "notLeft" (formula "12"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "notLeft" (formula "11"))
                                       (rule "notLeft" (formula "11"))
                                       (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "30"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "31"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "ifthenelse_negated" (formula "3") (term "0"))
                                       (rule "ifthenelse_negated" (formula "1") (term "0"))
                                       (rule "narrowSelectArrayType" (formula "21") (term "1,0,1,0") (ifseqformula "6") (ifseqformula "33"))
                                       (rule "narrowSelectArrayType" (formula "17") (term "1,1,1,0") (ifseqformula "6") (ifseqformula "34"))
                                       (rule "applyEq" (formula "13") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                                       (rule "applyEq" (formula "12") (term "0,1,0,0,1,0,0") (ifseqformula "18"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                                       (rule "Definition_axiom_for_ghostFieldsNonNull_in_verif_selectvoting_system_core_MixServer" (formula "14") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
                                       (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "31")) (ifInst ""  (formula "30")) (ifInst ""  (formula "32")) (ifInst ""  (formula "33")) (ifInst ""  (formula "34")))
                                       (rule "andLeft" (formula "14"))
                                       (rule "andLeft" (formula "14"))
                                       (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                                       (rule "applyEq" (formula "15") (term "0,1,0,0,1,0,0") (ifseqformula "20"))
                                       (rule "applyEq" (formula "16") (term "0,1,0,0,1,0,0") (ifseqformula "21"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                                       (rule "nnf_imp2or" (formula "34") (term "0,1"))
                                       (rule "nnf_imp2or" (formula "2") (term "0"))
                                       (rule "nnf_imp2or" (formula "39") (term "0,1"))
                                       (rule "nnf_notAnd" (formula "28") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "28") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                                       (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                                       (rule "nnf_imp2or" (formula "20") (term "0"))
                                       (rule "nnf_imp2or" (formula "16") (term "0"))
                                       (rule "nnf_imp2or" (formula "11") (term "0"))
                                       (rule "nnf_imp2or" (formula "13") (term "0"))
                                       (rule "nnf_imp2or" (formula "12") (term "0"))
                                       (rule "nnf_notAnd" (formula "2") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "2") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "2") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "2") (term "1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "2") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0"))
                                       (rule "mul_literals" (formula "2") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "34") (term "0,0,1"))
                                       (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,1"))
                                       (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,1"))
                                       (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,1"))
                                       (rule "add_zero_left" (formula "34") (term "0,0,1,0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,1"))
                                       (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,1"))
                                       (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0,1"))
                                       (rule "times_zero_1" (formula "34") (term "1,0,0,0,0,0,1"))
                                       (rule "add_literals" (formula "34") (term "0,0,0,0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0,1"))
                                       (rule "mul_literals" (formula "34") (term "1,0,0,0,1"))
                                       (rule "nnf_notAnd" (formula "39") (term "0,0,1"))
                                       (rule "inEqSimp_notGeq" (formula "39") (term "1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "39") (term "1,0,0,1,0,0,1"))
                                       (rule "mul_literals" (formula "39") (term "0,1,0,0,1,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "39") (term "0,0,1,0,0,1"))
                                       (rule "add_literals" (formula "39") (term "0,0,0,1,0,0,1"))
                                       (rule "add_zero_left" (formula "39") (term "0,0,1,0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0,1"))
                                       (rule "polySimp_elimOne" (formula "39") (term "1,1,0,0,1"))
                                       (rule "inEqSimp_notGeq" (formula "39") (term "0,0,0,1"))
                                       (rule "times_zero_1" (formula "39") (term "1,0,0,0,0,0,1"))
                                       (rule "add_literals" (formula "39") (term "0,0,0,0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "0,0,0,1"))
                                       (rule "mul_literals" (formula "39") (term "1,0,0,0,1"))
                                       (rule "nnf_notAnd" (formula "20") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "20") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                                       (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                                       (rule "arrayLengthIsAShort" (formula "18") (term "0"))
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "true_left" (formula "18"))
                                       (rule "arrayLengthNotNegative" (formula "18") (term "0"))
                                       (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                                       (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "16") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                                       (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "11") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                       (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                                       (rule "arrayLengthIsAShort" (formula "17") (term "0"))
                                       (builtin "One Step Simplification" (formula "17"))
                                       (rule "true_left" (formula "17"))
                                       (rule "arrayLengthIsAShort" (formula "17") (term "1"))
                                       (builtin "One Step Simplification" (formula "17"))
                                       (rule "true_left" (formula "17"))
                                       (rule "arrayLengthNotNegative" (formula "17") (term "1"))
                                       (rule "arrayLengthNotNegative" (formula "17") (term "0"))
                                       (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
                                       (rule "nnf_notAnd" (formula "13") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "13") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                                       (rule "mul_literals" (formula "13") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "12") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                       (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                                       (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "22") (ifseqformula "8"))
                                       (rule "andLeft" (formula "22"))
                                       (rule "notLeft" (formula "23"))
                                       (rule "andLeft" (formula "22"))
                                       (rule "notLeft" (formula "23"))
                                       (rule "andLeft" (formula "22"))
                                       (rule "notLeft" (formula "23"))
                                       (rule "andLeft" (formula "22"))
                                       (rule "andLeft" (formula "22"))
                                       (rule "notLeft" (formula "24"))
                                       (rule "andLeft" (formula "22"))
                                       (rule "andLeft" (formula "22"))
                                       (rule "andLeft" (formula "22"))
                                       (rule "notLeft" (formula "22"))
                                       (rule "notLeft" (formula "22"))
                                       (rule "narrowSelectArrayType" (formula "16") (term "2,0,1,0,0,1,0") (ifseqformula "6") (ifseqformula "35"))
                                       (rule "narrowSelectArrayType" (formula "2") (term "1,1,1,0") (ifseqformula "6") (ifseqformula "35"))
                                       (rule "narrowSelectArrayType" (formula "15") (term "2,0,1,0,0") (ifseqformula "6") (ifseqformula "35"))
                                       (rule "narrowSelectArrayType" (formula "46") (term "2,0,0,0,1,1,0,1") (ifseqformula "6") (ifseqformula "35"))
                                       (rule "nonNull" (formula "24") (inst "i=i"))
                                       (rule "greater_literals" (formula "24") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "37")))
                                       (rule "sub_literals" (formula "24") (term "2,1,0"))
                                       (builtin "One Step Simplification" (formula "24"))
                                       (rule "narrowSelectArrayType" (formula "24") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "37"))
                                       (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "23") (inst "i=i"))
                                       (rule "greater_literals" (formula "23") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "36")))
                                       (rule "sub_literals" (formula "23") (term "2,1,0"))
                                       (builtin "One Step Simplification" (formula "23"))
                                       (rule "narrowSelectArrayType" (formula "23") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "36"))
                                       (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                                       (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "22") (inst "i=i"))
                                       (rule "sub_literals" (formula "22") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "38")))
                                       (rule "greater_literals" (formula "22") (term "0"))
                                       (builtin "One Step Simplification" (formula "22"))
                                       (rule "narrowSelectArrayType" (formula "22") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "38"))
                                       (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                                       (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                                       (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "30") (ifseqformula "8"))
                                       (rule "replaceKnownSelect_taclet1001100000020_7" (formula "30") (term "0,0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1001100000020_8" (formula "30") (term "0,0,1"))
                                       (rule "replaceKnownSelect_taclet1001100000020_9" (formula "30") (term "1,1,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1001100000020_10" (formula "30") (term "1,1,0,0,0,0"))
                                       (rule "replaceKnownSelect_taclet1001100000020_3" (formula "30") (term "1,1,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1001100000020_4" (formula "30") (term "1,1,0,0,0,0,0"))
                                       (rule "replaceKnownSelect_taclet1001100000020_1" (formula "30") (term "1,1,0,0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1001100000020_2" (formula "30") (term "1,1,0,0,0,0,0,0"))
                                       (rule "andLeft" (formula "30"))
                                       (rule "notLeft" (formula "31"))
                                       (rule "andLeft" (formula "30"))
                                       (rule "andLeft" (formula "30"))
                                       (rule "notLeft" (formula "32"))
                                       (rule "notLeft" (formula "31"))
                                       (rule "andLeft" (formula "30"))
                                       (rule "notLeft" (formula "31"))
                                       (rule "andLeft" (formula "30"))
                                       (rule "andLeft" (formula "30"))
                                       (rule "andLeft" (formula "30"))
                                       (rule "andLeft" (formula "30"))
                                       (rule "notLeft" (formula "30"))
                                       (rule "notLeft" (formula "30"))
                                       (rule "nonNull" (formula "32") (inst "i=i"))
                                       (rule "greater_literals" (formula "32") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "44")))
                                       (rule "sub_literals" (formula "32") (term "2,1,0"))
                                       (builtin "One Step Simplification" (formula "32"))
                                       (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "32") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "31") (inst "i=i"))
                                       (rule "greater_literals" (formula "31") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "43")))
                                       (rule "sub_literals" (formula "31") (term "2,1,0"))
                                       (builtin "One Step Simplification" (formula "31"))
                                       (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0"))
                                       (rule "applyEq" (formula "31") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "31") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0"))
                                       (rule "nonNull" (formula "30") (inst "i=i"))
                                       (rule "sub_literals" (formula "30") (term "2,1,0,1,1"))
                                       (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "45")))
                                       (rule "greater_literals" (formula "30") (term "0"))
                                       (builtin "One Step Simplification" (formula "30"))
                                       (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0"))
                                       (rule "applyEq" (formula "30") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "30") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0"))
                                       (rule "pullOutSelect" (formula "38") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_23"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "52")) (ifInst ""  (formula "8")))
                                       (rule "applyEqReverse" (formula "39") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "37") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_23"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "51")) (ifInst ""  (formula "8")))
                                       (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "36") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_23"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "50")) (ifInst ""  (formula "8")))
                                       (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_23"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")) (ifInst ""  (formula "8")))
                                       (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_24"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")) (ifInst ""  (formula "8")))
                                       (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "equalityToSeqGetAndSeqLenLeft" (formula "29") (inst "iv=iv"))
                                       (rule "andLeft" (formula "29"))
                                       (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0"))
                                       (rule "applyEq" (formula "30") (term "0,0,1,0,0,1,0,0") (ifseqformula "31"))
                                       (rule "applyEq" (formula "30") (term "0,0,1,0") (ifseqformula "31"))
                                       (builtin "One Step Simplification" (formula "30"))
                                       (rule "true_left" (formula "30"))
                                       (rule "applyEq" (formula "29") (term "0,0") (ifseqformula "30"))
                                       (builtin "One Step Simplification" (formula "29"))
                                       (rule "true_left" (formula "29"))
                                       (rule "nnf_imp2or" (formula "24") (term "0"))
                                       (rule "nnf_imp2or" (formula "23") (term "0"))
                                       (rule "nnf_imp2or" (formula "22") (term "0"))
                                       (rule "ifthenelse_split" (formula "15") (term "1"))
                                       (branch "self.unsigned.length ≥ 1 TRUE"
                                          (rule "replace_known_left" (formula "17") (term "0,1,1,0,0") (ifseqformula "15"))
                                          (builtin "One Step Simplification" (formula "17"))
                                          (rule "nnf_imp2or" (formula "33") (term "0"))
                                          (rule "nnf_imp2or" (formula "32") (term "0"))
                                          (rule "commute_or_2" (formula "34") (term "0"))
                                          (rule "nnf_imp2or" (formula "31") (term "0"))
                                          (rule "ifthenelse_split" (formula "44") (term "0,0"))
                                          (branch "self.chosen[i_9].length ≥ 1 TRUE"
                                             (rule "eqSymm" (formula "45") (term "0"))
                                             (rule "arrayLengthIsAShort" (formula "17") (term "1,0,0,0"))
                                             (builtin "One Step Simplification" (formula "17"))
                                             (rule "true_left" (formula "17"))
                                             (rule "arrayLengthNotNegative" (formula "17") (term "1,0,0,0"))
                                             (rule "arrayLengthNotNegative" (formula "18") (term "1,0,1,0,0"))
                                             (rule "arrayLengthIsAShort" (formula "19") (term "1,0,1,0,0"))
                                             (builtin "One Step Simplification" (formula "19"))
                                             (rule "true_left" (formula "19"))
                                             (rule "nnf_notAnd" (formula "28") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "28") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                                             (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "27") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "27") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                                             (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                             (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                             (rule "commute_or_2" (formula "25") (term "0"))
                                             (rule "nnf_notAnd" (formula "33") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "33") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0"))
                                             (rule "mul_literals" (formula "33") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "33") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "33") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "32") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0"))
                                             (rule "mul_literals" (formula "32") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "32") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
                                             (rule "mul_literals" (formula "32") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "32") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "32") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "31") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "31") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "31") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0"))
                                             (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                                             (rule "arrayLengthNotNegative" (formula "49") (term "1,1,0,0,0,0"))
                                             (rule "arrayLengthIsAShort" (formula "50") (term "1,1,0,0,0,0"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "ifthenelse_split" (formula "25") (term "0"))
                                             (branch "self.concatenated.length ≥ 1 TRUE"
                                                (rule "eqSymm" (formula "26"))
                                                (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "26"))
                                                (rule "arrayLengthNotNegative" (formula "51") (term "0,0,1,0"))
                                                (rule "replace_known_left" (formula "52") (term "0,1,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "52"))
                                                (rule "commute_or_2" (formula "14") (term "0"))
                                                (rule "commute_or_2" (formula "16") (term "0"))
                                                (rule "commute_or_2" (formula "15") (term "0"))
                                                (rule "commute_or_2" (formula "5") (term "0"))
                                                (rule "ifthenelse_split" (formula "6") (term "0"))
                                                (branch "self.encrypted.<created> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "1") (term "0,0") (ifseqformula "7"))
                                                   (rule "applyEqReverse" (formula "53") (term "0,1,0") (ifseqformula "7"))
                                                   (rule "hideAuxiliaryEq" (formula "7"))
                                                   (rule "ifthenelse_split" (formula "4") (term "0"))
                                                   (branch "self.chosen.<created> = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "53") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "48") (term "0,1,0,0") (ifseqformula "5"))
                                                      (builtin "One Step Simplification" (formula "48"))
                                                      (rule "applyEqReverse" (formula "53") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "53") (term "1,2,1,0,0,0,0") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "53") (term "1,2,1,0,0,0,1,0,0,1") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "53") (term "0,1,1,0,0,0,1,0,0,1") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "53") (term "0,1,1,0,0,0,0") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "48") (term "0,0,0,1,1,0,0,1") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "48") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "48") (term "0,1,1,1,0,0,1") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "48") (term "1,1,1,1,0,1") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "48") (term "0,0,0,0") (ifseqformula "5"))
                                                      (rule "hideAuxiliaryEq" (formula "5"))
                                                      (rule "eqSymm" (formula "47") (term "1,0"))
                                                      (rule "eqSymm" (formula "47") (term "1,0,1"))
                                                      (rule "replace_known_left" (formula "47") (term "0,1,1,0,0,1") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "3")))
                                                      (rule "allRight" (formula "47") (inst "sk=iv_57"))
                                                      (rule "orRight" (formula "47"))
                                                      (rule "orRight" (formula "47"))
                                                      (rule "inEqSimp_leqRight" (formula "47"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "replace_known_left" (formula "49") (term "0,0,0") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "1")))
                                                      (rule "inEqSimp_geqRight" (formula "48"))
                                                      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                      (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                      (rule "inEqSimp_homoInEq0" (formula "49") (term "0,0"))
                                                      (rule "eqSymm" (formula "49"))
                                                      (rule "polySimp_addComm1" (formula "49") (term "0,0,1"))
                                                      (rule "inEqSimp_homoInEq0" (formula "49") (term "0,0"))
                                                      (rule "polySimp_addComm1" (formula "49") (term "0,0,0"))
                                                      (rule "eqSymm" (formula "49"))
                                                      (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                                      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "49") (term "0,1"))
                                                      (rule "polySimp_mulComm0" (formula "49") (term "1,0,1"))
                                                      (rule "polySimp_rightDist" (formula "49") (term "1,0,1"))
                                                      (rule "mul_literals" (formula "49") (term "0,1,0,1"))
                                                      (rule "polySimp_mulLiterals" (formula "49") (term "1,1,0,1"))
                                                      (rule "polySimp_elimOne" (formula "49") (term "1,1,0,1"))
                                                      (rule "replace_known_left" (formula "49") (term "0,1") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "49"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "49") (term "0,0"))
                                                      (rule "polySimp_mulComm0" (formula "49") (term "1,0,0"))
                                                      (rule "polySimp_rightDist" (formula "49") (term "1,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "49") (term "1,1,0,0"))
                                                      (rule "mul_literals" (formula "49") (term "0,1,0,0"))
                                                      (rule "polySimp_elimOne" (formula "49") (term "1,1,0,0"))
                                                      (rule "replace_known_left" (formula "49") (term "0,0") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "49"))
                                                      (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "5"))
                                                      (rule "leq_literals" (formula "4") (term "0"))
                                                      (builtin "One Step Simplification" (formula "4"))
                                                      (rule "true_left" (formula "4"))
                                                      (rule "pullOutSelect" (formula "48") (term "0") (inst "selectSK=arr_399"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "32"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "eqSymm" (formula "49"))
                                                      (rule "commute_or_2" (formula "24") (term "0"))
                                                      (rule "commute_or" (formula "39") (term "0,0"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "1,0") (ifseqformula "11"))
                                                      (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "47"))
                                                      (builtin "One Step Simplification" (formula "19"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "1,1") (ifseqformula "11"))
                                                      (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "8"))
                                                      (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "46")))
                                                      (rule "true_left" (formula "20"))
                                                      (rule "commute_or_2" (formula "39") (term "0"))
                                                      (rule "commute_or" (formula "31") (term "0,0"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "26") (term "0,1") (ifseqformula "11"))
                                                      (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "6"))
                                                      (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "47")))
                                                      (rule "true_left" (formula "26"))
                                                      (rule "commute_or_2" (formula "38") (term "0"))
                                                      (rule "commute_or_2" (formula "37") (term "0"))
                                                      (rule "commute_or" (formula "16") (term "0,0"))
                                                      (rule "commute_or" (formula "18") (term "0,0"))
                                                      (rule "commute_or" (formula "17") (term "0,0"))
                                                      (rule "commute_or" (formula "7") (term "0,0"))
                                                      (rule "lenNonNegative" (formula "24") (term "0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "24"))
                                                      (rule "applyEq" (formula "24") (term "0") (ifseqformula "25"))
                                                      (rule "inEqSimp_subsumption1" (formula "24") (ifseqformula "21"))
                                                      (rule "leq_literals" (formula "24") (term "0"))
                                                      (builtin "One Step Simplification" (formula "24"))
                                                      (rule "true_left" (formula "24"))
                                                      (rule "commute_or" (formula "25") (term "0,0"))
                                                      (rule "commute_or" (formula "39") (term "0,0"))
                                                      (rule "commute_or" (formula "38") (term "0,0"))
                                                      (rule "commute_or" (formula "37") (term "0,0"))
                                                      (rule "arrayLengthIsAShort" (formula "24") (term "1"))
                                                      (builtin "One Step Simplification" (formula "24"))
                                                      (rule "true_left" (formula "24"))
                                                      (rule "arrayLengthNotNegative" (formula "21") (term "0"))
                                                      (rule "inEqSimp_subsumption1" (formula "21") (ifseqformula "22"))
                                                      (rule "leq_literals" (formula "21") (term "0"))
                                                      (builtin "One Step Simplification" (formula "21"))
                                                      (rule "true_left" (formula "21"))
                                                      (rule "arrayLengthIsAShort" (formula "40") (term "1,1,0"))
                                                      (builtin "One Step Simplification" (formula "40"))
                                                      (rule "true_left" (formula "40"))
                                                      (rule "arrayLengthNotNegative" (formula "40") (term "1,1,0"))
                                                      (rule "arrayLengthIsAShort" (formula "5") (term "0"))
                                                      (builtin "One Step Simplification" (formula "5"))
                                                      (rule "true_left" (formula "5"))
                                                      (rule "arrayLengthNotNegative" (formula "5") (term "0"))
                                                      (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "6"))
                                                      (rule "leq_literals" (formula "5") (term "0"))
                                                      (builtin "One Step Simplification" (formula "5"))
                                                      (rule "true_left" (formula "5"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "0,1,0,0,0") (ifseqformula "11"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "25") (term "0,1,0,1,0,0") (ifseqformula "11"))
                                                      (rule "replace_known_right" (formula "25") (term "0") (ifseqformula "47"))
                                                      (builtin "One Step Simplification" (formula "25"))
                                                      (rule "ifthenelse_to_or_left" (formula "33") (term "0,0,0"))
                                                      (rule "eqSymm" (formula "33") (term "1,0,0,0,0"))
                                                      (rule "eqSymm" (formula "33") (term "1,1,0,0,0"))
                                                      (builtin "One Step Simplification" (formula "33"))
                                                      (rule "nnf_notAnd" (formula "33") (term "0,0,0,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0,0,0,0"))
                                                      (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,0,0,0,0"))
                                                      (rule "add_zero_right" (formula "33") (term "0,0,0,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "33") (term "0,0,0,1,0,0,0,0,0"))
                                                      (rule "add_zero_left" (formula "33") (term "0,0,1,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0,0,0,0"))
                                                      (rule "nnf_notAnd" (formula "33") (term "0,1,1,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "33") (term "1,0,1,1,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,1,1,0,0,0"))
                                                      (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,1,1,0,0,0"))
                                                      (rule "add_literals" (formula "33") (term "0,0,0,1,0,1,1,0,0,0"))
                                                      (rule "add_zero_left" (formula "33") (term "0,0,1,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,1,1,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,1,1,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "33") (term "1,1,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "33") (term "0,0,1,1,0,0,0"))
                                                      (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,1,1,0,0,0"))
                                                      (rule "add_zero_right" (formula "33") (term "0,0,0,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,1,1,0,0,0"))
                                                      (rule "mul_literals" (formula "33") (term "1,0,0,1,1,0,0,0"))
                                                      (rule "commute_or" (formula "33") (term "0,0"))
                                                      (rule "commute_or_2" (formula "33") (term "0"))
                                                      (rule "commute_or_2" (formula "33") (term "0,1,0"))
                                                      (rule "commute_or" (formula "33") (term "1,1,0"))
                                                      (rule "commute_or" (formula "33") (term "0,0,1,0"))
                                                      (rule "commute_or_2" (formula "33") (term "0,1,1,0"))
                                                      (rule "ifthenelse_to_or_right" (formula "7") (term "0,0,0"))
                                                      (builtin "One Step Simplification" (formula "7"))
                                                      (rule "nnf_notAnd" (formula "7") (term "0,0,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "7") (term "0,0,0,1,0,0,0,0,0"))
                                                      (rule "add_zero_left" (formula "7") (term "0,0,1,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0,0,0,0"))
                                                      (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0,0,0,0"))
                                                      (rule "add_zero_right" (formula "7") (term "0,0,0,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "7") (term "1,0,0,0,0,0,0"))
                                                      (rule "nnf_notAnd" (formula "7") (term "0,1,1,0,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "7") (term "0,0,1,1,0,0,0"))
                                                      (rule "mul_literals" (formula "7") (term "1,0,0,0,0,1,1,0,0,0"))
                                                      (rule "add_zero_right" (formula "7") (term "0,0,0,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,1,1,0,0,0"))
                                                      (rule "mul_literals" (formula "7") (term "1,0,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "7") (term "1,0,1,1,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,1,1,0,0,0"))
                                                      (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,1,1,0,0,0"))
                                                      (rule "add_literals" (formula "7") (term "0,0,0,1,0,1,1,0,0,0"))
                                                      (rule "add_zero_left" (formula "7") (term "0,0,1,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,1,1,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,1,1,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "7") (term "1,1,0,1,1,0,0,0"))
                                                      (rule "commute_or" (formula "7") (term "0,0"))
                                                      (rule "commute_or_2" (formula "7") (term "0"))
                                                      (rule "ifthenelse_split" (formula "32") (term "0"))
                                                      (branch "msg.length ≥ 1 TRUE"
                                                         (rule "eqSymm" (formula "33"))
                                                         (rule "applyEq" (formula "31") (term "0") (ifseqformula "33"))
                                                         (rule "applyEq" (formula "33") (term "1,1,0,1,0") (ifseqformula "32"))
                                                         (rule "applyEq" (formula "33") (term "1,1,0,0") (ifseqformula "32"))
                                                         (rule "applyEq" (formula "33") (term "1,1,1,1,1,1,0") (ifseqformula "32"))
                                                         (rule "ifthenelse_to_or_right" (formula "27") (term "0,0,0"))
                                                         (rule "nnf_notAnd" (formula "27") (term "0,0,0,0,0"))
                                                         (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,0,0,0"))
                                                         (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0,0,0,0"))
                                                         (rule "add_zero_right" (formula "27") (term "0,0,0,0,0,0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,0,0,0"))
                                                         (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0,0"))
                                                         (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0,0,0,0"))
                                                         (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,0,0,0"))
                                                         (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,0,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,0,0,0"))
                                                         (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,0,0,0"))
                                                         (rule "add_zero_left" (formula "27") (term "0,0,1,0,0,0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,0,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0,0,0"))
                                                         (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0,0,0"))
                                                         (rule "commute_or" (formula "7") (term "1,1,0"))
                                                         (rule "commute_or_2" (formula "7") (term "0,1,0"))
                                                         (rule "commute_or" (formula "27") (term "0,0"))
                                                         (rule "commute_or_2" (formula "27") (term "0"))
                                                         (rule "commute_or" (formula "33") (term "0,0,1,1,0"))
                                                         (rule "commute_or_2" (formula "27") (term "0,1,0"))
                                                         (rule "commute_or" (formula "27") (term "1,1,0"))
                                                         (rule "commute_or_2" (formula "7") (term "0,1,1,0"))
                                                         (rule "commute_or" (formula "7") (term "0,0,1,0"))
                                                         (rule "commute_or" (formula "27") (term "0,0,1,0"))
                                                         (rule "commute_or" (formula "7") (term "0,0,1,1,0"))
                                                         (rule "cnf_rightDist" (formula "33") (term "1,1,0"))
                                                         (rule "commute_or_2" (formula "33") (term "0,1,1,0"))
                                                         (rule "inEqSimp_or_tautInEq1" (formula "33") (term "0,0,1,1,0"))
                                                         (rule "add_zero_right" (formula "33") (term "1,1,0,0,1,1,0"))
                                                         (rule "qeq_literals" (formula "33") (term "1,0,0,1,1,0"))
                                                         (builtin "One Step Simplification" (formula "33"))
                                                         (rule "shift_paren_or" (formula "33") (term "1,1,0"))
                                                         (rule "commute_or" (formula "33") (term "0,1,1,0"))
                                                         (rule "inEqSimp_or_tautInEq1" (formula "33") (term "1,1,0"))
                                                         (rule "inEqSimp_homoInEq1" (formula "33") (term "1,1,1,0"))
                                                         (rule "polySimp_pullOutFactor1" (formula "33") (term "0,1,1,1,0"))
                                                         (rule "add_literals" (formula "33") (term "1,0,1,1,1,0"))
                                                         (rule "times_zero_1" (formula "33") (term "0,1,1,1,0"))
                                                         (rule "leq_literals" (formula "33") (term "1,1,1,0"))
                                                         (builtin "One Step Simplification" (formula "33"))
                                                         (rule "shift_paren_or" (formula "33") (term "0"))
                                                         (rule "commute_or_2" (formula "33") (term "0,0"))
                                                         (builtin "One Step Simplification" (formula "33"))
                                                         (rule "shift_paren_or" (formula "33") (term "0,0"))
                                                         (rule "commute_or" (formula "33") (term "0,0,0"))
                                                         (builtin "One Step Simplification" (formula "33"))
                                                         (rule "cnf_rightDist" (formula "27") (term "1,1,0"))
                                                         (rule "cnf_rightDist" (formula "27") (term "0"))
                                                         (rule "distr_forallAnd" (formula "27"))
                                                         (rule "andLeft" (formula "27"))
                                                         (rule "commute_or" (formula "28") (term "0"))
                                                         (rule "shift_paren_or" (formula "27") (term "0"))
                                                         (rule "commute_or_2" (formula "27") (term "0,0"))
                                                         (builtin "One Step Simplification" (formula "27"))
                                                         (rule "commute_or" (formula "28") (term "1,1,0"))
                                                         (rule "shift_paren_or" (formula "27") (term "0,0"))
                                                         (rule "commute_or" (formula "27") (term "0,0,0"))
                                                         (builtin "One Step Simplification" (formula "27"))
                                                         (rule "cnf_rightDist" (formula "28") (term "0"))
                                                         (rule "distr_forallAnd" (formula "28"))
                                                         (rule "andLeft" (formula "28"))
                                                         (rule "commute_or_2" (formula "28") (term "0"))
                                                         (rule "shift_paren_or" (formula "29") (term "0"))
                                                         (rule "commute_or_2" (formula "29") (term "0,0"))
                                                         (rule "inEqSimp_or_tautInEq1" (formula "29") (term "0"))
                                                         (rule "inEqSimp_homoInEq1" (formula "29") (term "1,0"))
                                                         (rule "polySimp_pullOutFactor1" (formula "29") (term "0,1,0"))
                                                         (rule "add_literals" (formula "29") (term "1,0,1,0"))
                                                         (rule "times_zero_1" (formula "29") (term "0,1,0"))
                                                         (rule "leq_literals" (formula "29") (term "1,0"))
                                                         (builtin "One Step Simplification" (formula "29"))
                                                         (rule "true_left" (formula "29"))
                                                         (rule "shift_paren_or" (formula "28") (term "0,0"))
                                                         (rule "commute_or" (formula "28") (term "0,0,0"))
                                                         (rule "inEqSimp_or_tautInEq1" (formula "28") (term "0,0"))
                                                         (rule "add_zero_right" (formula "28") (term "1,1,0,0"))
                                                         (rule "qeq_literals" (formula "28") (term "1,0,0"))
                                                         (builtin "One Step Simplification" (formula "28"))
                                                         (rule "true_left" (formula "28"))
                                                         (rule "cnf_rightDist" (formula "7") (term "1,1,0"))
                                                         (rule "ifthenelse_split" (formula "1") (term "0"))
                                                         (branch " ¬self.chosen[i_9] = null ∧ ¬self.chosen[i_9].<created> = TRUE TRUE"
                                                            (rule "andLeft" (formula "1"))
                                                            (rule "notLeft" (formula "2"))
                                                            (rule "notLeft" (formula "1"))
                                                            (rule "referencedObjectIsCreatedRight" (formula "45") (ifseqformula "44"))
                                                            (rule "close" (formula "45") (ifseqformula "11"))
                                                         )
                                                         (branch " ¬self.chosen[i_9] = null ∧ ¬self.chosen[i_9].<created> = TRUE FALSE"
                                                            (rule "close" (formula "54") (ifseqformula "1"))
                                                         )
                                                      )
                                                      (branch "msg.length ≥ 1 FALSE"
                                                         (rule "eqSymm" (formula "32"))
                                                         (rule "inEqSimp_geqRight" (formula "44"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "applyEq" (formula "34") (term "1,1,1,1,1,1,0") (ifseqformula "33"))
                                                         (rule "add_zero_right" (formula "34") (term "1,1,1,1,1,0"))
                                                         (rule "applyEq" (formula "34") (term "1,1,0,0") (ifseqformula "33"))
                                                         (rule "applyEq" (formula "32") (term "0") (ifseqformula "33"))
                                                         (rule "qeq_literals" (formula "32"))
                                                         (rule "closeFalse" (formula "32"))
                                                      )
                                                   )
                                                   (branch "self.chosen.<created> = TRUE FALSE"
                                                      (rule "referencedObjectIsCreatedRight" (formula "38") (ifseqformula "44"))
                                                      (rule "close" (formula "38") (ifseqformula "9"))
                                                   )
                                                )
                                                (branch "self.encrypted.<created> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRight" (formula "38") (ifseqformula "43"))
                                                   (rule "close" (formula "38") (ifseqformula "9"))
                                                )
                                             )
                                             (branch "self.concatenated.length ≥ 1 FALSE"
                                                (rule "eqSymm" (formula "25"))
                                                (builtin "One Step Simplification" (formula "25"))
                                                (rule "inEqSimp_geqRight" (formula "36"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "inEqSimp_notGeq" (formula "26") (term "0"))
                                                (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                                (rule "add_literals" (formula "26") (term "0,0,0"))
                                                (rule "add_zero_left" (formula "26") (term "0,0"))
                                                (rule "arrayLengthIsAShort" (formula "51") (term "0,0,1,0"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "true_left" (formula "1"))
                                                (rule "arrayLengthNotNegative" (formula "51") (term "0,0,1,0"))
                                                (rule "replace_known_left" (formula "52") (term "0,1,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "52"))
                                                (rule "commute_or_2" (formula "15") (term "0"))
                                                (rule "commute_or_2" (formula "17") (term "0"))
                                                (rule "commute_or_2" (formula "16") (term "0"))
                                                (rule "commute_or_2" (formula "6") (term "0"))
                                                (rule "ifthenelse_split" (formula "7") (term "0"))
                                                (branch "self.encrypted.<created> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "1") (term "0,0") (ifseqformula "8"))
                                                   (rule "applyEqReverse" (formula "53") (term "0,1,0") (ifseqformula "8"))
                                                   (rule "hideAuxiliaryEq" (formula "8"))
                                                   (rule "ifthenelse_split" (formula "5") (term "0"))
                                                   (branch "self.chosen.<created> = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "3") (term "0,0") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "53") (term "1,2,1,0,0,0,1,0,0,1") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "48") (term "0,0,0,0,0") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "53") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "53") (term "1,2,1,0,0,0,0") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "48") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "53") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "48") (term "0,1,1,1,0,0,1") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "48") (term "1,1,1,1,0,1") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "48") (term "0,1,0,0") (ifseqformula "6"))
                                                      (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "4")))
                                                      (rule "allRight" (formula "48") (inst "sk=iv_56"))
                                                      (rule "orRight" (formula "48"))
                                                      (rule "orRight" (formula "48"))
                                                      (rule "applyEqReverse" (formula "55") (term "0,1,1,0,0,0,0") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "55") (term "0,1,1,0,0,0,1,0,0,1") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "49") (term "0,0,0,1") (ifseqformula "6"))
                                                      (rule "hideAuxiliaryEq" (formula "6"))
                                                      (rule "eqSymm" (formula "49"))
                                                      (rule "replace_known_left" (formula "48") (term "0,1") (ifseqformula "4"))
                                                      (builtin "One Step Simplification" (formula "48"))
                                                      (rule "inEqSimp_leqRight" (formula "47"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "replace_known_left" (formula "49") (term "0,0,0") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "1")))
                                                      (rule "inEqSimp_geqRight" (formula "48"))
                                                      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                      (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                      (rule "inEqSimp_homoInEq0" (formula "49") (term "0,0"))
                                                      (rule "eqSymm" (formula "49"))
                                                      (rule "polySimp_addComm1" (formula "49") (term "0,0,1"))
                                                      (rule "inEqSimp_homoInEq0" (formula "49") (term "0,0"))
                                                      (rule "polySimp_addComm1" (formula "49") (term "0,0,0"))
                                                      (rule "eqSymm" (formula "49"))
                                                      (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                                      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "49") (term "0,1"))
                                                      (rule "polySimp_mulComm0" (formula "49") (term "1,0,1"))
                                                      (rule "polySimp_rightDist" (formula "49") (term "1,0,1"))
                                                      (rule "polySimp_mulLiterals" (formula "49") (term "1,1,0,1"))
                                                      (rule "mul_literals" (formula "49") (term "0,1,0,1"))
                                                      (rule "polySimp_elimOne" (formula "49") (term "1,1,0,1"))
                                                      (rule "replace_known_left" (formula "49") (term "0,1") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "49"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "49") (term "0,0"))
                                                      (rule "polySimp_mulComm0" (formula "49") (term "1,0,0"))
                                                      (rule "polySimp_rightDist" (formula "49") (term "1,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "49") (term "1,1,0,0"))
                                                      (rule "mul_literals" (formula "49") (term "0,1,0,0"))
                                                      (rule "polySimp_elimOne" (formula "49") (term "1,1,0,0"))
                                                      (rule "replace_known_left" (formula "49") (term "0,0") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "49"))
                                                      (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "6"))
                                                      (rule "leq_literals" (formula "5") (term "0"))
                                                      (builtin "One Step Simplification" (formula "5"))
                                                      (rule "true_left" (formula "5"))
                                                      (rule "pullOutSelect" (formula "48") (term "0") (inst "selectSK=arr_398"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "32"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "eqSymm" (formula "49"))
                                                      (rule "commute_or_2" (formula "25") (term "0"))
                                                      (rule "commute_or" (formula "39") (term "0,0"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "1,1") (ifseqformula "12"))
                                                      (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "9"))
                                                      (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "45")))
                                                      (rule "true_left" (formula "20"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "1,0") (ifseqformula "12"))
                                                      (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "47"))
                                                      (builtin "One Step Simplification" (formula "20"))
                                                      (rule "commute_or_2" (formula "39") (term "0"))
                                                      (rule "commute_or" (formula "31") (term "0,0"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "27") (term "0,1") (ifseqformula "12"))
                                                      (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "47"))
                                                      (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "7")))
                                                      (rule "true_left" (formula "27"))
                                                      (rule "commute_or_2" (formula "38") (term "0"))
                                                      (rule "commute_or_2" (formula "37") (term "0"))
                                                      (rule "commute_or" (formula "17") (term "0,0"))
                                                      (rule "commute_or" (formula "19") (term "0,0"))
                                                      (rule "commute_or" (formula "18") (term "0,0"))
                                                      (rule "commute_or" (formula "8") (term "0,0"))
                                                      (rule "lenNonNegative" (formula "25") (term "0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "25"))
                                                      (rule "applyEq" (formula "25") (term "0") (ifseqformula "26"))
                                                      (rule "inEqSimp_subsumption1" (formula "25") (ifseqformula "22"))
                                                      (rule "leq_literals" (formula "25") (term "0"))
                                                      (builtin "One Step Simplification" (formula "25"))
                                                      (rule "true_left" (formula "25"))
                                                      (rule "commute_or" (formula "26") (term "0,0"))
                                                      (rule "commute_or" (formula "39") (term "0,0"))
                                                      (rule "commute_or" (formula "38") (term "0,0"))
                                                      (rule "commute_or" (formula "37") (term "0,0"))
                                                      (rule "cut_direct" (formula "31") (term "0,1,1,0"))
                                                      (branch "CUT: msg.length ≥ 1 TRUE"
                                                         (builtin "One Step Simplification" (formula "32"))
                                                         (rule "inEqSimp_contradEq7" (formula "30") (term "1") (ifseqformula "31"))
                                                         (rule "times_zero_1" (formula "30") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "30") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "30") (term "0,1"))
                                                         (builtin "One Step Simplification" (formula "30"))
                                                         (rule "inEqSimp_contradInEq1" (formula "30") (ifseqformula "31"))
                                                         (rule "qeq_literals" (formula "30") (term "0"))
                                                         (builtin "One Step Simplification" (formula "30"))
                                                         (rule "closeFalse" (formula "30"))
                                                      )
                                                      (branch "CUT: msg.length ≥ 1 FALSE"
                                                         (builtin "One Step Simplification" (formula "31"))
                                                         (rule "inEqSimp_geqRight" (formula "41"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "1"))
                                                         (builtin "One Step Simplification" (formula "31"))
                                                         (rule "true_left" (formula "31"))
                                                         (rule "inEqSimp_or_tautInEq1" (formula "31") (term "0"))
                                                         (rule "add_literals" (formula "31") (term "1,1,0"))
                                                         (rule "qeq_literals" (formula "31") (term "1,0"))
                                                         (builtin "One Step Simplification" (formula "31"))
                                                         (rule "true_left" (formula "31"))
                                                         (rule "arrayLengthNotNegative" (formula "23") (term "0"))
                                                         (rule "inEqSimp_subsumption1" (formula "23") (ifseqformula "24"))
                                                         (rule "leq_literals" (formula "23") (term "0"))
                                                         (builtin "One Step Simplification" (formula "23"))
                                                         (rule "true_left" (formula "23"))
                                                         (rule "arrayLengthIsAShort" (formula "26") (term "1"))
                                                         (builtin "One Step Simplification" (formula "26"))
                                                         (rule "true_left" (formula "26"))
                                                         (rule "arrayLengthIsAShort" (formula "39") (term "1,1,0"))
                                                         (builtin "One Step Simplification" (formula "39"))
                                                         (rule "true_left" (formula "39"))
                                                         (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                         (rule "arrayLengthIsAShort" (formula "7") (term "0"))
                                                         (builtin "One Step Simplification" (formula "7"))
                                                         (rule "true_left" (formula "7"))
                                                         (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                         (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "8"))
                                                         (rule "leq_literals" (formula "7") (term "0"))
                                                         (builtin "One Step Simplification" (formula "7"))
                                                         (rule "true_left" (formula "7"))
                                                         (rule "onlyCreatedObjectsAreReferenced" (formula "26") (term "0,1,0,0,0") (ifseqformula "13"))
                                                         (rule "onlyCreatedObjectsAreReferenced" (formula "27") (term "0,1,0,1,0,0") (ifseqformula "13"))
                                                         (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "46"))
                                                         (builtin "One Step Simplification" (formula "27"))
                                                         (rule "ifthenelse_to_or_right" (formula "9") (term "0,0,0"))
                                                         (builtin "One Step Simplification" (formula "9"))
                                                         (rule "nnf_notAnd" (formula "9") (term "0,0,0,0,0"))
                                                         (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,0,0,0"))
                                                         (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,0,0,0"))
                                                         (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,0,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,0,0,0"))
                                                         (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,0,0,0"))
                                                         (rule "add_zero_left" (formula "9") (term "0,0,1,0,0,0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,0,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,0,0"))
                                                         (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,0,0"))
                                                         (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,0,0,0"))
                                                         (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0,0,0,0"))
                                                         (rule "add_zero_right" (formula "9") (term "0,0,0,0,0,0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,0,0,0"))
                                                         (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0,0"))
                                                         (rule "nnf_notAnd" (formula "9") (term "0,1,1,0,0,0"))
                                                         (rule "inEqSimp_notGeq" (formula "9") (term "0,0,1,1,0,0,0"))
                                                         (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,1,1,0,0,0"))
                                                         (rule "add_zero_right" (formula "9") (term "0,0,0,0,1,1,0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,1,1,0,0,0"))
                                                         (rule "mul_literals" (formula "9") (term "1,0,0,1,1,0,0,0"))
                                                         (rule "inEqSimp_notLeq" (formula "9") (term "1,0,1,1,0,0,0"))
                                                         (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,1,1,0,0,0"))
                                                         (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,1,1,0,0,0"))
                                                         (rule "add_literals" (formula "9") (term "0,0,0,1,0,1,1,0,0,0"))
                                                         (rule "add_zero_left" (formula "9") (term "0,0,1,0,1,1,0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,1,1,0,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,1,1,0,0,0"))
                                                         (rule "polySimp_elimOne" (formula "9") (term "1,1,0,1,1,0,0,0"))
                                                         (rule "commute_or" (formula "9") (term "0,0"))
                                                         (rule "commute_or_2" (formula "9") (term "0"))
                                                         (rule "commute_or" (formula "9") (term "1,1,0"))
                                                         (rule "commute_or_2" (formula "9") (term "0,1,0"))
                                                         (rule "commute_or_2" (formula "9") (term "0,1,1,0"))
                                                         (rule "commute_or" (formula "9") (term "0,0,1,0"))
                                                         (rule "ifthenelse_to_or_right" (formula "29") (term "0,0,0"))
                                                         (rule "nnf_notAnd" (formula "29") (term "0,0,0,0,0"))
                                                         (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0,0,0"))
                                                         (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0,0,0"))
                                                         (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                                         (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0,0,0"))
                                                         (rule "add_zero_left" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,0,0"))
                                                         (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,0,0"))
                                                         (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0,0,0"))
                                                         (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0,0,0,0"))
                                                         (rule "add_zero_right" (formula "29") (term "0,0,0,0,0,0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0,0,0"))
                                                         (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0"))
                                                         (rule "commute_or" (formula "29") (term "0,0"))
                                                         (rule "commute_or_2" (formula "29") (term "0"))
                                                         (rule "commute_or_2" (formula "29") (term "0,1,0"))
                                                         (rule "commute_or" (formula "29") (term "1,1,0"))
                                                         (rule "commute_or" (formula "9") (term "0,0,1,1,0"))
                                                         (rule "commute_or" (formula "29") (term "0,0,1,0"))
                                                         (rule "cnf_rightDist" (formula "29") (term "1,1,0"))
                                                         (rule "cnf_rightDist" (formula "29") (term "0"))
                                                         (rule "distr_forallAnd" (formula "29"))
                                                         (rule "andLeft" (formula "29"))
                                                         (rule "commute_or" (formula "30") (term "0"))
                                                         (rule "shift_paren_or" (formula "29") (term "0"))
                                                         (rule "commute_or_2" (formula "29") (term "0,0"))
                                                         (builtin "One Step Simplification" (formula "29"))
                                                         (rule "commute_or" (formula "30") (term "1,1,0"))
                                                         (rule "shift_paren_or" (formula "29") (term "0,0"))
                                                         (rule "commute_or" (formula "29") (term "0,0,0"))
                                                         (builtin "One Step Simplification" (formula "29"))
                                                         (rule "cnf_rightDist" (formula "30") (term "0"))
                                                         (rule "distr_forallAnd" (formula "30"))
                                                         (rule "andLeft" (formula "30"))
                                                         (rule "commute_or_2" (formula "30") (term "0"))
                                                         (rule "shift_paren_or" (formula "31") (term "0"))
                                                         (rule "commute_or_2" (formula "31") (term "0,0"))
                                                         (rule "inEqSimp_or_tautInEq1" (formula "31") (term "0"))
                                                         (rule "inEqSimp_homoInEq1" (formula "31") (term "1,0"))
                                                         (rule "polySimp_pullOutFactor1" (formula "31") (term "0,1,0"))
                                                         (rule "add_literals" (formula "31") (term "1,0,1,0"))
                                                         (rule "times_zero_1" (formula "31") (term "0,1,0"))
                                                         (rule "leq_literals" (formula "31") (term "1,0"))
                                                         (builtin "One Step Simplification" (formula "31"))
                                                         (rule "true_left" (formula "31"))
                                                         (rule "shift_paren_or" (formula "30") (term "0,0"))
                                                         (rule "commute_or" (formula "30") (term "0,0,0"))
                                                         (rule "inEqSimp_or_tautInEq1" (formula "30") (term "0,0"))
                                                         (rule "add_zero_right" (formula "30") (term "1,1,0,0"))
                                                         (rule "qeq_literals" (formula "30") (term "1,0,0"))
                                                         (builtin "One Step Simplification" (formula "30"))
                                                         (rule "true_left" (formula "30"))
                                                         (rule "cnf_rightDist" (formula "9") (term "1,1,0"))
                                                         (rule "commute_or_2" (formula "9") (term "0,1,1,0"))
                                                         (rule "inEqSimp_or_tautInEq1" (formula "9") (term "0,0,1,1,0"))
                                                         (rule "add_zero_right" (formula "9") (term "1,1,0,0,1,1,0"))
                                                         (rule "qeq_literals" (formula "9") (term "1,0,0,1,1,0"))
                                                         (builtin "One Step Simplification" (formula "9"))
                                                         (rule "shift_paren_or" (formula "9") (term "1,1,0"))
                                                         (rule "commute_or" (formula "9") (term "0,1,1,0"))
                                                         (rule "inEqSimp_or_tautInEq1" (formula "9") (term "1,1,0"))
                                                         (rule "inEqSimp_homoInEq1" (formula "9") (term "1,1,1,0"))
                                                         (rule "polySimp_pullOutFactor1" (formula "9") (term "0,1,1,1,0"))
                                                         (rule "add_literals" (formula "9") (term "1,0,1,1,1,0"))
                                                         (rule "times_zero_1" (formula "9") (term "0,1,1,1,0"))
                                                         (rule "leq_literals" (formula "9") (term "1,1,1,0"))
                                                         (builtin "One Step Simplification" (formula "9"))
                                                         (rule "commute_or_2" (formula "9") (term "0"))
                                                         (rule "shift_paren_or" (formula "9") (term "0,0"))
                                                         (rule "shift_paren_or" (formula "9") (term "0,0,0"))
                                                         (rule "commute_or" (formula "9") (term "0,0,0,0"))
                                                         (builtin "One Step Simplification" (formula "9"))
                                                         (rule "arrayLengthIsAShort" (formula "6") (term "0"))
                                                         (builtin "One Step Simplification" (formula "6"))
                                                         (rule "true_left" (formula "6"))
                                                         (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                                         (rule "inEqSimp_antiSymm" (formula "6") (ifseqformula "7"))
                                                         (rule "applyEq" (formula "8") (term "0") (ifseqformula "6"))
                                                         (rule "leq_literals" (formula "8"))
                                                         (rule "true_left" (formula "8"))
                                                         (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
                                                         (rule "qeq_literals" (formula "7"))
                                                         (rule "true_left" (formula "7"))
                                                         (rule "ifthenelse_split" (formula "2") (term "0"))
                                                         (branch " ¬self.chosen[i_9] = null ∧ ¬self.chosen[i_9].<created> = TRUE TRUE"
                                                            (rule "andLeft" (formula "2"))
                                                            (rule "notLeft" (formula "3"))
                                                            (rule "notLeft" (formula "2"))
                                                            (rule "referencedObjectIsCreatedRight" (formula "44") (ifseqformula "43"))
                                                            (rule "close" (formula "44") (ifseqformula "13"))
                                                         )
                                                         (branch " ¬self.chosen[i_9] = null ∧ ¬self.chosen[i_9].<created> = TRUE FALSE"
                                                            (rule "close" (formula "53") (ifseqformula "2"))
                                                         )
                                                      )
                                                   )
                                                   (branch "self.chosen.<created> = TRUE FALSE"
                                                      (rule "referencedObjectIsCreatedRight" (formula "38") (ifseqformula "44"))
                                                      (rule "close" (formula "38") (ifseqformula "10"))
                                                   )
                                                )
                                                (branch "self.encrypted.<created> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRight" (formula "38") (ifseqformula "43"))
                                                   (rule "close" (formula "38") (ifseqformula "10"))
                                                )
                                             )
                                          )
                                          (branch "self.chosen[i_9].length ≥ 1 FALSE"
                                             (rule "eqSymm" (formula "45") (term "0"))
                                             (builtin "One Step Simplification" (formula "45"))
                                             (rule "inEqSimp_geqRight" (formula "44"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_notGeq" (formula "45") (term "0,0"))
                                             (rule "mul_literals" (formula "45") (term "1,0,0,0,0"))
                                             (rule "add_literals" (formula "45") (term "0,0,0,0"))
                                             (rule "add_zero_left" (formula "45") (term "0,0,0"))
                                             (rule "arrayLengthNotNegative" (formula "17") (term "1,0,0,0"))
                                             (rule "arrayLengthIsAShort" (formula "18") (term "1,0,0,0"))
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "true_left" (formula "18"))
                                             (rule "arrayLengthIsAShort" (formula "18") (term "1,0,1,0,0"))
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "true_left" (formula "18"))
                                             (rule "arrayLengthNotNegative" (formula "18") (term "1,0,1,0,0"))
                                             (rule "nnf_notAnd" (formula "28") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "28") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                                             (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "27") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "27") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                                             (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                             (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                             (rule "commute_or_2" (formula "25") (term "0"))
                                             (rule "nnf_notAnd" (formula "33") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "33") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "33") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0"))
                                             (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "33") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0"))
                                             (rule "mul_literals" (formula "33") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "32") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0"))
                                             (rule "mul_literals" (formula "32") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "32") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
                                             (rule "mul_literals" (formula "32") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "32") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "32") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "31") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "31") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0"))
                                             (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "31") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0"))
                                             (rule "ifthenelse_split" (formula "24") (term "0"))
                                             (branch "self.concatenated.length ≥ 1 TRUE"
                                                (rule "eqSymm" (formula "25"))
                                                (rule "applyEq" (formula "26") (term "1,1,0") (ifseqformula "25"))
                                                (rule "arrayLengthIsAShort" (formula "50") (term "1,1,0,0,0,0"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "true_left" (formula "1"))
                                                (rule "arrayLengthNotNegative" (formula "50") (term "1,1,0,0,0,0"))
                                                (rule "arrayLengthIsAShort" (formula "51") (term "0,0,1,0"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "true_left" (formula "1"))
                                                (rule "arrayLengthNotNegative" (formula "51") (term "0,0,1,0"))
                                                (rule "replace_known_left" (formula "52") (term "0,1,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "52"))
                                                (rule "commute_or_2" (formula "14") (term "0"))
                                                (rule "commute_or_2" (formula "16") (term "0"))
                                                (rule "commute_or_2" (formula "15") (term "0"))
                                                (rule "commute_or_2" (formula "5") (term "0"))
                                                (rule "ifthenelse_split" (formula "6") (term "0"))
                                                (branch "self.encrypted.<created> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "1") (term "0,0") (ifseqformula "7"))
                                                   (rule "applyEqReverse" (formula "53") (term "0,1,0") (ifseqformula "7"))
                                                   (rule "hideAuxiliaryEq" (formula "7"))
                                                   (rule "ifthenelse_split" (formula "4") (term "0"))
                                                   (branch "self.chosen.<created> = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "48") (term "1,1,1,1,0,1") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "48") (term "0,1,1,1,0,0,1") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "48") (term "0,0,0,1,1,0,0,1") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "48") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "53") (term "1,2,1,0,0,0,0") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "48") (term "0,0,0,0") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "48") (term "0,0,1,0") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "53") (term "0,1,1,0,0,0,0") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "53") (term "1,2,1,0,0,0,1,0,0,1") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "53") (term "0,1,1,0,0,0,1,0,0,1") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "53") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "53") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "5"))
                                                      (rule "hideAuxiliaryEq" (formula "5"))
                                                      (rule "eqSymm" (formula "47") (term "1,0,1"))
                                                      (rule "replace_known_left" (formula "47") (term "0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "47"))
                                                      (rule "allRight" (formula "47") (inst "sk=iv_55"))
                                                      (rule "orRight" (formula "47"))
                                                      (rule "orRight" (formula "47"))
                                                      (rule "inEqSimp_leqRight" (formula "47"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "replace_known_left" (formula "49") (term "0,0,1") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "1")))
                                                      (rule "inEqSimp_geqRight" (formula "48"))
                                                      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                      (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                      (rule "inEqSimp_homoInEq0" (formula "49") (term "0,1"))
                                                      (rule "polySimp_addComm1" (formula "49") (term "0,0,1"))
                                                      (rule "inEqSimp_homoInEq0" (formula "49") (term "0,0"))
                                                      (rule "polySimp_addComm1" (formula "49") (term "0,0,0"))
                                                      (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                                      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "49") (term "0,1"))
                                                      (rule "polySimp_mulComm0" (formula "49") (term "1,0,1"))
                                                      (rule "polySimp_rightDist" (formula "49") (term "1,0,1"))
                                                      (rule "polySimp_mulLiterals" (formula "49") (term "1,1,0,1"))
                                                      (rule "mul_literals" (formula "49") (term "0,1,0,1"))
                                                      (rule "polySimp_elimOne" (formula "49") (term "1,1,0,1"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "49") (term "0,0"))
                                                      (rule "polySimp_mulComm0" (formula "49") (term "1,0,0"))
                                                      (rule "polySimp_rightDist" (formula "49") (term "1,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "49") (term "1,1,0,0"))
                                                      (rule "mul_literals" (formula "49") (term "0,1,0,0"))
                                                      (rule "polySimp_elimOne" (formula "49") (term "1,1,0,0"))
                                                      (rule "inEqSimp_contradInEq0" (formula "1") (term "0,0") (ifseqformula "5"))
                                                      (rule "qeq_literals" (formula "1") (term "0,0,0"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "inEqSimp_homoInEq1" (formula "1"))
                                                      (rule "times_zero_2" (formula "1") (term "1,0"))
                                                      (rule "add_zero_right" (formula "1") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                      (rule "mul_literals" (formula "1") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
                                                      (rule "qeq_literals" (formula "1") (term "0"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "closeFalse" (formula "1"))
                                                   )
                                                   (branch "self.chosen.<created> = TRUE FALSE"
                                                      (rule "referencedObjectIsCreatedRight" (formula "38") (ifseqformula "44"))
                                                      (rule "close" (formula "38") (ifseqformula "9"))
                                                   )
                                                )
                                                (branch "self.encrypted.<created> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRight" (formula "38") (ifseqformula "43"))
                                                   (rule "close" (formula "38") (ifseqformula "9"))
                                                )
                                             )
                                             (branch "self.concatenated.length ≥ 1 FALSE"
                                                (rule "eqSymm" (formula "24"))
                                                (builtin "One Step Simplification" (formula "24"))
                                                (rule "inEqSimp_geqRight" (formula "35"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "inEqSimp_notGeq" (formula "25") (term "0"))
                                                (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                                (rule "add_literals" (formula "25") (term "0,0,0"))
                                                (rule "add_zero_left" (formula "25") (term "0,0"))
                                                (rule "arrayLengthIsAShort" (formula "50") (term "1,1,0,0,0,0"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "true_left" (formula "1"))
                                                (rule "arrayLengthNotNegative" (formula "50") (term "1,1,0,0,0,0"))
                                                (rule "arrayLengthIsAShort" (formula "51") (term "0,0,1,0"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "true_left" (formula "1"))
                                                (rule "arrayLengthNotNegative" (formula "51") (term "0,0,1,0"))
                                                (rule "replace_known_left" (formula "52") (term "0,1,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "52"))
                                                (rule "commute_or_2" (formula "15") (term "0"))
                                                (rule "commute_or_2" (formula "17") (term "0"))
                                                (rule "commute_or_2" (formula "16") (term "0"))
                                                (rule "commute_or_2" (formula "6") (term "0"))
                                                (rule "ifthenelse_split" (formula "7") (term "0"))
                                                (branch "self.encrypted.<created> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "1") (term "0,0") (ifseqformula "8"))
                                                   (rule "applyEqReverse" (formula "53") (term "0,1,0") (ifseqformula "8"))
                                                   (rule "hideAuxiliaryEq" (formula "8"))
                                                   (rule "ifthenelse_split" (formula "5") (term "0"))
                                                   (branch "self.chosen.<created> = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "53") (term "1,2,1,0,0,0,0") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "48") (term "0,0,1,0") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "48") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "48") (term "0,0,0,1,1,0,0,1") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "53") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "53") (term "1,2,1,0,0,0,1,0,0,1") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "48") (term "0,1,1,1,0,0,1") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "53") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "53") (term "0,1,1,0,0,0,0") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "53") (term "0,1,1,0,0,0,1,0,0,1") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "48") (term "0,0,0,0") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "48") (term "1,1,1,1,0,1") (ifseqformula "6"))
                                                      (rule "hideAuxiliaryEq" (formula "6"))
                                                      (rule "eqSymm" (formula "47") (term "1,0,1"))
                                                      (rule "replace_known_left" (formula "47") (term "0,0") (ifseqformula "4"))
                                                      (builtin "One Step Simplification" (formula "47"))
                                                      (rule "allRight" (formula "47") (inst "sk=iv_54"))
                                                      (rule "orRight" (formula "47"))
                                                      (rule "orRight" (formula "47"))
                                                      (rule "inEqSimp_leqRight" (formula "47"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "replace_known_left" (formula "49") (term "0,0,1") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "1")))
                                                      (rule "inEqSimp_geqRight" (formula "48"))
                                                      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                      (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                      (rule "inEqSimp_homoInEq0" (formula "49") (term "0,0"))
                                                      (rule "eqSymm" (formula "49"))
                                                      (rule "polySimp_addComm1" (formula "49") (term "0,0,1"))
                                                      (rule "inEqSimp_homoInEq0" (formula "49") (term "0,0"))
                                                      (rule "polySimp_addComm1" (formula "49") (term "0,0,0"))
                                                      (rule "eqSymm" (formula "49"))
                                                      (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                                      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "49") (term "0,1"))
                                                      (rule "polySimp_mulComm0" (formula "49") (term "1,0,1"))
                                                      (rule "polySimp_rightDist" (formula "49") (term "1,0,1"))
                                                      (rule "polySimp_mulLiterals" (formula "49") (term "1,1,0,1"))
                                                      (rule "mul_literals" (formula "49") (term "0,1,0,1"))
                                                      (rule "polySimp_elimOne" (formula "49") (term "1,1,0,1"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "49") (term "0,0"))
                                                      (rule "polySimp_mulComm0" (formula "49") (term "1,0,0"))
                                                      (rule "polySimp_rightDist" (formula "49") (term "1,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "49") (term "1,1,0,0"))
                                                      (rule "mul_literals" (formula "49") (term "0,1,0,0"))
                                                      (rule "polySimp_elimOne" (formula "49") (term "1,1,0,0"))
                                                      (rule "inEqSimp_contradInEq0" (formula "1") (term "0,0") (ifseqformula "6"))
                                                      (rule "qeq_literals" (formula "1") (term "0,0,0"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "inEqSimp_homoInEq1" (formula "1"))
                                                      (rule "times_zero_2" (formula "1") (term "1,0"))
                                                      (rule "add_zero_right" (formula "1") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                      (rule "mul_literals" (formula "1") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
                                                      (rule "qeq_literals" (formula "1") (term "0"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "closeFalse" (formula "1"))
                                                   )
                                                   (branch "self.chosen.<created> = TRUE FALSE"
                                                      (rule "referencedObjectIsCreatedRight" (formula "38") (ifseqformula "44"))
                                                      (rule "close" (formula "38") (ifseqformula "10"))
                                                   )
                                                )
                                                (branch "self.encrypted.<created> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRight" (formula "38") (ifseqformula "43"))
                                                   (rule "close" (formula "38") (ifseqformula "10"))
                                                )
                                             )
                                          )
                                       )
                                       (branch "self.unsigned.length ≥ 1 FALSE"
                                          (rule "replace_known_right" (formula "16") (term "0,1,1,0,0") (ifseqformula "34"))
                                          (builtin "One Step Simplification" (formula "16"))
                                          (rule "inEqSimp_geqRight" (formula "34"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_or_tautInEq0" (formula "17") (term "0,0"))
                                          (rule "add_zero_right" (formula "17") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "17") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "17"))
                                          (rule "true_left" (formula "17"))
                                          (rule "nnf_imp2or" (formula "32") (term "0"))
                                          (rule "nnf_imp2or" (formula "31") (term "0"))
                                          (rule "commute_or_2" (formula "33") (term "0"))
                                          (rule "nnf_imp2or" (formula "30") (term "0"))
                                          (rule "ifthenelse_split" (formula "43") (term "0,0"))
                                          (branch "self.chosen[i_9].length ≥ 1 TRUE"
                                             (rule "eqSymm" (formula "44") (term "0"))
                                             (rule "arrayLengthIsAShort" (formula "17") (term "1,0,0,0"))
                                             (builtin "One Step Simplification" (formula "17"))
                                             (rule "true_left" (formula "17"))
                                             (rule "arrayLengthIsAShort" (formula "17") (term "1,0,1,0,0"))
                                             (builtin "One Step Simplification" (formula "17"))
                                             (rule "true_left" (formula "17"))
                                             (rule "arrayLengthNotNegative" (formula "17") (term "1,0,1,0,0"))
                                             (rule "arrayLengthNotNegative" (formula "18") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "27") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                                             (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "27") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                                             (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                             (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                             (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                             (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                             (rule "commute_or_2" (formula "24") (term "0"))
                                             (rule "nnf_notAnd" (formula "32") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "32") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
                                             (rule "mul_literals" (formula "32") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "32") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "32") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "31") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "31") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0"))
                                             (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "31") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "30") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "30") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
                                             (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "30") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
                                             (rule "arrayLengthNotNegative" (formula "48") (term "1,1,0,0,0,0"))
                                             (rule "arrayLengthIsAShort" (formula "49") (term "1,1,0,0,0,0"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "ifthenelse_split" (formula "24") (term "0"))
                                             (branch "self.concatenated.length ≥ 1 TRUE"
                                                (rule "eqSymm" (formula "25"))
                                                (rule "applyEq" (formula "26") (term "1,1,0") (ifseqformula "25"))
                                                (rule "arrayLengthIsAShort" (formula "50") (term "0,0,1,0"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "true_left" (formula "1"))
                                                (rule "arrayLengthNotNegative" (formula "50") (term "0,0,1,0"))
                                                (rule "replace_known_left" (formula "51") (term "0,1,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "51"))
                                                (rule "commute_or_2" (formula "15") (term "0"))
                                                (rule "commute_or_2" (formula "17") (term "0"))
                                                (rule "commute_or_2" (formula "16") (term "0"))
                                                (rule "commute_or_2" (formula "6") (term "0"))
                                                (rule "ifthenelse_split" (formula "7") (term "0"))
                                                (branch "self.encrypted.<created> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "52") (term "0,1,0") (ifseqformula "8"))
                                                   (rule "applyEqReverse" (formula "1") (term "0,0") (ifseqformula "8"))
                                                   (rule "hideAuxiliaryEq" (formula "8"))
                                                   (rule "ifthenelse_split" (formula "5") (term "0"))
                                                   (branch "self.chosen.<created> = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "47") (term "0,0,0,0,0") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "47") (term "1,1,1,1,0,1") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "52") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "52") (term "1,2,1,0,0,0,0") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "52") (term "0,1,1,0,0,0,1,0,0,1") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "47") (term "0,1,0,0") (ifseqformula "6"))
                                                      (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "3")))
                                                      (rule "allRight" (formula "47") (inst "sk=iv_53"))
                                                      (rule "orRight" (formula "47"))
                                                      (rule "orRight" (formula "47"))
                                                      (rule "applyEqReverse" (formula "54") (term "0,1,1,0,0,0,0") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "54") (term "1,2,1,0,0,0,1,0,0,1") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "54") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "49") (term "0,1,1,1,0,1") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "48") (term "0,1,1") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "48") (term "0,0,0,1") (ifseqformula "6"))
                                                      (rule "hideAuxiliaryEq" (formula "6"))
                                                      (rule "eqSymm" (formula "48"))
                                                      (rule "replace_known_left" (formula "47") (term "0,1") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "47"))
                                                      (rule "inEqSimp_leqRight" (formula "46"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "replace_known_left" (formula "48") (term "0,0,0") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "1")))
                                                      (rule "inEqSimp_geqRight" (formula "47"))
                                                      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                      (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                      (rule "inEqSimp_homoInEq0" (formula "48") (term "0,0"))
                                                      (rule "eqSymm" (formula "48"))
                                                      (rule "polySimp_addComm1" (formula "48") (term "0,0,1"))
                                                      (rule "inEqSimp_homoInEq0" (formula "48") (term "0,0"))
                                                      (rule "polySimp_addComm1" (formula "48") (term "0,0,0"))
                                                      (rule "eqSymm" (formula "48"))
                                                      (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                                      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "48") (term "0,0"))
                                                      (rule "eqSymm" (formula "48"))
                                                      (rule "polySimp_mulComm0" (formula "48") (term "1,0,1"))
                                                      (rule "polySimp_rightDist" (formula "48") (term "1,0,1"))
                                                      (rule "mul_literals" (formula "48") (term "0,1,0,1"))
                                                      (rule "polySimp_mulLiterals" (formula "48") (term "1,1,0,1"))
                                                      (rule "polySimp_elimOne" (formula "48") (term "1,1,0,1"))
                                                      (rule "replace_known_left" (formula "48") (term "0,1") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "48"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "48") (term "0,0"))
                                                      (rule "polySimp_mulComm0" (formula "48") (term "1,0,0"))
                                                      (rule "polySimp_rightDist" (formula "48") (term "1,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "48") (term "1,1,0,0"))
                                                      (rule "mul_literals" (formula "48") (term "0,1,0,0"))
                                                      (rule "polySimp_elimOne" (formula "48") (term "1,1,0,0"))
                                                      (rule "replace_known_left" (formula "48") (term "0,0") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "48"))
                                                      (rule "eqSymm" (formula "48"))
                                                      (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "5"))
                                                      (rule "leq_literals" (formula "4") (term "0"))
                                                      (builtin "One Step Simplification" (formula "4"))
                                                      (rule "true_left" (formula "4"))
                                                      (rule "pullOutSelect" (formula "47") (term "0") (inst "selectSK=arr_397"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "eqSymm" (formula "48"))
                                                      (rule "commute_or" (formula "38") (term "0,0"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "1,0") (ifseqformula "12"))
                                                      (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "46"))
                                                      (builtin "One Step Simplification" (formula "20"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "1,1") (ifseqformula "12"))
                                                      (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "9"))
                                                      (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "45")))
                                                      (rule "true_left" (formula "21"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "25") (term "0,1") (ifseqformula "12"))
                                                      (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "7"))
                                                      (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "46")))
                                                      (rule "true_left" (formula "25"))
                                                      (rule "commute_or_2" (formula "38") (term "0"))
                                                      (rule "commute_or" (formula "30") (term "0,0"))
                                                      (rule "commute_or_2" (formula "37") (term "0"))
                                                      (rule "commute_or_2" (formula "36") (term "0"))
                                                      (rule "commute_or" (formula "17") (term "0,0"))
                                                      (rule "commute_or" (formula "19") (term "0,0"))
                                                      (rule "commute_or" (formula "18") (term "0,0"))
                                                      (rule "commute_or" (formula "8") (term "0,0"))
                                                      (rule "lenNonNegative" (formula "24") (term "0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "24"))
                                                      (rule "applyEq" (formula "24") (term "0") (ifseqformula "25"))
                                                      (rule "qeq_literals" (formula "24"))
                                                      (rule "true_left" (formula "24"))
                                                      (rule "commute_or" (formula "38") (term "0,0"))
                                                      (rule "commute_or" (formula "37") (term "0,0"))
                                                      (rule "commute_or" (formula "36") (term "0,0"))
                                                      (rule "arrayLengthIsAShort" (formula "6") (term "0"))
                                                      (builtin "One Step Simplification" (formula "6"))
                                                      (rule "true_left" (formula "6"))
                                                      (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                                      (rule "inEqSimp_antiSymm" (formula "6") (ifseqformula "7"))
                                                      (rule "applyEq" (formula "8") (term "0") (ifseqformula "6"))
                                                      (rule "leq_literals" (formula "8"))
                                                      (rule "true_left" (formula "8"))
                                                      (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
                                                      (rule "qeq_literals" (formula "7"))
                                                      (rule "true_left" (formula "7"))
                                                      (rule "arrayLengthIsAShort" (formula "39") (term "1,1,0"))
                                                      (builtin "One Step Simplification" (formula "39"))
                                                      (rule "true_left" (formula "39"))
                                                      (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                      (rule "arrayLengthIsAShort" (formula "5") (term "0"))
                                                      (builtin "One Step Simplification" (formula "5"))
                                                      (rule "true_left" (formula "5"))
                                                      (rule "arrayLengthNotNegative" (formula "5") (term "0"))
                                                      (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "6"))
                                                      (rule "leq_literals" (formula "5") (term "0"))
                                                      (builtin "One Step Simplification" (formula "5"))
                                                      (rule "true_left" (formula "5"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "0,1,0,0,0") (ifseqformula "12"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "25") (term "0,1,0,1,0,0") (ifseqformula "12"))
                                                      (rule "replace_known_right" (formula "25") (term "0") (ifseqformula "46"))
                                                      (builtin "One Step Simplification" (formula "25"))
                                                      (rule "ifthenelse_to_or_left" (formula "32") (term "0,0,0"))
                                                      (rule "eqSymm" (formula "32") (term "1,1,0,0,0"))
                                                      (builtin "One Step Simplification" (formula "32"))
                                                      (rule "eqSymm" (formula "32") (term "1,0,0,0,0"))
                                                      (rule "nnf_notAnd" (formula "32") (term "0,0,0,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0,0,0,0"))
                                                      (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0,0,0,0"))
                                                      (rule "add_zero_right" (formula "32") (term "0,0,0,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "32") (term "1,0,0,0,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "32") (term "0,0,0,1,0,0,0,0,0"))
                                                      (rule "add_zero_left" (formula "32") (term "0,0,1,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0,0,0,0"))
                                                      (rule "nnf_notAnd" (formula "32") (term "0,1,1,0,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "32") (term "0,0,1,1,0,0,0"))
                                                      (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,1,1,0,0,0"))
                                                      (rule "add_zero_right" (formula "32") (term "0,0,0,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,1,1,0,0,0"))
                                                      (rule "mul_literals" (formula "32") (term "1,0,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "32") (term "1,0,1,1,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,1,1,0,0,0"))
                                                      (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,1,1,0,0,0"))
                                                      (rule "add_literals" (formula "32") (term "0,0,0,1,0,1,1,0,0,0"))
                                                      (rule "add_zero_left" (formula "32") (term "0,0,1,0,1,1,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,1,1,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,1,1,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "32") (term "1,1,0,1,1,0,0,0"))
                                                      (rule "commute_or" (formula "32") (term "0,0"))
                                                      (rule "commute_or_2" (formula "32") (term "0"))
                                                      (rule "commute_or_2" (formula "32") (term "0,1,0"))
                                                      (rule "commute_or" (formula "32") (term "1,1,0"))
                                                      (rule "commute_or" (formula "32") (term "0,0,1,0"))
                                                      (rule "commute_or_2" (formula "32") (term "0,1,1,0"))
                                                      (rule "cut_direct" (formula "8") (term "0,1,1,0"))
                                                      (branch "CUT: self.electionID.length ≥ 1 TRUE"
                                                         (builtin "One Step Simplification" (formula "9"))
                                                         (rule "inEqSimp_subsumption1" (formula "23") (ifseqformula "8"))
                                                         (rule "leq_literals" (formula "23") (term "0"))
                                                         (builtin "One Step Simplification" (formula "23"))
                                                         (rule "true_left" (formula "23"))
                                                         (rule "ifthenelse_split" (formula "31") (term "0"))
                                                         (branch "msg.length ≥ 1 TRUE"
                                                            (rule "eqSymm" (formula "32"))
                                                            (rule "applyEq" (formula "30") (term "0") (ifseqformula "32"))
                                                            (rule "applyEq" (formula "32") (term "1,1,0,1,0") (ifseqformula "31"))
                                                            (rule "applyEq" (formula "32") (term "1,1,1,1,1,1,0") (ifseqformula "31"))
                                                            (rule "applyEq" (formula "32") (term "1,1,0,0") (ifseqformula "31"))
                                                            (rule "commute_or" (formula "32") (term "0,0,1,1,0"))
                                                            (rule "cnf_rightDist" (formula "32") (term "1,1,0"))
                                                            (rule "commute_or_2" (formula "32") (term "0,1,1,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "32") (term "0,0,1,1,0"))
                                                            (rule "add_zero_right" (formula "32") (term "1,1,0,0,1,1,0"))
                                                            (rule "qeq_literals" (formula "32") (term "1,0,0,1,1,0"))
                                                            (builtin "One Step Simplification" (formula "32"))
                                                            (rule "shift_paren_or" (formula "32") (term "1,1,0"))
                                                            (rule "commute_or" (formula "32") (term "0,1,1,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "32") (term "1,1,0"))
                                                            (rule "inEqSimp_homoInEq1" (formula "32") (term "1,1,1,0"))
                                                            (rule "polySimp_pullOutFactor1" (formula "32") (term "0,1,1,1,0"))
                                                            (rule "add_literals" (formula "32") (term "1,0,1,1,1,0"))
                                                            (rule "times_zero_1" (formula "32") (term "0,1,1,1,0"))
                                                            (rule "leq_literals" (formula "32") (term "1,1,1,0"))
                                                            (builtin "One Step Simplification" (formula "32"))
                                                            (rule "shift_paren_or" (formula "32") (term "0"))
                                                            (rule "commute_or_2" (formula "32") (term "0,0"))
                                                            (builtin "One Step Simplification" (formula "32"))
                                                            (rule "shift_paren_or" (formula "32") (term "0,0"))
                                                            (rule "commute_or" (formula "32") (term "0,0,0"))
                                                            (builtin "One Step Simplification" (formula "32"))
                                                            (rule "ifthenelse_to_or_right" (formula "9") (term "0,0,0"))
                                                            (builtin "One Step Simplification" (formula "9"))
                                                            (rule "nnf_notAnd" (formula "9") (term "0,0,0,0,0"))
                                                            (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,0,0,0"))
                                                            (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,0,0,0"))
                                                            (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,0,0,0"))
                                                            (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,0,0,0"))
                                                            (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,0,0,0"))
                                                            (rule "add_zero_left" (formula "9") (term "0,0,1,0,0,0,0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,0,0,0"))
                                                            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,0,0"))
                                                            (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,0,0"))
                                                            (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,0,0,0"))
                                                            (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0,0,0,0"))
                                                            (rule "add_zero_right" (formula "9") (term "0,0,0,0,0,0,0,0"))
                                                            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,0,0,0"))
                                                            (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0,0"))
                                                            (rule "nnf_notAnd" (formula "9") (term "0,1,1,0,0,0"))
                                                            (rule "inEqSimp_notGeq" (formula "9") (term "0,0,1,1,0,0,0"))
                                                            (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,1,1,0,0,0"))
                                                            (rule "add_zero_right" (formula "9") (term "0,0,0,0,1,1,0,0,0"))
                                                            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,1,1,0,0,0"))
                                                            (rule "mul_literals" (formula "9") (term "1,0,0,1,1,0,0,0"))
                                                            (rule "inEqSimp_notLeq" (formula "9") (term "1,0,1,1,0,0,0"))
                                                            (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,1,1,0,0,0"))
                                                            (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                            (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,1,1,0,0,0"))
                                                            (rule "add_literals" (formula "9") (term "0,0,0,1,0,1,1,0,0,0"))
                                                            (rule "add_zero_left" (formula "9") (term "0,0,1,0,1,1,0,0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,1,1,0,0,0"))
                                                            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,1,1,0,0,0"))
                                                            (rule "polySimp_elimOne" (formula "9") (term "1,1,0,1,1,0,0,0"))
                                                            (rule "commute_or" (formula "9") (term "0,0"))
                                                            (rule "commute_or_2" (formula "9") (term "0"))
                                                            (rule "commute_or" (formula "9") (term "1,1,0"))
                                                            (rule "commute_or_2" (formula "9") (term "0,1,0"))
                                                            (rule "commute_or_2" (formula "9") (term "0,1,1,0"))
                                                            (rule "commute_or" (formula "9") (term "0,0,1,0"))
                                                            (rule "commute_or" (formula "9") (term "0,0,1,1,0"))
                                                            (rule "ifthenelse_split" (formula "1") (term "0"))
                                                            (branch " ¬self.chosen[i_9] = null ∧ ¬self.chosen[i_9].<created> = TRUE TRUE"
                                                               (rule "andLeft" (formula "1"))
                                                               (rule "notLeft" (formula "2"))
                                                               (rule "notLeft" (formula "1"))
                                                               (rule "referencedObjectIsCreatedRight" (formula "44") (ifseqformula "43"))
                                                               (rule "close" (formula "44") (ifseqformula "13"))
                                                            )
                                                            (branch " ¬self.chosen[i_9] = null ∧ ¬self.chosen[i_9].<created> = TRUE FALSE"
                                                               (rule "close" (formula "53") (ifseqformula "1"))
                                                            )
                                                         )
                                                         (branch "msg.length ≥ 1 FALSE"
                                                            (rule "eqSymm" (formula "31"))
                                                            (rule "inEqSimp_geqRight" (formula "43"))
                                                            (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0"))
                                                            (rule "applyEq" (formula "33") (term "1,1,0,1,0") (ifseqformula "32"))
                                                            (rule "applyEq" (formula "33") (term "1,1,0,0") (ifseqformula "32"))
                                                            (rule "applyEq" (formula "33") (term "1,1,1,1,1,1,0") (ifseqformula "32"))
                                                            (rule "add_literals" (formula "33") (term "1,1,1,1,1,0"))
                                                            (rule "applyEq" (formula "31") (term "0") (ifseqformula "32"))
                                                            (rule "qeq_literals" (formula "31"))
                                                            (rule "closeFalse" (formula "31"))
                                                         )
                                                      )
                                                      (branch "CUT: self.electionID.length ≥ 1 FALSE"
                                                         (builtin "One Step Simplification" (formula "8"))
                                                         (rule "inEqSimp_geqRight" (formula "43"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "inEqSimp_antiSymm" (formula "23") (ifseqformula "1"))
                                                         (rule "applyEq" (formula "24") (term "0") (ifseqformula "23"))
                                                         (rule "qeq_literals" (formula "24"))
                                                         (rule "true_left" (formula "24"))
                                                         (rule "applyEq" (formula "58") (term "1,0,0,0,0,0") (ifseqformula "23"))
                                                         (rule "seqDef_lower_equals_upper" (formula "58") (term "0,0,0,0,0"))
                                                         (rule "applyEq" (formula "1") (term "0") (ifseqformula "23"))
                                                         (rule "leq_literals" (formula "1"))
                                                         (rule "true_left" (formula "1"))
                                                         (rule "applyEq" (formula "57") (term "1,0,0,0,0,1,0,1") (ifseqformula "22"))
                                                         (rule "seqDef_lower_equals_upper" (formula "57") (term "0,0,0,0,1,0,1"))
                                                         (rule "applyEq" (formula "8") (term "1,1,1,0,0,0,0,0") (ifseqformula "22"))
                                                         (rule "add_literals" (formula "8") (term "1,1,0,0,0,0,0"))
                                                         (rule "eqSymm" (formula "8") (term "0,0,0"))
                                                         (rule "applyEq" (formula "26") (term "1,0,1,0,0") (ifseqformula "22"))
                                                         (rule "seqDef_lower_equals_upper" (formula "26") (term "0,1,0,0"))
                                                         (rule "applyEq" (formula "57") (term "1,0,0,0,0,1,0,0,1") (ifseqformula "22"))
                                                         (rule "seqDef_lower_equals_upper" (formula "57") (term "0,0,0,0,1,0,0,1"))
                                                         (rule "applyEq" (formula "8") (term "1,1,1,0,0,0,0,0") (ifseqformula "22"))
                                                         (rule "add_literals" (formula "8") (term "1,1,0,0,0,0,0"))
                                                         (rule "eqSymm" (formula "8") (term "0,0,0"))
                                                         (rule "applyEq" (formula "57") (term "1,0,0,0,1,1,0,1") (ifseqformula "22"))
                                                         (rule "seqDef_lower_equals_upper" (formula "57") (term "0,0,0,1,1,0,1"))
                                                         (rule "inEqSimp_or_tautInEq1" (formula "8") (term "0"))
                                                         (rule "add_zero_right" (formula "8") (term "1,1,0"))
                                                         (rule "qeq_literals" (formula "8") (term "1,0"))
                                                         (builtin "One Step Simplification" (formula "8"))
                                                         (rule "true_left" (formula "8"))
                                                         (rule "ifthenelse_split" (formula "30") (term "0"))
                                                         (branch "msg.length ≥ 1 TRUE"
                                                            (rule "eqSymm" (formula "31"))
                                                            (rule "applyEq" (formula "32") (term "1,1,0,0") (ifseqformula "31"))
                                                            (rule "applyEq" (formula "29") (term "0") (ifseqformula "31"))
                                                            (rule "applyEq" (formula "31") (term "1,1,0,1,0") (ifseqformula "30"))
                                                            (rule "applyEq" (formula "31") (term "1,1,1,1,1,1,0") (ifseqformula "30"))
                                                            (rule "commute_or" (formula "31") (term "0,0,1,1,0"))
                                                            (rule "cnf_rightDist" (formula "31") (term "1,1,0"))
                                                            (rule "commute_or_2" (formula "31") (term "0,1,1,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "31") (term "0,0,1,1,0"))
                                                            (rule "add_zero_right" (formula "31") (term "1,1,0,0,1,1,0"))
                                                            (rule "qeq_literals" (formula "31") (term "1,0,0,1,1,0"))
                                                            (builtin "One Step Simplification" (formula "31"))
                                                            (rule "shift_paren_or" (formula "31") (term "1,1,0"))
                                                            (rule "commute_or" (formula "31") (term "0,1,1,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "31") (term "1,1,0"))
                                                            (rule "inEqSimp_homoInEq1" (formula "31") (term "1,1,1,0"))
                                                            (rule "polySimp_pullOutFactor1" (formula "31") (term "0,1,1,1,0"))
                                                            (rule "add_literals" (formula "31") (term "1,0,1,1,1,0"))
                                                            (rule "times_zero_1" (formula "31") (term "0,1,1,1,0"))
                                                            (rule "leq_literals" (formula "31") (term "1,1,1,0"))
                                                            (builtin "One Step Simplification" (formula "31"))
                                                            (rule "shift_paren_or" (formula "31") (term "0"))
                                                            (rule "commute_or_2" (formula "31") (term "0,0"))
                                                            (builtin "One Step Simplification" (formula "31"))
                                                            (rule "shift_paren_or" (formula "31") (term "0,0"))
                                                            (rule "commute_or" (formula "31") (term "0,0,0"))
                                                            (builtin "One Step Simplification" (formula "31"))
                                                            (rule "ifthenelse_split" (formula "1") (term "0"))
                                                            (branch " ¬self.chosen[i_9] = null ∧ ¬self.chosen[i_9].<created> = TRUE TRUE"
                                                               (rule "andLeft" (formula "1"))
                                                               (rule "notLeft" (formula "2"))
                                                               (rule "notLeft" (formula "1"))
                                                               (rule "referencedObjectIsCreatedRight" (formula "43") (ifseqformula "42"))
                                                               (rule "close" (formula "43") (ifseqformula "11"))
                                                            )
                                                            (branch " ¬self.chosen[i_9] = null ∧ ¬self.chosen[i_9].<created> = TRUE FALSE"
                                                               (rule "close" (formula "52") (ifseqformula "1"))
                                                            )
                                                         )
                                                         (branch "msg.length ≥ 1 FALSE"
                                                            (rule "eqSymm" (formula "30"))
                                                            (rule "inEqSimp_geqRight" (formula "42"))
                                                            (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0"))
                                                            (rule "applyEq" (formula "32") (term "1,1,0,0") (ifseqformula "31"))
                                                            (rule "applyEq" (formula "32") (term "1,1,1,1,1,1,0") (ifseqformula "31"))
                                                            (rule "add_zero_right" (formula "32") (term "1,1,1,1,1,0"))
                                                            (rule "applyEq" (formula "30") (term "0") (ifseqformula "31"))
                                                            (rule "qeq_literals" (formula "30"))
                                                            (rule "closeFalse" (formula "30"))
                                                         )
                                                      )
                                                   )
                                                   (branch "self.chosen.<created> = TRUE FALSE"
                                                      (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "43"))
                                                      (rule "close" (formula "37") (ifseqformula "10"))
                                                   )
                                                )
                                                (branch "self.encrypted.<created> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "42"))
                                                   (rule "close" (formula "37") (ifseqformula "10"))
                                                )
                                             )
                                             (branch "self.concatenated.length ≥ 1 FALSE"
                                                (rule "eqSymm" (formula "24"))
                                                (builtin "One Step Simplification" (formula "24"))
                                                (rule "inEqSimp_geqRight" (formula "35"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "inEqSimp_notGeq" (formula "25") (term "0"))
                                                (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                                (rule "add_literals" (formula "25") (term "0,0,0"))
                                                (rule "add_zero_left" (formula "25") (term "0,0"))
                                                (rule "arrayLengthNotNegative" (formula "50") (term "0,0,1,0"))
                                                (rule "replace_known_left" (formula "51") (term "0,1,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "51"))
                                                (rule "commute_or_2" (formula "16") (term "0"))
                                                (rule "commute_or_2" (formula "18") (term "0"))
                                                (rule "commute_or_2" (formula "17") (term "0"))
                                                (rule "commute_or_2" (formula "7") (term "0"))
                                                (rule "ifthenelse_split" (formula "8") (term "0"))
                                                (branch "self.encrypted.<created> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "52") (term "0,1,0") (ifseqformula "9"))
                                                   (rule "applyEqReverse" (formula "1") (term "0,0") (ifseqformula "9"))
                                                   (rule "hideAuxiliaryEq" (formula "9"))
                                                   (rule "ifthenelse_split" (formula "6") (term "0"))
                                                   (branch "self.chosen.<created> = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "52") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "7"))
                                                      (rule "applyEqReverse" (formula "47") (term "0,0,0,1,1,0,0,1") (ifseqformula "7"))
                                                      (rule "applyEqReverse" (formula "52") (term "1,2,1,0,0,0,0") (ifseqformula "7"))
                                                      (rule "applyEqReverse" (formula "52") (term "1,2,1,0,0,0,1,0,0,1") (ifseqformula "7"))
                                                      (rule "applyEqReverse" (formula "52") (term "0,1,1,0,0,0,0") (ifseqformula "7"))
                                                      (rule "applyEqReverse" (formula "47") (term "0,1,0,0") (ifseqformula "7"))
                                                      (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "4")))
                                                      (rule "applyEqReverse" (formula "52") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "7"))
                                                      (rule "applyEqReverse" (formula "52") (term "0,1,1,0,0,0,1,0,0,1") (ifseqformula "7"))
                                                      (rule "applyEqReverse" (formula "3") (term "0,0") (ifseqformula "7"))
                                                      (rule "applyEqReverse" (formula "47") (term "1,1,1,1,0,1") (ifseqformula "7"))
                                                      (rule "applyEqReverse" (formula "47") (term "0,0,0,0") (ifseqformula "7"))
                                                      (rule "applyEqReverse" (formula "47") (term "0,1,1,0,0,1") (ifseqformula "7"))
                                                      (rule "applyEqReverse" (formula "47") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "7"))
                                                      (rule "hideAuxiliaryEq" (formula "7"))
                                                      (rule "eqSymm" (formula "46") (term "1,0"))
                                                      (rule "eqSymm" (formula "46") (term "1,0,1"))
                                                      (rule "replace_known_left" (formula "46") (term "0,0") (ifseqformula "4"))
                                                      (builtin "One Step Simplification" (formula "46"))
                                                      (rule "allRight" (formula "46") (inst "sk=iv_52"))
                                                      (rule "orRight" (formula "46"))
                                                      (rule "orRight" (formula "46"))
                                                      (rule "inEqSimp_geqRight" (formula "47"))
                                                      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                      (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                      (rule "inEqSimp_leqRight" (formula "47"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "replace_known_left" (formula "48") (term "0,0,1") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "1")))
                                                      (rule "inEqSimp_homoInEq0" (formula "48") (term "0,0"))
                                                      (rule "eqSymm" (formula "48"))
                                                      (rule "polySimp_addComm1" (formula "48") (term "0,0,1"))
                                                      (rule "inEqSimp_homoInEq0" (formula "48") (term "0,0"))
                                                      (rule "polySimp_addComm1" (formula "48") (term "0,0,0"))
                                                      (rule "eqSymm" (formula "48"))
                                                      (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                                      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "48") (term "0,0"))
                                                      (rule "eqSymm" (formula "48"))
                                                      (rule "polySimp_mulComm0" (formula "48") (term "1,0,1"))
                                                      (rule "polySimp_rightDist" (formula "48") (term "1,0,1"))
                                                      (rule "polySimp_mulLiterals" (formula "48") (term "1,1,0,1"))
                                                      (rule "mul_literals" (formula "48") (term "0,1,0,1"))
                                                      (rule "polySimp_elimOne" (formula "48") (term "1,1,0,1"))
                                                      (rule "replace_known_left" (formula "48") (term "0,1") (ifseqformula "2"))
                                                      (builtin "One Step Simplification" (formula "48"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "48") (term "0,0"))
                                                      (rule "polySimp_mulComm0" (formula "48") (term "1,0,0"))
                                                      (rule "polySimp_rightDist" (formula "48") (term "1,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "48") (term "1,1,0,0"))
                                                      (rule "mul_literals" (formula "48") (term "0,1,0,0"))
                                                      (rule "polySimp_elimOne" (formula "48") (term "1,1,0,0"))
                                                      (rule "replace_known_left" (formula "48") (term "0,0") (ifseqformula "2"))
                                                      (builtin "One Step Simplification" (formula "48"))
                                                      (rule "eqSymm" (formula "48"))
                                                      (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "6"))
                                                      (rule "leq_literals" (formula "5") (term "0"))
                                                      (builtin "One Step Simplification" (formula "5"))
                                                      (rule "true_left" (formula "5"))
                                                      (rule "pullOutSelect" (formula "47") (term "0") (inst "selectSK=arr_396"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "eqSymm" (formula "48"))
                                                      (rule "commute_or" (formula "38") (term "0,0"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "1,0") (ifseqformula "13"))
                                                      (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "46"))
                                                      (builtin "One Step Simplification" (formula "21"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "1,1") (ifseqformula "13"))
                                                      (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "10"))
                                                      (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "45")))
                                                      (rule "true_left" (formula "22"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "26") (term "0,1") (ifseqformula "13"))
                                                      (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "8"))
                                                      (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "46")))
                                                      (rule "true_left" (formula "26"))
                                                      (rule "commute_or_2" (formula "38") (term "0"))
                                                      (rule "commute_or" (formula "30") (term "0,0"))
                                                      (rule "commute_or_2" (formula "37") (term "0"))
                                                      (rule "commute_or_2" (formula "36") (term "0"))
                                                      (rule "commute_or" (formula "18") (term "0,0"))
                                                      (rule "commute_or" (formula "20") (term "0,0"))
                                                      (rule "commute_or" (formula "19") (term "0,0"))
                                                      (rule "commute_or" (formula "9") (term "0,0"))
                                                      (rule "lenNonNegative" (formula "25") (term "0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "25"))
                                                      (rule "applyEq" (formula "25") (term "0") (ifseqformula "26"))
                                                      (rule "qeq_literals" (formula "25"))
                                                      (rule "true_left" (formula "25"))
                                                      (rule "commute_or" (formula "38") (term "0,0"))
                                                      (rule "commute_or" (formula "37") (term "0,0"))
                                                      (rule "commute_or" (formula "36") (term "0,0"))
                                                      (rule "cut_direct" (formula "30") (term "0,1,1,0"))
                                                      (branch "CUT: msg.length ≥ 1 TRUE"
                                                         (builtin "One Step Simplification" (formula "31"))
                                                         (rule "inEqSimp_contradEq7" (formula "29") (term "1") (ifseqformula "30"))
                                                         (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "29") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "29") (term "0,1"))
                                                         (builtin "One Step Simplification" (formula "29"))
                                                         (rule "inEqSimp_contradInEq1" (formula "29") (ifseqformula "30"))
                                                         (rule "qeq_literals" (formula "29") (term "0"))
                                                         (builtin "One Step Simplification" (formula "29"))
                                                         (rule "closeFalse" (formula "29"))
                                                      )
                                                      (branch "CUT: msg.length ≥ 1 FALSE"
                                                         (builtin "One Step Simplification" (formula "30"))
                                                         (rule "inEqSimp_geqRight" (formula "40"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "1"))
                                                         (builtin "One Step Simplification" (formula "30"))
                                                         (rule "true_left" (formula "30"))
                                                         (rule "inEqSimp_or_tautInEq1" (formula "30") (term "0"))
                                                         (rule "add_zero_right" (formula "30") (term "1,1,0"))
                                                         (rule "qeq_literals" (formula "30") (term "1,0"))
                                                         (builtin "One Step Simplification" (formula "30"))
                                                         (rule "true_left" (formula "30"))
                                                         (rule "arrayLengthNotNegative" (formula "8") (term "0"))
                                                         (rule "inEqSimp_antiSymm" (formula "8") (ifseqformula "9"))
                                                         (rule "applyEq" (formula "9") (term "0") (ifseqformula "8"))
                                                         (rule "qeq_literals" (formula "9"))
                                                         (rule "true_left" (formula "9"))
                                                         (rule "applyEq" (formula "9") (term "0") (ifseqformula "8"))
                                                         (rule "leq_literals" (formula "9"))
                                                         (rule "true_left" (formula "9"))
                                                         (rule "arrayLengthIsAShort" (formula "38") (term "1,1,0"))
                                                         (builtin "One Step Simplification" (formula "38"))
                                                         (rule "true_left" (formula "38"))
                                                         (rule "arrayLengthNotNegative" (formula "38") (term "1,1,0"))
                                                         (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                         (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "8"))
                                                         (rule "leq_literals" (formula "7") (term "0"))
                                                         (builtin "One Step Simplification" (formula "7"))
                                                         (rule "true_left" (formula "7"))
                                                         (rule "arrayLengthIsAShort" (formula "7") (term "0"))
                                                         (builtin "One Step Simplification" (formula "7"))
                                                         (rule "true_left" (formula "7"))
                                                         (rule "onlyCreatedObjectsAreReferenced" (formula "26") (term "0,1,0,1,0,0") (ifseqformula "14"))
                                                         (rule "replace_known_right" (formula "26") (term "0") (ifseqformula "44"))
                                                         (builtin "One Step Simplification" (formula "26"))
                                                         (rule "onlyCreatedObjectsAreReferenced" (formula "27") (term "1,2,0,0,0") (ifseqformula "14"))
                                                         (rule "cut_direct" (formula "10") (term "0,1,1,0"))
                                                         (branch "CUT: self.electionID.length ≥ 1 TRUE"
                                                            (builtin "One Step Simplification" (formula "11"))
                                                            (rule "inEqSimp_subsumption1" (formula "25") (ifseqformula "10"))
                                                            (rule "leq_literals" (formula "25") (term "0"))
                                                            (builtin "One Step Simplification" (formula "25"))
                                                            (rule "true_left" (formula "25"))
                                                            (rule "ifthenelse_to_or_right" (formula "11") (term "0,0,0"))
                                                            (builtin "One Step Simplification" (formula "11"))
                                                            (rule "nnf_notAnd" (formula "11") (term "0,0,0,0,0"))
                                                            (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,0,0,0"))
                                                            (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,0,0,0"))
                                                            (rule "add_zero_right" (formula "11") (term "0,0,0,0,0,0,0,0"))
                                                            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,0,0"))
                                                            (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0,0"))
                                                            (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,0,0,0"))
                                                            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0,0,0"))
                                                            (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,0,0,0"))
                                                            (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0,0,0"))
                                                            (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,0,0,0"))
                                                            (rule "add_zero_left" (formula "11") (term "0,0,1,0,0,0,0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,0,0,0"))
                                                            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,0,0"))
                                                            (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,0,0"))
                                                            (rule "nnf_notAnd" (formula "11") (term "0,1,1,0,0,0"))
                                                            (rule "inEqSimp_notLeq" (formula "11") (term "1,0,1,1,0,0,0"))
                                                            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,1,1,0,0,0"))
                                                            (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                            (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,1,1,0,0,0"))
                                                            (rule "add_literals" (formula "11") (term "0,0,0,1,0,1,1,0,0,0"))
                                                            (rule "add_zero_left" (formula "11") (term "0,0,1,0,1,1,0,0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,1,1,0,0,0"))
                                                            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,1,1,0,0,0"))
                                                            (rule "polySimp_elimOne" (formula "11") (term "1,1,0,1,1,0,0,0"))
                                                            (rule "inEqSimp_notGeq" (formula "11") (term "0,0,1,1,0,0,0"))
                                                            (rule "mul_literals" (formula "11") (term "1,0,0,0,0,1,1,0,0,0"))
                                                            (rule "add_zero_right" (formula "11") (term "0,0,0,0,1,1,0,0,0"))
                                                            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,1,1,0,0,0"))
                                                            (rule "mul_literals" (formula "11") (term "1,0,0,1,1,0,0,0"))
                                                            (rule "commute_or" (formula "11") (term "0,0"))
                                                            (rule "commute_or_2" (formula "11") (term "0"))
                                                            (rule "commute_or" (formula "11") (term "1,1,0"))
                                                            (rule "commute_or_2" (formula "11") (term "0,1,0"))
                                                            (rule "commute_or_2" (formula "11") (term "0,1,1,0"))
                                                            (rule "commute_or" (formula "11") (term "0,0,1,0"))
                                                            (rule "commute_or" (formula "11") (term "0,0,1,1,0"))
                                                            (rule "cnf_rightDist" (formula "11") (term "1,1,0"))
                                                            (rule "commute_or_2" (formula "11") (term "0,1,1,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "11") (term "0,0,1,1,0"))
                                                            (rule "add_zero_right" (formula "11") (term "1,1,0,0,1,1,0"))
                                                            (rule "qeq_literals" (formula "11") (term "1,0,0,1,1,0"))
                                                            (builtin "One Step Simplification" (formula "11"))
                                                            (rule "shift_paren_or" (formula "11") (term "1,1,0"))
                                                            (rule "commute_or" (formula "11") (term "0,1,1,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "11") (term "1,1,0"))
                                                            (rule "inEqSimp_homoInEq1" (formula "11") (term "1,1,1,0"))
                                                            (rule "polySimp_pullOutFactor1" (formula "11") (term "0,1,1,1,0"))
                                                            (rule "add_literals" (formula "11") (term "1,0,1,1,1,0"))
                                                            (rule "times_zero_1" (formula "11") (term "0,1,1,1,0"))
                                                            (rule "leq_literals" (formula "11") (term "1,1,1,0"))
                                                            (builtin "One Step Simplification" (formula "11"))
                                                            (rule "shift_paren_or" (formula "11") (term "0"))
                                                            (rule "commute_or_2" (formula "11") (term "0,0"))
                                                            (builtin "One Step Simplification" (formula "11"))
                                                            (rule "shift_paren_or" (formula "11") (term "0,0"))
                                                            (rule "commute_or" (formula "11") (term "0,0,0"))
                                                            (builtin "One Step Simplification" (formula "11"))
                                                            (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                                            (rule "inEqSimp_antiSymm" (formula "6") (ifseqformula "7"))
                                                            (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
                                                            (rule "qeq_literals" (formula "7"))
                                                            (rule "true_left" (formula "7"))
                                                            (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
                                                            (rule "leq_literals" (formula "7"))
                                                            (rule "true_left" (formula "7"))
                                                            (rule "ifthenelse_split" (formula "2") (term "0"))
                                                            (branch " ¬self.chosen[i_9] = null ∧ ¬self.chosen[i_9].<created> = TRUE TRUE"
                                                               (rule "andLeft" (formula "2"))
                                                               (rule "notLeft" (formula "3"))
                                                               (rule "notLeft" (formula "2"))
                                                               (rule "referencedObjectIsCreatedRight" (formula "43") (ifseqformula "42"))
                                                               (rule "close" (formula "43") (ifseqformula "15"))
                                                            )
                                                            (branch " ¬self.chosen[i_9] = null ∧ ¬self.chosen[i_9].<created> = TRUE FALSE"
                                                               (rule "close" (formula "52") (ifseqformula "2"))
                                                            )
                                                         )
                                                         (branch "CUT: self.electionID.length ≥ 1 FALSE"
                                                            (builtin "One Step Simplification" (formula "10"))
                                                            (rule "inEqSimp_geqRight" (formula "42"))
                                                            (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0"))
                                                            (rule "inEqSimp_antiSymm" (formula "25") (ifseqformula "1"))
                                                            (rule "applyEq" (formula "26") (term "0") (ifseqformula "25"))
                                                            (rule "qeq_literals" (formula "26"))
                                                            (rule "true_left" (formula "26"))
                                                            (rule "applyEq" (formula "11") (term "1,1,1,0,0,0,0,0") (ifseqformula "25"))
                                                            (rule "add_literals" (formula "11") (term "1,1,0,0,0,0,0"))
                                                            (rule "eqSymm" (formula "11") (term "0,0,0"))
                                                            (rule "applyEq" (formula "29") (term "1,0,1,0,0") (ifseqformula "25"))
                                                            (rule "seqDef_lower_equals_upper" (formula "29") (term "0,1,0,0"))
                                                            (rule "applyEq" (formula "57") (term "1,0,0,0,0,1,0,1") (ifseqformula "25"))
                                                            (rule "seqDef_lower_equals_upper" (formula "57") (term "0,0,0,0,1,0,1"))
                                                            (rule "applyEq" (formula "1") (term "0") (ifseqformula "25"))
                                                            (rule "leq_literals" (formula "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "applyEq" (formula "56") (term "1,0,0,0,0,1,0,0,1") (ifseqformula "24"))
                                                            (rule "seqDef_lower_equals_upper" (formula "56") (term "0,0,0,0,1,0,0,1"))
                                                            (rule "applyEq" (formula "56") (term "1,0,0,0,0,0") (ifseqformula "24"))
                                                            (rule "seqDef_lower_equals_upper" (formula "56") (term "0,0,0,0,0"))
                                                            (rule "applyEq" (formula "10") (term "1,1,1,0,0,0,0,0") (ifseqformula "24"))
                                                            (rule "add_zero_right" (formula "10") (term "1,1,0,0,0,0,0"))
                                                            (rule "eqSymm" (formula "10") (term "0,0,0"))
                                                            (rule "applyEq" (formula "56") (term "1,0,0,0,1,1,0,1") (ifseqformula "24"))
                                                            (rule "seqDef_lower_equals_upper" (formula "56") (term "0,0,0,1,1,0,1"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "10") (term "0"))
                                                            (rule "add_zero_right" (formula "10") (term "1,1,0"))
                                                            (rule "qeq_literals" (formula "10") (term "1,0"))
                                                            (builtin "One Step Simplification" (formula "10"))
                                                            (rule "true_left" (formula "10"))
                                                            (rule "arrayLengthIsAShort" (formula "6") (term "0"))
                                                            (builtin "One Step Simplification" (formula "6"))
                                                            (rule "true_left" (formula "6"))
                                                            (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                                            (rule "inEqSimp_antiSymm" (formula "6") (ifseqformula "7"))
                                                            (rule "applyEq" (formula "8") (term "0") (ifseqformula "6"))
                                                            (rule "leq_literals" (formula "8"))
                                                            (rule "true_left" (formula "8"))
                                                            (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
                                                            (rule "qeq_literals" (formula "7"))
                                                            (rule "true_left" (formula "7"))
                                                            (rule "ifthenelse_split" (formula "2") (term "0"))
                                                            (branch " ¬self.chosen[i_9] = null ∧ ¬self.chosen[i_9].<created> = TRUE TRUE"
                                                               (rule "andLeft" (formula "2"))
                                                               (rule "notLeft" (formula "3"))
                                                               (rule "notLeft" (formula "2"))
                                                               (rule "referencedObjectIsCreatedRight" (formula "42") (ifseqformula "41"))
                                                               (rule "close" (formula "42") (ifseqformula "13"))
                                                            )
                                                            (branch " ¬self.chosen[i_9] = null ∧ ¬self.chosen[i_9].<created> = TRUE FALSE"
                                                               (rule "close" (formula "51") (ifseqformula "2"))
                                                            )
                                                         )
                                                      )
                                                   )
                                                   (branch "self.chosen.<created> = TRUE FALSE"
                                                      (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "43"))
                                                      (rule "close" (formula "37") (ifseqformula "11"))
                                                   )
                                                )
                                                (branch "self.encrypted.<created> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "42"))
                                                   (rule "close" (formula "37") (ifseqformula "11"))
                                                )
                                             )
                                          )
                                          (branch "self.chosen[i_9].length ≥ 1 FALSE"
                                             (rule "eqSymm" (formula "44") (term "0"))
                                             (builtin "One Step Simplification" (formula "44"))
                                             (rule "inEqSimp_geqRight" (formula "43"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_notGeq" (formula "44") (term "0,0"))
                                             (rule "mul_literals" (formula "44") (term "1,0,0,0,0"))
                                             (rule "add_literals" (formula "44") (term "0,0,0,0"))
                                             (rule "add_zero_left" (formula "44") (term "0,0,0"))
                                             (rule "arrayLengthIsAShort" (formula "17") (term "1,0,0,0"))
                                             (builtin "One Step Simplification" (formula "17"))
                                             (rule "true_left" (formula "17"))
                                             (rule "arrayLengthIsAShort" (formula "17") (term "1,0,1,0,0"))
                                             (builtin "One Step Simplification" (formula "17"))
                                             (rule "true_left" (formula "17"))
                                             (rule "arrayLengthNotNegative" (formula "17") (term "1,0,0,0"))
                                             (rule "arrayLengthNotNegative" (formula "18") (term "1,0,1,0,0"))
                                             (rule "nnf_notAnd" (formula "27") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "27") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                                             (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                             (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                             (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                             (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                             (rule "commute_or_2" (formula "24") (term "0"))
                                             (rule "nnf_notAnd" (formula "32") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "32") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "32") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "32") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
                                             (rule "mul_literals" (formula "32") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "31") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0"))
                                             (rule "mul_literals" (formula "31") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "31") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0"))
                                             (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "31") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "30") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "30") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "30") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
                                             (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                                             (rule "arrayLengthIsAShort" (formula "48") (term "1,1,0,0,0,0"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "arrayLengthNotNegative" (formula "48") (term "1,1,0,0,0,0"))
                                             (rule "ifthenelse_split" (formula "24") (term "0"))
                                             (branch "self.concatenated.length ≥ 1 TRUE"
                                                (rule "eqSymm" (formula "25"))
                                                (rule "applyEq" (formula "26") (term "1,1,0") (ifseqformula "25"))
                                                (rule "arrayLengthIsAShort" (formula "50") (term "0,0,1,0"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "true_left" (formula "1"))
                                                (rule "arrayLengthNotNegative" (formula "50") (term "0,0,1,0"))
                                                (rule "replace_known_left" (formula "51") (term "0,1,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "51"))
                                                (rule "commute_or_2" (formula "15") (term "0"))
                                                (rule "commute_or_2" (formula "17") (term "0"))
                                                (rule "commute_or_2" (formula "16") (term "0"))
                                                (rule "commute_or_2" (formula "6") (term "0"))
                                                (rule "ifthenelse_split" (formula "7") (term "0"))
                                                (branch "self.encrypted.<created> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "52") (term "0,1,0") (ifseqformula "8"))
                                                   (rule "applyEqReverse" (formula "1") (term "0,0") (ifseqformula "8"))
                                                   (rule "hideAuxiliaryEq" (formula "8"))
                                                   (rule "ifthenelse_split" (formula "5") (term "0"))
                                                   (branch "self.chosen.<created> = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "52") (term "1,2,1,0,0,0,1,0,0,1") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "47") (term "0,0,0,1,1,0,0,1") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "47") (term "0,1,1,1,0,0,1") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "47") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "52") (term "1,2,1,0,0,0,0") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "47") (term "1,1,1,1,0,1") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "52") (term "0,1,1,0,0,0,0") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "52") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "47") (term "0,0,1,0") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "47") (term "0,0,0,0") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "52") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "52") (term "0,1,1,0,0,0,1,0,0,1") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "6"))
                                                      (rule "hideAuxiliaryEq" (formula "6"))
                                                      (rule "eqSymm" (formula "46") (term "1,0,1"))
                                                      (rule "replace_known_left" (formula "46") (term "0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "46"))
                                                      (rule "allRight" (formula "46") (inst "sk=iv_51"))
                                                      (rule "orRight" (formula "46"))
                                                      (rule "orRight" (formula "46"))
                                                      (rule "inEqSimp_leqRight" (formula "46"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "replace_known_left" (formula "48") (term "0,0,0") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "1")))
                                                      (rule "inEqSimp_geqRight" (formula "47"))
                                                      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                      (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                      (rule "inEqSimp_homoInEq0" (formula "48") (term "0,0"))
                                                      (rule "eqSymm" (formula "48"))
                                                      (rule "polySimp_addComm1" (formula "48") (term "0,0,1"))
                                                      (rule "inEqSimp_homoInEq0" (formula "48") (term "0,0"))
                                                      (rule "polySimp_addComm1" (formula "48") (term "0,0,0"))
                                                      (rule "eqSymm" (formula "48"))
                                                      (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                                      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "48") (term "0,1"))
                                                      (rule "polySimp_mulComm0" (formula "48") (term "1,0,1"))
                                                      (rule "polySimp_rightDist" (formula "48") (term "1,0,1"))
                                                      (rule "mul_literals" (formula "48") (term "0,1,0,1"))
                                                      (rule "polySimp_mulLiterals" (formula "48") (term "1,1,0,1"))
                                                      (rule "polySimp_elimOne" (formula "48") (term "1,1,0,1"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "48") (term "0,0"))
                                                      (rule "polySimp_mulComm0" (formula "48") (term "1,0,0"))
                                                      (rule "polySimp_rightDist" (formula "48") (term "1,0,0"))
                                                      (rule "mul_literals" (formula "48") (term "0,1,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "48") (term "1,1,0,0"))
                                                      (rule "polySimp_elimOne" (formula "48") (term "1,1,0,0"))
                                                      (rule "inEqSimp_contradInEq0" (formula "1") (term "0,0") (ifseqformula "5"))
                                                      (rule "qeq_literals" (formula "1") (term "0,0,0"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "inEqSimp_homoInEq1" (formula "1"))
                                                      (rule "times_zero_2" (formula "1") (term "1,0"))
                                                      (rule "add_zero_right" (formula "1") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                      (rule "mul_literals" (formula "1") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
                                                      (rule "qeq_literals" (formula "1") (term "0"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "closeFalse" (formula "1"))
                                                   )
                                                   (branch "self.chosen.<created> = TRUE FALSE"
                                                      (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "43"))
                                                      (rule "close" (formula "37") (ifseqformula "10"))
                                                   )
                                                )
                                                (branch "self.encrypted.<created> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "42"))
                                                   (rule "close" (formula "37") (ifseqformula "10"))
                                                )
                                             )
                                             (branch "self.concatenated.length ≥ 1 FALSE"
                                                (rule "eqSymm" (formula "24"))
                                                (builtin "One Step Simplification" (formula "24"))
                                                (rule "inEqSimp_geqRight" (formula "35"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "inEqSimp_notGeq" (formula "25") (term "0"))
                                                (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                                (rule "add_literals" (formula "25") (term "0,0,0"))
                                                (rule "add_zero_left" (formula "25") (term "0,0"))
                                                (rule "arrayLengthIsAShort" (formula "50") (term "0,0,1,0"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "true_left" (formula "1"))
                                                (rule "arrayLengthNotNegative" (formula "50") (term "0,0,1,0"))
                                                (rule "replace_known_left" (formula "51") (term "0,1,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "51"))
                                                (rule "commute_or_2" (formula "16") (term "0"))
                                                (rule "commute_or_2" (formula "18") (term "0"))
                                                (rule "commute_or_2" (formula "17") (term "0"))
                                                (rule "commute_or_2" (formula "7") (term "0"))
                                                (rule "ifthenelse_split" (formula "8") (term "0"))
                                                (branch "self.encrypted.<created> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "1") (term "0,0") (ifseqformula "9"))
                                                   (rule "applyEqReverse" (formula "52") (term "0,1,0") (ifseqformula "9"))
                                                   (rule "hideAuxiliaryEq" (formula "9"))
                                                   (rule "ifthenelse_split" (formula "6") (term "0"))
                                                   (branch "self.chosen.<created> = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "52") (term "1,2,1,0,0,0,1,0,0,1") (ifseqformula "7"))
                                                      (rule "applyEqReverse" (formula "47") (term "0,0,0,0") (ifseqformula "7"))
                                                      (rule "applyEqReverse" (formula "3") (term "0,0") (ifseqformula "7"))
                                                      (rule "applyEqReverse" (formula "52") (term "0,1,1,0,0,0,0") (ifseqformula "7"))
                                                      (rule "applyEqReverse" (formula "47") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "7"))
                                                      (rule "applyEqReverse" (formula "52") (term "0,1,1,0,0,0,1,0,0,1") (ifseqformula "7"))
                                                      (rule "applyEqReverse" (formula "52") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "7"))
                                                      (rule "applyEqReverse" (formula "47") (term "0,0,0,1,1,0,0,1") (ifseqformula "7"))
                                                      (rule "applyEqReverse" (formula "47") (term "1,1,1,1,0,1") (ifseqformula "7"))
                                                      (rule "applyEqReverse" (formula "52") (term "1,2,1,0,0,0,0") (ifseqformula "7"))
                                                      (rule "applyEqReverse" (formula "47") (term "0,1,1,1,0,0,1") (ifseqformula "7"))
                                                      (rule "applyEqReverse" (formula "47") (term "0,0,1,0") (ifseqformula "7"))
                                                      (rule "applyEqReverse" (formula "52") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "7"))
                                                      (rule "hideAuxiliaryEq" (formula "7"))
                                                      (rule "eqSymm" (formula "46") (term "1,0,1"))
                                                      (rule "replace_known_left" (formula "46") (term "0,0") (ifseqformula "4"))
                                                      (builtin "One Step Simplification" (formula "46"))
                                                      (rule "allRight" (formula "46") (inst "sk=iv_50"))
                                                      (rule "orRight" (formula "46"))
                                                      (rule "orRight" (formula "46"))
                                                      (rule "inEqSimp_leqRight" (formula "46"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "replace_known_left" (formula "48") (term "0,0,1") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "1")))
                                                      (rule "inEqSimp_geqRight" (formula "47"))
                                                      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                      (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                      (rule "inEqSimp_homoInEq0" (formula "48") (term "0,0"))
                                                      (rule "eqSymm" (formula "48"))
                                                      (rule "polySimp_addComm1" (formula "48") (term "0,0,1"))
                                                      (rule "inEqSimp_homoInEq0" (formula "48") (term "0,0"))
                                                      (rule "polySimp_addComm1" (formula "48") (term "0,0,0"))
                                                      (rule "eqSymm" (formula "48"))
                                                      (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                                      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "48") (term "0,1"))
                                                      (rule "polySimp_mulComm0" (formula "48") (term "1,0,1"))
                                                      (rule "polySimp_rightDist" (formula "48") (term "1,0,1"))
                                                      (rule "polySimp_mulLiterals" (formula "48") (term "1,1,0,1"))
                                                      (rule "mul_literals" (formula "48") (term "0,1,0,1"))
                                                      (rule "polySimp_elimOne" (formula "48") (term "1,1,0,1"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "48") (term "0,0"))
                                                      (rule "polySimp_mulComm0" (formula "48") (term "1,0,0"))
                                                      (rule "polySimp_rightDist" (formula "48") (term "1,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "48") (term "1,1,0,0"))
                                                      (rule "mul_literals" (formula "48") (term "0,1,0,0"))
                                                      (rule "polySimp_elimOne" (formula "48") (term "1,1,0,0"))
                                                      (rule "inEqSimp_contradInEq0" (formula "1") (term "0,0") (ifseqformula "6"))
                                                      (rule "qeq_literals" (formula "1") (term "0,0,0"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "inEqSimp_homoInEq1" (formula "1"))
                                                      (rule "mul_literals" (formula "1") (term "1,0"))
                                                      (rule "add_zero_right" (formula "1") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                      (rule "mul_literals" (formula "1") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
                                                      (rule "qeq_literals" (formula "1") (term "0"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "closeFalse" (formula "1"))
                                                   )
                                                   (branch "self.chosen.<created> = TRUE FALSE"
                                                      (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "43"))
                                                      (rule "close" (formula "37") (ifseqformula "11"))
                                                   )
                                                )
                                                (branch "self.encrypted.<created> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "42"))
                                                   (rule "close" (formula "37") (ifseqformula "11"))
                                                )
                                             )
                                          )
                                       )
                                    )
                                 )
                                 (branch "CUT: array2seq(heapAfter_splidAndCheck, self.electionID@heapAfter_splidAndCheck) = array2seq(heap, self.electionID) FALSE"
                                    (rule "equalityToSeqGetAndSeqLenRight" (formula "24") (inst "iv=iv") (userinteraction))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1") (ifseqformula "18"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "eqSymm" (formula "16"))
                                    (rule "eqSymm" (formula "14"))
                                    (rule "eqSymm" (formula "12"))
                                    (rule "eqSymm" (formula "13"))
                                    (rule "eqSymm" (formula "30"))
                                    (rule "eqSymm" (formula "10"))
                                    (rule "eqSymm" (formula "15"))
                                    (rule "eqSymm" (formula "22"))
                                    (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "29"))
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "replace_known_right" (formula "21") (term "0,1") (ifseqformula "26"))
                                    (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "27")))
                                    (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "3"))
                                    (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "3") (term "0"))
                                    (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "2"))
                                    (rule "applyEq" (formula "13") (term "1,1,0") (ifseqformula "16"))
                                    (rule "applyEq" (formula "12") (term "0,0,0") (ifseqformula "15"))
                                    (rule "applyEq" (formula "30") (term "1") (ifseqformula "10"))
                                    (rule "applyEq" (formula "12") (term "1") (ifseqformula "16"))
                                    (rule "applyEq" (formula "12") (term "0,0,0") (ifseqformula "14"))
                                    (rule "applyEq" (formula "15") (term "1") (ifseqformula "14"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1"))
                                    (rule "mul_literals" (formula "25") (term "0,1,1,0,0,1"))
                                    (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                    (rule "polySimp_elimOne" (formula "3") (term "0"))
                                    (rule "nonNull" (formula "24") (inst "i=i"))
                                    (rule "greater_literals" (formula "24") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "27")))
                                    (rule "sub_literals" (formula "24") (term "2,1,0"))
                                    (builtin "One Step Simplification" (formula "24"))
                                    (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                                    (rule "array2seqDef" (formula "25") (term "0,1,1,0,1") (inst "u=u"))
                                    (rule "eqSymm" (formula "25") (term "1,0,1"))
                                    (rule "getOfSeqDef" (formula "25") (term "0,1,0,1"))
                                    (rule "castDel" (formula "25") (term "2,0,1,0,1"))
                                    (rule "castDel" (formula "25") (term "1,0,1,0,1"))
                                    (rule "add_zero_right" (formula "25") (term "0,2,1,0,1,0,1"))
                                    (rule "polySimp_elimSub" (formula "25") (term "1,1,0,0,1,0,1"))
                                    (rule "times_zero_2" (formula "25") (term "1,1,1,0,0,1,0,1"))
                                    (rule "add_zero_right" (formula "25") (term "1,1,0,0,1,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,0,1"))
                                    (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,1,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,1,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,0,1"))
                                    (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1,0,1"))
                                    (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1,0,1"))
                                    (rule "mul_literals" (formula "25") (term "0,1,1,0,0,1,0,1"))
                                    (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1,0,1"))
                                    (rule "array2seqDef" (formula "1") (term "1") (inst "u=u"))
                                    (rule "eqSymm" (formula "1"))
                                    (rule "array2seqDef" (formula "25") (term "0,0,0") (inst "u=u"))
                                    (rule "lenOfSeqDef" (formula "25") (term "0,0"))
                                    (rule "polySimp_elimSub" (formula "25") (term "1,0,0"))
                                    (rule "times_zero_2" (formula "25") (term "1,1,0,0"))
                                    (rule "add_zero_right" (formula "25") (term "1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,0"))
                                    (rule "add_zero_right" (formula "25") (term "0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "25") (term "0,0,0,0"))
                                    (rule "array2seqDef" (formula "25") (term "0,1,0") (inst "u=u"))
                                    (rule "eqSymm" (formula "25") (term "0"))
                                    (rule "lenOfSeqDef" (formula "25") (term "0,0"))
                                    (rule "polySimp_elimSub" (formula "25") (term "1,0,0"))
                                    (rule "times_zero_2" (formula "25") (term "1,1,0,0"))
                                    (rule "add_zero_right" (formula "25") (term "1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,0"))
                                    (rule "add_zero_right" (formula "25") (term "0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0,0"))
                                    (rule "eqSymm" (formula "25") (term "0"))
                                    (rule "polySimp_elimOne" (formula "25") (term "0,0,1,0"))
                                    (rule "array2seqDef" (formula "16") (term "0") (inst "u=u"))
                                    (rule "array2seqDef" (formula "16") (term "1") (inst "u=u"))
                                    (rule "narrowSelectArrayType" (formula "16") (term "2,1") (ifseqformula "4") (ifseqformula "29"))
                                    (rule "array2seqDef" (formula "13") (term "1") (inst "u=u"))
                                    (rule "eqSymm" (formula "13"))
                                    (rule "array2seqDef" (formula "30") (term "0,0,0") (inst "u=u"))
                                    (rule "array2seqDef" (formula "30") (term "1,0,0") (inst "u=u"))
                                    (rule "array2seqDef" (formula "10") (term "1") (inst "u=u"))
                                    (rule "eqSymm" (formula "10"))
                                    (rule "applyEq" (formula "10") (term "0") (ifseqformula "1"))
                                    (rule "eqSymm" (formula "10"))
                                    (rule "array2seqDef" (formula "30") (term "1") (inst "u=u"))
                                    (rule "applyEq" (formula "30") (term "1") (ifseqformula "1"))
                                    (rule "array2seqDef" (formula "12") (term "1") (inst "u=u"))
                                    (rule "eqSymm" (formula "12"))
                                    (rule "narrowSelectArrayType" (formula "12") (term "2,0") (ifseqformula "4") (ifseqformula "29"))
                                    (rule "applyEq" (formula "16") (term "1") (ifseqformula "12"))
                                    (rule "array2seqDef" (formula "25") (term "0,1,1,1,0,0,1") (inst "u=u"))
                                    (rule "lenOfSeqDef" (formula "25") (term "1,1,1,0,0,1"))
                                    (rule "polySimp_elimSub" (formula "25") (term "1,1,1,1,0,0,1"))
                                    (rule "mul_literals" (formula "25") (term "1,1,1,1,1,0,0,1"))
                                    (rule "add_zero_right" (formula "25") (term "1,1,1,1,0,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "25") (term "0,1,1,1,0,0,1"))
                                    (rule "add_zero_right" (formula "25") (term "0,0,1,1,1,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,1,1,0,0,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,1,1,1,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "25") (term "0,0,1,1,1,0,0,1"))
                                    (rule "polySimp_elimOne" (formula "25") (term "0,0,1,1,1,0,0,1"))
                                    (rule "array2seqDef" (formula "25") (term "0,1,1,0,1") (inst "u=u"))
                                    (rule "eqSymm" (formula "25") (term "1,0,1"))
                                    (rule "getOfSeqDef" (formula "25") (term "0,1,0,1"))
                                    (rule "castDel" (formula "25") (term "1,0,1,0,1"))
                                    (rule "castDel" (formula "25") (term "2,0,1,0,1"))
                                    (rule "add_zero_right" (formula "25") (term "0,2,1,0,1,0,1"))
                                    (rule "polySimp_elimSub" (formula "25") (term "1,1,0,0,1,0,1"))
                                    (rule "times_zero_2" (formula "25") (term "1,1,1,0,0,1,0,1"))
                                    (rule "add_zero_right" (formula "25") (term "1,1,0,0,1,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,0,1"))
                                    (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,1,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,1,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,0,1"))
                                    (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1,0,1"))
                                    (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1,0,1"))
                                    (rule "mul_literals" (formula "25") (term "0,1,1,0,0,1,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1,0,1"))
                                    (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1,0,1"))
                                    (rule "array2seqDef" (formula "1") (term "1") (inst "u=u"))
                                    (rule "eqSymm" (formula "1"))
                                    (rule "array2seqDef" (formula "13") (term "1,1,1") (inst "u=u"))
                                    (rule "narrowSelectArrayType" (formula "13") (term "2,1,1,1") (ifseqformula "4") (ifseqformula "29"))
                                    (rule "applyEq" (formula "13") (term "1,1,1") (ifseqformula "12"))
                                    (rule "array2seqDef" (formula "13") (term "0,1") (inst "u=u"))
                                    (rule "eqSymm" (formula "13"))
                                    (rule "array2seqDef" (formula "10") (term "1,0,0") (inst "u=u"))
                                    (rule "array2seqDef" (formula "10") (term "0,0,0") (inst "u=u"))
                                    (rule "array2seqDef" (formula "10") (term "1") (inst "u=u"))
                                    (rule "eqSymm" (formula "10"))
                                    (rule "array2seqDef" (formula "30") (term "1") (inst "u=u"))
                                    (rule "eqSymm" (formula "30"))
                                    (rule "pullOutSelect" (formula "22") (term "1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_28"))
                                    (rule "simplifySelectOfAnonEQ" (formula "22") (ifseqformula "19"))
                                    (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "29")) (ifInst ""  (formula "5")))
                                    (rule "applyEqReverse" (formula "23") (term "1,0") (ifseqformula "22"))
                                    (rule "hideAuxiliaryEq" (formula "22"))
                                    (rule "pullOutSelect" (formula "3") (term "0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_25"))
                                    (rule "applyEq" (formula "11") (term "1,1,2,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "31") (term "1,0,1,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "11") (term "1,0,1,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "1") (term "1,1,2,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "31") (term "1,1,2,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "1") (term "1,0,1,0") (ifseqformula "3"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "20"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "29")) (ifInst ""  (formula "6")))
                                    (rule "applyEqReverse" (formula "4") (term "0,0") (ifseqformula "3"))
                                    (rule "applyEqReverse" (formula "11") (term "1,1,2,0") (ifseqformula "3"))
                                    (rule "applyEqReverse" (formula "31") (term "1,0,1,0") (ifseqformula "3"))
                                    (rule "applyEqReverse" (formula "11") (term "1,0,1,0") (ifseqformula "3"))
                                    (rule "applyEqReverse" (formula "1") (term "1,1,2,0") (ifseqformula "3"))
                                    (rule "applyEqReverse" (formula "31") (term "1,1,2,0") (ifseqformula "3"))
                                    (rule "applyEqReverse" (formula "1") (term "1,0,1,0") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "eqSymm" (formula "30"))
                                    (rule "applyEq" (formula "3") (term "0") (ifseqformula "14"))
                                    (rule "eqSeqDef" (formula "13") (inst "iv=iv"))
                                    (rule "andLeft" (formula "13"))
                                    (rule "lenOfSeqDef" (formula "13") (term "1"))
                                    (rule "polySimp_elimSub" (formula "13") (term "1,1"))
                                    (rule "times_zero_2" (formula "13") (term "1,1,1"))
                                    (rule "add_zero_right" (formula "13") (term "1,1"))
                                    (rule "getOfSeqDef" (formula "14") (term "1,1,0"))
                                    (rule "castDel" (formula "14") (term "2,1,1,0"))
                                    (rule "castDel" (formula "14") (term "1,1,1,0"))
                                    (rule "add_zero_right" (formula "14") (term "0,2,1,1,1,0"))
                                    (rule "polySimp_elimSub" (formula "14") (term "1,1,0,1,1,0"))
                                    (rule "times_zero_2" (formula "14") (term "1,1,1,0,1,1,0"))
                                    (rule "add_zero_right" (formula "14") (term "1,1,0,1,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "14") (term "0,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1"))
                                    (rule "add_zero_right" (formula "13") (term "0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,1,1,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,1,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,1,1,0"))
                                    (rule "applyEq" (formula "14") (term "0,1,0,1,0,0") (ifseqformula "13"))
                                    (rule "polySimp_addComm1" (formula "14") (term "0,1,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "0,0,1"))
                                    (rule "polySimp_elimOne" (formula "13") (term "0,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,1,1,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,1,1,0"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,1,0,1,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,1,1,0"))
                                    (rule "mul_literals" (formula "14") (term "0,1,1,0,1,1,0"))
                                    (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,1,1,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0,1,0,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,1,0,0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "14") (term "0,0,0,1,0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                                    (rule "eqSeqDef2" (formula "12") (inst "iv=iv") (ifseqformula "12"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "true_left" (formula "12"))
                                    (rule "eqSeqDef2" (formula "16") (inst "iv=iv") (ifseqformula "16"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "true_left" (formula "16"))
                                    (rule "eqSeqDef" (formula "1") (inst "iv=iv"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "lenOfSeqDef" (formula "1") (term "0"))
                                    (rule "eqSymm" (formula "1"))
                                    (rule "polySimp_elimSub" (formula "1") (term "1,1"))
                                    (rule "mul_literals" (formula "1") (term "1,1,1"))
                                    (rule "add_zero_right" (formula "1") (term "1,1"))
                                    (rule "lenOfSeqDef" (formula "2") (term "1,1,0,0"))
                                    (rule "polySimp_elimSub" (formula "2") (term "1,1,1,0,0"))
                                    (rule "times_zero_2" (formula "2") (term "1,1,1,1,0,0"))
                                    (rule "add_zero_right" (formula "2") (term "1,1,1,0,0"))
                                    (rule "getOfSeqDef" (formula "2") (term "0,1,0"))
                                    (rule "castDel" (formula "2") (term "2,0,1,0"))
                                    (rule "castDel" (formula "2") (term "1,0,1,0"))
                                    (rule "add_zero_right" (formula "2") (term "0,2,1,0,1,0"))
                                    (rule "eqSymm" (formula "2") (term "1,0"))
                                    (rule "polySimp_elimSub" (formula "2") (term "1,1,0,1,1,0"))
                                    (rule "times_zero_2" (formula "2") (term "1,1,1,0,1,1,0"))
                                    (rule "add_zero_right" (formula "2") (term "1,1,0,1,1,0"))
                                    (rule "lenOfSeqDef" (formula "1") (term "0"))
                                    (rule "eqSymm" (formula "1"))
                                    (rule "polySimp_elimSub" (formula "1") (term "1,1"))
                                    (rule "times_zero_2" (formula "1") (term "1,1,1"))
                                    (rule "add_zero_right" (formula "1") (term "1,1"))
                                    (rule "getOfSeqDef" (formula "2") (term "0,1,0"))
                                    (rule "castDel" (formula "2") (term "1,0,1,0"))
                                    (rule "castDel" (formula "2") (term "2,0,1,0"))
                                    (rule "add_zero_right" (formula "2") (term "0,2,1,0,1,0"))
                                    (rule "eqSymm" (formula "2") (term "1,0"))
                                    (rule "polySimp_elimSub" (formula "2") (term "1,1,0,1,1,0"))
                                    (rule "times_zero_2" (formula "2") (term "1,1,1,0,1,1,0"))
                                    (rule "add_zero_right" (formula "2") (term "1,1,0,1,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1,1,0,0"))
                                    (rule "add_zero_right" (formula "2") (term "0,0,1,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1"))
                                    (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0"))
                                    (rule "eqSymm" (formula "2") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,1,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0"))
                                    (rule "eqSymm" (formula "2") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,1,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,1,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1,0"))
                                    (rule "apply_eq_monomials" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "1"))
                                    (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0,0,1,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "2") (term "1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "2") (term "1,1,1,0,0,1,0,0"))
                                    (rule "times_zero_1" (formula "2") (term "1,1,0,0,1,0,0"))
                                    (rule "add_zero_right" (formula "2") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "0,0,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0"))
                                    (rule "eqSymm" (formula "2") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,1,1,0"))
                                    (rule "polySimp_rightDist" (formula "2") (term "1,1,0,1,1,0"))
                                    (rule "mul_literals" (formula "2") (term "0,1,1,0,1,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,1,1,0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,1,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "2") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0"))
                                    (rule "eqSymm" (formula "2") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,1,1,0"))
                                    (rule "polySimp_rightDist" (formula "2") (term "1,1,0,1,1,0"))
                                    (rule "mul_literals" (formula "2") (term "0,1,1,0,1,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,1,1,0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,1,1,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,1,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0,0,1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0,0,1,1,1,0,0"))
                                    (rule "eqSeqDef" (formula "30") (inst "iv=iv"))
                                    (rule "lenOfSeqDef" (formula "30") (term "1,0"))
                                    (rule "polySimp_elimSub" (formula "30") (term "1,1,0"))
                                    (rule "times_zero_2" (formula "30") (term "1,1,1,0"))
                                    (rule "add_zero_right" (formula "30") (term "1,1,0"))
                                    (rule "getOfSeqDef" (formula "30") (term "1,1,0,1"))
                                    (rule "castDel" (formula "30") (term "1,1,1,0,1"))
                                    (rule "castDel" (formula "30") (term "2,1,1,0,1"))
                                    (rule "add_zero_right" (formula "30") (term "0,2,1,1,1,0,1"))
                                    (rule "polySimp_elimSub" (formula "30") (term "1,1,0,1,1,0,1"))
                                    (rule "mul_literals" (formula "30") (term "1,1,1,0,1,1,0,1"))
                                    (rule "add_zero_right" (formula "30") (term "1,1,0,1,1,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0,1"))
                                    (rule "polySimp_addComm1" (formula "30") (term "0,1,0,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "30") (term "0,1,0"))
                                    (rule "add_zero_right" (formula "30") (term "0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,1,1,0,1"))
                                    (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,1,1,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,1,1,0,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "30") (term "1,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "30") (term "0,1,0,0,1"))
                                    (rule "polySimp_elimOne" (formula "30") (term "0,1,0,0,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "30") (term "0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "30") (term "0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "30") (term "0,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,1,1,0,1"))
                                    (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,1,1,0,1"))
                                    (rule "polySimp_rightDist" (formula "30") (term "1,1,0,1,1,0,1"))
                                    (rule "mul_literals" (formula "30") (term "0,1,1,0,1,1,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,1,1,0,1"))
                                    (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,1,1,0,1"))
                                    (rule "array2seqDef" (formula "14") (term "0,1,0,0,1,0") (inst "u=u"))
                                    (rule "array2seqDef" (formula "13") (term "0,1,0,0") (inst "u=u"))
                                    (rule "pullOutSelect" (formula "25") (term "0,0,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_22"))
                                    (rule "applyEq" (formula "26") (term "1,1,0,1,0,1") (ifseqformula "1"))
                                    (rule "applyEq" (formula "31") (term "1,2,0,0,0,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "31") (term "0,1,0,0,0,0,1,0,0,1") (ifseqformula "1"))
                                    (rule "applyEq" (formula "26") (term "0,1,1,1,1,0,0,1") (ifseqformula "1"))
                                    (rule "applyEq" (formula "26") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                                    (rule "applyEq" (formula "31") (term "1,2,0,0,0,0,1,0,1") (ifseqformula "1"))
                                    (rule "applyEq" (formula "26") (term "0,1,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "31") (term "1,2,0,0,0,0,1,0,0,1") (ifseqformula "1"))
                                    (rule "applyEq" (formula "31") (term "0,1,0,0,0,0,1,0,1") (ifseqformula "1"))
                                    (rule "applyEq" (formula "31") (term "0,1,0,0,0,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "26") (term "0,0,0,1,1,1,0,0,1") (ifseqformula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")) (ifInst ""  (formula "7")))
                                    (rule "applyEqReverse" (formula "26") (term "0,0,0,0,0") (ifseqformula "1"))
                                    (rule "applyEqReverse" (formula "26") (term "1,1,0,1,0,1") (ifseqformula "1"))
                                    (rule "applyEqReverse" (formula "31") (term "1,2,0,0,0,0,0") (ifseqformula "1"))
                                    (rule "applyEqReverse" (formula "31") (term "0,1,0,0,0,0,1,0,0,1") (ifseqformula "1"))
                                    (rule "applyEqReverse" (formula "26") (term "0,1,1,1,1,0,0,1") (ifseqformula "1"))
                                    (rule "applyEqReverse" (formula "26") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                                    (rule "applyEqReverse" (formula "31") (term "1,2,0,0,0,0,1,0,1") (ifseqformula "1"))
                                    (rule "applyEqReverse" (formula "26") (term "0,1,0,0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "allRight" (formula "26") (inst "sk=iv_49"))
                                    (rule "impRight" (formula "26"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "applyEqReverse" (formula "33") (term "1,2,0,0,0,0,1,0,0,1") (ifseqformula "3"))
                                    (rule "applyEqReverse" (formula "33") (term "0,1,0,0,0,0,1,0,1") (ifseqformula "3"))
                                    (rule "applyEqReverse" (formula "33") (term "0,1,0,0,0,0,0") (ifseqformula "3"))
                                    (rule "applyEqReverse" (formula "2") (term "0,0,0,1,1") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "1")))
                                    (rule "inEqSimp_homoInEq0" (formula "2"))
                                    (rule "polySimp_addComm1" (formula "2") (term "0"))
                                    (rule "inEqSimp_homoInEq0" (formula "27") (term "0,1"))
                                    (rule "polySimp_addComm1" (formula "27") (term "0,0,1"))
                                    (rule "inEqSimp_homoInEq0" (formula "27") (term "0,0"))
                                    (rule "polySimp_addComm1" (formula "27") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                    (rule "polySimp_rightDist" (formula "2") (term "1"))
                                    (rule "mul_literals" (formula "2") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "0,1"))
                                    (rule "polySimp_mulComm0" (formula "27") (term "1,0,1"))
                                    (rule "polySimp_rightDist" (formula "27") (term "1,0,1"))
                                    (rule "mul_literals" (formula "27") (term "0,1,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,1"))
                                    (rule "polySimp_elimOne" (formula "27") (term "1,1,0,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "27") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "27") (term "1,0,0"))
                                    (rule "mul_literals" (formula "27") (term "0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
                                    (rule "eqSeqDef2" (formula "13") (inst "iv=iv") (ifseqformula "13"))
                                    (builtin "One Step Simplification" (formula "13"))
                                    (rule "true_left" (formula "13"))
                                    (rule "pullOutSelect" (formula "3") (term "0,1,0") (inst "selectSK=arr_391"))
                                    (rule "applyEq" (formula "4") (term "0,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "32") (term "0,0,0,1,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "5") (term "0,1,1,1,0,0,1,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "32") (term "0,1,1,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "32") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "3"))
                                    (rule "applyEq" (formula "32") (term "1,1,1,1,0,1") (ifseqformula "3"))
                                    (rule "applyEq" (formula "5") (term "1,1,0,1,0") (ifseqformula "3"))
                                    (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "21"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "eqSymm" (formula "4"))
                                    (rule "eqSymm" (formula "5") (term "1,0"))
                                    (rule "applyEq" (formula "5") (term "1,1,1,0,0") (ifseqformula "4"))
                                    (rule "pullOutSelect" (formula "32") (term "1,0,1,1,0,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_23"))
                                    (rule "applyEq" (formula "33") (term "1,0,1,1,0,0,0,1,0,1") (ifseqformula "1"))
                                    (rule "applyEq" (formula "33") (term "1,1,2,1,0,0,0,1,0,1") (ifseqformula "1"))
                                    (rule "applyEq" (formula "33") (term "1,1,2,1,0,0,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "33") (term "1,0,1,1,0,0,0,1,0,0,1") (ifseqformula "1"))
                                    (rule "applyEq" (formula "33") (term "1,1,2,1,0,0,0,1,0,0,1") (ifseqformula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "31")) (ifInst ""  (formula "10")))
                                    (rule "applyEqReverse" (formula "33") (term "1,0,1,1,0,0,0,0") (ifseqformula "1"))
                                    (rule "applyEqReverse" (formula "33") (term "1,0,1,1,0,0,0,1,0,1") (ifseqformula "1"))
                                    (rule "applyEqReverse" (formula "33") (term "1,1,2,1,0,0,0,1,0,1") (ifseqformula "1"))
                                    (rule "applyEqReverse" (formula "33") (term "1,1,2,1,0,0,0,0") (ifseqformula "1"))
                                    (rule "applyEqReverse" (formula "33") (term "1,0,1,1,0,0,0,1,0,0,1") (ifseqformula "1"))
                                    (rule "applyEqReverse" (formula "33") (term "1,1,2,1,0,0,0,1,0,0,1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "pullOutSelect" (formula "27") (term "1,0") (inst "selectSK=arr_392"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "eqSymm" (formula "28"))
                                    (rule "pullOutSelect" (formula "33") (term "0,1,1,0,0,0,0") (inst "selectSK=arr_393"))
                                    (rule "applyEq" (formula "34") (term "0,1,1,0,0,0,1,0,0,1") (ifseqformula "1"))
                                    (rule "applyEq" (formula "34") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "1"))
                                    (rule "applyEq" (formula "34") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "1"))
                                    (rule "applyEq" (formula "34") (term "1,2,1,0,0,0,1,0,0,1") (ifseqformula "1"))
                                    (rule "applyEq" (formula "34") (term "1,2,1,0,0,0,0") (ifseqformula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "nnf_imp2or" (formula "28") (term "0"))
                                    (rule "Definition_axiom_for_ghostFieldsNonNull_in_verif_selectvoting_system_core_MixServer" (formula "15") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
                                    (builtin "One Step Simplification" (formula "15"))
                                    (rule "andLeft" (formula "15"))
                                    (rule "andLeft" (formula "15"))
                                    (rule "andLeft" (formula "15"))
                                    (rule "andLeft" (formula "15"))
                                    (rule "notLeft" (formula "16"))
                                    (rule "andLeft" (formula "15"))
                                    (rule "notLeft" (formula "16"))
                                    (rule "andLeft" (formula "15"))
                                    (rule "notLeft" (formula "16"))
                                    (rule "andLeft" (formula "15"))
                                    (rule "notLeft" (formula "15"))
                                    (rule "notLeft" (formula "15"))
                                    (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "32"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "5"))
                                    (rule "ifthenelse_negated" (formula "1") (term "0"))
                                    (rule "ifthenelse_negated" (formula "5") (term "0"))
                                    (rule "narrowSelectArrayType" (formula "20") (term "1,1,1,0") (ifseqformula "10") (ifseqformula "35"))
                                    (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                                    (rule "applyEq" (formula "17") (term "0,1,0,0,1,0,0") (ifseqformula "22"))
                                    (rule "applyEq" (formula "16") (term "0,1,0,0,1,0,0") (ifseqformula "21"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                                    (rule "nnf_imp2or" (formula "7") (term "0"))
                                    (rule "nnf_imp2or" (formula "41") (term "0,1"))
                                    (rule "nnf_notAnd" (formula "30") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "30") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "30") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
                                    (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                                    (rule "nnf_imp2or" (formula "20") (term "0"))
                                    (rule "nnf_imp2or" (formula "15") (term "0"))
                                    (rule "nnf_imp2or" (formula "17") (term "0"))
                                    (rule "nnf_imp2or" (formula "16") (term "0"))
                                    (rule "nnf_notAnd" (formula "7") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "7") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
                                    (rule "mul_literals" (formula "7") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "41") (term "0,0,1"))
                                    (rule "inEqSimp_notGeq" (formula "41") (term "1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "41") (term "1,0,0,1,0,0,1"))
                                    (rule "mul_literals" (formula "41") (term "0,1,0,0,1,0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "41") (term "0,0,1,0,0,1"))
                                    (rule "add_literals" (formula "41") (term "0,0,0,1,0,0,1"))
                                    (rule "add_zero_left" (formula "41") (term "0,0,1,0,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0,1"))
                                    (rule "polySimp_elimOne" (formula "41") (term "1,1,0,0,1"))
                                    (rule "inEqSimp_notGeq" (formula "41") (term "0,0,0,1"))
                                    (rule "times_zero_1" (formula "41") (term "1,0,0,0,0,0,1"))
                                    (rule "add_literals" (formula "41") (term "0,0,0,0,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "0,0,0,1"))
                                    (rule "mul_literals" (formula "41") (term "1,0,0,0,1"))
                                    (rule "nnf_notAnd" (formula "20") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "20") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                                    (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "15") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                    (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "17") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
                                    (rule "mul_literals" (formula "17") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "17") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                                    (rule "mul_literals" (formula "17") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                                    (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "16") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                                    (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                                    (rule "arrayLengthNotNegative" (formula "21") (term "1"))
                                    (rule "arrayLengthNotNegative" (formula "22") (term "0"))
                                    (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                    (rule "arrayLengthIsAShort" (formula "22") (term "0"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "true_left" (formula "22"))
                                    (rule "arrayLengthIsAShort" (formula "22") (term "1"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "true_left" (formula "22"))
                                    (rule "arrayLengthIsAShort" (formula "23") (term "0"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "true_left" (formula "23"))
                                    (rule "arrayLengthNotNegative" (formula "23") (term "0"))
                                    (rule "applyEq" (formula "23") (term "0") (ifseqformula "24"))
                                    (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "24") (ifseqformula "12"))
                                    (rule "andLeft" (formula "24"))
                                    (rule "notLeft" (formula "25"))
                                    (rule "andLeft" (formula "24"))
                                    (rule "notLeft" (formula "25"))
                                    (rule "andLeft" (formula "24"))
                                    (rule "andLeft" (formula "24"))
                                    (rule "notLeft" (formula "26"))
                                    (rule "andLeft" (formula "24"))
                                    (rule "notLeft" (formula "26"))
                                    (rule "andLeft" (formula "24"))
                                    (rule "andLeft" (formula "24"))
                                    (rule "andLeft" (formula "24"))
                                    (rule "notLeft" (formula "24"))
                                    (rule "notLeft" (formula "24"))
                                    (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "37"))
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "ifthenelse_negated" (formula "2") (term "0"))
                                    (rule "narrowSelectArrayType" (formula "20") (term "2,0,1,0,0,1,0") (ifseqformula "10") (ifseqformula "37"))
                                    (rule "narrowSelectArrayType" (formula "43") (term "1,0") (ifseqformula "10") (ifseqformula "37"))
                                    (rule "eqSymm" (formula "43"))
                                    (rule "narrowSelectArrayType" (formula "19") (term "2,0,1,0,0") (ifseqformula "10") (ifseqformula "37"))
                                    (rule "narrowSelectArrayType" (formula "2") (term "2,0") (ifseqformula "27") (ifseqformula "37"))
                                    (rule "narrowSelectArrayType" (formula "2") (term "1,0") (ifseqformula "10") (ifseqformula "37"))
                                    (rule "nonNull" (formula "26") (inst "i=i"))
                                    (rule "sub_literals" (formula "26") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "39")))
                                    (rule "greater_literals" (formula "26") (term "0"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "narrowSelectArrayType" (formula "26") (term "0,0,1,0") (ifseqformula "10") (ifseqformula "39"))
                                    (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "25") (inst "i=i"))
                                    (rule "sub_literals" (formula "25") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "38")))
                                    (rule "greater_literals" (formula "25") (term "0"))
                                    (builtin "One Step Simplification" (formula "25"))
                                    (rule "narrowSelectArrayType" (formula "25") (term "0,0,1,0") (ifseqformula "10") (ifseqformula "38"))
                                    (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                                    (rule "applyEq" (formula "25") (term "0,1,0,0,1,0,0") (ifseqformula "22"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "24") (inst "i=i"))
                                    (rule "greater_literals" (formula "24") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "40")))
                                    (rule "sub_literals" (formula "24") (term "2,1,0"))
                                    (builtin "One Step Simplification" (formula "24"))
                                    (rule "narrowSelectArrayType" (formula "24") (term "0,0,1,0") (ifseqformula "10") (ifseqformula "40"))
                                    (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                                    (rule "applyEq" (formula "24") (term "0,1,0,0,1,0,0") (ifseqformula "23"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                                    (rule "nnf_imp2or" (formula "26") (term "0"))
                                    (rule "nnf_imp2or" (formula "25") (term "0"))
                                    (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "32") (ifseqformula "12"))
                                    (rule "replaceKnownSelect_taclet101100000020_5" (formula "32") (term "0,0,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet101100000020_6" (formula "32") (term "0,0,1"))
                                    (rule "replaceKnownSelect_taclet101100000020_8" (formula "32") (term "1,1,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet101100000020_9" (formula "32") (term "1,1,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet101100000020_3" (formula "32") (term "1,1,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet101100000020_4" (formula "32") (term "1,1,0,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet101100000020_1" (formula "32") (term "1,1,0,0,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet101100000020_2" (formula "32") (term "1,1,0,0,0,0,0,0"))
                                    (rule "andLeft" (formula "32"))
                                    (rule "andLeft" (formula "32"))
                                    (rule "notLeft" (formula "34"))
                                    (rule "notLeft" (formula "33"))
                                    (rule "andLeft" (formula "32"))
                                    (rule "notLeft" (formula "33"))
                                    (rule "andLeft" (formula "32"))
                                    (rule "andLeft" (formula "32"))
                                    (rule "notLeft" (formula "34"))
                                    (rule "andLeft" (formula "32"))
                                    (rule "andLeft" (formula "32"))
                                    (rule "andLeft" (formula "32"))
                                    (rule "notLeft" (formula "33"))
                                    (rule "notLeft" (formula "32"))
                                    (rule "nonNull" (formula "34") (inst "i=i"))
                                    (rule "sub_literals" (formula "34") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "46")))
                                    (rule "greater_literals" (formula "34") (term "0"))
                                    (builtin "One Step Simplification" (formula "34"))
                                    (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "34") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "33") (inst "i=i"))
                                    (rule "greater_literals" (formula "33") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "45")))
                                    (rule "sub_literals" (formula "33") (term "2,1,0"))
                                    (builtin "One Step Simplification" (formula "33"))
                                    (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0"))
                                    (rule "applyEq" (formula "33") (term "0,1,0,0,1,0,0") (ifseqformula "22"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "33") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0"))
                                    (rule "nonNull" (formula "32") (inst "i=i"))
                                    (rule "sub_literals" (formula "32") (term "2,1,0,1,1"))
                                    (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "47")))
                                    (rule "greater_literals" (formula "32") (term "0"))
                                    (builtin "One Step Simplification" (formula "32"))
                                    (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0"))
                                    (rule "applyEq" (formula "32") (term "0,1,0,0,1,0,0") (ifseqformula "23"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "32") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0"))
                                    (rule "pullOutSelect" (formula "40") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_22"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")) (ifInst ""  (formula "12")))
                                    (rule "applyEqReverse" (formula "41") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "pullOutSelect" (formula "39") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_22"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")) (ifInst ""  (formula "12")))
                                    (rule "applyEqReverse" (formula "40") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "pullOutSelect" (formula "38") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_22"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "52")) (ifInst ""  (formula "12")))
                                    (rule "applyEqReverse" (formula "39") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "pullOutSelect" (formula "37") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_23"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "51")) (ifInst ""  (formula "12")))
                                    (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "pullOutSelect" (formula "36") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_22"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "50")) (ifInst ""  (formula "12")))
                                    (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "nnf_imp2or" (formula "24") (term "0"))
                                    (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                    (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                    (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                    (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                    (rule "ifthenelse_split" (formula "19") (term "1"))
                                    (branch "self.unsigned.length ≥ 1 TRUE"
                                       (rule "replace_known_left" (formula "21") (term "0,1,1,0,0") (ifseqformula "19"))
                                       (builtin "One Step Simplification" (formula "21"))
                                       (rule "nnf_imp2or" (formula "33") (term "0"))
                                       (rule "equalityToSeqGetAndSeqLenLeft" (formula "30") (inst "iv=iv"))
                                       (rule "andLeft" (formula "30"))
                                       (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0"))
                                       (rule "applyEq" (formula "31") (term "0,0,1,0,0,1,0,0") (ifseqformula "32"))
                                       (rule "applyEq" (formula "31") (term "0,0,1,0") (ifseqformula "32"))
                                       (builtin "One Step Simplification" (formula "31"))
                                       (rule "true_left" (formula "31"))
                                       (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "31"))
                                       (builtin "One Step Simplification" (formula "30"))
                                       (rule "true_left" (formula "30"))
                                       (rule "nnf_imp2or" (formula "32") (term "0"))
                                       (rule "nnf_imp2or" (formula "31") (term "0"))
                                       (rule "arrayLengthNotNegative" (formula "20") (term "1,0,0,0"))
                                       (rule "arrayLengthIsAShort" (formula "21") (term "1,0,0,0"))
                                       (builtin "One Step Simplification" (formula "21"))
                                       (rule "true_left" (formula "21"))
                                       (rule "commute_or_2" (formula "35") (term "0"))
                                       (rule "commute_or_2" (formula "7") (term "0"))
                                       (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                       (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "33") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "33") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "33") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0"))
                                       (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "33") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0"))
                                       (rule "mul_literals" (formula "33") (term "1,0,0,0"))
                                       (rule "commute_or_2" (formula "15") (term "0"))
                                       (rule "nnf_notAnd" (formula "32") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "32") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
                                       (rule "mul_literals" (formula "32") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "32") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "32") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "31") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "31") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0"))
                                       (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "31") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0"))
                                       (rule "commute_or_2" (formula "17") (term "0"))
                                       (rule "commute_or_2" (formula "16") (term "0"))
                                       (rule "ifthenelse_split" (formula "4") (term "0"))
                                       (branch "self.electionID.length ≥ 1 TRUE"
                                          (rule "replace_known_left" (formula "45") (term "0,0") (ifseqformula "5"))
                                          (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "5")))
                                          (rule "ifthenelse_split" (formula "7") (term "0"))
                                          (branch "self.encrypted[i_9].length ≥ 1 TRUE"
                                             (rule "eqSymm" (formula "8"))
                                             (rule "applyEq" (formula "9") (term "1,1,0") (ifseqformula "8"))
                                             (rule "applyEq" (formula "51") (term "1,0") (ifseqformula "8"))
                                             (rule "arrayLengthIsAShort" (formula "23") (term "1,0,1,0,0"))
                                             (builtin "One Step Simplification" (formula "23"))
                                             (rule "true_left" (formula "23"))
                                             (rule "arrayLengthNotNegative" (formula "23") (term "1,0,1,0,0"))
                                             (rule "inEqSimp_subsumption1" (formula "23") (ifseqformula "4"))
                                             (rule "leq_literals" (formula "23") (term "0"))
                                             (builtin "One Step Simplification" (formula "23"))
                                             (rule "true_left" (formula "23"))
                                             (rule "ifthenelse_split" (formula "1") (term "0"))
                                             (branch "self.chosen.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "52") (term "0,1,1,0,0,0,0") (ifseqformula "2"))
                                                (rule "applyEqReverse" (formula "52") (term "0,1,1,0,0,0,1,0,0,1") (ifseqformula "2"))
                                                (rule "applyEqReverse" (formula "52") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "2"))
                                                (rule "applyEqReverse" (formula "52") (term "1,2,1,0,0,0,0") (ifseqformula "2"))
                                                (rule "applyEqReverse" (formula "52") (term "1,2,1,0,0,0,1,0,0,1") (ifseqformula "2"))
                                                (rule "applyEqReverse" (formula "52") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "2"))
                                                (rule "hideAuxiliaryEq" (formula "2"))
                                                (rule "ifthenelse_split" (formula "6") (term "0"))
                                                (branch "self.encrypted.<created> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "9") (term "0,0,0,0") (ifseqformula "7"))
                                                   (rule "applyEqReverse" (formula "52") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "7"))
                                                   (rule "applyEqReverse" (formula "10") (term "1,1,1,1,0,0") (ifseqformula "7"))
                                                   (rule "applyEqReverse" (formula "9") (term "0,1,0") (ifseqformula "7"))
                                                   (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "8")))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "applyEqReverse" (formula "9") (term "0,1,1,1,0,1,1,0,0") (ifseqformula "7"))
                                                   (rule "applyEqReverse" (formula "51") (term "1,1,1,1,0,1") (ifseqformula "7"))
                                                   (rule "hideAuxiliaryEq" (formula "7"))
                                                   (rule "eqSymm" (formula "8") (term "1,0,0"))
                                                   (rule "commute_or_2" (formula "23") (term "0"))
                                                   (rule "commute_or" (formula "35") (term "0,0"))
                                                   (rule "commute_or_2" (formula "34") (term "0"))
                                                   (rule "commute_or_2" (formula "33") (term "0"))
                                                   (rule "commute_or" (formula "16") (term "0,0"))
                                                   (rule "ifthenelse_split" (formula "2") (term "0"))
                                                   (branch "self.electionID.<created> = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "46") (term "0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "46"))
                                                      (rule "closeTrue" (formula "46"))
                                                   )
                                                   (branch "self.electionID.<created> = TRUE FALSE"
                                                      (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "40"))
                                                      (rule "close" (formula "36") (ifseqformula "11"))
                                                   )
                                                )
                                                (branch "self.encrypted.<created> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "42"))
                                                   (rule "close" (formula "37") (ifseqformula "12"))
                                                )
                                             )
                                             (branch "self.chosen.<created> = TRUE FALSE"
                                                (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "43"))
                                                (rule "close" (formula "37") (ifseqformula "12"))
                                             )
                                          )
                                          (branch "self.encrypted[i_9].length ≥ 1 FALSE"
                                             (rule "eqSymm" (formula "7"))
                                             (builtin "One Step Simplification" (formula "7"))
                                             (rule "inEqSimp_geqRight" (formula "36"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_notGeq" (formula "8") (term "0"))
                                             (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                                             (rule "add_literals" (formula "8") (term "0,0,0"))
                                             (rule "add_zero_left" (formula "8") (term "0,0"))
                                             (rule "arrayLengthNotNegative" (formula "23") (term "1,0,1,0,0"))
                                             (rule "inEqSimp_subsumption1" (formula "23") (ifseqformula "5"))
                                             (rule "leq_literals" (formula "23") (term "0"))
                                             (builtin "One Step Simplification" (formula "23"))
                                             (rule "true_left" (formula "23"))
                                             (rule "arrayLengthIsAShort" (formula "23") (term "1,0,1,0,0"))
                                             (builtin "One Step Simplification" (formula "23"))
                                             (rule "true_left" (formula "23"))
                                             (rule "ifthenelse_split" (formula "2") (term "0"))
                                             (branch "self.chosen.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "52") (term "1,2,1,0,0,0,0") (ifseqformula "3"))
                                                (rule "applyEqReverse" (formula "52") (term "0,1,1,0,0,0,1,0,0,1") (ifseqformula "3"))
                                                (rule "applyEqReverse" (formula "52") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "3"))
                                                (rule "applyEqReverse" (formula "52") (term "1,2,1,0,0,0,1,0,0,1") (ifseqformula "3"))
                                                (rule "applyEqReverse" (formula "52") (term "0,1,1,0,0,0,0") (ifseqformula "3"))
                                                (rule "applyEqReverse" (formula "52") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "3"))
                                                (rule "hideAuxiliaryEq" (formula "3"))
                                                (rule "ifthenelse_split" (formula "7") (term "0"))
                                                (branch "self.encrypted.<created> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "10") (term "1,1,1,1,0,0") (ifseqformula "8"))
                                                   (rule "applyEqReverse" (formula "10") (term "0,1,1,1,0") (ifseqformula "8"))
                                                   (rule "applyEqReverse" (formula "52") (term "1,1,1,1,0,1") (ifseqformula "8"))
                                                   (rule "applyEqReverse" (formula "52") (term "0,1,1,0") (ifseqformula "8"))
                                                   (rule "applyEqReverse" (formula "52") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "8"))
                                                   (rule "applyEqReverse" (formula "10") (term "0,0,0,1,1,0") (ifseqformula "8"))
                                                   (rule "applyEqReverse" (formula "9") (term "0,0,1") (ifseqformula "8"))
                                                   (rule "applyEqReverse" (formula "10") (term "0,1,1,1,0,1,1,0,0") (ifseqformula "8"))
                                                   (rule "applyEqReverse" (formula "9") (term "0,0,0") (ifseqformula "8"))
                                                   (rule "applyEqReverse" (formula "52") (term "0,0,0,1,0") (ifseqformula "8"))
                                                   (rule "hideAuxiliaryEq" (formula "8"))
                                                   (rule "eqSymm" (formula "9") (term "1,0,0"))
                                                   (rule "replace_known_left" (formula "8") (term "0") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "8"))
                                                   (rule "true_left" (formula "8"))
                                                   (rule "inEqSimp_contradInEq0" (formula "8") (term "0,1,1,0") (ifseqformula "1"))
                                                   (rule "qeq_literals" (formula "8") (term "0,0,1,1,0"))
                                                   (builtin "One Step Simplification" (formula "8"))
                                                   (rule "inEqSimp_contradInEq0" (formula "50") (term "0,1,0") (ifseqformula "1"))
                                                   (rule "qeq_literals" (formula "50") (term "0,0,1,0"))
                                                   (builtin "One Step Simplification" (formula "50"))
                                                   (rule "commute_or_2" (formula "23") (term "0"))
                                                   (rule "commute_or" (formula "35") (term "0,0"))
                                                   (rule "commute_or_2" (formula "34") (term "0"))
                                                   (rule "commute_or_2" (formula "33") (term "0"))
                                                   (rule "commute_or" (formula "16") (term "0,0"))
                                                   (rule "ifthenelse_split" (formula "3") (term "0"))
                                                   (branch "self.electionID.<created> = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "46") (term "0") (ifseqformula "4"))
                                                      (builtin "One Step Simplification" (formula "46"))
                                                      (rule "closeTrue" (formula "46"))
                                                   )
                                                   (branch "self.electionID.<created> = TRUE FALSE"
                                                      (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "40"))
                                                      (rule "close" (formula "36") (ifseqformula "11"))
                                                   )
                                                )
                                                (branch "self.encrypted.<created> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "42"))
                                                   (rule "close" (formula "37") (ifseqformula "12"))
                                                )
                                             )
                                             (branch "self.chosen.<created> = TRUE FALSE"
                                                (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "43"))
                                                (rule "close" (formula "37") (ifseqformula "12"))
                                             )
                                          )
                                       )
                                       (branch "self.electionID.length ≥ 1 FALSE"
                                          (rule "inEqSimp_geqRight" (formula "35"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "5"))
                                          (rule "mul_literals" (formula "5") (term "1,0"))
                                          (rule "add_zero_right" (formula "5") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                          (rule "mul_literals" (formula "5") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "4"))
                                          (rule "qeq_literals" (formula "5") (term "0"))
                                          (builtin "One Step Simplification" (formula "5"))
                                          (rule "closeFalse" (formula "5"))
                                       )
                                    )
                                    (branch "self.unsigned.length ≥ 1 FALSE"
                                       (rule "replace_known_right" (formula "20") (term "0,1,1,0,0") (ifseqformula "34"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "inEqSimp_geqRight" (formula "34"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_or_tautInEq0" (formula "21") (term "0,0"))
                                       (rule "add_zero_right" (formula "21") (term "1,1,0,0"))
                                       (rule "qeq_literals" (formula "21") (term "1,0,0"))
                                       (builtin "One Step Simplification" (formula "21"))
                                       (rule "true_left" (formula "21"))
                                       (rule "nnf_imp2or" (formula "32") (term "0"))
                                       (rule "equalityToSeqGetAndSeqLenLeft" (formula "29") (inst "iv=iv"))
                                       (rule "andLeft" (formula "29"))
                                       (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0"))
                                       (rule "applyEq" (formula "30") (term "0,0,1,0,0,1,0,0") (ifseqformula "31"))
                                       (rule "applyEq" (formula "30") (term "0,0,1,0") (ifseqformula "31"))
                                       (builtin "One Step Simplification" (formula "30"))
                                       (rule "true_left" (formula "30"))
                                       (rule "applyEq" (formula "29") (term "0,0") (ifseqformula "30"))
                                       (builtin "One Step Simplification" (formula "29"))
                                       (rule "true_left" (formula "29"))
                                       (rule "nnf_imp2or" (formula "31") (term "0"))
                                       (rule "nnf_imp2or" (formula "30") (term "0"))
                                       (rule "arrayLengthNotNegative" (formula "20") (term "1,0,0,0"))
                                       (rule "arrayLengthIsAShort" (formula "21") (term "1,0,0,0"))
                                       (builtin "One Step Simplification" (formula "21"))
                                       (rule "true_left" (formula "21"))
                                       (rule "commute_or_2" (formula "34") (term "0"))
                                       (rule "commute_or_2" (formula "8") (term "0"))
                                       (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                       (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                       (rule "commute_or_2" (formula "16") (term "0"))
                                       (rule "nnf_notAnd" (formula "32") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0"))
                                       (rule "mul_literals" (formula "32") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "32") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
                                       (rule "mul_literals" (formula "32") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "32") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "32") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0"))
                                       (rule "commute_or_2" (formula "18") (term "0"))
                                       (rule "nnf_notAnd" (formula "31") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "31") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0"))
                                       (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "31") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "30") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "30") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "30") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
                                       (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                                       (rule "commute_or_2" (formula "17") (term "0"))
                                       (rule "ifthenelse_split" (formula "5") (term "0"))
                                       (branch "self.electionID.length ≥ 1 TRUE"
                                          (rule "replace_known_left" (formula "44") (term "0,0") (ifseqformula "6"))
                                          (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "6")))
                                          (rule "ifthenelse_split" (formula "8") (term "0"))
                                          (branch "self.encrypted[i_9].length ≥ 1 TRUE"
                                             (rule "eqSymm" (formula "9"))
                                             (rule "applyEq" (formula "10") (term "1,1,0") (ifseqformula "9"))
                                             (rule "applyEq" (formula "50") (term "1,0") (ifseqformula "9"))
                                             (rule "arrayLengthIsAShort" (formula "23") (term "1,0,1,0,0"))
                                             (builtin "One Step Simplification" (formula "23"))
                                             (rule "true_left" (formula "23"))
                                             (rule "arrayLengthNotNegative" (formula "23") (term "1,0,1,0,0"))
                                             (rule "inEqSimp_subsumption1" (formula "23") (ifseqformula "5"))
                                             (rule "leq_literals" (formula "23") (term "0"))
                                             (builtin "One Step Simplification" (formula "23"))
                                             (rule "true_left" (formula "23"))
                                             (rule "ifthenelse_split" (formula "2") (term "0"))
                                             (branch "self.chosen.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "51") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "3"))
                                                (rule "applyEqReverse" (formula "51") (term "1,2,1,0,0,0,0") (ifseqformula "3"))
                                                (rule "applyEqReverse" (formula "51") (term "0,1,1,0,0,0,1,0,0,1") (ifseqformula "3"))
                                                (rule "applyEqReverse" (formula "51") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "3"))
                                                (rule "applyEqReverse" (formula "51") (term "0,1,1,0,0,0,0") (ifseqformula "3"))
                                                (rule "applyEqReverse" (formula "51") (term "1,2,1,0,0,0,1,0,0,1") (ifseqformula "3"))
                                                (rule "hideAuxiliaryEq" (formula "3"))
                                                (rule "ifthenelse_split" (formula "7") (term "0"))
                                                (branch "self.encrypted.<created> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "51") (term "1,1,1,1,0,1") (ifseqformula "8"))
                                                   (rule "applyEqReverse" (formula "11") (term "0,1,1,1,0,1,1,0,0") (ifseqformula "8"))
                                                   (rule "applyEqReverse" (formula "10") (term "0,1,0") (ifseqformula "8"))
                                                   (builtin "One Step Simplification" (formula "10"))
                                                   (rule "applyEqReverse" (formula "51") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "8"))
                                                   (rule "applyEqReverse" (formula "11") (term "1,1,1,1,0,0") (ifseqformula "8"))
                                                   (rule "applyEqReverse" (formula "10") (term "0,0,0") (ifseqformula "8"))
                                                   (rule "hideAuxiliaryEq" (formula "8"))
                                                   (rule "eqSymm" (formula "9") (term "1"))
                                                   (rule "eqSymm" (formula "10") (term "1,0,0"))
                                                   (rule "replace_known_left" (formula "9") (term "0") (ifseqformula "8"))
                                                   (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "commute_or" (formula "34") (term "0,0"))
                                                   (rule "commute_or_2" (formula "33") (term "0"))
                                                   (rule "commute_or" (formula "17") (term "0,0"))
                                                   (rule "commute_or_2" (formula "32") (term "0"))
                                                   (rule "ifthenelse_split" (formula "3") (term "0"))
                                                   (branch "self.electionID.<created> = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "45") (term "0") (ifseqformula "4"))
                                                      (builtin "One Step Simplification" (formula "45"))
                                                      (rule "closeTrue" (formula "45"))
                                                   )
                                                   (branch "self.electionID.<created> = TRUE FALSE"
                                                      (rule "referencedObjectIsCreatedRight" (formula "35") (ifseqformula "39"))
                                                      (rule "close" (formula "35") (ifseqformula "12"))
                                                   )
                                                )
                                                (branch "self.encrypted.<created> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "41"))
                                                   (rule "close" (formula "36") (ifseqformula "13"))
                                                )
                                             )
                                             (branch "self.chosen.<created> = TRUE FALSE"
                                                (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "42"))
                                                (rule "close" (formula "36") (ifseqformula "13"))
                                             )
                                          )
                                          (branch "self.encrypted[i_9].length ≥ 1 FALSE"
                                             (rule "eqSymm" (formula "8"))
                                             (builtin "One Step Simplification" (formula "8"))
                                             (rule "inEqSimp_geqRight" (formula "35"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_notGeq" (formula "9") (term "0"))
                                             (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                                             (rule "add_literals" (formula "9") (term "0,0,0"))
                                             (rule "add_zero_left" (formula "9") (term "0,0"))
                                             (rule "arrayLengthIsAShort" (formula "23") (term "1,0,1,0,0"))
                                             (builtin "One Step Simplification" (formula "23"))
                                             (rule "true_left" (formula "23"))
                                             (rule "arrayLengthNotNegative" (formula "23") (term "1,0,1,0,0"))
                                             (rule "inEqSimp_subsumption1" (formula "23") (ifseqformula "6"))
                                             (rule "leq_literals" (formula "23") (term "0"))
                                             (builtin "One Step Simplification" (formula "23"))
                                             (rule "true_left" (formula "23"))
                                             (rule "ifthenelse_split" (formula "3") (term "0"))
                                             (branch "self.chosen.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "51") (term "1,2,1,0,0,0,1,0,0,1") (ifseqformula "4"))
                                                (rule "applyEqReverse" (formula "51") (term "1,2,1,0,0,0,0") (ifseqformula "4"))
                                                (rule "applyEqReverse" (formula "51") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "4"))
                                                (rule "applyEqReverse" (formula "51") (term "0,1,1,0,0,0,1,0,0,1") (ifseqformula "4"))
                                                (rule "applyEqReverse" (formula "51") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "4"))
                                                (rule "applyEqReverse" (formula "51") (term "0,1,1,0,0,0,0") (ifseqformula "4"))
                                                (rule "hideAuxiliaryEq" (formula "4"))
                                                (rule "ifthenelse_split" (formula "8") (term "0"))
                                                (branch "self.encrypted.<created> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "11") (term "0,1,1,1,0,1,1,0,0") (ifseqformula "9"))
                                                   (rule "applyEqReverse" (formula "51") (term "0,0,0,1,0") (ifseqformula "9"))
                                                   (rule "applyEqReverse" (formula "11") (term "1,1,1,1,0,0") (ifseqformula "9"))
                                                   (rule "applyEqReverse" (formula "51") (term "1,1,1,1,0,1") (ifseqformula "9"))
                                                   (rule "applyEqReverse" (formula "11") (term "0,0,0,1,1,0") (ifseqformula "9"))
                                                   (rule "applyEqReverse" (formula "10") (term "0,0,0") (ifseqformula "9"))
                                                   (rule "applyEqReverse" (formula "51") (term "0,1,1,0") (ifseqformula "9"))
                                                   (rule "applyEqReverse" (formula "11") (term "0,1,1,1,0") (ifseqformula "9"))
                                                   (rule "applyEqReverse" (formula "51") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "9"))
                                                   (rule "applyEqReverse" (formula "10") (term "0,0,1") (ifseqformula "9"))
                                                   (rule "hideAuxiliaryEq" (formula "9"))
                                                   (rule "eqSymm" (formula "10") (term "1,0,0"))
                                                   (rule "replace_known_left" (formula "9") (term "0") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "inEqSimp_contradInEq0" (formula "9") (term "0,1,1,0") (ifseqformula "1"))
                                                   (rule "qeq_literals" (formula "9") (term "0,0,1,1,0"))
                                                   (builtin "One Step Simplification" (formula "9"))
                                                   (rule "inEqSimp_contradInEq0" (formula "49") (term "0,1,0") (ifseqformula "1"))
                                                   (rule "qeq_literals" (formula "49") (term "0,0,1,0"))
                                                   (builtin "One Step Simplification" (formula "49"))
                                                   (rule "commute_or" (formula "34") (term "0,0"))
                                                   (rule "commute_or_2" (formula "33") (term "0"))
                                                   (rule "commute_or" (formula "17") (term "0,0"))
                                                   (rule "commute_or_2" (formula "32") (term "0"))
                                                   (rule "ifthenelse_split" (formula "4") (term "0"))
                                                   (branch "self.electionID.<created> = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "45") (term "0") (ifseqformula "5"))
                                                      (builtin "One Step Simplification" (formula "45"))
                                                      (rule "closeTrue" (formula "45"))
                                                   )
                                                   (branch "self.electionID.<created> = TRUE FALSE"
                                                      (rule "referencedObjectIsCreatedRight" (formula "35") (ifseqformula "39"))
                                                      (rule "close" (formula "35") (ifseqformula "12"))
                                                   )
                                                )
                                                (branch "self.encrypted.<created> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "41"))
                                                   (rule "close" (formula "36") (ifseqformula "13"))
                                                )
                                             )
                                             (branch "self.chosen.<created> = TRUE FALSE"
                                                (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "42"))
                                                (rule "close" (formula "36") (ifseqformula "13"))
                                             )
                                          )
                                       )
                                       (branch "self.electionID.length ≥ 1 FALSE"
                                          (rule "inEqSimp_geqRight" (formula "34"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "6"))
                                          (rule "times_zero_2" (formula "6") (term "1,0"))
                                          (rule "add_zero_right" (formula "6") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                                          (rule "mul_literals" (formula "6") (term "1"))
                                          (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "6"))
                                          (rule "qeq_literals" (formula "5") (term "0"))
                                          (builtin "One Step Simplification" (formula "5"))
                                          (rule "closeFalse" (formula "5"))
                                       )
                                    )
                                 )
                              )
                              (branch "CUT: array2seq(heapAfter_splidAndCheck, self.encrypted[i_9]@heapAfter_splidAndCheck) = array2seq(heap, self.encrypted[i_9]) FALSE"
                                 (rule "equalityToSeqGetAndSeqLenRight" (formula "23") (inst "iv=iv") (userinteraction))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1") (ifseqformula "17"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "eqSymm" (formula "29"))
                                 (rule "eqSymm" (formula "15"))
                                 (rule "eqSymm" (formula "21"))
                                 (rule "eqSymm" (formula "14"))
                                 (rule "eqSymm" (formula "13"))
                                 (rule "eqSymm" (formula "12"))
                                 (rule "eqSymm" (formula "11"))
                                 (rule "eqSymm" (formula "9"))
                                 (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "28"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "26"))
                                 (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "25")))
                                 (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "2"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0"))
                                 (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "1"))
                                 (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "14"))
                                 (rule "applyEq" (formula "11") (term "1") (ifseqformula "15"))
                                 (rule "applyEq" (formula "12") (term "1,1,0") (ifseqformula "15"))
                                 (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "13"))
                                 (rule "applyEq" (formula "14") (term "1") (ifseqformula "13"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1"))
                                 (rule "mul_literals" (formula "24") (term "0,1,1,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0"))
                                 (rule "array2seqDef" (formula "24") (term "0,1,1,0,1") (inst "u=u"))
                                 (rule "eqSymm" (formula "24") (term "1,0,1"))
                                 (rule "getOfSeqDef" (formula "24") (term "0,1,0,1"))
                                 (rule "castDel" (formula "24") (term "1,0,1,0,1"))
                                 (rule "castDel" (formula "24") (term "2,0,1,0,1"))
                                 (rule "add_zero_right" (formula "24") (term "0,2,1,0,1,0,1"))
                                 (rule "polySimp_elimSub" (formula "24") (term "1,1,0,0,1,0,1"))
                                 (rule "mul_literals" (formula "24") (term "1,1,1,0,0,1,0,1"))
                                 (rule "add_zero_right" (formula "24") (term "1,1,0,0,1,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,1,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1,0,1"))
                                 (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1,0,1"))
                                 (rule "mul_literals" (formula "24") (term "0,1,1,0,0,1,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1,0,1"))
                                 (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1,0,1"))
                                 (rule "array2seqDef" (formula "24") (term "0,0,0") (inst "u=u"))
                                 (rule "lenOfSeqDef" (formula "24") (term "0,0"))
                                 (rule "polySimp_elimSub" (formula "24") (term "1,0,0"))
                                 (rule "mul_literals" (formula "24") (term "1,1,0,0"))
                                 (rule "add_zero_right" (formula "24") (term "1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0"))
                                 (rule "add_zero_right" (formula "24") (term "0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "24") (term "0,0,0,0"))
                                 (rule "array2seqDef" (formula "24") (term "0,1,0") (inst "u=u"))
                                 (rule "eqSymm" (formula "24") (term "0"))
                                 (rule "lenOfSeqDef" (formula "24") (term "0,0"))
                                 (rule "polySimp_elimSub" (formula "24") (term "1,0,0"))
                                 (rule "times_zero_2" (formula "24") (term "1,1,0,0"))
                                 (rule "add_zero_right" (formula "24") (term "1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0"))
                                 (rule "add_zero_right" (formula "24") (term "0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "0,0,0,0"))
                                 (rule "eqSymm" (formula "24") (term "0"))
                                 (rule "polySimp_elimOne" (formula "24") (term "0,0,1,0"))
                                 (rule "nonNull" (formula "23") (inst "i=i"))
                                 (rule "sub_literals" (formula "23") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "26")))
                                 (rule "greater_literals" (formula "23") (term "0"))
                                 (builtin "One Step Simplification" (formula "23"))
                                 (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                                 (rule "array2seqDef" (formula "29") (term "0,0,0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "29") (term "1,0,0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "29") (term "1") (inst "u=u"))
                                 (rule "eqSymm" (formula "29"))
                                 (rule "array2seqDef" (formula "15") (term "0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "15") (term "1") (inst "u=u"))
                                 (rule "narrowSelectArrayType" (formula "15") (term "2,1") (ifseqformula "3") (ifseqformula "28"))
                                 (rule "array2seqDef" (formula "12") (term "0,1,0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "12") (term "1") (inst "u=u"))
                                 (rule "eqSymm" (formula "12"))
                                 (rule "array2seqDef" (formula "9") (term "1,0,0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "9") (term "0,0,0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "9") (term "1") (inst "u=u"))
                                 (rule "eqSymm" (formula "9"))
                                 (rule "array2seqDef" (formula "11") (term "1") (inst "u=u"))
                                 (rule "eqSymm" (formula "11"))
                                 (rule "narrowSelectArrayType" (formula "11") (term "2,0") (ifseqformula "3") (ifseqformula "28"))
                                 (rule "applyEq" (formula "15") (term "1") (ifseqformula "11"))
                                 (rule "array2seqDef" (formula "24") (term "0,1,1,1,0,0,1") (inst "u=u"))
                                 (rule "lenOfSeqDef" (formula "24") (term "1,1,1,0,0,1"))
                                 (rule "polySimp_elimSub" (formula "24") (term "1,1,1,1,0,0,1"))
                                 (rule "times_zero_2" (formula "24") (term "1,1,1,1,1,0,0,1"))
                                 (rule "add_zero_right" (formula "24") (term "1,1,1,1,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "24") (term "0,1,1,1,0,0,1"))
                                 (rule "add_zero_right" (formula "24") (term "0,0,1,1,1,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,1,1,0,0,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0,1,1,1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "0,0,1,1,1,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "24") (term "0,0,1,1,1,0,0,1"))
                                 (rule "array2seqDef" (formula "24") (term "0,1,1,0,1") (inst "u=u"))
                                 (rule "eqSymm" (formula "24") (term "1,0,1"))
                                 (rule "getOfSeqDef" (formula "24") (term "0,1,0,1"))
                                 (rule "castDel" (formula "24") (term "2,0,1,0,1"))
                                 (rule "castDel" (formula "24") (term "1,0,1,0,1"))
                                 (rule "add_zero_right" (formula "24") (term "0,2,1,0,1,0,1"))
                                 (rule "polySimp_elimSub" (formula "24") (term "1,1,0,0,1,0,1"))
                                 (rule "times_zero_2" (formula "24") (term "1,1,1,0,0,1,0,1"))
                                 (rule "add_zero_right" (formula "24") (term "1,1,0,0,1,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,1,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1,0,1"))
                                 (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1,0,1"))
                                 (rule "mul_literals" (formula "24") (term "0,1,1,0,0,1,0,1"))
                                 (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1,0,1"))
                                 (rule "equalityToSeqGetAndSeqLenRight" (formula "29") (inst "iv=iv"))
                                 (rule "lenOfSeqDef" (formula "29") (term "0,0"))
                                 (rule "eqSymm" (formula "29") (term "0"))
                                 (rule "polySimp_elimSub" (formula "29") (term "1,1,0"))
                                 (rule "times_zero_2" (formula "29") (term "1,1,1,0"))
                                 (rule "add_zero_right" (formula "29") (term "1,1,0"))
                                 (rule "getOfSeqDef" (formula "29") (term "0,1,0,1"))
                                 (rule "castDel" (formula "29") (term "2,0,1,0,1"))
                                 (rule "castDel" (formula "29") (term "1,0,1,0,1"))
                                 (rule "add_zero_right" (formula "29") (term "0,2,1,0,1,0,1"))
                                 (rule "eqSymm" (formula "29") (term "1,0,1"))
                                 (rule "polySimp_elimSub" (formula "29") (term "1,1,0,1,1,0,1"))
                                 (rule "times_zero_2" (formula "29") (term "1,1,1,0,1,1,0,1"))
                                 (rule "add_zero_right" (formula "29") (term "1,1,0,1,1,0,1"))
                                 (rule "lenOfSeqDef" (formula "29") (term "1,1,0,0,1"))
                                 (rule "polySimp_elimSub" (formula "29") (term "1,1,1,0,0,1"))
                                 (rule "times_zero_2" (formula "29") (term "1,1,1,1,0,0,1"))
                                 (rule "add_zero_right" (formula "29") (term "1,1,1,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "29") (term "0,1,0"))
                                 (rule "add_zero_right" (formula "29") (term "0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,1,1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,1,1,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "29") (term "0,1,1,0,0,1"))
                                 (rule "add_zero_right" (formula "29") (term "0,0,1,1,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,1,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,1,1,0,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "29") (term "0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "29") (term "0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "29") (term "0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,1,1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,1,1,0,1"))
                                 (rule "polySimp_rightDist" (formula "29") (term "1,1,0,1,1,0,1"))
                                 (rule "mul_literals" (formula "29") (term "0,1,1,0,1,1,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,1,1,0,1"))
                                 (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,1,1,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,1"))
                                 (rule "mul_literals" (formula "29") (term "0,1,1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "29") (term "0,1,1,1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "29") (term "0,0,1,1,1,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "29") (term "0,0,1,1,1,0,0,1"))
                                 (rule "array2seqDef" (formula "12") (term "1,1,1") (inst "u=u"))
                                 (rule "narrowSelectArrayType" (formula "12") (term "2,1,1,1") (ifseqformula "3") (ifseqformula "28"))
                                 (rule "applyEq" (formula "12") (term "1,1,1") (ifseqformula "11"))
                                 (rule "array2seqDef" (formula "12") (term "0,1") (inst "u=u"))
                                 (rule "eqSymm" (formula "12"))
                                 (rule "pullOutSelect" (formula "21") (term "1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_27"))
                                 (rule "simplifySelectOfAnonEQ" (formula "21") (ifseqformula "18"))
                                 (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "28")) (ifInst ""  (formula "4")))
                                 (rule "applyEqReverse" (formula "22") (term "1,0") (ifseqformula "21"))
                                 (rule "hideAuxiliaryEq" (formula "21"))
                                 (rule "pullOutSelect" (formula "2") (term "0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_24"))
                                 (rule "applyEq" (formula "30") (term "1,0,1,1,1,1,0,0,1") (ifseqformula "2"))
                                 (rule "applyEq" (formula "30") (term "1,0,1,1,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "25") (term "1,0,1,1,1,0,0,1,0,1") (ifseqformula "2"))
                                 (rule "applyEq" (formula "25") (term "1,0,1,1,1,1,0,0,1") (ifseqformula "2"))
                                 (rule "applyEq" (formula "30") (term "1,1,1,1,1,0,1") (ifseqformula "2"))
                                 (rule "applyEq" (formula "25") (term "1,0,1,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "30") (term "1,0,0,0,1,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "30") (term "1,0,1,1,1,0,1,1,0,1") (ifseqformula "2"))
                                 (rule "applyEq" (formula "30") (term "1,0,0,0,1,1,1,0,0,1") (ifseqformula "2"))
                                 (rule "applyEq" (formula "25") (term "1,1,1,0,1,0,1") (ifseqformula "2"))
                                 (rule "applyEq" (formula "25") (term "1,0,0,0,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "25") (term "1,0,0,0,1,1,1,0,0,1") (ifseqformula "2"))
                                 (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "19"))
                                 (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "28")) (ifInst ""  (formula "5")))
                                 (rule "applyEqReverse" (formula "3") (term "0,0") (ifseqformula "2"))
                                 (rule "applyEqReverse" (formula "30") (term "1,0,1,1,1,1,0,0,1") (ifseqformula "2"))
                                 (rule "applyEqReverse" (formula "30") (term "1,0,1,1,0") (ifseqformula "2"))
                                 (rule "applyEqReverse" (formula "25") (term "1,0,1,1,1,0,0,1,0,1") (ifseqformula "2"))
                                 (rule "applyEqReverse" (formula "25") (term "1,0,1,1,1,1,0,0,1") (ifseqformula "2"))
                                 (rule "applyEqReverse" (formula "30") (term "1,1,1,1,1,0,1") (ifseqformula "2"))
                                 (rule "applyEqReverse" (formula "25") (term "1,0,1,0,0") (ifseqformula "2"))
                                 (rule "applyEqReverse" (formula "30") (term "1,0,0,0,1,0") (ifseqformula "2"))
                                 (rule "applyEqReverse" (formula "30") (term "1,0,1,1,1,0,1,1,0,1") (ifseqformula "2"))
                                 (rule "applyEqReverse" (formula "30") (term "1,0,0,0,1,1,1,0,0,1") (ifseqformula "2"))
                                 (rule "applyEqReverse" (formula "25") (term "1,1,1,0,1,0,1") (ifseqformula "2"))
                                 (rule "applyEqReverse" (formula "25") (term "1,0,0,0,0,0") (ifseqformula "2"))
                                 (rule "applyEqReverse" (formula "25") (term "1,0,0,0,1,1,1,0,0,1") (ifseqformula "2"))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "applyEq" (formula "2") (term "0") (ifseqformula "13"))
                                 (rule "eqSeqDef2" (formula "9") (inst "iv=iv") (ifseqformula "9"))
                                 (builtin "One Step Simplification" (formula "9"))
                                 (rule "true_left" (formula "9"))
                                 (rule "eqSeqDef" (formula "11") (inst "iv=iv"))
                                 (rule "andLeft" (formula "11"))
                                 (rule "lenOfSeqDef" (formula "11") (term "1"))
                                 (rule "polySimp_elimSub" (formula "11") (term "1,1"))
                                 (rule "times_zero_2" (formula "11") (term "1,1,1"))
                                 (rule "add_zero_right" (formula "11") (term "1,1"))
                                 (rule "getOfSeqDef" (formula "12") (term "1,1,0"))
                                 (rule "castDel" (formula "12") (term "1,1,1,0"))
                                 (rule "castDel" (formula "12") (term "2,1,1,0"))
                                 (rule "add_zero_right" (formula "12") (term "0,2,1,1,1,0"))
                                 (rule "polySimp_elimSub" (formula "12") (term "1,1,0,1,1,0"))
                                 (rule "times_zero_2" (formula "12") (term "1,1,1,0,1,1,0"))
                                 (rule "add_zero_right" (formula "12") (term "1,1,0,1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                                 (rule "polySimp_addComm1" (formula "12") (term "0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1"))
                                 (rule "add_zero_right" (formula "11") (term "0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,1,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,1,1,0"))
                                 (rule "applyEq" (formula "12") (term "0,1,0,1,0,0") (ifseqformula "11"))
                                 (rule "polySimp_addComm1" (formula "12") (term "0,1,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "0,0,1"))
                                 (rule "polySimp_elimOne" (formula "11") (term "0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "12") (term "1,1,0,1,1,0"))
                                 (rule "mul_literals" (formula "12") (term "0,1,1,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,1,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "0,0,1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "12") (term "0,0,1,1,1,0,0"))
                                 (rule "eqSeqDef2" (formula "15") (inst "iv=iv") (ifseqformula "15"))
                                 (builtin "One Step Simplification" (formula "15"))
                                 (rule "true_left" (formula "15"))
                                 (rule "eqSeqDef2" (formula "10") (inst "iv=iv") (ifseqformula "10"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "true_left" (formula "10"))
                                 (rule "pullOutSelect" (formula "27") (term "1,2,0,0,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_21"))
                                 (rule "applyEq" (formula "28") (term "0,1,0,0,0,0,1,0,1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "28") (term "1,2,0,0,0,0,1,0,1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "28") (term "0,1,0,0,0,0,0") (ifseqformula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")) (ifInst ""  (formula "5")))
                                 (rule "applyEqReverse" (formula "28") (term "1,2,0,0,0,0,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "28") (term "0,1,0,0,0,0,1,0,1") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "28") (term "1,2,0,0,0,0,1,0,1") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "28") (term "0,1,0,0,0,0,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "27") (term "1,0,1,1,0,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_22"))
                                 (rule "applyEq" (formula "28") (term "1,1,2,1,0,0,0,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "28") (term "1,1,2,1,0,0,0,1,0,1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "28") (term "1,0,1,1,0,0,0,1,0,1") (ifseqformula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")) (ifInst ""  (formula "5")))
                                 (rule "applyEqReverse" (formula "28") (term "1,0,1,1,0,0,0,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "28") (term "1,1,2,1,0,0,0,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "28") (term "1,1,2,1,0,0,0,1,0,1") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "28") (term "1,0,1,1,0,0,0,1,0,1") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "27") (term "0,1,1,1,1,0,0,1") (inst "selectSK=arr_387"))
                                 (rule "applyEq" (formula "23") (term "0,1,0,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "28") (term "0,0,0,1,1,1,0,0,1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "28") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "23") (term "1,1,0,1,0,1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "28") (term "0,1,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "23") (term "0,0,0,1,1,1,0,0,1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "23") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "23") (term "0,0,0,0,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "28") (term "1,1,1,1,0,1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "23") (term "0,1,1,1,1,0,0,1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "28") (term "0,0,0,1,0") (ifseqformula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "eqSymm" (formula "23") (term "1,0,1"))
                                 (rule "eqSymm" (formula "23") (term "0"))
                                 (rule "pullOutSelect" (formula "28") (term "0,1,1,0,0,0,0") (inst "selectSK=arr_388"))
                                 (rule "applyEq" (formula "29") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "29") (term "1,2,1,0,0,0,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "29") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "nnf_imp2or" (formula "23") (term "0"))
                                 (rule "Definition_axiom_for_ghostFieldsNonNull_in_verif_selectvoting_system_core_MixServer" (formula "10") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "andLeft" (formula "10"))
                                 (rule "andLeft" (formula "10"))
                                 (rule "andLeft" (formula "10"))
                                 (rule "andLeft" (formula "10"))
                                 (rule "andLeft" (formula "10"))
                                 (rule "notLeft" (formula "12"))
                                 (rule "notLeft" (formula "11"))
                                 (rule "andLeft" (formula "10"))
                                 (rule "notLeft" (formula "11"))
                                 (rule "andLeft" (formula "10"))
                                 (rule "notLeft" (formula "10"))
                                 (rule "notLeft" (formula "10"))
                                 (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "26"))
                                 (builtin "One Step Simplification" (formula "2"))
                                 (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "27"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "ifthenelse_negated" (formula "2") (term "0"))
                                 (rule "ifthenelse_negated" (formula "1") (term "0"))
                                 (rule "narrowSelectArrayType" (formula "15") (term "1,1,1,0") (ifseqformula "5") (ifseqformula "30"))
                                 (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                                 (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                                 (rule "applyEq" (formula "12") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                                 (rule "nnf_imp2or" (formula "31") (term "0,1"))
                                 (rule "nnf_imp2or" (formula "36") (term "0,1"))
                                 (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                 (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                 (rule "nnf_imp2or" (formula "15") (term "0"))
                                 (rule "nnf_imp2or" (formula "10") (term "0"))
                                 (rule "nnf_imp2or" (formula "11") (term "0"))
                                 (rule "nnf_imp2or" (formula "12") (term "0"))
                                 (rule "nnf_notAnd" (formula "31") (term "0,0,1"))
                                 (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0,1"))
                                 (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0,1"))
                                 (rule "add_literals" (formula "31") (term "0,0,0,1,0,0,1"))
                                 (rule "add_zero_left" (formula "31") (term "0,0,1,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0,1"))
                                 (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0,1"))
                                 (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0,1"))
                                 (rule "add_literals" (formula "31") (term "0,0,0,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0,1"))
                                 (rule "mul_literals" (formula "31") (term "1,0,0,0,1"))
                                 (rule "nnf_notAnd" (formula "36") (term "0,0,1"))
                                 (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,1"))
                                 (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,1"))
                                 (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,1"))
                                 (rule "add_zero_left" (formula "36") (term "0,0,1,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0,1"))
                                 (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0,1"))
                                 (rule "times_zero_1" (formula "36") (term "1,0,0,0,0,0,1"))
                                 (rule "add_zero_right" (formula "36") (term "0,0,0,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0,1"))
                                 (rule "mul_literals" (formula "36") (term "1,0,0,0,1"))
                                 (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                                 (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                 (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "10") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                                 (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                 (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                                 (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "18") (ifseqformula "7"))
                                 (rule "andLeft" (formula "18"))
                                 (rule "notLeft" (formula "19"))
                                 (rule "andLeft" (formula "18"))
                                 (rule "andLeft" (formula "18"))
                                 (rule "notLeft" (formula "20"))
                                 (rule "notLeft" (formula "19"))
                                 (rule "andLeft" (formula "18"))
                                 (rule "andLeft" (formula "18"))
                                 (rule "notLeft" (formula "20"))
                                 (rule "andLeft" (formula "18"))
                                 (rule "andLeft" (formula "18"))
                                 (rule "andLeft" (formula "18"))
                                 (rule "notLeft" (formula "19"))
                                 (rule "notLeft" (formula "18"))
                                 (rule "narrowSelectArrayType" (formula "15") (term "2,0,1,0,0,1,0") (ifseqformula "5") (ifseqformula "31"))
                                 (rule "narrowSelectArrayType" (formula "14") (term "2,0,1,0,0") (ifseqformula "5") (ifseqformula "31"))
                                 (rule "nonNull" (formula "20") (inst "i=i"))
                                 (rule "sub_literals" (formula "20") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "33")))
                                 (rule "greater_literals" (formula "20") (term "0"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "narrowSelectArrayType" (formula "20") (term "0,0,1,0") (ifseqformula "5") (ifseqformula "33"))
                                 (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "19") (inst "i=i"))
                                 (rule "sub_literals" (formula "19") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "32")))
                                 (rule "greater_literals" (formula "19") (term "0"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "narrowSelectArrayType" (formula "19") (term "0,0,1,0") (ifseqformula "5") (ifseqformula "32"))
                                 (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                                 (rule "applyEq" (formula "19") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "18") (inst "i=i"))
                                 (rule "greater_literals" (formula "18") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "34")))
                                 (rule "sub_literals" (formula "18") (term "2,1,0"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "narrowSelectArrayType" (formula "18") (term "0,0,1,0") (ifseqformula "5") (ifseqformula "34"))
                                 (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                                 (rule "applyEq" (formula "18") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                                 (rule "nnf_imp2or" (formula "20") (term "0"))
                                 (rule "nnf_imp2or" (formula "19") (term "0"))
                                 (rule "nnf_imp2or" (formula "18") (term "0"))
                                 (rule "nnf_notAnd" (formula "20") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                                 (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "19") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                                 (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "18") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                                 (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                                 (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "23") (ifseqformula "7"))
                                 (rule "replaceKnownSelect_taclet11100000020_5" (formula "23") (term "0,0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet11100000020_6" (formula "23") (term "0,0,1"))
                                 (rule "replaceKnownSelect_taclet11100000020_7" (formula "23") (term "1,1,0,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet11100000020_8" (formula "23") (term "1,1,0,0,0,0"))
                                 (rule "replaceKnownSelect_taclet11100000020_3" (formula "23") (term "1,1,0,0,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet11100000020_4" (formula "23") (term "1,1,0,0,0,0,0"))
                                 (rule "replaceKnownSelect_taclet11100000020_1" (formula "23") (term "1,1,0,0,0,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet11100000020_2" (formula "23") (term "1,1,0,0,0,0,0,0"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "notLeft" (formula "24"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "notLeft" (formula "24"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "notLeft" (formula "24"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "notLeft" (formula "25"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "notLeft" (formula "24"))
                                 (rule "notLeft" (formula "23"))
                                 (rule "nonNull" (formula "25") (inst "i=i"))
                                 (rule "greater_literals" (formula "25") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "37")))
                                 (rule "sub_literals" (formula "25") (term "2,1,0"))
                                 (builtin "One Step Simplification" (formula "25"))
                                 (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "24") (inst "i=i"))
                                 (rule "greater_literals" (formula "24") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "36")))
                                 (rule "sub_literals" (formula "24") (term "2,1,0"))
                                 (builtin "One Step Simplification" (formula "24"))
                                 (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                                 (rule "applyEq" (formula "24") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "23") (inst "i=i"))
                                 (rule "greater_literals" (formula "23") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "38")))
                                 (rule "sub_literals" (formula "23") (term "2,1,0"))
                                 (builtin "One Step Simplification" (formula "23"))
                                 (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                                 (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                                 (rule "pullOutSelect" (formula "31") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_21"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")) (ifInst ""  (formula "7")))
                                 (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "30") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_21"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")) (ifInst ""  (formula "7")))
                                 (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "29") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_21"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")) (ifInst ""  (formula "7")))
                                 (rule "applyEqReverse" (formula "30") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "28") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_22"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "42")) (ifInst ""  (formula "7")))
                                 (rule "applyEqReverse" (formula "29") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "27") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_21"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")) (ifInst ""  (formula "7")))
                                 (rule "applyEqReverse" (formula "28") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "arrayLengthNotNegative" (formula "17") (term "0"))
                                 (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
                                 (rule "arrayLengthIsAShort" (formula "18") (term "0"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "true_left" (formula "18"))
                                 (rule "arrayLengthNotNegative" (formula "16") (term "0"))
                                 (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
                                 (rule "arrayLengthIsAShort" (formula "16") (term "0"))
                                 (builtin "One Step Simplification" (formula "16"))
                                 (rule "true_left" (formula "16"))
                                 (rule "arrayLengthIsAShort" (formula "16") (term "1"))
                                 (builtin "One Step Simplification" (formula "16"))
                                 (rule "true_left" (formula "16"))
                                 (rule "arrayLengthNotNegative" (formula "16") (term "1"))
                                 (rule "nnf_imp2or" (formula "26") (term "0"))
                                 (rule "nnf_imp2or" (formula "25") (term "0"))
                                 (rule "commute_or_2" (formula "27") (term "0"))
                                 (rule "nnf_imp2or" (formula "24") (term "0"))
                                 (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                 (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                 (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                 (rule "commute_or_2" (formula "10") (term "0"))
                                 (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                 (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "24") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                                 (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                 (rule "commute_or_2" (formula "11") (term "0"))
                                 (rule "commute_or_2" (formula "12") (term "0"))
                                 (rule "commute_or_2" (formula "15") (term "0"))
                                 (rule "ifthenelse_split" (formula "14") (term "1"))
                                 (branch "self.unsigned.length ≥ 1 TRUE"
                                    (rule "replace_known_left" (formula "16") (term "0,1,1,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "equalityToSeqGetAndSeqLenLeft" (formula "24") (inst "iv=iv"))
                                    (rule "andLeft" (formula "24"))
                                    (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                                    (rule "applyEq" (formula "25") (term "0,0,1,0,0,1,0,0") (ifseqformula "26"))
                                    (rule "applyEq" (formula "25") (term "0,0,1,0") (ifseqformula "26"))
                                    (builtin "One Step Simplification" (formula "25"))
                                    (rule "true_left" (formula "25"))
                                    (rule "applyEq" (formula "24") (term "0,0") (ifseqformula "25"))
                                    (builtin "One Step Simplification" (formula "24"))
                                    (rule "true_left" (formula "24"))
                                    (rule "arrayLengthNotNegative" (formula "15") (term "1,0,0,0"))
                                    (rule "arrayLengthIsAShort" (formula "16") (term "1,0,0,0"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "true_left" (formula "16"))
                                    (rule "arrayLengthIsAShort" (formula "16") (term "1,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "true_left" (formula "16"))
                                    (rule "arrayLengthNotNegative" (formula "16") (term "1,0,1,0,0"))
                                    (rule "ifthenelse_split" (formula "40") (term "0,0"))
                                    (branch "self.encrypted[i_9].length ≥ 1 TRUE"
                                       (rule "eqSymm" (formula "41") (term "0"))
                                       (rule "ifthenelse_split" (formula "3") (term "0"))
                                       (branch "self.encrypted.<created> = TRUE TRUE"
                                          (rule "applyEqReverse" (formula "47") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "4"))
                                          (rule "applyEqReverse" (formula "42") (term "0,1,0,0") (ifseqformula "4"))
                                          (builtin "One Step Simplification" (formula "42"))
                                          (rule "applyEqReverse" (formula "47") (term "0,1,1,1,0,0,1") (ifseqformula "4"))
                                          (rule "applyEqReverse" (formula "47") (term "0,1,1,0") (ifseqformula "4"))
                                          (rule "applyEqReverse" (formula "47") (term "0,0,0,1,1,0,0,1") (ifseqformula "4"))
                                          (rule "applyEqReverse" (formula "47") (term "1,1,1,1,0,1") (ifseqformula "4"))
                                          (rule "applyEqReverse" (formula "47") (term "0,0,0,1,0") (ifseqformula "4"))
                                          (rule "applyEqReverse" (formula "42") (term "0,0,0,1,1,0,0,1") (ifseqformula "4"))
                                          (rule "applyEqReverse" (formula "42") (term "1,1,1,1,0,1") (ifseqformula "4"))
                                          (rule "applyEqReverse" (formula "42") (term "0,1,1,1,0,0,1") (ifseqformula "4"))
                                          (rule "applyEqReverse" (formula "42") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "4"))
                                          (rule "applyEqReverse" (formula "42") (term "0,0,0,0") (ifseqformula "4"))
                                          (rule "hideAuxiliaryEq" (formula "4"))
                                          (rule "eqSymm" (formula "41") (term "1,0"))
                                          (rule "eqSymm" (formula "41") (term "1,0,1"))
                                          (rule "replace_known_left" (formula "41") (term "0,0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "1")))
                                          (rule "allRight" (formula "41") (inst "sk=iv_48"))
                                          (rule "orRight" (formula "41"))
                                          (rule "orRight" (formula "41"))
                                          (rule "replace_known_left" (formula "48") (term "0,1,1,0,0,1") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "1")))
                                          (rule "inEqSimp_leqRight" (formula "41"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "replace_known_left" (formula "43") (term "0,0,0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "1")))
                                          (rule "inEqSimp_geqRight" (formula "42"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0"))
                                          (rule "inEqSimp_homoInEq0" (formula "43") (term "0,0"))
                                          (rule "eqSymm" (formula "43"))
                                          (rule "polySimp_addComm1" (formula "43") (term "0,0,1"))
                                          (rule "inEqSimp_homoInEq0" (formula "43") (term "0,0"))
                                          (rule "polySimp_addComm1" (formula "43") (term "0,0,0"))
                                          (rule "eqSymm" (formula "43"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "0,0"))
                                          (rule "eqSymm" (formula "43"))
                                          (rule "polySimp_mulComm0" (formula "43") (term "1,0,1"))
                                          (rule "polySimp_rightDist" (formula "43") (term "1,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,1"))
                                          (rule "mul_literals" (formula "43") (term "0,1,0,1"))
                                          (rule "polySimp_elimOne" (formula "43") (term "1,1,0,1"))
                                          (rule "replace_known_left" (formula "43") (term "0,1") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "43"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "43") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "43") (term "1,0,0"))
                                          (rule "mul_literals" (formula "43") (term "0,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "43") (term "1,1,0,0"))
                                          (rule "replace_known_left" (formula "43") (term "0,0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "43"))
                                          (rule "eqSymm" (formula "43"))
                                          (rule "pullOutSelect" (formula "43") (term "0") (inst "selectSK=arr_390"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "eqSymm" (formula "44"))
                                          (rule "ifthenelse_split" (formula "5") (term "0"))
                                          (branch "self.chosen.<created> = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "50") (term "1,2,1,0,0,0,0") (ifseqformula "6"))
                                             (rule "applyEqReverse" (formula "50") (term "0,1,1,0,0,0,0") (ifseqformula "6"))
                                             (rule "applyEqReverse" (formula "50") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "6"))
                                             (rule "applyEqReverse" (formula "50") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "6"))
                                             (rule "hideAuxiliaryEq" (formula "6"))
                                             (rule "commute_or_2" (formula "33") (term "0"))
                                             (rule "commute_or" (formula "34") (term "0,0"))
                                             (rule "commute_or_2" (formula "32") (term "0"))
                                             (rule "commute_or" (formula "14") (term "0,0"))
                                             (rule "commute_or_2" (formula "31") (term "0"))
                                             (rule "commute_or" (formula "15") (term "0,0"))
                                             (rule "commute_or" (formula "16") (term "0,0"))
                                             (rule "commute_or" (formula "22") (term "0,0"))
                                             (rule "lenNonNegative" (formula "21") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "21"))
                                             (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                             (rule "inEqSimp_subsumption1" (formula "21") (ifseqformula "18"))
                                             (rule "leq_literals" (formula "21") (term "0"))
                                             (builtin "One Step Simplification" (formula "21"))
                                             (rule "true_left" (formula "21"))
                                             (rule "commute_or" (formula "33") (term "0,0"))
                                             (rule "commute_or" (formula "32") (term "0,0"))
                                             (rule "commute_or" (formula "31") (term "0,0"))
                                             (rule "ifthenelse_to_or_right" (formula "22") (term "0,0,0"))
                                             (rule "nnf_notAnd" (formula "22") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "22") (term "0,0,0,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "22") (term "0,0,0,1,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "22") (term "0,0,1,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0,0,0"))
                                             (rule "commute_or" (formula "22") (term "0,0"))
                                             (rule "commute_or_2" (formula "22") (term "0"))
                                             (rule "commute_or_2" (formula "22") (term "0,1,0"))
                                             (rule "commute_or" (formula "22") (term "1,1,0"))
                                             (rule "commute_or" (formula "22") (term "0,0,1,0"))
                                             (rule "cnf_rightDist" (formula "22") (term "1,1,0"))
                                             (rule "cnf_rightDist" (formula "22") (term "0"))
                                             (rule "distr_forallAnd" (formula "22"))
                                             (rule "andLeft" (formula "22"))
                                             (rule "commute_or" (formula "23") (term "0"))
                                             (rule "shift_paren_or" (formula "22") (term "0"))
                                             (rule "commute_or_2" (formula "22") (term "0,0"))
                                             (builtin "One Step Simplification" (formula "22"))
                                             (rule "commute_or" (formula "23") (term "1,1,0"))
                                             (rule "shift_paren_or" (formula "22") (term "0,0"))
                                             (rule "commute_or" (formula "22") (term "0,0,0"))
                                             (builtin "One Step Simplification" (formula "22"))
                                             (rule "cnf_rightDist" (formula "23") (term "0"))
                                             (rule "distr_forallAnd" (formula "23"))
                                             (rule "andLeft" (formula "23"))
                                             (rule "commute_or_2" (formula "23") (term "0"))
                                             (rule "shift_paren_or" (formula "24") (term "0"))
                                             (rule "commute_or_2" (formula "24") (term "0,0"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "24") (term "0"))
                                             (rule "inEqSimp_homoInEq1" (formula "24") (term "1,0"))
                                             (rule "polySimp_pullOutFactor1" (formula "24") (term "0,1,0"))
                                             (rule "add_literals" (formula "24") (term "1,0,1,0"))
                                             (rule "times_zero_1" (formula "24") (term "0,1,0"))
                                             (rule "leq_literals" (formula "24") (term "1,0"))
                                             (builtin "One Step Simplification" (formula "24"))
                                             (rule "true_left" (formula "24"))
                                             (rule "shift_paren_or" (formula "23") (term "0,0"))
                                             (rule "commute_or" (formula "23") (term "0,0,0"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "23") (term "0,0"))
                                             (rule "add_literals" (formula "23") (term "1,1,0,0"))
                                             (rule "qeq_literals" (formula "23") (term "1,0,0"))
                                             (builtin "One Step Simplification" (formula "23"))
                                             (rule "true_left" (formula "23"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "23") (term "0,0") (ifseqformula "9"))
                                             (rule "replace_known_right" (formula "23") (term "0") (ifseqformula "40"))
                                             (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "6")))
                                             (rule "true_left" (formula "23"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "25") (term "0,0") (ifseqformula "9"))
                                             (rule "replace_known_right" (formula "25") (term "0") (ifseqformula "42"))
                                             (builtin "One Step Simplification" (formula "25"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "23") (term "0,1") (ifseqformula "9"))
                                             (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "5"))
                                             (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "42")))
                                             (rule "true_left" (formula "23"))
                                             (rule "arrayLengthIsAShort" (formula "35") (term "1,1,0"))
                                             (builtin "One Step Simplification" (formula "35"))
                                             (rule "true_left" (formula "35"))
                                             (rule "arrayLengthNotNegative" (formula "35") (term "1,1,0"))
                                             (rule "arrayLengthIsAShort" (formula "18") (term "0"))
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "true_left" (formula "18"))
                                             (rule "arrayLengthNotNegative" (formula "18") (term "0"))
                                             (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "19"))
                                             (rule "leq_literals" (formula "18") (term "0"))
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "true_left" (formula "18"))
                                             (rule "ifthenelse_split" (formula "1") (term "0"))
                                             (branch " ¬self.encrypted[i_9] = null ∧ ¬self.encrypted[i_9].<created> = TRUE TRUE"
                                                (rule "andLeft" (formula "1"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "38"))
                                                (rule "close" (formula "37") (ifseqformula "9"))
                                             )
                                             (branch " ¬self.encrypted[i_9] = null ∧ ¬self.encrypted[i_9].<created> = TRUE FALSE"
                                                (rule "close" (formula "47") (ifseqformula "1"))
                                             )
                                          )
                                          (branch "self.chosen.<created> = TRUE FALSE"
                                             (rule "referencedObjectIsCreatedRight" (formula "35") (ifseqformula "41"))
                                             (rule "close" (formula "35") (ifseqformula "9"))
                                          )
                                       )
                                       (branch "self.encrypted.<created> = TRUE FALSE"
                                          (rule "referencedObjectIsCreatedRight" (formula "32") (ifseqformula "37"))
                                          (rule "close" (formula "32") (ifseqformula "6"))
                                       )
                                    )
                                    (branch "self.encrypted[i_9].length ≥ 1 FALSE"
                                       (rule "eqSymm" (formula "41") (term "0"))
                                       (builtin "One Step Simplification" (formula "41"))
                                       (rule "inEqSimp_geqRight" (formula "40"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_notGeq" (formula "41") (term "0,0"))
                                       (rule "mul_literals" (formula "41") (term "1,0,0,0,0"))
                                       (rule "add_literals" (formula "41") (term "0,0,0,0"))
                                       (rule "add_zero_left" (formula "41") (term "0,0,0"))
                                       (rule "ifthenelse_split" (formula "3") (term "0"))
                                       (branch "self.encrypted.<created> = TRUE TRUE"
                                          (rule "applyEqReverse" (formula "42") (term "0,0,1,0") (ifseqformula "4"))
                                          (rule "applyEqReverse" (formula "47") (term "0,0,0,1,0") (ifseqformula "4"))
                                          (rule "applyEqReverse" (formula "42") (term "0,0,0,1,1,0,0,1") (ifseqformula "4"))
                                          (rule "applyEqReverse" (formula "42") (term "0,1,1,1,0,0,1") (ifseqformula "4"))
                                          (rule "applyEqReverse" (formula "42") (term "1,1,1,1,0,1") (ifseqformula "4"))
                                          (rule "applyEqReverse" (formula "47") (term "1,1,1,1,0,1") (ifseqformula "4"))
                                          (rule "applyEqReverse" (formula "47") (term "0,1,1,0") (ifseqformula "4"))
                                          (rule "applyEqReverse" (formula "47") (term "0,0,0,1,1,0,0,1") (ifseqformula "4"))
                                          (rule "applyEqReverse" (formula "47") (term "0,1,1,1,0,0,1") (ifseqformula "4"))
                                          (rule "applyEqReverse" (formula "42") (term "0,0,0,0") (ifseqformula "4"))
                                          (rule "applyEqReverse" (formula "47") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "4"))
                                          (rule "applyEqReverse" (formula "42") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "4"))
                                          (rule "hideAuxiliaryEq" (formula "4"))
                                          (rule "eqSymm" (formula "41") (term "1,0,1"))
                                          (rule "replace_known_left" (formula "41") (term "0,0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "41"))
                                          (rule "allRight" (formula "41") (inst "sk=iv_47"))
                                          (rule "orRight" (formula "41"))
                                          (rule "orRight" (formula "41"))
                                          (rule "inEqSimp_leqRight" (formula "41"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "replace_known_left" (formula "43") (term "0,0,1") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "1")))
                                          (rule "inEqSimp_geqRight" (formula "42"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0"))
                                          (rule "inEqSimp_homoInEq0" (formula "43") (term "0,1"))
                                          (rule "polySimp_addComm1" (formula "43") (term "0,0,1"))
                                          (rule "inEqSimp_homoInEq0" (formula "43") (term "0,0"))
                                          (rule "polySimp_addComm1" (formula "43") (term "0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "0,1"))
                                          (rule "polySimp_mulComm0" (formula "43") (term "1,0,1"))
                                          (rule "polySimp_rightDist" (formula "43") (term "1,0,1"))
                                          (rule "mul_literals" (formula "43") (term "0,1,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,1"))
                                          (rule "polySimp_elimOne" (formula "43") (term "1,1,0,1"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "43") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "43") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "43") (term "0,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "43") (term "1,1,0,0"))
                                          (rule "inEqSimp_contradInEq0" (formula "48") (term "0,1,1,0,0,1") (ifseqformula "3"))
                                          (rule "qeq_literals" (formula "48") (term "0,0,1,1,0,0,1"))
                                          (builtin "One Step Simplification" (formula "48"))
                                          (rule "inEqSimp_contradInEq0" (formula "1") (term "0,0") (ifseqformula "3"))
                                          (rule "qeq_literals" (formula "1") (term "0,0,0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "1"))
                                          (rule "times_zero_2" (formula "1") (term "1,0"))
                                          (rule "add_zero_right" (formula "1") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                          (rule "mul_literals" (formula "1") (term "1"))
                                          (rule "inEqSimp_contradInEq0" (formula "48") (term "0,1,0") (ifseqformula "3"))
                                          (rule "qeq_literals" (formula "48") (term "0,0,1,0"))
                                          (builtin "One Step Simplification" (formula "48"))
                                          (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "2") (term "0"))
                                          (builtin "One Step Simplification" (formula "2"))
                                          (rule "closeFalse" (formula "2"))
                                       )
                                       (branch "self.encrypted.<created> = TRUE FALSE"
                                          (rule "referencedObjectIsCreatedRight" (formula "32") (ifseqformula "37"))
                                          (rule "close" (formula "32") (ifseqformula "6"))
                                       )
                                    )
                                 )
                                 (branch "self.unsigned.length ≥ 1 FALSE"
                                    (rule "replace_known_right" (formula "15") (term "0,1,1,0") (ifseqformula "28"))
                                    (builtin "One Step Simplification" (formula "15"))
                                    (rule "inEqSimp_geqRight" (formula "28"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "equalityToSeqGetAndSeqLenLeft" (formula "24") (inst "iv=iv"))
                                    (rule "andLeft" (formula "24"))
                                    (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                                    (rule "applyEq" (formula "25") (term "0,0,1,0,0,1,0,0") (ifseqformula "26"))
                                    (rule "applyEq" (formula "25") (term "0,0,1,0") (ifseqformula "26"))
                                    (builtin "One Step Simplification" (formula "25"))
                                    (rule "true_left" (formula "25"))
                                    (rule "applyEq" (formula "24") (term "0,0") (ifseqformula "25"))
                                    (builtin "One Step Simplification" (formula "24"))
                                    (rule "true_left" (formula "24"))
                                    (rule "arrayLengthIsAShort" (formula "15") (term "1,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "15"))
                                    (rule "true_left" (formula "15"))
                                    (rule "arrayLengthNotNegative" (formula "15") (term "1,0,1,0,0"))
                                    (rule "arrayLengthIsAShort" (formula "16") (term "1,0,0,0"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "true_left" (formula "16"))
                                    (rule "arrayLengthNotNegative" (formula "16") (term "1,0,0,0"))
                                    (rule "ifthenelse_split" (formula "40") (term "0,0"))
                                    (branch "self.encrypted[i_9].length ≥ 1 TRUE"
                                       (rule "eqSymm" (formula "41") (term "0"))
                                       (rule "ifthenelse_split" (formula "4") (term "0"))
                                       (branch "self.encrypted.<created> = TRUE TRUE"
                                          (rule "applyEqReverse" (formula "42") (term "0,1,0,0") (ifseqformula "5"))
                                          (builtin "One Step Simplification" (formula "42"))
                                          (rule "applyEqReverse" (formula "47") (term "0,0,0,1,1,0,0,1") (ifseqformula "5"))
                                          (rule "applyEqReverse" (formula "47") (term "0,1,1,1,0,0,1") (ifseqformula "5"))
                                          (rule "applyEqReverse" (formula "47") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "5"))
                                          (rule "applyEqReverse" (formula "47") (term "1,1,1,1,0,1") (ifseqformula "5"))
                                          (rule "applyEqReverse" (formula "47") (term "0,1,1,0") (ifseqformula "5"))
                                          (rule "applyEqReverse" (formula "47") (term "0,0,0,1,0") (ifseqformula "5"))
                                          (rule "applyEqReverse" (formula "42") (term "1,1,1,1,0,1") (ifseqformula "5"))
                                          (rule "applyEqReverse" (formula "42") (term "0,1,1,1,0,0,1") (ifseqformula "5"))
                                          (rule "applyEqReverse" (formula "42") (term "0,0,0,0") (ifseqformula "5"))
                                          (rule "applyEqReverse" (formula "42") (term "0,0,0,1,1,0,0,1") (ifseqformula "5"))
                                          (rule "applyEqReverse" (formula "42") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "5"))
                                          (rule "hideAuxiliaryEq" (formula "5"))
                                          (rule "eqSymm" (formula "41") (term "1,0"))
                                          (rule "eqSymm" (formula "41") (term "1,0,1"))
                                          (rule "replace_known_left" (formula "46") (term "0,1,1,0,0,1") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "1")))
                                          (rule "replace_known_left" (formula "41") (term "0,1,1,0,0,1") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "1")))
                                          (rule "allRight" (formula "41") (inst "sk=iv_46"))
                                          (rule "orRight" (formula "41"))
                                          (rule "orRight" (formula "41"))
                                          (rule "inEqSimp_geqRight" (formula "42"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0"))
                                          (rule "inEqSimp_leqRight" (formula "42"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "replace_known_left" (formula "43") (term "0,0,0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "1")))
                                          (rule "inEqSimp_homoInEq0" (formula "43") (term "0,0"))
                                          (rule "eqSymm" (formula "43"))
                                          (rule "polySimp_addComm1" (formula "43") (term "0,0,1"))
                                          (rule "inEqSimp_homoInEq0" (formula "43") (term "0,0"))
                                          (rule "polySimp_addComm1" (formula "43") (term "0,0,0"))
                                          (rule "eqSymm" (formula "43"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                          (rule "polySimp_elimOne" (formula "2") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "0,0"))
                                          (rule "eqSymm" (formula "43"))
                                          (rule "polySimp_mulComm0" (formula "43") (term "1,0,1"))
                                          (rule "polySimp_rightDist" (formula "43") (term "1,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,1"))
                                          (rule "mul_literals" (formula "43") (term "0,1,0,1"))
                                          (rule "polySimp_elimOne" (formula "43") (term "1,1,0,1"))
                                          (rule "replace_known_left" (formula "43") (term "0,1") (ifseqformula "2"))
                                          (builtin "One Step Simplification" (formula "43"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "43") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "43") (term "1,0,0"))
                                          (rule "mul_literals" (formula "43") (term "0,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "43") (term "1,1,0,0"))
                                          (rule "replace_known_left" (formula "43") (term "0,0") (ifseqformula "2"))
                                          (builtin "One Step Simplification" (formula "43"))
                                          (rule "eqSymm" (formula "43"))
                                          (rule "pullOutSelect" (formula "43") (term "0") (inst "selectSK=arr_389"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "eqSymm" (formula "44"))
                                          (rule "ifthenelse_split" (formula "6") (term "0"))
                                          (branch "self.chosen.<created> = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "50") (term "0,1,1,0,0,0,0") (ifseqformula "7"))
                                             (rule "applyEqReverse" (formula "50") (term "0,1,1,0,0,0,1,0,1") (ifseqformula "7"))
                                             (rule "applyEqReverse" (formula "50") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "7"))
                                             (rule "applyEqReverse" (formula "50") (term "1,2,1,0,0,0,0") (ifseqformula "7"))
                                             (rule "hideAuxiliaryEq" (formula "7"))
                                             (rule "commute_or_2" (formula "33") (term "0"))
                                             (rule "commute_or" (formula "34") (term "0,0"))
                                             (rule "commute_or_2" (formula "32") (term "0"))
                                             (rule "commute_or" (formula "15") (term "0,0"))
                                             (rule "commute_or_2" (formula "31") (term "0"))
                                             (rule "commute_or" (formula "16") (term "0,0"))
                                             (rule "commute_or" (formula "17") (term "0,0"))
                                             (rule "commute_or" (formula "22") (term "0,0"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0"))
                                             (rule "add_zero_right" (formula "22") (term "1,1,0"))
                                             (rule "qeq_literals" (formula "22") (term "1,0"))
                                             (builtin "One Step Simplification" (formula "22"))
                                             (rule "true_left" (formula "22"))
                                             (rule "lenNonNegative" (formula "21") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "21"))
                                             (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                             (rule "qeq_literals" (formula "21"))
                                             (rule "true_left" (formula "21"))
                                             (rule "commute_or" (formula "32") (term "0,0"))
                                             (rule "commute_or" (formula "31") (term "0,0"))
                                             (rule "commute_or" (formula "30") (term "0,0"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0,1") (ifseqformula "10"))
                                             (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "40"))
                                             (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "6")))
                                             (rule "true_left" (formula "22"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "1,1") (ifseqformula "10"))
                                             (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "7"))
                                             (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "39")))
                                             (rule "true_left" (formula "18"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "0,0") (ifseqformula "10"))
                                             (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "41"))
                                             (builtin "One Step Simplification" (formula "24"))
                                             (rule "arrayLengthNotNegative" (formula "34") (term "1,1,0"))
                                             (rule "arrayLengthIsAShort" (formula "35") (term "1,1,0"))
                                             (builtin "One Step Simplification" (formula "35"))
                                             (rule "true_left" (formula "35"))
                                             (rule "arrayLengthIsAShort" (formula "5") (term "0"))
                                             (builtin "One Step Simplification" (formula "5"))
                                             (rule "true_left" (formula "5"))
                                             (rule "arrayLengthNotNegative" (formula "5") (term "0"))
                                             (rule "inEqSimp_antiSymm" (formula "5") (ifseqformula "6"))
                                             (rule "applyEq" (formula "6") (term "0") (ifseqformula "5"))
                                             (rule "qeq_literals" (formula "6"))
                                             (rule "true_left" (formula "6"))
                                             (rule "applyEq" (formula "6") (term "0") (ifseqformula "5"))
                                             (rule "leq_literals" (formula "6"))
                                             (rule "true_left" (formula "6"))
                                             (rule "ifthenelse_split" (formula "1") (term "0"))
                                             (branch " ¬self.encrypted[i_9] = null ∧ ¬self.encrypted[i_9].<created> = TRUE TRUE"
                                                (rule "andLeft" (formula "1"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "37"))
                                                (rule "close" (formula "36") (ifseqformula "10"))
                                             )
                                             (branch " ¬self.encrypted[i_9] = null ∧ ¬self.encrypted[i_9].<created> = TRUE FALSE"
                                                (rule "close" (formula "46") (ifseqformula "1"))
                                             )
                                          )
                                          (branch "self.chosen.<created> = TRUE FALSE"
                                             (rule "referencedObjectIsCreatedRight" (formula "35") (ifseqformula "41"))
                                             (rule "close" (formula "35") (ifseqformula "10"))
                                          )
                                       )
                                       (branch "self.encrypted.<created> = TRUE FALSE"
                                          (rule "referencedObjectIsCreatedRight" (formula "32") (ifseqformula "37"))
                                          (rule "close" (formula "32") (ifseqformula "7"))
                                       )
                                    )
                                    (branch "self.encrypted[i_9].length ≥ 1 FALSE"
                                       (rule "eqSymm" (formula "41") (term "0"))
                                       (builtin "One Step Simplification" (formula "41"))
                                       (rule "inEqSimp_geqRight" (formula "40"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_notGeq" (formula "41") (term "0,0"))
                                       (rule "mul_literals" (formula "41") (term "1,0,0,0,0"))
                                       (rule "add_literals" (formula "41") (term "0,0,0,0"))
                                       (rule "add_zero_left" (formula "41") (term "0,0,0"))
                                       (rule "ifthenelse_split" (formula "4") (term "0"))
                                       (branch "self.encrypted.<created> = TRUE TRUE"
                                          (rule "applyEqReverse" (formula "47") (term "0,1,1,0") (ifseqformula "5"))
                                          (rule "applyEqReverse" (formula "42") (term "0,0,1,0") (ifseqformula "5"))
                                          (rule "applyEqReverse" (formula "47") (term "0,0,0,1,0") (ifseqformula "5"))
                                          (rule "applyEqReverse" (formula "42") (term "0,1,1,1,0,0,1") (ifseqformula "5"))
                                          (rule "applyEqReverse" (formula "47") (term "1,1,1,1,0,1") (ifseqformula "5"))
                                          (rule "applyEqReverse" (formula "42") (term "1,1,1,1,0,1") (ifseqformula "5"))
                                          (rule "applyEqReverse" (formula "42") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "5"))
                                          (rule "applyEqReverse" (formula "42") (term "0,0,0,0") (ifseqformula "5"))
                                          (rule "applyEqReverse" (formula "47") (term "0,1,1,1,0,0,1") (ifseqformula "5"))
                                          (rule "applyEqReverse" (formula "47") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "5"))
                                          (rule "applyEqReverse" (formula "42") (term "0,0,0,1,1,0,0,1") (ifseqformula "5"))
                                          (rule "applyEqReverse" (formula "47") (term "0,0,0,1,1,0,0,1") (ifseqformula "5"))
                                          (rule "hideAuxiliaryEq" (formula "5"))
                                          (rule "eqSymm" (formula "41") (term "1,0,1"))
                                          (rule "replace_known_left" (formula "41") (term "0,0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "41"))
                                          (rule "allRight" (formula "41") (inst "sk=iv_45"))
                                          (rule "orRight" (formula "41"))
                                          (rule "orRight" (formula "41"))
                                          (rule "inEqSimp_geqRight" (formula "42"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0"))
                                          (rule "inEqSimp_leqRight" (formula "42"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "replace_known_left" (formula "43") (term "0,0,1") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "1")))
                                          (rule "inEqSimp_homoInEq0" (formula "43") (term "0,1"))
                                          (rule "polySimp_addComm1" (formula "43") (term "0,0,1"))
                                          (rule "inEqSimp_homoInEq0" (formula "43") (term "0,0"))
                                          (rule "polySimp_addComm1" (formula "43") (term "0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                          (rule "polySimp_elimOne" (formula "2") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "0,1"))
                                          (rule "polySimp_mulComm0" (formula "43") (term "1,0,1"))
                                          (rule "polySimp_rightDist" (formula "43") (term "1,0,1"))
                                          (rule "mul_literals" (formula "43") (term "0,1,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,1"))
                                          (rule "polySimp_elimOne" (formula "43") (term "1,1,0,1"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "43") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "43") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "43") (term "0,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "43") (term "1,1,0,0"))
                                          (rule "inEqSimp_contradInEq0" (formula "48") (term "0,1,1,0,0,1") (ifseqformula "3"))
                                          (rule "qeq_literals" (formula "48") (term "0,0,1,1,0,0,1"))
                                          (builtin "One Step Simplification" (formula "48"))
                                          (rule "inEqSimp_contradInEq0" (formula "2") (term "0,0") (ifseqformula "3"))
                                          (rule "qeq_literals" (formula "2") (term "0,0,0"))
                                          (builtin "One Step Simplification" (formula "2"))
                                          (rule "inEqSimp_homoInEq1" (formula "2"))
                                          (rule "mul_literals" (formula "2") (term "1,0"))
                                          (rule "add_zero_right" (formula "2") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                          (rule "mul_literals" (formula "2") (term "1"))
                                          (rule "inEqSimp_contradInEq0" (formula "48") (term "0,1,0") (ifseqformula "3"))
                                          (rule "qeq_literals" (formula "48") (term "0,0,1,0"))
                                          (builtin "One Step Simplification" (formula "48"))
                                          (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
                                          (rule "qeq_literals" (formula "1") (term "0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                       (branch "self.encrypted.<created> = TRUE FALSE"
                                          (rule "referencedObjectIsCreatedRight" (formula "32") (ifseqformula "37"))
                                          (rule "close" (formula "32") (ifseqformula "7"))
                                       )
                                    )
                                 )
                              )
                           )
                        )
                     )
                     (branch
                        (rule "cut" (inst "cutFormula=  array2seq2d(heapAfter_splidAndCheck,
              byte[][]::select(heapAfter_splidAndCheck,
                               self,
                               verif.selectvoting.system.core.MixServer::$sorted))
= array2seq2d(heap,
              byte[][]::select(heap,
                               self,
                               verif.selectvoting.system.core.MixServer::$sorted))") (userinteraction))
                        (branch "CUT: array2seq2d(heapAfter_splidAndCheck, self.sorted@heapAfter_splidAndCheck) = array2seq2d(heap, self.sorted) TRUE"
                           (rule "applyEq" (formula "27") (term "0") (ifseqformula "1") (userinteraction))
                           (rule "cut" (inst "cutFormula=  array2seq2d(heapAfter_splidAndCheck,
              byte[][]::select(heapAfter_splidAndCheck,
                               self,
                               verif.selectvoting.system.core.MixServer::$encrypted))
= array2seq2d(heap,
              byte[][]::select(heap,
                               self,
                               verif.selectvoting.system.core.MixServer::$encrypted))") (userinteraction))
                           (branch "CUT: array2seq2d(heapAfter_splidAndCheck, self.encrypted@heapAfter_splidAndCheck) = array2seq2d(heap, self.encrypted) TRUE"
                              (rule "applyEq" (formula "28") (term "1") (ifseqformula "1") (userinteraction))
                              (rule "close" (formula "28") (ifseqformula "10") (userinteraction))
                           )
                           (branch "CUT: array2seq2d(heapAfter_splidAndCheck, self.encrypted@heapAfter_splidAndCheck) = array2seq2d(heap, self.encrypted) FALSE"
                              (rule "array2seq2dDef" (formula "23") (term "0") (inst "u=u") (userinteraction))
                              (rule "array2seq2dDef" (formula "23") (term "1") (inst "u=u") (userinteraction))
                              (rule "equalityToSeqGetAndSeqLenRight" (formula "23") (inst "iv=iv") (userinteraction))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1") (ifseqformula "17"))
                              (rule "eqSymm" (formula "20"))
                              (rule "eqSymm" (formula "14"))
                              (rule "eqSymm" (formula "8") (term "1,0"))
                              (rule "eqSymm" (formula "10"))
                              (rule "eqSymm" (formula "11"))
                              (rule "eqSymm" (formula "12"))
                              (rule "eqSymm" (formula "13"))
                              (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "27"))
                              (builtin "One Step Simplification" (formula "5"))
                              (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "25"))
                              (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "24")))
                              (rule "getOfSeqDef" (formula "23") (term "1,1,0,1"))
                              (rule "castDel" (formula "23") (term "1,1,1,0,1"))
                              (rule "castDel" (formula "23") (term "2,1,1,0,1"))
                              (rule "add_zero_right" (formula "23") (term "0,2,1,1,1,1,0,1"))
                              (rule "polySimp_elimSub" (formula "23") (term "1,1,0,1,1,0,1"))
                              (rule "times_zero_2" (formula "23") (term "1,1,1,0,1,1,0,1"))
                              (rule "add_zero_right" (formula "23") (term "1,1,0,1,1,0,1"))
                              (rule "lenOfSeqDef" (formula "23") (term "1,1,0,0,1"))
                              (rule "polySimp_elimSub" (formula "23") (term "1,1,1,0,0,1"))
                              (rule "times_zero_2" (formula "23") (term "1,1,1,1,0,0,1"))
                              (rule "add_zero_right" (formula "23") (term "1,1,1,0,0,1"))
                              (rule "lenOfSeqDef" (formula "23") (term "1,0"))
                              (rule "polySimp_elimSub" (formula "23") (term "1,1,0"))
                              (rule "times_zero_2" (formula "23") (term "1,1,1,0"))
                              (rule "add_zero_right" (formula "23") (term "1,1,0"))
                              (rule "getOfSeqDef" (formula "23") (term "0,1,0,1"))
                              (rule "castDel" (formula "23") (term "2,0,1,0,1"))
                              (rule "castDel" (formula "23") (term "1,0,1,0,1"))
                              (rule "add_zero_right" (formula "23") (term "0,2,1,1,0,1,0,1"))
                              (rule "polySimp_elimSub" (formula "23") (term "1,1,0,0,1,0,1"))
                              (rule "mul_literals" (formula "23") (term "1,1,1,0,0,1,0,1"))
                              (rule "add_zero_right" (formula "23") (term "1,1,0,0,1,0,1"))
                              (rule "lenOfSeqDef" (formula "23") (term "0,0"))
                              (rule "polySimp_elimSub" (formula "23") (term "1,0,0"))
                              (rule "times_zero_2" (formula "23") (term "1,1,0,0"))
                              (rule "add_zero_right" (formula "23") (term "1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,1,1,0,1"))
                              (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,1,1,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "23") (term "0,1,1,0,0,1"))
                              (rule "add_zero_right" (formula "23") (term "0,0,1,1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,1,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "23") (term "0,1,0"))
                              (rule "add_zero_right" (formula "23") (term "0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1,0,1"))
                              (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,1,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0,0"))
                              (rule "add_zero_right" (formula "23") (term "0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,1,1,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,1,0,1"))
                              (rule "applyEq" (formula "11") (term "1,1,0") (ifseqformula "14"))
                              (rule "applyEq" (formula "10") (term "1") (ifseqformula "14"))
                              (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "13"))
                              (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "12"))
                              (rule "applyEq" (formula "23") (term "0,1,0,0,1,0") (ifseqformula "12"))
                              (rule "applyEq" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "12"))
                              (rule "applyEq" (formula "23") (term "1,1,0") (ifseqformula "12"))
                              (rule "applyEq" (formula "13") (term "1") (ifseqformula "12"))
                              (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,1,1,0,1") (ifseqformula "12"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,0,1"))
                              (rule "eqSymm" (formula "23") (term "1,0,1"))
                              (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,1,1,0,1"))
                              (rule "polySimp_rightDist" (formula "23") (term "1,1,0,1,1,0,1"))
                              (rule "mul_literals" (formula "23") (term "0,1,1,0,1,1,0,1"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,1,1,0,1"))
                              (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,1,1,0,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "0,0,0,0"))
                              (rule "eqSymm" (formula "23") (term "0"))
                              (rule "polySimp_elimOne" (formula "23") (term "0,0,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,0,1,0,0,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "0,0,0,1,0,0,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "23") (term "0,0,0,1,0,0,1,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,0,1"))
                              (rule "eqSymm" (formula "23") (term "1,0,1"))
                              (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,1,1,0,1"))
                              (rule "polySimp_rightDist" (formula "23") (term "1,1,0,1,1,0,1"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,1,1,0,1"))
                              (rule "mul_literals" (formula "23") (term "0,1,1,0,1,1,0,1"))
                              (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,1,1,0,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "0,0,0,0"))
                              (rule "eqSymm" (formula "23") (term "0"))
                              (rule "polySimp_elimOne" (formula "23") (term "0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,1"))
                              (rule "mul_literals" (formula "23") (term "0,1,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,1"))
                              (rule "nonNull" (formula "22") (inst "i=i"))
                              (rule "sub_literals" (formula "22") (term "2,1,0,1,1"))
                              (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "25")))
                              (rule "greater_literals" (formula "22") (term "0"))
                              (builtin "One Step Simplification" (formula "22"))
                              (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                              (rule "array2seqDef" (formula "14") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "14"))
                              (rule "narrowSelectArrayType" (formula "14") (term "2,0") (ifseqformula "2") (ifseqformula "27"))
                              (rule "array2seqDef" (formula "8") (term "1,0,0,1,0") (inst "u=u"))
                              (rule "array2seqDef" (formula "8") (term "1,1,0") (inst "u=u"))
                              (rule "eqSymm" (formula "8") (term "1,0"))
                              (rule "array2seqDef" (formula "11") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "11"))
                              (rule "array2seqDef" (formula "10") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "10"))
                              (rule "narrowSelectArrayType" (formula "10") (term "2,0") (ifseqformula "2") (ifseqformula "27"))
                              (rule "applyEq" (formula "10") (term "0") (ifseqformula "14"))
                              (rule "eqSymm" (formula "10"))
                              (rule "array2seqDef" (formula "23") (term "1,0,1,0,1") (inst "u=u"))
                              (rule "array2seqDef" (formula "23") (term "1,1,1,0,1") (inst "u=u"))
                              (rule "pullOutSelect" (formula "1") (term "1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_25"))
                              (rule "applyEq" (formula "21") (term "1,0") (ifseqformula "1"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "27")) (ifInst ""  (formula "4")))
                              (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "21") (term "1,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "applyEq" (formula "20") (term "0") (ifseqformula "1"))
                              (rule "eqSymm" (formula "20"))
                              (rule "pullOutSelect" (formula "28") (term "1,1") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_22"))
                              (rule "applyEq" (formula "24") (term "0,1,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "24") (term "1,1,2,1,0,1,0,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "24") (term "0,0,0,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "24") (term "0,1,1,1,1,0,0,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "24") (term "1,0,1,1,0,1,0,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "24") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "24") (term "0,0,0,1,1,1,0,0,1") (ifseqformula "1"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "27")) (ifInst ""  (formula "4")))
                              (rule "applyEqReverse" (formula "29") (term "1,1") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "24") (term "0,1,0,0") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "24") (term "1,1,2,1,0,1,0,1") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "24") (term "0,0,0,0,0") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "24") (term "0,1,1,1,1,0,0,1") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "24") (term "1,0,1,1,0,1,0,1") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "24") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "24") (term "0,0,0,1,1,1,0,0,1") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "applyEq" (formula "23") (term "0,0,0,0") (ifseqformula "12"))
                              (rule "applyEq" (formula "23") (term "1,0,0") (ifseqformula "12"))
                              (builtin "One Step Simplification" (formula "23"))
                              (rule "allRight" (formula "23") (inst "sk=iv_40"))
                              (rule "impRight" (formula "23"))
                              (rule "andLeft" (formula "1"))
                              (rule "replace_known_left" (formula "25") (term "0,0,1") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "1")))
                              (rule "inEqSimp_homoInEq0" (formula "2"))
                              (rule "polySimp_addComm1" (formula "2") (term "0"))
                              (rule "inEqSimp_homoInEq0" (formula "25") (term "0,0"))
                              (rule "eqSymm" (formula "25"))
                              (rule "polySimp_addComm1" (formula "25") (term "0,0,1"))
                              (rule "inEqSimp_homoInEq0" (formula "25") (term "0,0"))
                              (rule "eqSymm" (formula "25"))
                              (rule "polySimp_addComm1" (formula "25") (term "0,0,1"))
                              (rule "applyEq" (formula "25") (term "1,0,0,0") (ifseqformula "14"))
                              (rule "applyEq" (formula "2") (term "0,0,1,0") (ifseqformula "14"))
                              (rule "applyEq" (formula "2") (term "1,1,0") (ifseqformula "14"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "0,1"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,0,1"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,0,1"))
                              (rule "mul_literals" (formula "25") (term "0,1,0,1"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,1"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,0,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1"))
                              (rule "polySimp_rightDist" (formula "2") (term "1"))
                              (rule "mul_literals" (formula "2") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                              (rule "array2seqDef" (formula "16") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "16"))
                              (rule "array2seqDef" (formula "10") (term "0,0,1,1,0") (inst "u=u"))
                              (rule "array2seqDef" (formula "13") (term "0,1") (inst "u=u"))
                              (rule "eqSymm" (formula "13"))
                              (rule "array2seqDef" (formula "12") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "12"))
                              (rule "applyEq" (formula "16") (term "0") (ifseqformula "12"))
                              (rule "eqSymm" (formula "16"))
                              (rule "eqSeqDef" (formula "13") (inst "iv=iv"))
                              (rule "andLeft" (formula "13"))
                              (rule "lenOfSeqDef" (formula "13") (term "1"))
                              (rule "polySimp_elimSub" (formula "13") (term "1,1"))
                              (rule "times_zero_2" (formula "13") (term "1,1,1"))
                              (rule "add_zero_right" (formula "13") (term "1,1"))
                              (rule "getOfSeqDef" (formula "14") (term "1,1,0"))
                              (rule "castDel" (formula "14") (term "2,1,1,0"))
                              (rule "castDel" (formula "14") (term "1,1,1,0"))
                              (rule "add_zero_right" (formula "14") (term "0,2,1,1,1,0"))
                              (rule "polySimp_elimSub" (formula "14") (term "1,1,0,1,1,0"))
                              (rule "times_zero_2" (formula "14") (term "1,1,1,0,1,1,0"))
                              (rule "add_zero_right" (formula "14") (term "1,1,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                              (rule "polySimp_addComm1" (formula "14") (term "0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1"))
                              (rule "add_zero_right" (formula "13") (term "0,0,1"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,1,1,0"))
                              (rule "applyEq" (formula "14") (term "0,1,0,1,0,0") (ifseqformula "13"))
                              (rule "polySimp_addComm1" (formula "14") (term "0,1,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "0,0,1"))
                              (rule "polySimp_elimOne" (formula "13") (term "0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "14") (term "1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "14") (term "0,1,1,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,1,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0,1,0,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,1,0,0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "0,0,0,1,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                              (rule "array2seqDef" (formula "13") (term "1,1,0,0") (inst "u=u"))
                              (rule "narrowSelectArrayType" (formula "13") (term "2,1,1,0,0") (ifseqformula "4") (ifseqformula "30"))
                              (rule "applyEq" (formula "13") (term "1,1,0,0") (ifseqformula "17"))
                              (rule "array2seqDef" (formula "13") (term "0,1,0,0") (inst "u=u"))
                              (rule "array2seqDef" (formula "14") (term "0,1,0,0,1,0") (inst "u=u"))
                              (rule "array2seqDef" (formula "14") (term "1,1,0,0,1,0") (inst "u=u"))
                              (rule "narrowSelectArrayType" (formula "14") (term "2,1,1,0,0,1,0") (ifseqformula "4") (ifseqformula "30"))
                              (rule "applyEq" (formula "14") (term "1,1,0,0,1,0") (ifseqformula "17"))
                              (rule "eqSeqDef2" (formula "17") (inst "iv=iv") (ifseqformula "12"))
                              (rule "andLeft" (formula "17"))
                              (rule "eqSymm" (formula "18") (term "1,0"))
                              (rule "eqSymm" (formula "17"))
                              (rule "lenOfSeqDef" (formula "18") (term "1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "18") (term "1,1,1,0,0"))
                              (rule "times_zero_2" (formula "18") (term "1,1,1,1,0,0"))
                              (rule "add_zero_right" (formula "18") (term "1,1,1,0,0"))
                              (rule "getOfSeqDef" (formula "18") (term "0,1,0"))
                              (rule "castDel" (formula "18") (term "1,0,1,0"))
                              (rule "castDel" (formula "18") (term "2,0,1,0"))
                              (rule "add_zero_right" (formula "18") (term "0,2,1,0,1,0"))
                              (rule "eqSymm" (formula "18") (term "1,0"))
                              (rule "polySimp_elimSub" (formula "18") (term "1,1,0,1,1,0"))
                              (rule "times_zero_2" (formula "18") (term "1,1,1,0,1,1,0"))
                              (rule "add_zero_right" (formula "18") (term "1,1,0,1,1,0"))
                              (rule "lenOfSeqDef" (formula "17") (term "1"))
                              (rule "polySimp_elimSub" (formula "17") (term "1,1"))
                              (rule "times_zero_2" (formula "17") (term "1,1,1"))
                              (rule "add_zero_right" (formula "17") (term "1,1"))
                              (rule "lenOfSeqDef" (formula "17") (term "0"))
                              (rule "polySimp_elimSub" (formula "17") (term "1,0"))
                              (rule "times_zero_2" (formula "17") (term "1,1,0"))
                              (rule "add_zero_right" (formula "17") (term "1,0"))
                              (rule "getOfSeqDef" (formula "18") (term "0,1,0"))
                              (rule "castDel" (formula "18") (term "2,0,1,0"))
                              (rule "castDel" (formula "18") (term "1,0,1,0"))
                              (rule "add_zero_right" (formula "18") (term "0,2,1,0,1,0"))
                              (rule "eqSymm" (formula "18") (term "1,0"))
                              (rule "polySimp_elimSub" (formula "18") (term "1,1,0,1,1,0"))
                              (rule "times_zero_2" (formula "18") (term "1,1,1,0,1,1,0"))
                              (rule "add_zero_right" (formula "18") (term "1,1,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "18") (term "0,1,1,0,0"))
                              (rule "add_zero_right" (formula "18") (term "0,0,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "17") (term "0,1"))
                              (rule "add_zero_right" (formula "17") (term "0,0,1"))
                              (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0"))
                              (rule "add_zero_right" (formula "17") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "18") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "18") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "0,0,1"))
                              (rule "polySimp_elimOne" (formula "17") (term "0,0,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0"))
                              (rule "polySimp_elimOne" (formula "17") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "18") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "18") (term "1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "18") (term "0,1,1,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,1,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,1,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "0,0,1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "18") (term "0,0,1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "18") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "18") (term "1,1,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "18") (term "0,1,1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,1,1,0"))
                              (rule "eqSeqDef2" (formula "12") (inst "iv=iv") (ifseqformula "12"))
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "pullOutSelect" (formula "26") (term "1,2,1,0") (inst "selectSK=arr_382"))
                              (rule "applyEq" (formula "27") (term "0,1,1,0") (ifseqformula "1"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "nnf_imp2or" (formula "26") (term "0"))
                              (rule "nnf_imp2or" (formula "11") (term "0"))
                              (rule "Definition_axiom_for_ghostFieldsNonNull_in_verif_selectvoting_system_core_MixServer" (formula "10") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "andLeft" (formula "10"))
                              (rule "andLeft" (formula "10"))
                              (rule "andLeft" (formula "10"))
                              (rule "andLeft" (formula "10"))
                              (rule "notLeft" (formula "11"))
                              (rule "andLeft" (formula "10"))
                              (rule "andLeft" (formula "10"))
                              (rule "notLeft" (formula "12"))
                              (rule "andLeft" (formula "10"))
                              (rule "notLeft" (formula "12"))
                              (rule "notLeft" (formula "10"))
                              (rule "notLeft" (formula "10"))
                              (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "29"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "ifthenelse_negated" (formula "1") (term "0"))
                              (rule "narrowSelectArrayType" (formula "20") (term "1,0,1,0") (ifseqformula "5") (ifseqformula "32"))
                              (rule "narrowSelectArrayType" (formula "16") (term "1,1,1,0") (ifseqformula "5") (ifseqformula "33"))
                              (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                              (rule "applyEq" (formula "12") (term "0,1,0,0,1,0,0") (ifseqformula "18"))
                              (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                              (rule "nnf_notAnd" (formula "28") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
                              (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "28") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                              (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "13") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
                              (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                              (rule "mul_literals" (formula "13") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
                              (rule "nnf_imp2or" (formula "20") (term "0"))
                              (rule "nnf_imp2or" (formula "16") (term "0"))
                              (rule "nnf_imp2or" (formula "10") (term "0"))
                              (rule "nnf_imp2or" (formula "12") (term "0"))
                              (rule "nnf_imp2or" (formula "11") (term "0"))
                              (rule "nnf_notAnd" (formula "20") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                              (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                              (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "16") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                              (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                              (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "10") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
                              (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                              (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "12") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                              (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                              (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "11") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                              (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                              (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                              (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "21") (ifseqformula "7"))
                              (rule "andLeft" (formula "21"))
                              (rule "andLeft" (formula "21"))
                              (rule "notLeft" (formula "23"))
                              (rule "notLeft" (formula "22"))
                              (rule "andLeft" (formula "21"))
                              (rule "notLeft" (formula "22"))
                              (rule "andLeft" (formula "21"))
                              (rule "notLeft" (formula "22"))
                              (rule "andLeft" (formula "21"))
                              (rule "andLeft" (formula "21"))
                              (rule "andLeft" (formula "21"))
                              (rule "andLeft" (formula "21"))
                              (rule "notLeft" (formula "22"))
                              (rule "notLeft" (formula "21"))
                              (rule "narrowSelectArrayType" (formula "15") (term "2,0,1,0,0") (ifseqformula "5") (ifseqformula "34"))
                              (rule "narrowSelectArrayType" (formula "16") (term "2,0,1,0,0,1,0") (ifseqformula "5") (ifseqformula "34"))
                              (rule "narrowSelectArrayType" (formula "13") (term "2,0,0,1,1,0") (ifseqformula "5") (ifseqformula "34"))
                              (rule "nonNull" (formula "23") (inst "i=i"))
                              (rule "greater_literals" (formula "23") (term "0,1"))
                              (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "36")))
                              (rule "sub_literals" (formula "23") (term "2,1,0"))
                              (builtin "One Step Simplification" (formula "23"))
                              (rule "narrowSelectArrayType" (formula "23") (term "0,0,1,0") (ifseqformula "5") (ifseqformula "36"))
                              (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                              (rule "nonNull" (formula "22") (inst "i=i"))
                              (rule "greater_literals" (formula "22") (term "0,1"))
                              (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "35")))
                              (rule "sub_literals" (formula "22") (term "2,1,0"))
                              (builtin "One Step Simplification" (formula "22"))
                              (rule "narrowSelectArrayType" (formula "22") (term "0,0,1,0") (ifseqformula "5") (ifseqformula "35"))
                              (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                              (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                              (rule "nonNull" (formula "21") (inst "i=i"))
                              (rule "sub_literals" (formula "21") (term "2,1,0,1,1"))
                              (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "37")))
                              (rule "greater_literals" (formula "21") (term "0"))
                              (builtin "One Step Simplification" (formula "21"))
                              (rule "narrowSelectArrayType" (formula "21") (term "0,0,1,0") (ifseqformula "5") (ifseqformula "37"))
                              (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                              (rule "applyEq" (formula "21") (term "0,1,0,0,1,0,0") (ifseqformula "18"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                              (rule "nnf_imp2or" (formula "23") (term "0"))
                              (rule "nnf_imp2or" (formula "22") (term "0"))
                              (rule "nnf_imp2or" (formula "21") (term "0"))
                              (rule "nnf_notAnd" (formula "23") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                              (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                              (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "22") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
                              (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "22") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                              (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "21") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                              (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                              (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                              (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "26") (ifseqformula "7"))
                              (rule "replaceKnownSelect_taclet1010000020_2" (formula "26") (term "1,1,0,0,0,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet1010000020_3" (formula "26") (term "1,1,0,0,0,0,0"))
                              (rule "replaceKnownSelect_taclet1010000020_0" (formula "26") (term "1,1,0,0,0,0,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet1010000020_1" (formula "26") (term "1,1,0,0,0,0,0,0"))
                              (rule "andLeft" (formula "26"))
                              (rule "andLeft" (formula "26"))
                              (rule "notLeft" (formula "28"))
                              (rule "andLeft" (formula "26"))
                              (rule "notLeft" (formula "28"))
                              (rule "andLeft" (formula "26"))
                              (rule "notLeft" (formula "28"))
                              (rule "notLeft" (formula "27"))
                              (rule "andLeft" (formula "26"))
                              (rule "andLeft" (formula "26"))
                              (rule "andLeft" (formula "26"))
                              (rule "andLeft" (formula "26"))
                              (rule "notLeft" (formula "26"))
                              (rule "notLeft" (formula "26"))
                              (rule "nonNull" (formula "28") (inst "i=i"))
                              (rule "greater_literals" (formula "28") (term "0,1"))
                              (builtin "One Step Simplification" (formula "28"))
                              (rule "sub_literals" (formula "28") (term "2,1,0,1"))
                              (builtin "One Step Simplification" (formula "28"))
                              (rule "andLeft" (formula "28"))
                              (rule "notLeft" (formula "28"))
                              (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "28") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0"))
                              (rule "nonNull" (formula "27") (inst "i=i"))
                              (rule "greater_literals" (formula "27") (term "0,1"))
                              (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "41")))
                              (rule "sub_literals" (formula "27") (term "2,1,0"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                              (rule "applyEq" (formula "27") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
                              (rule "nonNull" (formula "26") (inst "i=i"))
                              (rule "greater_literals" (formula "26") (term "0,1"))
                              (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "43")))
                              (rule "sub_literals" (formula "26") (term "2,1,0"))
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                              (rule "applyEq" (formula "26") (term "0,1,0,0,1,0,0") (ifseqformula "18"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
                              (rule "pullOutSelect" (formula "36") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_20"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "50")) (ifInst ""  (formula "7")))
                              (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_20"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")) (ifInst ""  (formula "7")))
                              (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_20"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")) (ifInst ""  (formula "7")))
                              (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "pullOutSelect" (formula "33") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_20"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")) (ifInst ""  (formula "7")))
                              (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_20"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")) (ifInst ""  (formula "7")))
                              (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "pullOutSelect" (formula "31") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_21"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")) (ifInst ""  (formula "7")))
                              (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "pullOutSelect" (formula "28") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_21"))
                              (rule "applyEq" (formula "29") (term "0,1,1,1,0,0") (ifseqformula "28"))
                              (rule "applyEq" (formula "31") (term "0") (ifseqformula "28"))
                              (rule "simplifySelectOfAnonEQ" (formula "28") (ifseqformula "22"))
                              (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "44")) (ifInst ""  (formula "6")))
                              (rule "applyEqReverse" (formula "29") (term "0,1,1,1,0,0") (ifseqformula "28"))
                              (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "28"))
                              (rule "applyEqReverse" (formula "29") (term "1,0,0,1,0") (ifseqformula "28"))
                              (rule "hideAuxiliaryEq" (formula "28"))
                              (rule "arrayLengthIsAShort" (formula "17") (term "0"))
                              (builtin "One Step Simplification" (formula "17"))
                              (rule "true_left" (formula "17"))
                              (rule "arrayLengthNotNegative" (formula "17") (term "0"))
                              (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
                              (rule "arrayLengthNotNegative" (formula "18") (term "1"))
                              (rule "arrayLengthIsAShort" (formula "18") (term "1"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "true_left" (formula "18"))
                              (rule "arrayLengthIsAShort" (formula "19") (term "0"))
                              (builtin "One Step Simplification" (formula "19"))
                              (rule "true_left" (formula "19"))
                              (rule "arrayLengthNotNegative" (formula "19") (term "0"))
                              (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                              (rule "nnf_imp2or" (formula "28") (term "0"))
                              (rule "commute_or_2" (formula "30") (term "0"))
                              (rule "nnf_imp2or" (formula "27") (term "0"))
                              (rule "ifthenelse_split" (formula "40") (term "1"))
                              (branch "self.chosen.length ≥ 1 + iv_40 TRUE"
                                 (rule "replace_known_left" (formula "41") (term "0,0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "41"))
                                 (rule "eqSeqDef" (formula "41") (inst "iv=iv"))
                                 (rule "getOfSeqDef" (formula "41") (term "1,1,0,1"))
                                 (rule "castDel" (formula "41") (term "2,1,1,0,1"))
                                 (rule "castDel" (formula "41") (term "1,1,1,0,1"))
                                 (rule "add_zero_right" (formula "41") (term "0,2,1,1,1,0,1"))
                                 (rule "polySimp_elimSub" (formula "41") (term "1,1,0,1,1,0,1"))
                                 (rule "mul_literals" (formula "41") (term "1,1,1,0,1,1,0,1"))
                                 (rule "add_zero_right" (formula "41") (term "1,1,0,1,1,0,1"))
                                 (rule "lenOfSeqDef" (formula "41") (term "1,1,0,0,1"))
                                 (rule "polySimp_elimSub" (formula "41") (term "1,1,1,0,0,1"))
                                 (rule "mul_literals" (formula "41") (term "1,1,1,1,0,0,1"))
                                 (rule "add_zero_right" (formula "41") (term "1,1,1,0,0,1"))
                                 (rule "getOfSeqDef" (formula "41") (term "0,1,0,1"))
                                 (rule "castDel" (formula "41") (term "2,0,1,0,1"))
                                 (rule "castDel" (formula "41") (term "1,0,1,0,1"))
                                 (rule "add_zero_right" (formula "41") (term "0,2,1,0,1,0,1"))
                                 (rule "eqSymm" (formula "41") (term "1,0,1"))
                                 (rule "polySimp_elimSub" (formula "41") (term "1,1,0,1,1,0,1"))
                                 (rule "mul_literals" (formula "41") (term "1,1,1,0,1,1,0,1"))
                                 (rule "add_zero_right" (formula "41") (term "1,1,0,1,1,0,1"))
                                 (rule "lenOfSeqDef" (formula "41") (term "1,0"))
                                 (rule "polySimp_elimSub" (formula "41") (term "1,1,0"))
                                 (rule "mul_literals" (formula "41") (term "1,1,1,0"))
                                 (rule "add_zero_right" (formula "41") (term "1,1,0"))
                                 (rule "lenOfSeqDef" (formula "41") (term "0,0"))
                                 (rule "eqSymm" (formula "41") (term "0"))
                                 (rule "polySimp_elimSub" (formula "41") (term "1,1,0"))
                                 (rule "times_zero_2" (formula "41") (term "1,1,1,0"))
                                 (rule "add_zero_right" (formula "41") (term "1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "41") (term "0,1,1,0,0,1"))
                                 (rule "add_zero_right" (formula "41") (term "0,0,1,1,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,1,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "41") (term "1,0,0,1,0,1"))
                                 (rule "eqSymm" (formula "41") (term "1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,0,1,1,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "41") (term "0,1,0"))
                                 (rule "add_zero_right" (formula "41") (term "0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "41") (term "0,0,0"))
                                 (rule "add_zero_right" (formula "41") (term "0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "41") (term "1,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "41") (term "1,0,0,1,0,1"))
                                 (rule "eqSymm" (formula "41") (term "1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,0,1,1,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "41") (term "0,0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "41") (term "0,0,1,1,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "41") (term "0,0,0,1,0,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "41") (term "0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "41") (term "0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "41") (term "0,0,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "41") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "41") (term "0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "41") (term "0,0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "41") (term "0,0,1,0,0,1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "41") (term "0,0,0,1,0,0,1,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "41") (term "0,0,0,1,0,0,1,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0,0,1,0,1"))
                                 (rule "eqSymm" (formula "41") (term "1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "41") (term "1,1,0,1,1,0,1"))
                                 (rule "polySimp_rightDist" (formula "41") (term "1,1,0,1,1,0,1"))
                                 (rule "mul_literals" (formula "41") (term "0,1,1,0,1,1,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0,1,1,0,1"))
                                 (rule "polySimp_elimOne" (formula "41") (term "1,1,1,0,1,1,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "41") (term "1,1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "41") (term "1,1,0,0,1"))
                                 (rule "mul_literals" (formula "41") (term "0,1,1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "41") (term "1,1,1,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0,0,1,0,1"))
                                 (rule "eqSymm" (formula "41") (term "1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "41") (term "1,1,0,1,1,0,1"))
                                 (rule "polySimp_rightDist" (formula "41") (term "1,1,0,1,1,0,1"))
                                 (rule "mul_literals" (formula "41") (term "0,1,1,0,1,1,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0,1,1,0,1"))
                                 (rule "polySimp_elimOne" (formula "41") (term "1,1,1,0,1,1,0,1"))
                                 (rule "commute_or_2" (formula "22") (term "0"))
                                 (rule "ifthenelse_split" (formula "4") (term "0"))
                                 (branch "self.chosen.length ≥ 1 TRUE"
                                    (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "4"))
                                    (rule "leq_literals" (formula "18") (term "0"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "true_left" (formula "18"))
                                    (rule "nnf_imp2or" (formula "29") (term "0"))
                                    (rule "equalityToSeqGetAndSeqLenLeft" (formula "5") (inst "iv=iv"))
                                    (rule "andLeft" (formula "5"))
                                    (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
                                    (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "7"))
                                    (builtin "One Step Simplification" (formula "5"))
                                    (rule "true_left" (formula "5"))
                                    (rule "applyEq" (formula "5") (term "0,0,1,0") (ifseqformula "6"))
                                    (builtin "One Step Simplification" (formula "5"))
                                    (rule "true_left" (formula "5"))
                                    (rule "equalityToSeqGetAndSeqLenLeft" (formula "26") (inst "iv=iv"))
                                    (rule "andLeft" (formula "26"))
                                    (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                                    (rule "applyEq" (formula "27") (term "0,0,1,0,0,1,0,0") (ifseqformula "28"))
                                    (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "28"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "true_left" (formula "26"))
                                    (rule "applyEq" (formula "26") (term "0,0,1,0") (ifseqformula "27"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "true_left" (formula "26"))
                                    (rule "commute_or_2" (formula "11") (term "0"))
                                    (rule "nnf_notAnd" (formula "28") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
                                    (rule "mul_literals" (formula "28") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "28") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                                    (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "27") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                                    (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "27") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                                    (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
                                    (rule "ifthenelse_split" (formula "16") (term "1"))
                                    (branch "self.unsigned.length ≥ 1 TRUE"
                                       (rule "replace_known_left" (formula "18") (term "0,1,1,0,0") (ifseqformula "16"))
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "commute_or_2" (formula "13") (term "0"))
                                       (rule "commute_or_2" (formula "12") (term "0"))
                                       (rule "commute_or_2" (formula "14") (term "0"))
                                       (rule "arrayLengthIsAShort" (formula "17") (term "1,0,0,0"))
                                       (builtin "One Step Simplification" (formula "17"))
                                       (rule "true_left" (formula "17"))
                                       (rule "arrayLengthNotNegative" (formula "17") (term "1,0,0,0"))
                                       (rule "ifthenelse_split" (formula "22") (term "1"))
                                       (branch "msg.length ≥ 1 TRUE"
                                          (rule "replace_known_left" (formula "24") (term "0,1,1,0") (ifseqformula "22"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "nnf_imp2or" (formula "43") (term "0,1"))
                                          (rule "ifthenelse_split" (formula "23") (term "0"))
                                          (branch "self.concatenated.length ≥ 1 TRUE"
                                             (rule "applyEq" (formula "25") (term "1,1,1,0,0,1,0,0") (ifseqformula "24"))
                                             (rule "applyEq" (formula "23") (term "0") (ifseqformula "24"))
                                             (rule "nnf_notAnd" (formula "32") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "32") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
                                             (rule "mul_literals" (formula "32") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "32") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "32") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0"))
                                             (rule "arrayLengthIsAShort" (formula "18") (term "1,0,1,0,0"))
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "true_left" (formula "18"))
                                             (rule "arrayLengthNotNegative" (formula "18") (term "1,0,1,0,0"))
                                             (rule "ifthenelse_split" (formula "2") (term "0"))
                                             (branch "self.encrypted.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "45") (term "0,0,0,1,0") (ifseqformula "3"))
                                                (rule "applyEqReverse" (formula "45") (term "0,1,1,1,1,0,0,0,1") (ifseqformula "3"))
                                                (rule "applyEqReverse" (formula "45") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "3"))
                                                (rule "applyEqReverse" (formula "45") (term "0,0,0,1,1,1,0,0,0,1") (ifseqformula "3"))
                                                (rule "applyEqReverse" (formula "45") (term "0,1,1,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "45"))
                                                (rule "allRight" (formula "45") (inst "sk=iv_44"))
                                                (rule "orRight" (formula "45"))
                                                (rule "notRight" (formula "45"))
                                                (rule "andLeft" (formula "1"))
                                                (rule "applyEqReverse" (formula "47") (term "1,1,1") (ifseqformula "5"))
                                                (rule "hideAuxiliaryEq" (formula "5"))
                                                (rule "eqSymm" (formula "46"))
                                                (rule "replace_known_left" (formula "46") (term "0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "1")))
                                                (rule "inEqSimp_homoInEq0" (formula "2"))
                                                (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                (rule "inEqSimp_homoInEq0" (formula "46") (term "0,1"))
                                                (rule "polySimp_addComm1" (formula "46") (term "0,0,1"))
                                                (rule "inEqSimp_homoInEq0" (formula "46") (term "0,0"))
                                                (rule "polySimp_addComm1" (formula "46") (term "0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                (rule "mul_literals" (formula "2") (term "0,1"))
                                                (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "46") (term "0,1"))
                                                (rule "polySimp_mulComm0" (formula "46") (term "1,0,1"))
                                                (rule "polySimp_rightDist" (formula "46") (term "1,0,1"))
                                                (rule "mul_literals" (formula "46") (term "0,1,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "46") (term "1,1,0,1"))
                                                (rule "polySimp_elimOne" (formula "46") (term "1,1,0,1"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "46") (term "0,0"))
                                                (rule "polySimp_mulComm0" (formula "46") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "46") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "46") (term "1,1,0,0"))
                                                (rule "mul_literals" (formula "46") (term "0,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "46") (term "1,1,0,0"))
                                                (rule "pullOutSelect" (formula "46") (term "1,0") (inst "selectSK=arr_386"))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "eqSymm" (formula "47"))
                                                (rule "commute_or" (formula "37") (term "0,0"))
                                                (rule "lenNonNegative" (formula "22") (term "0"))
                                                (rule "inEqSimp_commuteLeq" (formula "22"))
                                                (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                                (rule "inEqSimp_subsumption1" (formula "22") (ifseqformula "19"))
                                                (rule "leq_literals" (formula "22") (term "0"))
                                                (builtin "One Step Simplification" (formula "22"))
                                                (rule "true_left" (formula "22"))
                                                (rule "commute_or_2" (formula "35") (term "0"))
                                                (rule "commute_or" (formula "14") (term "0,0"))
                                                (rule "commute_or_2" (formula "34") (term "0"))
                                                (rule "commute_or_2" (formula "23") (term "0"))
                                                (rule "commute_or" (formula "16") (term "0,0"))
                                                (rule "commute_or" (formula "15") (term "0,0"))
                                                (rule "commute_or" (formula "17") (term "0,0"))
                                                (rule "commute_or_2" (formula "36") (term "0"))
                                                (rule "commute_or" (formula "28") (term "0,0"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "8") (term "1,1") (ifseqformula "9"))
                                                (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "45"))
                                                (builtin "One Step Simplification" (formula "8"))
                                                (rule "commute_or" (formula "36") (term "0,0"))
                                                (rule "commute_or" (formula "35") (term "0,0"))
                                                (rule "commute_or" (formula "24") (term "0,0"))
                                                (rule "commute_or" (formula "37") (term "0,0"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "25") (term "0,0") (ifseqformula "10"))
                                                (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "5"))
                                                (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "44")))
                                                (rule "true_left" (formula "25"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "25") (term "0,1") (ifseqformula "10"))
                                                (rule "replace_known_right" (formula "25") (term "0") (ifseqformula "45"))
                                                (builtin "One Step Simplification" (formula "25"))
                                                (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                (rule "arrayLengthIsAShort" (formula "40") (term "1,1,0"))
                                                (builtin "One Step Simplification" (formula "40"))
                                                (rule "true_left" (formula "40"))
                                                (rule "ifthenelse_to_or_right" (formula "30") (term "0,0,0"))
                                                (builtin "One Step Simplification" (formula "30"))
                                                (rule "nnf_notAnd" (formula "30") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "30") (term "1,0,0,0,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "30") (term "0,0,0,0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "30") (term "1,0,0,0,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "30") (term "0,0,0,1,0,0,0,0,0"))
                                                (rule "add_zero_left" (formula "30") (term "0,0,1,0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0,0,0,0"))
                                                (rule "nnf_notAnd" (formula "30") (term "0,1,1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "30") (term "1,0,1,1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,1,1,0,0,0"))
                                                (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,1,1,0,0,0"))
                                                (rule "add_literals" (formula "30") (term "0,0,0,1,0,1,1,0,0,0"))
                                                (rule "add_zero_left" (formula "30") (term "0,0,1,0,1,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,1,1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,1,1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "30") (term "1,1,0,1,1,0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "30") (term "0,0,1,1,0,0,0"))
                                                (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,1,1,0,0,0"))
                                                (rule "add_zero_right" (formula "30") (term "0,0,0,0,1,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,1,1,0,0,0"))
                                                (rule "mul_literals" (formula "30") (term "1,0,0,1,1,0,0,0"))
                                                (rule "commute_or" (formula "30") (term "0,0"))
                                                (rule "commute_or_2" (formula "30") (term "0"))
                                                (rule "commute_or_2" (formula "30") (term "0,1,0"))
                                                (rule "commute_or" (formula "30") (term "1,1,0"))
                                                (rule "commute_or" (formula "30") (term "0,0,1,0"))
                                                (rule "commute_or_2" (formula "30") (term "0,1,1,0"))
                                                (rule "commute_or" (formula "30") (term "0,0,1,1,0"))
                                                (rule "ifthenelse_to_or_right" (formula "24") (term "0,0,0"))
                                                (rule "nnf_notAnd" (formula "24") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,0,0,0"))
                                                (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "24") (term "0,0,0,0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0,0"))
                                                (rule "commute_or" (formula "24") (term "0,0"))
                                                (rule "commute_or_2" (formula "24") (term "0"))
                                                (rule "commute_or" (formula "24") (term "1,1,0"))
                                                (rule "commute_or_2" (formula "24") (term "0,1,0"))
                                                (rule "commute_or" (formula "24") (term "0,0,1,0"))
                                                (rule "cnf_rightDist" (formula "30") (term "1,1,0"))
                                                (rule "commute_or_2" (formula "30") (term "0,1,1,0"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "30") (term "0,0,1,1,0"))
                                                (rule "add_literals" (formula "30") (term "1,1,0,0,1,1,0"))
                                                (rule "qeq_literals" (formula "30") (term "1,0,0,1,1,0"))
                                                (builtin "One Step Simplification" (formula "30"))
                                                (rule "shift_paren_or" (formula "30") (term "1,1,0"))
                                                (rule "commute_or" (formula "30") (term "0,1,1,0"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "30") (term "1,1,0"))
                                                (rule "inEqSimp_homoInEq1" (formula "30") (term "1,1,1,0"))
                                                (rule "polySimp_pullOutFactor1" (formula "30") (term "0,1,1,1,0"))
                                                (rule "add_literals" (formula "30") (term "1,0,1,1,1,0"))
                                                (rule "times_zero_1" (formula "30") (term "0,1,1,1,0"))
                                                (rule "leq_literals" (formula "30") (term "1,1,1,0"))
                                                (builtin "One Step Simplification" (formula "30"))
                                                (rule "shift_paren_or" (formula "30") (term "0"))
                                                (rule "commute_or_2" (formula "30") (term "0,0"))
                                                (builtin "One Step Simplification" (formula "30"))
                                                (rule "shift_paren_or" (formula "30") (term "0,0"))
                                                (rule "commute_or" (formula "30") (term "0,0,0"))
                                                (builtin "One Step Simplification" (formula "30"))
                                                (rule "cnf_rightDist" (formula "24") (term "1,1,0"))
                                                (rule "cnf_rightDist" (formula "24") (term "0"))
                                                (rule "distr_forallAnd" (formula "24"))
                                                (rule "andLeft" (formula "24"))
                                                (rule "commute_or" (formula "25") (term "0"))
                                                (rule "shift_paren_or" (formula "24") (term "0"))
                                                (rule "commute_or_2" (formula "24") (term "0,0"))
                                                (builtin "One Step Simplification" (formula "24"))
                                                (rule "commute_or" (formula "25") (term "1,1,0"))
                                                (rule "shift_paren_or" (formula "24") (term "0,0"))
                                                (rule "commute_or" (formula "24") (term "0,0,0"))
                                                (builtin "One Step Simplification" (formula "24"))
                                                (rule "cnf_rightDist" (formula "25") (term "0"))
                                                (rule "distr_forallAnd" (formula "25"))
                                                (rule "andLeft" (formula "25"))
                                                (rule "commute_or_2" (formula "25") (term "0"))
                                                (rule "shift_paren_or" (formula "26") (term "0"))
                                                (rule "commute_or_2" (formula "26") (term "0,0"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "26") (term "0"))
                                                (rule "inEqSimp_homoInEq1" (formula "26") (term "1,0"))
                                                (rule "polySimp_pullOutFactor1" (formula "26") (term "0,1,0"))
                                                (rule "add_literals" (formula "26") (term "1,0,1,0"))
                                                (rule "times_zero_1" (formula "26") (term "0,1,0"))
                                                (rule "leq_literals" (formula "26") (term "1,0"))
                                                (builtin "One Step Simplification" (formula "26"))
                                                (rule "true_left" (formula "26"))
                                                (rule "shift_paren_or" (formula "25") (term "0,0"))
                                                (rule "commute_or" (formula "25") (term "0,0,0"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "25") (term "0,0"))
                                                (rule "add_zero_right" (formula "25") (term "1,1,0,0"))
                                                (rule "qeq_literals" (formula "25") (term "1,0,0"))
                                                (builtin "One Step Simplification" (formula "25"))
                                                (rule "true_left" (formula "25"))
                                                (rule "ifthenelse_split" (formula "3") (term "0"))
                                                (branch "self.encrypted[iv_40].length ≥ 1 TRUE"
                                                   (rule "replace_known_left" (formula "51") (term "0,0") (ifseqformula "4"))
                                                   (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "4")))
                                                   (rule "arrayLengthIsAShort" (formula "21") (term "0"))
                                                   (builtin "One Step Simplification" (formula "21"))
                                                   (rule "true_left" (formula "21"))
                                                   (rule "arrayLengthNotNegative" (formula "21") (term "0"))
                                                   (rule "inEqSimp_subsumption1" (formula "21") (ifseqformula "22"))
                                                   (rule "leq_literals" (formula "21") (term "0"))
                                                   (builtin "One Step Simplification" (formula "21"))
                                                   (rule "true_left" (formula "21"))
                                                   (rule "ifthenelse_split" (formula "1") (term "0"))
                                                   (branch " ¬self.encrypted[iv_40] = null ∧ ¬self.encrypted[iv_40].<created> = TRUE TRUE"
                                                      (rule "andLeft" (formula "1"))
                                                      (rule "notLeft" (formula "2"))
                                                      (rule "notLeft" (formula "1"))
                                                      (rule "referencedObjectIsCreatedRight" (formula "43") (ifseqformula "42"))
                                                      (rule "close" (formula "43") (ifseqformula "11"))
                                                   )
                                                   (branch " ¬self.encrypted[iv_40] = null ∧ ¬self.encrypted[iv_40].<created> = TRUE FALSE"
                                                      (rule "close" (formula "52") (ifseqformula "1"))
                                                   )
                                                )
                                                (branch "self.encrypted[iv_40].length ≥ 1 FALSE"
                                                   (rule "inEqSimp_geqRight" (formula "41"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "inEqSimp_homoInEq1" (formula "4"))
                                                   (rule "times_zero_2" (formula "4") (term "1,0"))
                                                   (rule "add_zero_right" (formula "4") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                                   (rule "mul_literals" (formula "4") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "3"))
                                                   (rule "qeq_literals" (formula "4") (term "0"))
                                                   (builtin "One Step Simplification" (formula "4"))
                                                   (rule "closeFalse" (formula "4"))
                                                )
                                             )
                                             (branch "self.encrypted.<created> = TRUE FALSE"
                                                (rule "referencedObjectIsCreatedRight" (formula "35") (ifseqformula "40"))
                                                (rule "close" (formula "35") (ifseqformula "6"))
                                             )
                                          )
                                          (branch "self.concatenated.length ≥ 1 FALSE"
                                             (rule "eqSymm" (formula "23"))
                                             (rule "inEqSimp_geqRight" (formula "34"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "applyEq" (formula "23") (term "0") (ifseqformula "24"))
                                             (rule "qeq_literals" (formula "23"))
                                             (rule "closeFalse" (formula "23"))
                                          )
                                       )
                                       (branch "msg.length ≥ 1 FALSE"
                                          (builtin "One Step Simplification" (formula "22"))
                                          (rule "replace_known_right" (formula "23") (term "0,1,1,0") (ifseqformula "33"))
                                          (builtin "One Step Simplification" (formula "23"))
                                          (rule "inEqSimp_geqRight" (formula "33"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_notGeq" (formula "23") (term "0"))
                                          (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                                          (rule "add_literals" (formula "23") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "23") (term "0,0"))
                                          (rule "nnf_imp2or" (formula "43") (term "0,1"))
                                          (rule "nnf_notAnd" (formula "32") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "32") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "32") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "32") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
                                          (rule "mul_literals" (formula "32") (term "1,0,0,0"))
                                          (rule "arrayLengthIsAShort" (formula "19") (term "1,0,1,0,0"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "true_left" (formula "19"))
                                          (rule "arrayLengthNotNegative" (formula "19") (term "1,0,1,0,0"))
                                          (rule "ifthenelse_split" (formula "3") (term "0"))
                                          (branch "self.encrypted.<created> = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "45") (term "0,0,0,1,1,1,0,0,0,1") (ifseqformula "4"))
                                             (rule "applyEqReverse" (formula "45") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "4"))
                                             (rule "applyEqReverse" (formula "45") (term "0,0,0,1,0") (ifseqformula "4"))
                                             (rule "applyEqReverse" (formula "45") (term "1,1,1,1,0,1") (ifseqformula "4"))
                                             (rule "applyEqReverse" (formula "45") (term "0,1,1,1,1,0,0,0,1") (ifseqformula "4"))
                                             (rule "applyEqReverse" (formula "45") (term "0,1,1,0") (ifseqformula "4"))
                                             (builtin "One Step Simplification" (formula "45"))
                                             (rule "allRight" (formula "45") (inst "sk=iv_43"))
                                             (rule "orRight" (formula "45"))
                                             (rule "notRight" (formula "45"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "hideAuxiliaryEq" (formula "6"))
                                             (rule "eqSymm" (formula "46"))
                                             (rule "replace_known_left" (formula "46") (term "0,0,1") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "1")))
                                             (rule "inEqSimp_homoInEq0" (formula "2"))
                                             (rule "polySimp_addComm1" (formula "2") (term "0"))
                                             (rule "inEqSimp_homoInEq0" (formula "46") (term "0,1"))
                                             (rule "polySimp_addComm1" (formula "46") (term "0,0,1"))
                                             (rule "inEqSimp_homoInEq0" (formula "46") (term "0,0"))
                                             (rule "polySimp_addComm1" (formula "46") (term "0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                             (rule "polySimp_rightDist" (formula "2") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                             (rule "mul_literals" (formula "2") (term "0,1"))
                                             (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "46") (term "0,1"))
                                             (rule "polySimp_mulComm0" (formula "46") (term "1,0,1"))
                                             (rule "polySimp_rightDist" (formula "46") (term "1,0,1"))
                                             (rule "polySimp_mulLiterals" (formula "46") (term "1,1,0,1"))
                                             (rule "mul_literals" (formula "46") (term "0,1,0,1"))
                                             (rule "polySimp_elimOne" (formula "46") (term "1,1,0,1"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "46") (term "0,0"))
                                             (rule "polySimp_mulComm0" (formula "46") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "46") (term "1,0,0"))
                                             (rule "mul_literals" (formula "46") (term "0,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "46") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "46") (term "1,1,0,0"))
                                             (rule "pullOutSelect" (formula "46") (term "1,0") (inst "selectSK=arr_385"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "eqSymm" (formula "47"))
                                             (rule "commute_or" (formula "37") (term "0,0"))
                                             (rule "lenNonNegative" (formula "23") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "23"))
                                             (rule "applyEq" (formula "23") (term "0") (ifseqformula "24"))
                                             (rule "inEqSimp_subsumption1" (formula "23") (ifseqformula "20"))
                                             (rule "leq_literals" (formula "23") (term "0"))
                                             (builtin "One Step Simplification" (formula "23"))
                                             (rule "true_left" (formula "23"))
                                             (rule "commute_or_2" (formula "35") (term "0"))
                                             (rule "commute_or" (formula "15") (term "0,0"))
                                             (rule "commute_or_2" (formula "34") (term "0"))
                                             (rule "commute_or_2" (formula "24") (term "0"))
                                             (rule "commute_or" (formula "17") (term "0,0"))
                                             (rule "commute_or" (formula "16") (term "0,0"))
                                             (rule "commute_or" (formula "18") (term "0,0"))
                                             (rule "commute_or" (formula "28") (term "0,0"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "28") (term "0"))
                                             (rule "add_zero_right" (formula "28") (term "1,1,0"))
                                             (rule "qeq_literals" (formula "28") (term "1,0"))
                                             (builtin "One Step Simplification" (formula "28"))
                                             (rule "true_left" (formula "28"))
                                             (rule "commute_or_2" (formula "35") (term "0"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "9") (term "1,1") (ifseqformula "10"))
                                             (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "44"))
                                             (builtin "One Step Simplification" (formula "9"))
                                             (rule "commute_or" (formula "35") (term "0,0"))
                                             (rule "commute_or" (formula "34") (term "0,0"))
                                             (rule "commute_or" (formula "25") (term "0,0"))
                                             (rule "commute_or" (formula "36") (term "0,0"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "26") (term "0,1") (ifseqformula "11"))
                                             (rule "replace_known_right" (formula "26") (term "0") (ifseqformula "44"))
                                             (builtin "One Step Simplification" (formula "26"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "27") (term "0,0") (ifseqformula "11"))
                                             (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "44"))
                                             (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "6")))
                                             (rule "true_left" (formula "27"))
                                             (rule "arrayLengthNotNegative" (formula "38") (term "1,1,0"))
                                             (rule "arrayLengthIsAShort" (formula "39") (term "1,1,0"))
                                             (builtin "One Step Simplification" (formula "39"))
                                             (rule "true_left" (formula "39"))
                                             (rule "ifthenelse_to_or_right" (formula "25") (term "0,0,0"))
                                             (rule "nnf_notAnd" (formula "25") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "25") (term "0,0,1,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,0,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0,0,0,0"))
                                             (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "25") (term "0,0,0,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0,0"))
                                             (rule "commute_or" (formula "25") (term "0,0"))
                                             (rule "commute_or_2" (formula "25") (term "0"))
                                             (rule "commute_or_2" (formula "25") (term "0,1,0"))
                                             (rule "commute_or" (formula "25") (term "1,1,0"))
                                             (rule "commute_or" (formula "25") (term "0,0,1,0"))
                                             (rule "cnf_rightDist" (formula "25") (term "1,1,0"))
                                             (rule "cnf_rightDist" (formula "25") (term "0"))
                                             (rule "distr_forallAnd" (formula "25"))
                                             (rule "andLeft" (formula "25"))
                                             (rule "commute_or" (formula "26") (term "0"))
                                             (rule "shift_paren_or" (formula "25") (term "0"))
                                             (rule "commute_or_2" (formula "25") (term "0,0"))
                                             (builtin "One Step Simplification" (formula "25"))
                                             (rule "commute_or" (formula "26") (term "1,1,0"))
                                             (rule "shift_paren_or" (formula "25") (term "0,0"))
                                             (rule "commute_or" (formula "25") (term "0,0,0"))
                                             (builtin "One Step Simplification" (formula "25"))
                                             (rule "cnf_rightDist" (formula "26") (term "0"))
                                             (rule "distr_forallAnd" (formula "26"))
                                             (rule "andLeft" (formula "26"))
                                             (rule "commute_or_2" (formula "26") (term "0"))
                                             (rule "shift_paren_or" (formula "27") (term "0"))
                                             (rule "commute_or_2" (formula "27") (term "0,0"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "27") (term "0"))
                                             (rule "inEqSimp_homoInEq1" (formula "27") (term "1,0"))
                                             (rule "polySimp_pullOutFactor1" (formula "27") (term "0,1,0"))
                                             (rule "add_literals" (formula "27") (term "1,0,1,0"))
                                             (rule "times_zero_1" (formula "27") (term "0,1,0"))
                                             (rule "leq_literals" (formula "27") (term "1,0"))
                                             (builtin "One Step Simplification" (formula "27"))
                                             (rule "true_left" (formula "27"))
                                             (rule "shift_paren_or" (formula "26") (term "0,0"))
                                             (rule "commute_or" (formula "26") (term "0,0,0"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "26") (term "0,0"))
                                             (rule "add_zero_right" (formula "26") (term "1,1,0,0"))
                                             (rule "qeq_literals" (formula "26") (term "1,0,0"))
                                             (builtin "One Step Simplification" (formula "26"))
                                             (rule "true_left" (formula "26"))
                                             (rule "ifthenelse_split" (formula "3") (term "0"))
                                             (branch "self.encrypted[iv_40].length ≥ 1 TRUE"
                                                (rule "replace_known_left" (formula "50") (term "0,0") (ifseqformula "4"))
                                                (builtin "One Step Simplification" (formula "50") (ifInst ""  (formula "4")))
                                                (rule "arrayLengthIsAShort" (formula "22") (term "0"))
                                                (builtin "One Step Simplification" (formula "22"))
                                                (rule "true_left" (formula "22"))
                                                (rule "arrayLengthNotNegative" (formula "22") (term "0"))
                                                (rule "inEqSimp_subsumption1" (formula "22") (ifseqformula "23"))
                                                (rule "leq_literals" (formula "22") (term "0"))
                                                (builtin "One Step Simplification" (formula "22"))
                                                (rule "true_left" (formula "22"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "25") (term "1,2,0,0,0") (ifseqformula "12"))
                                                (rule "ifthenelse_split" (formula "1") (term "0"))
                                                (branch " ¬self.encrypted[iv_40] = null ∧ ¬self.encrypted[iv_40].<created> = TRUE TRUE"
                                                   (rule "andLeft" (formula "1"))
                                                   (rule "notLeft" (formula "1"))
                                                   (rule "notLeft" (formula "1"))
                                                   (rule "referencedObjectIsCreatedRight" (formula "42") (ifseqformula "43"))
                                                   (rule "close" (formula "42") (ifseqformula "12"))
                                                )
                                                (branch " ¬self.encrypted[iv_40] = null ∧ ¬self.encrypted[iv_40].<created> = TRUE FALSE"
                                                   (rule "close" (formula "52") (ifseqformula "1"))
                                                )
                                             )
                                             (branch "self.encrypted[iv_40].length ≥ 1 FALSE"
                                                (rule "inEqSimp_geqRight" (formula "40"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "inEqSimp_homoInEq1" (formula "4"))
                                                (rule "times_zero_2" (formula "4") (term "1,0"))
                                                (rule "add_zero_right" (formula "4") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                                (rule "mul_literals" (formula "4") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "3"))
                                                (rule "qeq_literals" (formula "4") (term "0"))
                                                (builtin "One Step Simplification" (formula "4"))
                                                (rule "closeFalse" (formula "4"))
                                             )
                                          )
                                          (branch "self.encrypted.<created> = TRUE FALSE"
                                             (rule "referencedObjectIsCreatedRight" (formula "35") (ifseqformula "40"))
                                             (rule "close" (formula "35") (ifseqformula "7"))
                                          )
                                       )
                                    )
                                    (branch "self.unsigned.length ≥ 1 FALSE"
                                       (rule "replace_known_right" (formula "17") (term "0,1,1,0,0") (ifseqformula "31"))
                                       (builtin "One Step Simplification" (formula "17"))
                                       (rule "inEqSimp_geqRight" (formula "31"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_or_tautInEq0" (formula "18") (term "0,0"))
                                       (rule "add_zero_right" (formula "18") (term "1,1,0,0"))
                                       (rule "qeq_literals" (formula "18") (term "1,0,0"))
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "true_left" (formula "18"))
                                       (rule "commute_or_2" (formula "14") (term "0"))
                                       (rule "commute_or_2" (formula "13") (term "0"))
                                       (rule "commute_or_2" (formula "15") (term "0"))
                                       (rule "arrayLengthNotNegative" (formula "17") (term "1,0,0,0"))
                                       (rule "arrayLengthIsAShort" (formula "18") (term "1,0,0,0"))
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "true_left" (formula "18"))
                                       (rule "ifthenelse_split" (formula "21") (term "1"))
                                       (branch "msg.length ≥ 1 TRUE"
                                          (rule "replace_known_left" (formula "23") (term "0,1,1,0") (ifseqformula "21"))
                                          (builtin "One Step Simplification" (formula "23"))
                                          (rule "nnf_imp2or" (formula "42") (term "0,1"))
                                          (rule "ifthenelse_split" (formula "22") (term "0"))
                                          (branch "self.concatenated.length ≥ 1 TRUE"
                                             (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                             (rule "applyEq" (formula "23") (term "1,1,1,0,0,1,0,0") (ifseqformula "22"))
                                             (rule "nnf_notAnd" (formula "31") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "31") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "31") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0"))
                                             (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                                             (rule "arrayLengthNotNegative" (formula "18") (term "1,0,1,0,0"))
                                             (rule "arrayLengthIsAShort" (formula "19") (term "1,0,1,0,0"))
                                             (builtin "One Step Simplification" (formula "19"))
                                             (rule "true_left" (formula "19"))
                                             (rule "ifthenelse_split" (formula "3") (term "0"))
                                             (branch "self.encrypted.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "44") (term "1,1,1,1,0,1") (ifseqformula "4"))
                                                (rule "applyEqReverse" (formula "44") (term "0,1,1,1,1,0,0,0,1") (ifseqformula "4"))
                                                (rule "applyEqReverse" (formula "44") (term "0,0,0,1,1,1,0,0,0,1") (ifseqformula "4"))
                                                (rule "applyEqReverse" (formula "44") (term "0,1,1,0") (ifseqformula "4"))
                                                (rule "applyEqReverse" (formula "44") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "4"))
                                                (rule "applyEqReverse" (formula "44") (term "0,0,0,1,0") (ifseqformula "4"))
                                                (builtin "One Step Simplification" (formula "44"))
                                                (rule "allRight" (formula "44") (inst "sk=iv_42"))
                                                (rule "orRight" (formula "44"))
                                                (rule "notRight" (formula "44"))
                                                (rule "andLeft" (formula "1"))
                                                (rule "hideAuxiliaryEq" (formula "6"))
                                                (rule "eqSymm" (formula "45"))
                                                (rule "replace_known_left" (formula "45") (term "0,0,1") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "1")))
                                                (rule "inEqSimp_homoInEq0" (formula "2"))
                                                (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                (rule "inEqSimp_homoInEq0" (formula "45") (term "0,0"))
                                                (rule "eqSymm" (formula "45"))
                                                (rule "polySimp_addComm1" (formula "45") (term "0,0,1"))
                                                (rule "inEqSimp_homoInEq0" (formula "45") (term "0,0"))
                                                (rule "polySimp_addComm1" (formula "45") (term "0,0,0"))
                                                (rule "eqSymm" (formula "45"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                (rule "mul_literals" (formula "2") (term "0,1"))
                                                (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "45") (term "0,1"))
                                                (rule "polySimp_mulComm0" (formula "45") (term "1,0,1"))
                                                (rule "polySimp_rightDist" (formula "45") (term "1,0,1"))
                                                (rule "mul_literals" (formula "45") (term "0,1,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "45") (term "1,1,0,1"))
                                                (rule "polySimp_elimOne" (formula "45") (term "1,1,0,1"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "45") (term "0,0"))
                                                (rule "polySimp_mulComm0" (formula "45") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "45") (term "1,0,0"))
                                                (rule "mul_literals" (formula "45") (term "0,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "45") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "45") (term "1,1,0,0"))
                                                (rule "pullOutSelect" (formula "45") (term "1,0") (inst "selectSK=arr_384"))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "eqSymm" (formula "46"))
                                                (rule "commute_or" (formula "36") (term "0,0"))
                                                (rule "lenNonNegative" (formula "22") (term "0"))
                                                (rule "inEqSimp_commuteLeq" (formula "22"))
                                                (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                                (rule "qeq_literals" (formula "22"))
                                                (rule "true_left" (formula "22"))
                                                (rule "commute_or_2" (formula "34") (term "0"))
                                                (rule "commute_or" (formula "15") (term "0,0"))
                                                (rule "commute_or_2" (formula "33") (term "0"))
                                                (rule "commute_or" (formula "17") (term "0,0"))
                                                (rule "commute_or" (formula "16") (term "0,0"))
                                                (rule "commute_or" (formula "18") (term "0,0"))
                                                (rule "commute_or_2" (formula "35") (term "0"))
                                                (rule "commute_or" (formula "27") (term "0,0"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "9") (term "1,1") (ifseqformula "10"))
                                                (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "44"))
                                                (builtin "One Step Simplification" (formula "9"))
                                                (rule "commute_or" (formula "35") (term "0,0"))
                                                (rule "commute_or" (formula "34") (term "0,0"))
                                                (rule "commute_or" (formula "36") (term "0,0"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "0,0") (ifseqformula "11"))
                                                (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "43"))
                                                (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "6")))
                                                (rule "true_left" (formula "24"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "0,1") (ifseqformula "11"))
                                                (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "44"))
                                                (builtin "One Step Simplification" (formula "24"))
                                                (rule "arrayLengthNotNegative" (formula "38") (term "1,1,0"))
                                                (rule "arrayLengthIsAShort" (formula "39") (term "1,1,0"))
                                                (builtin "One Step Simplification" (formula "39"))
                                                (rule "true_left" (formula "39"))
                                                (rule "ifthenelse_to_or_left" (formula "29") (term "0,0,0"))
                                                (rule "eqSymm" (formula "29") (term "1,0,0,0,0"))
                                                (rule "eqSymm" (formula "29") (term "1,1,0,0,0"))
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "nnf_notAnd" (formula "29") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0,0,0"))
                                                (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "29") (term "0,0,0,0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0,0,0"))
                                                (rule "add_zero_left" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,0,0"))
                                                (rule "nnf_notAnd" (formula "29") (term "0,1,1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "29") (term "1,0,1,1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,1,1,0,0,0"))
                                                (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,1,1,0,0,0"))
                                                (rule "add_literals" (formula "29") (term "0,0,0,1,0,1,1,0,0,0"))
                                                (rule "add_zero_left" (formula "29") (term "0,0,1,0,1,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,1,1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,1,1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "29") (term "1,1,0,1,1,0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "29") (term "0,0,1,1,0,0,0"))
                                                (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,1,1,0,0,0"))
                                                (rule "add_zero_right" (formula "29") (term "0,0,0,0,1,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,1,1,0,0,0"))
                                                (rule "mul_literals" (formula "29") (term "1,0,0,1,1,0,0,0"))
                                                (rule "commute_or" (formula "29") (term "0,0"))
                                                (rule "commute_or_2" (formula "29") (term "0"))
                                                (rule "commute_or" (formula "29") (term "1,1,0"))
                                                (rule "commute_or_2" (formula "29") (term "0,1,0"))
                                                (rule "commute_or_2" (formula "29") (term "0,1,1,0"))
                                                (rule "commute_or" (formula "29") (term "0,0,1,0"))
                                                (rule "commute_or" (formula "29") (term "0,0,1,1,0"))
                                                (rule "cnf_rightDist" (formula "29") (term "1,1,0"))
                                                (rule "commute_or_2" (formula "29") (term "0,1,1,0"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "29") (term "0,0,1,1,0"))
                                                (rule "add_zero_right" (formula "29") (term "1,1,0,0,1,1,0"))
                                                (rule "qeq_literals" (formula "29") (term "1,0,0,1,1,0"))
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "shift_paren_or" (formula "29") (term "1,1,0"))
                                                (rule "commute_or" (formula "29") (term "0,1,1,0"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "29") (term "1,1,0"))
                                                (rule "inEqSimp_homoInEq1" (formula "29") (term "1,1,1,0"))
                                                (rule "polySimp_pullOutFactor1" (formula "29") (term "0,1,1,1,0"))
                                                (rule "add_literals" (formula "29") (term "1,0,1,1,1,0"))
                                                (rule "times_zero_1" (formula "29") (term "0,1,1,1,0"))
                                                (rule "leq_literals" (formula "29") (term "1,1,1,0"))
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "shift_paren_or" (formula "29") (term "0"))
                                                (rule "commute_or_2" (formula "29") (term "0,0"))
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "shift_paren_or" (formula "29") (term "0,0"))
                                                (rule "commute_or" (formula "29") (term "0,0,0"))
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "ifthenelse_to_or_left" (formula "29") (term "0,0,0"))
                                                (rule "eqSymm" (formula "29") (term "1,1,0,0,0"))
                                                (rule "eqSymm" (formula "29") (term "1,0,0,0,0"))
                                                (rule "nnf_notAnd" (formula "29") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0,0,0"))
                                                (rule "add_zero_left" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0,0,0"))
                                                (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "29") (term "0,0,0,0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0"))
                                                (rule "commute_or" (formula "29") (term "0,0"))
                                                (rule "commute_or_2" (formula "29") (term "0"))
                                                (rule "commute_or" (formula "29") (term "1,1,0"))
                                                (rule "cnf_rightDist" (formula "29") (term "1,1,0"))
                                                (rule "cnf_rightDist" (formula "29") (term "0"))
                                                (rule "distr_forallAnd" (formula "29"))
                                                (rule "andLeft" (formula "29"))
                                                (rule "commute_or" (formula "30") (term "0"))
                                                (rule "shift_paren_or" (formula "29") (term "0"))
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "commute_or" (formula "30") (term "1,1,0"))
                                                (rule "cnf_rightDist" (formula "30") (term "0"))
                                                (rule "distr_forallAnd" (formula "30"))
                                                (rule "andLeft" (formula "30"))
                                                (rule "commute_or_2" (formula "30") (term "0"))
                                                (rule "shift_paren_or" (formula "31") (term "0"))
                                                (rule "commute_or_2" (formula "31") (term "0,0"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "31") (term "0"))
                                                (rule "inEqSimp_homoInEq1" (formula "31") (term "1,0"))
                                                (rule "polySimp_pullOutFactor1" (formula "31") (term "0,1,0"))
                                                (rule "add_literals" (formula "31") (term "1,0,1,0"))
                                                (rule "times_zero_1" (formula "31") (term "0,1,0"))
                                                (rule "leq_literals" (formula "31") (term "1,0"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "true_left" (formula "31"))
                                                (rule "shift_paren_or" (formula "30") (term "0,0"))
                                                (rule "commute_or" (formula "30") (term "0,0,0"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "30") (term "0,0"))
                                                (rule "add_zero_right" (formula "30") (term "1,1,0,0"))
                                                (rule "qeq_literals" (formula "30") (term "1,0,0"))
                                                (builtin "One Step Simplification" (formula "30"))
                                                (rule "true_left" (formula "30"))
                                                (rule "ifthenelse_split" (formula "3") (term "0"))
                                                (branch "self.encrypted[iv_40].length ≥ 1 TRUE"
                                                   (rule "replace_known_left" (formula "50") (term "0,0") (ifseqformula "4"))
                                                   (builtin "One Step Simplification" (formula "50") (ifInst ""  (formula "4")))
                                                   (rule "arrayLengthIsAShort" (formula "5") (term "0"))
                                                   (builtin "One Step Simplification" (formula "5"))
                                                   (rule "true_left" (formula "5"))
                                                   (rule "arrayLengthNotNegative" (formula "5") (term "0"))
                                                   (rule "inEqSimp_antiSymm" (formula "5") (ifseqformula "6"))
                                                   (rule "applyEq" (formula "7") (term "0") (ifseqformula "5"))
                                                   (rule "leq_literals" (formula "7"))
                                                   (rule "true_left" (formula "7"))
                                                   (rule "applyEq" (formula "6") (term "0") (ifseqformula "5"))
                                                   (rule "qeq_literals" (formula "6"))
                                                   (rule "true_left" (formula "6"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "0,1,0,0,0") (ifseqformula "12"))
                                                   (rule "ifthenelse_split" (formula "1") (term "0"))
                                                   (branch " ¬self.encrypted[iv_40] = null ∧ ¬self.encrypted[iv_40].<created> = TRUE TRUE"
                                                      (rule "andLeft" (formula "1"))
                                                      (rule "notLeft" (formula "1"))
                                                      (rule "notLeft" (formula "1"))
                                                      (rule "referencedObjectIsCreatedRight" (formula "42") (ifseqformula "43"))
                                                      (rule "close" (formula "42") (ifseqformula "12"))
                                                   )
                                                   (branch " ¬self.encrypted[iv_40] = null ∧ ¬self.encrypted[iv_40].<created> = TRUE FALSE"
                                                      (rule "close" (formula "52") (ifseqformula "1"))
                                                   )
                                                )
                                                (branch "self.encrypted[iv_40].length ≥ 1 FALSE"
                                                   (rule "inEqSimp_geqRight" (formula "40"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "inEqSimp_homoInEq1" (formula "4"))
                                                   (rule "times_zero_2" (formula "4") (term "1,0"))
                                                   (rule "add_zero_right" (formula "4") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                                   (rule "mul_literals" (formula "4") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "3"))
                                                   (rule "qeq_literals" (formula "4") (term "0"))
                                                   (builtin "One Step Simplification" (formula "4"))
                                                   (rule "closeFalse" (formula "4"))
                                                )
                                             )
                                             (branch "self.encrypted.<created> = TRUE FALSE"
                                                (rule "referencedObjectIsCreatedRight" (formula "34") (ifseqformula "39"))
                                                (rule "close" (formula "34") (ifseqformula "7"))
                                             )
                                          )
                                          (branch "self.concatenated.length ≥ 1 FALSE"
                                             (rule "eqSymm" (formula "22"))
                                             (rule "inEqSimp_geqRight" (formula "33"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "applyEq" (formula "24") (term "1,1,0") (ifseqformula "23"))
                                             (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                             (rule "qeq_literals" (formula "22"))
                                             (rule "closeFalse" (formula "22"))
                                          )
                                       )
                                       (branch "msg.length ≥ 1 FALSE"
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "replace_known_right" (formula "22") (term "0,1,1,0") (ifseqformula "32"))
                                          (builtin "One Step Simplification" (formula "22"))
                                          (rule "inEqSimp_geqRight" (formula "32"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_notGeq" (formula "22") (term "0"))
                                          (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                                          (rule "add_literals" (formula "22") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "22") (term "0,0"))
                                          (rule "nnf_imp2or" (formula "42") (term "0,1"))
                                          (rule "nnf_notAnd" (formula "31") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "31") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0"))
                                          (rule "mul_literals" (formula "31") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "31") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0"))
                                          (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                                          (rule "arrayLengthIsAShort" (formula "19") (term "1,0,1,0,0"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "true_left" (formula "19"))
                                          (rule "arrayLengthNotNegative" (formula "19") (term "1,0,1,0,0"))
                                          (rule "ifthenelse_split" (formula "4") (term "0"))
                                          (branch "self.encrypted.<created> = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "44") (term "0,0,0,1,1,1,0,0,0,1") (ifseqformula "5"))
                                             (rule "applyEqReverse" (formula "44") (term "0,0,0,1,0") (ifseqformula "5"))
                                             (rule "applyEqReverse" (formula "44") (term "0,1,1,0") (ifseqformula "5"))
                                             (builtin "One Step Simplification" (formula "44"))
                                             (rule "allRight" (formula "44") (inst "sk=iv_41"))
                                             (rule "orRight" (formula "44"))
                                             (rule "notRight" (formula "44"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "applyEqReverse" (formula "46") (term "0,1,1,1,0,1") (ifseqformula "7"))
                                             (rule "applyEqReverse" (formula "46") (term "1,1,1") (ifseqformula "7"))
                                             (rule "applyEqReverse" (formula "2") (term "0,1,1,1") (ifseqformula "7"))
                                             (rule "hideAuxiliaryEq" (formula "7"))
                                             (rule "eqSymm" (formula "45"))
                                             (rule "replace_known_left" (formula "45") (term "0,0,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "1")))
                                             (rule "inEqSimp_homoInEq0" (formula "2"))
                                             (rule "polySimp_addComm1" (formula "2") (term "0"))
                                             (rule "inEqSimp_homoInEq0" (formula "45") (term "0,0"))
                                             (rule "eqSymm" (formula "45"))
                                             (rule "polySimp_addComm1" (formula "45") (term "0,0,1"))
                                             (rule "inEqSimp_homoInEq0" (formula "45") (term "0,0"))
                                             (rule "polySimp_addComm1" (formula "45") (term "0,0,0"))
                                             (rule "eqSymm" (formula "45"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                             (rule "polySimp_rightDist" (formula "2") (term "1"))
                                             (rule "mul_literals" (formula "2") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "45") (term "0,0"))
                                             (rule "eqSymm" (formula "45"))
                                             (rule "polySimp_mulComm0" (formula "45") (term "1,0,1"))
                                             (rule "polySimp_rightDist" (formula "45") (term "1,0,1"))
                                             (rule "mul_literals" (formula "45") (term "0,1,0,1"))
                                             (rule "polySimp_mulLiterals" (formula "45") (term "1,1,0,1"))
                                             (rule "polySimp_elimOne" (formula "45") (term "1,1,0,1"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "45") (term "0,0"))
                                             (rule "polySimp_mulComm0" (formula "45") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "45") (term "1,0,0"))
                                             (rule "mul_literals" (formula "45") (term "0,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "45") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "45") (term "1,1,0,0"))
                                             (rule "eqSymm" (formula "45"))
                                             (rule "pullOutSelect" (formula "45") (term "1,0") (inst "selectSK=arr_383"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "eqSymm" (formula "46"))
                                             (rule "commute_or" (formula "36") (term "0,0"))
                                             (rule "lenNonNegative" (formula "23") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "23"))
                                             (rule "applyEq" (formula "23") (term "0") (ifseqformula "24"))
                                             (rule "qeq_literals" (formula "23"))
                                             (rule "true_left" (formula "23"))
                                             (rule "commute_or_2" (formula "34") (term "0"))
                                             (rule "commute_or" (formula "16") (term "0,0"))
                                             (rule "commute_or_2" (formula "33") (term "0"))
                                             (rule "commute_or" (formula "18") (term "0,0"))
                                             (rule "commute_or" (formula "17") (term "0,0"))
                                             (rule "commute_or" (formula "19") (term "0,0"))
                                             (rule "commute_or" (formula "27") (term "0,0"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "27") (term "0"))
                                             (rule "add_zero_right" (formula "27") (term "1,1,0"))
                                             (rule "qeq_literals" (formula "27") (term "1,0"))
                                             (builtin "One Step Simplification" (formula "27"))
                                             (rule "true_left" (formula "27"))
                                             (rule "commute_or_2" (formula "34") (term "0"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "1,1") (ifseqformula "11"))
                                             (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "43"))
                                             (builtin "One Step Simplification" (formula "10"))
                                             (rule "commute_or" (formula "34") (term "0,0"))
                                             (rule "commute_or" (formula "33") (term "0,0"))
                                             (rule "commute_or" (formula "35") (term "0,0"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "25") (term "0,1") (ifseqformula "12"))
                                             (rule "replace_known_right" (formula "25") (term "0") (ifseqformula "43"))
                                             (builtin "One Step Simplification" (formula "25"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "26") (term "0,0") (ifseqformula "12"))
                                             (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "7"))
                                             (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "43")))
                                             (rule "true_left" (formula "26"))
                                             (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                             (rule "arrayLengthIsAShort" (formula "38") (term "1,1,0"))
                                             (builtin "One Step Simplification" (formula "38"))
                                             (rule "true_left" (formula "38"))
                                             (rule "ifthenelse_split" (formula "3") (term "0"))
                                             (branch "self.encrypted[iv_40].length ≥ 1 TRUE"
                                                (rule "replace_known_left" (formula "49") (term "0,0") (ifseqformula "4"))
                                                (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "4")))
                                                (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                                (rule "inEqSimp_antiSymm" (formula "6") (ifseqformula "7"))
                                                (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
                                                (rule "qeq_literals" (formula "7"))
                                                (rule "true_left" (formula "7"))
                                                (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
                                                (rule "leq_literals" (formula "7"))
                                                (rule "true_left" (formula "7"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "25") (term "0,1,0,0,0") (ifseqformula "13"))
                                                (rule "arrayLengthNotNegative" (formula "30") (term "0,1"))
                                                (rule "arrayLengthIsAShort" (formula "31") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "true_left" (formula "31"))
                                                (rule "ifthenelse_split" (formula "1") (term "0"))
                                                (branch " ¬self.encrypted[iv_40] = null ∧ ¬self.encrypted[iv_40].<created> = TRUE TRUE"
                                                   (rule "andLeft" (formula "1"))
                                                   (rule "notLeft" (formula "1"))
                                                   (rule "notLeft" (formula "1"))
                                                   (rule "referencedObjectIsCreatedRight" (formula "42") (ifseqformula "43"))
                                                   (rule "close" (formula "42") (ifseqformula "13"))
                                                )
                                                (branch " ¬self.encrypted[iv_40] = null ∧ ¬self.encrypted[iv_40].<created> = TRUE FALSE"
                                                   (rule "close" (formula "52") (ifseqformula "1"))
                                                )
                                             )
                                             (branch "self.encrypted[iv_40].length ≥ 1 FALSE"
                                                (rule "inEqSimp_geqRight" (formula "39"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "inEqSimp_homoInEq1" (formula "4"))
                                                (rule "times_zero_2" (formula "4") (term "1,0"))
                                                (rule "add_zero_right" (formula "4") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                                (rule "mul_literals" (formula "4") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "3"))
                                                (rule "qeq_literals" (formula "4") (term "0"))
                                                (builtin "One Step Simplification" (formula "4"))
                                                (rule "closeFalse" (formula "4"))
                                             )
                                          )
                                          (branch "self.encrypted.<created> = TRUE FALSE"
                                             (rule "referencedObjectIsCreatedRight" (formula "34") (ifseqformula "39"))
                                             (rule "close" (formula "34") (ifseqformula "8"))
                                          )
                                       )
                                    )
                                 )
                                 (branch "self.chosen.length ≥ 1 FALSE"
                                    (rule "inEqSimp_geqRight" (formula "32"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_homoInEq1" (formula "5"))
                                    (rule "times_zero_2" (formula "5") (term "1,0"))
                                    (rule "add_zero_right" (formula "5") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                    (rule "mul_literals" (formula "5") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "4"))
                                    (rule "qeq_literals" (formula "5") (term "0"))
                                    (builtin "One Step Simplification" (formula "5"))
                                    (rule "closeFalse" (formula "5"))
                                 )
                              )
                              (branch "self.chosen.length ≥ 1 + iv_40 FALSE"
                                 (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "40")))
                                 (rule "closeTrue" (formula "41"))
                              )
                           )
                        )
                        (branch "CUT: array2seq2d(heapAfter_splidAndCheck, self.sorted@heapAfter_splidAndCheck) = array2seq2d(heap, self.sorted) FALSE"
                           (rule "array2seq2dDef" (formula "22") (term "0") (inst "u=u") (userinteraction))
                           (rule "array2seq2dDef" (formula "22") (term "1") (inst "u=u") (userinteraction))
                           (rule "equalityToSeqGetAndSeqLenRight" (formula "22") (inst "iv=iv") (userinteraction))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "1") (ifseqformula "16"))
                           (rule "eqSymm" (formula "13"))
                           (rule "eqSymm" (formula "19"))
                           (rule "eqSymm" (formula "7") (term "1,0"))
                           (rule "eqSymm" (formula "9"))
                           (rule "eqSymm" (formula "10"))
                           (rule "eqSymm" (formula "11"))
                           (rule "eqSymm" (formula "12"))
                           (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "26"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "24"))
                           (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "23")))
                           (rule "getOfSeqDef" (formula "22") (term "1,1,0,1"))
                           (rule "castDel" (formula "22") (term "1,1,1,0,1"))
                           (rule "castDel" (formula "22") (term "2,1,1,0,1"))
                           (rule "add_zero_right" (formula "22") (term "0,2,1,1,1,1,0,1"))
                           (rule "polySimp_elimSub" (formula "22") (term "1,1,0,1,1,0,1"))
                           (rule "mul_literals" (formula "22") (term "1,1,1,0,1,1,0,1"))
                           (rule "add_zero_right" (formula "22") (term "1,1,0,1,1,0,1"))
                           (rule "lenOfSeqDef" (formula "22") (term "0,0"))
                           (rule "eqSymm" (formula "22") (term "0"))
                           (rule "polySimp_elimSub" (formula "22") (term "1,1,0"))
                           (rule "times_zero_2" (formula "22") (term "1,1,1,0"))
                           (rule "add_zero_right" (formula "22") (term "1,1,0"))
                           (rule "lenOfSeqDef" (formula "22") (term "1,1,0,0,1"))
                           (rule "polySimp_elimSub" (formula "22") (term "1,1,1,0,0,1"))
                           (rule "mul_literals" (formula "22") (term "1,1,1,1,0,0,1"))
                           (rule "add_zero_right" (formula "22") (term "1,1,1,0,0,1"))
                           (rule "getOfSeqDef" (formula "22") (term "0,1,0,1"))
                           (rule "castDel" (formula "22") (term "1,0,1,0,1"))
                           (rule "castDel" (formula "22") (term "2,0,1,0,1"))
                           (rule "add_zero_right" (formula "22") (term "0,2,1,1,0,1,0,1"))
                           (rule "polySimp_elimSub" (formula "22") (term "1,1,0,0,1,0,1"))
                           (rule "times_zero_2" (formula "22") (term "1,1,1,0,0,1,0,1"))
                           (rule "add_zero_right" (formula "22") (term "1,1,0,0,1,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                           (rule "lenOfSeqDef" (formula "22") (term "0,0"))
                           (rule "eqSymm" (formula "22") (term "0"))
                           (rule "polySimp_elimSub" (formula "22") (term "1,1,0"))
                           (rule "times_zero_2" (formula "22") (term "1,1,1,0"))
                           (rule "add_zero_right" (formula "22") (term "1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,1,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,1,1,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "22") (term "0,1,1,0,0,1"))
                           (rule "add_zero_right" (formula "22") (term "0,0,1,1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,1,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,0"))
                           (rule "add_zero_right" (formula "22") (term "0,0,0,0"))
                           (rule "eqSymm" (formula "22") (term "0"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,0"))
                           (rule "add_zero_right" (formula "22") (term "0,0,0,0"))
                           (rule "eqSymm" (formula "22") (term "0"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,1,1,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1,0,1"))
                           (rule "applyEq" (formula "10") (term "1,1,0") (ifseqformula "13"))
                           (rule "applyEq" (formula "9") (term "1") (ifseqformula "13"))
                           (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "12"))
                           (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "11"))
                           (rule "applyEq" (formula "7") (term "0,1,0,0,1,0,0") (ifseqformula "11"))
                           (rule "applyEq" (formula "12") (term "1") (ifseqformula "11"))
                           (rule "applyEq" (formula "22") (term "0,1,0,0,1,0") (ifseqformula "12"))
                           (rule "applyEq" (formula "22") (term "1,1,0") (ifseqformula "12"))
                           (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,1,1,0,1") (ifseqformula "12"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,1,0,1"))
                           (rule "eqSymm" (formula "22") (term "1,0,1"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,1,1,0,1"))
                           (rule "polySimp_rightDist" (formula "22") (term "1,1,0,1,1,0,1"))
                           (rule "mul_literals" (formula "22") (term "0,1,1,0,1,1,0,1"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,1,1,0,1"))
                           (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,1,1,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,1"))
                           (rule "mul_literals" (formula "22") (term "0,1,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0,0"))
                           (rule "eqSymm" (formula "22") (term "0"))
                           (rule "polySimp_elimOne" (formula "22") (term "0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,1,0,1"))
                           (rule "eqSymm" (formula "22") (term "1,0,1"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,1,1,0,1"))
                           (rule "polySimp_rightDist" (formula "22") (term "1,1,0,1,1,0,1"))
                           (rule "mul_literals" (formula "22") (term "0,1,1,0,1,1,0,1"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,1,1,0,1"))
                           (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,1,1,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,1,1,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "0,0,1,1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "22") (term "0,0,1,1,1,0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0,0"))
                           (rule "eqSymm" (formula "22") (term "0"))
                           (rule "polySimp_elimOne" (formula "22") (term "0,0,1,0"))
                           (rule "nonNull" (formula "21") (inst "i=i"))
                           (rule "greater_literals" (formula "21") (term "0,1"))
                           (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "24")))
                           (rule "sub_literals" (formula "21") (term "2,1,0"))
                           (builtin "One Step Simplification" (formula "21"))
                           (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                           (rule "array2seqDef" (formula "13") (term "0") (inst "u=u"))
                           (rule "array2seqDef" (formula "13") (term "1") (inst "u=u"))
                           (rule "narrowSelectArrayType" (formula "13") (term "2,1") (ifseqformula "1") (ifseqformula "26"))
                           (rule "array2seqDef" (formula "7") (term "1,1,0") (inst "u=u"))
                           (rule "eqSymm" (formula "7") (term "1,0"))
                           (rule "array2seqDef" (formula "10") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "10"))
                           (rule "array2seqDef" (formula "9") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "9"))
                           (rule "narrowSelectArrayType" (formula "9") (term "2,0") (ifseqformula "1") (ifseqformula "26"))
                           (rule "applyEq" (formula "13") (term "1") (ifseqformula "9"))
                           (rule "array2seqDef" (formula "22") (term "1,0,1,0,1") (inst "u=u"))
                           (rule "array2seqDef" (formula "22") (term "1,1,1,0,1") (inst "u=u"))
                           (rule "pullOutSelect" (formula "27") (term "1,1") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_21"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")) (ifInst ""  (formula "3")))
                           (rule "applyEqReverse" (formula "28") (term "1,1") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "27") (term "1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_24"))
                           (rule "applyEq" (formula "23") (term "0,0,0,0,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "23") (term "1,0,1,1,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "23") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "23") (term "0,0,0,1,1,1,0,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "23") (term "1,1,2,1,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "23") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "20") (term "1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "23") (term "0,1,1,1,1,0,0,1") (ifseqformula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")) (ifInst ""  (formula "3")))
                           (rule "applyEqReverse" (formula "28") (term "1,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "23") (term "0,0,0,0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "23") (term "1,0,1,1,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "23") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "23") (term "0,0,0,1,1,1,0,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "23") (term "1,1,2,1,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "23") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "20") (term "1,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "23") (term "0,1,1,1,1,0,0,1") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "applyEq" (formula "22") (term "1,1,1,1,0,0,1") (ifseqformula "12"))
                           (rule "applyEq" (formula "22") (term "0,0,1,1,1,0,0,1") (ifseqformula "12"))
                           (rule "applyEq" (formula "22") (term "1,0,0") (ifseqformula "12"))
                           (rule "applyEq" (formula "22") (term "0,0,0,0") (ifseqformula "12"))
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "allRight" (formula "22") (inst "sk=iv_35"))
                           (rule "impRight" (formula "22"))
                           (rule "andLeft" (formula "1"))
                           (rule "replace_known_left" (formula "24") (term "0,0,1") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "1")))
                           (rule "inEqSimp_homoInEq0" (formula "2"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "inEqSimp_homoInEq0" (formula "24") (term "0,0"))
                           (rule "eqSymm" (formula "24"))
                           (rule "polySimp_addComm1" (formula "24") (term "0,0,1"))
                           (rule "inEqSimp_homoInEq0" (formula "24") (term "0,0"))
                           (rule "eqSymm" (formula "24"))
                           (rule "polySimp_addComm1" (formula "24") (term "0,0,1"))
                           (rule "applyEq" (formula "29") (term "0") (ifseqformula "21"))
                           (rule "applyEq" (formula "24") (term "1,0,0,0") (ifseqformula "14"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1"))
                           (rule "polySimp_rightDist" (formula "2") (term "1"))
                           (rule "mul_literals" (formula "2") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0,1"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,0,1"))
                           (rule "mul_literals" (formula "24") (term "0,1,0,1"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,1"))
                           (rule "polySimp_elimOne" (formula "24") (term "1,1,0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "0,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,0,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                           (rule "array2seqDef" (formula "9") (term "0,0,1,1,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "9") (term "1,0,1,1,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "12") (term "0,1") (inst "u=u"))
                           (rule "eqSymm" (formula "12"))
                           (rule "array2seqDef" (formula "12") (term "0,1,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "12") (term "1,1,0") (inst "u=u"))
                           (rule "narrowSelectArrayType" (formula "12") (term "2,1,1,0") (ifseqformula "3") (ifseqformula "28"))
                           (rule "applyEq" (formula "12") (term "1,1,0") (ifseqformula "11"))
                           (rule "eqSeqDef2" (formula "11") (inst "iv=iv") (ifseqformula "15"))
                           (rule "andLeft" (formula "11"))
                           (rule "eqSymm" (formula "11"))
                           (rule "eqSymm" (formula "12") (term "1,0"))
                           (rule "lenOfSeqDef" (formula "12") (term "1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "12") (term "1,1,1,0,0"))
                           (rule "times_zero_2" (formula "12") (term "1,1,1,1,0,0"))
                           (rule "add_zero_right" (formula "12") (term "1,1,1,0,0"))
                           (rule "lenOfSeqDef" (formula "11") (term "0"))
                           (rule "eqSymm" (formula "11"))
                           (rule "polySimp_elimSub" (formula "11") (term "1,1"))
                           (rule "times_zero_2" (formula "11") (term "1,1,1"))
                           (rule "add_zero_right" (formula "11") (term "1,1"))
                           (rule "getOfSeqDef" (formula "12") (term "0,1,0"))
                           (rule "castDel" (formula "12") (term "2,0,1,0"))
                           (rule "castDel" (formula "12") (term "1,0,1,0"))
                           (rule "add_zero_right" (formula "12") (term "0,2,1,0,1,0"))
                           (rule "eqSymm" (formula "12") (term "1,0"))
                           (rule "polySimp_elimSub" (formula "12") (term "1,1,0,1,1,0"))
                           (rule "times_zero_2" (formula "12") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "12") (term "1,1,0,1,1,0"))
                           (rule "lenOfSeqDef" (formula "11") (term "0"))
                           (rule "eqSymm" (formula "11"))
                           (rule "polySimp_elimSub" (formula "11") (term "1,1"))
                           (rule "times_zero_2" (formula "11") (term "1,1,1"))
                           (rule "add_zero_right" (formula "11") (term "1,1"))
                           (rule "getOfSeqDef" (formula "12") (term "0,1,0"))
                           (rule "castDel" (formula "12") (term "2,0,1,0"))
                           (rule "castDel" (formula "12") (term "1,0,1,0"))
                           (rule "add_zero_right" (formula "12") (term "0,2,1,0,1,0"))
                           (rule "eqSymm" (formula "12") (term "1,0"))
                           (rule "polySimp_elimSub" (formula "12") (term "1,1,0,1,1,0"))
                           (rule "times_zero_2" (formula "12") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "12") (term "1,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "12") (term "0,1,1,0,0"))
                           (rule "add_zero_right" (formula "12") (term "0,0,1,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0"))
                           (rule "add_zero_right" (formula "11") (term "0,0,0"))
                           (rule "eqSymm" (formula "11"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "12") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0"))
                           (rule "add_zero_right" (formula "11") (term "0,0,0"))
                           (rule "eqSymm" (formula "11"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "12") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0"))
                           (rule "eqSymm" (formula "11"))
                           (rule "polySimp_elimOne" (formula "11") (term "0,0,1"))
                           (rule "applyEq" (formula "12") (term "1,1,1,0,0") (ifseqformula "11"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "12") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0"))
                           (rule "eqSymm" (formula "11"))
                           (rule "polySimp_elimOne" (formula "11") (term "0,0,1"))
                           (rule "applyEq" (formula "12") (term "1,1,1,0,0") (ifseqformula "11"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "12") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,1,1,0"))
                           (rule "eqSeqDef2" (formula "16") (inst "iv=iv") (ifseqformula "16"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "true_left" (formula "16"))
                           (rule "eqSeqDef" (formula "13") (inst "iv=iv"))
                           (rule "andLeft" (formula "13"))
                           (rule "getOfSeqDef" (formula "14") (term "1,1,0"))
                           (rule "castDel" (formula "14") (term "1,1,1,0"))
                           (rule "castDel" (formula "14") (term "2,1,1,0"))
                           (rule "add_zero_right" (formula "14") (term "0,2,1,1,1,0"))
                           (rule "polySimp_elimSub" (formula "14") (term "1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "14") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "14") (term "1,1,0,1,1,0"))
                           (rule "lenOfSeqDef" (formula "13") (term "1"))
                           (rule "polySimp_elimSub" (formula "13") (term "1,1"))
                           (rule "mul_literals" (formula "13") (term "1,1,1"))
                           (rule "add_zero_right" (formula "13") (term "1,1"))
                           (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "14") (term "0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1"))
                           (rule "add_zero_right" (formula "13") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,1,1,0"))
                           (rule "applyEq" (formula "14") (term "0,1,0,1,0,0") (ifseqformula "13"))
                           (rule "polySimp_addComm1" (formula "14") (term "0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "14") (term "1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "14") (term "0,1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "0,0,1"))
                           (rule "polySimp_elimOne" (formula "13") (term "0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0,1,0,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,1,0,0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "14") (term "0,0,0,1,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                           (rule "pullOutSelect" (formula "25") (term "0,1,1,0") (inst "selectSK=arr_377"))
                           (rule "applyEq" (formula "26") (term "1,2,1,0") (ifseqformula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "nnf_imp2or" (formula "25") (term "0"))
                           (rule "nnf_imp2or" (formula "10") (term "0"))
                           (rule "Contract_axiom_for_ghostFieldsNonNull_in_MixServer" (formula "9") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
                           (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "30")) (ifInst ""  (formula "4")))
                           (rule "eqSymm" (formula "9"))
                           (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1,0,0,0,0"))
                           (rule "applyEq" (formula "9") (term "1") (ifseqformula "10"))
                           (builtin "One Step Simplification" (formula "9"))
                           (rule "andLeft" (formula "9"))
                           (rule "andLeft" (formula "9"))
                           (rule "andLeft" (formula "9"))
                           (rule "andLeft" (formula "9"))
                           (rule "notLeft" (formula "10"))
                           (rule "andLeft" (formula "9"))
                           (rule "andLeft" (formula "9"))
                           (rule "notLeft" (formula "11"))
                           (rule "andLeft" (formula "9"))
                           (rule "notLeft" (formula "11"))
                           (rule "notLeft" (formula "9"))
                           (rule "notLeft" (formula "9"))
                           (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "31"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "ifthenelse_negated" (formula "1") (term "0"))
                           (rule "narrowSelectArrayType" (formula "18") (term "1,1,1,0") (ifseqformula "4") (ifseqformula "33"))
                           (rule "narrowSelectArrayType" (formula "16") (term "1,0,1,0") (ifseqformula "4") (ifseqformula "32"))
                           (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "20"))
                           (rule "applyEq" (formula "10") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                           (rule "Definition_axiom_for_ghostFieldsNonNull_in_verif_selectvoting_system_core_MixServer" (formula "12") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
                           (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "30")) (ifInst ""  (formula "29")) (ifInst ""  (formula "31")) (ifInst ""  (formula "32")) (ifInst ""  (formula "33")))
                           (rule "andLeft" (formula "12"))
                           (rule "andLeft" (formula "12"))
                           (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                           (rule "applyEq" (formula "14") (term "0,1,0,0,1,0,0") (ifseqformula "22"))
                           (rule "applyEq" (formula "13") (term "0,1,0,0,1,0,0") (ifseqformula "21"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                           (rule "nnf_notAnd" (formula "27") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                           (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "27") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                           (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "12") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                           (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                           (rule "nnf_imp2or" (formula "17") (term "0"))
                           (rule "nnf_imp2or" (formula "15") (term "0"))
                           (rule "nnf_imp2or" (formula "9") (term "0"))
                           (rule "nnf_imp2or" (formula "11") (term "0"))
                           (rule "nnf_imp2or" (formula "10") (term "0"))
                           (rule "nnf_notAnd" (formula "17") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
                           (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                           (rule "mul_literals" (formula "17") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "15") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                           (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                           (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "9") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
                           (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                           (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "11") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                           (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                           (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "10") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
                           (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                           (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                           (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "26") (ifseqformula "6"))
                           (rule "replaceKnownSelect_taclet110000020_0" (formula "26") (term "1,1,0,0,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet110000020_1" (formula "26") (term "1,1,0,0,0,0,0"))
                           (rule "replaceKnownSelect_taclet110000020_2" (formula "26") (term "1,1,0,0,0,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet110000020_3" (formula "26") (term "1,1,0,0,0,0,0,0"))
                           (rule "andLeft" (formula "26"))
                           (rule "andLeft" (formula "26"))
                           (rule "notLeft" (formula "28"))
                           (rule "notLeft" (formula "27"))
                           (rule "andLeft" (formula "26"))
                           (rule "notLeft" (formula "27"))
                           (rule "andLeft" (formula "26"))
                           (rule "andLeft" (formula "26"))
                           (rule "notLeft" (formula "28"))
                           (rule "andLeft" (formula "26"))
                           (rule "andLeft" (formula "26"))
                           (rule "andLeft" (formula "26"))
                           (rule "notLeft" (formula "27"))
                           (rule "notLeft" (formula "26"))
                           (rule "nonNull" (formula "28") (inst "i=i"))
                           (rule "sub_literals" (formula "28") (term "2,1,0,1,1"))
                           (builtin "One Step Simplification" (formula "28"))
                           (rule "greater_literals" (formula "28") (term "0,1"))
                           (builtin "One Step Simplification" (formula "28"))
                           (rule "andLeft" (formula "28"))
                           (rule "notLeft" (formula "28"))
                           (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "28") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "27") (inst "i=i"))
                           (rule "sub_literals" (formula "27") (term "2,1,0,1,1"))
                           (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "37")))
                           (rule "greater_literals" (formula "27") (term "0"))
                           (builtin "One Step Simplification" (formula "27"))
                           (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                           (rule "applyEq" (formula "27") (term "0,1,0,0,1,0,0") (ifseqformula "18"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "26") (inst "i=i"))
                           (rule "greater_literals" (formula "26") (term "0,1"))
                           (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "39")))
                           (rule "sub_literals" (formula "26") (term "2,1,0"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                           (rule "applyEq" (formula "26") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
                           (rule "pullOutSelect" (formula "36") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_19"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")) (ifInst ""  (formula "6")))
                           (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "narrowSelectArrayType" (formula "16") (term "2,0,1,0,0") (ifseqformula "4") (ifseqformula "36"))
                           (rule "narrowSelectArrayType" (formula "12") (term "2,0,0,1,1,0") (ifseqformula "4") (ifseqformula "36"))
                           (rule "narrowSelectArrayType" (formula "17") (term "2,0,1,0,0,1,0") (ifseqformula "4") (ifseqformula "36"))
                           (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_19"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")) (ifInst ""  (formula "6")))
                           (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_19"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")) (ifInst ""  (formula "6")))
                           (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "33") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_19"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")) (ifInst ""  (formula "6")))
                           (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_20"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")) (ifInst ""  (formula "6")))
                           (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "31") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_19"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")) (ifInst ""  (formula "6")))
                           (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "28") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_20"))
                           (rule "applyEq" (formula "29") (term "0,1,1,1,0,0") (ifseqformula "28"))
                           (rule "applyEq" (formula "31") (term "0") (ifseqformula "28"))
                           (rule "simplifySelectOfAnonEQ" (formula "28") (ifseqformula "22"))
                           (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "44")) (ifInst ""  (formula "5")))
                           (rule "applyEqReverse" (formula "29") (term "0,1,1,1,0,0") (ifseqformula "28"))
                           (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "28"))
                           (rule "applyEqReverse" (formula "29") (term "1,0,0,1,0") (ifseqformula "28"))
                           (rule "hideAuxiliaryEq" (formula "28"))
                           (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "20") (ifseqformula "6"))
                           (rule "andLeft" (formula "20"))
                           (rule "notLeft" (formula "21"))
                           (rule "andLeft" (formula "20"))
                           (rule "andLeft" (formula "20"))
                           (rule "notLeft" (formula "22"))
                           (rule "andLeft" (formula "20"))
                           (rule "notLeft" (formula "22"))
                           (rule "notLeft" (formula "21"))
                           (rule "andLeft" (formula "20"))
                           (rule "andLeft" (formula "20"))
                           (rule "andLeft" (formula "20"))
                           (rule "andLeft" (formula "20"))
                           (rule "notLeft" (formula "21"))
                           (rule "notLeft" (formula "20"))
                           (rule "nonNull" (formula "22") (inst "i=i"))
                           (rule "sub_literals" (formula "22") (term "2,1,0,1,1"))
                           (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "37")))
                           (rule "greater_literals" (formula "22") (term "0"))
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "narrowSelectArrayType" (formula "22") (term "0,0,1,0") (ifseqformula "4") (ifseqformula "37"))
                           (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "21") (inst "i=i"))
                           (rule "sub_literals" (formula "21") (term "2,1,0,1,1"))
                           (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "36")))
                           (rule "greater_literals" (formula "21") (term "0"))
                           (builtin "One Step Simplification" (formula "21"))
                           (rule "narrowSelectArrayType" (formula "21") (term "0,0,1,0") (ifseqformula "4") (ifseqformula "36"))
                           (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                           (rule "applyEq" (formula "21") (term "0,1,0,0,1,0,0") (ifseqformula "18"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "20") (inst "i=i"))
                           (rule "greater_literals" (formula "20") (term "0,1"))
                           (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "38")))
                           (rule "sub_literals" (formula "20") (term "2,1,0"))
                           (builtin "One Step Simplification" (formula "20"))
                           (rule "narrowSelectArrayType" (formula "20") (term "0,0,1,0") (ifseqformula "4") (ifseqformula "38"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                           (rule "applyEq" (formula "20") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                           (rule "nnf_imp2or" (formula "29") (term "0"))
                           (rule "arrayLengthNotNegative" (formula "18") (term "1"))
                           (rule "arrayLengthIsAShort" (formula "19") (term "0"))
                           (builtin "One Step Simplification" (formula "19"))
                           (rule "true_left" (formula "19"))
                           (rule "arrayLengthNotNegative" (formula "19") (term "0"))
                           (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                           (rule "arrayLengthIsAShort" (formula "19") (term "1"))
                           (builtin "One Step Simplification" (formula "19"))
                           (rule "true_left" (formula "19"))
                           (rule "arrayLengthNotNegative" (formula "20") (term "0"))
                           (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                           (rule "arrayLengthIsAShort" (formula "20") (term "0"))
                           (builtin "One Step Simplification" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "nnf_imp2or" (formula "29") (term "0"))
                           (rule "nnf_imp2or" (formula "31") (term "0"))
                           (rule "nnf_imp2or" (formula "23") (term "0"))
                           (rule "nnf_imp2or" (formula "22") (term "0"))
                           (rule "ifthenelse_split" (formula "3") (term "0"))
                           (branch "self.chosen.length ≥ 1 TRUE"
                              (rule "replace_known_left" (formula "43") (term "0,1") (ifseqformula "4"))
                              (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "4")))
                              (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "3"))
                              (rule "leq_literals" (formula "19") (term "0"))
                              (builtin "One Step Simplification" (formula "19"))
                              (rule "true_left" (formula "19"))
                              (rule "equalityToSeqGetAndSeqLenRight" (formula "42") (inst "iv=iv"))
                              (rule "lenOfSeqDef" (formula "42") (term "0,0"))
                              (rule "eqSymm" (formula "42") (term "0"))
                              (rule "polySimp_elimSub" (formula "42") (term "1,1,0"))
                              (rule "times_zero_2" (formula "42") (term "1,1,1,0"))
                              (rule "add_zero_right" (formula "42") (term "1,1,0"))
                              (rule "getOfSeqDef" (formula "42") (term "0,1,0,1"))
                              (rule "castDel" (formula "42") (term "2,0,1,0,1"))
                              (rule "castDel" (formula "42") (term "1,0,1,0,1"))
                              (rule "add_zero_right" (formula "42") (term "0,2,1,0,1,0,1"))
                              (rule "eqSymm" (formula "42") (term "1,0,1"))
                              (rule "polySimp_elimSub" (formula "42") (term "1,1,0,1,1,0,1"))
                              (rule "times_zero_2" (formula "42") (term "1,1,1,0,1,1,0,1"))
                              (rule "add_zero_right" (formula "42") (term "1,1,0,1,1,0,1"))
                              (rule "lenOfSeqDef" (formula "42") (term "1,1,0,0,1"))
                              (rule "polySimp_elimSub" (formula "42") (term "1,1,1,0,0,1"))
                              (rule "times_zero_2" (formula "42") (term "1,1,1,1,0,0,1"))
                              (rule "add_zero_right" (formula "42") (term "1,1,1,0,0,1"))
                              (rule "lenOfSeqDef" (formula "42") (term "0,0"))
                              (rule "polySimp_elimSub" (formula "42") (term "1,0,0"))
                              (rule "times_zero_2" (formula "42") (term "1,1,0,0"))
                              (rule "add_zero_right" (formula "42") (term "1,0,0"))
                              (rule "getOfSeqDef" (formula "42") (term "0,1,0,1"))
                              (rule "castDel" (formula "42") (term "1,0,1,0,1"))
                              (rule "castDel" (formula "42") (term "2,0,1,0,1"))
                              (rule "add_zero_right" (formula "42") (term "0,2,1,0,1,0,1"))
                              (rule "polySimp_elimSub" (formula "42") (term "1,1,0,0,1,0,1"))
                              (rule "times_zero_2" (formula "42") (term "1,1,1,0,0,1,0,1"))
                              (rule "add_zero_right" (formula "42") (term "1,1,0,0,1,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "42") (term "0,1,0"))
                              (rule "add_zero_right" (formula "42") (term "0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "42") (term "1,0,1,1,0,1"))
                              (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,1,0,1,1,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "42") (term "0,1,1,0,0,1"))
                              (rule "add_zero_right" (formula "42") (term "0,0,1,1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,1,1,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "42") (term "0,0,0"))
                              (rule "add_zero_right" (formula "42") (term "0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "42") (term "1,0,0,1,0,1"))
                              (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,1,0,0,1,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "42") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,1,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "42") (term "0,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "42") (term "0,0,1,1,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "42") (term "0,0,0,1,0,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "42") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "42") (term "0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "42") (term "0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "1,0,1,1,0,1"))
                              (rule "polySimp_mulComm0" (formula "42") (term "1,1,0,1,1,0,1"))
                              (rule "polySimp_rightDist" (formula "42") (term "1,1,0,1,1,0,1"))
                              (rule "mul_literals" (formula "42") (term "0,1,1,0,1,1,0,1"))
                              (rule "polySimp_mulLiterals" (formula "42") (term "1,1,1,0,1,1,0,1"))
                              (rule "polySimp_elimOne" (formula "42") (term "1,1,1,0,1,1,0,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "42") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "42") (term "0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "42") (term "0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "1,0,0,1,0,1"))
                              (rule "polySimp_mulComm0" (formula "42") (term "1,1,0,0,1,0,1"))
                              (rule "polySimp_rightDist" (formula "42") (term "1,1,0,0,1,0,1"))
                              (rule "mul_literals" (formula "42") (term "0,1,1,0,0,1,0,1"))
                              (rule "polySimp_mulLiterals" (formula "42") (term "1,1,1,0,0,1,0,1"))
                              (rule "polySimp_elimOne" (formula "42") (term "1,1,1,0,0,1,0,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "42") (term "0,0,1,0,0,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "42") (term "0,0,0,1,0,0,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "42") (term "0,0,0,1,0,0,1,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "42") (term "1,1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "42") (term "1,1,0,0,1"))
                              (rule "mul_literals" (formula "42") (term "0,1,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "42") (term "1,1,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "42") (term "1,1,1,0,0,1"))
                              (rule "commute_or_2" (formula "32") (term "0"))
                              (rule "nnf_imp2or" (formula "21") (term "0"))
                              (rule "nnf_notAnd" (formula "30") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0"))
                              (rule "mul_literals" (formula "30") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "30") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
                              (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "30") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "29") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0"))
                              (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "29") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0"))
                              (rule "mul_literals" (formula "29") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "29") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "31") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "31") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0"))
                              (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "31") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0"))
                              (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "23") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                              (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                              (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "22") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
                              (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "22") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                              (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
                              (rule "equalityToSeqGetAndSeqLenLeft" (formula "26") (inst "iv=iv"))
                              (rule "andLeft" (formula "26"))
                              (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                              (rule "applyEq" (formula "27") (term "0,0,1,0") (ifseqformula "28"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "27"))
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "true_left" (formula "26"))
                              (rule "commute_or_2" (formula "16") (term "0"))
                              (rule "commute_or_2" (formula "10") (term "0"))
                              (rule "commute_or_2" (formula "12") (term "0"))
                              (rule "ifthenelse_split" (formula "15") (term "0"))
                              (branch "self.concatenated.length ≥ 1 TRUE"
                                 (rule "eqSymm" (formula "16"))
                                 (rule "applyEq" (formula "17") (term "1,1,0") (ifseqformula "16"))
                                 (rule "commute_or_2" (formula "11") (term "0"))
                                 (rule "nnf_imp2or" (formula "41") (term "0,1"))
                                 (rule "nnf_notAnd" (formula "22") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "22") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                                 (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                                 (rule "ifthenelse_split" (formula "18") (term "1"))
                                 (branch "self.unsigned.length ≥ 1 TRUE"
                                    (rule "replace_known_left" (formula "20") (term "0,1,1,0,0") (ifseqformula "18"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "commute_or_2" (formula "13") (term "0"))
                                    (rule "arrayLengthNotNegative" (formula "19") (term "1,0,1,0,0"))
                                    (rule "arrayLengthNotNegative" (formula "20") (term "1,0,0,0"))
                                    (rule "arrayLengthIsAShort" (formula "21") (term "1,0,0,0"))
                                    (builtin "One Step Simplification" (formula "21"))
                                    (rule "true_left" (formula "21"))
                                    (rule "arrayLengthIsAShort" (formula "21") (term "1,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "21"))
                                    (rule "true_left" (formula "21"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch "self.sorted.<created> = TRUE TRUE"
                                       (rule "applyEqReverse" (formula "45") (term "0,1,1,1,1,0,0,0,1") (ifseqformula "2"))
                                       (rule "applyEqReverse" (formula "45") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "2"))
                                       (rule "applyEqReverse" (formula "45") (term "0,0,0,1,1,1,0,0,0,1") (ifseqformula "2"))
                                       (rule "applyEqReverse" (formula "45") (term "0,0,0,1,0") (ifseqformula "2"))
                                       (rule "applyEqReverse" (formula "45") (term "1,1,1,1,0,1") (ifseqformula "2"))
                                       (rule "applyEqReverse" (formula "45") (term "0,1,1,0") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "45"))
                                       (rule "allRight" (formula "45") (inst "sk=iv_39"))
                                       (rule "orRight" (formula "45"))
                                       (rule "notRight" (formula "45"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "hideAuxiliaryEq" (formula "4"))
                                       (rule "eqSymm" (formula "46"))
                                       (rule "replace_known_left" (formula "46") (term "0,0,1") (ifseqformula "1"))
                                       (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "1")))
                                       (rule "inEqSimp_homoInEq0" (formula "2"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0"))
                                       (rule "inEqSimp_homoInEq0" (formula "46") (term "0,1"))
                                       (rule "polySimp_addComm1" (formula "46") (term "0,0,1"))
                                       (rule "inEqSimp_homoInEq0" (formula "46") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "46") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                       (rule "polySimp_rightDist" (formula "2") (term "1"))
                                       (rule "mul_literals" (formula "2") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "46") (term "0,1"))
                                       (rule "polySimp_mulComm0" (formula "46") (term "1,0,1"))
                                       (rule "polySimp_rightDist" (formula "46") (term "1,0,1"))
                                       (rule "mul_literals" (formula "46") (term "0,1,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "46") (term "1,1,0,1"))
                                       (rule "polySimp_elimOne" (formula "46") (term "1,1,0,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "46") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "46") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "46") (term "1,0,0"))
                                       (rule "mul_literals" (formula "46") (term "0,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "46") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "46") (term "1,1,0,0"))
                                       (rule "pullOutSelect" (formula "46") (term "1,0") (inst "selectSK=arr_381"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "eqSymm" (formula "47"))
                                       (rule "commute_or_2" (formula "35") (term "0"))
                                       (rule "commute_or" (formula "37") (term "0,0"))
                                       (rule "commute_or_2" (formula "34") (term "0"))
                                       (rule "commute_or_2" (formula "36") (term "0"))
                                       (rule "commute_or" (formula "20") (term "0,0"))
                                       (rule "commute_or" (formula "13") (term "0,0"))
                                       (rule "commute_or_2" (formula "28") (term "0"))
                                       (rule "commute_or" (formula "15") (term "0,0"))
                                       (rule "commute_or_2" (formula "25") (term "0"))
                                       (rule "commute_or" (formula "14") (term "0,0"))
                                       (rule "lenNonNegative" (formula "24") (term "0"))
                                       (rule "inEqSimp_commuteLeq" (formula "24"))
                                       (rule "applyEq" (formula "24") (term "0") (ifseqformula "25"))
                                       (rule "inEqSimp_subsumption1" (formula "24") (ifseqformula "21"))
                                       (rule "leq_literals" (formula "24") (term "0"))
                                       (builtin "One Step Simplification" (formula "24"))
                                       (rule "true_left" (formula "24"))
                                       (rule "commute_or" (formula "16") (term "0,0"))
                                       (rule "commute_or" (formula "34") (term "0,0"))
                                       (rule "commute_or" (formula "33") (term "0,0"))
                                       (rule "commute_or" (formula "35") (term "0,0"))
                                       (rule "commute_or" (formula "25") (term "0,0"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "17") (term "1,0") (ifseqformula "8"))
                                       (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "44"))
                                       (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "4")))
                                       (rule "true_left" (formula "17"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "17") (term "1,1") (ifseqformula "8"))
                                       (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "42"))
                                       (builtin "One Step Simplification" (formula "17"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "27") (term "0,1") (ifseqformula "8"))
                                       (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "44"))
                                       (builtin "One Step Simplification" (formula "27"))
                                       (rule "ifthenelse_to_or_left" (formula "21") (term "0,0,0"))
                                       (rule "eqSymm" (formula "21") (term "1,0,0,0,0"))
                                       (rule "eqSymm" (formula "21") (term "1,1,0,0,0"))
                                       (builtin "One Step Simplification" (formula "21"))
                                       (rule "nnf_notAnd" (formula "21") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,0,0,0"))
                                       (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "21") (term "0,0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0,0"))
                                       (rule "nnf_notAnd" (formula "21") (term "0,1,1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "21") (term "1,0,1,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,1,1,0,0,0"))
                                       (rule "add_literals" (formula "21") (term "0,0,0,1,0,1,1,0,0,0"))
                                       (rule "add_zero_left" (formula "21") (term "0,0,1,0,1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "21") (term "1,1,0,1,1,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "21") (term "0,0,1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,1,1,0,0,0"))
                                       (rule "add_zero_right" (formula "21") (term "0,0,0,0,1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "21") (term "1,0,0,1,1,0,0,0"))
                                       (rule "commute_or" (formula "21") (term "0,0"))
                                       (rule "commute_or_2" (formula "21") (term "0"))
                                       (rule "commute_or" (formula "21") (term "1,1,0"))
                                       (rule "commute_or_2" (formula "21") (term "0,1,0"))
                                       (rule "commute_or_2" (formula "21") (term "0,1,1,0"))
                                       (rule "commute_or" (formula "21") (term "0,0,1,0"))
                                       (rule "commute_or" (formula "21") (term "0,0,1,1,0"))
                                       (rule "ifthenelse_to_or_right" (formula "26") (term "0,0,0"))
                                       (rule "nnf_notAnd" (formula "26") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,0,0,0"))
                                       (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "26") (term "0,0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,0,0"))
                                       (rule "commute_or" (formula "26") (term "0,0"))
                                       (rule "commute_or_2" (formula "26") (term "0"))
                                       (rule "commute_or_2" (formula "26") (term "0,1,0"))
                                       (rule "commute_or" (formula "26") (term "1,1,0"))
                                       (rule "commute_or" (formula "26") (term "0,0,1,0"))
                                       (rule "cnf_rightDist" (formula "21") (term "1,1,0"))
                                       (rule "commute_or" (formula "21") (term "1,1,1,0"))
                                       (rule "cnf_rightDist" (formula "21") (term "0"))
                                       (rule "distr_forallAnd" (formula "21"))
                                       (rule "andLeft" (formula "21"))
                                       (rule "commute_or" (formula "22") (term "0"))
                                       (rule "shift_paren_or" (formula "21") (term "0"))
                                       (rule "commute_or_2" (formula "21") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "21"))
                                       (rule "commute_or_2" (formula "22") (term "0,1,0"))
                                       (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0,0,1,0"))
                                       (rule "add_literals" (formula "22") (term "1,1,0,0,1,0"))
                                       (rule "qeq_literals" (formula "22") (term "1,0,0,1,0"))
                                       (builtin "One Step Simplification" (formula "22"))
                                       (rule "commute_or_2" (formula "22") (term "0"))
                                       (rule "shift_paren_or" (formula "21") (term "0,0"))
                                       (rule "shift_paren_or" (formula "22") (term "0,0"))
                                       (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0"))
                                       (rule "inEqSimp_homoInEq1" (formula "22") (term "1,0"))
                                       (rule "polySimp_pullOutFactor1" (formula "22") (term "0,1,0"))
                                       (rule "add_literals" (formula "22") (term "1,0,1,0"))
                                       (rule "times_zero_1" (formula "22") (term "0,1,0"))
                                       (rule "leq_literals" (formula "22") (term "1,0"))
                                       (builtin "One Step Simplification" (formula "22"))
                                       (rule "true_left" (formula "22"))
                                       (rule "commute_or" (formula "21") (term "0,0,0"))
                                       (builtin "One Step Simplification" (formula "21"))
                                       (rule "arrayLengthNotNegative" (formula "38") (term "1,1,0"))
                                       (rule "arrayLengthIsAShort" (formula "39") (term "1,1,0"))
                                       (builtin "One Step Simplification" (formula "39"))
                                       (rule "true_left" (formula "39"))
                                       (rule "ifthenelse_split" (formula "20") (term "0"))
                                       (branch "msg.length ≥ 1 TRUE"
                                          (rule "eqSymm" (formula "21"))
                                          (rule "applyEq" (formula "19") (term "0") (ifseqformula "21"))
                                          (rule "applyEq" (formula "21") (term "1,1,0") (ifseqformula "20"))
                                          (rule "cnf_rightDist" (formula "26") (term "1,1,0"))
                                          (rule "cnf_rightDist" (formula "26") (term "0"))
                                          (rule "distr_forallAnd" (formula "26"))
                                          (rule "andLeft" (formula "26"))
                                          (rule "commute_or" (formula "27") (term "0"))
                                          (rule "shift_paren_or" (formula "26") (term "0"))
                                          (rule "commute_or_2" (formula "26") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "26"))
                                          (rule "commute_or" (formula "27") (term "1,1,0"))
                                          (rule "shift_paren_or" (formula "26") (term "0,0"))
                                          (rule "commute_or" (formula "26") (term "0,0,0"))
                                          (builtin "One Step Simplification" (formula "26"))
                                          (rule "cnf_rightDist" (formula "27") (term "0"))
                                          (rule "distr_forallAnd" (formula "27"))
                                          (rule "andLeft" (formula "27"))
                                          (rule "commute_or_2" (formula "27") (term "0"))
                                          (rule "shift_paren_or" (formula "28") (term "0"))
                                          (rule "commute_or_2" (formula "28") (term "0,0"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "28") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "28") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "28") (term "0,1,0"))
                                          (rule "add_literals" (formula "28") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "28") (term "0,1,0"))
                                          (rule "leq_literals" (formula "28") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "28"))
                                          (rule "true_left" (formula "28"))
                                          (rule "shift_paren_or" (formula "27") (term "0,0"))
                                          (rule "commute_or" (formula "27") (term "0,0,0"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "27") (term "0,0"))
                                          (rule "add_zero_right" (formula "27") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "27") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "27"))
                                          (rule "true_left" (formula "27"))
                                          (rule "ifthenelse_split" (formula "3") (term "0"))
                                          (branch "self.sorted[iv_35].length ≥ 1 TRUE"
                                             (rule "replace_known_left" (formula "50") (term "0,1") (ifseqformula "4"))
                                             (builtin "One Step Simplification" (formula "50") (ifInst ""  (formula "4")))
                                             (rule "ifthenelse_split" (formula "1") (term "0"))
                                             (branch " ¬self.sorted[iv_35] = null ∧ ¬self.sorted[iv_35].<created> = TRUE TRUE"
                                                (rule "andLeft" (formula "1"))
                                                (rule "notLeft" (formula "2"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "referencedObjectIsCreatedRight" (formula "42") (ifseqformula "41"))
                                                (rule "close" (formula "42") (ifseqformula "9"))
                                             )
                                             (branch " ¬self.sorted[iv_35] = null ∧ ¬self.sorted[iv_35].<created> = TRUE FALSE"
                                                (rule "close" (formula "51") (ifseqformula "1"))
                                             )
                                          )
                                          (branch "self.sorted[iv_35].length ≥ 1 FALSE"
                                             (rule "inEqSimp_geqRight" (formula "40"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_homoInEq1" (formula "4"))
                                             (rule "mul_literals" (formula "4") (term "1,0"))
                                             (rule "add_zero_right" (formula "4") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                             (rule "mul_literals" (formula "4") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "3"))
                                             (rule "qeq_literals" (formula "4") (term "0"))
                                             (builtin "One Step Simplification" (formula "4"))
                                             (rule "closeFalse" (formula "4"))
                                          )
                                       )
                                       (branch "msg.length ≥ 1 FALSE"
                                          (rule "eqSymm" (formula "20"))
                                          (rule "inEqSimp_geqRight" (formula "40"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                                          (rule "qeq_literals" (formula "20"))
                                          (rule "closeFalse" (formula "20"))
                                       )
                                    )
                                    (branch "self.sorted.<created> = TRUE FALSE"
                                       (rule "referencedObjectIsCreatedRight" (formula "35") (ifseqformula "42"))
                                       (rule "close" (formula "35") (ifseqformula "5"))
                                    )
                                 )
                                 (branch "self.unsigned.length ≥ 1 FALSE"
                                    (rule "replace_known_right" (formula "19") (term "0,1,1,0,0") (ifseqformula "32"))
                                    (builtin "One Step Simplification" (formula "19"))
                                    (rule "inEqSimp_geqRight" (formula "32"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_or_tautInEq0" (formula "20") (term "0,0"))
                                    (rule "add_zero_right" (formula "20") (term "1,1,0,0"))
                                    (rule "qeq_literals" (formula "20") (term "1,0,0"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "true_left" (formula "20"))
                                    (rule "commute_or_2" (formula "14") (term "0"))
                                    (rule "arrayLengthIsAShort" (formula "19") (term "1,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "19"))
                                    (rule "true_left" (formula "19"))
                                    (rule "arrayLengthNotNegative" (formula "19") (term "1,0,0,0"))
                                    (rule "arrayLengthIsAShort" (formula "20") (term "1,0,0,0"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "true_left" (formula "20"))
                                    (rule "arrayLengthNotNegative" (formula "20") (term "1,0,1,0,0"))
                                    (rule "ifthenelse_split" (formula "2") (term "0"))
                                    (branch "self.sorted.<created> = TRUE TRUE"
                                       (rule "applyEqReverse" (formula "44") (term "0,1,1,0") (ifseqformula "3"))
                                       (rule "applyEqReverse" (formula "44") (term "0,0,0,1,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "44"))
                                       (rule "allRight" (formula "44") (inst "sk=iv_38"))
                                       (rule "orRight" (formula "44"))
                                       (rule "notRight" (formula "44"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "applyEqReverse" (formula "46") (term "0,1,1,1,0,1") (ifseqformula "5"))
                                       (rule "applyEqReverse" (formula "46") (term "1,1,1") (ifseqformula "5"))
                                       (rule "applyEqReverse" (formula "2") (term "0,0,0,1,1") (ifseqformula "5"))
                                       (rule "applyEqReverse" (formula "2") (term "0,1,1,1") (ifseqformula "5"))
                                       (rule "hideAuxiliaryEq" (formula "5"))
                                       (rule "eqSymm" (formula "45"))
                                       (rule "replace_known_left" (formula "45") (term "0,0,1") (ifseqformula "1"))
                                       (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "1")))
                                       (rule "inEqSimp_homoInEq0" (formula "2"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0"))
                                       (rule "inEqSimp_homoInEq0" (formula "45") (term "0,0"))
                                       (rule "eqSymm" (formula "45"))
                                       (rule "polySimp_addComm1" (formula "45") (term "0,0,1"))
                                       (rule "inEqSimp_homoInEq0" (formula "45") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "45") (term "0,0,0"))
                                       (rule "eqSymm" (formula "45"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                       (rule "polySimp_rightDist" (formula "2") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                       (rule "mul_literals" (formula "2") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "45") (term "0,1"))
                                       (rule "polySimp_mulComm0" (formula "45") (term "1,0,1"))
                                       (rule "polySimp_rightDist" (formula "45") (term "1,0,1"))
                                       (rule "mul_literals" (formula "45") (term "0,1,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "45") (term "1,1,0,1"))
                                       (rule "polySimp_elimOne" (formula "45") (term "1,1,0,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "45") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "45") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "45") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "45") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "45") (term "0,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "45") (term "1,1,0,0"))
                                       (rule "pullOutSelect" (formula "45") (term "1,0") (inst "selectSK=arr_380"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "eqSymm" (formula "46"))
                                       (rule "commute_or_2" (formula "34") (term "0"))
                                       (rule "commute_or" (formula "36") (term "0,0"))
                                       (rule "commute_or_2" (formula "33") (term "0"))
                                       (rule "commute_or_2" (formula "35") (term "0"))
                                       (rule "commute_or" (formula "21") (term "0,0"))
                                       (rule "commute_or" (formula "14") (term "0,0"))
                                       (rule "commute_or" (formula "16") (term "0,0"))
                                       (rule "commute_or_2" (formula "27") (term "0"))
                                       (rule "commute_or" (formula "15") (term "0,0"))
                                       (rule "lenNonNegative" (formula "24") (term "0"))
                                       (rule "inEqSimp_commuteLeq" (formula "24"))
                                       (rule "applyEq" (formula "24") (term "0") (ifseqformula "25"))
                                       (rule "qeq_literals" (formula "24"))
                                       (rule "true_left" (formula "24"))
                                       (rule "commute_or" (formula "17") (term "0,0"))
                                       (rule "commute_or" (formula "34") (term "0,0"))
                                       (rule "commute_or" (formula "33") (term "0,0"))
                                       (rule "commute_or" (formula "35") (term "0,0"))
                                       (rule "commute_or" (formula "27") (term "0,0"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "1,0") (ifseqformula "9"))
                                       (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "5"))
                                       (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "43")))
                                       (rule "true_left" (formula "18"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "1,1") (ifseqformula "9"))
                                       (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "41"))
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "26") (term "0,1") (ifseqformula "9"))
                                       (rule "replace_known_right" (formula "26") (term "0") (ifseqformula "43"))
                                       (builtin "One Step Simplification" (formula "26"))
                                       (rule "ifthenelse_to_or_right" (formula "22") (term "0,0,0"))
                                       (builtin "One Step Simplification" (formula "22"))
                                       (rule "nnf_notAnd" (formula "22") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "22") (term "0,0,0,1,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "22") (term "0,0,1,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "22") (term "0,0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0,0"))
                                       (rule "nnf_notAnd" (formula "22") (term "0,1,1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "22") (term "1,0,1,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,1,1,0,0,0"))
                                       (rule "add_literals" (formula "22") (term "0,0,0,1,0,1,1,0,0,0"))
                                       (rule "add_zero_left" (formula "22") (term "0,0,1,0,1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "22") (term "1,1,0,1,1,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "22") (term "0,0,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "22") (term "1,0,0,0,0,1,1,0,0,0"))
                                       (rule "add_zero_right" (formula "22") (term "0,0,0,0,1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "22") (term "1,0,0,1,1,0,0,0"))
                                       (rule "commute_or" (formula "22") (term "0,0"))
                                       (rule "commute_or_2" (formula "22") (term "0"))
                                       (rule "commute_or_2" (formula "22") (term "0,1,0"))
                                       (rule "commute_or" (formula "22") (term "1,1,0"))
                                       (rule "commute_or" (formula "22") (term "0,0,1,0"))
                                       (rule "commute_or_2" (formula "22") (term "0,1,1,0"))
                                       (rule "commute_or" (formula "22") (term "0,0,1,1,0"))
                                       (rule "arrayLengthIsAShort" (formula "37") (term "1,1,0"))
                                       (builtin "One Step Simplification" (formula "37"))
                                       (rule "true_left" (formula "37"))
                                       (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                       (rule "cnf_rightDist" (formula "22") (term "1,1,0"))
                                       (rule "commute_or_2" (formula "22") (term "0,1,1,0"))
                                       (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0,0,1,1,0"))
                                       (rule "add_zero_right" (formula "22") (term "1,1,0,0,1,1,0"))
                                       (rule "qeq_literals" (formula "22") (term "1,0,0,1,1,0"))
                                       (builtin "One Step Simplification" (formula "22"))
                                       (rule "shift_paren_or" (formula "22") (term "1,1,0"))
                                       (rule "commute_or" (formula "22") (term "0,1,1,0"))
                                       (rule "cnf_rightDist" (formula "22") (term "0"))
                                       (rule "distr_forallAnd" (formula "22"))
                                       (rule "andLeft" (formula "22"))
                                       (rule "commute_or_2" (formula "22") (term "0"))
                                       (rule "shift_paren_or" (formula "23") (term "0"))
                                       (rule "commute_or_2" (formula "23") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "23"))
                                       (rule "commute_or_2" (formula "23") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "23"))
                                       (rule "shift_paren_or" (formula "22") (term "0,0"))
                                       (rule "shift_paren_or" (formula "22") (term "0,0,0"))
                                       (rule "commute_or" (formula "22") (term "0,0,0,0"))
                                       (builtin "One Step Simplification" (formula "22"))
                                       (rule "ifthenelse_split" (formula "21") (term "0"))
                                       (branch "msg.length ≥ 1 TRUE"
                                          (rule "eqSymm" (formula "22"))
                                          (rule "applyEq" (formula "23") (term "1,1,1,0,0,0,0,0,0") (ifseqformula "22"))
                                          (rule "applyEq" (formula "20") (term "0") (ifseqformula "22"))
                                          (rule "applyEq" (formula "22") (term "1,1,0") (ifseqformula "21"))
                                          (builtin "One Step Simplification" (formula "22"))
                                          (rule "applyEq" (formula "23") (term "1,1,0") (ifseqformula "21"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "23") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "23") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "23") (term "0,1,0"))
                                          (rule "add_literals" (formula "23") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "23") (term "0,1,0"))
                                          (rule "leq_literals" (formula "23") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "23"))
                                          (rule "true_left" (formula "23"))
                                          (rule "ifthenelse_split" (formula "3") (term "0"))
                                          (branch "self.sorted[iv_35].length ≥ 1 TRUE"
                                             (rule "replace_known_left" (formula "49") (term "0,0") (ifseqformula "4"))
                                             (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "4")))
                                             (rule "ifthenelse_to_or_left" (formula "23") (term "0,0,0"))
                                             (rule "eqSymm" (formula "23") (term "1,1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "23") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "23") (term "0,0,1,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,0,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0,0,0,0"))
                                             (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "23") (term "0,0,0,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0,0"))
                                             (rule "commute_or" (formula "23") (term "0,0"))
                                             (rule "commute_or_2" (formula "23") (term "0"))
                                             (rule "commute_or" (formula "23") (term "1,1,0"))
                                             (rule "cnf_rightDist" (formula "23") (term "1,1,0"))
                                             (rule "cnf_rightDist" (formula "23") (term "0"))
                                             (rule "distr_forallAnd" (formula "23"))
                                             (rule "andLeft" (formula "23"))
                                             (rule "commute_or" (formula "24") (term "0"))
                                             (rule "shift_paren_or" (formula "23") (term "0"))
                                             (builtin "One Step Simplification" (formula "23"))
                                             (rule "commute_or" (formula "24") (term "1,1,0"))
                                             (rule "cnf_rightDist" (formula "24") (term "0"))
                                             (rule "distr_forallAnd" (formula "24"))
                                             (rule "andLeft" (formula "24"))
                                             (rule "commute_or_2" (formula "24") (term "0"))
                                             (rule "shift_paren_or" (formula "25") (term "0"))
                                             (rule "commute_or_2" (formula "25") (term "0,0"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "25") (term "0"))
                                             (rule "inEqSimp_homoInEq1" (formula "25") (term "1,0"))
                                             (rule "polySimp_pullOutFactor1" (formula "25") (term "0,1,0"))
                                             (rule "add_literals" (formula "25") (term "1,0,1,0"))
                                             (rule "times_zero_1" (formula "25") (term "0,1,0"))
                                             (rule "leq_literals" (formula "25") (term "1,0"))
                                             (builtin "One Step Simplification" (formula "25"))
                                             (rule "true_left" (formula "25"))
                                             (rule "shift_paren_or" (formula "24") (term "0,0"))
                                             (rule "commute_or" (formula "24") (term "0,0,0"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "24") (term "0,0"))
                                             (rule "add_zero_right" (formula "24") (term "1,1,0,0"))
                                             (rule "qeq_literals" (formula "24") (term "1,0,0"))
                                             (builtin "One Step Simplification" (formula "24"))
                                             (rule "true_left" (formula "24"))
                                             (rule "ifthenelse_split" (formula "1") (term "0"))
                                             (branch " ¬self.sorted[iv_35] = null ∧ ¬self.sorted[iv_35].<created> = TRUE TRUE"
                                                (rule "andLeft" (formula "1"))
                                                (rule "notLeft" (formula "2"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "referencedObjectIsCreatedRight" (formula "41") (ifseqformula "40"))
                                                (rule "close" (formula "41") (ifseqformula "10"))
                                             )
                                             (branch " ¬self.sorted[iv_35] = null ∧ ¬self.sorted[iv_35].<created> = TRUE FALSE"
                                                (rule "close" (formula "50") (ifseqformula "1"))
                                             )
                                          )
                                          (branch "self.sorted[iv_35].length ≥ 1 FALSE"
                                             (rule "inEqSimp_geqRight" (formula "39"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_homoInEq1" (formula "4"))
                                             (rule "times_zero_2" (formula "4") (term "1,0"))
                                             (rule "add_zero_right" (formula "4") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                             (rule "mul_literals" (formula "4") (term "1"))
                                             (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "4"))
                                             (rule "qeq_literals" (formula "3") (term "0"))
                                             (builtin "One Step Simplification" (formula "3"))
                                             (rule "closeFalse" (formula "3"))
                                          )
                                       )
                                       (branch "msg.length ≥ 1 FALSE"
                                          (rule "eqSymm" (formula "21"))
                                          (rule "inEqSimp_geqRight" (formula "40"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "applyEq" (formula "24") (term "1,1,0") (ifseqformula "22"))
                                          (rule "applyEq" (formula "23") (term "1,1,1,0,0,0,0,0,0") (ifseqformula "22"))
                                          (rule "add_zero_right" (formula "23") (term "1,1,0,0,0,0,0,0"))
                                          (rule "applyEq" (formula "23") (term "1,1,0") (ifseqformula "22"))
                                          (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                          (rule "qeq_literals" (formula "21"))
                                          (rule "closeFalse" (formula "21"))
                                       )
                                    )
                                    (branch "self.sorted.<created> = TRUE FALSE"
                                       (rule "referencedObjectIsCreatedRight" (formula "34") (ifseqformula "41"))
                                       (rule "close" (formula "34") (ifseqformula "6"))
                                    )
                                 )
                              )
                              (branch "self.concatenated.length ≥ 1 FALSE"
                                 (rule "eqSymm" (formula "15"))
                                 (builtin "One Step Simplification" (formula "15"))
                                 (rule "inEqSimp_geqRight" (formula "31"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_notGeq" (formula "16") (term "0"))
                                 (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                                 (rule "add_literals" (formula "16") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "16") (term "0,0"))
                                 (rule "commute_or_2" (formula "12") (term "0"))
                                 (rule "nnf_imp2or" (formula "41") (term "0,1"))
                                 (rule "nnf_notAnd" (formula "22") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
                                 (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "22") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                                 (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                                 (rule "ifthenelse_split" (formula "18") (term "1"))
                                 (branch "self.unsigned.length ≥ 1 TRUE"
                                    (rule "replace_known_left" (formula "20") (term "0,1,1,0,0") (ifseqformula "18"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "commute_or_2" (formula "14") (term "0"))
                                    (rule "arrayLengthIsAShort" (formula "19") (term "1,0,0,0"))
                                    (builtin "One Step Simplification" (formula "19"))
                                    (rule "true_left" (formula "19"))
                                    (rule "arrayLengthIsAShort" (formula "19") (term "1,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "19"))
                                    (rule "true_left" (formula "19"))
                                    (rule "arrayLengthNotNegative" (formula "19") (term "1,0,1,0,0"))
                                    (rule "arrayLengthNotNegative" (formula "20") (term "1,0,0,0"))
                                    (rule "ifthenelse_split" (formula "2") (term "0"))
                                    (branch "self.sorted.<created> = TRUE TRUE"
                                       (rule "applyEqReverse" (formula "45") (term "0,0,0,1,1,1,0,0,0,1") (ifseqformula "3"))
                                       (rule "applyEqReverse" (formula "45") (term "0,1,1,1,1,0,0,0,1") (ifseqformula "3"))
                                       (rule "applyEqReverse" (formula "45") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "3"))
                                       (rule "applyEqReverse" (formula "45") (term "0,0,0,1,0") (ifseqformula "3"))
                                       (rule "applyEqReverse" (formula "45") (term "0,1,1,0") (ifseqformula "3"))
                                       (builtin "One Step Simplification" (formula "45"))
                                       (rule "allRight" (formula "45") (inst "sk=iv_37"))
                                       (rule "orRight" (formula "45"))
                                       (rule "notRight" (formula "45"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "applyEqReverse" (formula "47") (term "1,1,1") (ifseqformula "5"))
                                       (rule "hideAuxiliaryEq" (formula "5"))
                                       (rule "eqSymm" (formula "46"))
                                       (rule "replace_known_left" (formula "46") (term "0,0,0") (ifseqformula "1"))
                                       (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "1")))
                                       (rule "inEqSimp_homoInEq0" (formula "2"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0"))
                                       (rule "inEqSimp_homoInEq0" (formula "46") (term "0,0"))
                                       (rule "eqSymm" (formula "46"))
                                       (rule "polySimp_addComm1" (formula "46") (term "0,0,1"))
                                       (rule "inEqSimp_homoInEq0" (formula "46") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "46") (term "0,0,0"))
                                       (rule "eqSymm" (formula "46"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                       (rule "polySimp_rightDist" (formula "2") (term "1"))
                                       (rule "mul_literals" (formula "2") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "46") (term "0,1"))
                                       (rule "polySimp_mulComm0" (formula "46") (term "1,0,1"))
                                       (rule "polySimp_rightDist" (formula "46") (term "1,0,1"))
                                       (rule "mul_literals" (formula "46") (term "0,1,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "46") (term "1,1,0,1"))
                                       (rule "polySimp_elimOne" (formula "46") (term "1,1,0,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "46") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "46") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "46") (term "1,0,0"))
                                       (rule "mul_literals" (formula "46") (term "0,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "46") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "46") (term "1,1,0,0"))
                                       (rule "pullOutSelect" (formula "46") (term "1,0") (inst "selectSK=arr_379"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "eqSymm" (formula "47"))
                                       (rule "commute_or_2" (formula "35") (term "0"))
                                       (rule "commute_or" (formula "37") (term "0,0"))
                                       (rule "commute_or_2" (formula "34") (term "0"))
                                       (rule "commute_or_2" (formula "36") (term "0"))
                                       (rule "commute_or" (formula "20") (term "0,0"))
                                       (rule "commute_or" (formula "14") (term "0,0"))
                                       (rule "commute_or" (formula "16") (term "0,0"))
                                       (rule "commute_or_2" (formula "28") (term "0"))
                                       (rule "commute_or_2" (formula "25") (term "0"))
                                       (rule "commute_or" (formula "15") (term "0,0"))
                                       (rule "lenNonNegative" (formula "24") (term "0"))
                                       (rule "inEqSimp_commuteLeq" (formula "24"))
                                       (rule "applyEq" (formula "24") (term "0") (ifseqformula "25"))
                                       (rule "inEqSimp_subsumption1" (formula "24") (ifseqformula "21"))
                                       (rule "leq_literals" (formula "24") (term "0"))
                                       (builtin "One Step Simplification" (formula "24"))
                                       (rule "true_left" (formula "24"))
                                       (rule "commute_or" (formula "17") (term "0,0"))
                                       (rule "commute_or" (formula "35") (term "0,0"))
                                       (rule "commute_or" (formula "34") (term "0,0"))
                                       (rule "commute_or" (formula "36") (term "0,0"))
                                       (rule "commute_or" (formula "28") (term "0,0"))
                                       (rule "commute_or" (formula "25") (term "0,0"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "1,1") (ifseqformula "9"))
                                       (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "42"))
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "1,0") (ifseqformula "9"))
                                       (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "45"))
                                       (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "5")))
                                       (rule "true_left" (formula "19"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "27") (term "0,1") (ifseqformula "9"))
                                       (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "44"))
                                       (builtin "One Step Simplification" (formula "27"))
                                       (rule "cut_direct" (formula "21") (term "0,1,1,0"))
                                       (branch "CUT: msg.length ≥ 1 TRUE"
                                          (builtin "One Step Simplification" (formula "22"))
                                          (rule "inEqSimp_contradEq7" (formula "20") (term "1") (ifseqformula "21"))
                                          (rule "mul_literals" (formula "20") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "20") (term "0,0,1"))
                                          (rule "leq_literals" (formula "20") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "20"))
                                          (rule "inEqSimp_contradInEq1" (formula "20") (ifseqformula "21"))
                                          (rule "qeq_literals" (formula "20") (term "0"))
                                          (builtin "One Step Simplification" (formula "20"))
                                          (rule "closeFalse" (formula "20"))
                                       )
                                       (branch "CUT: msg.length ≥ 1 FALSE"
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "inEqSimp_geqRight" (formula "39"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "replace_known_left" (formula "21") (term "0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "21") (term "0"))
                                          (rule "add_literals" (formula "21") (term "1,1,0"))
                                          (rule "qeq_literals" (formula "21") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                          (rule "arrayLengthIsAShort" (formula "38") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "38"))
                                          (rule "true_left" (formula "38"))
                                          (rule "ifthenelse_to_or_right" (formula "25") (term "0,0,0"))
                                          (rule "nnf_notAnd" (formula "25") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "25") (term "0,0,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "25") (term "0,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0,0"))
                                          (rule "commute_or" (formula "25") (term "0,0"))
                                          (rule "commute_or_2" (formula "25") (term "0"))
                                          (rule "commute_or" (formula "25") (term "1,1,0"))
                                          (rule "commute_or_2" (formula "25") (term "0,1,0"))
                                          (rule "commute_or" (formula "25") (term "0,0,1,0"))
                                          (rule "cnf_rightDist" (formula "25") (term "1,1,0"))
                                          (rule "cnf_rightDist" (formula "25") (term "0"))
                                          (rule "distr_forallAnd" (formula "25"))
                                          (rule "andLeft" (formula "25"))
                                          (rule "commute_or" (formula "26") (term "0"))
                                          (rule "shift_paren_or" (formula "25") (term "0"))
                                          (rule "commute_or_2" (formula "25") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "25"))
                                          (rule "commute_or" (formula "26") (term "1,1,0"))
                                          (rule "shift_paren_or" (formula "25") (term "0,0"))
                                          (rule "commute_or" (formula "25") (term "0,0,0"))
                                          (builtin "One Step Simplification" (formula "25"))
                                          (rule "cnf_rightDist" (formula "26") (term "0"))
                                          (rule "distr_forallAnd" (formula "26"))
                                          (rule "andLeft" (formula "26"))
                                          (rule "commute_or_2" (formula "26") (term "0"))
                                          (rule "shift_paren_or" (formula "27") (term "0"))
                                          (rule "commute_or_2" (formula "27") (term "0,0"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "27") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "27") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "27") (term "0,1,0"))
                                          (rule "add_literals" (formula "27") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "27") (term "0,1,0"))
                                          (rule "leq_literals" (formula "27") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "27"))
                                          (rule "true_left" (formula "27"))
                                          (rule "shift_paren_or" (formula "26") (term "0,0"))
                                          (rule "commute_or" (formula "26") (term "0,0,0"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "26") (term "0,0"))
                                          (rule "add_literals" (formula "26") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "26") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "26"))
                                          (rule "true_left" (formula "26"))
                                          (rule "ifthenelse_split" (formula "4") (term "0"))
                                          (branch "self.sorted[iv_35].length ≥ 1 TRUE"
                                             (rule "replace_known_left" (formula "49") (term "0,0") (ifseqformula "5"))
                                             (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "5")))
                                             (rule "arrayLengthIsAShort" (formula "6") (term "0"))
                                             (builtin "One Step Simplification" (formula "6"))
                                             (rule "true_left" (formula "6"))
                                             (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                             (rule "inEqSimp_antiSymm" (formula "6") (ifseqformula "7"))
                                             (rule "applyEq" (formula "8") (term "0") (ifseqformula "6"))
                                             (rule "leq_literals" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
                                             (rule "qeq_literals" (formula "7"))
                                             (rule "true_left" (formula "7"))
                                             (rule "ifthenelse_split" (formula "2") (term "0"))
                                             (branch " ¬self.sorted[iv_35] = null ∧ ¬self.sorted[iv_35].<created> = TRUE TRUE"
                                                (rule "andLeft" (formula "2"))
                                                (rule "notLeft" (formula "3"))
                                                (rule "notLeft" (formula "2"))
                                                (rule "referencedObjectIsCreatedRight" (formula "41") (ifseqformula "40"))
                                                (rule "close" (formula "41") (ifseqformula "11"))
                                             )
                                             (branch " ¬self.sorted[iv_35] = null ∧ ¬self.sorted[iv_35].<created> = TRUE FALSE"
                                                (rule "close" (formula "50") (ifseqformula "2"))
                                             )
                                          )
                                          (branch "self.sorted[iv_35].length ≥ 1 FALSE"
                                             (rule "inEqSimp_geqRight" (formula "39"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_homoInEq1" (formula "5"))
                                             (rule "times_zero_2" (formula "5") (term "1,0"))
                                             (rule "add_zero_right" (formula "5") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                             (rule "mul_literals" (formula "5") (term "1"))
                                             (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "5"))
                                             (rule "qeq_literals" (formula "4") (term "0"))
                                             (builtin "One Step Simplification" (formula "4"))
                                             (rule "closeFalse" (formula "4"))
                                          )
                                       )
                                    )
                                    (branch "self.sorted.<created> = TRUE FALSE"
                                       (rule "referencedObjectIsCreatedRight" (formula "35") (ifseqformula "42"))
                                       (rule "close" (formula "35") (ifseqformula "6"))
                                    )
                                 )
                                 (branch "self.unsigned.length ≥ 1 FALSE"
                                    (rule "replace_known_right" (formula "19") (term "0,1,1,0,0") (ifseqformula "32"))
                                    (builtin "One Step Simplification" (formula "19"))
                                    (rule "inEqSimp_geqRight" (formula "32"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_or_tautInEq0" (formula "20") (term "0,0"))
                                    (rule "add_literals" (formula "20") (term "1,1,0,0"))
                                    (rule "qeq_literals" (formula "20") (term "1,0,0"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "true_left" (formula "20"))
                                    (rule "commute_or_2" (formula "15") (term "0"))
                                    (rule "arrayLengthIsAShort" (formula "19") (term "1,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "19"))
                                    (rule "true_left" (formula "19"))
                                    (rule "arrayLengthNotNegative" (formula "19") (term "1,0,1,0,0"))
                                    (rule "arrayLengthIsAShort" (formula "20") (term "1,0,0,0"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "true_left" (formula "20"))
                                    (rule "arrayLengthNotNegative" (formula "20") (term "1,0,0,0"))
                                    (rule "ifthenelse_split" (formula "3") (term "0"))
                                    (branch "self.sorted.<created> = TRUE TRUE"
                                       (rule "applyEqReverse" (formula "44") (term "1,1,1,1,0,1") (ifseqformula "4"))
                                       (rule "applyEqReverse" (formula "44") (term "0,0,0,1,1,1,0,0,0,1") (ifseqformula "4"))
                                       (rule "applyEqReverse" (formula "44") (term "0,1,1,1,1,0,0,0,1") (ifseqformula "4"))
                                       (rule "applyEqReverse" (formula "44") (term "0,1,1,0") (ifseqformula "4"))
                                       (rule "applyEqReverse" (formula "44") (term "0,0,0,1,0") (ifseqformula "4"))
                                       (builtin "One Step Simplification" (formula "44"))
                                       (rule "allRight" (formula "44") (inst "sk=iv_36"))
                                       (rule "orRight" (formula "44"))
                                       (rule "notRight" (formula "44"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "applyEqReverse" (formula "46") (term "0,1,1,1,0,1") (ifseqformula "6"))
                                       (rule "hideAuxiliaryEq" (formula "6"))
                                       (rule "eqSymm" (formula "45"))
                                       (rule "replace_known_left" (formula "45") (term "0,0,1") (ifseqformula "1"))
                                       (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "1")))
                                       (rule "inEqSimp_homoInEq0" (formula "2"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0"))
                                       (rule "inEqSimp_homoInEq0" (formula "45") (term "0,0"))
                                       (rule "eqSymm" (formula "45"))
                                       (rule "polySimp_addComm1" (formula "45") (term "0,0,1"))
                                       (rule "inEqSimp_homoInEq0" (formula "45") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "45") (term "0,0,0"))
                                       (rule "eqSymm" (formula "45"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                       (rule "polySimp_rightDist" (formula "2") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                       (rule "mul_literals" (formula "2") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "45") (term "0,0"))
                                       (rule "eqSymm" (formula "45"))
                                       (rule "polySimp_mulComm0" (formula "45") (term "1,0,1"))
                                       (rule "polySimp_rightDist" (formula "45") (term "1,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "45") (term "1,1,0,1"))
                                       (rule "mul_literals" (formula "45") (term "0,1,0,1"))
                                       (rule "polySimp_elimOne" (formula "45") (term "1,1,0,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "45") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "45") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "45") (term "1,0,0"))
                                       (rule "mul_literals" (formula "45") (term "0,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "45") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "45") (term "1,1,0,0"))
                                       (rule "eqSymm" (formula "45"))
                                       (rule "pullOutSelect" (formula "45") (term "1,0") (inst "selectSK=arr_378"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "eqSymm" (formula "46"))
                                       (rule "commute_or_2" (formula "34") (term "0"))
                                       (rule "commute_or" (formula "36") (term "0,0"))
                                       (rule "commute_or_2" (formula "33") (term "0"))
                                       (rule "commute_or_2" (formula "35") (term "0"))
                                       (rule "commute_or" (formula "21") (term "0,0"))
                                       (rule "commute_or" (formula "15") (term "0,0"))
                                       (rule "commute_or" (formula "17") (term "0,0"))
                                       (rule "commute_or_2" (formula "27") (term "0"))
                                       (rule "commute_or" (formula "16") (term "0,0"))
                                       (rule "lenNonNegative" (formula "24") (term "0"))
                                       (rule "inEqSimp_commuteLeq" (formula "24"))
                                       (rule "applyEq" (formula "24") (term "0") (ifseqformula "25"))
                                       (rule "qeq_literals" (formula "24"))
                                       (rule "true_left" (formula "24"))
                                       (rule "commute_or" (formula "18") (term "0,0"))
                                       (rule "commute_or" (formula "34") (term "0,0"))
                                       (rule "commute_or" (formula "33") (term "0,0"))
                                       (rule "commute_or" (formula "35") (term "0,0"))
                                       (rule "commute_or" (formula "27") (term "0,0"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "1,0") (ifseqformula "10"))
                                       (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "43"))
                                       (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "6")))
                                       (rule "true_left" (formula "19"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "1,1") (ifseqformula "10"))
                                       (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "41"))
                                       (builtin "One Step Simplification" (formula "19"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "26") (term "0,1") (ifseqformula "10"))
                                       (rule "replace_known_right" (formula "26") (term "0") (ifseqformula "43"))
                                       (builtin "One Step Simplification" (formula "26"))
                                       (rule "cut_direct" (formula "22") (term "0,1,1,0"))
                                       (branch "CUT: msg.length ≥ 1 TRUE"
                                          (builtin "One Step Simplification" (formula "23"))
                                          (rule "inEqSimp_contradEq7" (formula "21") (term "1") (ifseqformula "22"))
                                          (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "21") (term "0,0,1"))
                                          (rule "leq_literals" (formula "21") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "inEqSimp_contradInEq0" (formula "22") (ifseqformula "21"))
                                          (rule "qeq_literals" (formula "22") (term "0"))
                                          (builtin "One Step Simplification" (formula "22"))
                                          (rule "closeFalse" (formula "22"))
                                       )
                                       (branch "CUT: msg.length ≥ 1 FALSE"
                                          (builtin "One Step Simplification" (formula "22"))
                                          (rule "inEqSimp_geqRight" (formula "38"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "22"))
                                          (rule "true_left" (formula "22"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0"))
                                          (rule "add_literals" (formula "22") (term "1,1,0"))
                                          (rule "qeq_literals" (formula "22") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "22"))
                                          (rule "true_left" (formula "22"))
                                          (rule "arrayLengthNotNegative" (formula "36") (term "1,1,0"))
                                          (rule "arrayLengthIsAShort" (formula "37") (term "1,1,0"))
                                          (builtin "One Step Simplification" (formula "37"))
                                          (rule "true_left" (formula "37"))
                                          (rule "ifthenelse_split" (formula "4") (term "0"))
                                          (branch "self.sorted[iv_35].length ≥ 1 TRUE"
                                             (rule "replace_known_left" (formula "48") (term "0,0") (ifseqformula "5"))
                                             (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "5")))
                                             (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                             (rule "inEqSimp_antiSymm" (formula "7") (ifseqformula "8"))
                                             (rule "applyEq" (formula "9") (term "0") (ifseqformula "7"))
                                             (rule "leq_literals" (formula "9"))
                                             (rule "true_left" (formula "9"))
                                             (rule "applyEq" (formula "8") (term "0") (ifseqformula "7"))
                                             (rule "qeq_literals" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "ifthenelse_split" (formula "2") (term "0"))
                                             (branch " ¬self.sorted[iv_35] = null ∧ ¬self.sorted[iv_35].<created> = TRUE TRUE"
                                                (rule "andLeft" (formula "2"))
                                                (rule "notLeft" (formula "3"))
                                                (rule "notLeft" (formula "2"))
                                                (rule "referencedObjectIsCreatedRight" (formula "40") (ifseqformula "39"))
                                                (rule "close" (formula "40") (ifseqformula "12"))
                                             )
                                             (branch " ¬self.sorted[iv_35] = null ∧ ¬self.sorted[iv_35].<created> = TRUE FALSE"
                                                (rule "close" (formula "49") (ifseqformula "2"))
                                             )
                                          )
                                          (branch "self.sorted[iv_35].length ≥ 1 FALSE"
                                             (rule "inEqSimp_geqRight" (formula "38"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_homoInEq1" (formula "5"))
                                             (rule "times_zero_2" (formula "5") (term "1,0"))
                                             (rule "add_zero_right" (formula "5") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                             (rule "mul_literals" (formula "5") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "4"))
                                             (rule "qeq_literals" (formula "5") (term "0"))
                                             (builtin "One Step Simplification" (formula "5"))
                                             (rule "closeFalse" (formula "5"))
                                          )
                                       )
                                    )
                                    (branch "self.sorted.<created> = TRUE FALSE"
                                       (rule "referencedObjectIsCreatedRight" (formula "34") (ifseqformula "41"))
                                       (rule "close" (formula "34") (ifseqformula "7"))
                                    )
                                 )
                              )
                           )
                           (branch "self.chosen.length ≥ 1 FALSE"
                              (rule "inEqSimp_geqRight" (formula "33"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "4"))
                              (rule "times_zero_2" (formula "4") (term "1,0"))
                              (rule "add_zero_right" (formula "4") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                              (rule "mul_literals" (formula "4") (term "1"))
                              (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "4"))
                              (rule "qeq_literals" (formula "3") (term "0"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "closeFalse" (formula "3"))
                           )
                        )
                     )
                  )
                  (branch
                     (rule "cut" (inst "cutFormula=  array2seq(heapAfter_splidAndCheck,
            byte[]::select(heapAfter_splidAndCheck,
                           self,
                           verif.selectvoting.system.core.MixServer::$concatenated))
= array2seq(heap,
            byte[]::select(heap,
                           self,
                           verif.selectvoting.system.core.MixServer::$concatenated))") (userinteraction))
                     (branch "CUT: array2seq(heapAfter_splidAndCheck, self.concatenated@heapAfter_splidAndCheck) = array2seq(heap, self.concatenated) TRUE"
                        (rule "applyEq" (formula "27") (term "0") (ifseqformula "1") (userinteraction))
                        (rule "applyEq" (formula "27") (term "0") (ifseqformula "10") (userinteraction))
                        (rule "cut" (inst "cutFormula=  length(byte[][]::select(heap,
                          self,
                          verif.selectvoting.system.core.MixServer::$sorted))
= length(byte[][]::select(heapAfter_splidAndCheck,
                          self,
                          verif.selectvoting.system.core.MixServer::$sorted))") (userinteraction))
                        (branch "CUT: self.sorted.length = self.sorted@heapAfter_splidAndCheck.length TRUE"
                           (rule "applyEqReverse" (formula "28") (term "0,0,1") (ifseqformula "1") (userinteraction))
                           (rule "cut" (inst "cutFormula=  array2seq2d(heap,
              byte[][]::select(heap,
                               self,
                               verif.selectvoting.system.core.MixServer::$sorted))
= array2seq2d(heapAfter_splidAndCheck,
              byte[][]::select(heapAfter_splidAndCheck,
                               self,
                               verif.selectvoting.system.core.MixServer::$sorted))") (userinteraction))
                           (branch "CUT: array2seq2d(heap, self.sorted) = array2seq2d(heapAfter_splidAndCheck, self.sorted@heapAfter_splidAndCheck) TRUE"
                              (rule "applyEq" (formula "29") (term "1,1,0") (ifseqformula "1") (userinteraction))
                              (builtin "One Step Simplification" (formula "29"))
                              (rule "closeTrue" (formula "29") (userinteraction))
                           )
                           (branch "CUT: array2seq2d(heap, self.sorted) = array2seq2d(heapAfter_splidAndCheck, self.sorted@heapAfter_splidAndCheck) FALSE"
                              (rule "array2seq2dDef" (formula "24") (term "0") (inst "u=u") (userinteraction))
                              (rule "array2seq2dDef" (formula "24") (term "1") (inst "u=u") (userinteraction))
                              (rule "equalityToSeqGetAndSeqLenRight" (formula "24") (inst "iv=iv") (userinteraction))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1") (ifseqformula "18"))
                              (rule "eqSymm" (formula "9") (term "1,0"))
                              (rule "eqSymm" (formula "11"))
                              (rule "eqSymm" (formula "15"))
                              (rule "eqSymm" (formula "21"))
                              (rule "eqSymm" (formula "1"))
                              (rule "eqSymm" (formula "29"))
                              (rule "eqSymm" (formula "24") (term "0"))
                              (rule "eqSymm" (formula "12"))
                              (rule "eqSymm" (formula "13"))
                              (rule "eqSymm" (formula "14"))
                              (rule "eqSymm" (formula "24") (term "1,0,1"))
                              (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "28"))
                              (builtin "One Step Simplification" (formula "6"))
                              (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "26"))
                              (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "25")))
                              (rule "lenOfSeqDef" (formula "24") (term "1,1,0,0,1"))
                              (rule "polySimp_elimSub" (formula "24") (term "1,1,1,0,0,1"))
                              (rule "mul_literals" (formula "24") (term "1,1,1,1,0,0,1"))
                              (rule "add_zero_right" (formula "24") (term "1,1,1,0,0,1"))
                              (rule "lenOfSeqDef" (formula "24") (term "0,0"))
                              (rule "eqSymm" (formula "24") (term "0"))
                              (rule "polySimp_elimSub" (formula "24") (term "1,1,0"))
                              (rule "mul_literals" (formula "24") (term "1,1,1,0"))
                              (rule "add_zero_right" (formula "24") (term "1,1,0"))
                              (rule "getOfSeqDef" (formula "24") (term "0,1,0,1"))
                              (rule "castDel" (formula "24") (term "2,0,1,0,1"))
                              (rule "castDel" (formula "24") (term "1,0,1,0,1"))
                              (rule "add_zero_right" (formula "24") (term "0,2,1,1,0,1,0,1"))
                              (rule "eqSymm" (formula "24") (term "1,0,1"))
                              (rule "polySimp_elimSub" (formula "24") (term "1,1,0,1,1,0,1"))
                              (rule "times_zero_2" (formula "24") (term "1,1,1,0,1,1,0,1"))
                              (rule "add_zero_right" (formula "24") (term "1,1,0,1,1,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                              (rule "lenOfSeqDef" (formula "24") (term "0,0"))
                              (rule "eqSymm" (formula "24") (term "0"))
                              (rule "polySimp_elimSub" (formula "24") (term "1,1,0"))
                              (rule "times_zero_2" (formula "24") (term "1,1,1,0"))
                              (rule "add_zero_right" (formula "24") (term "1,1,0"))
                              (rule "getOfSeqDef" (formula "24") (term "0,1,0,1"))
                              (rule "castDel" (formula "24") (term "1,0,1,0,1"))
                              (rule "castDel" (formula "24") (term "2,0,1,0,1"))
                              (rule "add_zero_right" (formula "24") (term "0,2,1,1,0,1,0,1"))
                              (rule "eqSymm" (formula "24") (term "1,0,1"))
                              (rule "polySimp_elimSub" (formula "24") (term "1,1,0,1,1,0,1"))
                              (rule "times_zero_2" (formula "24") (term "1,1,1,0,1,1,0,1"))
                              (rule "add_zero_right" (formula "24") (term "1,1,0,1,1,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "24") (term "0,1,1,0,0,1"))
                              (rule "add_zero_right" (formula "24") (term "0,0,1,1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,1,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0"))
                              (rule "add_zero_right" (formula "24") (term "0,0,0,0"))
                              (rule "eqSymm" (formula "24") (term "0"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,1,0,1"))
                              (rule "eqSymm" (formula "24") (term "1,0,1"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,1,1,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0"))
                              (rule "add_zero_right" (formula "24") (term "0,0,0,0"))
                              (rule "eqSymm" (formula "24") (term "0"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,1,0,1"))
                              (rule "eqSymm" (formula "24") (term "1,0,1"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,1,1,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,1,1,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1,0,1"))
                              (rule "applyEq" (formula "11") (term "1") (ifseqformula "15"))
                              (rule "applyEq" (formula "2") (term "1") (ifseqformula "15"))
                              (rule "applyEq" (formula "29") (term "0,0,0") (ifseqformula "14"))
                              (rule "eqSymm" (formula "29"))
                              (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "14"))
                              (rule "applyEq" (formula "12") (term "1,1,0") (ifseqformula "15"))
                              (rule "apply_eq_monomials" (formula "24") (term "1,0,0,0,0") (ifseqformula "1"))
                              (rule "polySimp_rightDist" (formula "24") (term "0,1,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "1,0,1,0,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "24") (term "1,0,0,0,0"))
                              (rule "add_literals" (formula "24") (term "1,1,1,0,0,0,0"))
                              (rule "times_zero_1" (formula "24") (term "1,1,0,0,0,0"))
                              (rule "add_zero_right" (formula "24") (term "1,0,0,0,0"))
                              (rule "eqSymm" (formula "24") (term "0"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "24") (term "0"))
                              (rule "applyEq" (formula "14") (term "1") (ifseqformula "13"))
                              (rule "applyEq" (formula "9") (term "0,1,0,0,1,0,0") (ifseqformula "13"))
                              (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "13"))
                              (rule "applyEq" (formula "29") (term "0,0,0") (ifseqformula "14"))
                              (rule "eqSymm" (formula "29"))
                              (rule "applyEq" (formula "24") (term "0,1,0,0,0,0") (ifseqformula "14"))
                              (rule "eqSymm" (formula "24") (term "0"))
                              (rule "apply_eq_monomials" (formula "24") (term "1,0,0,1,0,0,1,0,1") (ifseqformula "1"))
                              (rule "polySimp_rightDist" (formula "24") (term "0,1,0,0,1,0,0,1,0,1"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "1,0,1,0,0,1,0,0,1,0,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "24") (term "1,0,0,1,0,0,1,0,1"))
                              (rule "add_literals" (formula "24") (term "1,1,1,0,0,1,0,0,1,0,1"))
                              (rule "times_zero_1" (formula "24") (term "1,1,0,0,1,0,0,1,0,1"))
                              (rule "add_zero_right" (formula "24") (term "1,0,0,1,0,0,1,0,1"))
                              (rule "eqSymm" (formula "24") (term "1,0,1"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,1,1,0,1"))
                              (rule "eqSymm" (formula "24") (term "1,0,1"))
                              (rule "applyEq" (formula "29") (term "0,0,0") (ifseqformula "13"))
                              (rule "applyEq" (formula "29") (term "1") (ifseqformula "11"))
                              (rule "applyEq" (formula "24") (term "1,0,1,0,0,1,0,0,1") (ifseqformula "14"))
                              (rule "applyEq" (formula "24") (term "0,1,0,0,0,1,0,0,1,0,0,1") (ifseqformula "14"))
                              (rule "applyEq" (formula "1") (term "1") (ifseqformula "14"))
                              (rule "applyEq" (formula "24") (term "1,0,0") (ifseqformula "14"))
                              (rule "applyEq" (formula "24") (term "0,1,0,0,0,0") (ifseqformula "14"))
                              (rule "eqSymm" (formula "24") (term "0"))
                              (rule "applyEq" (formula "24") (term "0,1,0,0,1,0,0,1,0,1") (ifseqformula "14"))
                              (rule "eqSymm" (formula "24") (term "1,0,1"))
                              (rule "applyEq" (formula "24") (term "0,1,0,0,1,0,0,1,0,1") (ifseqformula "14"))
                              (rule "eqSymm" (formula "24") (term "1,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0,0,1,0,0,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "0,0,0,1,0,0,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "24") (term "0,0,0,1,0,0,1,0,0,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "24") (term "0,0,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "24") (term "0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,1,1,0,1"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,1,1,0,1"))
                              (rule "polySimp_rightDist" (formula "24") (term "1,1,0,1,1,0,1"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,1,1,0,1"))
                              (rule "mul_literals" (formula "24") (term "0,1,1,0,1,1,0,1"))
                              (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,1,1,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,1,0,1"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1,0,1"))
                              (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1,0,1"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1,0,1"))
                              (rule "mul_literals" (formula "24") (term "0,1,1,0,0,1,0,1"))
                              (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1"))
                              (rule "mul_literals" (formula "24") (term "0,1,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1"))
                              (rule "nonNull" (formula "23") (inst "i=i"))
                              (rule "sub_literals" (formula "23") (term "2,1,0,1,1"))
                              (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "26")))
                              (rule "greater_literals" (formula "23") (term "0"))
                              (builtin "One Step Simplification" (formula "23"))
                              (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                              (rule "array2seqDef" (formula "2") (term "0") (inst "u=u"))
                              (rule "array2seqDef" (formula "9") (term "1,0,0,1,0") (inst "u=u"))
                              (rule "array2seqDef" (formula "9") (term "1,1,0") (inst "u=u"))
                              (rule "eqSymm" (formula "9") (term "1,0"))
                              (rule "array2seqDef" (formula "15") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "15"))
                              (rule "narrowSelectArrayType" (formula "15") (term "2,0") (ifseqformula "3") (ifseqformula "28"))
                              (rule "array2seqDef" (formula "12") (term "0,0") (inst "u=u"))
                              (rule "array2seqDef" (formula "12") (term "0,1,0") (inst "u=u"))
                              (rule "array2seqDef" (formula "12") (term "1") (inst "u=u"))
                              (rule "array2seqDef" (formula "11") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "11"))
                              (rule "narrowSelectArrayType" (formula "11") (term "2,0") (ifseqformula "3") (ifseqformula "28"))
                              (rule "applyEq" (formula "11") (term "0") (ifseqformula "15"))
                              (rule "eqSymm" (formula "11"))
                              (rule "array2seqDef" (formula "2") (term "1") (inst "u=u"))
                              (rule "narrowSelectArrayType" (formula "2") (term "2,1") (ifseqformula "3") (ifseqformula "28"))
                              (rule "applyEq" (formula "2") (term "1") (ifseqformula "15"))
                              (rule "array2seqDef" (formula "12") (term "1,1,0") (inst "u=u"))
                              (rule "narrowSelectArrayType" (formula "12") (term "2,1,1,0") (ifseqformula "3") (ifseqformula "28"))
                              (rule "applyEq" (formula "12") (term "1,1,0") (ifseqformula "15"))
                              (rule "pullOutSelect" (formula "21") (term "1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_23"))
                              (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "21"))
                              (rule "applyEq" (formula "30") (term "1,1,1,0") (ifseqformula "21"))
                              (rule "applyEq" (formula "25") (term "0,1,0,0") (ifseqformula "21"))
                              (rule "applyEq" (formula "25") (term "1,1,1,0,1,0,1") (ifseqformula "21"))
                              (rule "simplifySelectOfAnonEQ" (formula "21") (ifseqformula "18"))
                              (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "28")) (ifInst ""  (formula "4")))
                              (rule "applyEqReverse" (formula "22") (term "1,0") (ifseqformula "21"))
                              (rule "applyEqReverse" (formula "1") (term "0,0") (ifseqformula "21"))
                              (rule "applyEqReverse" (formula "29") (term "1,1,1,0") (ifseqformula "20"))
                              (rule "applyEqReverse" (formula "24") (term "0,1,0,0") (ifseqformula "20"))
                              (rule "applyEqReverse" (formula "24") (term "1,1,1,0,1,0,1") (ifseqformula "20"))
                              (rule "hideAuxiliaryEq" (formula "20"))
                              (rule "applyEq" (formula "28") (term "1,1,0") (ifseqformula "20"))
                              (rule "applyEq" (formula "23") (term "1,0,0") (ifseqformula "13"))
                              (builtin "One Step Simplification" (formula "23"))
                              (rule "allRight" (formula "23") (inst "sk=iv_22"))
                              (rule "impRight" (formula "23"))
                              (rule "andLeft" (formula "1"))
                              (rule "replace_known_left" (formula "25") (term "0,0,1") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "1")))
                              (rule "inEqSimp_homoInEq0" (formula "2"))
                              (rule "polySimp_addComm1" (formula "2") (term "0"))
                              (rule "inEqSimp_homoInEq0" (formula "25") (term "0,1"))
                              (rule "polySimp_addComm1" (formula "25") (term "0,0,1"))
                              (rule "inEqSimp_homoInEq0" (formula "25") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "25") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1"))
                              (rule "polySimp_rightDist" (formula "2") (term "1"))
                              (rule "mul_literals" (formula "2") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "0,1"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,0,1"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,0,1"))
                              (rule "mul_literals" (formula "25") (term "0,1,0,1"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,1"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,0,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                              (rule "array2seqDef" (formula "30") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "30"))
                              (rule "narrowSelectArrayType" (formula "30") (term "2,0") (ifseqformula "4") (ifseqformula "29"))
                              (rule "applyEq" (formula "30") (term "0") (ifseqformula "16"))
                              (rule "eqSymm" (formula "30"))
                              (rule "array2seqDef" (formula "10") (term "0,0,1,1,0") (inst "u=u"))
                              (rule "array2seqDef" (formula "16") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "16"))
                              (rule "array2seqDef" (formula "12") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "12"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "16"))
                              (rule "applyEq" (formula "16") (term "1") (ifseqformula "12"))
                              (rule "array2seqDef" (formula "3") (term "1") (inst "u=u"))
                              (rule "applyEq" (formula "3") (term "1") (ifseqformula "16"))
                              (rule "array2seqDef" (formula "13") (term "1,1,0") (inst "u=u"))
                              (rule "applyEq" (formula "13") (term "1,1,0") (ifseqformula "16"))
                              (rule "array2seqDef" (formula "25") (term "1,0") (inst "u=u"))
                              (rule "array2seqDef" (formula "25") (term "1,1") (inst "u=u"))
                              (rule "array2seqDef" (formula "30") (term "1") (inst "u=u"))
                              (rule "eqSymm" (formula "30"))
                              (rule "applyEq" (formula "30") (term "0") (ifseqformula "16"))
                              (rule "eqSymm" (formula "30"))
                              (rule "eqSeqDef" (formula "13") (inst "iv=iv"))
                              (rule "andLeft" (formula "13"))
                              (rule "lenOfSeqDef" (formula "13") (term "1"))
                              (rule "polySimp_elimSub" (formula "13") (term "1,1"))
                              (rule "mul_literals" (formula "13") (term "1,1,1"))
                              (rule "add_zero_right" (formula "13") (term "1,1"))
                              (rule "getOfSeqDef" (formula "14") (term "1,1,0"))
                              (rule "castDel" (formula "14") (term "2,1,1,0"))
                              (rule "castDel" (formula "14") (term "1,1,1,0"))
                              (rule "add_zero_right" (formula "14") (term "0,2,1,1,1,0"))
                              (rule "polySimp_elimSub" (formula "14") (term "1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "14") (term "1,1,1,0,1,1,0"))
                              (rule "add_zero_right" (formula "14") (term "1,1,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                              (rule "polySimp_addComm1" (formula "14") (term "0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1"))
                              (rule "add_zero_right" (formula "13") (term "0,0,1"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,1,1,0"))
                              (rule "applyEq" (formula "14") (term "0,1,0,1,0,0") (ifseqformula "13"))
                              (rule "polySimp_addComm1" (formula "14") (term "0,1,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "0,0,1"))
                              (rule "polySimp_elimOne" (formula "13") (term "0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "14") (term "1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "14") (term "0,1,1,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,1,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0,1,0,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,1,0,0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "0,0,0,1,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                              (rule "equalityToSeqGetAndSeqLenRight" (formula "31") (inst "iv=iv"))
                              (rule "lenOfSeqDefEQ" (formula "31") (term "1,0") (ifseqformula "12"))
                              (rule "eqSymm" (formula "31") (term "0"))
                              (rule "polySimp_elimSub" (formula "31") (term "1,0,0"))
                              (rule "mul_literals" (formula "31") (term "1,1,0,0"))
                              (rule "add_zero_right" (formula "31") (term "1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,1"))
                              (rule "mul_literals" (formula "31") (term "0,1,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,1"))
                              (rule "eqSeqDef2" (formula "17") (inst "iv=iv") (ifseqformula "12"))
                              (rule "andLeft" (formula "17"))
                              (rule "lenOfSeqDef" (formula "17") (term "1"))
                              (rule "polySimp_elimSub" (formula "17") (term "1,1"))
                              (rule "times_zero_2" (formula "17") (term "1,1,1"))
                              (rule "add_zero_right" (formula "17") (term "1,1"))
                              (rule "lenOfSeqDef" (formula "18") (term "1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "18") (term "1,1,1,0,0"))
                              (rule "times_zero_2" (formula "18") (term "1,1,1,1,0,0"))
                              (rule "add_zero_right" (formula "18") (term "1,1,1,0,0"))
                              (rule "getOfSeqDef" (formula "18") (term "1,1,0"))
                              (rule "castDel" (formula "18") (term "2,1,1,0"))
                              (rule "castDel" (formula "18") (term "1,1,1,0"))
                              (rule "add_zero_right" (formula "18") (term "0,2,1,1,1,0"))
                              (rule "polySimp_elimSub" (formula "18") (term "1,1,0,1,1,0"))
                              (rule "times_zero_2" (formula "18") (term "1,1,1,0,1,1,0"))
                              (rule "add_zero_right" (formula "18") (term "1,1,0,1,1,0"))
                              (rule "lenOfSeqDef" (formula "17") (term "0"))
                              (rule "polySimp_elimSub" (formula "17") (term "1,0"))
                              (rule "times_zero_2" (formula "17") (term "1,1,0"))
                              (rule "add_zero_right" (formula "17") (term "1,0"))
                              (rule "getOfSeqDef" (formula "18") (term "0,1,0"))
                              (rule "castDel" (formula "18") (term "1,0,1,0"))
                              (rule "castDel" (formula "18") (term "2,0,1,0"))
                              (rule "add_zero_right" (formula "18") (term "0,2,1,0,1,0"))
                              (rule "polySimp_elimSub" (formula "18") (term "1,1,0,0,1,0"))
                              (rule "times_zero_2" (formula "18") (term "1,1,1,0,0,1,0"))
                              (rule "add_zero_right" (formula "18") (term "1,1,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "17") (term "0,1"))
                              (rule "add_zero_right" (formula "17") (term "0,0,1"))
                              (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "18") (term "0,1,1,0,0"))
                              (rule "add_zero_right" (formula "18") (term "0,0,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0"))
                              (rule "add_zero_right" (formula "17") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1,0"))
                              (rule "applyEq" (formula "18") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "0,0,1"))
                              (rule "polySimp_elimOne" (formula "17") (term "0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "18") (term "1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "18") (term "0,1,1,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,1,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0"))
                              (rule "polySimp_elimOne" (formula "17") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "18") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,0,1,0,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0,1,0,0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "18") (term "0,0,0,1,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                              (rule "eqSeqDef2" (formula "12") (inst "iv=iv") (ifseqformula "3"))
                              (rule "andLeft" (formula "12"))
                              (rule "eqSymm" (formula "12"))
                              (rule "eqSymm" (formula "13") (term "1,0"))
                              (rule "lenOfSeqDef" (formula "13") (term "1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "13") (term "1,1,1,0,0"))
                              (rule "times_zero_2" (formula "13") (term "1,1,1,1,0,0"))
                              (rule "add_zero_right" (formula "13") (term "1,1,1,0,0"))
                              (rule "lenOfSeqDef" (formula "12") (term "1"))
                              (rule "polySimp_elimSub" (formula "12") (term "1,1"))
                              (rule "times_zero_2" (formula "12") (term "1,1,1"))
                              (rule "add_zero_right" (formula "12") (term "1,1"))
                              (rule "lenOfSeqDef" (formula "12") (term "0"))
                              (rule "polySimp_elimSub" (formula "12") (term "1,0"))
                              (rule "times_zero_2" (formula "12") (term "1,1,0"))
                              (rule "add_zero_right" (formula "12") (term "1,0"))
                              (rule "getOfSeqDef" (formula "13") (term "1,1,0"))
                              (rule "castDel" (formula "13") (term "1,1,1,0"))
                              (rule "castDel" (formula "13") (term "2,1,1,0"))
                              (rule "add_zero_right" (formula "13") (term "0,2,1,1,1,0"))
                              (rule "polySimp_elimSub" (formula "13") (term "1,1,0,1,1,0"))
                              (rule "times_zero_2" (formula "13") (term "1,1,1,0,1,1,0"))
                              (rule "add_zero_right" (formula "13") (term "1,1,0,1,1,0"))
                              (rule "getOfSeqDef" (formula "13") (term "0,1,0"))
                              (rule "castDel" (formula "13") (term "2,0,1,0"))
                              (rule "castDel" (formula "13") (term "1,0,1,0"))
                              (rule "add_zero_right" (formula "13") (term "0,2,1,0,1,0"))
                              (rule "polySimp_elimSub" (formula "13") (term "1,1,0,0,1,0"))
                              (rule "times_zero_2" (formula "13") (term "1,1,1,0,0,1,0"))
                              (rule "add_zero_right" (formula "13") (term "1,1,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1,1,0,0"))
                              (rule "add_zero_right" (formula "13") (term "0,0,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "12") (term "0,1"))
                              (rule "add_zero_right" (formula "12") (term "0,0,1"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0"))
                              (rule "add_zero_right" (formula "12") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "12") (term "0,0,1"))
                              (rule "polySimp_elimOne" (formula "12") (term "0,0,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0"))
                              (rule "polySimp_elimOne" (formula "12") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "13") (term "0,1,1,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "13") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,1,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "0,0,1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "13") (term "0,0,1,1,1,0,0"))
                              (rule "eqSeqDef2" (formula "3") (inst "iv=iv") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "true_left" (formula "3"))
                              (rule "pullOutSelect" (formula "27") (term "0,1,1,0") (inst "selectSK=arr_370"))
                              (rule "applyEq" (formula "28") (term "1,2,1,0") (ifseqformula "1"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "pullOutSelect" (formula "12") (term "0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_19"))
                              (rule "applyEq" (formula "14") (term "0,1,1,1,0,0,1,0") (ifseqformula "12"))
                              (rule "applyEq" (formula "13") (term "0,0,0,0") (ifseqformula "12"))
                              (rule "applyEq" (formula "14") (term "1,1,0,1,0") (ifseqformula "12"))
                              (rule "simplifySelectOfAnonEQ" (formula "12") (ifseqformula "23"))
                              (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "32")) (ifInst ""  (formula "5")))
                              (rule "applyEqReverse" (formula "14") (term "0,1,1,1,0,0,1,0") (ifseqformula "12"))
                              (rule "applyEqReverse" (formula "13") (term "0,0,0,0") (ifseqformula "12"))
                              (rule "applyEqReverse" (formula "14") (term "1,1,0,1,0") (ifseqformula "12"))
                              (rule "applyEqReverse" (formula "13") (term "0,1,0") (ifseqformula "12"))
                              (rule "hideAuxiliaryEq" (formula "12"))
                              (rule "nnf_imp2or" (formula "26") (term "0"))
                              (rule "nnf_imp2or" (formula "10") (term "0"))
                              (rule "Contract_axiom_for_ghostFieldsNonNull_in_MixServer" (formula "9") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
                              (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "31")) (ifInst ""  (formula "4")))
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1,0,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1,0,0"))
                              (rule "applyEq" (formula "9") (term "1") (ifseqformula "10"))
                              (builtin "One Step Simplification" (formula "9"))
                              (rule "andLeft" (formula "9"))
                              (rule "andLeft" (formula "9"))
                              (rule "andLeft" (formula "9"))
                              (rule "andLeft" (formula "9"))
                              (rule "andLeft" (formula "9"))
                              (rule "notLeft" (formula "11"))
                              (rule "notLeft" (formula "10"))
                              (rule "andLeft" (formula "9"))
                              (rule "notLeft" (formula "10"))
                              (rule "andLeft" (formula "9"))
                              (rule "notLeft" (formula "10"))
                              (rule "notLeft" (formula "9"))
                              (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "32"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "ifthenelse_negated" (formula "1") (term "0"))
                              (rule "narrowSelectArrayType" (formula "21") (term "1,0,1,0") (ifseqformula "4") (ifseqformula "33"))
                              (rule "narrowSelectArrayType" (formula "17") (term "1,1,1,0") (ifseqformula "4") (ifseqformula "34"))
                              (rule "applyEq" (formula "10") (term "0,1,0,0,1,0,0") (ifseqformula "18"))
                              (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                              (rule "Definition_axiom_for_ghostFieldsNonNull_in_verif_selectvoting_system_core_MixServer" (formula "12") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
                              (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "30")) (ifInst ""  (formula "31")) (ifInst ""  (formula "32")) (ifInst ""  (formula "33")) (ifInst ""  (formula "34")))
                              (rule "andLeft" (formula "12"))
                              (rule "andLeft" (formula "12"))
                              (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                              (rule "applyEq" (formula "14") (term "0,1,0,0,1,0,0") (ifseqformula "21"))
                              (rule "applyEq" (formula "13") (term "0,1,0,0,1,0,0") (ifseqformula "20"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                              (rule "nnf_imp2or" (formula "39") (term "0,1"))
                              (rule "nnf_imp2or" (formula "14") (term "0"))
                              (rule "nnf_notAnd" (formula "28") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
                              (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "28") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                              (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "12") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                              (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                              (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                              (rule "nnf_imp2or" (formula "20") (term "0"))
                              (rule "nnf_imp2or" (formula "16") (term "0"))
                              (rule "nnf_imp2or" (formula "9") (term "0"))
                              (rule "nnf_imp2or" (formula "10") (term "0"))
                              (rule "nnf_imp2or" (formula "11") (term "0"))
                              (rule "nnf_notAnd" (formula "14") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
                              (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "14") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                              (rule "mul_literals" (formula "14") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "39") (term "0,0,1"))
                              (rule "inEqSimp_notGeq" (formula "39") (term "0,0,0,1"))
                              (rule "times_zero_1" (formula "39") (term "1,0,0,0,0,0,1"))
                              (rule "add_zero_right" (formula "39") (term "0,0,0,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "0,0,0,1"))
                              (rule "mul_literals" (formula "39") (term "1,0,0,0,1"))
                              (rule "inEqSimp_notLeq" (formula "39") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "39") (term "1,0,0,1,0,0,1"))
                              (rule "mul_literals" (formula "39") (term "0,1,0,0,1,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "39") (term "0,0,1,0,0,1"))
                              (rule "add_literals" (formula "39") (term "0,0,0,1,0,0,1"))
                              (rule "add_zero_left" (formula "39") (term "0,0,1,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "39") (term "1,1,0,0,1"))
                              (rule "arrayLengthNotNegative" (formula "17") (term "0"))
                              (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
                              (rule "arrayLengthIsAShort" (formula "18") (term "0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "true_left" (formula "18"))
                              (rule "arrayLengthNotNegative" (formula "18") (term "1"))
                              (rule "arrayLengthIsAShort" (formula "18") (term "1"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "true_left" (formula "18"))
                              (rule "arrayLengthIsAShort" (formula "19") (term "0"))
                              (builtin "One Step Simplification" (formula "19"))
                              (rule "true_left" (formula "19"))
                              (rule "arrayLengthNotNegative" (formula "19") (term "0"))
                              (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                              (rule "nnf_notAnd" (formula "21") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                              (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                              (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "16") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                              (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                              (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "9") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
                              (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                              (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "10") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                              (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "11") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                              (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                              (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                              (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "22") (ifseqformula "6"))
                              (rule "andLeft" (formula "22"))
                              (rule "notLeft" (formula "23"))
                              (rule "andLeft" (formula "22"))
                              (rule "andLeft" (formula "22"))
                              (rule "notLeft" (formula "24"))
                              (rule "andLeft" (formula "22"))
                              (rule "notLeft" (formula "24"))
                              (rule "andLeft" (formula "22"))
                              (rule "notLeft" (formula "24"))
                              (rule "andLeft" (formula "22"))
                              (rule "andLeft" (formula "22"))
                              (rule "andLeft" (formula "22"))
                              (rule "notLeft" (formula "22"))
                              (rule "notLeft" (formula "22"))
                              (rule "narrowSelectArrayType" (formula "15") (term "2,0,1,0,0") (ifseqformula "4") (ifseqformula "35"))
                              (rule "narrowSelectArrayType" (formula "16") (term "2,0,1,0,0,1,0") (ifseqformula "4") (ifseqformula "35"))
                              (rule "narrowSelectArrayType" (formula "12") (term "2,0,0,1,1,0") (ifseqformula "4") (ifseqformula "35"))
                              (rule "nonNull" (formula "24") (inst "i=i"))
                              (rule "greater_literals" (formula "24") (term "0,1"))
                              (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "36")))
                              (rule "sub_literals" (formula "24") (term "2,1,0"))
                              (builtin "One Step Simplification" (formula "24"))
                              (rule "narrowSelectArrayType" (formula "24") (term "0,0,1,0") (ifseqformula "4") (ifseqformula "36"))
                              (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                              (rule "nonNull" (formula "23") (inst "i=i"))
                              (rule "greater_literals" (formula "23") (term "0,1"))
                              (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "37")))
                              (rule "sub_literals" (formula "23") (term "2,1,0"))
                              (builtin "One Step Simplification" (formula "23"))
                              (rule "narrowSelectArrayType" (formula "23") (term "0,0,1,0") (ifseqformula "4") (ifseqformula "37"))
                              (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                              (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0") (ifseqformula "18"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                              (rule "nonNull" (formula "22") (inst "i=i"))
                              (rule "greater_literals" (formula "22") (term "0,1"))
                              (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "38")))
                              (rule "sub_literals" (formula "22") (term "2,1,0"))
                              (builtin "One Step Simplification" (formula "22"))
                              (rule "narrowSelectArrayType" (formula "22") (term "0,0,1,0") (ifseqformula "4") (ifseqformula "38"))
                              (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                              (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                              (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "30") (ifseqformula "6"))
                              (rule "replaceKnownSelect_taclet1001000020_0" (formula "30") (term "1,1,0,0,0,0,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet1001000020_1" (formula "30") (term "1,1,0,0,0,0,0,0"))
                              (rule "replaceKnownSelect_taclet1001000020_3" (formula "30") (term "0,0,1,0,0,0,0,0,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet1001000020_4" (formula "30") (term "0,0,1,0,0,0,0,0,0,0"))
                              (rule "andLeft" (formula "30"))
                              (rule "notLeft" (formula "31"))
                              (rule "andLeft" (formula "30"))
                              (rule "andLeft" (formula "30"))
                              (rule "notLeft" (formula "32"))
                              (rule "notLeft" (formula "31"))
                              (rule "andLeft" (formula "30"))
                              (rule "notLeft" (formula "31"))
                              (rule "andLeft" (formula "30"))
                              (rule "andLeft" (formula "30"))
                              (rule "andLeft" (formula "30"))
                              (rule "andLeft" (formula "30"))
                              (rule "notLeft" (formula "31"))
                              (rule "notLeft" (formula "30"))
                              (rule "nonNull" (formula "32") (inst "i=i"))
                              (rule "sub_literals" (formula "32") (term "2,1,0,1,1"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "greater_literals" (formula "32") (term "0,1"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "andLeft" (formula "32"))
                              (rule "notLeft" (formula "32"))
                              (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "32") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0"))
                              (rule "nonNull" (formula "31") (inst "i=i"))
                              (rule "greater_literals" (formula "31") (term "0,1"))
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "sub_literals" (formula "31") (term "2,1,0,1"))
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "andLeft" (formula "31"))
                              (rule "notLeft" (formula "31"))
                              (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "31") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0"))
                              (rule "nonNull" (formula "30") (inst "i=i"))
                              (rule "sub_literals" (formula "30") (term "2,1,0,1,1"))
                              (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "47")))
                              (rule "greater_literals" (formula "30") (term "0"))
                              (builtin "One Step Simplification" (formula "30"))
                              (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0"))
                              (rule "applyEq" (formula "30") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "30") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0"))
                              (rule "pullOutSelect" (formula "40") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_18"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")) (ifInst ""  (formula "6")))
                              (rule "applyEqReverse" (formula "41") (term "0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "pullOutSelect" (formula "39") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_18"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")) (ifInst ""  (formula "6")))
                              (rule "applyEqReverse" (formula "40") (term "0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "pullOutSelect" (formula "38") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_18"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "52")) (ifInst ""  (formula "6")))
                              (rule "applyEqReverse" (formula "39") (term "0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "pullOutSelect" (formula "37") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_18"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "51")) (ifInst ""  (formula "6")))
                              (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "pullOutSelect" (formula "36") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_18"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "50")) (ifInst ""  (formula "6")))
                              (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "pullOutSelect" (formula "32") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_19"))
                              (rule "applyEq" (formula "33") (term "0,1,1,1,0,0") (ifseqformula "32"))
                              (rule "applyEq" (formula "36") (term "0") (ifseqformula "32"))
                              (rule "simplifySelectOfAnonEQ" (formula "32") (ifseqformula "26"))
                              (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "49")) (ifInst ""  (formula "5")))
                              (rule "applyEqReverse" (formula "33") (term "1,0,0,1,0") (ifseqformula "32"))
                              (rule "applyEqReverse" (formula "33") (term "0,1,1,1,0,0") (ifseqformula "32"))
                              (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "32"))
                              (rule "hideAuxiliaryEq" (formula "32"))
                              (rule "pullOutSelect" (formula "31") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_20"))
                              (rule "applyEq" (formula "32") (term "0,1,1,1,0,0") (ifseqformula "31"))
                              (rule "applyEq" (formula "35") (term "0") (ifseqformula "31"))
                              (rule "simplifySelectOfAnonEQ" (formula "31") (ifseqformula "26"))
                              (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "48")) (ifInst ""  (formula "5")))
                              (rule "applyEqReverse" (formula "32") (term "0,1,1,1,0,0") (ifseqformula "31"))
                              (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "31"))
                              (rule "applyEqReverse" (formula "32") (term "1,0,0,1,0") (ifseqformula "31"))
                              (rule "hideAuxiliaryEq" (formula "31"))
                              (rule "applyEq" (formula "31") (term "1,1,1,0,0") (ifseqformula "18"))
                              (rule "ifthenelse_split" (formula "3") (term "0"))
                              (branch "self.chosen.length ≥ 1 TRUE"
                                 (rule "replace_known_left" (formula "44") (term "0,1") (ifseqformula "4"))
                                 (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "4")))
                                 (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "3"))
                                 (rule "leq_literals" (formula "18") (term "0"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "true_left" (formula "18"))
                                 (rule "equalityToSeqGetAndSeqLenRight" (formula "43") (inst "iv=iv"))
                                 (rule "lenOfSeqDef" (formula "43") (term "0,0"))
                                 (rule "eqSymm" (formula "43") (term "0"))
                                 (rule "polySimp_elimSub" (formula "43") (term "1,1,0"))
                                 (rule "times_zero_2" (formula "43") (term "1,1,1,0"))
                                 (rule "add_zero_right" (formula "43") (term "1,1,0"))
                                 (rule "getOfSeqDef" (formula "43") (term "1,1,0,1"))
                                 (rule "castDel" (formula "43") (term "1,1,1,0,1"))
                                 (rule "castDel" (formula "43") (term "2,1,1,0,1"))
                                 (rule "add_zero_right" (formula "43") (term "0,2,1,1,1,0,1"))
                                 (rule "polySimp_elimSub" (formula "43") (term "1,1,0,1,1,0,1"))
                                 (rule "times_zero_2" (formula "43") (term "1,1,1,0,1,1,0,1"))
                                 (rule "add_zero_right" (formula "43") (term "1,1,0,1,1,0,1"))
                                 (rule "getOfSeqDef" (formula "43") (term "0,1,0,1"))
                                 (rule "castDel" (formula "43") (term "1,0,1,0,1"))
                                 (rule "castDel" (formula "43") (term "2,0,1,0,1"))
                                 (rule "add_zero_right" (formula "43") (term "0,2,1,0,1,0,1"))
                                 (rule "eqSymm" (formula "43") (term "1,0,1"))
                                 (rule "polySimp_elimSub" (formula "43") (term "1,1,0,1,1,0,1"))
                                 (rule "mul_literals" (formula "43") (term "1,1,1,0,1,1,0,1"))
                                 (rule "add_zero_right" (formula "43") (term "1,1,0,1,1,0,1"))
                                 (rule "lenOfSeqDef" (formula "43") (term "1,1,0,0,1"))
                                 (rule "polySimp_elimSub" (formula "43") (term "1,1,1,0,0,1"))
                                 (rule "times_zero_2" (formula "43") (term "1,1,1,1,0,0,1"))
                                 (rule "add_zero_right" (formula "43") (term "1,1,1,0,0,1"))
                                 (rule "lenOfSeqDef" (formula "43") (term "0,0"))
                                 (rule "polySimp_elimSub" (formula "43") (term "1,0,0"))
                                 (rule "times_zero_2" (formula "43") (term "1,1,0,0"))
                                 (rule "add_zero_right" (formula "43") (term "1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "43") (term "0,1,0"))
                                 (rule "add_zero_right" (formula "43") (term "0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "43") (term "1,0,0,1,0,1"))
                                 (rule "eqSymm" (formula "43") (term "1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,1,0,1,1,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "43") (term "0,1,1,0,0,1"))
                                 (rule "add_zero_right" (formula "43") (term "0,0,1,1,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,1,1,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "43") (term "0,0,0"))
                                 (rule "add_zero_right" (formula "43") (term "0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "43") (term "1,0,0,1,0,1"))
                                 (rule "eqSymm" (formula "43") (term "1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,1,0,1,1,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "43") (term "1,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,1,0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "43") (term "0,0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "43") (term "0,0,0,1,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "43") (term "0,0,1,1,0,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "43") (term "0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "43") (term "0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "43") (term "0,0,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "43") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "43") (term "0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "43") (term "0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,0,0,1,0,1"))
                                 (rule "eqSymm" (formula "43") (term "1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "43") (term "1,1,0,1,1,0,1"))
                                 (rule "polySimp_rightDist" (formula "43") (term "1,1,0,1,1,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1,0,1,1,0,1"))
                                 (rule "mul_literals" (formula "43") (term "0,1,1,0,1,1,0,1"))
                                 (rule "polySimp_elimOne" (formula "43") (term "1,1,1,0,1,1,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "43") (term "1,1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "43") (term "1,1,0,0,1"))
                                 (rule "mul_literals" (formula "43") (term "0,1,1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "43") (term "1,1,1,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,0,0,1,0,1"))
                                 (rule "eqSymm" (formula "43") (term "1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "43") (term "1,1,0,1,1,0,1"))
                                 (rule "polySimp_rightDist" (formula "43") (term "1,1,0,1,1,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1,0,1,1,0,1"))
                                 (rule "mul_literals" (formula "43") (term "0,1,1,0,1,1,0,1"))
                                 (rule "polySimp_elimOne" (formula "43") (term "1,1,1,0,1,1,0,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "43") (term "0,1,1,1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "43") (term "0,0,1,1,1,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "43") (term "0,0,1,1,1,0,0,1"))
                                 (rule "nnf_imp2or" (formula "24") (term "0"))
                                 (rule "nnf_imp2or" (formula "23") (term "0"))
                                 (rule "equalityToSeqGetAndSeqLenLeft" (formula "29") (inst "iv=iv"))
                                 (rule "andLeft" (formula "29"))
                                 (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0"))
                                 (rule "applyEq" (formula "30") (term "0,0,1,0") (ifseqformula "31"))
                                 (builtin "One Step Simplification" (formula "30"))
                                 (rule "true_left" (formula "30"))
                                 (rule "applyEq" (formula "29") (term "0,0") (ifseqformula "30"))
                                 (builtin "One Step Simplification" (formula "29"))
                                 (rule "true_left" (formula "29"))
                                 (rule "nnf_imp2or" (formula "22") (term "0"))
                                 (rule "ifthenelse_split" (formula "16") (term "1"))
                                 (branch "self.unsigned.length ≥ 1 TRUE"
                                    (rule "replace_known_left" (formula "18") (term "0,1,1,0,0") (ifseqformula "16"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "ifthenelse_split" (formula "49") (term "0,0"))
                                    (branch "msg.length ≥ 0 TRUE"
                                       (rule "eqSymm" (formula "50") (term "0"))
                                       (rule "commute_or_2" (formula "35") (term "0"))
                                       (rule "arrayLengthIsAShort" (formula "18") (term "1,0,0,0"))
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "true_left" (formula "18"))
                                       (rule "arrayLengthNotNegative" (formula "18") (term "1,0,0,0"))
                                       (rule "arrayLengthNotNegative" (formula "19") (term "1,0,1,0,0"))
                                       (rule "arrayLengthIsAShort" (formula "20") (term "1,0,1,0,0"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "true_left" (formula "20"))
                                       (rule "nnf_imp2or" (formula "34") (term "0"))
                                       (rule "commute_or_2" (formula "16") (term "0"))
                                       (rule "ifthenelse_split" (formula "24") (term "1"))
                                       (branch "msg.length ≥ 1 TRUE"
                                          (rule "replace_known_left" (formula "16") (term "0,1,1,0") (ifseqformula "24"))
                                          (builtin "One Step Simplification" (formula "16"))
                                          (rule "replace_known_left" (formula "26") (term "0,1,1,0,0") (ifseqformula "24"))
                                          (builtin "One Step Simplification" (formula "26"))
                                          (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "24"))
                                          (rule "leq_literals" (formula "1") (term "0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "nnf_imp2or" (formula "36") (term "0"))
                                          (rule "ifthenelse_split" (formula "24") (term "0"))
                                          (branch "self.concatenated.length ≥ 1 TRUE"
                                             (rule "applyEq" (formula "24") (term "0") (ifseqformula "25"))
                                             (rule "applyEq" (formula "25") (term "1,1,1,0,0,1,0") (ifseqformula "24"))
                                             (rule "applyEq" (formula "15") (term "1,1,1,0,0,1,0,0") (ifseqformula "24"))
                                             (rule "nnf_imp2or" (formula "35") (term "0"))
                                             (rule "commute_or_2" (formula "10") (term "0"))
                                             (rule "commute_or_2" (formula "11") (term "0"))
                                             (rule "commute_or_2" (formula "12") (term "0"))
                                             (rule "nnf_imp2or" (formula "47") (term "0,1"))
                                             (rule "nnf_notAnd" (formula "28") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "28") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                                             (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "27") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "27") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                                             (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                                             (rule "commute_or_2" (formula "13") (term "0"))
                                             (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "26") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                             (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "34") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "34") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "34") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "34") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "34") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                                             (rule "mul_literals" (formula "34") (term "1,0,0,0"))
                                             (rule "ifthenelse_split" (formula "1") (term "0"))
                                             (branch "self.sorted.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "48") (term "0,1,1,1,1,0,0,0,1") (ifseqformula "2"))
                                                (rule "applyEqReverse" (formula "48") (term "0,0,0,1,0") (ifseqformula "2"))
                                                (rule "applyEqReverse" (formula "48") (term "0,1,1,0") (ifseqformula "2"))
                                                (builtin "One Step Simplification" (formula "48"))
                                                (rule "allRight" (formula "48") (inst "sk=iv_33"))
                                                (rule "orRight" (formula "48"))
                                                (rule "notRight" (formula "48"))
                                                (rule "andLeft" (formula "1"))
                                                (rule "applyEqReverse" (formula "50") (term "1,1,1") (ifseqformula "4"))
                                                (rule "applyEqReverse" (formula "50") (term "0,1,1,1,0,1") (ifseqformula "4"))
                                                (rule "applyEqReverse" (formula "2") (term "0,0,0,1,1") (ifseqformula "4"))
                                                (rule "hideAuxiliaryEq" (formula "4"))
                                                (rule "eqSymm" (formula "49"))
                                                (rule "replace_known_left" (formula "49") (term "0,0,1") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "1")))
                                                (rule "inEqSimp_homoInEq0" (formula "2"))
                                                (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                (rule "inEqSimp_homoInEq0" (formula "49") (term "0,1"))
                                                (rule "polySimp_addComm1" (formula "49") (term "0,0,1"))
                                                (rule "inEqSimp_homoInEq0" (formula "49") (term "0,0"))
                                                (rule "polySimp_addComm1" (formula "49") (term "0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                (rule "mul_literals" (formula "2") (term "0,1"))
                                                (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "49") (term "0,1"))
                                                (rule "polySimp_mulComm0" (formula "49") (term "1,0,1"))
                                                (rule "polySimp_rightDist" (formula "49") (term "1,0,1"))
                                                (rule "mul_literals" (formula "49") (term "0,1,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "49") (term "1,1,0,1"))
                                                (rule "polySimp_elimOne" (formula "49") (term "1,1,0,1"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "49") (term "0,0"))
                                                (rule "polySimp_mulComm0" (formula "49") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "49") (term "1,0,0"))
                                                (rule "mul_literals" (formula "49") (term "0,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "49") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "49") (term "1,1,0,0"))
                                                (rule "pullOutSelect" (formula "49") (term "1,0") (inst "selectSK=arr_376"))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "33"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "eqSymm" (formula "50"))
                                                (rule "nnf_notAnd" (formula "39") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "39") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "39") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "39") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "39") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "39") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "39") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "39") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "39") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "39") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "39") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "0,0,0"))
                                                (rule "mul_literals" (formula "39") (term "1,0,0,0"))
                                                (rule "nnf_notAnd" (formula "38") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "38") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "38") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0"))
                                                (rule "mul_literals" (formula "38") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "38") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0"))
                                                (rule "mul_literals" (formula "38") (term "1,0,0,0"))
                                                (rule "lenNonNegative" (formula "55") (term "1,1,0,0,1"))
                                                (rule "inEqSimp_commuteLeq" (formula "1"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "1,0") (ifseqformula "9"))
                                                (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "49"))
                                                (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "5")))
                                                (rule "true_left" (formula "18"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "1,1") (ifseqformula "9"))
                                                (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "48"))
                                                (builtin "One Step Simplification" (formula "18"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "26") (term "0,1") (ifseqformula "9"))
                                                (rule "replace_known_right" (formula "26") (term "0") (ifseqformula "48"))
                                                (builtin "One Step Simplification" (formula "26"))
                                                (rule "commute_or_2" (formula "25") (term "0"))
                                                (rule "commute_or" (formula "43") (term "0,0"))
                                                (rule "commute_or_2" (formula "31") (term "0"))
                                                (rule "commute_or" (formula "20") (term "0,0"))
                                                (rule "commute_or_2" (formula "34") (term "0"))
                                                (rule "commute_or" (formula "14") (term "0,0"))
                                                (rule "commute_or" (formula "15") (term "0,0"))
                                                (rule "commute_or" (formula "16") (term "0,0"))
                                                (rule "commute_or_2" (formula "33") (term "0"))
                                                (rule "lenNonNegative" (formula "24") (term "0"))
                                                (rule "inEqSimp_commuteLeq" (formula "24"))
                                                (rule "applyEq" (formula "24") (term "0") (ifseqformula "25"))
                                                (rule "inEqSimp_subsumption1" (formula "24") (ifseqformula "21"))
                                                (rule "leq_literals" (formula "24") (term "0"))
                                                (builtin "One Step Simplification" (formula "24"))
                                                (rule "true_left" (formula "24"))
                                                (rule "commute_or_2" (formula "32") (term "0"))
                                                (rule "commute_or" (formula "17") (term "0,0"))
                                                (rule "commute_or_2" (formula "39") (term "0"))
                                                (rule "commute_or_2" (formula "41") (term "0"))
                                                (rule "commute_or_2" (formula "40") (term "0"))
                                                (rule "commute_or" (formula "25") (term "0,0"))
                                                (rule "commute_or" (formula "31") (term "0,0"))
                                                (rule "commute_or" (formula "33") (term "0,0"))
                                                (rule "commute_or" (formula "32") (term "0,0"))
                                                (rule "commute_or" (formula "37") (term "0,0"))
                                                (rule "commute_or" (formula "39") (term "0,0"))
                                                (rule "commute_or" (formula "38") (term "0,0"))
                                                (rule "ifthenelse_to_or_left" (formula "20") (term "0,0,0"))
                                                (rule "eqSymm" (formula "20") (term "1,0,0,0,0"))
                                                (rule "eqSymm" (formula "20") (term "1,1,0,0,0"))
                                                (builtin "One Step Simplification" (formula "20"))
                                                (rule "nnf_notAnd" (formula "20") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "20") (term "0,0,0,0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,0,0,0"))
                                                (rule "add_zero_left" (formula "20") (term "0,0,1,0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,0,0"))
                                                (rule "nnf_notAnd" (formula "20") (term "0,1,1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "20") (term "1,0,1,1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,1,1,0,0,0"))
                                                (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,1,1,0,0,0"))
                                                (rule "add_literals" (formula "20") (term "0,0,0,1,0,1,1,0,0,0"))
                                                (rule "add_zero_left" (formula "20") (term "0,0,1,0,1,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,1,1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,1,1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "20") (term "1,1,0,1,1,0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "20") (term "0,0,1,1,0,0,0"))
                                                (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,1,1,0,0,0"))
                                                (rule "add_zero_right" (formula "20") (term "0,0,0,0,1,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,1,1,0,0,0"))
                                                (rule "mul_literals" (formula "20") (term "1,0,0,1,1,0,0,0"))
                                                (rule "commute_or" (formula "20") (term "0,0"))
                                                (rule "commute_or_2" (formula "20") (term "0"))
                                                (rule "commute_or_2" (formula "20") (term "0,1,0"))
                                                (rule "commute_or" (formula "20") (term "1,1,0"))
                                                (rule "commute_or" (formula "20") (term "0,0,1,0"))
                                                (rule "commute_or_2" (formula "20") (term "0,1,1,0"))
                                                (rule "commute_or" (formula "20") (term "0,0,1,1,0"))
                                                (rule "arrayLengthNotNegative" (formula "21") (term "0"))
                                                (rule "inEqSimp_subsumption1" (formula "21") (ifseqformula "22"))
                                                (rule "leq_literals" (formula "21") (term "0"))
                                                (builtin "One Step Simplification" (formula "21"))
                                                (rule "true_left" (formula "21"))
                                                (rule "arrayLengthIsAShort" (formula "24") (term "1"))
                                                (builtin "One Step Simplification" (formula "24"))
                                                (rule "true_left" (formula "24"))
                                                (rule "arrayLengthNotNegative" (formula "55") (term "1,0"))
                                                (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "30"))
                                                (rule "leq_literals" (formula "1") (term "0"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "true_left" (formula "1"))
                                                (rule "arrayLengthIsAShort" (formula "55") (term "1,0"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "true_left" (formula "1"))
                                                (rule "cut_direct" (formula "55") (term "0"))
                                                (branch "CUT: mConcat(int2seq(self.chosen.length), arrConcat(0, array2seq2d(heapAfter_splidAndCheck, result_0))).length = msg.length TRUE"
                                                   (builtin "One Step Simplification" (formula "56"))
                                                   (rule "allRight" (formula "56") (inst "sk=iv_34"))
                                                   (rule "orRight" (formula "56"))
                                                   (rule "orRight" (formula "56"))
                                                   (rule "inEqSimp_geqRight" (formula "57"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                   (rule "inEqSimp_leqRight" (formula "57"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "3"))
                                                   (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                                   (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                   (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "32"))
                                                   (rule "leq_literals" (formula "4") (term "0"))
                                                   (builtin "One Step Simplification" (formula "4"))
                                                   (rule "true_left" (formula "4"))
                                                   (rule "arrayLengthNotNegative" (formula "42") (term "1,1,0"))
                                                   (rule "arrayLengthIsAShort" (formula "43") (term "1,1,0"))
                                                   (builtin "One Step Simplification" (formula "43"))
                                                   (rule "true_left" (formula "43"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "26") (term "0,1,0,1,0,0") (ifseqformula "11"))
                                                   (rule "replace_known_right" (formula "26") (term "0") (ifseqformula "48"))
                                                   (builtin "One Step Simplification" (formula "26"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "27") (term "0,1,0,0,0") (ifseqformula "11"))
                                                   (rule "cnf_rightDist" (formula "22") (term "1,1,0"))
                                                   (rule "ifthenelse_to_or_right" (formula "29") (term "0,0,0"))
                                                   (rule "nnf_notAnd" (formula "29") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                                   (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0,0,0"))
                                                   (rule "add_zero_left" (formula "29") (term "0,0,1,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "29") (term "0,0,0,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0"))
                                                   (rule "commute_or" (formula "29") (term "0,0"))
                                                   (rule "commute_or_2" (formula "29") (term "0"))
                                                   (rule "ifthenelse_to_or_right" (formula "35") (term "0,0,0"))
                                                   (builtin "One Step Simplification" (formula "35"))
                                                   (rule "nnf_notAnd" (formula "35") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "35") (term "1,0,0,0,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "35") (term "0,0,0,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "35") (term "1,0,0,0,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,0,0,0"))
                                                   (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,0,0,0"))
                                                   (rule "add_zero_left" (formula "35") (term "0,0,1,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,0,0,0"))
                                                   (rule "nnf_notAnd" (formula "35") (term "0,1,1,0,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "35") (term "0,0,1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "35") (term "1,0,0,0,0,1,1,0,0,0"))
                                                   (rule "add_zero_right" (formula "35") (term "0,0,0,0,1,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "35") (term "1,0,0,1,1,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "35") (term "1,0,1,1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,1,1,0,0,0"))
                                                   (rule "add_literals" (formula "35") (term "0,0,0,1,0,1,1,0,0,0"))
                                                   (rule "add_zero_left" (formula "35") (term "0,0,1,0,1,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,1,1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,1,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "35") (term "1,1,0,1,1,0,0,0"))
                                                   (rule "commute_or_2" (formula "29") (term "0,1,0"))
                                                   (rule "commute_or" (formula "29") (term "1,1,0"))
                                                   (rule "commute_or_2" (formula "22") (term "0,1,1,0"))
                                                   (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0,0,1,1,0"))
                                                   (rule "add_literals" (formula "22") (term "1,1,0,0,1,1,0"))
                                                   (rule "qeq_literals" (formula "22") (term "1,0,0,1,1,0"))
                                                   (builtin "One Step Simplification" (formula "22"))
                                                   (rule "arrayLengthIsAShort" (formula "34") (term "0"))
                                                   (builtin "One Step Simplification" (formula "34"))
                                                   (rule "true_left" (formula "34"))
                                                   (rule "arrayLengthNotNegative" (formula "34") (term "0"))
                                                   (rule "applyEq" (formula "34") (term "0") (ifseqformula "35"))
                                                   (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "33"))
                                                   (rule "leq_literals" (formula "34") (term "0"))
                                                   (builtin "One Step Simplification" (formula "34"))
                                                   (rule "true_left" (formula "34"))
                                                   (rule "commute_or" (formula "35") (term "0,0"))
                                                   (rule "commute_or_2" (formula "35") (term "0"))
                                                   (rule "ifthenelse_split" (formula "6") (term "0"))
                                                   (branch "self.sorted[iv_22].length ≥ 1 TRUE"
                                                      (rule "replace_known_left" (formula "56") (term "0,0") (ifseqformula "7"))
                                                      (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "7")))
                                                      (rule "ifthenelse_split" (formula "4") (term "0"))
                                                      (branch " ¬self.sorted[iv_22] = null ∧ ¬self.sorted[iv_22].<created> = TRUE TRUE"
                                                         (rule "andLeft" (formula "4"))
                                                         (rule "notLeft" (formula "5"))
                                                         (rule "notLeft" (formula "4"))
                                                         (rule "referencedObjectIsCreatedRight" (formula "48") (ifseqformula "47"))
                                                         (rule "close" (formula "48") (ifseqformula "12"))
                                                      )
                                                      (branch " ¬self.sorted[iv_22] = null ∧ ¬self.sorted[iv_22].<created> = TRUE FALSE"
                                                         (rule "close" (formula "57") (ifseqformula "4"))
                                                      )
                                                   )
                                                   (branch "self.sorted[iv_22].length ≥ 1 FALSE"
                                                      (rule "inEqSimp_geqRight" (formula "46"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "inEqSimp_homoInEq1" (formula "7"))
                                                      (rule "times_zero_2" (formula "7") (term "1,0"))
                                                      (rule "add_zero_right" (formula "7") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "7"))
                                                      (rule "mul_literals" (formula "7") (term "1"))
                                                      (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "7"))
                                                      (rule "qeq_literals" (formula "6") (term "0"))
                                                      (builtin "One Step Simplification" (formula "6"))
                                                      (rule "closeFalse" (formula "6"))
                                                   )
                                                )
                                                (branch "CUT: mConcat(int2seq(self.chosen.length), arrConcat(0, array2seq2d(heapAfter_splidAndCheck, result_0))).length = msg.length FALSE"
                                                   (builtin "One Step Simplification" (formula "56"))
                                                   (rule "false_right" (formula "56"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "1,2,0,0,0") (ifseqformula "9"))
                                                   (rule "arrayLengthNotNegative" (formula "41") (term "1,1,0"))
                                                   (rule "arrayLengthIsAShort" (formula "42") (term "1,1,0"))
                                                   (builtin "One Step Simplification" (formula "42"))
                                                   (rule "true_left" (formula "42"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "25") (term "0,1,0,1,0,0") (ifseqformula "9"))
                                                   (rule "replace_known_right" (formula "25") (term "0") (ifseqformula "47"))
                                                   (builtin "One Step Simplification" (formula "25"))
                                                   (rule "cnf_rightDist" (formula "20") (term "1,1,0"))
                                                   (rule "commute_or_2" (formula "20") (term "0,1,1,0"))
                                                   (rule "inEqSimp_or_tautInEq1" (formula "20") (term "0,0,1,1,0"))
                                                   (rule "add_literals" (formula "20") (term "1,1,0,0,1,1,0"))
                                                   (rule "qeq_literals" (formula "20") (term "1,0,0,1,1,0"))
                                                   (builtin "One Step Simplification" (formula "20"))
                                                   (rule "ifthenelse_to_or_right" (formula "27") (term "0,0,0"))
                                                   (rule "nnf_notAnd" (formula "27") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "27") (term "0,0,0,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,0,0,0"))
                                                   (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,0,0,0"))
                                                   (rule "add_zero_left" (formula "27") (term "0,0,1,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0,0,0"))
                                                   (rule "commute_or" (formula "27") (term "0,0"))
                                                   (rule "commute_or_2" (formula "27") (term "0"))
                                                   (rule "commute_or" (formula "27") (term "1,1,0"))
                                                   (rule "commute_or_2" (formula "27") (term "0,1,0"))
                                                   (rule "shift_paren_or" (formula "20") (term "1,1,0"))
                                                   (rule "ifthenelse_to_or_right" (formula "33") (term "0,0,0"))
                                                   (builtin "One Step Simplification" (formula "33"))
                                                   (rule "nnf_notAnd" (formula "33") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0,0,0,0"))
                                                   (rule "add_literals" (formula "33") (term "0,0,0,1,0,0,0,0,0"))
                                                   (rule "add_zero_left" (formula "33") (term "0,0,1,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0,0,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "33") (term "0,0,0,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0,0"))
                                                   (rule "nnf_notAnd" (formula "33") (term "0,1,1,0,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "33") (term "0,0,1,1,0,0,0"))
                                                   (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,1,1,0,0,0"))
                                                   (rule "add_zero_right" (formula "33") (term "0,0,0,0,1,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "33") (term "1,0,0,1,1,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "33") (term "1,0,1,1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,1,1,0,0,0"))
                                                   (rule "add_literals" (formula "33") (term "0,0,0,1,0,1,1,0,0,0"))
                                                   (rule "add_zero_left" (formula "33") (term "0,0,1,0,1,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,1,1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,1,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "33") (term "1,1,0,1,1,0,0,0"))
                                                   (rule "arrayLengthIsAShort" (formula "32") (term "0"))
                                                   (builtin "One Step Simplification" (formula "32"))
                                                   (rule "true_left" (formula "32"))
                                                   (rule "commute_or" (formula "33") (term "0,0"))
                                                   (rule "commute_or_2" (formula "33") (term "0"))
                                                   (rule "arrayLengthNotNegative" (formula "32") (term "0"))
                                                   (rule "applyEq" (formula "32") (term "0") (ifseqformula "33"))
                                                   (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "31"))
                                                   (rule "leq_literals" (formula "32") (term "0"))
                                                   (builtin "One Step Simplification" (formula "32"))
                                                   (rule "true_left" (formula "32"))
                                                   (rule "commute_or" (formula "27") (term "0,0,1,0"))
                                                   (rule "commute_or" (formula "20") (term "0,1,1,0"))
                                                   (rule "inEqSimp_or_tautInEq1" (formula "20") (term "1,1,0"))
                                                   (rule "inEqSimp_homoInEq1" (formula "20") (term "1,1,1,0"))
                                                   (rule "polySimp_pullOutFactor1" (formula "20") (term "0,1,1,1,0"))
                                                   (rule "add_literals" (formula "20") (term "1,0,1,1,1,0"))
                                                   (rule "times_zero_1" (formula "20") (term "0,1,1,1,0"))
                                                   (rule "leq_literals" (formula "20") (term "1,1,1,0"))
                                                   (builtin "One Step Simplification" (formula "20"))
                                                   (rule "ifthenelse_split" (formula "4") (term "0"))
                                                   (branch "self.sorted[iv_22].length ≥ 1 TRUE"
                                                      (rule "replace_known_left" (formula "54") (term "0,0") (ifseqformula "5"))
                                                      (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "5")))
                                                      (rule "shift_paren_or" (formula "21") (term "0"))
                                                      (rule "commute_or_2" (formula "21") (term "0,0"))
                                                      (builtin "One Step Simplification" (formula "21"))
                                                      (rule "commute_or" (formula "34") (term "1,1,0"))
                                                      (rule "commute_or_2" (formula "34") (term "0,1,0"))
                                                      (rule "cnf_rightDist" (formula "28") (term "1,1,0"))
                                                      (rule "ifthenelse_split" (formula "2") (term "0"))
                                                      (branch " ¬self.sorted[iv_22] = null ∧ ¬self.sorted[iv_22].<created> = TRUE TRUE"
                                                         (rule "andLeft" (formula "2"))
                                                         (rule "notLeft" (formula "3"))
                                                         (rule "notLeft" (formula "2"))
                                                         (rule "referencedObjectIsCreatedRight" (formula "46") (ifseqformula "45"))
                                                         (rule "close" (formula "46") (ifseqformula "10"))
                                                      )
                                                      (branch " ¬self.sorted[iv_22] = null ∧ ¬self.sorted[iv_22].<created> = TRUE FALSE"
                                                         (rule "close" (formula "55") (ifseqformula "2"))
                                                      )
                                                   )
                                                   (branch "self.sorted[iv_22].length ≥ 1 FALSE"
                                                      (rule "inEqSimp_geqRight" (formula "44"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "inEqSimp_homoInEq1" (formula "5"))
                                                      (rule "mul_literals" (formula "5") (term "1,0"))
                                                      (rule "add_zero_right" (formula "5") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                                      (rule "mul_literals" (formula "5") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "4"))
                                                      (rule "qeq_literals" (formula "5") (term "0"))
                                                      (builtin "One Step Simplification" (formula "5"))
                                                      (rule "closeFalse" (formula "5"))
                                                   )
                                                )
                                             )
                                             (branch "self.sorted.<created> = TRUE FALSE"
                                                (rule "referencedObjectIsCreatedRight" (formula "38") (ifseqformula "45"))
                                                (rule "close" (formula "38") (ifseqformula "5"))
                                             )
                                          )
                                          (branch "self.concatenated.length ≥ 1 FALSE"
                                             (rule "eqSymm" (formula "24"))
                                             (rule "inEqSimp_geqRight" (formula "38"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "applyEq" (formula "16") (term "1,1,0") (ifseqformula "25"))
                                             (rule "applyEq" (formula "24") (term "0") (ifseqformula "25"))
                                             (rule "qeq_literals" (formula "24"))
                                             (rule "closeFalse" (formula "24"))
                                          )
                                       )
                                       (branch "msg.length ≥ 1 FALSE"
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "replace_known_right" (formula "16") (term "0,1,1,0") (ifseqformula "38"))
                                          (builtin "One Step Simplification" (formula "16"))
                                          (rule "replace_known_right" (formula "25") (term "0,1,1,0,0") (ifseqformula "38"))
                                          (builtin "One Step Simplification" (formula "25"))
                                          (rule "inEqSimp_geqRight" (formula "38"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_antiSymm" (formula "2") (ifseqformula "1"))
                                          (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                                          (rule "leq_literals" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "applyEq" (formula "25") (term "1,1,1,0,1,1,0") (ifseqformula "1"))
                                          (rule "add_literals" (formula "25") (term "1,1,0,1,1,0"))
                                          (rule "applyEq" (formula "16") (term "1,1,1,0,1,1,0,0") (ifseqformula "1"))
                                          (rule "add_literals" (formula "16") (term "1,1,0,1,1,0,0"))
                                          (rule "applyEq" (formula "52") (term "1,0") (ifseqformula "1"))
                                          (rule "inEqSimp_notGeq" (formula "24") (term "0"))
                                          (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                          (rule "add_literals" (formula "24") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "24") (term "0,0"))
                                          (rule "inEqSimp_or_tautInEq0" (formula "25") (term "0,0"))
                                          (rule "add_literals" (formula "25") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "25") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "25"))
                                          (rule "true_left" (formula "25"))
                                          (rule "nnf_imp2or" (formula "35") (term "0"))
                                          (rule "nnf_imp2or" (formula "34") (term "0"))
                                          (rule "commute_or_2" (formula "11") (term "0"))
                                          (rule "commute_or_2" (formula "12") (term "0"))
                                          (rule "commute_or_2" (formula "13") (term "0"))
                                          (rule "nnf_imp2or" (formula "46") (term "0,1"))
                                          (rule "nnf_notAnd" (formula "27") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "27") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                                          (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                          (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "26") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                          (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                          (rule "commute_or_2" (formula "14") (term "0"))
                                          (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "25") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                          (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "33") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "33") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "33") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0"))
                                          (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "33") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0"))
                                          (rule "mul_literals" (formula "33") (term "1,0,0,0"))
                                          (rule "ifthenelse_split" (formula "2") (term "0"))
                                          (branch "self.sorted.<created> = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "47") (term "0,1,1,0") (ifseqformula "3"))
                                             (rule "applyEqReverse" (formula "47") (term "0,1,1,1,1,0,0,0,1") (ifseqformula "3"))
                                             (rule "applyEqReverse" (formula "47") (term "0,0,0,1,0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "47"))
                                             (rule "allRight" (formula "47") (inst "sk=iv_31"))
                                             (rule "orRight" (formula "47"))
                                             (rule "notRight" (formula "47"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "applyEqReverse" (formula "49") (term "1,1,1") (ifseqformula "5"))
                                             (rule "applyEqReverse" (formula "49") (term "0,1,1,1,0,1") (ifseqformula "5"))
                                             (rule "applyEqReverse" (formula "2") (term "0,0,0,1,1") (ifseqformula "5"))
                                             (rule "hideAuxiliaryEq" (formula "5"))
                                             (rule "eqSymm" (formula "48"))
                                             (rule "replace_known_left" (formula "48") (term "0,0,1") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "1")))
                                             (rule "inEqSimp_homoInEq0" (formula "2"))
                                             (rule "polySimp_addComm1" (formula "2") (term "0"))
                                             (rule "inEqSimp_homoInEq0" (formula "48") (term "0,1"))
                                             (rule "polySimp_addComm1" (formula "48") (term "0,0,1"))
                                             (rule "inEqSimp_homoInEq0" (formula "48") (term "0,0"))
                                             (rule "polySimp_addComm1" (formula "48") (term "0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                             (rule "polySimp_rightDist" (formula "2") (term "1"))
                                             (rule "mul_literals" (formula "2") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "48") (term "0,1"))
                                             (rule "polySimp_mulComm0" (formula "48") (term "1,0,1"))
                                             (rule "polySimp_rightDist" (formula "48") (term "1,0,1"))
                                             (rule "mul_literals" (formula "48") (term "0,1,0,1"))
                                             (rule "polySimp_mulLiterals" (formula "48") (term "1,1,0,1"))
                                             (rule "polySimp_elimOne" (formula "48") (term "1,1,0,1"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "48") (term "0,0"))
                                             (rule "polySimp_mulComm0" (formula "48") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "48") (term "1,0,0"))
                                             (rule "mul_literals" (formula "48") (term "0,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "48") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "48") (term "1,1,0,0"))
                                             (rule "pullOutSelect" (formula "48") (term "1,0") (inst "selectSK=arr_375"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "32"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "eqSymm" (formula "49"))
                                             (rule "nnf_notAnd" (formula "38") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0"))
                                             (rule "mul_literals" (formula "38") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "38") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0"))
                                             (rule "mul_literals" (formula "38") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "38") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "38") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "37") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "37") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "37") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "37") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "0,0,0"))
                                             (rule "mul_literals" (formula "37") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "37") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "37") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "37") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "37") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "37") (term "1,1,0,0"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "1,1") (ifseqformula "9"))
                                             (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "46"))
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "26") (term "0,1") (ifseqformula "9"))
                                             (rule "replace_known_right" (formula "26") (term "0") (ifseqformula "46"))
                                             (builtin "One Step Simplification" (formula "26"))
                                             (rule "lenNonNegative" (formula "56") (term "1,1,0,0,1"))
                                             (rule "inEqSimp_commuteLeq" (formula "1"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "1,0") (ifseqformula "10"))
                                             (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "6"))
                                             (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "50")))
                                             (rule "true_left" (formula "20"))
                                             (rule "commute_or_2" (formula "26") (term "0"))
                                             (rule "commute_or" (formula "42") (term "0,0"))
                                             (rule "commute_or" (formula "21") (term "0,0"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "21") (term "0"))
                                             (rule "add_zero_right" (formula "21") (term "1,1,0"))
                                             (rule "qeq_literals" (formula "21") (term "1,0"))
                                             (builtin "One Step Simplification" (formula "21"))
                                             (rule "true_left" (formula "21"))
                                             (rule "commute_or_2" (formula "32") (term "0"))
                                             (rule "commute_or" (formula "15") (term "0,0"))
                                             (rule "commute_or" (formula "16") (term "0,0"))
                                             (rule "commute_or" (formula "17") (term "0,0"))
                                             (rule "lenNonNegative" (formula "24") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "24"))
                                             (rule "applyEq" (formula "24") (term "0") (ifseqformula "25"))
                                             (rule "inEqSimp_subsumption1" (formula "24") (ifseqformula "21"))
                                             (rule "leq_literals" (formula "24") (term "0"))
                                             (builtin "One Step Simplification" (formula "24"))
                                             (rule "true_left" (formula "24"))
                                             (rule "commute_or_2" (formula "31") (term "0"))
                                             (rule "commute_or_2" (formula "30") (term "0"))
                                             (rule "commute_or" (formula "18") (term "0,0"))
                                             (rule "commute_or_2" (formula "37") (term "0"))
                                             (rule "commute_or_2" (formula "39") (term "0"))
                                             (rule "commute_or_2" (formula "38") (term "0"))
                                             (rule "commute_or" (formula "25") (term "0,0"))
                                             (rule "commute_or" (formula "31") (term "0,0"))
                                             (rule "commute_or" (formula "30") (term "0,0"))
                                             (rule "commute_or" (formula "35") (term "0,0"))
                                             (rule "commute_or" (formula "37") (term "0,0"))
                                             (rule "commute_or" (formula "36") (term "0,0"))
                                             (rule "arrayLengthIsAShort" (formula "24") (term "1"))
                                             (builtin "One Step Simplification" (formula "24"))
                                             (rule "true_left" (formula "24"))
                                             (rule "arrayLengthNotNegative" (formula "24") (term "1"))
                                             (rule "inEqSimp_subsumption1" (formula "24") (ifseqformula "21"))
                                             (rule "leq_literals" (formula "24") (term "0"))
                                             (builtin "One Step Simplification" (formula "24"))
                                             (rule "true_left" (formula "24"))
                                             (rule "arrayLengthIsAShort" (formula "38") (term "1,1,0"))
                                             (builtin "One Step Simplification" (formula "38"))
                                             (rule "true_left" (formula "38"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "1,2,0,0,0") (ifseqformula "10"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "25") (term "0,1,0,1,0,0") (ifseqformula "10"))
                                             (rule "replace_known_right" (formula "25") (term "0") (ifseqformula "44"))
                                             (builtin "One Step Simplification" (formula "25"))
                                             (rule "arrayLengthNotNegative" (formula "40") (term "1,1,0"))
                                             (rule "arrayLengthIsAShort" (formula "31") (term "0,1"))
                                             (builtin "One Step Simplification" (formula "31"))
                                             (rule "true_left" (formula "31"))
                                             (rule "arrayLengthNotNegative" (formula "31") (term "0,1"))
                                             (rule "arrayLengthIsAShort" (formula "5") (term "0"))
                                             (builtin "One Step Simplification" (formula "5"))
                                             (rule "true_left" (formula "5"))
                                             (rule "arrayLengthNotNegative" (formula "5") (term "0"))
                                             (rule "applyEq" (formula "5") (term "0") (ifseqformula "6"))
                                             (rule "qeq_literals" (formula "5"))
                                             (rule "true_left" (formula "5"))
                                             (rule "ifthenelse_to_or_right" (formula "27") (term "0,0,0"))
                                             (rule "nnf_notAnd" (formula "27") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "27") (term "0,0,1,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,0,0,0"))
                                             (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "27") (term "0,0,0,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0,0"))
                                             (rule "commute_or" (formula "27") (term "0,0"))
                                             (rule "commute_or_2" (formula "27") (term "0"))
                                             (rule "commute_or_2" (formula "27") (term "0,1,0"))
                                             (rule "commute_or" (formula "27") (term "1,1,0"))
                                             (rule "commute_or" (formula "27") (term "0,0,1,0"))
                                             (rule "cut_direct" (formula "57") (term "0"))
                                             (branch "CUT: mConcat(int2seq(self.chosen.length), arrConcat(0, array2seq2d(heapAfter_splidAndCheck, result_0))).length = 0 TRUE"
                                                (builtin "One Step Simplification" (formula "58"))
                                                (rule "allRight" (formula "58") (inst "sk=iv_32"))
                                                (rule "orRight" (formula "58"))
                                                (rule "orRight" (formula "58"))
                                                (rule "inEqSimp_geqRight" (formula "59"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                (rule "inEqSimp_leqRight" (formula "59"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
                                                (rule "qeq_literals" (formula "4"))
                                                (rule "true_left" (formula "4"))
                                                (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "3"))
                                                (rule "times_zero_2" (formula "2") (term "1,0"))
                                                (rule "add_zero_right" (formula "2") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                                (rule "mul_literals" (formula "2") (term "1"))
                                                (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
                                                (rule "qeq_literals" (formula "1") (term "0"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "closeFalse" (formula "1"))
                                             )
                                             (branch "CUT: mConcat(int2seq(self.chosen.length), arrConcat(0, array2seq2d(heapAfter_splidAndCheck, result_0))).length = 0 FALSE"
                                                (builtin "One Step Simplification" (formula "58"))
                                                (rule "false_right" (formula "58"))
                                                (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "57"))
                                                (rule "add_literals" (formula "1") (term "1"))
                                                (rule "inEqSimp_contradEq7" (formula "57") (ifseqformula "1"))
                                                (rule "times_zero_1" (formula "57") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "57") (term "0,0"))
                                                (rule "leq_literals" (formula "57") (term "0"))
                                                (builtin "One Step Simplification" (formula "57"))
                                                (rule "false_right" (formula "57"))
                                                (rule "cnf_rightDist" (formula "27") (term "1,1,0"))
                                                (rule "cnf_rightDist" (formula "27") (term "0"))
                                                (rule "distr_forallAnd" (formula "27"))
                                                (rule "andLeft" (formula "27"))
                                                (rule "commute_or" (formula "28") (term "0"))
                                                (rule "shift_paren_or" (formula "27") (term "0"))
                                                (rule "commute_or_2" (formula "27") (term "0,0"))
                                                (builtin "One Step Simplification" (formula "27"))
                                                (rule "commute_or" (formula "28") (term "1,1,0"))
                                                (rule "shift_paren_or" (formula "27") (term "0,0"))
                                                (rule "commute_or" (formula "27") (term "0,0,0"))
                                                (builtin "One Step Simplification" (formula "27"))
                                                (rule "cnf_rightDist" (formula "28") (term "0"))
                                                (rule "distr_forallAnd" (formula "28"))
                                                (rule "andLeft" (formula "28"))
                                                (rule "commute_or_2" (formula "28") (term "0"))
                                                (rule "shift_paren_or" (formula "29") (term "0"))
                                                (rule "commute_or_2" (formula "29") (term "0,0"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "29") (term "0"))
                                                (rule "inEqSimp_homoInEq1" (formula "29") (term "1,0"))
                                                (rule "polySimp_pullOutFactor1" (formula "29") (term "0,1,0"))
                                                (rule "add_literals" (formula "29") (term "1,0,1,0"))
                                                (rule "times_zero_1" (formula "29") (term "0,1,0"))
                                                (rule "leq_literals" (formula "29") (term "1,0"))
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "true_left" (formula "29"))
                                                (rule "shift_paren_or" (formula "28") (term "0,0"))
                                                (rule "commute_or" (formula "28") (term "0,0,0"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "28") (term "0,0"))
                                                (rule "add_literals" (formula "28") (term "1,1,0,0"))
                                                (rule "qeq_literals" (formula "28") (term "1,0,0"))
                                                (builtin "One Step Simplification" (formula "28"))
                                                (rule "true_left" (formula "28"))
                                                (rule "cut_direct" (formula "32") (term "0"))
                                                (branch "CUT: self.concatenated.length ≤ 0 TRUE"
                                                   (builtin "One Step Simplification" (formula "33"))
                                                   (rule "true_left" (formula "33"))
                                                   (rule "inEqSimp_antiSymm" (formula "31") (ifseqformula "32"))
                                                   (rule "applyEq" (formula "33") (term "0") (ifseqformula "31"))
                                                   (rule "leq_literals" (formula "33"))
                                                   (rule "true_left" (formula "33"))
                                                   (rule "applyEq" (formula "32") (term "0") (ifseqformula "31"))
                                                   (rule "qeq_literals" (formula "32"))
                                                   (rule "true_left" (formula "32"))
                                                   (rule "ifthenelse_split" (formula "4") (term "0"))
                                                   (branch "self.sorted[iv_22].length ≥ 1 TRUE"
                                                      (rule "replace_known_left" (formula "52") (term "0,1") (ifseqformula "5"))
                                                      (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "5")))
                                                      (rule "ifthenelse_split" (formula "2") (term "0"))
                                                      (branch " ¬self.sorted[iv_22] = null ∧ ¬self.sorted[iv_22].<created> = TRUE TRUE"
                                                         (rule "andLeft" (formula "2"))
                                                         (rule "notLeft" (formula "2"))
                                                         (rule "notLeft" (formula "2"))
                                                         (rule "referencedObjectIsCreatedRight" (formula "43") (ifseqformula "44"))
                                                         (rule "close" (formula "43") (ifseqformula "11"))
                                                      )
                                                      (branch " ¬self.sorted[iv_22] = null ∧ ¬self.sorted[iv_22].<created> = TRUE FALSE"
                                                         (rule "close" (formula "53") (ifseqformula "2"))
                                                      )
                                                   )
                                                   (branch "self.sorted[iv_22].length ≥ 1 FALSE"
                                                      (rule "inEqSimp_geqRight" (formula "42"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "inEqSimp_homoInEq1" (formula "5"))
                                                      (rule "times_zero_2" (formula "5") (term "1,0"))
                                                      (rule "add_zero_right" (formula "5") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                                      (rule "mul_literals" (formula "5") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "4"))
                                                      (rule "qeq_literals" (formula "5") (term "0"))
                                                      (builtin "One Step Simplification" (formula "5"))
                                                      (rule "closeFalse" (formula "5"))
                                                   )
                                                )
                                                (branch "CUT: self.concatenated.length ≤ 0 FALSE"
                                                   (builtin "One Step Simplification" (formula "32"))
                                                   (rule "inEqSimp_leqRight" (formula "43"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_zero_right" (formula "1") (term "0,0"))
                                                   (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "33"))
                                                   (rule "add_literals" (formula "1") (term "0"))
                                                   (rule "qeq_literals" (formula "1"))
                                                   (rule "closeFalse" (formula "1"))
                                                )
                                             )
                                          )
                                          (branch "self.sorted.<created> = TRUE FALSE"
                                             (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "44"))
                                             (rule "close" (formula "37") (ifseqformula "6"))
                                          )
                                       )
                                    )
                                    (branch "msg.length ≥ 0 FALSE"
                                       (rule "eqSymm" (formula "50") (term "0"))
                                       (rule "inEqSimp_geqRight" (formula "49"))
                                       (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                       (rule "mul_literals" (formula "1") (term "1"))
                                       (rule "inEqSimp_contradInEq0" (formula "22") (term "0,1") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "22") (term "0,0,1"))
                                       (builtin "One Step Simplification" (formula "22"))
                                       (rule "inEqSimp_contradInEq0" (formula "16") (term "0,1,1,0,0") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "16") (term "0,0,1,1,0,0"))
                                       (builtin "One Step Simplification" (formula "16"))
                                       (rule "inEqSimp_contradInEq0" (formula "23") (term "0,1,1,0,0") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "23") (term "0,0,1,1,0,0"))
                                       (builtin "One Step Simplification" (formula "23"))
                                       (rule "inEqSimp_notGeq" (formula "22") (term "0"))
                                       (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                                       (rule "add_literals" (formula "22") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "22") (term "0,0"))
                                       (rule "inEqSimp_or_tautInEq0" (formula "16") (term "0,0"))
                                       (rule "add_zero_right" (formula "16") (term "1,1,0,0"))
                                       (rule "qeq_literals" (formula "16") (term "1,0,0"))
                                       (builtin "One Step Simplification" (formula "16"))
                                       (rule "true_left" (formula "16"))
                                       (rule "inEqSimp_or_tautInEq0" (formula "22") (term "0,0"))
                                       (rule "add_zero_right" (formula "22") (term "1,1,0,0"))
                                       (rule "qeq_literals" (formula "22") (term "1,0,0"))
                                       (builtin "One Step Simplification" (formula "22"))
                                       (rule "true_left" (formula "22"))
                                       (rule "commute_or_2" (formula "33") (term "0"))
                                       (rule "arrayLengthIsAShort" (formula "17") (term "1,0,0,0"))
                                       (builtin "One Step Simplification" (formula "17"))
                                       (rule "true_left" (formula "17"))
                                       (rule "arrayLengthNotNegative" (formula "17") (term "1,0,1,0,0"))
                                       (rule "arrayLengthIsAShort" (formula "18") (term "1,0,1,0,0"))
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "true_left" (formula "18"))
                                       (rule "arrayLengthNotNegative" (formula "18") (term "1,0,0,0"))
                                       (rule "nnf_imp2or" (formula "32") (term "0"))
                                       (rule "nnf_imp2or" (formula "34") (term "0"))
                                       (rule "nnf_imp2or" (formula "33") (term "0"))
                                       (rule "commute_or_2" (formula "11") (term "0"))
                                       (rule "commute_or_2" (formula "12") (term "0"))
                                       (rule "commute_or_2" (formula "13") (term "0"))
                                       (rule "nnf_imp2or" (formula "45") (term "0,1"))
                                       (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "26") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                       (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                       (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "25") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                       (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                       (rule "commute_or_2" (formula "14") (term "0"))
                                       (rule "nnf_notAnd" (formula "24") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                                       (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "24") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                                       (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                       (rule "ifthenelse_split" (formula "2") (term "0"))
                                       (branch "self.sorted.<created> = TRUE TRUE"
                                          (rule "applyEqReverse" (formula "46") (term "1,1,1,1,0,1") (ifseqformula "3"))
                                          (rule "applyEqReverse" (formula "46") (term "0,1,1,1,1,0,0,0,1") (ifseqformula "3"))
                                          (rule "applyEqReverse" (formula "46") (term "0,1,1,0") (ifseqformula "3"))
                                          (rule "applyEqReverse" (formula "46") (term "0,0,0,1,1,1,0,0,0,1") (ifseqformula "3"))
                                          (rule "applyEqReverse" (formula "46") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "3"))
                                          (rule "applyEqReverse" (formula "46") (term "0,0,0,1,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "46"))
                                          (rule "allRight" (formula "46") (inst "sk=iv_29"))
                                          (rule "orRight" (formula "46"))
                                          (rule "notRight" (formula "46"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "hideAuxiliaryEq" (formula "5"))
                                          (rule "eqSymm" (formula "47"))
                                          (rule "replace_known_left" (formula "47") (term "0,0,0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "1")))
                                          (rule "inEqSimp_homoInEq0" (formula "2"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0"))
                                          (rule "inEqSimp_homoInEq0" (formula "47") (term "0,0"))
                                          (rule "eqSymm" (formula "47"))
                                          (rule "polySimp_addComm1" (formula "47") (term "0,0,1"))
                                          (rule "inEqSimp_homoInEq0" (formula "47") (term "0,0"))
                                          (rule "polySimp_addComm1" (formula "47") (term "0,0,0"))
                                          (rule "eqSymm" (formula "47"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                          (rule "polySimp_rightDist" (formula "2") (term "1"))
                                          (rule "mul_literals" (formula "2") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "47") (term "0,0"))
                                          (rule "eqSymm" (formula "47"))
                                          (rule "polySimp_mulComm0" (formula "47") (term "1,0,1"))
                                          (rule "polySimp_rightDist" (formula "47") (term "1,0,1"))
                                          (rule "mul_literals" (formula "47") (term "0,1,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "47") (term "1,1,0,1"))
                                          (rule "polySimp_elimOne" (formula "47") (term "1,1,0,1"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "47") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "47") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "47") (term "1,0,0"))
                                          (rule "mul_literals" (formula "47") (term "0,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "47") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "47") (term "1,1,0,0"))
                                          (rule "eqSymm" (formula "47"))
                                          (rule "pullOutSelect" (formula "47") (term "1,0") (inst "selectSK=arr_374"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "eqSymm" (formula "48"))
                                          (rule "nnf_notAnd" (formula "35") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "35") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0"))
                                          (rule "mul_literals" (formula "35") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "35") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "35") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "37") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "37") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "37") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "37") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "0,0,0"))
                                          (rule "mul_literals" (formula "37") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "37") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "37") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "37") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "37") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "37") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "36") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "36") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "36") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "36") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "36") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0"))
                                          (rule "mul_literals" (formula "36") (term "1,0,0,0"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "0,0") (ifseqformula "9"))
                                          (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "45"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "1,0") (ifseqformula "9"))
                                          (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "5"))
                                          (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "47")))
                                          (rule "true_left" (formula "18"))
                                          (rule "lenNonNegative" (formula "54") (term "1,1,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "26") (term "0,1") (ifseqformula "10"))
                                          (rule "replace_known_right" (formula "26") (term "0") (ifseqformula "46"))
                                          (builtin "One Step Simplification" (formula "26"))
                                          (rule "commute_or_2" (formula "24") (term "0"))
                                          (rule "commute_or" (formula "41") (term "0,0"))
                                          (rule "commute_or_2" (formula "32") (term "0"))
                                          (rule "commute_or" (formula "15") (term "0,0"))
                                          (rule "commute_or" (formula "16") (term "0,0"))
                                          (rule "commute_or" (formula "17") (term "0,0"))
                                          (rule "lenNonNegative" (formula "23") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "23"))
                                          (rule "applyEq" (formula "23") (term "0") (ifseqformula "24"))
                                          (rule "inEqSimp_subsumption1" (formula "23") (ifseqformula "20"))
                                          (rule "leq_literals" (formula "23") (term "0"))
                                          (builtin "One Step Simplification" (formula "23"))
                                          (rule "true_left" (formula "23"))
                                          (rule "commute_or_2" (formula "31") (term "0"))
                                          (rule "commute_or_2" (formula "30") (term "0"))
                                          (rule "commute_or" (formula "18") (term "0,0"))
                                          (rule "commute_or_2" (formula "37") (term "0"))
                                          (rule "commute_or_2" (formula "39") (term "0"))
                                          (rule "commute_or_2" (formula "38") (term "0"))
                                          (rule "commute_or" (formula "24") (term "0,0"))
                                          (rule "commute_or" (formula "31") (term "0,0"))
                                          (rule "commute_or" (formula "30") (term "0,0"))
                                          (rule "commute_or" (formula "35") (term "0,0"))
                                          (rule "commute_or" (formula "37") (term "0,0"))
                                          (rule "commute_or" (formula "36") (term "0,0"))
                                          (rule "arrayLengthIsAShort" (formula "20") (term "0"))
                                          (builtin "One Step Simplification" (formula "20"))
                                          (rule "true_left" (formula "20"))
                                          (rule "arrayLengthNotNegative" (formula "20") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "20") (ifseqformula "21"))
                                          (rule "leq_literals" (formula "20") (term "0"))
                                          (builtin "One Step Simplification" (formula "20"))
                                          (rule "true_left" (formula "20"))
                                          (rule "cut_direct" (formula "53") (term "0"))
                                          (branch "CUT: mConcat(int2seq(self.chosen.length), arrConcat(0, array2seq2d(heapAfter_splidAndCheck, result_0))).length = 0 TRUE"
                                             (builtin "One Step Simplification" (formula "54"))
                                             (rule "allRight" (formula "54") (inst "sk=iv_30"))
                                             (rule "orRight" (formula "54"))
                                             (rule "orRight" (formula "54"))
                                             (rule "inEqSimp_leqRight" (formula "54"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_geqRight" (formula "55"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0"))
                                             (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
                                             (rule "qeq_literals" (formula "4"))
                                             (rule "true_left" (formula "4"))
                                             (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "3"))
                                             (rule "times_zero_2" (formula "1") (term "1,0"))
                                             (rule "add_zero_right" (formula "1") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                             (rule "mul_literals" (formula "1") (term "1"))
                                             (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
                                             (rule "qeq_literals" (formula "2") (term "0"))
                                             (builtin "One Step Simplification" (formula "2"))
                                             (rule "closeFalse" (formula "2"))
                                          )
                                          (branch "CUT: mConcat(int2seq(self.chosen.length), arrConcat(0, array2seq2d(heapAfter_splidAndCheck, result_0))).length = 0 FALSE"
                                             (builtin "One Step Simplification" (formula "54"))
                                             (rule "false_right" (formula "54"))
                                             (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "53"))
                                             (rule "add_zero_right" (formula "1") (term "1"))
                                             (rule "inEqSimp_contradEq7" (formula "53") (ifseqformula "1"))
                                             (rule "times_zero_1" (formula "53") (term "1,0,0"))
                                             (rule "add_literals" (formula "53") (term "0,0"))
                                             (rule "leq_literals" (formula "53") (term "0"))
                                             (builtin "One Step Simplification" (formula "53"))
                                             (rule "false_right" (formula "53"))
                                             (rule "arrayLengthNotNegative" (formula "5") (term "0"))
                                             (rule "inEqSimp_contradInEq1" (formula "6") (ifseqformula "5"))
                                             (rule "qeq_literals" (formula "6") (term "0"))
                                             (builtin "One Step Simplification" (formula "6"))
                                             (rule "closeFalse" (formula "6"))
                                          )
                                       )
                                       (branch "self.sorted.<created> = TRUE FALSE"
                                          (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "43"))
                                          (rule "close" (formula "36") (ifseqformula "6"))
                                       )
                                    )
                                 )
                                 (branch "self.unsigned.length ≥ 1 FALSE"
                                    (rule "replace_known_right" (formula "17") (term "0,1,1,0,0") (ifseqformula "34"))
                                    (builtin "One Step Simplification" (formula "17"))
                                    (rule "inEqSimp_geqRight" (formula "34"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_or_tautInEq0" (formula "18") (term "0,0"))
                                    (rule "add_zero_right" (formula "18") (term "1,1,0,0"))
                                    (rule "qeq_literals" (formula "18") (term "1,0,0"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "true_left" (formula "18"))
                                    (rule "ifthenelse_split" (formula "48") (term "0,0"))
                                    (branch "msg.length ≥ 0 TRUE"
                                       (rule "eqSymm" (formula "49") (term "0"))
                                       (rule "commute_or_2" (formula "34") (term "0"))
                                       (rule "arrayLengthIsAShort" (formula "18") (term "1,0,1,0,0"))
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "true_left" (formula "18"))
                                       (rule "arrayLengthIsAShort" (formula "18") (term "1,0,0,0"))
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "true_left" (formula "18"))
                                       (rule "arrayLengthNotNegative" (formula "18") (term "1,0,1,0,0"))
                                       (rule "arrayLengthNotNegative" (formula "19") (term "1,0,0,0"))
                                       (rule "nnf_imp2or" (formula "33") (term "0"))
                                       (rule "commute_or_2" (formula "17") (term "0"))
                                       (rule "ifthenelse_split" (formula "23") (term "1"))
                                       (branch "msg.length ≥ 1 TRUE"
                                          (rule "replace_known_left" (formula "25") (term "0,1,1,0,0") (ifseqformula "23"))
                                          (builtin "One Step Simplification" (formula "25"))
                                          (rule "replace_known_left" (formula "17") (term "0,1,1,0") (ifseqformula "23"))
                                          (builtin "One Step Simplification" (formula "17"))
                                          (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "23"))
                                          (rule "leq_literals" (formula "1") (term "0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "nnf_imp2or" (formula "35") (term "0"))
                                          (rule "ifthenelse_split" (formula "23") (term "0"))
                                          (branch "self.concatenated.length ≥ 1 TRUE"
                                             (rule "applyEq" (formula "23") (term "0") (ifseqformula "24"))
                                             (rule "applyEq" (formula "16") (term "1,1,1,0,0,1,0,0") (ifseqformula "23"))
                                             (rule "applyEq" (formula "24") (term "1,1,1,0,0,1,0") (ifseqformula "23"))
                                             (rule "nnf_imp2or" (formula "34") (term "0"))
                                             (rule "commute_or_2" (formula "11") (term "0"))
                                             (rule "commute_or_2" (formula "12") (term "0"))
                                             (rule "commute_or_2" (formula "13") (term "0"))
                                             (rule "nnf_imp2or" (formula "46") (term "0,1"))
                                             (rule "nnf_notAnd" (formula "27") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "27") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                                             (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "26") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                             (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                             (rule "commute_or_2" (formula "14") (term "0"))
                                             (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "25") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                             (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                             (rule "ifthenelse_split" (formula "2") (term "0"))
                                             (branch "self.sorted.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "47") (term "0,0,0,1,1,1,0,0,0,1") (ifseqformula "3"))
                                                (rule "applyEqReverse" (formula "47") (term "0,1,1,1,1,0,0,0,1") (ifseqformula "3"))
                                                (rule "applyEqReverse" (formula "47") (term "0,1,1,0") (ifseqformula "3"))
                                                (rule "applyEqReverse" (formula "47") (term "1,1,1,1,0,1") (ifseqformula "3"))
                                                (rule "applyEqReverse" (formula "47") (term "0,0,0,1,0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "47"))
                                                (rule "allRight" (formula "47") (inst "sk=iv_27"))
                                                (rule "orRight" (formula "47"))
                                                (rule "notRight" (formula "47"))
                                                (rule "andLeft" (formula "1"))
                                                (rule "applyEqReverse" (formula "49") (term "0,1,1,1,0,1") (ifseqformula "5"))
                                                (rule "hideAuxiliaryEq" (formula "5"))
                                                (rule "eqSymm" (formula "48"))
                                                (rule "replace_known_left" (formula "48") (term "0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "1")))
                                                (rule "inEqSimp_homoInEq0" (formula "2"))
                                                (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                (rule "inEqSimp_homoInEq0" (formula "48") (term "0,1"))
                                                (rule "polySimp_addComm1" (formula "48") (term "0,0,1"))
                                                (rule "inEqSimp_homoInEq0" (formula "48") (term "0,0"))
                                                (rule "polySimp_addComm1" (formula "48") (term "0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                (rule "mul_literals" (formula "2") (term "0,1"))
                                                (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "48") (term "0,1"))
                                                (rule "polySimp_mulComm0" (formula "48") (term "1,0,1"))
                                                (rule "polySimp_rightDist" (formula "48") (term "1,0,1"))
                                                (rule "mul_literals" (formula "48") (term "0,1,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "48") (term "1,1,0,1"))
                                                (rule "polySimp_elimOne" (formula "48") (term "1,1,0,1"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "48") (term "0,0"))
                                                (rule "polySimp_mulComm0" (formula "48") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "48") (term "1,0,0"))
                                                (rule "mul_literals" (formula "48") (term "0,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "48") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "48") (term "1,1,0,0"))
                                                (rule "pullOutSelect" (formula "48") (term "1,0") (inst "selectSK=arr_373"))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "32"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "eqSymm" (formula "49"))
                                                (rule "nnf_notAnd" (formula "36") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "36") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "36") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "36") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "36") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0"))
                                                (rule "mul_literals" (formula "36") (term "1,0,0,0"))
                                                (rule "nnf_notAnd" (formula "38") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0"))
                                                (rule "mul_literals" (formula "38") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "38") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0"))
                                                (rule "mul_literals" (formula "38") (term "1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "38") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "38") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "37") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "37") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "37") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "37") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "0,0,0"))
                                                (rule "mul_literals" (formula "37") (term "1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "37") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "37") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "37") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "37") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "37") (term "1,1,0,0"))
                                                (rule "lenNonNegative" (formula "54") (term "1,1,0,0,1"))
                                                (rule "inEqSimp_commuteLeq" (formula "1"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "1,1") (ifseqformula "10"))
                                                (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "47"))
                                                (builtin "One Step Simplification" (formula "19"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "1,0") (ifseqformula "10"))
                                                (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "49"))
                                                (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "6")))
                                                (rule "true_left" (formula "20"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "25") (term "0,1") (ifseqformula "10"))
                                                (rule "replace_known_right" (formula "25") (term "0") (ifseqformula "47"))
                                                (builtin "One Step Simplification" (formula "25"))
                                                (rule "commute_or" (formula "42") (term "0,0"))
                                                (rule "commute_or_2" (formula "30") (term "0"))
                                                (rule "commute_or" (formula "21") (term "0,0"))
                                                (rule "commute_or_2" (formula "33") (term "0"))
                                                (rule "commute_or" (formula "15") (term "0,0"))
                                                (rule "commute_or" (formula "16") (term "0,0"))
                                                (rule "commute_or" (formula "17") (term "0,0"))
                                                (rule "lenNonNegative" (formula "24") (term "0"))
                                                (rule "inEqSimp_commuteLeq" (formula "24"))
                                                (rule "applyEq" (formula "24") (term "0") (ifseqformula "25"))
                                                (rule "qeq_literals" (formula "24"))
                                                (rule "true_left" (formula "24"))
                                                (rule "commute_or_2" (formula "32") (term "0"))
                                                (rule "commute_or_2" (formula "31") (term "0"))
                                                (rule "commute_or" (formula "18") (term "0,0"))
                                                (rule "commute_or_2" (formula "38") (term "0"))
                                                (rule "commute_or_2" (formula "40") (term "0"))
                                                (rule "commute_or_2" (formula "39") (term "0"))
                                                (rule "commute_or" (formula "30") (term "0,0"))
                                                (rule "commute_or" (formula "32") (term "0,0"))
                                                (rule "commute_or" (formula "31") (term "0,0"))
                                                (rule "commute_or" (formula "36") (term "0,0"))
                                                (rule "commute_or" (formula "38") (term "0,0"))
                                                (rule "commute_or" (formula "37") (term "0,0"))
                                                (rule "ifthenelse_to_or_right" (formula "21") (term "0,0,0"))
                                                (builtin "One Step Simplification" (formula "21"))
                                                (rule "nnf_notAnd" (formula "21") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,0,0,0"))
                                                (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "21") (term "0,0,0,0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,0,0,0"))
                                                (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,0,0"))
                                                (rule "nnf_notAnd" (formula "21") (term "0,1,1,0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "21") (term "0,0,1,1,0,0,0"))
                                                (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,1,1,0,0,0"))
                                                (rule "add_zero_right" (formula "21") (term "0,0,0,0,1,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,1,1,0,0,0"))
                                                (rule "mul_literals" (formula "21") (term "1,0,0,1,1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "21") (term "1,0,1,1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,1,1,0,0,0"))
                                                (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,1,1,0,0,0"))
                                                (rule "add_literals" (formula "21") (term "0,0,0,1,0,1,1,0,0,0"))
                                                (rule "add_zero_left" (formula "21") (term "0,0,1,0,1,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,1,1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,1,1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "21") (term "1,1,0,1,1,0,0,0"))
                                                (rule "commute_or" (formula "21") (term "0,0"))
                                                (rule "commute_or_2" (formula "21") (term "0"))
                                                (rule "commute_or_2" (formula "21") (term "0,1,0"))
                                                (rule "commute_or" (formula "21") (term "1,1,0"))
                                                (rule "commute_or" (formula "21") (term "0,0,1,0"))
                                                (rule "commute_or_2" (formula "21") (term "0,1,1,0"))
                                                (rule "commute_or" (formula "21") (term "0,0,1,1,0"))
                                                (rule "arrayLengthNotNegative" (formula "5") (term "0"))
                                                (rule "inEqSimp_antiSymm" (formula "5") (ifseqformula "6"))
                                                (rule "applyEq" (formula "6") (term "0") (ifseqformula "5"))
                                                (rule "qeq_literals" (formula "6"))
                                                (rule "true_left" (formula "6"))
                                                (rule "applyEq" (formula "6") (term "0") (ifseqformula "5"))
                                                (rule "leq_literals" (formula "6"))
                                                (rule "true_left" (formula "6"))
                                                (rule "cut_direct" (formula "54") (term "0"))
                                                (branch "CUT: mConcat(int2seq(self.chosen.length), arrConcat(0, array2seq2d(heapAfter_splidAndCheck, result_0))).length = msg.length TRUE"
                                                   (builtin "One Step Simplification" (formula "55"))
                                                   (rule "allRight" (formula "55") (inst "sk=iv_28"))
                                                   (rule "orRight" (formula "55"))
                                                   (rule "orRight" (formula "55"))
                                                   (rule "inEqSimp_geqRight" (formula "56"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                   (rule "inEqSimp_leqRight" (formula "56"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
                                                   (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "3"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                                   (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                   (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "31"))
                                                   (rule "leq_literals" (formula "4") (term "0"))
                                                   (builtin "One Step Simplification" (formula "4"))
                                                   (rule "true_left" (formula "4"))
                                                   (rule "cnf_rightDist" (formula "23") (term "1,1,0"))
                                                   (rule "commute_or_2" (formula "23") (term "0,1,1,0"))
                                                   (rule "inEqSimp_or_tautInEq1" (formula "23") (term "0,0,1,1,0"))
                                                   (rule "add_zero_right" (formula "23") (term "1,1,0,0,1,1,0"))
                                                   (rule "qeq_literals" (formula "23") (term "1,0,0,1,1,0"))
                                                   (builtin "One Step Simplification" (formula "23"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "26") (term "0,1,0,0,0") (ifseqformula "12"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "27") (term "0,1,0,1,0,0") (ifseqformula "12"))
                                                   (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "47"))
                                                   (builtin "One Step Simplification" (formula "27"))
                                                   (rule "arrayLengthNotNegative" (formula "43") (term "1,1,0"))
                                                   (rule "arrayLengthIsAShort" (formula "44") (term "1,1,0"))
                                                   (builtin "One Step Simplification" (formula "44"))
                                                   (rule "true_left" (formula "44"))
                                                   (rule "shift_paren_or" (formula "23") (term "1,1,0"))
                                                   (rule "ifthenelse_to_or_right" (formula "34") (term "0,0,0"))
                                                   (builtin "One Step Simplification" (formula "34"))
                                                   (rule "nnf_notAnd" (formula "34") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,0,0,0"))
                                                   (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,0,0,0"))
                                                   (rule "add_zero_left" (formula "34") (term "0,0,1,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,0,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0,0,0,0"))
                                                   (rule "times_zero_1" (formula "34") (term "1,0,0,0,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "34") (term "0,0,0,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "34") (term "1,0,0,0,0,0,0"))
                                                   (rule "nnf_notAnd" (formula "34") (term "0,1,1,0,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "34") (term "0,0,1,1,0,0,0"))
                                                   (rule "times_zero_1" (formula "34") (term "1,0,0,0,0,1,1,0,0,0"))
                                                   (rule "add_zero_right" (formula "34") (term "0,0,0,0,1,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "34") (term "1,0,0,1,1,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "34") (term "1,0,1,1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,1,1,0,0,0"))
                                                   (rule "add_literals" (formula "34") (term "0,0,0,1,0,1,1,0,0,0"))
                                                   (rule "add_zero_left" (formula "34") (term "0,0,1,0,1,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,1,1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,1,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "34") (term "1,1,0,1,1,0,0,0"))
                                                   (rule "commute_or" (formula "34") (term "0,0"))
                                                   (rule "commute_or_2" (formula "34") (term "0"))
                                                   (rule "arrayLengthNotNegative" (formula "33") (term "1"))
                                                   (rule "inEqSimp_subsumption1" (formula "33") (ifseqformula "32"))
                                                   (rule "leq_literals" (formula "33") (term "0"))
                                                   (builtin "One Step Simplification" (formula "33"))
                                                   (rule "true_left" (formula "33"))
                                                   (rule "arrayLengthIsAShort" (formula "32") (term "0"))
                                                   (builtin "One Step Simplification" (formula "32"))
                                                   (rule "true_left" (formula "32"))
                                                   (rule "commute_or" (formula "23") (term "0,1,1,0"))
                                                   (rule "inEqSimp_or_tautInEq1" (formula "23") (term "1,1,0"))
                                                   (rule "inEqSimp_homoInEq1" (formula "23") (term "1,1,1,0"))
                                                   (rule "polySimp_pullOutFactor1" (formula "23") (term "0,1,1,1,0"))
                                                   (rule "add_literals" (formula "23") (term "1,0,1,1,1,0"))
                                                   (rule "times_zero_1" (formula "23") (term "0,1,1,1,0"))
                                                   (rule "leq_literals" (formula "23") (term "1,1,1,0"))
                                                   (builtin "One Step Simplification" (formula "23"))
                                                   (rule "arrayLengthIsAShort" (formula "33") (term "0"))
                                                   (builtin "One Step Simplification" (formula "33"))
                                                   (rule "true_left" (formula "33"))
                                                   (rule "arrayLengthNotNegative" (formula "33") (term "0"))
                                                   (rule "applyEq" (formula "33") (term "0") (ifseqformula "34"))
                                                   (rule "inEqSimp_subsumption1" (formula "33") (ifseqformula "32"))
                                                   (rule "leq_literals" (formula "33") (term "0"))
                                                   (builtin "One Step Simplification" (formula "33"))
                                                   (rule "true_left" (formula "33"))
                                                   (rule "shift_paren_or" (formula "23") (term "0"))
                                                   (rule "ifthenelse_split" (formula "6") (term "0"))
                                                   (branch "self.sorted[iv_22].length ≥ 1 TRUE"
                                                      (rule "replace_known_left" (formula "55") (term "0,1") (ifseqformula "7"))
                                                      (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "7")))
                                                      (rule "commute_or" (formula "35") (term "1,1,0"))
                                                      (rule "commute_or_2" (formula "35") (term "0,1,0"))
                                                      (rule "commute_or_2" (formula "24") (term "0,0"))
                                                      (builtin "One Step Simplification" (formula "24"))
                                                      (rule "ifthenelse_split" (formula "4") (term "0"))
                                                      (branch " ¬self.sorted[iv_22] = null ∧ ¬self.sorted[iv_22].<created> = TRUE TRUE"
                                                         (rule "andLeft" (formula "4"))
                                                         (rule "notLeft" (formula "5"))
                                                         (rule "notLeft" (formula "4"))
                                                         (rule "referencedObjectIsCreatedRight" (formula "47") (ifseqformula "46"))
                                                         (rule "close" (formula "47") (ifseqformula "13"))
                                                      )
                                                      (branch " ¬self.sorted[iv_22] = null ∧ ¬self.sorted[iv_22].<created> = TRUE FALSE"
                                                         (rule "close" (formula "56") (ifseqformula "4"))
                                                      )
                                                   )
                                                   (branch "self.sorted[iv_22].length ≥ 1 FALSE"
                                                      (rule "inEqSimp_geqRight" (formula "45"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "inEqSimp_homoInEq1" (formula "7"))
                                                      (rule "times_zero_2" (formula "7") (term "1,0"))
                                                      (rule "add_zero_right" (formula "7") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "7"))
                                                      (rule "mul_literals" (formula "7") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "7") (ifseqformula "6"))
                                                      (rule "qeq_literals" (formula "7") (term "0"))
                                                      (builtin "One Step Simplification" (formula "7"))
                                                      (rule "closeFalse" (formula "7"))
                                                   )
                                                )
                                                (branch "CUT: mConcat(int2seq(self.chosen.length), arrConcat(0, array2seq2d(heapAfter_splidAndCheck, result_0))).length = msg.length FALSE"
                                                   (builtin "One Step Simplification" (formula "55"))
                                                   (rule "false_right" (formula "55"))
                                                   (rule "cnf_rightDist" (formula "21") (term "1,1,0"))
                                                   (rule "commute_or_2" (formula "21") (term "0,1,1,0"))
                                                   (rule "inEqSimp_or_tautInEq1" (formula "21") (term "0,0,1,1,0"))
                                                   (rule "add_zero_right" (formula "21") (term "1,1,0,0,1,1,0"))
                                                   (rule "qeq_literals" (formula "21") (term "1,0,0,1,1,0"))
                                                   (builtin "One Step Simplification" (formula "21"))
                                                   (rule "shift_paren_or" (formula "21") (term "1,1,0"))
                                                   (rule "commute_or" (formula "21") (term "0,1,1,0"))
                                                   (rule "inEqSimp_or_tautInEq1" (formula "21") (term "1,1,0"))
                                                   (rule "inEqSimp_homoInEq1" (formula "21") (term "1,1,1,0"))
                                                   (rule "polySimp_pullOutFactor1" (formula "21") (term "0,1,1,1,0"))
                                                   (rule "add_literals" (formula "21") (term "1,0,1,1,1,0"))
                                                   (rule "times_zero_1" (formula "21") (term "0,1,1,1,0"))
                                                   (rule "leq_literals" (formula "21") (term "1,1,1,0"))
                                                   (builtin "One Step Simplification" (formula "21"))
                                                   (rule "shift_paren_or" (formula "21") (term "0"))
                                                   (rule "commute_or_2" (formula "21") (term "0,0"))
                                                   (builtin "One Step Simplification" (formula "21"))
                                                   (rule "shift_paren_or" (formula "21") (term "0,0"))
                                                   (rule "commute_or" (formula "21") (term "0,0,0"))
                                                   (builtin "One Step Simplification" (formula "21"))
                                                   (rule "arrayLengthIsAShort" (formula "39") (term "1,1,0"))
                                                   (builtin "One Step Simplification" (formula "39"))
                                                   (rule "true_left" (formula "39"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "0,1,0,1,0,0") (ifseqformula "10"))
                                                   (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "44"))
                                                   (builtin "One Step Simplification" (formula "24"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "25") (term "0,1,0,0,0") (ifseqformula "10"))
                                                   (rule "arrayLengthNotNegative" (formula "41") (term "1,1,0"))
                                                   (rule "ifthenelse_to_or_right" (formula "32") (term "0,0,0"))
                                                   (builtin "One Step Simplification" (formula "32"))
                                                   (rule "nnf_notAnd" (formula "32") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0,0,0,0"))
                                                   (rule "add_literals" (formula "32") (term "0,0,0,1,0,0,0,0,0"))
                                                   (rule "add_zero_left" (formula "32") (term "0,0,1,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0,0,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0,0,0,0"))
                                                   (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "32") (term "0,0,0,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "32") (term "1,0,0,0,0,0,0"))
                                                   (rule "nnf_notAnd" (formula "32") (term "0,1,1,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "32") (term "1,0,1,1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,1,1,0,0,0"))
                                                   (rule "add_literals" (formula "32") (term "0,0,0,1,0,1,1,0,0,0"))
                                                   (rule "add_zero_left" (formula "32") (term "0,0,1,0,1,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,1,1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,1,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "32") (term "1,1,0,1,1,0,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "32") (term "0,0,1,1,0,0,0"))
                                                   (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,1,1,0,0,0"))
                                                   (rule "add_zero_right" (formula "32") (term "0,0,0,0,1,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "32") (term "1,0,0,1,1,0,0,0"))
                                                   (rule "commute_or" (formula "32") (term "0,0"))
                                                   (rule "commute_or_2" (formula "32") (term "0"))
                                                   (rule "arrayLengthNotNegative" (formula "30") (term "0"))
                                                   (rule "inEqSimp_subsumption1" (formula "30") (ifseqformula "31"))
                                                   (rule "leq_literals" (formula "30") (term "0"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "true_left" (formula "30"))
                                                   (rule "arrayLengthIsAShort" (formula "30") (term "0"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "true_left" (formula "30"))
                                                   (rule "arrayLengthIsAShort" (formula "31") (term "0"))
                                                   (builtin "One Step Simplification" (formula "31"))
                                                   (rule "true_left" (formula "31"))
                                                   (rule "arrayLengthNotNegative" (formula "31") (term "0"))
                                                   (rule "applyEq" (formula "31") (term "0") (ifseqformula "32"))
                                                   (rule "inEqSimp_subsumption1" (formula "31") (ifseqformula "30"))
                                                   (rule "leq_literals" (formula "31") (term "0"))
                                                   (builtin "One Step Simplification" (formula "31"))
                                                   (rule "true_left" (formula "31"))
                                                   (rule "commute_or_2" (formula "32") (term "0,1,0"))
                                                   (rule "commute_or" (formula "32") (term "1,1,0"))
                                                   (rule "ifthenelse_split" (formula "4") (term "0"))
                                                   (branch "self.sorted[iv_22].length ≥ 1 TRUE"
                                                      (rule "replace_known_left" (formula "53") (term "0,0") (ifseqformula "5"))
                                                      (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "5")))
                                                      (rule "ifthenelse_split" (formula "2") (term "0"))
                                                      (branch " ¬self.sorted[iv_22] = null ∧ ¬self.sorted[iv_22].<created> = TRUE TRUE"
                                                         (rule "andLeft" (formula "2"))
                                                         (rule "notLeft" (formula "3"))
                                                         (rule "notLeft" (formula "2"))
                                                         (rule "referencedObjectIsCreatedRight" (formula "45") (ifseqformula "44"))
                                                         (rule "close" (formula "45") (ifseqformula "11"))
                                                      )
                                                      (branch " ¬self.sorted[iv_22] = null ∧ ¬self.sorted[iv_22].<created> = TRUE FALSE"
                                                         (rule "close" (formula "54") (ifseqformula "2"))
                                                      )
                                                   )
                                                   (branch "self.sorted[iv_22].length ≥ 1 FALSE"
                                                      (rule "inEqSimp_geqRight" (formula "43"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "inEqSimp_homoInEq1" (formula "5"))
                                                      (rule "times_zero_2" (formula "5") (term "1,0"))
                                                      (rule "add_zero_right" (formula "5") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                                      (rule "mul_literals" (formula "5") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "4"))
                                                      (rule "qeq_literals" (formula "5") (term "0"))
                                                      (builtin "One Step Simplification" (formula "5"))
                                                      (rule "closeFalse" (formula "5"))
                                                   )
                                                )
                                             )
                                             (branch "self.sorted.<created> = TRUE FALSE"
                                                (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "44"))
                                                (rule "close" (formula "37") (ifseqformula "6"))
                                             )
                                          )
                                          (branch "self.concatenated.length ≥ 1 FALSE"
                                             (rule "eqSymm" (formula "23"))
                                             (rule "inEqSimp_geqRight" (formula "37"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "applyEq" (formula "25") (term "1,1,0,0") (ifseqformula "24"))
                                             (rule "applyEq" (formula "23") (term "0") (ifseqformula "24"))
                                             (rule "qeq_literals" (formula "23"))
                                             (rule "closeFalse" (formula "23"))
                                          )
                                       )
                                       (branch "msg.length ≥ 1 FALSE"
                                          (builtin "One Step Simplification" (formula "23"))
                                          (rule "replace_known_right" (formula "17") (term "0,1,1,0") (ifseqformula "37"))
                                          (builtin "One Step Simplification" (formula "17"))
                                          (rule "replace_known_right" (formula "24") (term "0,1,1,0,0") (ifseqformula "37"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "inEqSimp_geqRight" (formula "37"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_antiSymm" (formula "2") (ifseqformula "1"))
                                          (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
                                          (rule "qeq_literals" (formula "3"))
                                          (rule "true_left" (formula "3"))
                                          (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                                          (rule "leq_literals" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "applyEq" (formula "24") (term "1,1,1,0,1,1,0") (ifseqformula "1"))
                                          (rule "add_zero_right" (formula "24") (term "1,1,0,1,1,0"))
                                          (rule "applyEq" (formula "51") (term "1,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "17") (term "1,1,1,0,1,1,0,0") (ifseqformula "1"))
                                          (rule "add_literals" (formula "17") (term "1,1,0,1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "23") (term "0"))
                                          (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                                          (rule "add_literals" (formula "23") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "23") (term "0,0"))
                                          (rule "inEqSimp_or_tautInEq0" (formula "24") (term "0,0"))
                                          (rule "add_literals" (formula "24") (term "1,1,0,0"))
                                          (rule "qeq_literals" (formula "24") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "true_left" (formula "24"))
                                          (rule "nnf_imp2or" (formula "34") (term "0"))
                                          (rule "nnf_imp2or" (formula "33") (term "0"))
                                          (rule "commute_or_2" (formula "12") (term "0"))
                                          (rule "commute_or_2" (formula "13") (term "0"))
                                          (rule "commute_or_2" (formula "14") (term "0"))
                                          (rule "nnf_imp2or" (formula "45") (term "0,1"))
                                          (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                          (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "26") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                          (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "25") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                          (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                          (rule "commute_or_2" (formula "15") (term "0"))
                                          (rule "nnf_notAnd" (formula "24") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "24") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                                          (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                                          (rule "ifthenelse_split" (formula "3") (term "0"))
                                          (branch "self.sorted.<created> = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "46") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "4"))
                                             (rule "applyEqReverse" (formula "46") (term "0,0,0,1,0") (ifseqformula "4"))
                                             (rule "applyEqReverse" (formula "46") (term "0,0,0,1,1,1,0,0,0,1") (ifseqformula "4"))
                                             (rule "applyEqReverse" (formula "46") (term "0,1,1,0") (ifseqformula "4"))
                                             (builtin "One Step Simplification" (formula "46"))
                                             (rule "allRight" (formula "46") (inst "sk=iv_25"))
                                             (rule "orRight" (formula "46"))
                                             (rule "notRight" (formula "46"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "applyEqReverse" (formula "48") (term "1,1,1") (ifseqformula "6"))
                                             (rule "applyEqReverse" (formula "2") (term "0,1,1,1") (ifseqformula "6"))
                                             (rule "hideAuxiliaryEq" (formula "6"))
                                             (rule "eqSymm" (formula "47"))
                                             (rule "replace_known_left" (formula "47") (term "0,0,1") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "1")))
                                             (rule "inEqSimp_homoInEq0" (formula "2"))
                                             (rule "polySimp_addComm1" (formula "2") (term "0"))
                                             (rule "inEqSimp_homoInEq0" (formula "47") (term "0,0"))
                                             (rule "eqSymm" (formula "47"))
                                             (rule "polySimp_addComm1" (formula "47") (term "0,0,1"))
                                             (rule "inEqSimp_homoInEq0" (formula "47") (term "0,0"))
                                             (rule "polySimp_addComm1" (formula "47") (term "0,0,0"))
                                             (rule "eqSymm" (formula "47"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                             (rule "polySimp_rightDist" (formula "2") (term "1"))
                                             (rule "mul_literals" (formula "2") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "47") (term "0,1"))
                                             (rule "polySimp_mulComm0" (formula "47") (term "1,0,1"))
                                             (rule "polySimp_rightDist" (formula "47") (term "1,0,1"))
                                             (rule "polySimp_mulLiterals" (formula "47") (term "1,1,0,1"))
                                             (rule "mul_literals" (formula "47") (term "0,1,0,1"))
                                             (rule "polySimp_elimOne" (formula "47") (term "1,1,0,1"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "47") (term "0,0"))
                                             (rule "polySimp_mulComm0" (formula "47") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "47") (term "1,0,0"))
                                             (rule "mul_literals" (formula "47") (term "0,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "47") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "47") (term "1,1,0,0"))
                                             (rule "pullOutSelect" (formula "47") (term "1,0") (inst "selectSK=arr_372"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "eqSymm" (formula "48"))
                                             (rule "nnf_notAnd" (formula "35") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "35") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "35") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "35") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0"))
                                             (rule "mul_literals" (formula "35") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "37") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "37") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "37") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "37") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "0,0,0"))
                                             (rule "mul_literals" (formula "37") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "37") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "37") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "37") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "37") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "37") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "36") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "36") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "36") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0"))
                                             (rule "mul_literals" (formula "36") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "36") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "36") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0"))
                                             (rule "lenNonNegative" (formula "53") (term "1,1,0,0,1"))
                                             (rule "inEqSimp_commuteLeq" (formula "1"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "25") (term "0,0") (ifseqformula "11"))
                                             (rule "replace_known_right" (formula "25") (term "0") (ifseqformula "46"))
                                             (builtin "One Step Simplification" (formula "25"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "26") (term "0,1") (ifseqformula "11"))
                                             (rule "replace_known_right" (formula "26") (term "0") (ifseqformula "46"))
                                             (builtin "One Step Simplification" (formula "26"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "1,0") (ifseqformula "11"))
                                             (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "7"))
                                             (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "49")))
                                             (rule "true_left" (formula "20"))
                                             (rule "commute_or" (formula "41") (term "0,0"))
                                             (rule "commute_or" (formula "21") (term "0,0"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "21") (term "0"))
                                             (rule "add_literals" (formula "21") (term "1,1,0"))
                                             (rule "qeq_literals" (formula "21") (term "1,0"))
                                             (builtin "One Step Simplification" (formula "21"))
                                             (rule "true_left" (formula "21"))
                                             (rule "lenNonNegative" (formula "23") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "23"))
                                             (rule "applyEq" (formula "23") (term "0") (ifseqformula "24"))
                                             (rule "qeq_literals" (formula "23"))
                                             (rule "true_left" (formula "23"))
                                             (rule "commute_or_2" (formula "31") (term "0"))
                                             (rule "commute_or" (formula "16") (term "0,0"))
                                             (rule "commute_or" (formula "17") (term "0,0"))
                                             (rule "commute_or" (formula "18") (term "0,0"))
                                             (rule "commute_or_2" (formula "30") (term "0"))
                                             (rule "commute_or_2" (formula "29") (term "0"))
                                             (rule "commute_or" (formula "19") (term "0,0"))
                                             (rule "commute_or_2" (formula "36") (term "0"))
                                             (rule "commute_or_2" (formula "38") (term "0"))
                                             (rule "commute_or_2" (formula "37") (term "0"))
                                             (rule "commute_or" (formula "30") (term "0,0"))
                                             (rule "commute_or" (formula "29") (term "0,0"))
                                             (rule "commute_or" (formula "34") (term "0,0"))
                                             (rule "commute_or" (formula "36") (term "0,0"))
                                             (rule "commute_or" (formula "35") (term "0,0"))
                                             (rule "arrayLengthIsAShort" (formula "6") (term "0"))
                                             (builtin "One Step Simplification" (formula "6"))
                                             (rule "true_left" (formula "6"))
                                             (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                             (rule "inEqSimp_antiSymm" (formula "6") (ifseqformula "7"))
                                             (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
                                             (rule "qeq_literals" (formula "7"))
                                             (rule "true_left" (formula "7"))
                                             (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
                                             (rule "leq_literals" (formula "7"))
                                             (rule "true_left" (formula "7"))
                                             (rule "arrayLengthIsAShort" (formula "37") (term "1,1,0"))
                                             (builtin "One Step Simplification" (formula "37"))
                                             (rule "true_left" (formula "37"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "23") (term "0,1,0,0,0") (ifseqformula "11"))
                                             (rule "arrayLengthNotNegative" (formula "38") (term "1,1,0"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "0,1,0,1,0,0") (ifseqformula "11"))
                                             (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "44"))
                                             (builtin "One Step Simplification" (formula "24"))
                                             (rule "arrayLengthIsAShort" (formula "30") (term "0,1"))
                                             (builtin "One Step Simplification" (formula "30"))
                                             (rule "true_left" (formula "30"))
                                             (rule "arrayLengthNotNegative" (formula "30") (term "0,1"))
                                             (rule "arrayLengthIsAShort" (formula "5") (term "0"))
                                             (builtin "One Step Simplification" (formula "5"))
                                             (rule "true_left" (formula "5"))
                                             (rule "arrayLengthNotNegative" (formula "5") (term "0"))
                                             (rule "applyEq" (formula "5") (term "0") (ifseqformula "6"))
                                             (rule "qeq_literals" (formula "5"))
                                             (rule "true_left" (formula "5"))
                                             (rule "cut_direct" (formula "56") (term "0"))
                                             (branch "CUT: mConcat(int2seq(self.chosen.length), arrConcat(0, array2seq2d(heapAfter_splidAndCheck, result_0))).length = 0 TRUE"
                                                (builtin "One Step Simplification" (formula "57"))
                                                (rule "allRight" (formula "57") (inst "sk=iv_26"))
                                                (rule "orRight" (formula "57"))
                                                (rule "orRight" (formula "57"))
                                                (rule "inEqSimp_geqRight" (formula "58"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                (rule "inEqSimp_leqRight" (formula "58"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "3"))
                                                (rule "mul_literals" (formula "2") (term "1,0"))
                                                (rule "add_zero_right" (formula "2") (term "0"))
                                                (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
                                                (rule "qeq_literals" (formula "4"))
                                                (rule "true_left" (formula "4"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                                (rule "mul_literals" (formula "2") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "1"))
                                                (rule "qeq_literals" (formula "2") (term "0"))
                                                (builtin "One Step Simplification" (formula "2"))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                             (branch "CUT: mConcat(int2seq(self.chosen.length), arrConcat(0, array2seq2d(heapAfter_splidAndCheck, result_0))).length = 0 FALSE"
                                                (builtin "One Step Simplification" (formula "57"))
                                                (rule "false_right" (formula "57"))
                                                (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "56"))
                                                (rule "add_literals" (formula "1") (term "1"))
                                                (rule "inEqSimp_contradEq7" (formula "56") (ifseqformula "1"))
                                                (rule "times_zero_1" (formula "56") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "56") (term "0,0"))
                                                (rule "leq_literals" (formula "56") (term "0"))
                                                (builtin "One Step Simplification" (formula "56"))
                                                (rule "false_right" (formula "56"))
                                                (rule "cut_direct" (formula "31") (term "0"))
                                                (branch "CUT: self.concatenated.length ≤ 0 TRUE"
                                                   (builtin "One Step Simplification" (formula "32"))
                                                   (rule "true_left" (formula "32"))
                                                   (rule "inEqSimp_antiSymm" (formula "30") (ifseqformula "31"))
                                                   (rule "applyEq" (formula "31") (term "0") (ifseqformula "30"))
                                                   (rule "qeq_literals" (formula "31"))
                                                   (rule "true_left" (formula "31"))
                                                   (rule "applyEq" (formula "31") (term "0") (ifseqformula "30"))
                                                   (rule "leq_literals" (formula "31"))
                                                   (rule "true_left" (formula "31"))
                                                   (rule "ifthenelse_split" (formula "4") (term "0"))
                                                   (branch "self.sorted[iv_22].length ≥ 1 TRUE"
                                                      (rule "replace_known_left" (formula "51") (term "0,1") (ifseqformula "5"))
                                                      (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "5")))
                                                      (rule "ifthenelse_split" (formula "2") (term "0"))
                                                      (branch " ¬self.sorted[iv_22] = null ∧ ¬self.sorted[iv_22].<created> = TRUE TRUE"
                                                         (rule "andLeft" (formula "2"))
                                                         (rule "notLeft" (formula "2"))
                                                         (rule "notLeft" (formula "2"))
                                                         (rule "referencedObjectIsCreatedRight" (formula "42") (ifseqformula "43"))
                                                         (rule "close" (formula "42") (ifseqformula "12"))
                                                      )
                                                      (branch " ¬self.sorted[iv_22] = null ∧ ¬self.sorted[iv_22].<created> = TRUE FALSE"
                                                         (rule "close" (formula "52") (ifseqformula "2"))
                                                      )
                                                   )
                                                   (branch "self.sorted[iv_22].length ≥ 1 FALSE"
                                                      (rule "inEqSimp_geqRight" (formula "41"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "inEqSimp_homoInEq1" (formula "5"))
                                                      (rule "mul_literals" (formula "5") (term "1,0"))
                                                      (rule "add_zero_right" (formula "5") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                                      (rule "mul_literals" (formula "5") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "4"))
                                                      (rule "qeq_literals" (formula "5") (term "0"))
                                                      (builtin "One Step Simplification" (formula "5"))
                                                      (rule "closeFalse" (formula "5"))
                                                   )
                                                )
                                                (branch "CUT: self.concatenated.length ≤ 0 FALSE"
                                                   (builtin "One Step Simplification" (formula "31"))
                                                   (rule "inEqSimp_leqRight" (formula "42"))
                                                   (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                                   (rule "add_zero_right" (formula "1") (term "0,0"))
                                                   (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "32"))
                                                   (rule "add_zero_right" (formula "1") (term "0"))
                                                   (rule "qeq_literals" (formula "1"))
                                                   (rule "closeFalse" (formula "1"))
                                                )
                                             )
                                          )
                                          (branch "self.sorted.<created> = TRUE FALSE"
                                             (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "43"))
                                             (rule "close" (formula "36") (ifseqformula "7"))
                                          )
                                       )
                                    )
                                    (branch "msg.length ≥ 0 FALSE"
                                       (rule "eqSymm" (formula "49") (term "0"))
                                       (rule "inEqSimp_geqRight" (formula "48"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                       (rule "mul_literals" (formula "1") (term "1"))
                                       (rule "inEqSimp_contradInEq0" (formula "17") (term "0,1,1,0,0") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "17") (term "0,0,1,1,0,0"))
                                       (builtin "One Step Simplification" (formula "17"))
                                       (rule "inEqSimp_contradInEq0" (formula "22") (term "0,1,1,0,0") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "22") (term "0,0,1,1,0,0"))
                                       (builtin "One Step Simplification" (formula "22"))
                                       (rule "inEqSimp_contradInEq0" (formula "21") (term "0,1") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "21") (term "0,0,1"))
                                       (builtin "One Step Simplification" (formula "21"))
                                       (rule "inEqSimp_or_tautInEq0" (formula "17") (term "0,0"))
                                       (rule "add_zero_right" (formula "17") (term "1,1,0,0"))
                                       (rule "qeq_literals" (formula "17") (term "1,0,0"))
                                       (builtin "One Step Simplification" (formula "17"))
                                       (rule "true_left" (formula "17"))
                                       (rule "inEqSimp_or_tautInEq0" (formula "21") (term "0,0"))
                                       (rule "add_zero_right" (formula "21") (term "1,1,0,0"))
                                       (rule "qeq_literals" (formula "21") (term "1,0,0"))
                                       (builtin "One Step Simplification" (formula "21"))
                                       (rule "true_left" (formula "21"))
                                       (rule "inEqSimp_notGeq" (formula "20") (term "0"))
                                       (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                                       (rule "add_literals" (formula "20") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "20") (term "0,0"))
                                       (rule "commute_or_2" (formula "32") (term "0"))
                                       (rule "arrayLengthNotNegative" (formula "17") (term "1,0,0,0"))
                                       (rule "arrayLengthIsAShort" (formula "18") (term "1,0,0,0"))
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "true_left" (formula "18"))
                                       (rule "arrayLengthIsAShort" (formula "18") (term "1,0,1,0,0"))
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "true_left" (formula "18"))
                                       (rule "arrayLengthNotNegative" (formula "18") (term "1,0,1,0,0"))
                                       (rule "nnf_imp2or" (formula "31") (term "0"))
                                       (rule "nnf_imp2or" (formula "33") (term "0"))
                                       (rule "nnf_imp2or" (formula "32") (term "0"))
                                       (rule "commute_or_2" (formula "12") (term "0"))
                                       (rule "commute_or_2" (formula "13") (term "0"))
                                       (rule "commute_or_2" (formula "14") (term "0"))
                                       (rule "nnf_imp2or" (formula "44") (term "0,1"))
                                       (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "25") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                       (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "24") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "24") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                                       (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                       (rule "commute_or_2" (formula "15") (term "0"))
                                       (rule "nnf_notAnd" (formula "23") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                                       (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "23") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                                       (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                                       (rule "ifthenelse_split" (formula "3") (term "0"))
                                       (branch "self.sorted.<created> = TRUE TRUE"
                                          (rule "applyEqReverse" (formula "45") (term "0,1,1,0") (ifseqformula "4"))
                                          (rule "applyEqReverse" (formula "45") (term "0,0,0,1,1,1,0,0,0,1") (ifseqformula "4"))
                                          (rule "applyEqReverse" (formula "45") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "4"))
                                          (rule "applyEqReverse" (formula "45") (term "0,0,0,1,0") (ifseqformula "4"))
                                          (builtin "One Step Simplification" (formula "45"))
                                          (rule "allRight" (formula "45") (inst "sk=iv_23"))
                                          (rule "orRight" (formula "45"))
                                          (rule "notRight" (formula "45"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "applyEqReverse" (formula "47") (term "1,1,1") (ifseqformula "6"))
                                          (rule "applyEqReverse" (formula "2") (term "0,1,1,1") (ifseqformula "6"))
                                          (rule "hideAuxiliaryEq" (formula "6"))
                                          (rule "eqSymm" (formula "46"))
                                          (rule "replace_known_left" (formula "46") (term "0,0,1") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "1")))
                                          (rule "inEqSimp_homoInEq0" (formula "2"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0"))
                                          (rule "inEqSimp_homoInEq0" (formula "46") (term "0,0"))
                                          (rule "eqSymm" (formula "46"))
                                          (rule "polySimp_addComm1" (formula "46") (term "0,0,1"))
                                          (rule "inEqSimp_homoInEq0" (formula "46") (term "0,0"))
                                          (rule "polySimp_addComm1" (formula "46") (term "0,0,0"))
                                          (rule "eqSymm" (formula "46"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                          (rule "polySimp_rightDist" (formula "2") (term "1"))
                                          (rule "mul_literals" (formula "2") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "46") (term "0,0"))
                                          (rule "eqSymm" (formula "46"))
                                          (rule "polySimp_mulComm0" (formula "46") (term "1,0,1"))
                                          (rule "polySimp_rightDist" (formula "46") (term "1,0,1"))
                                          (rule "mul_literals" (formula "46") (term "0,1,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "46") (term "1,1,0,1"))
                                          (rule "polySimp_elimOne" (formula "46") (term "1,1,0,1"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "46") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "46") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "46") (term "1,0,0"))
                                          (rule "mul_literals" (formula "46") (term "0,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "46") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "46") (term "1,1,0,0"))
                                          (rule "eqSymm" (formula "46"))
                                          (rule "pullOutSelect" (formula "46") (term "1,0") (inst "selectSK=arr_371"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "eqSymm" (formula "47"))
                                          (rule "nnf_notAnd" (formula "34") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "34") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "34") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                                          (rule "mul_literals" (formula "34") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "34") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "34") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "36") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "36") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "36") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0"))
                                          (rule "mul_literals" (formula "36") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "36") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "36") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "35") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "35") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0"))
                                          (rule "mul_literals" (formula "35") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "35") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "35") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "23") (term "0,0") (ifseqformula "10"))
                                          (rule "replace_known_right" (formula "23") (term "0") (ifseqformula "44"))
                                          (builtin "One Step Simplification" (formula "23"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "0,1") (ifseqformula "10"))
                                          (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "44"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "lenNonNegative" (formula "54") (term "1,1,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "1,0") (ifseqformula "11"))
                                          (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "48"))
                                          (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "7")))
                                          (rule "true_left" (formula "20"))
                                          (rule "commute_or" (formula "40") (term "0,0"))
                                          (rule "lenNonNegative" (formula "23") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "23"))
                                          (rule "applyEq" (formula "23") (term "0") (ifseqformula "24"))
                                          (rule "qeq_literals" (formula "23"))
                                          (rule "true_left" (formula "23"))
                                          (rule "commute_or_2" (formula "31") (term "0"))
                                          (rule "commute_or" (formula "16") (term "0,0"))
                                          (rule "commute_or" (formula "17") (term "0,0"))
                                          (rule "commute_or" (formula "18") (term "0,0"))
                                          (rule "commute_or_2" (formula "30") (term "0"))
                                          (rule "commute_or_2" (formula "29") (term "0"))
                                          (rule "commute_or" (formula "19") (term "0,0"))
                                          (rule "commute_or_2" (formula "36") (term "0"))
                                          (rule "commute_or_2" (formula "38") (term "0"))
                                          (rule "commute_or_2" (formula "37") (term "0"))
                                          (rule "commute_or" (formula "30") (term "0,0"))
                                          (rule "commute_or" (formula "29") (term "0,0"))
                                          (rule "commute_or" (formula "34") (term "0,0"))
                                          (rule "commute_or" (formula "36") (term "0,0"))
                                          (rule "commute_or" (formula "35") (term "0,0"))
                                          (rule "arrayLengthIsAShort" (formula "6") (term "0"))
                                          (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                          (rule "inEqSimp_antiSymm" (formula "6") (ifseqformula "7"))
                                          (rule "applyEq" (formula "8") (term "0") (ifseqformula "6"))
                                          (rule "leq_literals" (formula "8"))
                                          (rule "true_left" (formula "8"))
                                          (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
                                          (rule "qeq_literals" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "cut_direct" (formula "52") (term "0"))
                                          (branch "CUT: mConcat(int2seq(self.chosen.length), arrConcat(0, array2seq2d(heapAfter_splidAndCheck, result_0))).length = 0 TRUE"
                                             (builtin "One Step Simplification" (formula "53"))
                                             (rule "allRight" (formula "53") (inst "sk=iv_24"))
                                             (rule "orRight" (formula "53"))
                                             (rule "orRight" (formula "53"))
                                             (rule "inEqSimp_leqRight" (formula "53"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_geqRight" (formula "54"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0"))
                                             (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "3"))
                                             (rule "mul_literals" (formula "1") (term "1,0"))
                                             (rule "add_zero_right" (formula "1") (term "0"))
                                             (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
                                             (rule "qeq_literals" (formula "4"))
                                             (rule "true_left" (formula "4"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                             (rule "mul_literals" (formula "1") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
                                             (rule "qeq_literals" (formula "1") (term "0"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                          (branch "CUT: mConcat(int2seq(self.chosen.length), arrConcat(0, array2seq2d(heapAfter_splidAndCheck, result_0))).length = 0 FALSE"
                                             (builtin "One Step Simplification" (formula "53"))
                                             (rule "false_right" (formula "53"))
                                             (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "52"))
                                             (rule "add_zero_right" (formula "1") (term "1"))
                                             (rule "inEqSimp_contradEq7" (formula "52") (ifseqformula "1"))
                                             (rule "times_zero_1" (formula "52") (term "1,0,0"))
                                             (rule "add_literals" (formula "52") (term "0,0"))
                                             (rule "leq_literals" (formula "52") (term "0"))
                                             (builtin "One Step Simplification" (formula "52"))
                                             (rule "false_right" (formula "52"))
                                             (rule "arrayLengthNotNegative" (formula "5") (term "0"))
                                             (rule "inEqSimp_contradInEq1" (formula "6") (ifseqformula "5"))
                                             (rule "qeq_literals" (formula "6") (term "0"))
                                             (builtin "One Step Simplification" (formula "6"))
                                             (rule "closeFalse" (formula "6"))
                                          )
                                       )
                                       (branch "self.sorted.<created> = TRUE FALSE"
                                          (rule "referencedObjectIsCreatedRight" (formula "35") (ifseqformula "42"))
                                          (rule "close" (formula "35") (ifseqformula "7"))
                                       )
                                    )
                                 )
                              )
                              (branch "self.chosen.length ≥ 1 FALSE"
                                 (rule "inEqSimp_geqRight" (formula "34"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_homoInEq1" (formula "4"))
                                 (rule "times_zero_2" (formula "4") (term "1,0"))
                                 (rule "add_zero_right" (formula "4") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                 (rule "mul_literals" (formula "4") (term "1"))
                                 (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "4"))
                                 (rule "qeq_literals" (formula "3") (term "0"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "closeFalse" (formula "3"))
                              )
                           )
                        )
                        (branch "CUT: self.sorted.length = self.sorted@heapAfter_splidAndCheck.length FALSE"
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1") (ifseqformula "17"))
                           (rule "eqSymm" (formula "8") (term "1,0"))
                           (rule "eqSymm" (formula "28"))
                           (rule "eqSymm" (formula "10"))
                           (rule "eqSymm" (formula "11"))
                           (rule "eqSymm" (formula "23"))
                           (rule "eqSymm" (formula "20"))
                           (rule "eqSymm" (formula "14"))
                           (rule "eqSymm" (formula "12"))
                           (rule "eqSymm" (formula "13"))
                           (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "27"))
                           (builtin "One Step Simplification" (formula "5"))
                           (rule "replace_known_right" (formula "19") (term "0,1") (ifseqformula "24"))
                           (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "25")))
                           (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                           (rule "applyEq" (formula "11") (term "1,1,0") (ifseqformula "14"))
                           (rule "applyEq" (formula "28") (term "1") (ifseqformula "10"))
                           (rule "applyEq" (formula "10") (term "1") (ifseqformula "14"))
                           (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "13"))
                           (rule "applyEq" (formula "1") (term "1") (ifseqformula "14"))
                           (rule "applyEq" (formula "23") (term "1") (ifseqformula "13"))
                           (rule "applyEq" (formula "13") (term "1") (ifseqformula "12"))
                           (rule "applyEq" (formula "28") (term "1") (ifseqformula "14"))
                           (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "12"))
                           (rule "applyEq" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "12"))
                           (rule "applyEq" (formula "23") (term "1") (ifseqformula "12"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "22") (inst "i=i"))
                           (rule "greater_literals" (formula "22") (term "0,1"))
                           (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "25")))
                           (rule "sub_literals" (formula "22") (term "2,1,0"))
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                           (rule "array2seqDef" (formula "1") (term "0") (inst "u=u"))
                           (rule "array2seqDef" (formula "8") (term "1,0,0,1,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "8") (term "1,1,0") (inst "u=u"))
                           (rule "eqSymm" (formula "8") (term "1,0"))
                           (rule "array2seqDef" (formula "11") (term "0,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "11") (term "0,1,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "11") (term "1") (inst "u=u"))
                           (rule "array2seqDef" (formula "14") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "14"))
                           (rule "narrowSelectArrayType" (formula "14") (term "2,0") (ifseqformula "2") (ifseqformula "27"))
                           (rule "array2seqDef" (formula "11") (term "1,1,0") (inst "u=u"))
                           (rule "narrowSelectArrayType" (formula "11") (term "2,1,1,0") (ifseqformula "2") (ifseqformula "27"))
                           (rule "applyEq" (formula "11") (term "1,1,0") (ifseqformula "14"))
                           (rule "array2seqDef" (formula "10") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "10"))
                           (rule "narrowSelectArrayType" (formula "10") (term "2,0") (ifseqformula "2") (ifseqformula "27"))
                           (rule "applyEq" (formula "10") (term "0") (ifseqformula "14"))
                           (rule "eqSymm" (formula "10"))
                           (rule "array2seqDef" (formula "1") (term "1") (inst "u=u"))
                           (rule "narrowSelectArrayType" (formula "1") (term "2,1") (ifseqformula "2") (ifseqformula "27"))
                           (rule "applyEq" (formula "1") (term "1") (ifseqformula "14"))
                           (rule "array2seqDef" (formula "28") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "28"))
                           (rule "narrowSelectArrayType" (formula "28") (term "2,0") (ifseqformula "2") (ifseqformula "27"))
                           (rule "applyEq" (formula "28") (term "0") (ifseqformula "14"))
                           (rule "eqSymm" (formula "28"))
                           (rule "array2seqDef" (formula "8") (term "0,0,1,1,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "14") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "14"))
                           (rule "array2seqDef" (formula "11") (term "1,1,0") (inst "u=u"))
                           (rule "applyEq" (formula "11") (term "1,1,0") (ifseqformula "14"))
                           (rule "array2seqDef" (formula "10") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "10"))
                           (rule "applyEq" (formula "10") (term "0") (ifseqformula "14"))
                           (rule "applyEq" (formula "14") (term "1") (ifseqformula "10"))
                           (rule "applyEq" (formula "11") (term "1,1,0") (ifseqformula "10"))
                           (rule "array2seqDef" (formula "1") (term "1") (inst "u=u"))
                           (rule "applyEq" (formula "1") (term "1") (ifseqformula "14"))
                           (rule "equalityToSeqGetAndSeqLenRight" (formula "28") (inst "iv=iv"))
                           (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,1"))
                           (rule "mul_literals" (formula "28") (term "0,1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,1"))
                           (rule "eqSeqDef" (formula "11") (inst "iv=iv"))
                           (rule "andLeft" (formula "11"))
                           (rule "getOfSeqDef" (formula "12") (term "1,1,0"))
                           (rule "castDel" (formula "12") (term "1,1,1,0"))
                           (rule "castDel" (formula "12") (term "2,1,1,0"))
                           (rule "add_zero_right" (formula "12") (term "0,2,1,1,1,0"))
                           (rule "polySimp_elimSub" (formula "12") (term "1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "12") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "12") (term "1,1,0,1,1,0"))
                           (rule "lenOfSeqDef" (formula "11") (term "1"))
                           (rule "polySimp_elimSub" (formula "11") (term "1,1"))
                           (rule "times_zero_2" (formula "11") (term "1,1,1"))
                           (rule "add_zero_right" (formula "11") (term "1,1"))
                           (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "12") (term "0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1"))
                           (rule "add_zero_right" (formula "11") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,1,1,0"))
                           (rule "applyEq" (formula "12") (term "0,1,0,1,0,0") (ifseqformula "11"))
                           (rule "polySimp_addComm1" (formula "12") (term "0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "0,0,1"))
                           (rule "polySimp_elimOne" (formula "11") (term "0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0,1,0,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,1,0,0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "0,0,0,1,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                           (rule "array2seqDef" (formula "29") (term "0,1,1,0,1") (inst "u=u"))
                           (rule "eqSymm" (formula "29") (term "1,0,1"))
                           (rule "getOfSeqDef" (formula "29") (term "0,1,0,1"))
                           (rule "castDel" (formula "29") (term "1,0,1,0,1"))
                           (rule "castDel" (formula "29") (term "2,0,1,0,1"))
                           (rule "add_zero_right" (formula "29") (term "0,2,1,0,1,0,1"))
                           (rule "polySimp_elimSub" (formula "29") (term "1,1,0,0,1,0,1"))
                           (rule "times_zero_2" (formula "29") (term "1,1,1,0,0,1,0,1"))
                           (rule "add_zero_right" (formula "29") (term "1,1,0,0,1,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,1,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0,1,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,1,0,1"))
                           (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,1,0,1"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,1,0,1"))
                           (rule "mul_literals" (formula "29") (term "0,1,1,0,0,1,0,1"))
                           (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,1,0,1"))
                           (rule "array2seqDef" (formula "29") (term "0,1,0") (inst "u=u"))
                           (rule "eqSymm" (formula "29") (term "0"))
                           (rule "lenOfSeqDef" (formula "29") (term "0,0"))
                           (rule "polySimp_elimSub" (formula "29") (term "1,0,0"))
                           (rule "times_zero_2" (formula "29") (term "1,1,0,0"))
                           (rule "add_zero_right" (formula "29") (term "1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "29") (term "0,0,0"))
                           (rule "add_zero_right" (formula "29") (term "0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "29") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "29") (term "0,0,0,0"))
                           (rule "eqSeqDef2" (formula "15") (inst "iv=iv") (ifseqformula "1"))
                           (rule "andLeft" (formula "15"))
                           (rule "eqSymm" (formula "15"))
                           (rule "eqSymm" (formula "16") (term "1,0"))
                           (rule "lenOfSeqDef" (formula "16") (term "1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "16") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "16") (term "1,1,1,1,0,0"))
                           (rule "add_zero_right" (formula "16") (term "1,1,1,0,0"))
                           (rule "lenOfSeqDef" (formula "15") (term "1"))
                           (rule "polySimp_elimSub" (formula "15") (term "1,1"))
                           (rule "times_zero_2" (formula "15") (term "1,1,1"))
                           (rule "add_zero_right" (formula "15") (term "1,1"))
                           (rule "lenOfSeqDef" (formula "15") (term "0"))
                           (rule "polySimp_elimSub" (formula "15") (term "1,0"))
                           (rule "times_zero_2" (formula "15") (term "1,1,0"))
                           (rule "add_zero_right" (formula "15") (term "1,0"))
                           (rule "getOfSeqDef" (formula "16") (term "1,1,0"))
                           (rule "castDel" (formula "16") (term "2,1,1,0"))
                           (rule "castDel" (formula "16") (term "1,1,1,0"))
                           (rule "add_zero_right" (formula "16") (term "0,2,1,1,1,0"))
                           (rule "polySimp_elimSub" (formula "16") (term "1,1,0,1,1,0"))
                           (rule "times_zero_2" (formula "16") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "16") (term "1,1,0,1,1,0"))
                           (rule "getOfSeqDef" (formula "16") (term "0,1,0"))
                           (rule "castDel" (formula "16") (term "1,0,1,0"))
                           (rule "castDel" (formula "16") (term "2,0,1,0"))
                           (rule "add_zero_right" (formula "16") (term "0,2,1,0,1,0"))
                           (rule "polySimp_elimSub" (formula "16") (term "1,1,0,0,1,0"))
                           (rule "times_zero_2" (formula "16") (term "1,1,1,0,0,1,0"))
                           (rule "add_zero_right" (formula "16") (term "1,1,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "16") (term "0,1,1,0,0"))
                           (rule "add_zero_right" (formula "16") (term "0,0,1,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "15") (term "0,1"))
                           (rule "add_zero_right" (formula "15") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0"))
                           (rule "add_zero_right" (formula "15") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "0,0,1"))
                           (rule "polySimp_elimOne" (formula "15") (term "0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,1,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0,1,0,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,1,0,0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "16") (term "0,0,0,1,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                           (rule "eqSeqDef2" (formula "10") (inst "iv=iv") (ifseqformula "10"))
                           (builtin "One Step Simplification" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "pullOutSelect" (formula "24") (term "0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_22"))
                           (rule "applyEq" (formula "22") (term "1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "30") (term "0,0,0,0,1,1,1,0,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "30") (term "1,1,1,0,1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "30") (term "1,1,1,0,1,1,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "30") (term "1,1,1,0,1,1,1,0,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "30") (term "0,0,0,0,1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "30") (term "0,0,0,0,1,1,0,1") (ifseqformula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "28")) (ifInst ""  (formula "4")))
                           (rule "applyEqReverse" (formula "25") (term "0,0") (ifseqformula "1"))
                           (rule "close" (formula "25") (ifseqformula "14"))
                        )
                     )
                     (branch "CUT: array2seq(heapAfter_splidAndCheck, self.concatenated@heapAfter_splidAndCheck) = array2seq(heap, self.concatenated) FALSE"
                        (rule "equalityToSeqGetAndSeqLenRight" (formula "22") (inst "iv=iv") (userinteraction))
                        (rule "andRight" (formula "22") (userinteraction))
                        (branch "Case 1"
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "1") (ifseqformula "16"))
                           (rule "eqSymm" (formula "27"))
                           (rule "eqSymm" (formula "7") (term "1,0"))
                           (rule "eqSymm" (formula "9"))
                           (rule "eqSymm" (formula "10"))
                           (rule "eqSymm" (formula "13"))
                           (rule "eqSymm" (formula "11"))
                           (rule "eqSymm" (formula "19"))
                           (rule "eqSymm" (formula "12"))
                           (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "26"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "24"))
                           (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "23")))
                           (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
                           (rule "applyEq" (formula "22") (term "0,1") (ifseqformula "13"))
                           (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "12"))
                           (rule "applyEq" (formula "10") (term "1,1,0") (ifseqformula "13"))
                           (rule "applyEq" (formula "9") (term "1") (ifseqformula "13"))
                           (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "11"))
                           (rule "applyEq" (formula "12") (term "1") (ifseqformula "11"))
                           (rule "applyEq" (formula "7") (term "0,1,0,0,1,0,0") (ifseqformula "11"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "21") (inst "i=i"))
                           (rule "greater_literals" (formula "21") (term "0,1"))
                           (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "24")))
                           (rule "sub_literals" (formula "21") (term "2,1,0"))
                           (builtin "One Step Simplification" (formula "21"))
                           (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                           (rule "array2seqDef" (formula "22") (term "0,0") (inst "u=u"))
                           (rule "lenOfSeqDef" (formula "22") (term "0"))
                           (rule "polySimp_elimSub" (formula "22") (term "1,0"))
                           (rule "times_zero_2" (formula "22") (term "1,1,0"))
                           (rule "add_zero_right" (formula "22") (term "1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0"))
                           (rule "add_zero_right" (formula "22") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0"))
                           (rule "polySimp_elimOne" (formula "22") (term "0,0,0"))
                           (rule "equalityToSeqGetAndSeqLenRight" (formula "27") (inst "iv=iv"))
                           (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1"))
                           (rule "mul_literals" (formula "27") (term "0,1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1"))
                           (rule "array2seqDef" (formula "7") (term "0,0,0,1,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "7") (term "1,1,0") (inst "u=u"))
                           (rule "eqSymm" (formula "7") (term "1,0"))
                           (rule "array2seqDef" (formula "10") (term "0,1,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "10") (term "0,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "10") (term "1") (inst "u=u"))
                           (rule "array2seqDef" (formula "13") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "13"))
                           (rule "narrowSelectArrayType" (formula "13") (term "2,0") (ifseqformula "1") (ifseqformula "26"))
                           (rule "array2seqDef" (formula "22") (term "0,1") (inst "u=u"))
                           (rule "eqSymm" (formula "22"))
                           (rule "lenOfSeqDef" (formula "22") (term "0"))
                           (rule "polySimp_elimSub" (formula "22") (term "1,0"))
                           (rule "times_zero_2" (formula "22") (term "1,1,0"))
                           (rule "add_zero_right" (formula "22") (term "1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0"))
                           (rule "add_zero_right" (formula "22") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0"))
                           (rule "eqSymm" (formula "22"))
                           (rule "polySimp_elimOne" (formula "22") (term "0,0,1"))
                           (rule "array2seqDef" (formula "10") (term "1,1,0") (inst "u=u"))
                           (rule "narrowSelectArrayType" (formula "10") (term "2,1,1,0") (ifseqformula "1") (ifseqformula "26"))
                           (rule "applyEq" (formula "10") (term "1,1,0") (ifseqformula "13"))
                           (rule "array2seqDef" (formula "9") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "9"))
                           (rule "narrowSelectArrayType" (formula "9") (term "2,0") (ifseqformula "1") (ifseqformula "26"))
                           (rule "applyEq" (formula "9") (term "0") (ifseqformula "13"))
                           (rule "eqSymm" (formula "9"))
                           (rule "array2seqDef" (formula "27") (term "0,1,1,0,1") (inst "u=u"))
                           (rule "eqSymm" (formula "27") (term "1,0,1"))
                           (rule "getOfSeqDef" (formula "27") (term "0,1,0,1"))
                           (rule "castDel" (formula "27") (term "2,0,1,0,1"))
                           (rule "castDel" (formula "27") (term "1,0,1,0,1"))
                           (rule "add_zero_right" (formula "27") (term "0,2,1,0,1,0,1"))
                           (rule "polySimp_elimSub" (formula "27") (term "1,1,0,0,1,0,1"))
                           (rule "times_zero_2" (formula "27") (term "1,1,1,0,0,1,0,1"))
                           (rule "add_zero_right" (formula "27") (term "1,1,0,0,1,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0,1,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,1,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1,0,1"))
                           (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1,0,1"))
                           (rule "mul_literals" (formula "27") (term "0,1,1,0,0,1,0,1"))
                           (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1,0,1"))
                           (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1,0,1"))
                           (rule "array2seqDef" (formula "27") (term "0,1,0") (inst "u=u"))
                           (rule "eqSymm" (formula "27") (term "0"))
                           (rule "lenOfSeqDef" (formula "27") (term "0,0"))
                           (rule "polySimp_elimSub" (formula "27") (term "1,0,0"))
                           (rule "times_zero_2" (formula "27") (term "1,1,0,0"))
                           (rule "add_zero_right" (formula "27") (term "1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "27") (term "0,0,0"))
                           (rule "add_zero_right" (formula "27") (term "0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "27") (term "0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "27") (term "0,0,0,0"))
                           (rule "array2seqDef" (formula "7") (term "1,0,1,1,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "13") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "13"))
                           (rule "eqSeqDef" (formula "10") (inst "iv=iv"))
                           (rule "andLeft" (formula "10"))
                           (rule "lenOfSeqDef" (formula "10") (term "1"))
                           (rule "polySimp_elimSub" (formula "10") (term "1,1"))
                           (rule "times_zero_2" (formula "10") (term "1,1,1"))
                           (rule "add_zero_right" (formula "10") (term "1,1"))
                           (rule "getOfSeqDef" (formula "11") (term "1,1,0"))
                           (rule "castDel" (formula "11") (term "1,1,1,0"))
                           (rule "castDel" (formula "11") (term "2,1,1,0"))
                           (rule "add_zero_right" (formula "11") (term "0,2,1,1,1,0"))
                           (rule "polySimp_elimSub" (formula "11") (term "1,1,0,1,1,0"))
                           (rule "times_zero_2" (formula "11") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "11") (term "1,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "11") (term "0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1"))
                           (rule "add_zero_right" (formula "10") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,1,1,0"))
                           (rule "applyEq" (formula "11") (term "0,1,0,1,0,0") (ifseqformula "10"))
                           (rule "polySimp_addComm1" (formula "11") (term "0,1,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "0,0,1"))
                           (rule "polySimp_elimOne" (formula "10") (term "0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,1,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "0,0,1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "0,0,1,1,1,0,0"))
                           (rule "array2seqDef" (formula "9") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "9"))
                           (rule "applyEq" (formula "14") (term "0") (ifseqformula "9"))
                           (rule "eqSymm" (formula "14"))
                           (rule "pullOutSelect" (formula "20") (term "1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_21"))
                           (rule "applyEq" (formula "29") (term "0,0,0,0,1,1,1,0,0,1") (ifseqformula "20"))
                           (rule "applyEq" (formula "29") (term "1,1,1,0,1,1,1,0,0,1") (ifseqformula "20"))
                           (rule "applyEq" (formula "29") (term "1,1,1,0,1,0") (ifseqformula "20"))
                           (rule "applyEq" (formula "29") (term "0,0,0,0,1,0") (ifseqformula "20"))
                           (rule "applyEq" (formula "29") (term "1,1,1,0,1,1,0,1") (ifseqformula "20"))
                           (rule "applyEq" (formula "29") (term "0,0,0,0,1,1,0,1") (ifseqformula "20"))
                           (rule "simplifySelectOfAnonEQ" (formula "20") (ifseqformula "17"))
                           (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "27")) (ifInst ""  (formula "2")))
                           (rule "applyEqReverse" (formula "21") (term "1,0") (ifseqformula "20"))
                           (rule "applyEqReverse" (formula "29") (term "0,0,0,0,1,1,1,0,0,1") (ifseqformula "20"))
                           (rule "applyEqReverse" (formula "29") (term "1,1,1,0,1,1,1,0,0,1") (ifseqformula "20"))
                           (rule "applyEqReverse" (formula "29") (term "1,1,1,0,1,0") (ifseqformula "20"))
                           (rule "applyEqReverse" (formula "29") (term "0,0,0,0,1,0") (ifseqformula "20"))
                           (rule "applyEqReverse" (formula "29") (term "1,1,1,0,1,1,0,1") (ifseqformula "20"))
                           (rule "applyEqReverse" (formula "29") (term "0,0,0,0,1,1,0,1") (ifseqformula "20"))
                           (rule "hideAuxiliaryEq" (formula "20"))
                           (rule "applyEq" (formula "28") (term "0,0,0,1,1,1,0,0,1") (ifseqformula "13"))
                           (rule "applyEq" (formula "28") (term "1,1,0,1,1,1,0,0,1") (ifseqformula "20"))
                           (rule "applyEq" (formula "28") (term "1,1,0,1,0") (ifseqformula "20"))
                           (rule "applyEq" (formula "28") (term "1,1,0,1,1,0,1") (ifseqformula "20"))
                           (rule "applyEq" (formula "28") (term "0,0,0,1,0") (ifseqformula "13"))
                           (rule "applyEq" (formula "28") (term "0,0,0,1,1,0,1") (ifseqformula "13"))
                           (rule "array2seqDef" (formula "11") (term "1,1,0,0,1,0") (inst "u=u"))
                           (rule "applyEq" (formula "11") (term "1,1,0,0,1,0") (ifseqformula "9"))
                           (rule "array2seqDef" (formula "10") (term "1,1,0,0") (inst "u=u"))
                           (rule "applyEq" (formula "10") (term "1,1,0,0") (ifseqformula "9"))
                           (rule "pullOutSelect" (formula "23") (term "0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_18"))
                           (rule "applyEq" (formula "29") (term "0,0,0,0,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "24") (term "0,0,0,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "29") (term "1,1,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "29") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "29") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "27")) (ifInst ""  (formula "3")))
                           (rule "applyEqReverse" (formula "24") (term "0,1,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "24") (term "0,0,0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "29") (term "1,1,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "29") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "29") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "eqSeqDef2" (formula "14") (inst "iv=iv") (ifseqformula "9"))
                           (rule "andLeft" (formula "14"))
                           (rule "eqSymm" (formula "15") (term "1,0"))
                           (rule "eqSymm" (formula "14"))
                           (rule "lenOfSeqDef" (formula "15") (term "1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "15") (term "1,1,1,0,0"))
                           (rule "times_zero_2" (formula "15") (term "1,1,1,1,0,0"))
                           (rule "add_zero_right" (formula "15") (term "1,1,1,0,0"))
                           (rule "getOfSeqDef" (formula "15") (term "0,1,0"))
                           (rule "castDel" (formula "15") (term "2,0,1,0"))
                           (rule "castDel" (formula "15") (term "1,0,1,0"))
                           (rule "add_zero_right" (formula "15") (term "0,2,1,0,1,0"))
                           (rule "eqSymm" (formula "15") (term "1,0"))
                           (rule "polySimp_elimSub" (formula "15") (term "1,1,0,1,1,0"))
                           (rule "times_zero_2" (formula "15") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "15") (term "1,1,0,1,1,0"))
                           (rule "lenOfSeqDef" (formula "14") (term "0"))
                           (rule "eqSymm" (formula "14"))
                           (rule "polySimp_elimSub" (formula "14") (term "1,1"))
                           (rule "times_zero_2" (formula "14") (term "1,1,1"))
                           (rule "add_zero_right" (formula "14") (term "1,1"))
                           (rule "getOfSeqDef" (formula "15") (term "0,1,0"))
                           (rule "castDel" (formula "15") (term "2,0,1,0"))
                           (rule "castDel" (formula "15") (term "1,0,1,0"))
                           (rule "add_zero_right" (formula "15") (term "0,2,1,0,1,0"))
                           (rule "eqSymm" (formula "15") (term "1,0"))
                           (rule "polySimp_elimSub" (formula "15") (term "1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "15") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "15") (term "1,1,0,1,1,0"))
                           (rule "lenOfSeqDef" (formula "14") (term "0"))
                           (rule "eqSymm" (formula "14"))
                           (rule "polySimp_elimSub" (formula "14") (term "1,1"))
                           (rule "times_zero_2" (formula "14") (term "1,1,1"))
                           (rule "add_zero_right" (formula "14") (term "1,1"))
                           (rule "inEqSimp_ltToLeq" (formula "15") (term "0,1,1,0,0"))
                           (rule "add_zero_right" (formula "15") (term "0,0,1,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "15") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "14") (term "0,1"))
                           (rule "add_zero_right" (formula "14") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0"))
                           (rule "add_zero_right" (formula "14") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "15") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,1,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "0,0,1"))
                           (rule "polySimp_elimOne" (formula "14") (term "0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0"))
                           (rule "polySimp_elimOne" (formula "14") (term "0,0,0"))
                           (rule "close" (formula "24") (ifseqformula "14"))
                        )
                        (branch "Case 2"
                           (rule "allRight" (formula "22") (inst "sk=iv_21") (userinteraction))
                           (rule "impRight" (formula "22") (userinteraction))
                           (rule "array2seqDef" (formula "23") (term "0,0") (inst "u=u") (userinteraction))
                           (rule "array2seqDef" (formula "23") (term "0,1") (inst "u=u") (userinteraction))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1") (ifseqformula "17"))
                           (rule "andLeft" (formula "1"))
                           (rule "eqSymm" (formula "29"))
                           (rule "eqSymm" (formula "21"))
                           (rule "eqSymm" (formula "9") (term "1,0"))
                           (rule "eqSymm" (formula "11"))
                           (rule "eqSymm" (formula "12"))
                           (rule "eqSymm" (formula "13"))
                           (rule "eqSymm" (formula "14"))
                           (rule "eqSymm" (formula "15"))
                           (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "28"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "replace_known_right" (formula "20") (term "0,1") (ifseqformula "25"))
                           (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "26")))
                           (rule "getOfSeqDef" (formula "24") (term "1"))
                           (rule "castDel" (formula "24") (term "1,1"))
                           (rule "castDel" (formula "24") (term "2,1"))
                           (rule "add_zero_right" (formula "24") (term "0,2,1,1"))
                           (rule "replace_known_left" (formula "24") (term "0,0,1") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "polySimp_elimSub" (formula "24") (term "1,0,1"))
                           (rule "mul_literals" (formula "24") (term "1,1,0,1"))
                           (rule "add_zero_right" (formula "24") (term "1,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                           (rule "getOfSeqDef" (formula "24") (term "0"))
                           (rule "castDel" (formula "24") (term "2,0"))
                           (rule "castDel" (formula "24") (term "1,0"))
                           (rule "add_zero_right" (formula "24") (term "0,2,1,0"))
                           (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "polySimp_elimSub" (formula "24") (term "1,0,0"))
                           (rule "times_zero_2" (formula "24") (term "1,1,0,0"))
                           (rule "add_zero_right" (formula "24") (term "1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "24") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,1"))
                           (rule "polySimp_addComm1" (formula "24") (term "0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0"))
                           (rule "polySimp_addComm1" (formula "24") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "1"))
                           (rule "applyEq" (formula "11") (term "1") (ifseqformula "15"))
                           (rule "applyEq" (formula "12") (term "1,1,0") (ifseqformula "15"))
                           (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "14"))
                           (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "13"))
                           (rule "applyEq" (formula "9") (term "0,1,0,0,1,0,0") (ifseqformula "13"))
                           (rule "applyEq" (formula "14") (term "1") (ifseqformula "13"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "0,0,1"))
                           (rule "polySimp_elimOne" (formula "24") (term "0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "0,0,0"))
                           (rule "polySimp_elimOne" (formula "24") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "23") (inst "i=i"))
                           (rule "greater_literals" (formula "23") (term "0,1"))
                           (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "26")))
                           (rule "sub_literals" (formula "23") (term "2,1,0"))
                           (builtin "One Step Simplification" (formula "23"))
                           (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                           (rule "equalityToSeqGetAndSeqLenRight" (formula "29") (inst "iv=iv"))
                           (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,1"))
                           (rule "mul_literals" (formula "29") (term "0,1,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,1"))
                           (rule "array2seqDef" (formula "9") (term "1,1,0") (inst "u=u"))
                           (rule "eqSymm" (formula "9") (term "1,0"))
                           (rule "array2seqDef" (formula "12") (term "0,1,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "12") (term "0,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "12") (term "1") (inst "u=u"))
                           (rule "array2seqDef" (formula "15") (term "0") (inst "u=u"))
                           (rule "array2seqDef" (formula "15") (term "1") (inst "u=u"))
                           (rule "narrowSelectArrayType" (formula "15") (term "2,1") (ifseqformula "3") (ifseqformula "28"))
                           (rule "array2seqDef" (formula "11") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "11"))
                           (rule "narrowSelectArrayType" (formula "11") (term "2,0") (ifseqformula "3") (ifseqformula "28"))
                           (rule "applyEq" (formula "15") (term "1") (ifseqformula "11"))
                           (rule "array2seqDef" (formula "12") (term "1,1,0") (inst "u=u"))
                           (rule "narrowSelectArrayType" (formula "12") (term "2,1,1,0") (ifseqformula "3") (ifseqformula "28"))
                           (rule "applyEq" (formula "12") (term "1,1,0") (ifseqformula "11"))
                           (rule "array2seqDef" (formula "2") (term "0,0") (inst "u=u"))
                           (rule "lenOfSeqDef" (formula "2") (term "0"))
                           (rule "polySimp_elimSub" (formula "2") (term "1,0"))
                           (rule "times_zero_2" (formula "2") (term "1,1,0"))
                           (rule "add_zero_right" (formula "2") (term "1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0"))
                           (rule "add_zero_right" (formula "2") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0,0,0"))
                           (rule "array2seqDef" (formula "29") (term "0,1,1,0,1") (inst "u=u"))
                           (rule "eqSymm" (formula "29") (term "1,0,1"))
                           (rule "getOfSeqDef" (formula "29") (term "0,1,0,1"))
                           (rule "castDel" (formula "29") (term "2,0,1,0,1"))
                           (rule "castDel" (formula "29") (term "1,0,1,0,1"))
                           (rule "add_zero_right" (formula "29") (term "0,2,1,0,1,0,1"))
                           (rule "polySimp_elimSub" (formula "29") (term "1,1,0,0,1,0,1"))
                           (rule "times_zero_2" (formula "29") (term "1,1,1,0,0,1,0,1"))
                           (rule "add_zero_right" (formula "29") (term "1,1,0,0,1,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,1,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0,1,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,1,0,1"))
                           (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,1,0,1"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,1,0,1"))
                           (rule "mul_literals" (formula "29") (term "0,1,1,0,0,1,0,1"))
                           (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,1,0,1"))
                           (rule "array2seqDef" (formula "29") (term "0,1,0") (inst "u=u"))
                           (rule "eqSymm" (formula "29") (term "0"))
                           (rule "lenOfSeqDef" (formula "29") (term "0,0"))
                           (rule "polySimp_elimSub" (formula "29") (term "1,0,0"))
                           (rule "times_zero_2" (formula "29") (term "1,1,0,0"))
                           (rule "add_zero_right" (formula "29") (term "1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "29") (term "0,0,0"))
                           (rule "add_zero_right" (formula "29") (term "0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "29") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "29") (term "0,0,0,0"))
                           (rule "array2seqDef" (formula "9") (term "0,0,1,1,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "9") (term "1,0,1,1,0") (inst "u=u"))
                           (rule "pullOutSelect" (formula "21") (term "1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_20"))
                           (rule "applyEq" (formula "30") (term "0,0,0,0,1,1,1,0,0,1") (ifseqformula "21"))
                           (rule "applyEq" (formula "30") (term "1,1,1,0,1,1,1,0,0,1") (ifseqformula "21"))
                           (rule "applyEq" (formula "30") (term "0,0,0,0,1,0") (ifseqformula "21"))
                           (rule "applyEq" (formula "30") (term "0,0,0,0,1,1,0,1") (ifseqformula "21"))
                           (rule "applyEq" (formula "30") (term "1,1,1,0,1,1,0,1") (ifseqformula "21"))
                           (rule "applyEq" (formula "30") (term "1,1,1,0,1,0") (ifseqformula "21"))
                           (rule "simplifySelectOfAnonEQ" (formula "21") (ifseqformula "18"))
                           (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "28")) (ifInst ""  (formula "4")))
                           (rule "applyEqReverse" (formula "22") (term "1,0") (ifseqformula "21"))
                           (rule "applyEqReverse" (formula "30") (term "0,0,0,0,1,1,1,0,0,1") (ifseqformula "21"))
                           (rule "applyEqReverse" (formula "30") (term "1,1,1,0,1,1,1,0,0,1") (ifseqformula "21"))
                           (rule "applyEqReverse" (formula "30") (term "0,0,0,0,1,0") (ifseqformula "21"))
                           (rule "applyEqReverse" (formula "30") (term "0,0,0,0,1,1,0,1") (ifseqformula "21"))
                           (rule "applyEqReverse" (formula "30") (term "1,1,1,0,1,1,0,1") (ifseqformula "21"))
                           (rule "applyEqReverse" (formula "30") (term "1,1,1,0,1,0") (ifseqformula "21"))
                           (rule "hideAuxiliaryEq" (formula "21"))
                           (rule "applyEq" (formula "29") (term "1,1,0,1,1,1,0,0,1") (ifseqformula "21"))
                           (rule "applyEq" (formula "29") (term "0,0,0,1,1,1,0,0,1") (ifseqformula "14"))
                           (rule "applyEq" (formula "29") (term "1,1,0,1,0") (ifseqformula "21"))
                           (rule "applyEq" (formula "29") (term "1,1,0,1,1,0,1") (ifseqformula "21"))
                           (rule "applyEq" (formula "29") (term "0,0,0,1,0") (ifseqformula "14"))
                           (rule "applyEq" (formula "29") (term "0,0,0,1,1,0,1") (ifseqformula "14"))
                           (rule "eqSeqDef" (formula "12") (inst "iv=iv"))
                           (rule "andLeft" (formula "12"))
                           (rule "lenOfSeqDef" (formula "12") (term "1"))
                           (rule "polySimp_elimSub" (formula "12") (term "1,1"))
                           (rule "mul_literals" (formula "12") (term "1,1,1"))
                           (rule "add_zero_right" (formula "12") (term "1,1"))
                           (rule "getOfSeqDef" (formula "13") (term "1,1,0"))
                           (rule "castDel" (formula "13") (term "1,1,1,0"))
                           (rule "castDel" (formula "13") (term "2,1,1,0"))
                           (rule "add_zero_right" (formula "13") (term "0,2,1,1,1,0"))
                           (rule "polySimp_elimSub" (formula "13") (term "1,1,0,1,1,0"))
                           (rule "times_zero_2" (formula "13") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "13") (term "1,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "13") (term "0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "12") (term "0,1"))
                           (rule "add_zero_right" (formula "12") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,1,1,0"))
                           (rule "applyEq" (formula "13") (term "0,1,0,1,0,0") (ifseqformula "12"))
                           (rule "polySimp_addComm1" (formula "13") (term "0,1,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "0,0,1"))
                           (rule "polySimp_elimOne" (formula "12") (term "0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,1,0,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,1,0,0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "13") (term "0,0,0,1,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                           (rule "pullOutSelect" (formula "25") (term "1,0") (inst "selectSK=arr_369"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "eqSeqDef2" (formula "12") (inst "iv=iv") (ifseqformula "12"))
                           (builtin "One Step Simplification" (formula "12"))
                           (rule "true_left" (formula "12"))
                           (rule "eqSeqDef2" (formula "16") (inst "iv=iv") (ifseqformula "16"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "true_left" (formula "16"))
                           (rule "pullOutSelect" (formula "24") (term "0,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_17"))
                           (rule "applyEq" (formula "2") (term "1,2,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "4") (term "0,1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "30") (term "1,1,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "4") (term "0,0,0,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "2") (term "0,0,0,0,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "30") (term "0,0,0,0,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "30") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "2") (term "1,1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "30") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "28")) (ifInst ""  (formula "6")))
                           (rule "applyEqReverse" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "2") (term "1,2,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "4") (term "0,1,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "30") (term "1,1,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "4") (term "0,0,0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "2") (term "0,0,0,0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "30") (term "0,0,0,0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "30") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "2") (term "1,1,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "30") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "eqSymm" (formula "24"))
                           (rule "nnf_imp2or" (formula "23") (term "0"))
                           (rule "nnf_imp2or" (formula "10") (term "0"))
                           (rule "nnf_imp2or" (formula "13") (term "0"))
                           (rule "Definition_axiom_for_ghostFieldsNonNull_in_verif_selectvoting_system_core_MixServer" (formula "9") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
                           (builtin "One Step Simplification" (formula "9"))
                           (rule "andLeft" (formula "9"))
                           (rule "andLeft" (formula "9"))
                           (rule "andLeft" (formula "9"))
                           (rule "andLeft" (formula "9"))
                           (rule "andLeft" (formula "9"))
                           (rule "notLeft" (formula "11"))
                           (rule "notLeft" (formula "10"))
                           (rule "andLeft" (formula "9"))
                           (rule "notLeft" (formula "10"))
                           (rule "andLeft" (formula "9"))
                           (rule "notLeft" (formula "10"))
                           (rule "notLeft" (formula "9"))
                           (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "29"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "ifthenelse_negated" (formula "1") (term "0"))
                           (rule "narrowSelectArrayType" (formula "15") (term "1,1,1,0") (ifseqformula "4") (ifseqformula "30"))
                           (rule "narrowSelectArrayType" (formula "31") (term "1,0") (ifseqformula "4") (ifseqformula "29"))
                           (rule "eqSymm" (formula "31"))
                           (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "19") (ifseqformula "29"))
                           (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "4") (ifseqformula "29"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                           (rule "applyEq" (formula "10") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                           (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                           (rule "nnf_imp2or" (formula "36") (term "0,1"))
                           (rule "nnf_notAnd" (formula "25") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                           (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                           (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "12") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "15") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                           (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                           (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                           (rule "nnf_imp2or" (formula "9") (term "0"))
                           (rule "nnf_imp2or" (formula "10") (term "0"))
                           (rule "nnf_imp2or" (formula "11") (term "0"))
                           (rule "nnf_notAnd" (formula "36") (term "0,0,1"))
                           (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,1"))
                           (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,1"))
                           (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,1"))
                           (rule "add_zero_left" (formula "36") (term "0,0,1,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0,1"))
                           (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0,1"))
                           (rule "times_zero_1" (formula "36") (term "1,0,0,0,0,0,1"))
                           (rule "add_zero_right" (formula "36") (term "0,0,0,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0,1"))
                           (rule "mul_literals" (formula "36") (term "1,0,0,0,1"))
                           (rule "nnf_notAnd" (formula "9") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
                           (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                           (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "10") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
                           (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                           (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "11") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                           (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                           (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                           (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "24") (ifseqformula "6"))
                           (rule "replaceKnownSelect_taclet111000020_0" (formula "24") (term "1,1,0,0,0,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet111000020_1" (formula "24") (term "1,1,0,0,0,0,0,0"))
                           (rule "replaceKnownSelect_taclet111000020_3" (formula "24") (term "0,0,1,0,0,0,0,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet111000020_4" (formula "24") (term "0,0,1,0,0,0,0,0,0,0"))
                           (rule "andLeft" (formula "24"))
                           (rule "notLeft" (formula "25"))
                           (rule "andLeft" (formula "24"))
                           (rule "notLeft" (formula "25"))
                           (rule "andLeft" (formula "24"))
                           (rule "notLeft" (formula "25"))
                           (rule "andLeft" (formula "24"))
                           (rule "andLeft" (formula "24"))
                           (rule "notLeft" (formula "26"))
                           (rule "andLeft" (formula "24"))
                           (rule "andLeft" (formula "24"))
                           (rule "andLeft" (formula "24"))
                           (rule "notLeft" (formula "24"))
                           (rule "notLeft" (formula "24"))
                           (rule "nonNull" (formula "26") (inst "i=i"))
                           (rule "sub_literals" (formula "26") (term "2,1,0,1,1"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "greater_literals" (formula "26") (term "0,1"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "andLeft" (formula "26"))
                           (rule "notLeft" (formula "26"))
                           (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "25") (inst "i=i"))
                           (rule "sub_literals" (formula "25") (term "2,1,0,1,1"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "greater_literals" (formula "25") (term "0,1"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "andLeft" (formula "25"))
                           (rule "notLeft" (formula "25"))
                           (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "24") (inst "i=i"))
                           (rule "sub_literals" (formula "24") (term "2,1,0,1,1"))
                           (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "37")))
                           (rule "greater_literals" (formula "24") (term "0"))
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                           (rule "applyEq" (formula "24") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                           (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_17"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")) (ifInst ""  (formula "6")))
                           (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "narrowSelectArrayType" (formula "15") (term "2,0,1,0,0,1,0") (ifseqformula "4") (ifseqformula "34"))
                           (rule "narrowSelectArrayType" (formula "14") (term "2,0,1,0,0") (ifseqformula "4") (ifseqformula "34"))
                           (rule "narrowSelectArrayType" (formula "12") (term "2,0,0,1,1,0") (ifseqformula "4") (ifseqformula "34"))
                           (rule "pullOutSelect" (formula "33") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_17"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")) (ifInst ""  (formula "6")))
                           (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_17"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")) (ifInst ""  (formula "6")))
                           (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "31") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_17"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")) (ifInst ""  (formula "6")))
                           (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "30") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_17"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")) (ifInst ""  (formula "6")))
                           (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "26") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_18"))
                           (rule "applyEq" (formula "27") (term "0,1,1,1,0,0") (ifseqformula "26"))
                           (rule "applyEq" (formula "30") (term "0") (ifseqformula "26"))
                           (rule "simplifySelectOfAnonEQ" (formula "26") (ifseqformula "20"))
                           (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "43")) (ifInst ""  (formula "5")))
                           (rule "applyEqReverse" (formula "27") (term "0,1,1,1,0,0") (ifseqformula "26"))
                           (rule "applyEqReverse" (formula "27") (term "1,0,0,1,0") (ifseqformula "26"))
                           (rule "applyEqReverse" (formula "30") (term "0") (ifseqformula "26"))
                           (rule "hideAuxiliaryEq" (formula "26"))
                           (rule "pullOutSelect" (formula "25") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_19"))
                           (rule "applyEq" (formula "26") (term "0,1,1,1,0,0") (ifseqformula "25"))
                           (rule "applyEq" (formula "29") (term "0") (ifseqformula "25"))
                           (rule "simplifySelectOfAnonEQ" (formula "25") (ifseqformula "20"))
                           (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "42")) (ifInst ""  (formula "5")))
                           (rule "applyEqReverse" (formula "26") (term "0,1,1,1,0,0") (ifseqformula "25"))
                           (rule "applyEqReverse" (formula "29") (term "0") (ifseqformula "25"))
                           (rule "applyEqReverse" (formula "26") (term "1,0,0,1,0") (ifseqformula "25"))
                           (rule "hideAuxiliaryEq" (formula "25"))
                           (rule "applyEq" (formula "25") (term "1,1,1,0,0") (ifseqformula "16"))
                           (rule "nnf_imp2or" (formula "24") (term "0"))
                           (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "18") (ifseqformula "6"))
                           (rule "andLeft" (formula "18"))
                           (rule "notLeft" (formula "19"))
                           (rule "andLeft" (formula "18"))
                           (rule "andLeft" (formula "18"))
                           (rule "notLeft" (formula "20"))
                           (rule "notLeft" (formula "19"))
                           (rule "andLeft" (formula "18"))
                           (rule "notLeft" (formula "19"))
                           (rule "andLeft" (formula "18"))
                           (rule "andLeft" (formula "18"))
                           (rule "andLeft" (formula "18"))
                           (rule "andLeft" (formula "18"))
                           (rule "notLeft" (formula "18"))
                           (rule "notLeft" (formula "18"))
                           (rule "nonNull" (formula "20") (inst "i=i"))
                           (rule "greater_literals" (formula "20") (term "0,1"))
                           (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "34")))
                           (rule "sub_literals" (formula "20") (term "2,1,0"))
                           (builtin "One Step Simplification" (formula "20"))
                           (rule "narrowSelectArrayType" (formula "20") (term "0,0,1,0") (ifseqformula "4") (ifseqformula "34"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "19") (inst "i=i"))
                           (rule "greater_literals" (formula "19") (term "0,1"))
                           (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "35")))
                           (rule "sub_literals" (formula "19") (term "2,1,0"))
                           (builtin "One Step Simplification" (formula "19"))
                           (rule "narrowSelectArrayType" (formula "19") (term "0,0,1,0") (ifseqformula "4") (ifseqformula "35"))
                           (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                           (rule "applyEq" (formula "19") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "18") (inst "i=i"))
                           (rule "sub_literals" (formula "18") (term "2,1,0,1,1"))
                           (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "36")))
                           (rule "greater_literals" (formula "18") (term "0"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "narrowSelectArrayType" (formula "18") (term "0,0,1,0") (ifseqformula "4") (ifseqformula "36"))
                           (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                           (rule "applyEq" (formula "18") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                           (rule "nnf_imp2or" (formula "28") (term "0"))
                           (rule "nnf_imp2or" (formula "27") (term "0"))
                           (rule "nnf_notAnd" (formula "26") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                           (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "26") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                           (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                           (rule "nnf_imp2or" (formula "20") (term "0"))
                           (rule "nnf_imp2or" (formula "19") (term "0"))
                           (rule "commute_or_2" (formula "29") (term "0"))
                           (rule "nnf_imp2or" (formula "18") (term "0"))
                           (rule "arrayLengthIsAShort" (formula "16") (term "1"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "true_left" (formula "16"))
                           (rule "arrayLengthNotNegative" (formula "16") (term "0"))
                           (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
                           (rule "arrayLengthIsAShort" (formula "17") (term "0"))
                           (builtin "One Step Simplification" (formula "17"))
                           (rule "true_left" (formula "17"))
                           (rule "arrayLengthNotNegative" (formula "17") (term "1"))
                           (rule "nnf_notAnd" (formula "29") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0"))
                           (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "29") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0"))
                           (rule "mul_literals" (formula "29") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "29") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0"))
                           (rule "arrayLengthIsAShort" (formula "18") (term "0"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "arrayLengthNotNegative" (formula "18") (term "0"))
                           (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                           (rule "nnf_notAnd" (formula "28") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
                           (rule "mul_literals" (formula "28") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "28") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                           (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "21") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                           (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "21") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                           (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "20") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                           (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "20") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                           (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "19") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
                           (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "19") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                           (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                           (rule "commute_or_2" (formula "9") (term "0"))
                           (rule "commute_or_2" (formula "10") (term "0"))
                           (rule "commute_or_2" (formula "11") (term "0"))
                           (rule "ifthenelse_split" (formula "14") (term "1"))
                           (branch "self.unsigned.length ≥ 1 TRUE"
                              (rule "replace_known_left" (formula "16") (term "0,1,1,0,0") (ifseqformula "14"))
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "commute_or_2" (formula "12") (term "0"))
                              (rule "equalityToSeqGetAndSeqLenLeft" (formula "24") (inst "iv=iv"))
                              (rule "andLeft" (formula "24"))
                              (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                              (rule "applyEq" (formula "25") (term "0,0,1,0,0,1,0,0") (ifseqformula "26"))
                              (rule "applyEq" (formula "25") (term "0,0,1,0") (ifseqformula "26"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "true_left" (formula "25"))
                              (rule "applyEq" (formula "24") (term "0,0") (ifseqformula "25"))
                              (builtin "One Step Simplification" (formula "24"))
                              (rule "true_left" (formula "24"))
                              (rule "ifthenelse_split" (formula "43") (term "0,0"))
                              (branch "self.concatenated.length ≥ 1 TRUE"
                                 (rule "eqSymm" (formula "44") (term "0"))
                                 (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "replace_known_left" (formula "39") (term "0,1") (ifseqformula "4"))
                                 (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "4")))
                                 (rule "arrayLengthIsAShort" (formula "16") (term "1,0,1,0,0"))
                                 (builtin "One Step Simplification" (formula "16"))
                                 (rule "true_left" (formula "16"))
                                 (rule "arrayLengthIsAShort" (formula "16") (term "1,0,0,0"))
                                 (builtin "One Step Simplification" (formula "16"))
                                 (rule "true_left" (formula "16"))
                                 (rule "arrayLengthNotNegative" (formula "16") (term "1,0,1,0,0"))
                                 (rule "arrayLengthNotNegative" (formula "17") (term "1,0,0,0"))
                                 (rule "ifthenelse_split" (formula "2") (term "0"))
                                 (branch "self.concatenated.<created> = TRUE TRUE"
                                    (rule "applyEqReverse" (formula "42") (term "0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "42"))
                                    (rule "closeTrue" (formula "42"))
                                 )
                                 (branch "self.concatenated.<created> = TRUE FALSE"
                                    (rule "referencedObjectIsCreatedRight" (formula "32") (ifseqformula "40"))
                                    (rule "close" (formula "32") (ifseqformula "5"))
                                 )
                              )
                              (branch "self.concatenated.length ≥ 1 FALSE"
                                 (rule "eqSymm" (formula "44") (term "0"))
                                 (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "43"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "inEqSimp_geqRight" (formula "43"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_homoInEq1" (formula "4"))
                                 (rule "times_zero_2" (formula "4") (term "1,0"))
                                 (rule "add_zero_right" (formula "4") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                 (rule "mul_literals" (formula "4") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "3"))
                                 (rule "qeq_literals" (formula "4") (term "0"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "closeFalse" (formula "4"))
                              )
                           )
                           (branch "self.unsigned.length ≥ 1 FALSE"
                              (rule "replace_known_right" (formula "15") (term "0,1,1,0,0") (ifseqformula "28"))
                              (builtin "One Step Simplification" (formula "15"))
                              (rule "inEqSimp_geqRight" (formula "28"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_or_tautInEq0" (formula "16") (term "0,0"))
                              (rule "add_literals" (formula "16") (term "1,1,0,0"))
                              (rule "qeq_literals" (formula "16") (term "1,0,0"))
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "true_left" (formula "16"))
                              (rule "commute_or_2" (formula "13") (term "0"))
                              (rule "equalityToSeqGetAndSeqLenLeft" (formula "23") (inst "iv=iv"))
                              (rule "andLeft" (formula "23"))
                              (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                              (rule "applyEq" (formula "24") (term "0,0,1,0") (ifseqformula "25"))
                              (builtin "One Step Simplification" (formula "24"))
                              (rule "true_left" (formula "24"))
                              (rule "applyEq" (formula "23") (term "0,0") (ifseqformula "24"))
                              (builtin "One Step Simplification" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "ifthenelse_split" (formula "42") (term "0,0"))
                              (branch "self.concatenated.length ≥ 1 TRUE"
                                 (rule "eqSymm" (formula "43") (term "0"))
                                 (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "replace_known_left" (formula "38") (term "0,0") (ifseqformula "5"))
                                 (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "5")))
                                 (rule "arrayLengthIsAShort" (formula "16") (term "1,0,1,0,0"))
                                 (builtin "One Step Simplification" (formula "16"))
                                 (rule "true_left" (formula "16"))
                                 (rule "arrayLengthIsAShort" (formula "16") (term "1,0,0,0"))
                                 (builtin "One Step Simplification" (formula "16"))
                                 (rule "true_left" (formula "16"))
                                 (rule "arrayLengthNotNegative" (formula "16") (term "1,0,1,0,0"))
                                 (rule "arrayLengthNotNegative" (formula "17") (term "1,0,0,0"))
                                 (rule "ifthenelse_split" (formula "3") (term "0"))
                                 (branch "self.concatenated.<created> = TRUE TRUE"
                                    (rule "applyEqReverse" (formula "41") (term "0") (ifseqformula "4"))
                                    (builtin "One Step Simplification" (formula "41"))
                                    (rule "closeTrue" (formula "41"))
                                 )
                                 (branch "self.concatenated.<created> = TRUE FALSE"
                                    (rule "referencedObjectIsCreatedRight" (formula "31") (ifseqformula "39"))
                                    (rule "close" (formula "31") (ifseqformula "6"))
                                 )
                              )
                              (branch "self.concatenated.length ≥ 1 FALSE"
                                 (rule "eqSymm" (formula "43") (term "0"))
                                 (rule "replace_known_right" (formula "4") (term "0,0") (ifseqformula "42"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "inEqSimp_geqRight" (formula "42"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_homoInEq1" (formula "5"))
                                 (rule "times_zero_2" (formula "5") (term "1,0"))
                                 (rule "add_zero_right" (formula "5") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                 (rule "mul_literals" (formula "5") (term "1"))
                                 (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "5"))
                                 (rule "qeq_literals" (formula "4") (term "0"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "closeFalse" (formula "4"))
                              )
                           )
                        )
                     )
                  )
               )
               (branch
                  (rule "cut" (inst "cutFormula=  array2seq(heapAfter_splidAndCheck,
            byte[]::select(heapAfter_splidAndCheck,
                           self,
                           verif.selectvoting.system.core.MixServer::$unsigned))
= array2seq(heap,
            byte[]::select(heap,
                           self,
                           verif.selectvoting.system.core.MixServer::$unsigned))") (userinteraction))
                  (branch "CUT: array2seq(heapAfter_splidAndCheck, self.unsigned@heapAfter_splidAndCheck) = array2seq(heap, self.unsigned) TRUE"
                     (rule "applyEq" (formula "27") (term "0") (ifseqformula "1") (userinteraction))
                     (rule "applyEq" (formula "27") (term "0") (ifseqformula "11") (userinteraction))
                     (rule "cut" (inst "cutFormula=  array2seq(heapAfter_splidAndCheck,
            byte[]::select(heapAfter_splidAndCheck,
                           null,
                           verif.selectvoting.system.core.Tag::$BALLOTS))
= array2seq(heap,
            byte[]::select(heap,
                           null,
                           verif.selectvoting.system.core.Tag::$BALLOTS))") (userinteraction))
                     (branch "CUT: array2seq(heapAfter_splidAndCheck, verif.selectvoting.system.core.Tag.BALLOTS@heapAfter_splidAndCheck) = array2seq(heap, verif.selectvoting.system.core.Tag.BALLOTS) TRUE"
                        (rule "applyEq" (formula "28") (term "0,1") (ifseqformula "1") (userinteraction))
                        (rule "cut" (inst "cutFormula=  array2seq(heapAfter_splidAndCheck,
            byte[]::select(heapAfter_splidAndCheck,
                           self,
                           verif.selectvoting.system.core.MixServer::$electionID))
= array2seq(heap,
            byte[]::select(heap,
                           self,
                           verif.selectvoting.system.core.MixServer::$electionID))") (userinteraction))
                        (branch "CUT: array2seq(heapAfter_splidAndCheck, self.electionID@heapAfter_splidAndCheck) = array2seq(heap, self.electionID) TRUE"
                           (rule "applyEq" (formula "29") (term "0,1,1") (ifseqformula "1") (userinteraction))
                           (rule "cut" (inst "cutFormula=  array2seq(heapAfter_splidAndCheck,
            byte[]::select(heapAfter_splidAndCheck,
                           self,
                           verif.selectvoting.system.core.MixServer::$concatenated))
= array2seq(heap,
            byte[]::select(heap,
                           self,
                           verif.selectvoting.system.core.MixServer::$concatenated))") (userinteraction))
                           (branch "CUT: array2seq(heapAfter_splidAndCheck, self.concatenated@heapAfter_splidAndCheck) = array2seq(heap, self.concatenated) TRUE"
                              (rule "applyEq" (formula "30") (term "1,1,1") (ifseqformula "1") (userinteraction))
                              (builtin "One Step Simplification" (formula "30"))
                              (rule "closeTrue" (formula "30") (userinteraction))
                           )
                           (branch "CUT: array2seq(heapAfter_splidAndCheck, self.concatenated@heapAfter_splidAndCheck) = array2seq(heap, self.concatenated) FALSE"
                              (rule "equalityToSeqGetAndSeqLenRight" (formula "25") (inst "iv=iv") (userinteraction))
                              (rule "andRight" (formula "25") (userinteraction))
                              (branch "Case 1"
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "1") (ifseqformula "19"))
                                 (rule "eqSymm" (formula "16"))
                                 (rule "eqSymm" (formula "10") (term "1,0"))
                                 (rule "eqSymm" (formula "12"))
                                 (rule "eqSymm" (formula "22"))
                                 (rule "eqSymm" (formula "30"))
                                 (rule "eqSymm" (formula "13"))
                                 (rule "eqSymm" (formula "14"))
                                 (rule "eqSymm" (formula "15"))
                                 (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "29"))
                                 (builtin "One Step Simplification" (formula "7"))
                                 (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "27"))
                                 (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "26")))
                                 (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                                 (rule "applyEq" (formula "30") (term "1") (ifseqformula "13"))
                                 (rule "applyEq" (formula "13") (term "1,1,0") (ifseqformula "16"))
                                 (rule "applyEq" (formula "12") (term "0,0,0") (ifseqformula "15"))
                                 (rule "applyEq" (formula "12") (term "1") (ifseqformula "16"))
                                 (rule "applyEq" (formula "25") (term "0,1") (ifseqformula "16"))
                                 (rule "applyEq" (formula "15") (term "1") (ifseqformula "14"))
                                 (rule "applyEq" (formula "12") (term "0,0,0") (ifseqformula "14"))
                                 (rule "applyEq" (formula "10") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                                 (rule "array2seqDef" (formula "1") (term "1") (inst "u=u"))
                                 (rule "eqSymm" (formula "1"))
                                 (rule "array2seqDef" (formula "2") (term "0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "25") (term "0,0") (inst "u=u"))
                                 (rule "lenOfSeqDef" (formula "25") (term "0"))
                                 (rule "polySimp_elimSub" (formula "25") (term "1,0"))
                                 (rule "times_zero_2" (formula "25") (term "1,1,0"))
                                 (rule "add_zero_right" (formula "25") (term "1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0"))
                                 (rule "add_zero_right" (formula "25") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0"))
                                 (rule "polySimp_elimOne" (formula "25") (term "0,0,0"))
                                 (rule "array2seqDef" (formula "3") (term "1") (inst "u=u"))
                                 (rule "eqSymm" (formula "3"))
                                 (rule "nonNull" (formula "24") (inst "i=i"))
                                 (rule "greater_literals" (formula "24") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "27")))
                                 (rule "sub_literals" (formula "24") (term "2,1,0"))
                                 (builtin "One Step Simplification" (formula "24"))
                                 (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                                 (rule "array2seqDef" (formula "2") (term "1") (inst "u=u"))
                                 (rule "array2seqDef" (formula "16") (term "0") (inst "u=u"))
                                 (rule "lenOfSeqDefEQ" (formula "25") (term "1") (ifseqformula "16"))
                                 (rule "eqSymm" (formula "25"))
                                 (rule "polySimp_elimSub" (formula "25") (term "1,0"))
                                 (rule "times_zero_2" (formula "25") (term "1,1,0"))
                                 (rule "add_zero_right" (formula "25") (term "1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0"))
                                 (rule "eqSymm" (formula "25"))
                                 (rule "array2seqDef" (formula "16") (term "1") (inst "u=u"))
                                 (rule "narrowSelectArrayType" (formula "16") (term "2,1") (ifseqformula "4") (ifseqformula "29"))
                                 (rule "array2seqDef" (formula "10") (term "0,0,0,1,0") (inst "u=u"))
                                 (rule "applyEq" (formula "10") (term "0,0,0,1,0") (ifseqformula "1"))
                                 (rule "array2seqDef" (formula "10") (term "1,1,0") (inst "u=u"))
                                 (rule "eqSymm" (formula "10") (term "1,0"))
                                 (rule "array2seqDef" (formula "30") (term "0,1,0") (inst "u=u"))
                                 (rule "applyEq" (formula "30") (term "0,1,0") (ifseqformula "1"))
                                 (rule "array2seqDef" (formula "30") (term "0,0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "30") (term "1,1,0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "13") (term "0,1,0") (inst "u=u"))
                                 (rule "applyEq" (formula "13") (term "0,1,0") (ifseqformula "1"))
                                 (rule "array2seqDef" (formula "13") (term "1") (inst "u=u"))
                                 (rule "eqSymm" (formula "13"))
                                 (rule "applyEq" (formula "13") (term "0") (ifseqformula "3"))
                                 (rule "eqSymm" (formula "13"))
                                 (rule "array2seqDef" (formula "30") (term "1") (inst "u=u"))
                                 (rule "applyEq" (formula "30") (term "1") (ifseqformula "3"))
                                 (rule "array2seqDef" (formula "12") (term "1") (inst "u=u"))
                                 (rule "eqSymm" (formula "12"))
                                 (rule "narrowSelectArrayType" (formula "12") (term "2,0") (ifseqformula "4") (ifseqformula "29"))
                                 (rule "applyEq" (formula "16") (term "1") (ifseqformula "12"))
                                 (rule "array2seqDef" (formula "1") (term "1") (inst "u=u"))
                                 (rule "eqSymm" (formula "1"))
                                 (rule "array2seqDef" (formula "3") (term "1") (inst "u=u"))
                                 (rule "eqSymm" (formula "3"))
                                 (rule "eqSeqDef" (formula "2") (inst "iv=iv"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "lenOfSeqDef" (formula "2") (term "1"))
                                 (rule "polySimp_elimSub" (formula "2") (term "1,1"))
                                 (rule "times_zero_2" (formula "2") (term "1,1,1"))
                                 (rule "add_zero_right" (formula "2") (term "1,1"))
                                 (rule "lenOfSeqDef" (formula "3") (term "1,1,0,0"))
                                 (rule "polySimp_elimSub" (formula "3") (term "1,1,1,0,0"))
                                 (rule "times_zero_2" (formula "3") (term "1,1,1,1,0,0"))
                                 (rule "add_zero_right" (formula "3") (term "1,1,1,0,0"))
                                 (rule "lenOfSeqDef" (formula "2") (term "0"))
                                 (rule "polySimp_elimSub" (formula "2") (term "1,0"))
                                 (rule "times_zero_2" (formula "2") (term "1,1,0"))
                                 (rule "add_zero_right" (formula "2") (term "1,0"))
                                 (rule "getOfSeqDef" (formula "3") (term "0,1,0"))
                                 (rule "castDel" (formula "3") (term "2,0,1,0"))
                                 (rule "castDel" (formula "3") (term "1,0,1,0"))
                                 (rule "add_zero_right" (formula "3") (term "0,2,1,0,1,0"))
                                 (rule "eqSymm" (formula "3") (term "1,0"))
                                 (rule "polySimp_elimSub" (formula "3") (term "1,1,0,1,1,0"))
                                 (rule "times_zero_2" (formula "3") (term "1,1,1,0,1,1,0"))
                                 (rule "add_zero_right" (formula "3") (term "1,1,0,1,1,0"))
                                 (rule "getOfSeqDef" (formula "3") (term "0,1,0"))
                                 (rule "castDel" (formula "3") (term "2,0,1,0"))
                                 (rule "castDel" (formula "3") (term "1,0,1,0"))
                                 (rule "add_zero_right" (formula "3") (term "0,2,1,0,1,0"))
                                 (rule "eqSymm" (formula "3") (term "1,0"))
                                 (rule "polySimp_elimSub" (formula "3") (term "1,1,0,1,1,0"))
                                 (rule "times_zero_2" (formula "3") (term "1,1,1,0,1,1,0"))
                                 (rule "add_zero_right" (formula "3") (term "1,1,0,1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1"))
                                 (rule "add_zero_right" (formula "2") (term "0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "3") (term "0,1,1,0,0"))
                                 (rule "add_zero_right" (formula "3") (term "0,0,1,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0"))
                                 (rule "add_zero_right" (formula "2") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0,1,0"))
                                 (rule "eqSymm" (formula "3") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0,1,0"))
                                 (rule "eqSymm" (formula "3") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,1,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,1,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0,1,0"))
                                 (rule "apply_eq_monomials" (formula "3") (term "1,0,0,1,0,0") (ifseqformula "2"))
                                 (rule "polySimp_rightDist" (formula "3") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0,0,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "3") (term "1,0,1,0,0,1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "3") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "3") (term "1,1,1,0,0,1,0,0"))
                                 (rule "times_zero_1" (formula "3") (term "1,1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "3") (term "1,0,0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0,0,1"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0,0,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0,1,0"))
                                 (rule "eqSymm" (formula "3") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "3") (term "1,1,0,1,1,0"))
                                 (rule "mul_literals" (formula "3") (term "0,1,1,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "3") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0,1,0"))
                                 (rule "eqSymm" (formula "3") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "3") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,1,1,0"))
                                 (rule "mul_literals" (formula "3") (term "0,1,1,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,1,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,1,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "0,0,1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "3") (term "0,0,1,1,1,0,0"))
                                 (rule "array2seqDef" (formula "11") (term "1,0,1,1,0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "11") (term "0,0,1,1,0") (inst "u=u"))
                                 (rule "eqSymm" (formula "11") (term "1,0"))
                                 (rule "array2seqDef" (formula "31") (term "0,1,0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "14") (term "0,1,0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "14") (term "1") (inst "u=u"))
                                 (rule "eqSymm" (formula "14"))
                                 (rule "array2seqDef" (formula "31") (term "1") (inst "u=u"))
                                 (rule "eqSymm" (formula "31"))
                                 (rule "eqSeqDef" (formula "1") (inst "iv=iv"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "lenOfSeqDef" (formula "1") (term "1"))
                                 (rule "polySimp_elimSub" (formula "1") (term "1,1"))
                                 (rule "times_zero_2" (formula "1") (term "1,1,1"))
                                 (rule "add_zero_right" (formula "1") (term "1,1"))
                                 (rule "lenOfSeqDef" (formula "1") (term "0"))
                                 (rule "polySimp_elimSub" (formula "1") (term "1,0"))
                                 (rule "times_zero_2" (formula "1") (term "1,1,0"))
                                 (rule "add_zero_right" (formula "1") (term "1,0"))
                                 (rule "getOfSeqDef" (formula "2") (term "0,1,0"))
                                 (rule "castDel" (formula "2") (term "1,0,1,0"))
                                 (rule "castDel" (formula "2") (term "2,0,1,0"))
                                 (rule "add_zero_right" (formula "2") (term "0,2,1,0,1,0"))
                                 (rule "eqSymm" (formula "2") (term "1,0"))
                                 (rule "polySimp_elimSub" (formula "2") (term "1,1,0,1,1,0"))
                                 (rule "mul_literals" (formula "2") (term "1,1,1,0,1,1,0"))
                                 (rule "add_zero_right" (formula "2") (term "1,1,0,1,1,0"))
                                 (rule "lenOfSeqDef" (formula "2") (term "1,1,0,0"))
                                 (rule "polySimp_elimSub" (formula "2") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "2") (term "1,1,1,1,0,0"))
                                 (rule "add_zero_right" (formula "2") (term "1,1,1,0,0"))
                                 (rule "getOfSeqDef" (formula "2") (term "0,1,0"))
                                 (rule "castDel" (formula "2") (term "1,0,1,0"))
                                 (rule "castDel" (formula "2") (term "2,0,1,0"))
                                 (rule "add_zero_right" (formula "2") (term "0,2,1,0,1,0"))
                                 (rule "eqSymm" (formula "2") (term "1,0"))
                                 (rule "polySimp_elimSub" (formula "2") (term "1,1,0,1,1,0"))
                                 (rule "mul_literals" (formula "2") (term "1,1,1,0,1,1,0"))
                                 (rule "add_zero_right" (formula "2") (term "1,1,0,1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1,1,0,0"))
                                 (rule "add_zero_right" (formula "2") (term "0,0,1,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0"))
                                 (rule "eqSymm" (formula "2") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0"))
                                 (rule "eqSymm" (formula "2") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,1,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,1,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1,0"))
                                 (rule "apply_eq_monomials" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "1"))
                                 (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0,0,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "1,0,1,0,0,1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "2") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "2") (term "1,1,1,0,0,1,0,0"))
                                 (rule "times_zero_1" (formula "2") (term "1,1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "2") (term "1,0,0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0,0,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0"))
                                 (rule "eqSymm" (formula "2") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,1,1,0"))
                                 (rule "mul_literals" (formula "2") (term "0,1,1,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "2") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0"))
                                 (rule "eqSymm" (formula "2") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1,1,0,1,1,0"))
                                 (rule "mul_literals" (formula "2") (term "0,1,1,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,1,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,1,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0,0,1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0,0,1,1,1,0,0"))
                                 (rule "eqSeqDef" (formula "5") (inst "iv=iv"))
                                 (rule "andLeft" (formula "5"))
                                 (rule "lenOfSeqDef" (formula "5") (term "0"))
                                 (rule "eqSymm" (formula "5"))
                                 (rule "polySimp_elimSub" (formula "5") (term "1,1"))
                                 (rule "mul_literals" (formula "5") (term "1,1,1"))
                                 (rule "add_zero_right" (formula "5") (term "1,1"))
                                 (rule "lenOfSeqDef" (formula "6") (term "1,1,0,0"))
                                 (rule "polySimp_elimSub" (formula "6") (term "1,1,1,0,0"))
                                 (rule "times_zero_2" (formula "6") (term "1,1,1,1,0,0"))
                                 (rule "add_zero_right" (formula "6") (term "1,1,1,0,0"))
                                 (rule "getOfSeqDef" (formula "6") (term "1,1,0"))
                                 (rule "castDel" (formula "6") (term "2,1,1,0"))
                                 (rule "castDel" (formula "6") (term "1,1,1,0"))
                                 (rule "add_zero_right" (formula "6") (term "0,2,1,1,1,0"))
                                 (rule "polySimp_elimSub" (formula "6") (term "1,1,0,1,1,0"))
                                 (rule "times_zero_2" (formula "6") (term "1,1,1,0,1,1,0"))
                                 (rule "add_zero_right" (formula "6") (term "1,1,0,1,1,0"))
                                 (rule "getOfSeqDef" (formula "6") (term "0,1,0"))
                                 (rule "castDel" (formula "6") (term "2,0,1,0"))
                                 (rule "castDel" (formula "6") (term "1,0,1,0"))
                                 (rule "add_zero_right" (formula "6") (term "0,2,1,0,1,0"))
                                 (rule "polySimp_elimSub" (formula "6") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_2" (formula "6") (term "1,1,1,0,0,1,0"))
                                 (rule "add_zero_right" (formula "6") (term "1,1,0,0,1,0"))
                                 (rule "lenOfSeqDef" (formula "5") (term "0"))
                                 (rule "eqSymm" (formula "5"))
                                 (rule "polySimp_elimSub" (formula "5") (term "1,1"))
                                 (rule "times_zero_2" (formula "5") (term "1,1,1"))
                                 (rule "add_zero_right" (formula "5") (term "1,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "6") (term "0,1,1,0,0"))
                                 (rule "add_zero_right" (formula "6") (term "0,0,1,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0"))
                                 (rule "add_zero_right" (formula "5") (term "0,0,0"))
                                 (rule "eqSymm" (formula "5"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0"))
                                 (rule "add_zero_right" (formula "5") (term "0,0,0"))
                                 (rule "eqSymm" (formula "5"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,1,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0"))
                                 (rule "apply_eq_monomials" (formula "6") (term "1,0,0,1,0,0") (ifseqformula "5"))
                                 (rule "polySimp_rightDist" (formula "6") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,0,0,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "6") (term "1,0,1,0,0,1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "6") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "6") (term "1,1,1,0,0,1,0,0"))
                                 (rule "times_zero_1" (formula "6") (term "1,1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "6") (term "1,0,0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "6") (term "1,1,0,1,1,0"))
                                 (rule "mul_literals" (formula "6") (term "0,1,1,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "6") (term "0,1,1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "0,0,0"))
                                 (rule "eqSymm" (formula "5"))
                                 (rule "polySimp_elimOne" (formula "5") (term "0,0,1"))
                                 (rule "applyEq" (formula "6") (term "0,1,0,0,1,0,0") (ifseqformula "5"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "0,0,0"))
                                 (rule "eqSymm" (formula "5"))
                                 (rule "polySimp_elimOne" (formula "5") (term "0,0,1"))
                                 (rule "apply_eq_monomials" (formula "6") (term "1,0,0,1,0,0") (ifseqformula "5"))
                                 (rule "polySimp_rightDist" (formula "6") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,0,0,1,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "6") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "6") (term "1,1,1,0,0,1,0,0"))
                                 (rule "times_zero_1" (formula "6") (term "1,1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "6") (term "1,0,0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
                                 (rule "pullOutSelect" (formula "25") (term "1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_16"))
                                 (rule "simplifySelectOfAnonEQ" (formula "25") (ifseqformula "22"))
                                 (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "32")) (ifInst ""  (formula "8")))
                                 (rule "applyEqReverse" (formula "26") (term "1,0") (ifseqformula "25"))
                                 (rule "hideAuxiliaryEq" (formula "25"))
                                 (rule "pullOutSelect" (formula "28") (term "0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_13"))
                                 (rule "applyEq" (formula "34") (term "0,1,1,1,1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "29") (term "0,0,0,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "34") (term "1,2,1,1,1") (ifseqformula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "32")) (ifInst ""  (formula "9")))
                                 (rule "applyEqReverse" (formula "29") (term "0,1,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "34") (term "0,1,1,1,1") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "29") (term "0,0,0,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "34") (term "1,2,1,1,1") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "eqSeqDef" (formula "13") (term "1,0") (inst "iv=iv"))
                                 (rule "getOfSeqDef" (formula "13") (term "1,1,0,1,1,0"))
                                 (rule "castDel" (formula "13") (term "1,1,1,0,1,1,0"))
                                 (rule "castDel" (formula "13") (term "2,1,1,0,1,1,0"))
                                 (rule "add_zero_right" (formula "13") (term "0,2,1,1,1,0,1,1,0"))
                                 (rule "polySimp_elimSub" (formula "13") (term "1,1,0,1,1,0,1,1,0"))
                                 (rule "times_zero_2" (formula "13") (term "1,1,1,0,1,1,0,1,1,0"))
                                 (rule "add_zero_right" (formula "13") (term "1,1,0,1,1,0,1,1,0"))
                                 (rule "lenOfSeqDef" (formula "13") (term "1,0,1,0"))
                                 (rule "polySimp_elimSub" (formula "13") (term "1,1,0,1,0"))
                                 (rule "times_zero_2" (formula "13") (term "1,1,1,0,1,0"))
                                 (rule "add_zero_right" (formula "13") (term "1,1,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,1,1,0"))
                                 (rule "polySimp_addComm1" (formula "13") (term "0,1,0,0,1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,1,1,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,1,1,0,1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1,0,1,0"))
                                 (rule "add_zero_right" (formula "13") (term "0,0,1,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,1,1,0,1,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "1,0,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "13") (term "0,1,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,1,1,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,1,1,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "13") (term "1,1,0,1,1,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,1,1,0,1,1,0"))
                                 (rule "mul_literals" (formula "13") (term "0,1,1,0,1,1,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,1,1,0,1,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,1,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "0,0,1,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "13") (term "0,0,1,0,1,0"))
                                 (rule "array2seqDef" (formula "16") (term "0,1") (inst "u=u"))
                                 (rule "array2seqDef" (formula "16") (term "1,1,1") (inst "u=u"))
                                 (rule "narrowSelectArrayType" (formula "16") (term "2,1,1,1") (ifseqformula "7") (ifseqformula "32"))
                                 (rule "applyEq" (formula "16") (term "1,1,1") (ifseqformula "15"))
                                 (rule "eqSeqDef2" (formula "19") (inst "iv=iv") (ifseqformula "15"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "getOfSeqDef" (formula "20") (term "1,1,0"))
                                 (rule "castDel" (formula "20") (term "1,1,1,0"))
                                 (rule "castDel" (formula "20") (term "2,1,1,0"))
                                 (rule "add_zero_right" (formula "20") (term "0,2,1,1,1,0"))
                                 (rule "polySimp_elimSub" (formula "20") (term "1,1,0,1,1,0"))
                                 (rule "times_zero_2" (formula "20") (term "1,1,1,0,1,1,0"))
                                 (rule "add_zero_right" (formula "20") (term "1,1,0,1,1,0"))
                                 (rule "lenOfSeqDef" (formula "20") (term "1,1,0,0"))
                                 (rule "polySimp_elimSub" (formula "20") (term "1,1,1,0,0"))
                                 (rule "times_zero_2" (formula "20") (term "1,1,1,1,0,0"))
                                 (rule "add_zero_right" (formula "20") (term "1,1,1,0,0"))
                                 (rule "getOfSeqDef" (formula "20") (term "0,1,0"))
                                 (rule "castDel" (formula "20") (term "2,0,1,0"))
                                 (rule "castDel" (formula "20") (term "1,0,1,0"))
                                 (rule "add_zero_right" (formula "20") (term "0,2,1,0,1,0"))
                                 (rule "polySimp_elimSub" (formula "20") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_2" (formula "20") (term "1,1,1,0,0,1,0"))
                                 (rule "add_zero_right" (formula "20") (term "1,1,0,0,1,0"))
                                 (rule "lenOfSeqDef" (formula "19") (term "0"))
                                 (rule "eqSymm" (formula "19"))
                                 (rule "polySimp_elimSub" (formula "19") (term "1,1"))
                                 (rule "times_zero_2" (formula "19") (term "1,1,1"))
                                 (rule "add_zero_right" (formula "19") (term "1,1"))
                                 (rule "lenOfSeqDef" (formula "19") (term "0"))
                                 (rule "eqSymm" (formula "19"))
                                 (rule "polySimp_elimSub" (formula "19") (term "1,1"))
                                 (rule "times_zero_2" (formula "19") (term "1,1,1"))
                                 (rule "add_zero_right" (formula "19") (term "1,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "20") (term "0,1,1,0,0"))
                                 (rule "add_zero_right" (formula "20") (term "0,0,1,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0"))
                                 (rule "add_zero_right" (formula "19") (term "0,0,0"))
                                 (rule "eqSymm" (formula "19"))
                                 (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0"))
                                 (rule "add_zero_right" (formula "19") (term "0,0,0"))
                                 (rule "eqSymm" (formula "19"))
                                 (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,1,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1,0"))
                                 (rule "applyEq" (formula "20") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "20") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,1,1,0"))
                                 (rule "mul_literals" (formula "20") (term "0,1,1,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "20") (term "0,1,1,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "19") (term "0,0,0"))
                                 (rule "eqSymm" (formula "19"))
                                 (rule "polySimp_elimOne" (formula "19") (term "0,0,1"))
                                 (rule "applyEq" (formula "20") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "19") (term "0,0,0"))
                                 (rule "eqSymm" (formula "19"))
                                 (rule "polySimp_elimOne" (formula "19") (term "0,0,1"))
                                 (rule "applyEq" (formula "29") (term "0") (ifseqformula "19"))
                                 (rule "eqSymm" (formula "29"))
                                 (rule "applyEq" (formula "20") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                                 (rule "eqSeqDef2" (formula "15") (inst "iv=iv") (ifseqformula "15"))
                                 (builtin "One Step Simplification" (formula "15"))
                                 (rule "true_left" (formula "15"))
                                 (rule "pullOutSelect" (formula "3") (term "0,1,0") (inst "selectSK=verif_selectvoting_system_core_Tag_BALLOTS_5"))
                                 (rule "applyEq" (formula "5") (term "1,1,0,1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "5") (term "0,1,1,1,0,0,1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,0,0,0") (ifseqformula "3"))
                                 (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "23"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "applyEqReverse" (formula "4") (term "0,1,0") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "5") (term "1,1,0,1,0") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "5") (term "0,1,1,1,0,0,1,0") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "4") (term "0,0,0,0") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "pullOutSelect" (formula "14") (term "0,1,0,1,1") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_13"))
                                 (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "14"))
                                 (rule "applyEq" (formula "15") (term "1,2,0,1,1") (ifseqformula "14"))
                                 (rule "applyEq" (formula "12") (term "1,2,0,0,0,0,1,0,0,1,1,0") (ifseqformula "14"))
                                 (rule "applyEq" (formula "12") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "14"))
                                 (rule "applyEq" (formula "2") (term "0,1,1,1,0,0,1,0") (ifseqformula "14"))
                                 (rule "applyEq" (formula "2") (term "1,1,0,1,0") (ifseqformula "14"))
                                 (rule "applyEq" (formula "12") (term "0,1,0,0,0,0,1,0,1,1,0") (ifseqformula "14"))
                                 (rule "applyEq" (formula "12") (term "1,2,0,0,0,0,1,0,1,1,0") (ifseqformula "14"))
                                 (rule "applyEq" (formula "33") (term "1,2,0,1,1") (ifseqformula "14"))
                                 (rule "applyEq" (formula "33") (term "0,1,0,1,1") (ifseqformula "14"))
                                 (rule "applyEq" (formula "12") (term "0,1,0,0,0,0,1,0,0,1,1,0") (ifseqformula "14"))
                                 (rule "applyEq" (formula "1") (term "0,0,0,0") (ifseqformula "14"))
                                 (rule "applyEq" (formula "12") (term "1,2,0,0,0,0,0,1,0") (ifseqformula "14"))
                                 (rule "simplifySelectOfAnonEQ" (formula "14") (ifseqformula "22"))
                                 (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "31")) (ifInst ""  (formula "7")))
                                 (rule "applyEqReverse" (formula "15") (term "0,1,0,1,1") (ifseqformula "14"))
                                 (rule "applyEqReverse" (formula "1") (term "0,1,0") (ifseqformula "14"))
                                 (rule "applyEqReverse" (formula "15") (term "1,2,0,1,1") (ifseqformula "14"))
                                 (rule "applyEqReverse" (formula "12") (term "1,2,0,0,0,0,1,0,0,1,1,0") (ifseqformula "14"))
                                 (rule "applyEqReverse" (formula "12") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "14"))
                                 (rule "applyEqReverse" (formula "2") (term "0,1,1,1,0,0,1,0") (ifseqformula "14"))
                                 (rule "applyEqReverse" (formula "2") (term "1,1,0,1,0") (ifseqformula "14"))
                                 (rule "applyEqReverse" (formula "12") (term "0,1,0,0,0,0,1,0,1,1,0") (ifseqformula "14"))
                                 (rule "applyEqReverse" (formula "12") (term "1,2,0,0,0,0,1,0,1,1,0") (ifseqformula "14"))
                                 (rule "applyEqReverse" (formula "33") (term "1,2,0,1,1") (ifseqformula "14"))
                                 (rule "applyEqReverse" (formula "33") (term "0,1,0,1,1") (ifseqformula "14"))
                                 (rule "applyEqReverse" (formula "12") (term "0,1,0,0,0,0,1,0,0,1,1,0") (ifseqformula "14"))
                                 (rule "applyEqReverse" (formula "1") (term "0,0,0,0") (ifseqformula "14"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "applyEqReverse" (formula "11") (term "1,2,0,0,0,0,0,1,0") (ifseqformula "13"))
                                 (rule "hideAuxiliaryEq" (formula "13"))
                                 (rule "pullOutSelect" (formula "13") (term "1,2,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_13"))
                                 (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "13"))
                                 (rule "applyEq" (formula "4") (term "1,1,0,1,0") (ifseqformula "13"))
                                 (rule "applyEq" (formula "32") (term "0,1,0") (ifseqformula "13"))
                                 (rule "applyEq" (formula "3") (term "0,0,0,0") (ifseqformula "13"))
                                 (rule "applyEq" (formula "14") (term "0,1,0") (ifseqformula "13"))
                                 (rule "applyEq" (formula "4") (term "0,1,1,1,0,0,1,0") (ifseqformula "13"))
                                 (rule "applyEq" (formula "32") (term "1,2,0") (ifseqformula "13"))
                                 (rule "simplifySelectOfAnonEQ" (formula "13") (ifseqformula "21"))
                                 (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "30")) (ifInst ""  (formula "6")))
                                 (rule "applyEqReverse" (formula "14") (term "1,2,0") (ifseqformula "13"))
                                 (rule "applyEqReverse" (formula "3") (term "0,1,0") (ifseqformula "13"))
                                 (rule "applyEqReverse" (formula "4") (term "1,1,0,1,0") (ifseqformula "13"))
                                 (rule "applyEqReverse" (formula "32") (term "0,1,0") (ifseqformula "13"))
                                 (rule "applyEqReverse" (formula "3") (term "0,0,0,0") (ifseqformula "13"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "true_left" (formula "3"))
                                 (rule "applyEqReverse" (formula "13") (term "0,1,0") (ifseqformula "12"))
                                 (rule "applyEqReverse" (formula "3") (term "0,1,1,1,0,0,1,0") (ifseqformula "12"))
                                 (rule "applyEqReverse" (formula "31") (term "1,2,0") (ifseqformula "12"))
                                 (rule "hideAuxiliaryEq" (formula "12"))
                                 (rule "equalityToSeqGetAndSeqLenRight" (formula "30") (inst "iv=iv"))
                                 (rule "lenOfSeqDef" (formula "30") (term "0,0"))
                                 (rule "eqSymm" (formula "30") (term "0"))
                                 (rule "polySimp_elimSub" (formula "30") (term "1,1,0"))
                                 (rule "times_zero_2" (formula "30") (term "1,1,1,0"))
                                 (rule "add_zero_right" (formula "30") (term "1,1,0"))
                                 (rule "lenOfSeqDef" (formula "30") (term "1,1,0,0,1"))
                                 (rule "polySimp_elimSub" (formula "30") (term "1,1,1,0,0,1"))
                                 (rule "times_zero_2" (formula "30") (term "1,1,1,1,0,0,1"))
                                 (rule "add_zero_right" (formula "30") (term "1,1,1,0,0,1"))
                                 (rule "getOfSeqDef" (formula "30") (term "0,1,0,1"))
                                 (rule "castDel" (formula "30") (term "1,0,1,0,1"))
                                 (rule "castDel" (formula "30") (term "2,0,1,0,1"))
                                 (rule "add_zero_right" (formula "30") (term "0,2,1,0,1,0,1"))
                                 (rule "eqSymm" (formula "30") (term "1,0,1"))
                                 (rule "polySimp_elimSub" (formula "30") (term "1,1,0,1,1,0,1"))
                                 (rule "times_zero_2" (formula "30") (term "1,1,1,0,1,1,0,1"))
                                 (rule "add_zero_right" (formula "30") (term "1,1,0,1,1,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "30") (term "0,1,0"))
                                 (rule "add_zero_right" (formula "30") (term "0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "30") (term "0,1,1,0,0,1"))
                                 (rule "add_zero_right" (formula "30") (term "0,0,1,1,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,1,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,1,1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,1,1,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,1,1,0,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "30") (term "0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "30") (term "0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "30") (term "0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,1,1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,1,1,0,1"))
                                 (rule "polySimp_rightDist" (formula "30") (term "1,1,0,1,1,0,1"))
                                 (rule "mul_literals" (formula "30") (term "0,1,1,0,1,1,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,1,1,0,1"))
                                 (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,1,1,0,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "30") (term "0,0,1,0,0,1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "30") (term "0,0,0,1,0,0,1,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "30") (term "0,0,0,1,0,0,1,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0,1"))
                                 (rule "mul_literals" (formula "30") (term "0,1,1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0,1"))
                                 (rule "eqSeqDef2" (formula "12") (inst "iv=iv") (ifseqformula "12"))
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "true_left" (formula "12"))
                                 (rule "nnf_imp2or" (formula "23") (term "0"))
                                 (rule "Definition_axiom_for_ghostFieldsNonNull_in_verif_selectvoting_system_core_MixServer" (formula "9") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
                                 (builtin "One Step Simplification" (formula "9"))
                                 (rule "andLeft" (formula "9"))
                                 (rule "andLeft" (formula "9"))
                                 (rule "andLeft" (formula "9"))
                                 (rule "andLeft" (formula "9"))
                                 (rule "andLeft" (formula "9"))
                                 (rule "notLeft" (formula "11"))
                                 (rule "andLeft" (formula "9"))
                                 (rule "notLeft" (formula "11"))
                                 (rule "notLeft" (formula "10"))
                                 (rule "andLeft" (formula "9"))
                                 (rule "notLeft" (formula "9"))
                                 (rule "notLeft" (formula "9"))
                                 (rule "narrowSelectArrayType" (formula "17") (term "1,0,1,0") (ifseqformula "4") (ifseqformula "29"))
                                 (rule "narrowSelectArrayType" (formula "3") (term "1,1,1,0") (ifseqformula "4") (ifseqformula "30"))
                                 (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                                 (rule "applyEq" (formula "10") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
                                 (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                                 (rule "nnf_imp2or" (formula "2") (term "0"))
                                 (rule "nnf_imp2or" (formula "1") (term "0"))
                                 (rule "nnf_imp2or" (formula "12") (term "0"))
                                 (rule "arrayLengthNotNegative" (formula "14") (term "1"))
                                 (rule "arrayLengthNotNegative" (formula "15") (term "0"))
                                 (rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
                                 (rule "arrayLengthIsAShort" (formula "15") (term "0"))
                                 (builtin "One Step Simplification" (formula "15"))
                                 (rule "true_left" (formula "15"))
                                 (rule "arrayLengthIsAShort" (formula "15") (term "1"))
                                 (builtin "One Step Simplification" (formula "15"))
                                 (rule "true_left" (formula "15"))
                                 (rule "arrayLengthIsAShort" (formula "16") (term "0"))
                                 (builtin "One Step Simplification" (formula "16"))
                                 (rule "true_left" (formula "16"))
                                 (rule "arrayLengthNotNegative" (formula "16") (term "0"))
                                 (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
                                 (rule "nnf_imp2or" (formula "37") (term "0,1"))
                                 (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                 (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                 (rule "nnf_imp2or" (formula "18") (term "0"))
                                 (rule "nnf_imp2or" (formula "3") (term "0"))
                                 (rule "nnf_imp2or" (formula "9") (term "0"))
                                 (rule "nnf_imp2or" (formula "10") (term "0"))
                                 (rule "nnf_imp2or" (formula "11") (term "0"))
                                 (rule "nnf_notAnd" (formula "2") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "2") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "2") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "2") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "2") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0"))
                                 (rule "mul_literals" (formula "2") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                 (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                                 (rule "nnf_imp2or" (formula "12") (term "0,1,1,0"))
                                 (rule "nnf_notAnd" (formula "37") (term "0,0,1"))
                                 (rule "inEqSimp_notGeq" (formula "37") (term "0,0,0,1"))
                                 (rule "times_zero_1" (formula "37") (term "1,0,0,0,0,0,1"))
                                 (rule "add_zero_right" (formula "37") (term "0,0,0,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "0,0,0,1"))
                                 (rule "mul_literals" (formula "37") (term "1,0,0,0,1"))
                                 (rule "inEqSimp_notLeq" (formula "37") (term "1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,0,0,1"))
                                 (rule "mul_literals" (formula "37") (term "0,1,0,0,1,0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,0,0,1"))
                                 (rule "add_literals" (formula "37") (term "0,0,0,1,0,0,1"))
                                 (rule "add_zero_left" (formula "37") (term "0,0,1,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "37") (term "1,1,0,0,1"))
                                 (rule "nnf_notAnd" (formula "18") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                                 (rule "mul_literals" (formula "18") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                                 (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "3") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "3") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "3") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "3") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,0"))
                                 (rule "mul_literals" (formula "3") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "3") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "3") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "3") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "3") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "9") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
                                 (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                                 (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "10") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
                                 (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                                 (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "12") (term "0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,1,1,0"))
                                 (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,1,1,0"))
                                 (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "12") (term "1,0,0,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,1,1,0"))
                                 (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,1,1,0"))
                                 (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,1,1,0"))
                                 (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "19") (ifseqformula "6"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "notLeft" (formula "20"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "notLeft" (formula "21"))
                                 (rule "notLeft" (formula "20"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "notLeft" (formula "20"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "notLeft" (formula "19"))
                                 (rule "notLeft" (formula "19"))
                                 (rule "narrowSelectArrayType" (formula "1") (term "1,1,1,0") (ifseqformula "4") (ifseqformula "32"))
                                 (rule "nonNull" (formula "21") (inst "i=i"))
                                 (rule "sub_literals" (formula "21") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "34")))
                                 (rule "greater_literals" (formula "21") (term "0"))
                                 (builtin "One Step Simplification" (formula "21"))
                                 (rule "narrowSelectArrayType" (formula "21") (term "0,0,1,0") (ifseqformula "4") (ifseqformula "34"))
                                 (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "20") (inst "i=i"))
                                 (rule "sub_literals" (formula "20") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "33")))
                                 (rule "greater_literals" (formula "20") (term "0"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "narrowSelectArrayType" (formula "20") (term "0,0,1,0") (ifseqformula "4") (ifseqformula "33"))
                                 (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                                 (rule "applyEq" (formula "20") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "19") (inst "i=i"))
                                 (rule "sub_literals" (formula "19") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "35")))
                                 (rule "greater_literals" (formula "19") (term "0"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "narrowSelectArrayType" (formula "19") (term "0,0,1,0") (ifseqformula "4") (ifseqformula "35"))
                                 (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                                 (rule "applyEq" (formula "19") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                                 (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "27") (ifseqformula "6"))
                                 (rule "replaceKnownSelect_taclet01000100020_6" (formula "27") (term "0,0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01000100020_7" (formula "27") (term "0,0,1"))
                                 (rule "replaceKnownSelect_taclet01000100020_0" (formula "27") (term "1,1,0,0,0,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01000100020_1" (formula "27") (term "1,1,0,0,0,0,0,0"))
                                 (rule "replaceKnownSelect_taclet01000100020_2" (formula "27") (term "0,0,1,0,0,0,0,0,0,0"))
                                 (rule "replaceKnownSelect_taclet01000100020_8" (formula "27") (term "0,0,0,0,0,0,0,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01000100020_3" (formula "27") (term "0,0,1,0,0,0,0,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01000100020_9" (formula "27") (term "0,0,0,0,0,0,0,0,0,0"))
                                 (rule "andLeft" (formula "27"))
                                 (rule "notLeft" (formula "28"))
                                 (rule "andLeft" (formula "27"))
                                 (rule "notLeft" (formula "28"))
                                 (rule "andLeft" (formula "27"))
                                 (rule "andLeft" (formula "27"))
                                 (rule "notLeft" (formula "29"))
                                 (rule "andLeft" (formula "27"))
                                 (rule "notLeft" (formula "29"))
                                 (rule "andLeft" (formula "27"))
                                 (rule "andLeft" (formula "27"))
                                 (rule "andLeft" (formula "27"))
                                 (rule "notLeft" (formula "27"))
                                 (rule "notLeft" (formula "27"))
                                 (rule "nonNull" (formula "29") (inst "i=i"))
                                 (rule "sub_literals" (formula "29") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "29"))
                                 (rule "greater_literals" (formula "29") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "29"))
                                 (rule "andLeft" (formula "29"))
                                 (rule "notLeft" (formula "29"))
                                 (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "29") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "28") (inst "i=i"))
                                 (rule "sub_literals" (formula "28") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "28"))
                                 (rule "greater_literals" (formula "28") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "28"))
                                 (rule "andLeft" (formula "28"))
                                 (rule "notLeft" (formula "28"))
                                 (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "28") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "27") (inst "i=i"))
                                 (rule "greater_literals" (formula "27") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "42")))
                                 (rule "sub_literals" (formula "27") (term "2,1,0"))
                                 (builtin "One Step Simplification" (formula "27"))
                                 (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                                 (rule "applyEq" (formula "27") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
                                 (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_13"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")) (ifInst ""  (formula "6")))
                                 (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_13"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")) (ifInst ""  (formula "6")))
                                 (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "33") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_13"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")) (ifInst ""  (formula "6")))
                                 (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "29") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_14"))
                                 (rule "applyEq" (formula "33") (term "0") (ifseqformula "29"))
                                 (rule "applyEq" (formula "30") (term "0,1,1,1,0,0") (ifseqformula "29"))
                                 (rule "simplifySelectOfAnonEQ" (formula "29") (ifseqformula "23"))
                                 (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "46")) (ifInst ""  (formula "5")))
                                 (rule "applyEqReverse" (formula "30") (term "1,0,0,1,0") (ifseqformula "29"))
                                 (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "29"))
                                 (rule "applyEqReverse" (formula "30") (term "0,1,1,1,0,0") (ifseqformula "29"))
                                 (rule "hideAuxiliaryEq" (formula "29"))
                                 (rule "pullOutSelect" (formula "28") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_15"))
                                 (rule "applyEq" (formula "29") (term "0,1,1,1,0,0") (ifseqformula "28"))
                                 (rule "applyEq" (formula "32") (term "0") (ifseqformula "28"))
                                 (rule "simplifySelectOfAnonEQ" (formula "28") (ifseqformula "23"))
                                 (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "45")) (ifInst ""  (formula "5")))
                                 (rule "applyEqReverse" (formula "29") (term "1,0,0,1,0") (ifseqformula "28"))
                                 (rule "applyEqReverse" (formula "29") (term "0,1,1,1,0,0") (ifseqformula "28"))
                                 (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "28"))
                                 (rule "hideAuxiliaryEq" (formula "28"))
                                 (rule "applyEq" (formula "28") (term "1,1,1,0,0") (ifseqformula "15"))
                                 (rule "nnf_imp2or" (formula "21") (term "0"))
                                 (rule "nnf_imp2or" (formula "20") (term "0"))
                                 (rule "nnf_imp2or" (formula "19") (term "0"))
                                 (rule "equalityToSeqGetAndSeqLenLeft" (formula "26") (inst "iv=iv"))
                                 (rule "andLeft" (formula "26"))
                                 (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                                 (rule "applyEq" (formula "27") (term "0,0,1,0") (ifseqformula "28"))
                                 (builtin "One Step Simplification" (formula "27"))
                                 (rule "true_left" (formula "27"))
                                 (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "27"))
                                 (builtin "One Step Simplification" (formula "26"))
                                 (rule "true_left" (formula "26"))
                                 (rule "commute_or_2" (formula "30") (term "0"))
                                 (rule "commute_or_2" (formula "2") (term "0"))
                                 (rule "ifthenelse_split" (formula "17") (term "0"))
                                 (branch "self.concatenated.length ≥ 1 TRUE"
                                    (rule "eqSymm" (formula "18"))
                                    (rule "applyEq" (formula "19") (term "1,1,0,0") (ifseqformula "18"))
                                    (rule "applyEq" (formula "41") (term "1") (ifseqformula "18"))
                                    (builtin "One Step Simplification" (formula "41"))
                                    (rule "orRight" (formula "41"))
                                    (rule "eqSymm" (formula "42"))
                                    (rule "inEqSimp_geqRight" (formula "41"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "mul_literals" (formula "1") (term "1"))
                                    (rule "inEqSimp_contradEq3" (formula "42") (ifseqformula "1"))
                                    (rule "times_zero_1" (formula "42") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "42") (term "0,0"))
                                    (rule "qeq_literals" (formula "42") (term "0"))
                                    (builtin "One Step Simplification" (formula "42"))
                                    (rule "false_right" (formula "42"))
                                    (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "18"))
                                    (rule "qeq_literals" (formula "1") (term "0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "self.concatenated.length ≥ 1 FALSE"
                                    (rule "eqSymm" (formula "17"))
                                    (builtin "One Step Simplification" (formula "17"))
                                    (rule "inEqSimp_geqRight" (formula "31"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_notGeq" (formula "18") (term "0"))
                                    (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                                    (rule "add_literals" (formula "18") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "18") (term "0,0"))
                                    (rule "nnf_imp2or" (formula "28") (term "0"))
                                    (rule "ifthenelse_split" (formula "41") (term "1"))
                                    (branch "msg.length ≥ 1 TRUE"
                                       (rule "replace_known_left" (formula "20") (term "0,1,1,0,0") (ifseqformula "1"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "inEqSimp_contradEq7" (formula "19") (term "1") (ifseqformula "1"))
                                       (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "19") (term "0,0,1"))
                                       (rule "leq_literals" (formula "19") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "19"))
                                       (rule "inEqSimp_contradInEq1" (formula "19") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "19") (term "0"))
                                       (builtin "One Step Simplification" (formula "19"))
                                       (rule "closeFalse" (formula "19"))
                                    )
                                    (branch "msg.length ≥ 1 FALSE"
                                       (builtin "One Step Simplification" (formula "42"))
                                       (rule "orRight" (formula "42"))
                                       (rule "notRight" (formula "42"))
                                       (rule "replace_known_right" (formula "20") (term "0,1,1,0,0") (ifseqformula "42"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "inEqSimp_geqRight" (formula "42"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "1"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "true_left" (formula "20"))
                                       (rule "inEqSimp_strengthen1" (formula "2") (ifseqformula "42"))
                                       (rule "add_zero_right" (formula "2") (term "1"))
                                       (rule "inEqSimp_contradEq7" (formula "42") (ifseqformula "2"))
                                       (rule "times_zero_1" (formula "42") (term "1,0,0"))
                                       (rule "add_literals" (formula "42") (term "0,0"))
                                       (rule "leq_literals" (formula "42") (term "0"))
                                       (builtin "One Step Simplification" (formula "42"))
                                       (rule "false_right" (formula "42"))
                                       (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "3"))
                                       (rule "qeq_literals" (formula "2") (term "0"))
                                       (builtin "One Step Simplification" (formula "2"))
                                       (rule "closeFalse" (formula "2"))
                                    )
                                 )
                              )
                              (branch
                                 (rule "allRight" (formula "25") (inst "sk=iv_16") (userinteraction))
                                 (rule "impRight" (formula "25") (userinteraction))
                                 (rule "array2seqDef" (formula "26") (term "0,0") (inst "u=u") (userinteraction))
                                 (rule "array2seqDef" (formula "26") (term "0,1") (inst "u=u") (userinteraction))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "1") (ifseqformula "20"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "eqSymm" (formula "32"))
                                 (rule "eqSymm" (formula "24"))
                                 (rule "eqSymm" (formula "12") (term "1,0"))
                                 (rule "eqSymm" (formula "14"))
                                 (rule "eqSymm" (formula "15"))
                                 (rule "eqSymm" (formula "16"))
                                 (rule "eqSymm" (formula "17"))
                                 (rule "eqSymm" (formula "18"))
                                 (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "31"))
                                 (builtin "One Step Simplification" (formula "9"))
                                 (rule "replace_known_right" (formula "23") (term "0,1") (ifseqformula "28"))
                                 (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "29")))
                                 (rule "getOfSeqDef" (formula "27") (term "0"))
                                 (rule "castDel" (formula "27") (term "1,0"))
                                 (rule "castDel" (formula "27") (term "2,0"))
                                 (rule "add_zero_right" (formula "27") (term "0,2,1,0"))
                                 (rule "eqSymm" (formula "27"))
                                 (rule "replace_known_left" (formula "27") (term "0,0,1") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "27"))
                                 (rule "polySimp_elimSub" (formula "27") (term "1,0,1"))
                                 (rule "mul_literals" (formula "27") (term "1,1,0,1"))
                                 (rule "add_zero_right" (formula "27") (term "1,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                                 (rule "getOfSeqDef" (formula "27") (term "0"))
                                 (rule "castDel" (formula "27") (term "1,0"))
                                 (rule "castDel" (formula "27") (term "2,0"))
                                 (rule "add_zero_right" (formula "27") (term "0,2,1,0"))
                                 (rule "eqSymm" (formula "27"))
                                 (rule "replace_known_left" (formula "27") (term "0,0,1") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "27"))
                                 (rule "polySimp_elimSub" (formula "27") (term "1,0,1"))
                                 (rule "times_zero_2" (formula "27") (term "1,1,0,1"))
                                 (rule "add_zero_right" (formula "27") (term "1,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "2"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "27") (term "0,0"))
                                 (rule "eqSymm" (formula "27"))
                                 (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,1"))
                                 (rule "polySimp_addComm1" (formula "27") (term "0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "27") (term "0,0"))
                                 (rule "eqSymm" (formula "27"))
                                 (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,1"))
                                 (rule "polySimp_addComm1" (formula "27") (term "0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "1"))
                                 (rule "applyEq" (formula "15") (term "1,1,0") (ifseqformula "18"))
                                 (rule "applyEq" (formula "32") (term "1,1,1") (ifseqformula "18"))
                                 (rule "applyEq" (formula "14") (term "0,0,0") (ifseqformula "17"))
                                 (rule "applyEq" (formula "14") (term "1") (ifseqformula "18"))
                                 (rule "applyEq" (formula "14") (term "0,0,0") (ifseqformula "16"))
                                 (rule "applyEq" (formula "32") (term "1") (ifseqformula "15"))
                                 (rule "applyEq" (formula "12") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                                 (rule "applyEq" (formula "17") (term "1") (ifseqformula "16"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "27") (term "0,0,0"))
                                 (rule "eqSymm" (formula "27"))
                                 (rule "polySimp_elimOne" (formula "27") (term "0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "27") (term "0,0,0"))
                                 (rule "eqSymm" (formula "27"))
                                 (rule "polySimp_elimOne" (formula "27") (term "0,0,1"))
                                 (rule "array2seqDef" (formula "3") (term "0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "5") (term "0") (inst "u=u"))
                                 (rule "nonNull" (formula "26") (inst "i=i"))
                                 (rule "sub_literals" (formula "26") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "29")))
                                 (rule "greater_literals" (formula "26") (term "0"))
                                 (builtin "One Step Simplification" (formula "26"))
                                 (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
                                 (rule "array2seqDef" (formula "5") (term "1") (inst "u=u"))
                                 (rule "array2seqDef" (formula "4") (term "0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "3") (term "1") (inst "u=u"))
                                 (rule "array2seqDef" (formula "4") (term "1") (inst "u=u"))
                                 (rule "array2seqDef" (formula "32") (term "0,0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "32") (term "1,1,0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "32") (term "0,1,0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "12") (term "0,0,0,1,0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "12") (term "1,0,0,1,0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "12") (term "1,1,0") (inst "u=u"))
                                 (rule "eqSymm" (formula "12") (term "1,0"))
                                 (rule "array2seqDef" (formula "15") (term "0,1,0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "15") (term "1") (inst "u=u"))
                                 (rule "eqSymm" (formula "15"))
                                 (rule "applyEq" (formula "5") (term "1") (ifseqformula "15"))
                                 (rule "array2seqDef" (formula "18") (term "0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "18") (term "1") (inst "u=u"))
                                 (rule "narrowSelectArrayType" (formula "18") (term "2,1") (ifseqformula "6") (ifseqformula "31"))
                                 (rule "array2seqDef" (formula "14") (term "1") (inst "u=u"))
                                 (rule "eqSymm" (formula "14"))
                                 (rule "narrowSelectArrayType" (formula "14") (term "2,0") (ifseqformula "6") (ifseqformula "31"))
                                 (rule "applyEq" (formula "18") (term "1") (ifseqformula "14"))
                                 (rule "array2seqDef" (formula "32") (term "1") (inst "u=u"))
                                 (rule "applyEq" (formula "32") (term "1") (ifseqformula "15"))
                                 (rule "array2seqDef" (formula "2") (term "0,0") (inst "u=u"))
                                 (rule "lenOfSeqDef" (formula "2") (term "0"))
                                 (rule "polySimp_elimSub" (formula "2") (term "1,0"))
                                 (rule "times_zero_2" (formula "2") (term "1,1,0"))
                                 (rule "add_zero_right" (formula "2") (term "1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0"))
                                 (rule "add_zero_right" (formula "2") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0,0,0"))
                                 (rule "eqSeqDef" (formula "3") (inst "iv=iv"))
                                 (rule "andLeft" (formula "3"))
                                 (rule "lenOfSeqDef" (formula "3") (term "1"))
                                 (rule "polySimp_elimSub" (formula "3") (term "1,1"))
                                 (rule "times_zero_2" (formula "3") (term "1,1,1"))
                                 (rule "add_zero_right" (formula "3") (term "1,1"))
                                 (rule "getOfSeqDef" (formula "4") (term "1,1,0"))
                                 (rule "castDel" (formula "4") (term "2,1,1,0"))
                                 (rule "castDel" (formula "4") (term "1,1,1,0"))
                                 (rule "add_zero_right" (formula "4") (term "0,2,1,1,1,0"))
                                 (rule "polySimp_elimSub" (formula "4") (term "1,1,0,1,1,0"))
                                 (rule "times_zero_2" (formula "4") (term "1,1,1,0,1,1,0"))
                                 (rule "add_zero_right" (formula "4") (term "1,1,0,1,1,0"))
                                 (rule "getOfSeqDef" (formula "4") (term "0,1,0"))
                                 (rule "castDel" (formula "4") (term "2,0,1,0"))
                                 (rule "castDel" (formula "4") (term "1,0,1,0"))
                                 (rule "add_zero_right" (formula "4") (term "0,2,1,0,1,0"))
                                 (rule "polySimp_elimSub" (formula "4") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_2" (formula "4") (term "1,1,1,0,0,1,0"))
                                 (rule "add_zero_right" (formula "4") (term "1,1,0,0,1,0"))
                                 (rule "lenOfSeqDef" (formula "4") (term "1,1,0,0"))
                                 (rule "polySimp_elimSub" (formula "4") (term "1,1,1,0,0"))
                                 (rule "times_zero_2" (formula "4") (term "1,1,1,1,0,0"))
                                 (rule "add_zero_right" (formula "4") (term "1,1,1,0,0"))
                                 (rule "lenOfSeqDef" (formula "3") (term "0"))
                                 (rule "polySimp_elimSub" (formula "3") (term "1,0"))
                                 (rule "times_zero_2" (formula "3") (term "1,1,0"))
                                 (rule "add_zero_right" (formula "3") (term "1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "3") (term "0,1"))
                                 (rule "add_zero_right" (formula "3") (term "0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "4") (term "0,1,1,0,0"))
                                 (rule "add_zero_right" (formula "4") (term "0,0,1,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0"))
                                 (rule "add_zero_right" (formula "3") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,1,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,1,0"))
                                 (rule "apply_eq_monomials" (formula "4") (term "1,0,0,1,0,0") (ifseqformula "3"))
                                 (rule "polySimp_rightDist" (formula "4") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0,0,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "4") (term "1,0,1,0,0,1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "4") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "4") (term "1,1,1,0,0,1,0,0"))
                                 (rule "times_zero_1" (formula "4") (term "1,1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "4") (term "1,0,0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "0,0,1"))
                                 (rule "polySimp_elimOne" (formula "3") (term "0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "4") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,1,1,0"))
                                 (rule "mul_literals" (formula "4") (term "0,1,1,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "4") (term "0,1,1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0"))
                                 (rule "polySimp_elimOne" (formula "3") (term "0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0,1,0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0,1,0,0,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "4") (term "0,0,0,1,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "4") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0"))
                                 (rule "eqSeqDef" (formula "5") (inst "iv=iv"))
                                 (rule "andLeft" (formula "5"))
                                 (rule "lenOfSeqDef" (formula "5") (term "1"))
                                 (rule "polySimp_elimSub" (formula "5") (term "1,1"))
                                 (rule "mul_literals" (formula "5") (term "1,1,1"))
                                 (rule "add_zero_right" (formula "5") (term "1,1"))
                                 (rule "getOfSeqDef" (formula "6") (term "1,1,0"))
                                 (rule "castDel" (formula "6") (term "1,1,1,0"))
                                 (rule "castDel" (formula "6") (term "2,1,1,0"))
                                 (rule "add_zero_right" (formula "6") (term "0,2,1,1,1,0"))
                                 (rule "polySimp_elimSub" (formula "6") (term "1,1,0,1,1,0"))
                                 (rule "times_zero_2" (formula "6") (term "1,1,1,0,1,1,0"))
                                 (rule "add_zero_right" (formula "6") (term "1,1,0,1,1,0"))
                                 (rule "lenOfSeqDef" (formula "6") (term "1,1,0,0"))
                                 (rule "polySimp_elimSub" (formula "6") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "6") (term "1,1,1,1,0,0"))
                                 (rule "add_zero_right" (formula "6") (term "1,1,1,0,0"))
                                 (rule "getOfSeqDef" (formula "6") (term "0,1,0"))
                                 (rule "castDel" (formula "6") (term "1,0,1,0"))
                                 (rule "castDel" (formula "6") (term "2,0,1,0"))
                                 (rule "add_zero_right" (formula "6") (term "0,2,1,0,1,0"))
                                 (rule "polySimp_elimSub" (formula "6") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_2" (formula "6") (term "1,1,1,0,0,1,0"))
                                 (rule "add_zero_right" (formula "6") (term "1,1,0,0,1,0"))
                                 (rule "lenOfSeqDef" (formula "5") (term "0"))
                                 (rule "polySimp_elimSub" (formula "5") (term "1,0"))
                                 (rule "times_zero_2" (formula "5") (term "1,1,0"))
                                 (rule "add_zero_right" (formula "5") (term "1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "5") (term "0,1"))
                                 (rule "add_zero_right" (formula "5") (term "0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "6") (term "0,1,1,0,0"))
                                 (rule "add_zero_right" (formula "6") (term "0,0,1,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0"))
                                 (rule "add_zero_right" (formula "5") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,1,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0"))
                                 (rule "apply_eq_monomials" (formula "6") (term "1,0,0,1,0,0") (ifseqformula "5"))
                                 (rule "polySimp_rightDist" (formula "6") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,0,0,1,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "6") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "6") (term "1,1,1,0,0,1,0,0"))
                                 (rule "times_zero_1" (formula "6") (term "1,1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "6") (term "1,0,0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "0,0,1"))
                                 (rule "polySimp_elimOne" (formula "5") (term "0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "6") (term "1,1,0,1,1,0"))
                                 (rule "mul_literals" (formula "6") (term "0,1,1,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "6") (term "0,1,1,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "0,0,0"))
                                 (rule "polySimp_elimOne" (formula "5") (term "0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,0,1,0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0,1,0,0,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "6") (term "0,0,0,1,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
                                 (rule "array2seqDef" (formula "17") (term "1,1,1") (inst "u=u"))
                                 (rule "narrowSelectArrayType" (formula "17") (term "2,1,1,1") (ifseqformula "8") (ifseqformula "33"))
                                 (rule "applyEq" (formula "17") (term "1,1,1") (ifseqformula "16"))
                                 (rule "pullOutSelect" (formula "26") (term "1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_18"))
                                 (rule "simplifySelectOfAnonEQ" (formula "26") (ifseqformula "23"))
                                 (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "33")) (ifInst ""  (formula "9")))
                                 (rule "applyEqReverse" (formula "27") (term "1,0") (ifseqformula "26"))
                                 (rule "hideAuxiliaryEq" (formula "26"))
                                 (rule "array2seqDef" (formula "17") (term "0,1") (inst "u=u"))
                                 (rule "eqSymm" (formula "17"))
                                 (rule "array2seqDef" (formula "7") (term "0,1") (inst "u=u"))
                                 (rule "array2seqDef" (formula "7") (term "1,1,1") (inst "u=u"))
                                 (rule "narrowSelectArrayType" (formula "7") (term "2,1,1,1") (ifseqformula "8") (ifseqformula "33"))
                                 (rule "applyEq" (formula "7") (term "1,1,1") (ifseqformula "16"))
                                 (rule "applyEq" (formula "7") (term "1") (ifseqformula "17"))
                                 (rule "array2seqDef" (formula "34") (term "1,1,1") (inst "u=u"))
                                 (rule "narrowSelectArrayType" (formula "34") (term "2,1,1,1") (ifseqformula "8") (ifseqformula "33"))
                                 (rule "applyEq" (formula "34") (term "1,1,1") (ifseqformula "16"))
                                 (rule "array2seqDef" (formula "34") (term "0,1") (inst "u=u"))
                                 (rule "applyEq" (formula "34") (term "1") (ifseqformula "17"))
                                 (rule "pullOutSelect" (formula "29") (term "1,0") (inst "selectSK=arr_288"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "pullOutSelect" (formula "30") (term "0,0,0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_15"))
                                 (rule "applyEq" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "36") (term "1,2,1,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "4") (term "0,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "2") (term "1,2,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "2") (term "1,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "36") (term "0,1,1,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "2") (term "0,0,0,0,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "4") (term "0,0,0,0") (ifseqformula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "34")) (ifInst ""  (formula "11")))
                                 (rule "applyEqReverse" (formula "31") (term "0,0,0,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "36") (term "1,2,1,1,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "4") (term "0,1,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "2") (term "1,2,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "2") (term "1,1,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "36") (term "0,1,1,1,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "2") (term "0,0,0,0,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "4") (term "0,0,0,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "eqSymm" (formula "30"))
                                 (rule "pullOutSelect" (formula "8") (term "1,2,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_15"))
                                 (rule "applyEq" (formula "9") (term "0,1,0") (ifseqformula "8"))
                                 (rule "simplifySelectOfAnonEQ" (formula "8") (ifseqformula "25"))
                                 (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "34")) (ifInst ""  (formula "11")))
                                 (rule "applyEqReverse" (formula "9") (term "0,1,0") (ifseqformula "8"))
                                 (rule "applyEqReverse" (formula "9") (term "1,2,0") (ifseqformula "8"))
                                 (rule "hideAuxiliaryEq" (formula "8"))
                                 (rule "pullOutSelect" (formula "5") (term "1,1,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_15"))
                                 (rule "applyEq" (formula "6") (term "0,1,1,1,0,0,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "4") (term "0,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "4") (term "0,0,0,0") (ifseqformula "5"))
                                 (rule "simplifySelectOfAnonEQ" (formula "5") (ifseqformula "25"))
                                 (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "34")) (ifInst ""  (formula "11")))
                                 (rule "applyEqReverse" (formula "6") (term "0,1,1,1,0,0,1,0") (ifseqformula "5"))
                                 (rule "applyEqReverse" (formula "4") (term "0,1,0") (ifseqformula "5"))
                                 (rule "applyEqReverse" (formula "6") (term "1,1,0,1,0") (ifseqformula "5"))
                                 (rule "applyEqReverse" (formula "4") (term "0,0,0,0") (ifseqformula "5"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "eqSeqDef" (formula "17") (inst "iv=iv"))
                                 (rule "andLeft" (formula "17"))
                                 (rule "getOfSeqDef" (formula "18") (term "1,1,0"))
                                 (rule "castDel" (formula "18") (term "2,1,1,0"))
                                 (rule "castDel" (formula "18") (term "1,1,1,0"))
                                 (rule "add_zero_right" (formula "18") (term "0,2,1,1,1,0"))
                                 (rule "polySimp_elimSub" (formula "18") (term "1,1,0,1,1,0"))
                                 (rule "times_zero_2" (formula "18") (term "1,1,1,0,1,1,0"))
                                 (rule "add_zero_right" (formula "18") (term "1,1,0,1,1,0"))
                                 (rule "lenOfSeqDefEQ" (formula "17") (term "1") (ifseqformula "7"))
                                 (rule "polySimp_elimSub" (formula "17") (term "1,1"))
                                 (rule "times_zero_2" (formula "17") (term "1,1,1"))
                                 (rule "add_zero_right" (formula "17") (term "1,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                                 (rule "polySimp_addComm1" (formula "18") (term "0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,1,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,1,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "17") (term "0,1"))
                                 (rule "applyEq" (formula "18") (term "0,1,0,1,0,0") (ifseqformula "17"))
                                 (rule "polySimp_addComm1" (formula "18") (term "0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "18") (term "1,1,0,1,1,0"))
                                 (rule "mul_literals" (formula "18") (term "0,1,1,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                                 (rule "eqSeqDef2" (formula "21") (inst "iv=iv") (ifseqformula "16"))
                                 (rule "andLeft" (formula "21"))
                                 (rule "lenOfSeqDef" (formula "21") (term "1"))
                                 (rule "polySimp_elimSub" (formula "21") (term "1,1"))
                                 (rule "times_zero_2" (formula "21") (term "1,1,1"))
                                 (rule "add_zero_right" (formula "21") (term "1,1"))
                                 (rule "lenOfSeqDef" (formula "22") (term "1,1,0,0"))
                                 (rule "polySimp_elimSub" (formula "22") (term "1,1,1,0,0"))
                                 (rule "times_zero_2" (formula "22") (term "1,1,1,1,0,0"))
                                 (rule "add_zero_right" (formula "22") (term "1,1,1,0,0"))
                                 (rule "getOfSeqDef" (formula "22") (term "1,1,0"))
                                 (rule "castDel" (formula "22") (term "2,1,1,0"))
                                 (rule "castDel" (formula "22") (term "1,1,1,0"))
                                 (rule "add_zero_right" (formula "22") (term "0,2,1,1,1,0"))
                                 (rule "polySimp_elimSub" (formula "22") (term "1,1,0,1,1,0"))
                                 (rule "times_zero_2" (formula "22") (term "1,1,1,0,1,1,0"))
                                 (rule "add_zero_right" (formula "22") (term "1,1,0,1,1,0"))
                                 (rule "getOfSeqDef" (formula "22") (term "0,1,0"))
                                 (rule "castDel" (formula "22") (term "1,0,1,0"))
                                 (rule "castDel" (formula "22") (term "2,0,1,0"))
                                 (rule "add_zero_right" (formula "22") (term "0,2,1,0,1,0"))
                                 (rule "polySimp_elimSub" (formula "22") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_2" (formula "22") (term "1,1,1,0,0,1,0"))
                                 (rule "add_zero_right" (formula "22") (term "1,1,0,0,1,0"))
                                 (rule "lenOfSeqDef" (formula "21") (term "0"))
                                 (rule "polySimp_elimSub" (formula "21") (term "1,0"))
                                 (rule "times_zero_2" (formula "21") (term "1,1,0"))
                                 (rule "add_zero_right" (formula "21") (term "1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "21") (term "0,1"))
                                 (rule "add_zero_right" (formula "21") (term "0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "22") (term "0,1,1,0,0"))
                                 (rule "add_zero_right" (formula "22") (term "0,0,1,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0"))
                                 (rule "add_zero_right" (formula "21") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,1,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1,0"))
                                 (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0") (ifseqformula "21"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "21") (term "0,0,1"))
                                 (rule "polySimp_elimOne" (formula "21") (term "0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1,1,0,1,1,0"))
                                 (rule "mul_literals" (formula "22") (term "0,1,1,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "22") (term "0,1,1,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "21") (term "0,0,0"))
                                 (rule "polySimp_elimOne" (formula "21") (term "0,0,0"))
                                 (rule "applyEq" (formula "3") (term "0") (ifseqformula "21"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,1,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "0,0,1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "22") (term "0,0,1,1,1,0,0"))
                                 (rule "eqSeqDef2" (formula "16") (inst "iv=iv") (ifseqformula "16"))
                                 (builtin "One Step Simplification" (formula "16"))
                                 (rule "true_left" (formula "16"))
                                 (rule "pullOutSelect" (formula "6") (term "1,1,0,1,0") (inst "selectSK=verif_selectvoting_system_core_Tag_BALLOTS_7"))
                                 (rule "applyEq" (formula "5") (term "0,1,0") (ifseqformula "6"))
                                 (rule "applyEq" (formula "7") (term "0,1,1,1,0,0,1,0") (ifseqformula "6"))
                                 (rule "applyEq" (formula "5") (term "0,0,0,0") (ifseqformula "6"))
                                 (rule "simplifySelectOfAnonEQ" (formula "6") (ifseqformula "25"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "applyEqReverse" (formula "5") (term "0,1,0") (ifseqformula "6"))
                                 (rule "applyEqReverse" (formula "7") (term "0,1,1,1,0,0,1,0") (ifseqformula "6"))
                                 (rule "applyEqReverse" (formula "5") (term "0,0,0,0") (ifseqformula "6"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "applyEqReverse" (formula "6") (term "1,1,0,1,0") (ifseqformula "5"))
                                 (rule "hideAuxiliaryEq" (formula "5"))
                                 (rule "equalityToSeqGetAndSeqLenRight" (formula "34") (inst "iv=iv"))
                                 (rule "lenOfSeqDef" (formula "34") (term "1,0"))
                                 (rule "polySimp_elimSub" (formula "34") (term "1,1,0"))
                                 (rule "times_zero_2" (formula "34") (term "1,1,1,0"))
                                 (rule "add_zero_right" (formula "34") (term "1,1,0"))
                                 (rule "getOfSeqDef" (formula "34") (term "1,1,0,1"))
                                 (rule "castDel" (formula "34") (term "2,1,1,0,1"))
                                 (rule "castDel" (formula "34") (term "1,1,1,0,1"))
                                 (rule "add_zero_right" (formula "34") (term "0,2,1,1,1,0,1"))
                                 (rule "polySimp_elimSub" (formula "34") (term "1,1,0,1,1,0,1"))
                                 (rule "times_zero_2" (formula "34") (term "1,1,1,0,1,1,0,1"))
                                 (rule "add_zero_right" (formula "34") (term "1,1,0,1,1,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0,1"))
                                 (rule "polySimp_addComm1" (formula "34") (term "0,1,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "34") (term "0,1,0"))
                                 (rule "add_zero_right" (formula "34") (term "0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,1,1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,1,1,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,1,1,0,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "34") (term "1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "34") (term "0,1,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "34") (term "0,1,0,0,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "34") (term "0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "34") (term "0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "34") (term "0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,1,1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,1,1,0,1"))
                                 (rule "polySimp_rightDist" (formula "34") (term "1,1,0,1,1,0,1"))
                                 (rule "mul_literals" (formula "34") (term "0,1,1,0,1,1,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,1,1,0,1"))
                                 (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,1,1,0,1"))
                                 (rule "eqSeqDef" (formula "6") (inst "iv=iv"))
                                 (rule "andLeft" (formula "6"))
                                 (rule "getOfSeqDef" (formula "7") (term "0,1,0"))
                                 (rule "castDel" (formula "7") (term "1,0,1,0"))
                                 (rule "castDel" (formula "7") (term "2,0,1,0"))
                                 (rule "add_zero_right" (formula "7") (term "0,2,1,0,1,0"))
                                 (rule "eqSymm" (formula "7") (term "1,0"))
                                 (rule "polySimp_elimSub" (formula "7") (term "1,1,0,1,1,0"))
                                 (rule "times_zero_2" (formula "7") (term "1,1,1,0,1,1,0"))
                                 (rule "add_zero_right" (formula "7") (term "1,1,0,1,1,0"))
                                 (rule "lenOfSeqDef" (formula "6") (term "0"))
                                 (rule "eqSymm" (formula "6"))
                                 (rule "polySimp_elimSub" (formula "6") (term "1,1"))
                                 (rule "times_zero_2" (formula "6") (term "1,1,1"))
                                 (rule "add_zero_right" (formula "6") (term "1,1"))
                                 (rule "lenOfSeqDef" (formula "7") (term "1,1,0,0"))
                                 (rule "polySimp_elimSub" (formula "7") (term "1,1,1,0,0"))
                                 (rule "times_zero_2" (formula "7") (term "1,1,1,1,0,0"))
                                 (rule "add_zero_right" (formula "7") (term "1,1,1,0,0"))
                                 (rule "getOfSeqDef" (formula "7") (term "0,1,0"))
                                 (rule "castDel" (formula "7") (term "2,0,1,0"))
                                 (rule "castDel" (formula "7") (term "1,0,1,0"))
                                 (rule "add_zero_right" (formula "7") (term "0,2,1,0,1,0"))
                                 (rule "polySimp_elimSub" (formula "7") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_2" (formula "7") (term "1,1,1,0,0,1,0"))
                                 (rule "add_zero_right" (formula "7") (term "1,1,0,0,1,0"))
                                 (rule "eqSymm" (formula "7") (term "1,0"))
                                 (rule "lenOfSeqDef" (formula "6") (term "0"))
                                 (rule "polySimp_elimSub" (formula "6") (term "1,0"))
                                 (rule "times_zero_2" (formula "6") (term "1,1,0"))
                                 (rule "add_zero_right" (formula "6") (term "1,0"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "true_left" (formula "6"))
                                 (rule "inEqSimp_ltToLeq" (formula "6") (term "0,1,1,0,0"))
                                 (rule "add_zero_right" (formula "6") (term "0,0,1,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0"))
                                 (rule "eqSymm" (formula "6") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0"))
                                 (rule "eqSymm" (formula "6") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,1,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,1,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,0,1,0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0,1,0,0,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "6") (term "0,0,0,1,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0,1,0"))
                                 (rule "eqSymm" (formula "6") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "6") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,1,1,0"))
                                 (rule "mul_literals" (formula "6") (term "0,1,1,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "6") (term "0,1,1,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,1,0"))
                                 (rule "eqSymm" (formula "6") (term "1,0"))
                                 (rule "nnf_imp2or" (formula "28") (term "0"))
                                 (rule "nnf_imp2or" (formula "13") (term "0"))
                                 (rule "Definition_axiom_for_ghostFieldsNonNull_in_verif_selectvoting_system_core_MixServer" (formula "12") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "andLeft" (formula "12"))
                                 (rule "andLeft" (formula "12"))
                                 (rule "andLeft" (formula "12"))
                                 (rule "andLeft" (formula "12"))
                                 (rule "andLeft" (formula "12"))
                                 (rule "notLeft" (formula "14"))
                                 (rule "notLeft" (formula "13"))
                                 (rule "andLeft" (formula "12"))
                                 (rule "notLeft" (formula "13"))
                                 (rule "andLeft" (formula "12"))
                                 (rule "notLeft" (formula "13"))
                                 (rule "notLeft" (formula "12"))
                                 (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "34"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "ifthenelse_negated" (formula "1") (term "0"))
                                 (rule "narrowSelectArrayType" (formula "18") (term "1,1,1,0") (ifseqformula "7") (ifseqformula "35"))
                                 (rule "narrowSelectArrayType" (formula "22") (term "1,0,1,0") (ifseqformula "7") (ifseqformula "34"))
                                 (rule "narrowSelectArrayType" (formula "36") (term "1,0") (ifseqformula "7") (ifseqformula "34"))
                                 (rule "eqSymm" (formula "36"))
                                 (rule "narrowSelectArrayType" (formula "41") (term "1,1,1,0,1") (ifseqformula "7") (ifseqformula "35"))
                                 (rule "narrowSelectArrayType" (formula "6") (term "1,1,1,0") (ifseqformula "7") (ifseqformula "35"))
                                 (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                                 (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "7") (ifseqformula "34"))
                                 (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "24") (ifseqformula "34"))
                                 (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                                 (rule "applyEq" (formula "14") (term "0,1,0,0,1,0,0") (ifseqformula "20"))
                                 (rule "applyEq" (formula "13") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                                 (rule "nnf_imp2or" (formula "4") (term "0"))
                                 (rule "nnf_imp2or" (formula "5") (term "0"))
                                 (rule "nnf_notAnd" (formula "30") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "30") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "30") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
                                 (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                 (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                                 (rule "arrayLengthNotNegative" (formula "19") (term "1"))
                                 (rule "arrayLengthNotNegative" (formula "20") (term "0"))
                                 (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                                 (rule "arrayLengthIsAShort" (formula "20") (term "1"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "true_left" (formula "20"))
                                 (rule "arrayLengthIsAShort" (formula "20") (term "0"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "true_left" (formula "20"))
                                 (rule "arrayLengthIsAShort" (formula "21") (term "0"))
                                 (builtin "One Step Simplification" (formula "21"))
                                 (rule "true_left" (formula "21"))
                                 (rule "arrayLengthNotNegative" (formula "21") (term "0"))
                                 (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                 (rule "nnf_imp2or" (formula "18") (term "0"))
                                 (rule "nnf_imp2or" (formula "23") (term "0"))
                                 (rule "nnf_imp2or" (formula "6") (term "0"))
                                 (rule "nnf_imp2or" (formula "42") (term "0,1"))
                                 (rule "nnf_imp2or" (formula "12") (term "0"))
                                 (rule "nnf_imp2or" (formula "14") (term "0"))
                                 (rule "nnf_imp2or" (formula "13") (term "0"))
                                 (rule "nnf_notAnd" (formula "4") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "4") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "4") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "4") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
                                 (rule "mul_literals" (formula "4") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "4") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "4") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "4") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "5") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "5") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
                                 (rule "mul_literals" (formula "5") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "5") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "18") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                                 (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "23") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                                 (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                                 (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "6") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "6") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
                                 (rule "mul_literals" (formula "6") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                 (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "14") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
                                 (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "14") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                                 (rule "mul_literals" (formula "14") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "13") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
                                 (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                                 (rule "mul_literals" (formula "13") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "42") (term "0,0,1"))
                                 (rule "inEqSimp_notGeq" (formula "42") (term "1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "42") (term "1,0,0,1,0,0,1"))
                                 (rule "mul_literals" (formula "42") (term "0,1,0,0,1,0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "42") (term "0,0,1,0,0,1"))
                                 (rule "add_literals" (formula "42") (term "0,0,0,1,0,0,1"))
                                 (rule "add_zero_left" (formula "42") (term "0,0,1,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "42") (term "1,1,0,0,1"))
                                 (rule "inEqSimp_notGeq" (formula "42") (term "0,0,0,1"))
                                 (rule "times_zero_1" (formula "42") (term "1,0,0,0,0,0,1"))
                                 (rule "add_zero_right" (formula "42") (term "0,0,0,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,0,1"))
                                 (rule "mul_literals" (formula "42") (term "1,0,0,0,1"))
                                 (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "24") (ifseqformula "9"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "notLeft" (formula "25"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "notLeft" (formula "26"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "notLeft" (formula "26"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "notLeft" (formula "26"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "notLeft" (formula "24"))
                                 (rule "notLeft" (formula "24"))
                                 (rule "narrowSelectArrayType" (formula "4") (term "1,1,1,0") (ifseqformula "7") (ifseqformula "37"))
                                 (rule "narrowSelectArrayType" (formula "48") (term "2,0,1,0,0,1,0,0,1") (ifseqformula "7") (ifseqformula "37"))
                                 (rule "narrowSelectArrayType" (formula "18") (term "2,0,1,0,0,1,0") (ifseqformula "7") (ifseqformula "37"))
                                 (rule "narrowSelectArrayType" (formula "15") (term "2,0,0,1,1,0") (ifseqformula "7") (ifseqformula "37"))
                                 (rule "narrowSelectArrayType" (formula "17") (term "2,0,1,0,0") (ifseqformula "7") (ifseqformula "37"))
                                 (rule "narrowSelectArrayType" (formula "48") (term "2,0,1,0,0,1,0,1") (ifseqformula "7") (ifseqformula "37"))
                                 (rule "narrowSelectArrayType" (formula "48") (term "2,0,1,0,0,0") (ifseqformula "7") (ifseqformula "37"))
                                 (rule "nonNull" (formula "26") (inst "i=i"))
                                 (rule "greater_literals" (formula "26") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "38")))
                                 (rule "sub_literals" (formula "26") (term "2,1,0"))
                                 (builtin "One Step Simplification" (formula "26"))
                                 (rule "narrowSelectArrayType" (formula "26") (term "0,0,1,0") (ifseqformula "7") (ifseqformula "38"))
                                 (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "25") (inst "i=i"))
                                 (rule "sub_literals" (formula "25") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "39")))
                                 (rule "greater_literals" (formula "25") (term "0"))
                                 (builtin "One Step Simplification" (formula "25"))
                                 (rule "narrowSelectArrayType" (formula "25") (term "0,0,1,0") (ifseqformula "7") (ifseqformula "39"))
                                 (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                                 (rule "applyEq" (formula "25") (term "0,1,0,0,1,0,0") (ifseqformula "20"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "24") (inst "i=i"))
                                 (rule "greater_literals" (formula "24") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "40")))
                                 (rule "sub_literals" (formula "24") (term "2,1,0"))
                                 (builtin "One Step Simplification" (formula "24"))
                                 (rule "narrowSelectArrayType" (formula "24") (term "0,0,1,0") (ifseqformula "7") (ifseqformula "40"))
                                 (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                                 (rule "applyEq" (formula "24") (term "0,1,0,0,1,0,0") (ifseqformula "21"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                                 (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "32") (ifseqformula "9"))
                                 (rule "replaceKnownSelect_taclet11000100020_7" (formula "32") (term "0,0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet11000100020_8" (formula "32") (term "0,0,1"))
                                 (rule "replaceKnownSelect_taclet11000100020_0" (formula "32") (term "1,1,0,0,0,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet11000100020_1" (formula "32") (term "1,1,0,0,0,0,0,0"))
                                 (rule "replaceKnownSelect_taclet11000100020_5" (formula "32") (term "0,0,0,0,0,0,0,0,0,0"))
                                 (rule "replaceKnownSelect_taclet11000100020_3" (formula "32") (term "0,0,1,0,0,0,0,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet11000100020_6" (formula "32") (term "0,0,0,0,0,0,0,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet11000100020_4" (formula "32") (term "0,0,1,0,0,0,0,0,0,0"))
                                 (rule "andLeft" (formula "32"))
                                 (rule "notLeft" (formula "33"))
                                 (rule "andLeft" (formula "32"))
                                 (rule "notLeft" (formula "33"))
                                 (rule "andLeft" (formula "32"))
                                 (rule "notLeft" (formula "33"))
                                 (rule "andLeft" (formula "32"))
                                 (rule "andLeft" (formula "32"))
                                 (rule "notLeft" (formula "34"))
                                 (rule "andLeft" (formula "32"))
                                 (rule "andLeft" (formula "32"))
                                 (rule "andLeft" (formula "32"))
                                 (rule "notLeft" (formula "32"))
                                 (rule "notLeft" (formula "32"))
                                 (rule "nonNull" (formula "34") (inst "i=i"))
                                 (rule "sub_literals" (formula "34") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "34"))
                                 (rule "greater_literals" (formula "34") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "34"))
                                 (rule "andLeft" (formula "34"))
                                 (rule "notLeft" (formula "34"))
                                 (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "34") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "33") (inst "i=i"))
                                 (rule "sub_literals" (formula "33") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "33"))
                                 (rule "greater_literals" (formula "33") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "33"))
                                 (rule "andLeft" (formula "33"))
                                 (rule "notLeft" (formula "33"))
                                 (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0"))
                                 (rule "nonNull" (formula "32") (inst "i=i"))
                                 (rule "greater_literals" (formula "32") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "47")))
                                 (rule "sub_literals" (formula "32") (term "2,1,0"))
                                 (builtin "One Step Simplification" (formula "32"))
                                 (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0"))
                                 (rule "applyEq" (formula "32") (term "0,1,0,0,1,0,0") (ifseqformula "21"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "32") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0"))
                                 (rule "pullOutSelect" (formula "40") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_15"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")) (ifInst ""  (formula "9")))
                                 (rule "applyEqReverse" (formula "41") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "39") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_15"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")) (ifInst ""  (formula "9")))
                                 (rule "applyEqReverse" (formula "40") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "38") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_15"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "52")) (ifInst ""  (formula "9")))
                                 (rule "applyEqReverse" (formula "39") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "34") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_16"))
                                 (rule "applyEq" (formula "38") (term "0") (ifseqformula "34"))
                                 (rule "applyEq" (formula "35") (term "0,1,1,1,0,0") (ifseqformula "34"))
                                 (rule "simplifySelectOfAnonEQ" (formula "34") (ifseqformula "28"))
                                 (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "51")) (ifInst ""  (formula "8")))
                                 (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "34"))
                                 (rule "applyEqReverse" (formula "35") (term "1,0,0,1,0") (ifseqformula "34"))
                                 (rule "applyEqReverse" (formula "35") (term "0,1,1,1,0,0") (ifseqformula "34"))
                                 (rule "hideAuxiliaryEq" (formula "34"))
                                 (rule "pullOutSelect" (formula "33") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_17"))
                                 (rule "applyEq" (formula "34") (term "0,1,1,1,0,0") (ifseqformula "33"))
                                 (rule "applyEq" (formula "37") (term "0") (ifseqformula "33"))
                                 (rule "simplifySelectOfAnonEQ" (formula "33") (ifseqformula "28"))
                                 (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "50")) (ifInst ""  (formula "8")))
                                 (rule "applyEqReverse" (formula "34") (term "0,1,1,1,0,0") (ifseqformula "33"))
                                 (rule "applyEqReverse" (formula "34") (term "1,0,0,1,0") (ifseqformula "33"))
                                 (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "33"))
                                 (rule "hideAuxiliaryEq" (formula "33"))
                                 (rule "applyEq" (formula "33") (term "1,1,1,0,0") (ifseqformula "20"))
                                 (rule "nnf_imp2or" (formula "26") (term "0"))
                                 (rule "nnf_imp2or" (formula "25") (term "0"))
                                 (rule "equalityToSeqGetAndSeqLenLeft" (formula "31") (inst "iv=iv"))
                                 (rule "andLeft" (formula "31"))
                                 (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0"))
                                 (rule "applyEq" (formula "32") (term "0,0,1,0,0,1,0,0") (ifseqformula "33"))
                                 (rule "applyEq" (formula "32") (term "0,0,1,0") (ifseqformula "33"))
                                 (builtin "One Step Simplification" (formula "32"))
                                 (rule "true_left" (formula "32"))
                                 (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "32"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "true_left" (formula "31"))
                                 (rule "ifthenelse_split" (formula "17") (term "1"))
                                 (branch "self.unsigned.length ≥ 0 TRUE"
                                    (rule "replace_known_left" (formula "19") (term "0,1,1,0,0") (ifseqformula "17"))
                                    (builtin "One Step Simplification" (formula "19"))
                                    (rule "nnf_imp2or" (formula "25") (term "0"))
                                    (rule "commute_or_2" (formula "36") (term "0"))
                                    (rule "arrayLengthNotNegative" (formula "18") (term "1,0,1,0,0"))
                                    (rule "arrayLengthNotNegative" (formula "19") (term "1,0,0,0"))
                                    (rule "arrayLengthIsAShort" (formula "20") (term "1,0,0,0"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "true_left" (formula "20"))
                                    (rule "arrayLengthIsAShort" (formula "20") (term "1,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "true_left" (formula "20"))
                                    (rule "ifthenelse_split" (formula "25") (term "1"))
                                    (branch "msg.length ≥ 1 TRUE"
                                       (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "25"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "replace_known_left" (formula "27") (term "0,1,1,0,0") (ifseqformula "25"))
                                       (builtin "One Step Simplification" (formula "27"))
                                       (rule "ifthenelse_split" (formula "26") (term "0"))
                                       (branch "self.concatenated.length ≥ 1 TRUE"
                                          (rule "applyEq" (formula "50") (term "0,0,0") (ifseqformula "27"))
                                          (rule "eqSymm" (formula "50"))
                                          (rule "replace_known_left" (formula "50") (term "0,1") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "50"))
                                          (rule "applyEq" (formula "55") (term "1,1,1,0,0,1,0,1") (ifseqformula "27"))
                                          (rule "applyEq" (formula "55") (term "1,1,1,0,0,1,0,0,1") (ifseqformula "27"))
                                          (rule "applyEq" (formula "55") (term "1,1,1,0,0,0") (ifseqformula "27"))
                                          (rule "applyEq" (formula "26") (term "0") (ifseqformula "27"))
                                          (rule "applyEq" (formula "27") (term "1,1,1,0,0,1,0") (ifseqformula "26"))
                                          (rule "applyEq" (formula "49") (term "0,0,0") (ifseqformula "26"))
                                          (rule "replace_known_left" (formula "49") (term "0,0") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "49"))
                                          (rule "eqSymm" (formula "49"))
                                          (rule "nnf_imp2or" (formula "36") (term "0"))
                                          (rule "commute_or_2" (formula "5") (term "0"))
                                          (rule "nnf_imp2or" (formula "38") (term "0"))
                                          (rule "nnf_imp2or" (formula "37") (term "0"))
                                          (rule "nnf_notAnd" (formula "30") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "30") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
                                          (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "30") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "29") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "29") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "29") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0"))
                                          (rule "ifthenelse_split" (formula "52") (term "1,0"))
                                          (branch "self.unsigned.length ≥ 1 TRUE"
                                             (rule "replace_known_left" (formula "7") (term "0,1,1,0,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "7"))
                                             (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "1"))
                                             (rule "leq_literals" (formula "18") (term "0"))
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "true_left" (formula "18"))
                                             (rule "nnf_notAnd" (formula "28") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "28") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                                             (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                                             (rule "commute_or_2" (formula "13") (term "0"))
                                             (rule "commute_or_2" (formula "15") (term "0"))
                                             (rule "nnf_notAnd" (formula "33") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "33") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "33") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "33") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0"))
                                             (rule "mul_literals" (formula "33") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "35") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "35") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0"))
                                             (rule "mul_literals" (formula "35") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "35") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "35") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "34") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "34") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "34") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "34") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "34") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                                             (rule "mul_literals" (formula "34") (term "1,0,0,0"))
                                             (rule "commute_or_2" (formula "14") (term "0"))
                                             (rule "commute_or_2" (formula "5") (term "0"))
                                             (rule "commute_or_2" (formula "16") (term "0"))
                                             (rule "ifthenelse_split" (formula "2") (term "0"))
                                             (branch "self.concatenated.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "3"))
                                                (builtin "One Step Simplification" (formula "47"))
                                                (rule "closeTrue" (formula "47"))
                                             )
                                             (branch "self.concatenated.<created> = TRUE FALSE"
                                                (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "45"))
                                                (rule "close" (formula "37") (ifseqformula "8"))
                                             )
                                          )
                                          (branch "self.unsigned.length ≥ 1 FALSE"
                                             (rule "replace_known_right" (formula "6") (term "0,1,1,0,0") (ifseqformula "52"))
                                             (builtin "One Step Simplification" (formula "6"))
                                             (rule "inEqSimp_geqRight" (formula "52"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_antiSymm" (formula "18") (ifseqformula "1"))
                                             (rule "applyEq" (formula "19") (term "0") (ifseqformula "18"))
                                             (rule "qeq_literals" (formula "19"))
                                             (rule "true_left" (formula "19"))
                                             (rule "applyEq" (formula "7") (term "1,1,1,0,0,1,0") (ifseqformula "18"))
                                             (rule "add_zero_right" (formula "7") (term "1,1,0,0,1,0"))
                                             (rule "eqSymm" (formula "7") (term "1,0"))
                                             (rule "applyEq" (formula "22") (term "1,1,0,0") (ifseqformula "18"))
                                             (rule "applyEq" (formula "1") (term "0") (ifseqformula "18"))
                                             (rule "leq_literals" (formula "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "applyEq" (formula "6") (term "1,1,1,0,0,1,0") (ifseqformula "17"))
                                             (rule "add_zero_right" (formula "6") (term "1,1,0,0,1,0"))
                                             (rule "eqSymm" (formula "6") (term "1,0"))
                                             (rule "applyEq" (formula "20") (term "1") (ifseqformula "17"))
                                             (rule "applyEq" (formula "52") (term "1,1,1,0,1,1,0,1") (ifseqformula "17"))
                                             (rule "add_zero_right" (formula "52") (term "1,1,0,1,1,0,1"))
                                             (rule "applyEq" (formula "21") (term "1,1,1,0,1,1,0") (ifseqformula "17"))
                                             (rule "add_zero_right" (formula "21") (term "1,1,0,1,1,0"))
                                             (rule "inEqSimp_or_tautInEq0" (formula "6") (term "0,0"))
                                             (rule "add_zero_right" (formula "6") (term "1,1,0,0"))
                                             (rule "qeq_literals" (formula "6") (term "1,0,0"))
                                             (builtin "One Step Simplification" (formula "6"))
                                             (rule "true_left" (formula "6"))
                                             (rule "inEqSimp_or_tautInEq0" (formula "20") (term "0,0"))
                                             (rule "add_zero_right" (formula "20") (term "1,1,0,0"))
                                             (rule "qeq_literals" (formula "20") (term "1,0,0"))
                                             (builtin "One Step Simplification" (formula "20"))
                                             (rule "true_left" (formula "20"))
                                             (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "26") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                             (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                             (rule "commute_or_2" (formula "11") (term "0"))
                                             (rule "commute_or_2" (formula "13") (term "0"))
                                             (rule "nnf_notAnd" (formula "31") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "31") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "31") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0"))
                                             (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "33") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "33") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "33") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "33") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0"))
                                             (rule "mul_literals" (formula "33") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "32") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "32") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
                                             (rule "mul_literals" (formula "32") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "32") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "32") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0"))
                                             (rule "commute_or_2" (formula "12") (term "0"))
                                             (rule "commute_or_2" (formula "4") (term "0"))
                                             (rule "commute_or_2" (formula "14") (term "0"))
                                             (rule "ifthenelse_split" (formula "1") (term "0"))
                                             (branch "self.concatenated.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "45") (term "0") (ifseqformula "2"))
                                                (builtin "One Step Simplification" (formula "45"))
                                                (rule "closeTrue" (formula "45"))
                                             )
                                             (branch "self.concatenated.<created> = TRUE FALSE"
                                                (rule "referencedObjectIsCreatedRight" (formula "35") (ifseqformula "43"))
                                                (rule "close" (formula "35") (ifseqformula "6"))
                                             )
                                          )
                                       )
                                       (branch "self.concatenated.length ≥ 1 FALSE"
                                          (rule "eqSymm" (formula "26"))
                                          (rule "inEqSimp_geqRight" (formula "40"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "applyEq" (formula "4") (term "0") (ifseqformula "27"))
                                          (rule "inEqSimp_homoInEq1" (formula "4"))
                                          (rule "times_zero_2" (formula "4") (term "1,0"))
                                          (rule "add_zero_right" (formula "4") (term "0"))
                                          (rule "applyEq" (formula "26") (term "0") (ifseqformula "27"))
                                          (rule "qeq_literals" (formula "26"))
                                          (rule "closeFalse" (formula "26"))
                                       )
                                    )
                                    (branch "msg.length ≥ 1 FALSE"
                                       (builtin "One Step Simplification" (formula "25"))
                                       (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "39"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "replace_known_right" (formula "26") (term "0,1,1,0,0") (ifseqformula "39"))
                                       (builtin "One Step Simplification" (formula "26"))
                                       (rule "inEqSimp_geqRight" (formula "39"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_homoInEq1" (formula "4"))
                                       (rule "times_zero_2" (formula "4") (term "1,0"))
                                       (rule "add_zero_right" (formula "4") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                       (rule "mul_literals" (formula "4") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "3"))
                                       (rule "qeq_literals" (formula "4") (term "0"))
                                       (builtin "One Step Simplification" (formula "4"))
                                       (rule "closeFalse" (formula "4"))
                                    )
                                 )
                                 (branch "self.unsigned.length ≥ 0 FALSE"
                                    (rule "replace_known_right" (formula "18") (term "0,1,1,0,0") (ifseqformula "36"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "inEqSimp_geqRight" (formula "36"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "mul_literals" (formula "1") (term "1"))
                                    (rule "inEqSimp_contradInEq0" (formula "51") (term "0,1,0") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "51") (term "0,0,1,0"))
                                    (builtin "One Step Simplification" (formula "51"))
                                    (rule "inEqSimp_contradInEq0" (formula "7") (term "0,1,1,0,0") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "7") (term "0,0,1,1,0,0"))
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "inEqSimp_or_tautInEq0" (formula "19") (term "0,0"))
                                    (rule "add_zero_right" (formula "19") (term "1,1,0,0"))
                                    (rule "qeq_literals" (formula "19") (term "1,0,0"))
                                    (builtin "One Step Simplification" (formula "19"))
                                    (rule "true_left" (formula "19"))
                                    (rule "inEqSimp_or_tautInEq0" (formula "7") (term "0,0"))
                                    (rule "add_zero_right" (formula "7") (term "1,1,0,0"))
                                    (rule "qeq_literals" (formula "7") (term "1,0,0"))
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "true_left" (formula "7"))
                                    (rule "nnf_imp2or" (formula "23") (term "0"))
                                    (rule "commute_or_2" (formula "34") (term "0"))
                                    (rule "arrayLengthIsAShort" (formula "17") (term "1,0,0,0"))
                                    (builtin "One Step Simplification" (formula "17"))
                                    (rule "true_left" (formula "17"))
                                    (rule "arrayLengthNotNegative" (formula "17") (term "1,0,0,0"))
                                    (rule "arrayLengthIsAShort" (formula "18") (term "1,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "true_left" (formula "18"))
                                    (rule "arrayLengthNotNegative" (formula "18") (term "1,0,1,0,0"))
                                    (rule "ifthenelse_split" (formula "23") (term "1"))
                                    (branch "msg.length ≥ 1 TRUE"
                                       (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "23"))
                                       (builtin "One Step Simplification" (formula "4"))
                                       (rule "replace_known_left" (formula "25") (term "0,1,1,0,0") (ifseqformula "23"))
                                       (builtin "One Step Simplification" (formula "25"))
                                       (rule "ifthenelse_split" (formula "24") (term "0"))
                                       (branch "self.concatenated.length ≥ 1 TRUE"
                                          (rule "applyEq" (formula "53") (term "1,1,1,0,0,0") (ifseqformula "25"))
                                          (rule "applyEq" (formula "48") (term "0,0,0") (ifseqformula "25"))
                                          (rule "eqSymm" (formula "48"))
                                          (rule "replace_known_left" (formula "48") (term "0,1") (ifseqformula "4"))
                                          (builtin "One Step Simplification" (formula "48"))
                                          (rule "applyEq" (formula "24") (term "0") (ifseqformula "25"))
                                          (rule "applyEq" (formula "25") (term "1,1,1,0,0,1,0") (ifseqformula "24"))
                                          (rule "applyEq" (formula "52") (term "1,1,1,0,0,1,0,1") (ifseqformula "24"))
                                          (rule "applyEq" (formula "52") (term "1,1,1,0,0,1,0,0,1") (ifseqformula "24"))
                                          (rule "applyEq" (formula "47") (term "0,0,0") (ifseqformula "24"))
                                          (rule "replace_known_left" (formula "47") (term "0,0") (ifseqformula "4"))
                                          (builtin "One Step Simplification" (formula "47"))
                                          (rule "eqSymm" (formula "47"))
                                          (rule "nnf_imp2or" (formula "34") (term "0"))
                                          (rule "commute_or_2" (formula "6") (term "0"))
                                          (rule "nnf_imp2or" (formula "36") (term "0"))
                                          (rule "nnf_imp2or" (formula "35") (term "0"))
                                          (rule "nnf_notAnd" (formula "28") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "28") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                                          (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "27") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "27") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                                          (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
                                          (rule "commute_or_2" (formula "12") (term "0"))
                                          (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "26") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                          (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                          (rule "commute_or_2" (formula "14") (term "0"))
                                          (rule "commute_or_2" (formula "13") (term "0"))
                                          (rule "nnf_notAnd" (formula "31") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0"))
                                          (rule "mul_literals" (formula "31") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "31") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0"))
                                          (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "31") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "33") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "33") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0"))
                                          (rule "mul_literals" (formula "33") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "33") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "33") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "32") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "32") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
                                          (rule "mul_literals" (formula "32") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "32") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "32") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0"))
                                          (rule "commute_or_2" (formula "5") (term "0"))
                                          (rule "commute_or_2" (formula "15") (term "0"))
                                          (rule "ifthenelse_split" (formula "2") (term "0"))
                                          (branch "self.concatenated.<created> = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "45") (term "0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "45"))
                                             (rule "closeTrue" (formula "45"))
                                          )
                                          (branch "self.concatenated.<created> = TRUE FALSE"
                                             (rule "referencedObjectIsCreatedRight" (formula "35") (ifseqformula "43"))
                                             (rule "close" (formula "35") (ifseqformula "7"))
                                          )
                                       )
                                       (branch "self.concatenated.length ≥ 1 FALSE"
                                          (rule "eqSymm" (formula "24"))
                                          (rule "inEqSimp_geqRight" (formula "38"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "applyEq" (formula "26") (term "1,1,0,0") (ifseqformula "25"))
                                          (rule "applyEq" (formula "5") (term "0") (ifseqformula "25"))
                                          (rule "inEqSimp_homoInEq1" (formula "5"))
                                          (rule "times_zero_2" (formula "5") (term "1,0"))
                                          (rule "add_zero_right" (formula "5") (term "0"))
                                          (rule "applyEq" (formula "24") (term "0") (ifseqformula "25"))
                                          (rule "qeq_literals" (formula "24"))
                                          (rule "closeFalse" (formula "24"))
                                       )
                                    )
                                    (branch "msg.length ≥ 1 FALSE"
                                       (builtin "One Step Simplification" (formula "23"))
                                       (rule "replace_known_right" (formula "24") (term "0,1,1,0,0") (ifseqformula "37"))
                                       (builtin "One Step Simplification" (formula "24"))
                                       (rule "replace_known_right" (formula "4") (term "0,0") (ifseqformula "37"))
                                       (builtin "One Step Simplification" (formula "4"))
                                       (rule "inEqSimp_geqRight" (formula "37"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_homoInEq1" (formula "5"))
                                       (rule "times_zero_2" (formula "5") (term "1,0"))
                                       (rule "add_zero_right" (formula "5") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                       (rule "mul_literals" (formula "5") (term "1"))
                                       (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "5"))
                                       (rule "qeq_literals" (formula "4") (term "0"))
                                       (builtin "One Step Simplification" (formula "4"))
                                       (rule "closeFalse" (formula "4"))
                                    )
                                 )
                              )
                           )
                        )
                        (branch "CUT: array2seq(heapAfter_splidAndCheck, self.electionID@heapAfter_splidAndCheck) = array2seq(heap, self.electionID) FALSE"
                           (rule "equalityToSeqGetAndSeqLenRight" (formula "24") (inst "iv=iv") (userinteraction))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1") (ifseqformula "18"))
                           (rule "eqSymm" (formula "9") (term "1,0"))
                           (rule "eqSymm" (formula "11"))
                           (rule "eqSymm" (formula "12"))
                           (rule "eqSymm" (formula "13"))
                           (rule "eqSymm" (formula "14"))
                           (rule "eqSymm" (formula "21"))
                           (rule "eqSymm" (formula "29"))
                           (rule "eqSymm" (formula "15"))
                           (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "28"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "26"))
                           (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "25")))
                           (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                           (rule "applyEq" (formula "29") (term "1,1,1") (ifseqformula "15"))
                           (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "14"))
                           (rule "applyEq" (formula "11") (term "1") (ifseqformula "15"))
                           (rule "applyEq" (formula "12") (term "1,1,0") (ifseqformula "15"))
                           (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "13"))
                           (rule "applyEq" (formula "29") (term "1") (ifseqformula "12"))
                           (rule "applyEq" (formula "14") (term "1") (ifseqformula "13"))
                           (rule "applyEq" (formula "9") (term "0,1,0,0,1,0,0") (ifseqformula "13"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1"))
                           (rule "mul_literals" (formula "24") (term "0,1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                           (rule "array2seqDef" (formula "24") (term "0,0,1,0,1") (inst "u=u"))
                           (rule "getOfSeqDef" (formula "24") (term "0,1,0,1"))
                           (rule "castDel" (formula "24") (term "1,0,1,0,1"))
                           (rule "castDel" (formula "24") (term "2,0,1,0,1"))
                           (rule "add_zero_right" (formula "24") (term "0,2,1,0,1,0,1"))
                           (rule "polySimp_elimSub" (formula "24") (term "1,1,0,0,1,0,1"))
                           (rule "mul_literals" (formula "24") (term "1,1,1,0,0,1,0,1"))
                           (rule "add_zero_right" (formula "24") (term "1,1,0,0,1,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,1,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1,0,1"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1,0,1"))
                           (rule "mul_literals" (formula "24") (term "0,1,1,0,0,1,0,1"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1,0,1"))
                           (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1,0,1"))
                           (rule "array2seqDef" (formula "24") (term "0,0,0") (inst "u=u"))
                           (rule "lenOfSeqDef" (formula "24") (term "0,0"))
                           (rule "polySimp_elimSub" (formula "24") (term "1,0,0"))
                           (rule "times_zero_2" (formula "24") (term "1,1,0,0"))
                           (rule "add_zero_right" (formula "24") (term "1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0"))
                           (rule "add_zero_right" (formula "24") (term "0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "24") (term "0,0,0,0"))
                           (rule "array2seqDef" (formula "2") (term "0") (inst "u=u"))
                           (rule "array2seqDef" (formula "1") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "1"))
                           (rule "array2seqDef" (formula "2") (term "1") (inst "u=u"))
                           (rule "nonNull" (formula "23") (inst "i=i"))
                           (rule "greater_literals" (formula "23") (term "0,1"))
                           (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "26")))
                           (rule "sub_literals" (formula "23") (term "2,1,0"))
                           (builtin "One Step Simplification" (formula "23"))
                           (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                           (rule "array2seqDef" (formula "24") (term "0,1,1,0,1") (inst "u=u"))
                           (rule "eqSymm" (formula "24") (term "1,0,1"))
                           (rule "getOfSeqDef" (formula "24") (term "0,1,0,1"))
                           (rule "castDel" (formula "24") (term "2,0,1,0,1"))
                           (rule "castDel" (formula "24") (term "1,0,1,0,1"))
                           (rule "add_zero_right" (formula "24") (term "0,2,1,0,1,0,1"))
                           (rule "polySimp_elimSub" (formula "24") (term "1,1,0,0,1,0,1"))
                           (rule "mul_literals" (formula "24") (term "1,1,1,0,0,1,0,1"))
                           (rule "add_zero_right" (formula "24") (term "1,1,0,0,1,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,1,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,1,0,1"))
                           (rule "eqSymm" (formula "24") (term "1,0,1"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,1,1,0,1"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,1,0,1,1,0,1"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,1,1,0,1"))
                           (rule "mul_literals" (formula "24") (term "0,1,1,0,1,1,0,1"))
                           (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,1,1,0,1"))
                           (rule "array2seqDef" (formula "24") (term "0,1,0") (inst "u=u"))
                           (rule "eqSymm" (formula "24") (term "0"))
                           (rule "lenOfSeqDef" (formula "24") (term "0,0"))
                           (rule "polySimp_elimSub" (formula "24") (term "1,0,0"))
                           (rule "times_zero_2" (formula "24") (term "1,1,0,0"))
                           (rule "add_zero_right" (formula "24") (term "1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0"))
                           (rule "add_zero_right" (formula "24") (term "0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "0,0,0,0"))
                           (rule "eqSymm" (formula "24") (term "0"))
                           (rule "polySimp_elimOne" (formula "24") (term "0,0,1,0"))
                           (rule "array2seqDef" (formula "9") (term "1,1,0") (inst "u=u"))
                           (rule "eqSymm" (formula "9") (term "1,0"))
                           (rule "array2seqDef" (formula "12") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "12"))
                           (rule "applyEq" (formula "2") (term "1") (ifseqformula "12"))
                           (rule "array2seqDef" (formula "29") (term "0,0") (inst "u=u"))
                           (rule "applyEq" (formula "29") (term "0,0") (ifseqformula "1"))
                           (rule "array2seqDef" (formula "29") (term "1,1,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "29") (term "0,1,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "15") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "15"))
                           (rule "narrowSelectArrayType" (formula "15") (term "2,0") (ifseqformula "3") (ifseqformula "28"))
                           (rule "array2seqDef" (formula "11") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "11"))
                           (rule "narrowSelectArrayType" (formula "11") (term "2,0") (ifseqformula "3") (ifseqformula "28"))
                           (rule "applyEq" (formula "15") (term "0") (ifseqformula "11"))
                           (rule "applyEq" (formula "11") (term "1") (ifseqformula "15"))
                           (rule "array2seqDef" (formula "29") (term "1") (inst "u=u"))
                           (rule "applyEq" (formula "29") (term "1") (ifseqformula "12"))
                           (rule "array2seqDef" (formula "24") (term "0,1,1,1,0,0,1") (inst "u=u"))
                           (rule "lenOfSeqDef" (formula "24") (term "1,1,1,0,0,1"))
                           (rule "polySimp_elimSub" (formula "24") (term "1,1,1,1,0,0,1"))
                           (rule "times_zero_2" (formula "24") (term "1,1,1,1,1,0,0,1"))
                           (rule "add_zero_right" (formula "24") (term "1,1,1,1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "24") (term "0,1,1,1,0,0,1"))
                           (rule "add_zero_right" (formula "24") (term "0,0,1,1,1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,1,1,0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0,1,1,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "0,0,1,1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "24") (term "0,0,1,1,1,0,0,1"))
                           (rule "array2seqDef" (formula "1") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "1"))
                           (rule "pullOutSelect" (formula "21") (term "1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_14"))
                           (rule "simplifySelectOfAnonEQ" (formula "21") (ifseqformula "18"))
                           (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "28")) (ifInst ""  (formula "4")))
                           (rule "applyEqReverse" (formula "22") (term "1,0") (ifseqformula "21"))
                           (rule "hideAuxiliaryEq" (formula "21"))
                           (rule "array2seqDef" (formula "9") (term "0,0,1,1,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "9") (term "1,0,1,1,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "12") (term "0,1") (inst "u=u"))
                           (rule "eqSymm" (formula "12"))
                           (rule "array2seqDef" (formula "2") (term "0,1,1") (inst "u=u"))
                           (rule "array2seqDef" (formula "2") (term "0,1") (inst "u=u"))
                           (rule "array2seqDef" (formula "2") (term "1,1,1") (inst "u=u"))
                           (rule "narrowSelectArrayType" (formula "2") (term "2,1,1,1") (ifseqformula "3") (ifseqformula "28"))
                           (rule "applyEq" (formula "2") (term "1,1,1") (ifseqformula "11"))
                           (rule "array2seqDef" (formula "29") (term "0,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "15") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "15"))
                           (rule "array2seqDef" (formula "11") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "11"))
                           (rule "applyEq" (formula "11") (term "0") (ifseqformula "15"))
                           (rule "eqSymm" (formula "11"))
                           (rule "array2seqDef" (formula "29") (term "0,1,1") (inst "u=u"))
                           (rule "array2seqDef" (formula "29") (term "0,1") (inst "u=u"))
                           (rule "array2seqDef" (formula "29") (term "1,1,1") (inst "u=u"))
                           (rule "narrowSelectArrayType" (formula "29") (term "2,1,1,1") (ifseqformula "3") (ifseqformula "28"))
                           (rule "applyEq" (formula "29") (term "1,1,1") (ifseqformula "11"))
                           (rule "eqSeqDef" (formula "1") (inst "iv=iv"))
                           (rule "andLeft" (formula "1"))
                           (rule "getOfSeqDef" (formula "2") (term "0,1,0"))
                           (rule "castDel" (formula "2") (term "2,0,1,0"))
                           (rule "castDel" (formula "2") (term "1,0,1,0"))
                           (rule "add_zero_right" (formula "2") (term "0,2,1,0,1,0"))
                           (rule "eqSymm" (formula "2") (term "1,0"))
                           (rule "polySimp_elimSub" (formula "2") (term "1,1,0,1,1,0"))
                           (rule "times_zero_2" (formula "2") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "2") (term "1,1,0,1,1,0"))
                           (rule "lenOfSeqDef" (formula "1") (term "0"))
                           (rule "eqSymm" (formula "1"))
                           (rule "polySimp_elimSub" (formula "1") (term "1,1"))
                           (rule "times_zero_2" (formula "1") (term "1,1,1"))
                           (rule "add_zero_right" (formula "1") (term "1,1"))
                           (rule "lenOfSeqDef" (formula "2") (term "1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "2") (term "1,1,1,0,0"))
                           (rule "times_zero_2" (formula "2") (term "1,1,1,1,0,0"))
                           (rule "add_zero_right" (formula "2") (term "1,1,1,0,0"))
                           (rule "getOfSeqDef" (formula "2") (term "0,1,0"))
                           (rule "castDel" (formula "2") (term "1,0,1,0"))
                           (rule "castDel" (formula "2") (term "2,0,1,0"))
                           (rule "add_zero_right" (formula "2") (term "0,2,1,0,1,0"))
                           (rule "eqSymm" (formula "2") (term "1,0"))
                           (rule "polySimp_elimSub" (formula "2") (term "1,1,0,1,1,0"))
                           (rule "times_zero_2" (formula "2") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "2") (term "1,1,0,1,1,0"))
                           (rule "lenOfSeqDef" (formula "1") (term "0"))
                           (rule "eqSymm" (formula "1"))
                           (rule "polySimp_elimSub" (formula "1") (term "1,1"))
                           (rule "times_zero_2" (formula "1") (term "1,1,1"))
                           (rule "add_zero_right" (formula "1") (term "1,1"))
                           (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1,1,0,0"))
                           (rule "add_zero_right" (formula "2") (term "0,0,1,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "2") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0,0"))
                           (rule "eqSymm" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "2") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0,0"))
                           (rule "eqSymm" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1,0"))
                           (rule "apply_eq_monomials" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "1"))
                           (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0,0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,0,1,0,0,1,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "2") (term "1,0,0,1,0,0"))
                           (rule "add_literals" (formula "2") (term "1,1,1,0,0,1,0,0"))
                           (rule "times_zero_1" (formula "2") (term "1,1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "2") (term "1,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "2") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "2") (term "1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "2") (term "0,1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                           (rule "eqSymm" (formula "1"))
                           (rule "polySimp_elimOne" (formula "1") (term "0,0,1"))
                           (rule "applyEq" (formula "2") (term "0,1,0,0,1,0,0") (ifseqformula "1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "2") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "2") (term "1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "2") (term "0,1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                           (rule "eqSymm" (formula "1"))
                           (rule "polySimp_elimOne" (formula "1") (term "0,0,1"))
                           (rule "apply_eq_monomials" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "1"))
                           (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0,0,1,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "2") (term "1,0,0,1,0,0"))
                           (rule "add_literals" (formula "2") (term "1,1,1,0,0,1,0,0"))
                           (rule "times_zero_1" (formula "2") (term "1,1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "2") (term "1,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "2") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0"))
                           (rule "eqSeqDef" (formula "13") (inst "iv=iv"))
                           (rule "andLeft" (formula "13"))
                           (rule "lenOfSeqDef" (formula "13") (term "1"))
                           (rule "polySimp_elimSub" (formula "13") (term "1,1"))
                           (rule "times_zero_2" (formula "13") (term "1,1,1"))
                           (rule "add_zero_right" (formula "13") (term "1,1"))
                           (rule "getOfSeqDef" (formula "14") (term "1,1,0"))
                           (rule "castDel" (formula "14") (term "1,1,1,0"))
                           (rule "castDel" (formula "14") (term "2,1,1,0"))
                           (rule "add_zero_right" (formula "14") (term "0,2,1,1,1,0"))
                           (rule "polySimp_elimSub" (formula "14") (term "1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "14") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "14") (term "1,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "14") (term "0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1"))
                           (rule "add_zero_right" (formula "13") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,1,1,0"))
                           (rule "applyEq" (formula "14") (term "0,1,0,1,0,0") (ifseqformula "13"))
                           (rule "polySimp_addComm1" (formula "14") (term "0,1,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "0,0,1"))
                           (rule "polySimp_elimOne" (formula "13") (term "0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "14") (term "1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "14") (term "0,1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0,1,0,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,1,0,0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "14") (term "0,0,0,1,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                           (rule "array2seqDef" (formula "3") (term "1,1,1") (inst "u=u"))
                           (rule "applyEq" (formula "3") (term "1,1,1") (ifseqformula "17"))
                           (rule "pullOutSelect" (formula "3") (term "1,2,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_11"))
                           (rule "applyEq" (formula "4") (term "0,1,0") (ifseqformula "3"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "21"))
                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "30")) (ifInst ""  (formula "6")))
                           (rule "applyEqReverse" (formula "4") (term "1,2,0") (ifseqformula "3"))
                           (rule "applyEqReverse" (formula "4") (term "0,1,0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "equalityToSeqGetAndSeqLenRight" (formula "31") (inst "iv=iv"))
                           (rule "lenOfSeqDefEQ" (formula "31") (term "1,0") (ifseqformula "3"))
                           (rule "polySimp_elimSub" (formula "31") (term "1,1,0"))
                           (rule "times_zero_2" (formula "31") (term "1,1,1,0"))
                           (rule "add_zero_right" (formula "31") (term "1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,1"))
                           (rule "polySimp_addComm1" (formula "31") (term "0,1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "31") (term "0,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "31") (term "1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "31") (term "0,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "31") (term "0,1,0,0,1"))
                           (rule "pullOutSelect" (formula "26") (term "1,1,0,1,0,1") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_11"))
                           (rule "applyEq" (formula "32") (term "0,1,0,1,0,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "32") (term "0,1,0,1,0,0,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "32") (term "0,1,0,1,0,0,1,0,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "32") (term "1,2,0,1,0,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "27") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "27") (term "0,1,1,1,1,0,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "32") (term "1,2,0,1,0,0,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "27") (term "0,0,0,0,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "27") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "27") (term "0,0,0,1,1,1,0,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "32") (term "1,2,0,1,0,0,1,0,0,1") (ifseqformula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")) (ifInst ""  (formula "6")))
                           (rule "applyEqReverse" (formula "27") (term "1,1,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "32") (term "0,1,0,1,0,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "32") (term "0,1,0,1,0,0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "32") (term "0,1,0,1,0,0,1,0,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "32") (term "1,2,0,1,0,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "27") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "27") (term "0,1,1,1,1,0,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "32") (term "1,2,0,1,0,0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "27") (term "0,0,0,0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "27") (term "0,1,0,0") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "27"))
                           (rule "allRight" (formula "27") (inst "sk=iv_9"))
                           (rule "impRight" (formula "27"))
                           (rule "andLeft" (formula "1"))
                           (rule "applyEqReverse" (formula "34") (term "1,2,0,1,0,0,1,0,0,1") (ifseqformula "3"))
                           (rule "applyEqReverse" (formula "2") (term "0,0,0,1,1") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "replace_known_left" (formula "28") (term "0,0,1") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "1")))
                           (rule "inEqSimp_homoInEq0" (formula "2"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "inEqSimp_homoInEq0" (formula "28") (term "0,1"))
                           (rule "polySimp_addComm1" (formula "28") (term "0,0,1"))
                           (rule "inEqSimp_homoInEq0" (formula "28") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "28") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1"))
                           (rule "polySimp_rightDist" (formula "2") (term "1"))
                           (rule "mul_literals" (formula "2") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0,1"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,0,1"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,1"))
                           (rule "mul_literals" (formula "28") (term "0,1,0,1"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,1,0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "0,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,0,0"))
                           (rule "mul_literals" (formula "28") (term "0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                           (rule "array2seqDef" (formula "16") (term "1,1,0,0,1,0") (inst "u=u"))
                           (rule "narrowSelectArrayType" (formula "16") (term "2,1,1,0,0,1,0") (ifseqformula "6") (ifseqformula "32"))
                           (rule "applyEq" (formula "16") (term "1,1,0,0,1,0") (ifseqformula "14"))
                           (rule "array2seqDef" (formula "16") (term "0,1,0,0,1,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "15") (term "1,1,0,0") (inst "u=u"))
                           (rule "narrowSelectArrayType" (formula "15") (term "2,1,1,0,0") (ifseqformula "6") (ifseqformula "32"))
                           (rule "applyEq" (formula "15") (term "1,1,0,0") (ifseqformula "14"))
                           (rule "array2seqDef" (formula "15") (term "0,1,0,0") (inst "u=u"))
                           (rule "lenOfSeqDefEQ" (formula "15") (term "0") (ifseqformula "5"))
                           (rule "polySimp_elimSub" (formula "15") (term "1,0"))
                           (rule "times_zero_2" (formula "15") (term "1,1,0"))
                           (rule "add_zero_right" (formula "15") (term "1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0"))
                           (rule "eqSymm" (formula "15"))
                           (rule "applyEq" (formula "16") (term "1,1,1,0,0") (ifseqformula "15"))
                           (rule "eqSeqDef2" (formula "19") (inst "iv=iv") (ifseqformula "14"))
                           (rule "andLeft" (formula "19"))
                           (rule "getOfSeqDef" (formula "20") (term "1,1,0"))
                           (rule "castDel" (formula "20") (term "1,1,1,0"))
                           (rule "castDel" (formula "20") (term "2,1,1,0"))
                           (rule "add_zero_right" (formula "20") (term "0,2,1,1,1,0"))
                           (rule "polySimp_elimSub" (formula "20") (term "1,1,0,1,1,0"))
                           (rule "times_zero_2" (formula "20") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "20") (term "1,1,0,1,1,0"))
                           (rule "getOfSeqDef" (formula "20") (term "0,1,0"))
                           (rule "castDel" (formula "20") (term "2,0,1,0"))
                           (rule "castDel" (formula "20") (term "1,0,1,0"))
                           (rule "add_zero_right" (formula "20") (term "0,2,1,0,1,0"))
                           (rule "polySimp_elimSub" (formula "20") (term "1,1,0,0,1,0"))
                           (rule "times_zero_2" (formula "20") (term "1,1,1,0,0,1,0"))
                           (rule "add_zero_right" (formula "20") (term "1,1,0,0,1,0"))
                           (rule "lenOfSeqDef" (formula "20") (term "1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "20") (term "1,1,1,0,0"))
                           (rule "times_zero_2" (formula "20") (term "1,1,1,1,0,0"))
                           (rule "add_zero_right" (formula "20") (term "1,1,1,0,0"))
                           (rule "lenOfSeqDef" (formula "19") (term "0"))
                           (rule "eqSymm" (formula "19"))
                           (rule "polySimp_elimSub" (formula "19") (term "1,1"))
                           (rule "times_zero_2" (formula "19") (term "1,1,1"))
                           (rule "add_zero_right" (formula "19") (term "1,1"))
                           (rule "lenOfSeqDef" (formula "19") (term "0"))
                           (rule "eqSymm" (formula "19"))
                           (rule "polySimp_elimSub" (formula "19") (term "1,1"))
                           (rule "times_zero_2" (formula "19") (term "1,1,1"))
                           (rule "add_zero_right" (formula "19") (term "1,1"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "0,1,1,0,0"))
                           (rule "add_zero_right" (formula "20") (term "0,0,1,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0"))
                           (rule "add_zero_right" (formula "19") (term "0,0,0"))
                           (rule "eqSymm" (formula "19"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0"))
                           (rule "add_zero_right" (formula "19") (term "0,0,0"))
                           (rule "eqSymm" (formula "19"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1,0"))
                           (rule "applyEq" (formula "20") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "0,0,0"))
                           (rule "eqSymm" (formula "19"))
                           (rule "polySimp_elimOne" (formula "19") (term "0,0,1"))
                           (rule "applyEq" (formula "20") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "0,0,0"))
                           (rule "eqSymm" (formula "19"))
                           (rule "polySimp_elimOne" (formula "19") (term "0,0,1"))
                           (rule "applyEq" (formula "20") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                           (rule "eqSeqDef2" (formula "14") (inst "iv=iv") (ifseqformula "14"))
                           (builtin "One Step Simplification" (formula "14"))
                           (rule "true_left" (formula "14"))
                           (rule "pullOutSelect" (formula "4") (term "0,1,1,1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_Tag_BALLOTS_3"))
                           (rule "applyEq" (formula "34") (term "1,2,0,0,0,1,0,1") (ifseqformula "4"))
                           (rule "applyEq" (formula "3") (term "0,0,0,0") (ifseqformula "4"))
                           (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "4"))
                           (rule "applyEq" (formula "34") (term "0,1,0,0,0,0") (ifseqformula "4"))
                           (rule "applyEq" (formula "5") (term "1,1,0,1,0") (ifseqformula "4"))
                           (rule "applyEq" (formula "34") (term "1,2,0,0,0,1,0,0,1") (ifseqformula "4"))
                           (rule "applyEq" (formula "34") (term "0,1,0,0,0,1,0,1") (ifseqformula "4"))
                           (rule "applyEq" (formula "34") (term "1,2,0,0,0,0") (ifseqformula "4"))
                           (rule "applyEq" (formula "34") (term "0,1,0,0,0,1,0,0,1") (ifseqformula "4"))
                           (rule "simplifySelectOfAnonEQ" (formula "4") (ifseqformula "23"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "applyEqReverse" (formula "5") (term "0,1,1,1,0,0,1,0") (ifseqformula "4"))
                           (rule "applyEqReverse" (formula "34") (term "1,2,0,0,0,1,0,1") (ifseqformula "4"))
                           (rule "applyEqReverse" (formula "3") (term "0,0,0,0") (ifseqformula "4"))
                           (rule "applyEqReverse" (formula "3") (term "0,1,0") (ifseqformula "4"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "applyEqReverse" (formula "33") (term "0,1,0,0,0,0") (ifseqformula "3"))
                           (rule "applyEqReverse" (formula "4") (term "1,1,0,1,0") (ifseqformula "3"))
                           (rule "applyEqReverse" (formula "33") (term "1,2,0,0,0,1,0,0,1") (ifseqformula "3"))
                           (rule "applyEqReverse" (formula "33") (term "0,1,0,0,0,1,0,1") (ifseqformula "3"))
                           (rule "applyEqReverse" (formula "33") (term "1,2,0,0,0,0") (ifseqformula "3"))
                           (rule "applyEqReverse" (formula "33") (term "0,1,0,0,0,1,0,0,1") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "pullOutSelect" (formula "32") (term "1,2,1,1,0,0,1,0,1") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_11"))
                           (rule "applyEq" (formula "33") (term "0,1,1,1,0,0,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "33") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "33") (term "1,2,1,1,0,0,1,0,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "33") (term "1,2,1,1,0,0,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "33") (term "0,1,1,1,0,0,1,0,0,1") (ifseqformula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "31")) (ifInst ""  (formula "7")))
                           (rule "applyEqReverse" (formula "33") (term "1,2,1,1,0,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "33") (term "0,1,1,1,0,0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "33") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "33") (term "1,2,1,1,0,0,1,0,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "33") (term "1,2,1,1,0,0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "33") (term "0,1,1,1,0,0,1,0,0,1") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "27") (term "1,0") (inst "selectSK=arr_123"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "eqSymm" (formula "28"))
                           (rule "eqSeqDef2" (formula "5") (inst "iv=iv") (ifseqformula "5"))
                           (builtin "One Step Simplification" (formula "5"))
                           (rule "true_left" (formula "5"))
                           (rule "nnf_imp2or" (formula "26") (term "0"))
                           (rule "nnf_imp2or" (formula "11") (term "0"))
                           (rule "Definition_axiom_for_ghostFieldsNonNull_in_verif_selectvoting_system_core_MixServer" (formula "10") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
                           (builtin "One Step Simplification" (formula "10"))
                           (rule "andLeft" (formula "10"))
                           (rule "andLeft" (formula "10"))
                           (rule "andLeft" (formula "10"))
                           (rule "andLeft" (formula "10"))
                           (rule "notLeft" (formula "11"))
                           (rule "andLeft" (formula "10"))
                           (rule "notLeft" (formula "11"))
                           (rule "andLeft" (formula "10"))
                           (rule "notLeft" (formula "11"))
                           (rule "andLeft" (formula "10"))
                           (rule "notLeft" (formula "10"))
                           (rule "notLeft" (formula "10"))
                           (rule "narrowSelectArrayType" (formula "20") (term "1,0,1,0") (ifseqformula "5") (ifseqformula "32"))
                           (rule "narrowSelectArrayType" (formula "16") (term "1,1,1,0") (ifseqformula "5") (ifseqformula "33"))
                           (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                           (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                           (rule "applyEq" (formula "12") (term "0,1,0,0,1,0,0") (ifseqformula "18"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                           (rule "nnf_imp2or" (formula "4") (term "0"))
                           (rule "nnf_imp2or" (formula "39") (term "0,1"))
                           (rule "nnf_notAnd" (formula "28") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
                           (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "28") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                           (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "13") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
                           (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                           (rule "mul_literals" (formula "13") (term "1,0,0,0"))
                           (rule "nnf_imp2or" (formula "20") (term "0"))
                           (rule "nnf_imp2or" (formula "16") (term "0"))
                           (rule "nnf_imp2or" (formula "10") (term "0"))
                           (rule "nnf_imp2or" (formula "11") (term "0"))
                           (rule "nnf_imp2or" (formula "12") (term "0"))
                           (rule "arrayLengthNotNegative" (formula "17") (term "1"))
                           (rule "arrayLengthIsAShort" (formula "18") (term "0"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "arrayLengthNotNegative" (formula "18") (term "0"))
                           (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                           (rule "arrayLengthIsAShort" (formula "18") (term "1"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "arrayLengthIsAShort" (formula "19") (term "0"))
                           (builtin "One Step Simplification" (formula "19"))
                           (rule "true_left" (formula "19"))
                           (rule "arrayLengthNotNegative" (formula "19") (term "0"))
                           (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                           (rule "nnf_notAnd" (formula "4") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "4") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "4") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "4") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "4") (term "0,0,0"))
                           (rule "times_zero_1" (formula "4") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "4") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
                           (rule "mul_literals" (formula "4") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "40") (term "0,0,1"))
                           (rule "inEqSimp_notGeq" (formula "40") (term "0,0,0,1"))
                           (rule "times_zero_1" (formula "40") (term "1,0,0,0,0,0,1"))
                           (rule "add_literals" (formula "40") (term "0,0,0,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "0,0,0,1"))
                           (rule "mul_literals" (formula "40") (term "1,0,0,0,1"))
                           (rule "inEqSimp_notGeq" (formula "40") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "40") (term "1,0,0,1,0,0,1"))
                           (rule "mul_literals" (formula "40") (term "0,1,0,0,1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "40") (term "0,0,1,0,0,1"))
                           (rule "add_literals" (formula "40") (term "0,0,0,1,0,0,1"))
                           (rule "add_zero_left" (formula "40") (term "0,0,1,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "40") (term "1,1,0,0,1"))
                           (rule "nnf_notAnd" (formula "21") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                           (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                           (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "16") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                           (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                           (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "10") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
                           (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                           (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "11") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                           (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                           (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "12") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                           (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                           (rule "equalityToSeqGetAndSeqLenLeft" (formula "27") (inst "iv=iv"))
                           (rule "andLeft" (formula "27"))
                           (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0"))
                           (rule "applyEq" (formula "27") (term "0,0") (ifseqformula "29"))
                           (builtin "One Step Simplification" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "applyEq" (formula "27") (term "0,0,1,0") (ifseqformula "28"))
                           (builtin "One Step Simplification" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "28") (ifseqformula "7"))
                           (rule "replaceKnownSelect_taclet100100020_4" (formula "28") (term "0,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet100100020_5" (formula "28") (term "0,0,1"))
                           (rule "replaceKnownSelect_taclet100100020_0" (formula "28") (term "1,1,0,0,0,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet100100020_1" (formula "28") (term "1,1,0,0,0,0,0,0"))
                           (rule "replaceKnownSelect_taclet100100020_2" (formula "28") (term "0,0,0,0,0,0,0,0,0,0"))
                           (rule "replaceKnownSelect_taclet100100020_8" (formula "28") (term "0,0,1,0,0,0,0,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet100100020_3" (formula "28") (term "0,0,0,0,0,0,0,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet100100020_9" (formula "28") (term "0,0,1,0,0,0,0,0,0,0"))
                           (rule "andLeft" (formula "28"))
                           (rule "notLeft" (formula "29"))
                           (rule "andLeft" (formula "28"))
                           (rule "notLeft" (formula "29"))
                           (rule "andLeft" (formula "28"))
                           (rule "andLeft" (formula "28"))
                           (rule "notLeft" (formula "30"))
                           (rule "andLeft" (formula "28"))
                           (rule "notLeft" (formula "30"))
                           (rule "andLeft" (formula "28"))
                           (rule "andLeft" (formula "28"))
                           (rule "andLeft" (formula "28"))
                           (rule "notLeft" (formula "28"))
                           (rule "notLeft" (formula "28"))
                           (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "35"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "ifthenelse_negated" (formula "1") (term "0"))
                           (rule "narrowSelectArrayType" (formula "16") (term "2,0,1,0,0,1,0") (ifseqformula "5") (ifseqformula "35"))
                           (rule "narrowSelectArrayType" (formula "41") (term "1,0") (ifseqformula "5") (ifseqformula "35"))
                           (rule "eqSymm" (formula "41"))
                           (rule "narrowSelectArrayType" (formula "46") (term "2,0,1,0,1,1,0,1") (ifseqformula "5") (ifseqformula "35"))
                           (rule "narrowSelectArrayType" (formula "13") (term "2,0,0,1,1,0") (ifseqformula "5") (ifseqformula "35"))
                           (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "5") (ifseqformula "35"))
                           (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "23") (ifseqformula "35"))
                           (rule "nonNull" (formula "30") (inst "i=i"))
                           (rule "greater_literals" (formula "30") (term "0,1"))
                           (builtin "One Step Simplification" (formula "30"))
                           (rule "sub_literals" (formula "30") (term "2,1,0,1"))
                           (builtin "One Step Simplification" (formula "30"))
                           (rule "andLeft" (formula "30"))
                           (rule "notLeft" (formula "30"))
                           (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "30") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "29") (inst "i=i"))
                           (rule "greater_literals" (formula "29") (term "0,1"))
                           (builtin "One Step Simplification" (formula "29"))
                           (rule "sub_literals" (formula "29") (term "2,1,0,1"))
                           (builtin "One Step Simplification" (formula "29"))
                           (rule "andLeft" (formula "29"))
                           (rule "notLeft" (formula "29"))
                           (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "29") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "28") (inst "i=i"))
                           (rule "sub_literals" (formula "28") (term "2,1,0,1,1"))
                           (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "40")))
                           (rule "greater_literals" (formula "28") (term "0"))
                           (builtin "One Step Simplification" (formula "28"))
                           (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0"))
                           (rule "applyEq" (formula "28") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "28") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0"))
                           (rule "pullOutSelect" (formula "36") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_11"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")) (ifInst ""  (formula "7")))
                           (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_11"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")) (ifInst ""  (formula "7")))
                           (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_11"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")) (ifInst ""  (formula "7")))
                           (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "30") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_12"))
                           (rule "applyEq" (formula "31") (term "0,1,1,1,0,0") (ifseqformula "30"))
                           (rule "applyEq" (formula "34") (term "0") (ifseqformula "30"))
                           (rule "simplifySelectOfAnonEQ" (formula "30") (ifseqformula "24"))
                           (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "47")) (ifInst ""  (formula "6")))
                           (rule "applyEqReverse" (formula "31") (term "0,1,1,1,0,0") (ifseqformula "30"))
                           (rule "applyEqReverse" (formula "31") (term "1,0,0,1,0") (ifseqformula "30"))
                           (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "30"))
                           (rule "hideAuxiliaryEq" (formula "30"))
                           (rule "pullOutSelect" (formula "29") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_13"))
                           (rule "applyEq" (formula "30") (term "0,1,1,1,0,0") (ifseqformula "29"))
                           (rule "applyEq" (formula "33") (term "0") (ifseqformula "29"))
                           (rule "simplifySelectOfAnonEQ" (formula "29") (ifseqformula "24"))
                           (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "46")) (ifInst ""  (formula "6")))
                           (rule "applyEqReverse" (formula "30") (term "0,1,1,1,0,0") (ifseqformula "29"))
                           (rule "applyEqReverse" (formula "30") (term "1,0,0,1,0") (ifseqformula "29"))
                           (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "29"))
                           (rule "hideAuxiliaryEq" (formula "29"))
                           (rule "applyEq" (formula "29") (term "1,1,1,0,0") (ifseqformula "18"))
                           (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "22") (ifseqformula "7"))
                           (rule "andLeft" (formula "22"))
                           (rule "notLeft" (formula "23"))
                           (rule "andLeft" (formula "22"))
                           (rule "notLeft" (formula "23"))
                           (rule "andLeft" (formula "22"))
                           (rule "andLeft" (formula "22"))
                           (rule "notLeft" (formula "24"))
                           (rule "notLeft" (formula "23"))
                           (rule "andLeft" (formula "22"))
                           (rule "andLeft" (formula "22"))
                           (rule "andLeft" (formula "22"))
                           (rule "andLeft" (formula "22"))
                           (rule "notLeft" (formula "22"))
                           (rule "notLeft" (formula "22"))
                           (rule "nonNull" (formula "24") (inst "i=i"))
                           (rule "sub_literals" (formula "24") (term "2,1,0,1,1"))
                           (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "39")))
                           (rule "greater_literals" (formula "24") (term "0"))
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "narrowSelectArrayType" (formula "24") (term "0,0,1,0") (ifseqformula "5") (ifseqformula "39"))
                           (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "23") (inst "i=i"))
                           (rule "sub_literals" (formula "23") (term "2,1,0,1,1"))
                           (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "38")))
                           (rule "greater_literals" (formula "23") (term "0"))
                           (builtin "One Step Simplification" (formula "23"))
                           (rule "narrowSelectArrayType" (formula "23") (term "0,0,1,0") (ifseqformula "5") (ifseqformula "38"))
                           (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                           (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0") (ifseqformula "18"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                           (rule "nonNull" (formula "22") (inst "i=i"))
                           (rule "greater_literals" (formula "22") (term "0,1"))
                           (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "40")))
                           (rule "sub_literals" (formula "22") (term "2,1,0"))
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "narrowSelectArrayType" (formula "22") (term "0,0,1,0") (ifseqformula "5") (ifseqformula "40"))
                           (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                           (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                           (rule "nnf_imp2or" (formula "30") (term "0"))
                           (rule "ifthenelse_split" (formula "48") (term "1,0"))
                           (branch "self.unsigned.length ≥ 0 TRUE"
                              (rule "replace_known_left" (formula "16") (term "0,1") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "eqSymm" (formula "16") (term "1"))
                              (rule "replace_known_left" (formula "17") (term "0,1,1,0,0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "17"))
                              (rule "nnf_imp2or" (formula "33") (term "0"))
                              (rule "commute_or_2" (formula "34") (term "0"))
                              (rule "nnf_imp2or" (formula "32") (term "0"))
                              (rule "ifthenelse_split" (formula "4") (term "0"))
                              (branch "self.electionID.length ≥ 1 TRUE"
                                 (rule "replace_known_left" (formula "45") (term "0,0") (ifseqformula "5"))
                                 (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "5")))
                                 (rule "nnf_imp2or" (formula "26") (term "0"))
                                 (rule "commute_or_2" (formula "6") (term "0"))
                                 (rule "nnf_imp2or" (formula "25") (term "0"))
                                 (rule "nnf_imp2or" (formula "24") (term "0"))
                                 (rule "nnf_notAnd" (formula "32") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "32") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "32") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "32") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
                                 (rule "mul_literals" (formula "32") (term "1,0,0,0"))
                                 (rule "commute_or_2" (formula "23") (term "0"))
                                 (rule "arrayLengthIsAShort" (formula "50") (term "1,0,1,0,0,0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "arrayLengthNotNegative" (formula "50") (term "1,0,1,0,0,0"))
                                 (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "5"))
                                 (rule "leq_literals" (formula "1") (term "0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "nnf_notAnd" (formula "34") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "34") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "34") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "34") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "34") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                                 (rule "mul_literals" (formula "34") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "33") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "33") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0"))
                                 (rule "mul_literals" (formula "33") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "33") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "33") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "26") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                 (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "25") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                 (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "24") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "24") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                                 (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                                 (rule "commute_or_2" (formula "12") (term "0"))
                                 (rule "commute_or_2" (formula "13") (term "0"))
                                 (rule "ifthenelse_split" (formula "22") (term "0"))
                                 (branch "self.concatenated.length ≥ 1 TRUE"
                                    (rule "eqSymm" (formula "23"))
                                    (rule "applyEq" (formula "24") (term "1,1,0") (ifseqformula "23"))
                                    (rule "commute_or_2" (formula "14") (term "0"))
                                    (rule "commute_or_2" (formula "15") (term "0"))
                                    (rule "arrayLengthNotNegative" (formula "48") (term "1,0,0,0,0"))
                                    (rule "arrayLengthIsAShort" (formula "49") (term "1,0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "arrayLengthIsAShort" (formula "49") (term "1,1,1,0,0,0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "arrayLengthNotNegative" (formula "49") (term "1,1,1,0,0,0"))
                                    (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "24"))
                                    (rule "leq_literals" (formula "1") (term "0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "lenNonNegative" (formula "49") (term "0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "1"))
                                    (rule "commute_or" (formula "19"))
                                    (rule "inEqSimp_or_weaken1" (formula "19"))
                                    (rule "add_zero_right" (formula "19") (term "1,0"))
                                    (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "3")))
                                    (rule "true_left" (formula "19"))
                                    (rule "commute_or_2" (formula "19") (term "0"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "1,0") (ifseqformula "9"))
                                    (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "42"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0,1") (ifseqformula "9"))
                                    (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "42"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "23") (term "0,0") (ifseqformula "9"))
                                    (rule "replace_known_right" (formula "23") (term "0") (ifseqformula "42"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "commute_or" (formula "37") (term "0,0"))
                                    (rule "commute_or_2" (formula "34") (term "0"))
                                    (rule "commute_or" (formula "8") (term "0,0"))
                                    (rule "commute_or" (formula "28") (term "0,0"))
                                    (rule "commute_or_2" (formula "36") (term "0"))
                                    (rule "commute_or_2" (formula "35") (term "0"))
                                    (rule "ifthenelse_split" (formula "4") (term "0"))
                                    (branch "self.electionID.<created> = TRUE TRUE"
                                       (rule "applyEqReverse" (formula "48") (term "0") (ifseqformula "5"))
                                       (builtin "One Step Simplification" (formula "48"))
                                       (rule "closeTrue" (formula "48"))
                                    )
                                    (branch "self.electionID.<created> = TRUE FALSE"
                                       (rule "referencedObjectIsCreatedRight" (formula "38") (ifseqformula "42"))
                                       (rule "close" (formula "38") (ifseqformula "9"))
                                    )
                                 )
                                 (branch "self.concatenated.length ≥ 1 FALSE"
                                    (rule "eqSymm" (formula "22"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "inEqSimp_geqRight" (formula "33"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_notGeq" (formula "23") (term "0"))
                                    (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                                    (rule "add_literals" (formula "23") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "23") (term "0,0"))
                                    (rule "commute_or_2" (formula "15") (term "0"))
                                    (rule "commute_or_2" (formula "16") (term "0"))
                                    (rule "arrayLengthIsAShort" (formula "48") (term "1,0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "arrayLengthNotNegative" (formula "48") (term "1,0,0,0,0"))
                                    (rule "arrayLengthNotNegative" (formula "49") (term "1,1,1,0,0,0"))
                                    (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "3"))
                                    (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "2"))
                                    (rule "true_left" (formula "2"))
                                    (rule "applyEq" (formula "50") (term "1,1,1,0,0,1,0,0,1") (ifseqformula "1"))
                                    (rule "seqDef_lower_equals_upper" (formula "50") (term "1,1,0,0,1,0,0,1"))
                                    (rule "applyEq" (formula "26") (term "1,1,1,0,0,1,0,0") (ifseqformula "1"))
                                    (rule "add_zero_right" (formula "26") (term "1,1,0,0,1,0,0"))
                                    (rule "eqSymm" (formula "26") (term "1,0,0"))
                                    (rule "applyEq" (formula "50") (term "1,1,1,0,0,1,0,1") (ifseqformula "1"))
                                    (rule "seqDef_lower_equals_upper" (formula "50") (term "1,1,0,0,1,0,1"))
                                    (rule "applyEq" (formula "50") (term "1,1,1,0,0,0") (ifseqformula "1"))
                                    (rule "seqDef_lower_equals_upper" (formula "50") (term "1,1,0,0,0"))
                                    (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                                    (rule "leq_literals" (formula "3"))
                                    (rule "true_left" (formula "3"))
                                    (rule "commute_or" (formula "19"))
                                    (rule "inEqSimp_or_weaken1" (formula "19"))
                                    (rule "add_zero_right" (formula "19") (term "1,0"))
                                    (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "3")))
                                    (rule "true_left" (formula "19"))
                                    (rule "commute_or_2" (formula "19") (term "0"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0,1") (ifseqformula "9"))
                                    (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "21"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0,0") (ifseqformula "9"))
                                    (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "1,0") (ifseqformula "9"))
                                    (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "43"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "commute_or" (formula "36") (term "0,0"))
                                    (rule "commute_or_2" (formula "33") (term "0"))
                                    (rule "commute_or" (formula "8") (term "0,0"))
                                    (rule "commute_or_2" (formula "35") (term "0"))
                                    (rule "commute_or_2" (formula "34") (term "0"))
                                    (rule "ifthenelse_split" (formula "4") (term "0"))
                                    (branch "self.electionID.<created> = TRUE TRUE"
                                       (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "5"))
                                       (builtin "One Step Simplification" (formula "47"))
                                       (rule "closeTrue" (formula "47"))
                                    )
                                    (branch "self.electionID.<created> = TRUE FALSE"
                                       (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "41"))
                                       (rule "close" (formula "37") (ifseqformula "9"))
                                    )
                                 )
                              )
                              (branch "self.electionID.length ≥ 1 FALSE"
                                 (rule "inEqSimp_geqRight" (formula "35"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_homoInEq1" (formula "5"))
                                 (rule "times_zero_2" (formula "5") (term "1,0"))
                                 (rule "add_zero_right" (formula "5") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                 (rule "mul_literals" (formula "5") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "4"))
                                 (rule "qeq_literals" (formula "5") (term "0"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "closeFalse" (formula "5"))
                              )
                           )
                           (branch "self.unsigned.length ≥ 0 FALSE"
                              (rule "replace_known_right" (formula "15") (term "0,1") (ifseqformula "48"))
                              (builtin "One Step Simplification" (formula "15"))
                              (rule "replace_known_right" (formula "16") (term "0,1,1,0,0") (ifseqformula "48"))
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "inEqSimp_geqRight" (formula "48"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "inEqSimp_contradEq3" (formula "16") (term "1") (ifseqformula "1"))
                              (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
                              (rule "add_literals" (formula "16") (term "0,0,1"))
                              (rule "qeq_literals" (formula "16") (term "0,1"))
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "notLeft" (formula "16"))
                              (rule "inEqSimp_geqRight" (formula "34"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_subsumption0" (formula "1") (ifseqformula "2"))
                              (rule "leq_literals" (formula "1") (term "0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "inEqSimp_or_tautInEq0" (formula "16") (term "0,0"))
                              (rule "add_literals" (formula "16") (term "1,1,0,0"))
                              (rule "qeq_literals" (formula "16") (term "1,0,0"))
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "true_left" (formula "16"))
                              (rule "nnf_imp2or" (formula "31") (term "0"))
                              (rule "commute_or_2" (formula "32") (term "0"))
                              (rule "nnf_imp2or" (formula "30") (term "0"))
                              (rule "ifthenelse_split" (formula "4") (term "0"))
                              (branch "self.electionID.length ≥ 1 TRUE"
                                 (rule "replace_known_left" (formula "43") (term "0,1") (ifseqformula "5"))
                                 (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "5")))
                                 (rule "nnf_imp2or" (formula "24") (term "0"))
                                 (rule "commute_or_2" (formula "6") (term "0"))
                                 (rule "nnf_imp2or" (formula "23") (term "0"))
                                 (rule "nnf_imp2or" (formula "22") (term "0"))
                                 (rule "nnf_notAnd" (formula "30") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "30") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
                                 (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "30") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
                                 (rule "commute_or_2" (formula "21") (term "0"))
                                 (rule "arrayLengthIsAShort" (formula "48") (term "1,0,1,0,0,0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "arrayLengthNotNegative" (formula "48") (term "1,0,1,0,0,0"))
                                 (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "5"))
                                 (rule "leq_literals" (formula "1") (term "0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "nnf_notAnd" (formula "32") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "32") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "32") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0"))
                                 (rule "mul_literals" (formula "32") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "32") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
                                 (rule "mul_literals" (formula "32") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "31") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "31") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0"))
                                 (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "31") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0"))
                                 (rule "commute_or_2" (formula "12") (term "0"))
                                 (rule "nnf_notAnd" (formula "24") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "24") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                                 (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "23") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "23") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                                 (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "22") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "22") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                                 (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
                                 (rule "ifthenelse_split" (formula "20") (term "0"))
                                 (branch "self.concatenated.length ≥ 1 TRUE"
                                    (rule "eqSymm" (formula "21"))
                                    (rule "applyEq" (formula "22") (term "1,1,0") (ifseqformula "21"))
                                    (rule "commute_or_2" (formula "13") (term "0"))
                                    (rule "commute_or_2" (formula "14") (term "0"))
                                    (rule "commute_or_2" (formula "15") (term "0"))
                                    (rule "arrayLengthNotNegative" (formula "47") (term "1,0,0,0,0"))
                                    (rule "arrayLengthIsAShort" (formula "48") (term "1,0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "arrayLengthNotNegative" (formula "48") (term "1,1,1,0,0,0"))
                                    (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "22"))
                                    (rule "leq_literals" (formula "1") (term "0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "arrayLengthIsAShort" (formula "48") (term "1,1,1,0,0,0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "lenNonNegative" (formula "48") (term "0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "1"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0,1") (ifseqformula "9"))
                                    (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "41"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "1,1") (ifseqformula "9"))
                                    (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "41"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "1,0") (ifseqformula "9"))
                                    (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "44"))
                                    (builtin "One Step Simplification" (formula "19"))
                                    (rule "commute_or" (formula "37") (term "0,0"))
                                    (rule "commute_or_2" (formula "34") (term "0"))
                                    (rule "commute_or" (formula "8") (term "0,0"))
                                    (rule "commute_or" (formula "27") (term "0,0"))
                                    (rule "commute_or_2" (formula "36") (term "0"))
                                    (rule "commute_or_2" (formula "35") (term "0"))
                                    (rule "commute_or_2" (formula "28") (term "0"))
                                    (rule "ifthenelse_split" (formula "4") (term "0"))
                                    (branch "self.electionID.<created> = TRUE TRUE"
                                       (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "5"))
                                       (builtin "One Step Simplification" (formula "47"))
                                       (rule "closeTrue" (formula "47"))
                                    )
                                    (branch "self.electionID.<created> = TRUE FALSE"
                                       (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "41"))
                                       (rule "close" (formula "37") (ifseqformula "9"))
                                    )
                                 )
                                 (branch "self.concatenated.length ≥ 1 FALSE"
                                    (rule "eqSymm" (formula "20"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "inEqSimp_geqRight" (formula "32"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_notGeq" (formula "21") (term "0"))
                                    (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                                    (rule "add_literals" (formula "21") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "21") (term "0,0"))
                                    (rule "commute_or_2" (formula "14") (term "0"))
                                    (rule "commute_or_2" (formula "15") (term "0"))
                                    (rule "commute_or_2" (formula "16") (term "0"))
                                    (rule "arrayLengthIsAShort" (formula "47") (term "1,0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "arrayLengthNotNegative" (formula "47") (term "1,0,0,0,0"))
                                    (rule "arrayLengthNotNegative" (formula "48") (term "1,1,1,0,0,0"))
                                    (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "3"))
                                    (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "2"))
                                    (rule "true_left" (formula "2"))
                                    (rule "applyEq" (formula "49") (term "1,1,1,0,0,1,0,1") (ifseqformula "1"))
                                    (rule "seqDef_lower_equals_upper" (formula "49") (term "1,1,0,0,1,0,1"))
                                    (rule "applyEq" (formula "49") (term "1,1,1,0,0,0") (ifseqformula "1"))
                                    (rule "seqDef_lower_equals_upper" (formula "49") (term "1,1,0,0,0"))
                                    (rule "applyEq" (formula "49") (term "1,1,1,0,0,1,0,0,1") (ifseqformula "1"))
                                    (rule "seqDef_lower_equals_upper" (formula "49") (term "1,1,0,0,1,0,0,1"))
                                    (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                                    (rule "leq_literals" (formula "3"))
                                    (rule "true_left" (formula "3"))
                                    (rule "applyEq" (formula "23") (term "1,1,1,0,0,1,0,0") (ifseqformula "1"))
                                    (rule "add_zero_right" (formula "23") (term "1,1,0,0,1,0,0"))
                                    (rule "eqSymm" (formula "23") (term "1,0,0"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "1,0") (ifseqformula "9"))
                                    (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "41"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "1,1") (ifseqformula "9"))
                                    (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "19"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0,1") (ifseqformula "9"))
                                    (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "42"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "commute_or" (formula "36") (term "0,0"))
                                    (rule "commute_or_2" (formula "33") (term "0"))
                                    (rule "commute_or" (formula "8") (term "0,0"))
                                    (rule "commute_or_2" (formula "35") (term "0"))
                                    (rule "commute_or_2" (formula "34") (term "0"))
                                    (rule "commute_or_2" (formula "27") (term "0"))
                                    (rule "ifthenelse_split" (formula "4") (term "0"))
                                    (branch "self.electionID.<created> = TRUE TRUE"
                                       (rule "applyEqReverse" (formula "46") (term "0") (ifseqformula "5"))
                                       (builtin "One Step Simplification" (formula "46"))
                                       (rule "closeTrue" (formula "46"))
                                    )
                                    (branch "self.electionID.<created> = TRUE FALSE"
                                       (rule "referencedObjectIsCreatedRight" (formula "36") (ifseqformula "40"))
                                       (rule "close" (formula "36") (ifseqformula "9"))
                                    )
                                 )
                              )
                              (branch "self.electionID.length ≥ 1 FALSE"
                                 (rule "inEqSimp_geqRight" (formula "33"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_homoInEq1" (formula "5"))
                                 (rule "times_zero_2" (formula "5") (term "1,0"))
                                 (rule "add_zero_right" (formula "5") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                 (rule "mul_literals" (formula "5") (term "1"))
                                 (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "5"))
                                 (rule "qeq_literals" (formula "4") (term "0"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "closeFalse" (formula "4"))
                              )
                           )
                        )
                     )
                     (branch "CUT: array2seq(heapAfter_splidAndCheck, verif.selectvoting.system.core.Tag.BALLOTS@heapAfter_splidAndCheck) = array2seq(heap, verif.selectvoting.system.core.Tag.BALLOTS) FALSE"
                        (rule "equalityToSeqGetAndSeqLenRight" (formula "23") (inst "iv=iv") (userinteraction))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1") (ifseqformula "17"))
                        (rule "eqSymm" (formula "8") (term "1,0"))
                        (rule "eqSymm" (formula "20"))
                        (rule "eqSymm" (formula "14"))
                        (rule "eqSymm" (formula "28"))
                        (rule "eqSymm" (formula "10"))
                        (rule "eqSymm" (formula "11"))
                        (rule "eqSymm" (formula "12"))
                        (rule "eqSymm" (formula "13"))
                        (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "27"))
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "25"))
                        (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "24")))
                        (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                        (rule "applyEq" (formula "11") (term "1,1,0") (ifseqformula "14"))
                        (rule "applyEq" (formula "10") (term "1") (ifseqformula "14"))
                        (rule "applyEq" (formula "28") (term "1,1,1") (ifseqformula "14"))
                        (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "13"))
                        (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "12"))
                        (rule "applyEq" (formula "28") (term "1") (ifseqformula "11"))
                        (rule "applyEq" (formula "13") (term "1") (ifseqformula "12"))
                        (rule "applyEq" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "12"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,1"))
                        (rule "mul_literals" (formula "23") (term "0,1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
                        (rule "array2seqDef" (formula "23") (term "0,0,0") (inst "u=u"))
                        (rule "lenOfSeqDef" (formula "23") (term "0,0"))
                        (rule "polySimp_elimSub" (formula "23") (term "1,0,0"))
                        (rule "times_zero_2" (formula "23") (term "1,1,0,0"))
                        (rule "add_zero_right" (formula "23") (term "1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0,0"))
                        (rule "add_zero_right" (formula "23") (term "0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "23") (term "0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "23") (term "0,0,0,0"))
                        (rule "array2seqDef" (formula "1") (term "1") (inst "u=u"))
                        (rule "eqSymm" (formula "1"))
                        (rule "array2seqDef" (formula "23") (term "0,1,1,0,1") (inst "u=u"))
                        (rule "eqSymm" (formula "23") (term "1,0,1"))
                        (rule "getOfSeqDef" (formula "23") (term "0,1,0,1"))
                        (rule "castDel" (formula "23") (term "2,0,1,0,1"))
                        (rule "castDel" (formula "23") (term "1,0,1,0,1"))
                        (rule "add_zero_right" (formula "23") (term "0,2,1,0,1,0,1"))
                        (rule "polySimp_elimSub" (formula "23") (term "1,1,0,0,1,0,1"))
                        (rule "mul_literals" (formula "23") (term "1,1,1,0,0,1,0,1"))
                        (rule "add_zero_right" (formula "23") (term "1,1,0,0,1,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,1,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,1,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,1,0,1"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,1,0,1"))
                        (rule "mul_literals" (formula "23") (term "0,1,1,0,0,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,1,0,1"))
                        (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,1,0,1"))
                        (rule "nonNull" (formula "22") (inst "i=i"))
                        (rule "sub_literals" (formula "22") (term "2,1,0,1,1"))
                        (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "25")))
                        (rule "greater_literals" (formula "22") (term "0"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                        (rule "array2seqDef" (formula "23") (term "0,1,0") (inst "u=u"))
                        (rule "eqSymm" (formula "23") (term "0"))
                        (rule "lenOfSeqDef" (formula "23") (term "0,0"))
                        (rule "polySimp_elimSub" (formula "23") (term "1,0,0"))
                        (rule "times_zero_2" (formula "23") (term "1,1,0,0"))
                        (rule "add_zero_right" (formula "23") (term "1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0,0"))
                        (rule "add_zero_right" (formula "23") (term "0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "23") (term "0,0,0,0"))
                        (rule "eqSymm" (formula "23") (term "0"))
                        (rule "polySimp_elimOne" (formula "23") (term "0,0,1,0"))
                        (rule "array2seqDef" (formula "8") (term "1,1,0") (inst "u=u"))
                        (rule "eqSymm" (formula "8") (term "1,0"))
                        (rule "array2seqDef" (formula "14") (term "0") (inst "u=u"))
                        (rule "array2seqDef" (formula "14") (term "1") (inst "u=u"))
                        (rule "narrowSelectArrayType" (formula "14") (term "2,1") (ifseqformula "2") (ifseqformula "27"))
                        (rule "array2seqDef" (formula "28") (term "0,0") (inst "u=u"))
                        (rule "array2seqDef" (formula "28") (term "1,1,0") (inst "u=u"))
                        (rule "array2seqDef" (formula "28") (term "0,1,0") (inst "u=u"))
                        (rule "array2seqDef" (formula "11") (term "0,1,0") (inst "u=u"))
                        (rule "array2seqDef" (formula "11") (term "1") (inst "u=u"))
                        (rule "eqSymm" (formula "11"))
                        (rule "applyEq" (formula "11") (term "0") (ifseqformula "1"))
                        (rule "eqSymm" (formula "11"))
                        (rule "array2seqDef" (formula "10") (term "1") (inst "u=u"))
                        (rule "eqSymm" (formula "10"))
                        (rule "narrowSelectArrayType" (formula "10") (term "2,0") (ifseqformula "2") (ifseqformula "27"))
                        (rule "applyEq" (formula "14") (term "1") (ifseqformula "10"))
                        (rule "array2seqDef" (formula "28") (term "1") (inst "u=u"))
                        (rule "applyEq" (formula "28") (term "1") (ifseqformula "1"))
                        (rule "array2seqDef" (formula "23") (term "0,1,1,1,0,0,1") (inst "u=u"))
                        (rule "lenOfSeqDef" (formula "23") (term "1,1,1,0,0,1"))
                        (rule "polySimp_elimSub" (formula "23") (term "1,1,1,1,0,0,1"))
                        (rule "times_zero_2" (formula "23") (term "1,1,1,1,1,0,0,1"))
                        (rule "add_zero_right" (formula "23") (term "1,1,1,1,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "23") (term "0,1,1,1,0,0,1"))
                        (rule "add_zero_right" (formula "23") (term "0,0,1,1,1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,1,1,0,0,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,1,1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "23") (term "0,0,1,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "23") (term "0,0,1,1,1,0,0,1"))
                        (rule "array2seqDef" (formula "1") (term "1") (inst "u=u"))
                        (rule "eqSymm" (formula "1"))
                        (rule "array2seqDef" (formula "23") (term "0,1,1,0,1") (inst "u=u"))
                        (rule "eqSymm" (formula "23") (term "1,0,1"))
                        (rule "getOfSeqDef" (formula "23") (term "0,1,0,1"))
                        (rule "castDel" (formula "23") (term "2,0,1,0,1"))
                        (rule "castDel" (formula "23") (term "1,0,1,0,1"))
                        (rule "add_zero_right" (formula "23") (term "0,2,1,0,1,0,1"))
                        (rule "polySimp_elimSub" (formula "23") (term "1,1,0,0,1,0,1"))
                        (rule "times_zero_2" (formula "23") (term "1,1,1,0,0,1,0,1"))
                        (rule "add_zero_right" (formula "23") (term "1,1,0,0,1,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,1,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,1,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,1,0,1"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,1,0,1"))
                        (rule "mul_literals" (formula "23") (term "0,1,1,0,0,1,0,1"))
                        (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,1,0,1"))
                        (rule "array2seqDef" (formula "8") (term "1,0,1,1,0") (inst "u=u"))
                        (rule "array2seqDef" (formula "8") (term "0,0,1,1,0") (inst "u=u"))
                        (rule "pullOutSelect" (formula "20") (term "1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_13"))
                        (rule "simplifySelectOfAnonEQ" (formula "20") (ifseqformula "17"))
                        (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "27")) (ifInst ""  (formula "3")))
                        (rule "applyEqReverse" (formula "21") (term "1,0") (ifseqformula "20"))
                        (rule "hideAuxiliaryEq" (formula "20"))
                        (rule "array2seqDef" (formula "11") (term "1,1,0") (inst "u=u"))
                        (rule "narrowSelectArrayType" (formula "11") (term "2,1,1,0") (ifseqformula "2") (ifseqformula "27"))
                        (rule "applyEq" (formula "11") (term "1,1,0") (ifseqformula "10"))
                        (rule "array2seqDef" (formula "11") (term "1") (inst "u=u"))
                        (rule "eqSymm" (formula "11"))
                        (rule "array2seqDef" (formula "28") (term "1") (inst "u=u"))
                        (rule "eqSymm" (formula "28"))
                        (rule "eqSeqDef" (formula "1") (inst "iv=iv"))
                        (rule "andLeft" (formula "1"))
                        (rule "lenOfSeqDef" (formula "1") (term "0"))
                        (rule "eqSymm" (formula "1"))
                        (rule "polySimp_elimSub" (formula "1") (term "1,1"))
                        (rule "times_zero_2" (formula "1") (term "1,1,1"))
                        (rule "add_zero_right" (formula "1") (term "1,1"))
                        (rule "getOfSeqDef" (formula "2") (term "0,1,0"))
                        (rule "castDel" (formula "2") (term "1,0,1,0"))
                        (rule "castDel" (formula "2") (term "2,0,1,0"))
                        (rule "add_zero_right" (formula "2") (term "0,2,1,0,1,0"))
                        (rule "eqSymm" (formula "2") (term "1,0"))
                        (rule "polySimp_elimSub" (formula "2") (term "1,1,0,1,1,0"))
                        (rule "times_zero_2" (formula "2") (term "1,1,1,0,1,1,0"))
                        (rule "add_zero_right" (formula "2") (term "1,1,0,1,1,0"))
                        (rule "lenOfSeqDef" (formula "2") (term "1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "2") (term "1,1,1,0,0"))
                        (rule "times_zero_2" (formula "2") (term "1,1,1,1,0,0"))
                        (rule "add_zero_right" (formula "2") (term "1,1,1,0,0"))
                        (rule "lenOfSeqDef" (formula "1") (term "0"))
                        (rule "eqSymm" (formula "1"))
                        (rule "polySimp_elimSub" (formula "1") (term "1,1"))
                        (rule "times_zero_2" (formula "1") (term "1,1,1"))
                        (rule "add_zero_right" (formula "1") (term "1,1"))
                        (rule "getOfSeqDef" (formula "2") (term "0,1,0"))
                        (rule "castDel" (formula "2") (term "2,0,1,0"))
                        (rule "castDel" (formula "2") (term "1,0,1,0"))
                        (rule "add_zero_right" (formula "2") (term "0,2,1,0,1,0"))
                        (rule "eqSymm" (formula "2") (term "1,0"))
                        (rule "polySimp_elimSub" (formula "2") (term "1,1,0,1,1,0"))
                        (rule "times_zero_2" (formula "2") (term "1,1,1,0,1,1,0"))
                        (rule "add_zero_right" (formula "2") (term "1,1,0,1,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1,1,0,0"))
                        (rule "add_zero_right" (formula "2") (term "0,0,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1"))
                        (rule "add_zero_right" (formula "1") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0"))
                        (rule "eqSymm" (formula "2") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,1,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0"))
                        (rule "eqSymm" (formula "2") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,1,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,1,1,0"))
                        (rule "apply_eq_monomials" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,0,1,0,0,1,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "2") (term "1,0,0,1,0,0"))
                        (rule "add_literals" (formula "2") (term "1,1,1,0,0,1,0,0"))
                        (rule "times_zero_1" (formula "2") (term "1,1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "2") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,0,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0"))
                        (rule "eqSymm" (formula "2") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,1,1,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,1,0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,1,1,0"))
                        (rule "mul_literals" (formula "2") (term "0,1,1,0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,1,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "2") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0"))
                        (rule "eqSymm" (formula "2") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,1,1,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,1,0,1,1,0"))
                        (rule "mul_literals" (formula "2") (term "0,1,1,0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,1,1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,1,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0,0,1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0,0,1,1,1,0,0"))
                        (rule "array2seqDef" (formula "12") (term "0,1") (inst "u=u"))
                        (rule "eqSeqDef2" (formula "11") (inst "iv=iv") (ifseqformula "11"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "true_left" (formula "11"))
                        (rule "eqSeqDef2" (formula "14") (inst "iv=iv") (ifseqformula "14"))
                        (builtin "One Step Simplification" (formula "14"))
                        (rule "true_left" (formula "14"))
                        (rule "equalityToSeqGetAndSeqLenRight" (formula "27") (inst "iv=iv"))
                        (rule "lenOfSeqDef" (formula "27") (term "1,1,0,0,1"))
                        (rule "polySimp_elimSub" (formula "27") (term "1,1,1,0,0,1"))
                        (rule "times_zero_2" (formula "27") (term "1,1,1,1,0,0,1"))
                        (rule "add_zero_right" (formula "27") (term "1,1,1,0,0,1"))
                        (rule "getOfSeqDef" (formula "27") (term "0,1,0,1"))
                        (rule "castDel" (formula "27") (term "1,0,1,0,1"))
                        (rule "castDel" (formula "27") (term "2,0,1,0,1"))
                        (rule "add_zero_right" (formula "27") (term "0,2,1,0,1,0,1"))
                        (rule "eqSymm" (formula "27") (term "1,0,1"))
                        (rule "polySimp_elimSub" (formula "27") (term "1,1,0,1,1,0,1"))
                        (rule "times_zero_2" (formula "27") (term "1,1,1,0,1,1,0,1"))
                        (rule "add_zero_right" (formula "27") (term "1,1,0,1,1,0,1"))
                        (rule "lenOfSeqDef" (formula "27") (term "0,0"))
                        (rule "eqSymm" (formula "27") (term "0"))
                        (rule "polySimp_elimSub" (formula "27") (term "1,1,0"))
                        (rule "times_zero_2" (formula "27") (term "1,1,1,0"))
                        (rule "add_zero_right" (formula "27") (term "1,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "27") (term "0,1,1,0,0,1"))
                        (rule "add_zero_right" (formula "27") (term "0,0,1,1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,1,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,1,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,1,1,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "27") (term "0,1,0"))
                        (rule "add_zero_right" (formula "27") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,1,1,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,1,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,1,1,0,1"))
                        (rule "polySimp_rightDist" (formula "27") (term "1,1,0,1,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,1,1,0,1"))
                        (rule "mul_literals" (formula "27") (term "0,1,1,0,1,1,0,1"))
                        (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,1,1,0,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "27") (term "0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "27") (term "0,0,1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,0,1,0,0,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "27") (term "0,0,0,1,0,0,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "27") (term "0,0,0,1,0,0,1,0,0,1"))
                        (rule "apply_eq_monomials" (formula "27") (term "1,0,0,1,0,0,1") (ifseqformula "1"))
                        (rule "polySimp_rightDist" (formula "27") (term "0,1,0,0,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,0,0,1,0,0,1"))
                        (rule "polySimp_pullOutFactor0b" (formula "27") (term "1,0,0,1,0,0,1"))
                        (rule "add_literals" (formula "27") (term "1,1,1,0,0,1,0,0,1"))
                        (rule "times_zero_1" (formula "27") (term "1,1,0,0,1,0,0,1"))
                        (rule "add_zero_right" (formula "27") (term "1,0,0,1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1"))
                        (rule "mul_literals" (formula "27") (term "0,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1"))
                        (rule "pullOutSelect" (formula "22") (term "0,1,0,0") (inst "selectSK=verif_selectvoting_system_core_Tag_BALLOTS_2"))
                        (rule "applyEq" (formula "28") (term "0,1,0,0,0,1,0,1") (ifseqformula "1"))
                        (rule "applyEq" (formula "28") (term "1,2,0,0,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "23") (term "0,1,1,1,1,0,0,1") (ifseqformula "1"))
                        (rule "applyEq" (formula "28") (term "1,2,0,0,0,1,0,1") (ifseqformula "1"))
                        (rule "applyEq" (formula "23") (term "1,1,0,1,0,1") (ifseqformula "1"))
                        (rule "applyEq" (formula "23") (term "0,0,0,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "23") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                        (rule "applyEq" (formula "28") (term "0,1,0,0,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "23") (term "0,0,0,1,1,1,0,0,1") (ifseqformula "1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "23") (term "0,1,0,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "28") (term "0,1,0,0,0,1,0,1") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "28") (term "1,2,0,0,0,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "23") (term "0,1,1,1,1,0,0,1") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "28") (term "1,2,0,0,0,1,0,1") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "23") (term "1,1,0,1,0,1") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "23") (term "0,0,0,0,0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "allRight" (formula "23") (inst "sk=iv_8"))
                        (rule "impRight" (formula "23"))
                        (rule "andLeft" (formula "1"))
                        (rule "applyEqReverse" (formula "30") (term "0,1,0,0,0,0") (ifseqformula "3"))
                        (rule "applyEqReverse" (formula "25") (term "0,1,1,1,0,0") (ifseqformula "3"))
                        (rule "applyEqReverse" (formula "2") (term "0,0,0,1,1") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "1")))
                        (rule "inEqSimp_homoInEq0" (formula "2"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "inEqSimp_homoInEq0" (formula "24") (term "0,1"))
                        (rule "polySimp_addComm1" (formula "24") (term "0,0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "24") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "24") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "mul_literals" (formula "2") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "24") (term "1,0,1"))
                        (rule "mul_literals" (formula "24") (term "0,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,1"))
                        (rule "polySimp_elimOne" (formula "24") (term "1,1,0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "24") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "24") (term "0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                        (rule "pullOutSelect" (formula "13") (term "1,2,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_10"))
                        (rule "applyEq" (formula "3") (term "0,0,0,0") (ifseqformula "13"))
                        (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "13"))
                        (rule "applyEq" (formula "30") (term "1,1,1,1,0,1") (ifseqformula "13"))
                        (rule "applyEq" (formula "4") (term "1,1,0,1,0") (ifseqformula "13"))
                        (rule "applyEq" (formula "14") (term "0,1,0") (ifseqformula "13"))
                        (rule "applyEq" (formula "30") (term "0,0,0,1,0") (ifseqformula "13"))
                        (rule "applyEq" (formula "4") (term "0,1,1,1,0,0,1,0") (ifseqformula "13"))
                        (rule "applyEq" (formula "30") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "13"))
                        (rule "applyEq" (formula "30") (term "0,1,1,0") (ifseqformula "13"))
                        (rule "simplifySelectOfAnonEQ" (formula "13") (ifseqformula "19"))
                        (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "28")) (ifInst ""  (formula "6")))
                        (rule "applyEqReverse" (formula "14") (term "1,2,0") (ifseqformula "13"))
                        (rule "applyEqReverse" (formula "3") (term "0,0,0,0") (ifseqformula "13"))
                        (rule "applyEqReverse" (formula "3") (term "0,1,0") (ifseqformula "13"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "applyEqReverse" (formula "29") (term "1,1,1,1,0,1") (ifseqformula "12"))
                        (rule "applyEqReverse" (formula "3") (term "1,1,0,1,0") (ifseqformula "12"))
                        (rule "applyEqReverse" (formula "13") (term "0,1,0") (ifseqformula "12"))
                        (rule "applyEqReverse" (formula "29") (term "0,0,0,1,0") (ifseqformula "12"))
                        (rule "applyEqReverse" (formula "3") (term "0,1,1,1,0,0,1,0") (ifseqformula "12"))
                        (rule "applyEqReverse" (formula "29") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "12"))
                        (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "12"))
                        (rule "hideAuxiliaryEq" (formula "12"))
                        (rule "pullOutSelect" (formula "28") (term "1,2,1,1,0,0,1,0,1") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_10"))
                        (rule "applyEq" (formula "29") (term "0,1,1,1,0,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "29") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                        (rule "applyEq" (formula "29") (term "1,2,1,1,0,0,0") (ifseqformula "1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "27")) (ifInst ""  (formula "6")))
                        (rule "applyEqReverse" (formula "29") (term "1,2,1,1,0,0,1,0,1") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "29") (term "0,1,1,1,0,0,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "29") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "29") (term "1,2,1,1,0,0,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "pullOutSelect" (formula "28") (term "1,2,0,1,0,0,1,0,1") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_10"))
                        (rule "applyEq" (formula "29") (term "0,1,0,1,0,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "29") (term "0,1,0,1,0,0,1,0,1") (ifseqformula "1"))
                        (rule "applyEq" (formula "29") (term "1,2,0,1,0,0,0") (ifseqformula "1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "27")) (ifInst ""  (formula "6")))
                        (rule "applyEqReverse" (formula "29") (term "1,2,0,1,0,0,1,0,1") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "29") (term "0,1,0,1,0,0,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "29") (term "0,1,0,1,0,0,1,0,1") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "29") (term "1,2,0,1,0,0,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "eqSeqDef2" (formula "12") (inst "iv=iv") (ifseqformula "12"))
                        (builtin "One Step Simplification" (formula "12"))
                        (rule "true_left" (formula "12"))
                        (rule "pullOutSelect" (formula "22") (term "1,0") (inst "selectSK=arr_122"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "23"))
                        (rule "nnf_imp2or" (formula "22") (term "0"))
                        (rule "nnf_imp2or" (formula "11") (term "0"))
                        (rule "Contract_axiom_for_ghostFieldsNonNull_in_MixServer" (formula "10") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
                        (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "27")) (ifInst ""  (formula "5")))
                        (rule "eqSymm" (formula "10"))
                        (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,0,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,0,0,0"))
                        (rule "applyEq" (formula "10") (term "1") (ifseqformula "11"))
                        (builtin "One Step Simplification" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "notLeft" (formula "11"))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "notLeft" (formula "12"))
                        (rule "andLeft" (formula "10"))
                        (rule "notLeft" (formula "12"))
                        (rule "notLeft" (formula "10"))
                        (rule "notLeft" (formula "10"))
                        (rule "narrowSelectArrayType" (formula "4") (term "1,1,1,0") (ifseqformula "5") (ifseqformula "30"))
                        (rule "applyEq" (formula "12") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                        (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                        (rule "Definition_axiom_for_ghostFieldsNonNull_in_verif_selectvoting_system_core_MixServer" (formula "13") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
                        (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "27")) (ifInst ""  (formula "26")) (ifInst ""  (formula "28")) (ifInst ""  (formula "29")) (ifInst ""  (formula "30")))
                        (rule "andLeft" (formula "13"))
                        (rule "andLeft" (formula "13"))
                        (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                        (rule "applyEq" (formula "15") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                        (rule "applyEq" (formula "14") (term "0,1,0,0,1,0,0") (ifseqformula "18"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                        (rule "nnf_imp2or" (formula "35") (term "0,1"))
                        (rule "nnf_notAnd" (formula "24") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                        (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                        (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "13") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
                        (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,0,0,0"))
                        (rule "nnf_imp2or" (formula "4") (term "0"))
                        (rule "nnf_imp2or" (formula "10") (term "0"))
                        (rule "nnf_imp2or" (formula "12") (term "0"))
                        (rule "nnf_imp2or" (formula "11") (term "0"))
                        (rule "nnf_notAnd" (formula "35") (term "0,0,1"))
                        (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1"))
                        (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1"))
                        (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,1"))
                        (rule "add_zero_left" (formula "35") (term "0,0,1,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,1"))
                        (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,1"))
                        (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0,1"))
                        (rule "add_literals" (formula "35") (term "0,0,0,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,1"))
                        (rule "mul_literals" (formula "35") (term "1,0,0,0,1"))
                        (rule "nnf_notAnd" (formula "4") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "4") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "4") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "4") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "4") (term "0,0,0"))
                        (rule "mul_literals" (formula "4") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "4") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
                        (rule "mul_literals" (formula "4") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "10") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
                        (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                        (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "12") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                        (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                        (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "11") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                        (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                        (rule "arrayLengthIsAShort" (formula "15") (term "0"))
                        (builtin "One Step Simplification" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "arrayLengthNotNegative" (formula "15") (term "0"))
                        (rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
                        (rule "arrayLengthNotNegative" (formula "16") (term "1"))
                        (rule "arrayLengthIsAShort" (formula "16") (term "1"))
                        (builtin "One Step Simplification" (formula "16"))
                        (rule "true_left" (formula "16"))
                        (rule "arrayLengthIsAShort" (formula "17") (term "0"))
                        (builtin "One Step Simplification" (formula "17"))
                        (rule "true_left" (formula "17"))
                        (rule "arrayLengthNotNegative" (formula "17") (term "0"))
                        (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
                        (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "18") (ifseqformula "7"))
                        (rule "andLeft" (formula "18"))
                        (rule "andLeft" (formula "18"))
                        (rule "notLeft" (formula "20"))
                        (rule "andLeft" (formula "18"))
                        (rule "notLeft" (formula "20"))
                        (rule "notLeft" (formula "19"))
                        (rule "andLeft" (formula "18"))
                        (rule "notLeft" (formula "19"))
                        (rule "andLeft" (formula "18"))
                        (rule "andLeft" (formula "18"))
                        (rule "andLeft" (formula "18"))
                        (rule "andLeft" (formula "18"))
                        (rule "notLeft" (formula "19"))
                        (rule "notLeft" (formula "18"))
                        (rule "narrowSelectArrayType" (formula "13") (term "2,0,0,1,1,0") (ifseqformula "5") (ifseqformula "31"))
                        (rule "nonNull" (formula "20") (inst "i=i"))
                        (rule "sub_literals" (formula "20") (term "2,1,0,1,1"))
                        (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "33")))
                        (rule "greater_literals" (formula "20") (term "0"))
                        (builtin "One Step Simplification" (formula "20"))
                        (rule "narrowSelectArrayType" (formula "20") (term "0,0,1,0") (ifseqformula "5") (ifseqformula "33"))
                        (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                        (rule "nonNull" (formula "19") (inst "i=i"))
                        (rule "greater_literals" (formula "19") (term "0,1"))
                        (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "32")))
                        (rule "sub_literals" (formula "19") (term "2,1,0"))
                        (builtin "One Step Simplification" (formula "19"))
                        (rule "narrowSelectArrayType" (formula "19") (term "0,0,1,0") (ifseqformula "5") (ifseqformula "32"))
                        (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                        (rule "applyEq" (formula "19") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                        (rule "nonNull" (formula "18") (inst "i=i"))
                        (rule "sub_literals" (formula "18") (term "2,1,0,1,1"))
                        (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "34")))
                        (rule "greater_literals" (formula "18") (term "0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "narrowSelectArrayType" (formula "18") (term "0,0,1,0") (ifseqformula "5") (ifseqformula "34"))
                        (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                        (rule "applyEq" (formula "18") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                        (rule "nnf_imp2or" (formula "20") (term "0"))
                        (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "26") (ifseqformula "7"))
                        (rule "replaceKnownSelect_taclet10100020_8" (formula "26") (term "0,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10100020_9" (formula "26") (term "0,0,1"))
                        (rule "replaceKnownSelect_taclet10100020_0" (formula "26") (term "1,1,0,0,0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10100020_1" (formula "26") (term "1,1,0,0,0,0,0,0"))
                        (rule "replaceKnownSelect_taclet10100020_6" (formula "26") (term "0,0,1,0,0,0,0,0,0,0"))
                        (rule "replaceKnownSelect_taclet10100020_4" (formula "26") (term "0,0,0,0,0,0,0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10100020_7" (formula "26") (term "0,0,1,0,0,0,0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10100020_5" (formula "26") (term "0,0,0,0,0,0,0,0,0,0"))
                        (rule "andLeft" (formula "26"))
                        (rule "notLeft" (formula "27"))
                        (rule "andLeft" (formula "26"))
                        (rule "andLeft" (formula "26"))
                        (rule "notLeft" (formula "28"))
                        (rule "andLeft" (formula "26"))
                        (rule "notLeft" (formula "28"))
                        (rule "notLeft" (formula "27"))
                        (rule "andLeft" (formula "26"))
                        (rule "andLeft" (formula "26"))
                        (rule "andLeft" (formula "26"))
                        (rule "andLeft" (formula "26"))
                        (rule "notLeft" (formula "27"))
                        (rule "notLeft" (formula "26"))
                        (rule "nonNull" (formula "28") (inst "i=i"))
                        (rule "greater_literals" (formula "28") (term "0,1"))
                        (builtin "One Step Simplification" (formula "28"))
                        (rule "sub_literals" (formula "28") (term "2,1,0,1"))
                        (builtin "One Step Simplification" (formula "28"))
                        (rule "andLeft" (formula "28"))
                        (rule "notLeft" (formula "28"))
                        (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "28") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0"))
                        (rule "nonNull" (formula "27") (inst "i=i"))
                        (rule "greater_literals" (formula "27") (term "0,1"))
                        (builtin "One Step Simplification" (formula "27"))
                        (rule "sub_literals" (formula "27") (term "2,1,0,1"))
                        (builtin "One Step Simplification" (formula "27"))
                        (rule "andLeft" (formula "27"))
                        (rule "notLeft" (formula "27"))
                        (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
                        (rule "nonNull" (formula "26") (inst "i=i"))
                        (rule "sub_literals" (formula "26") (term "2,1,0,1,1"))
                        (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "41")))
                        (rule "greater_literals" (formula "26") (term "0"))
                        (builtin "One Step Simplification" (formula "26"))
                        (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                        (rule "applyEq" (formula "26") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
                        (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_10"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")) (ifInst ""  (formula "7")))
                        (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "pullOutSelect" (formula "33") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_10"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")) (ifInst ""  (formula "7")))
                        (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_10"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")) (ifInst ""  (formula "7")))
                        (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "pullOutSelect" (formula "28") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_11"))
                        (rule "applyEq" (formula "32") (term "0") (ifseqformula "28"))
                        (rule "applyEq" (formula "29") (term "0,1,1,1,0,0") (ifseqformula "28"))
                        (rule "simplifySelectOfAnonEQ" (formula "28") (ifseqformula "22"))
                        (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "45")) (ifInst ""  (formula "6")))
                        (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "28"))
                        (rule "applyEqReverse" (formula "29") (term "1,0,0,1,0") (ifseqformula "28"))
                        (rule "applyEqReverse" (formula "29") (term "0,1,1,1,0,0") (ifseqformula "28"))
                        (rule "hideAuxiliaryEq" (formula "28"))
                        (rule "pullOutSelect" (formula "27") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_12"))
                        (rule "applyEq" (formula "31") (term "0") (ifseqformula "27"))
                        (rule "applyEq" (formula "28") (term "0,1,1,1,0,0") (ifseqformula "27"))
                        (rule "simplifySelectOfAnonEQ" (formula "27") (ifseqformula "22"))
                        (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "44")) (ifInst ""  (formula "6")))
                        (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "27"))
                        (rule "applyEqReverse" (formula "28") (term "1,0,0,1,0") (ifseqformula "27"))
                        (rule "applyEqReverse" (formula "28") (term "0,1,1,1,0,0") (ifseqformula "27"))
                        (rule "hideAuxiliaryEq" (formula "27"))
                        (rule "applyEq" (formula "27") (term "1,1,1,0,0") (ifseqformula "16"))
                        (rule "nnf_imp2or" (formula "19") (term "0"))
                        (rule "nnf_imp2or" (formula "18") (term "0"))
                        (rule "nnf_notAnd" (formula "20") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                        (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                        (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                        (rule "equalityToSeqGetAndSeqLenLeft" (formula "24") (inst "iv=iv"))
                        (rule "andLeft" (formula "24"))
                        (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                        (rule "applyEq" (formula "24") (term "0,0") (ifseqformula "26"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "true_left" (formula "24"))
                        (rule "applyEq" (formula "24") (term "0,0,1,0") (ifseqformula "25"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "true_left" (formula "24"))
                        (rule "nnf_imp2or" (formula "25") (term "0"))
                        (rule "commute_or_2" (formula "28") (term "0"))
                        (rule "nnf_imp2or" (formula "27") (term "0"))
                        (rule "nnf_imp2or" (formula "26") (term "0"))
                        (rule "nnf_notAnd" (formula "19") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
                        (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                        (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "18") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                        (rule "mul_literals" (formula "18") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                        (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                        (rule "commute_or_2" (formula "4") (term "0"))
                        (rule "nnf_notAnd" (formula "23") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                        (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                        (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "25") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                        (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                        (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "24") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                        (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                        (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                        (rule "commute_or_2" (formula "10") (term "0"))
                        (rule "commute_or_2" (formula "12") (term "0"))
                        (rule "ifthenelse_split" (formula "3") (term "0"))
                        (branch "verif.selectvoting.system.core.Tag.BALLOTS.length ≥ 1 TRUE"
                           (rule "replace_known_left" (formula "37") (term "0,0") (ifseqformula "4"))
                           (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "4")))
                           (rule "commute_or_2" (formula "12") (term "0"))
                           (rule "ifthenelse_split" (formula "42") (term "1,0"))
                           (branch "self.unsigned.length ≥ 1 TRUE"
                              (rule "replace_known_left" (formula "6") (term "0,1,1,0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "6"))
                              (rule "replace_known_left" (formula "43") (term "0,1,1,0,0,1") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "43"))
                              (rule "commute_or_2" (formula "15") (term "0"))
                              (rule "ifthenelse_split" (formula "2") (term "0"))
                              (branch " ¬verif.selectvoting.system.core.Tag.BALLOTS = null ∧ ¬ verif.selectvoting.system.core.Tag.BALLOTS.<created> = TRUE TRUE"
                                 (rule "andLeft" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "referencedObjectIsCreatedRight" (formula "29") (ifseqformula "30"))
                                 (rule "close" (formula "29") (ifseqformula "7"))
                              )
                              (branch " ¬verif.selectvoting.system.core.Tag.BALLOTS = null ∧ ¬ verif.selectvoting.system.core.Tag.BALLOTS.<created> = TRUE FALSE"
                                 (rule "close" (formula "39") (ifseqformula "2"))
                              )
                           )
                           (branch "self.unsigned.length ≥ 1 FALSE"
                              (rule "replace_known_right" (formula "5") (term "0,1,1,0") (ifseqformula "42"))
                              (builtin "One Step Simplification" (formula "5"))
                              (rule "replace_known_right" (formula "43") (term "0,1,1,0,0,1") (ifseqformula "42"))
                              (builtin "One Step Simplification" (formula "43"))
                              (rule "inEqSimp_geqRight" (formula "42"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_or_tautInEq0" (formula "43") (term "0,0,1"))
                              (rule "add_zero_right" (formula "43") (term "1,1,0,0,1"))
                              (rule "qeq_literals" (formula "43") (term "1,0,0,1"))
                              (builtin "One Step Simplification" (formula "43"))
                              (rule "commute_or_2" (formula "15") (term "0"))
                              (rule "ifthenelse_split" (formula "2") (term "0"))
                              (branch " ¬verif.selectvoting.system.core.Tag.BALLOTS = null ∧ ¬ verif.selectvoting.system.core.Tag.BALLOTS.<created> = TRUE TRUE"
                                 (rule "andLeft" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "referencedObjectIsCreatedRight" (formula "29") (ifseqformula "30"))
                                 (rule "close" (formula "29") (ifseqformula "7"))
                              )
                              (branch " ¬verif.selectvoting.system.core.Tag.BALLOTS = null ∧ ¬ verif.selectvoting.system.core.Tag.BALLOTS.<created> = TRUE FALSE"
                                 (rule "close" (formula "39") (ifseqformula "2"))
                              )
                           )
                        )
                        (branch "verif.selectvoting.system.core.Tag.BALLOTS.length ≥ 1 FALSE"
                           (rule "inEqSimp_geqRight" (formula "27"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "4"))
                           (rule "times_zero_2" (formula "4") (term "1,0"))
                           (rule "add_zero_right" (formula "4") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                           (rule "mul_literals" (formula "4") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "3"))
                           (rule "qeq_literals" (formula "4") (term "0"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "closeFalse" (formula "4"))
                        )
                     )
                  )
                  (branch "CUT: array2seq(heapAfter_splidAndCheck, self.unsigned@heapAfter_splidAndCheck) = array2seq(heap, self.unsigned) FALSE"
                     (rule "equalityToSeqGetAndSeqLenRight" (formula "22") (inst "iv=iv") (userinteraction))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "1") (ifseqformula "16"))
                     (rule "eqSymm" (formula "19"))
                     (rule "eqSymm" (formula "13"))
                     (rule "eqSymm" (formula "27"))
                     (rule "eqSymm" (formula "7") (term "1,0"))
                     (rule "eqSymm" (formula "9"))
                     (rule "eqSymm" (formula "10"))
                     (rule "eqSymm" (formula "11"))
                     (rule "eqSymm" (formula "12"))
                     (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "26"))
                     (builtin "One Step Simplification" (formula "4"))
                     (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "24"))
                     (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "23")))
                     (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1"))
                     (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "12"))
                     (rule "applyEq" (formula "9") (term "1") (ifseqformula "13"))
                     (rule "applyEq" (formula "10") (term "1,1,0") (ifseqformula "13"))
                     (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "11"))
                     (rule "applyEq" (formula "7") (term "0,1,0,0,1,0,0") (ifseqformula "11"))
                     (rule "applyEq" (formula "12") (term "1") (ifseqformula "11"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,1"))
                     (rule "mul_literals" (formula "22") (term "0,1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
                     (rule "array2seqDef" (formula "22") (term "0,1,0") (inst "u=u"))
                     (rule "eqSymm" (formula "22") (term "0"))
                     (rule "lenOfSeqDef" (formula "22") (term "0,0"))
                     (rule "polySimp_elimSub" (formula "22") (term "1,0,0"))
                     (rule "times_zero_2" (formula "22") (term "1,1,0,0"))
                     (rule "add_zero_right" (formula "22") (term "1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,0"))
                     (rule "add_zero_right" (formula "22") (term "0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "22") (term "0,0,0,0"))
                     (rule "array2seqDef" (formula "22") (term "0,1,1,0,1") (inst "u=u"))
                     (rule "eqSymm" (formula "22") (term "1,0,1"))
                     (rule "getOfSeqDef" (formula "22") (term "0,1,0,1"))
                     (rule "castDel" (formula "22") (term "1,0,1,0,1"))
                     (rule "castDel" (formula "22") (term "2,0,1,0,1"))
                     (rule "add_zero_right" (formula "22") (term "0,2,1,0,1,0,1"))
                     (rule "polySimp_elimSub" (formula "22") (term "1,1,0,0,1,0,1"))
                     (rule "times_zero_2" (formula "22") (term "1,1,1,0,0,1,0,1"))
                     (rule "add_zero_right" (formula "22") (term "1,1,0,0,1,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,1,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,1,0,1"))
                     (rule "mul_literals" (formula "22") (term "0,1,1,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,1,0,1"))
                     (rule "nonNull" (formula "21") (inst "i=i"))
                     (rule "greater_literals" (formula "21") (term "0,1"))
                     (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "24")))
                     (rule "sub_literals" (formula "21") (term "2,1,0"))
                     (builtin "One Step Simplification" (formula "21"))
                     (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                     (rule "array2seqDef" (formula "13") (term "0") (inst "u=u"))
                     (rule "array2seqDef" (formula "13") (term "1") (inst "u=u"))
                     (rule "narrowSelectArrayType" (formula "13") (term "2,1") (ifseqformula "1") (ifseqformula "26"))
                     (rule "array2seqDef" (formula "27") (term "1,1,0") (inst "u=u"))
                     (rule "array2seqDef" (formula "27") (term "0,1,0") (inst "u=u"))
                     (rule "array2seqDef" (formula "27") (term "0,0") (inst "u=u"))
                     (rule "array2seqDef" (formula "27") (term "1") (inst "u=u"))
                     (rule "eqSymm" (formula "27"))
                     (rule "array2seqDef" (formula "7") (term "0,0,0,1,0") (inst "u=u"))
                     (rule "array2seqDef" (formula "7") (term "1,1,0") (inst "u=u"))
                     (rule "eqSymm" (formula "7") (term "1,0"))
                     (rule "array2seqDef" (formula "10") (term "0,1,0") (inst "u=u"))
                     (rule "array2seqDef" (formula "10") (term "1") (inst "u=u"))
                     (rule "eqSymm" (formula "10"))
                     (rule "array2seqDef" (formula "9") (term "1") (inst "u=u"))
                     (rule "eqSymm" (formula "9"))
                     (rule "narrowSelectArrayType" (formula "9") (term "2,0") (ifseqformula "1") (ifseqformula "26"))
                     (rule "applyEq" (formula "13") (term "1") (ifseqformula "9"))
                     (rule "array2seqDef" (formula "22") (term "0,1,1,1,0,0,1") (inst "u=u"))
                     (rule "lenOfSeqDef" (formula "22") (term "1,1,1,0,0,1"))
                     (rule "polySimp_elimSub" (formula "22") (term "1,1,1,1,0,0,1"))
                     (rule "times_zero_2" (formula "22") (term "1,1,1,1,1,0,0,1"))
                     (rule "add_zero_right" (formula "22") (term "1,1,1,1,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "22") (term "0,1,1,1,0,0,1"))
                     (rule "add_zero_right" (formula "22") (term "0,0,1,1,1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,1,1,0,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,1,1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "22") (term "0,0,1,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "22") (term "0,0,1,1,1,0,0,1"))
                     (rule "array2seqDef" (formula "22") (term "0,1,0") (inst "u=u"))
                     (rule "eqSymm" (formula "22") (term "0"))
                     (rule "lenOfSeqDef" (formula "22") (term "0,0"))
                     (rule "polySimp_elimSub" (formula "22") (term "1,0,0"))
                     (rule "times_zero_2" (formula "22") (term "1,1,0,0"))
                     (rule "add_zero_right" (formula "22") (term "1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,0"))
                     (rule "add_zero_right" (formula "22") (term "0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "22") (term "0,0,0,0"))
                     (rule "array2seqDef" (formula "22") (term "0,1,1,0,1") (inst "u=u"))
                     (rule "eqSymm" (formula "22") (term "1,0,1"))
                     (rule "getOfSeqDef" (formula "22") (term "0,1,0,1"))
                     (rule "castDel" (formula "22") (term "2,0,1,0,1"))
                     (rule "castDel" (formula "22") (term "1,0,1,0,1"))
                     (rule "add_zero_right" (formula "22") (term "0,2,1,0,1,0,1"))
                     (rule "polySimp_elimSub" (formula "22") (term "1,1,0,0,1,0,1"))
                     (rule "times_zero_2" (formula "22") (term "1,1,1,0,0,1,0,1"))
                     (rule "add_zero_right" (formula "22") (term "1,1,0,0,1,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,1,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,1,0,1"))
                     (rule "mul_literals" (formula "22") (term "0,1,1,0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,1,0,1"))
                     (rule "equalityToSeqGetAndSeqLenRight" (formula "27") (inst "iv=iv"))
                     (rule "getOfSeqDef" (formula "27") (term "0,1,0,1"))
                     (rule "castDel" (formula "27") (term "1,0,1,0,1"))
                     (rule "castDel" (formula "27") (term "2,0,1,0,1"))
                     (rule "add_zero_right" (formula "27") (term "0,2,1,0,1,0,1"))
                     (rule "eqSymm" (formula "27") (term "1,0,1"))
                     (rule "polySimp_elimSub" (formula "27") (term "1,1,0,1,1,0,1"))
                     (rule "mul_literals" (formula "27") (term "1,1,1,0,1,1,0,1"))
                     (rule "add_zero_right" (formula "27") (term "1,1,0,1,1,0,1"))
                     (rule "lenOfSeqDef" (formula "27") (term "0,0"))
                     (rule "eqSymm" (formula "27") (term "0"))
                     (rule "polySimp_elimSub" (formula "27") (term "1,1,0"))
                     (rule "times_zero_2" (formula "27") (term "1,1,1,0"))
                     (rule "add_zero_right" (formula "27") (term "1,1,0"))
                     (rule "lenOfSeqDef" (formula "27") (term "1,1,0,0,1"))
                     (rule "polySimp_elimSub" (formula "27") (term "1,1,1,0,0,1"))
                     (rule "times_zero_2" (formula "27") (term "1,1,1,1,0,0,1"))
                     (rule "add_zero_right" (formula "27") (term "1,1,1,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,1,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,1,1,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "27") (term "0,1,0"))
                     (rule "add_zero_right" (formula "27") (term "0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "27") (term "0,1,1,0,0,1"))
                     (rule "add_zero_right" (formula "27") (term "0,0,1,1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,1,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,1,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,1,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,1,1,0,1"))
                     (rule "polySimp_rightDist" (formula "27") (term "1,1,0,1,1,0,1"))
                     (rule "mul_literals" (formula "27") (term "0,1,1,0,1,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,1,1,0,1"))
                     (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,1,1,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "27") (term "0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1"))
                     (rule "mul_literals" (formula "27") (term "0,1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,1,1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "0,0,1,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "27") (term "0,0,1,1,1,0,0,1"))
                     (rule "array2seqDef" (formula "7") (term "1,0,1,1,0") (inst "u=u"))
                     (rule "array2seqDef" (formula "10") (term "0,1") (inst "u=u"))
                     (rule "eqSymm" (formula "10"))
                     (rule "pullOutSelect" (formula "19") (term "1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_12"))
                     (rule "simplifySelectOfAnonEQ" (formula "19") (ifseqformula "16"))
                     (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "26")) (ifInst ""  (formula "2")))
                     (rule "applyEqReverse" (formula "20") (term "1,0") (ifseqformula "19"))
                     (rule "hideAuxiliaryEq" (formula "19"))
                     (rule "eqSeqDef2" (formula "13") (inst "iv=iv") (ifseqformula "9"))
                     (rule "andLeft" (formula "13"))
                     (rule "lenOfSeqDef" (formula "13") (term "0"))
                     (rule "eqSymm" (formula "13"))
                     (rule "polySimp_elimSub" (formula "13") (term "1,1"))
                     (rule "times_zero_2" (formula "13") (term "1,1,1"))
                     (rule "add_zero_right" (formula "13") (term "1,1"))
                     (rule "lenOfSeqDef" (formula "14") (term "1,1,0,0"))
                     (rule "polySimp_elimSub" (formula "14") (term "1,1,1,0,0"))
                     (rule "times_zero_2" (formula "14") (term "1,1,1,1,0,0"))
                     (rule "add_zero_right" (formula "14") (term "1,1,1,0,0"))
                     (rule "getOfSeqDef" (formula "14") (term "0,1,0"))
                     (rule "castDel" (formula "14") (term "1,0,1,0"))
                     (rule "castDel" (formula "14") (term "2,0,1,0"))
                     (rule "add_zero_right" (formula "14") (term "0,2,1,0,1,0"))
                     (rule "eqSymm" (formula "14") (term "1,0"))
                     (rule "polySimp_elimSub" (formula "14") (term "1,1,0,1,1,0"))
                     (rule "times_zero_2" (formula "14") (term "1,1,1,0,1,1,0"))
                     (rule "add_zero_right" (formula "14") (term "1,1,0,1,1,0"))
                     (rule "lenOfSeqDef" (formula "13") (term "0"))
                     (rule "eqSymm" (formula "13"))
                     (rule "polySimp_elimSub" (formula "13") (term "1,1"))
                     (rule "times_zero_2" (formula "13") (term "1,1,1"))
                     (rule "add_zero_right" (formula "13") (term "1,1"))
                     (rule "getOfSeqDef" (formula "14") (term "0,1,0"))
                     (rule "castDel" (formula "14") (term "2,0,1,0"))
                     (rule "castDel" (formula "14") (term "1,0,1,0"))
                     (rule "add_zero_right" (formula "14") (term "0,2,1,0,1,0"))
                     (rule "eqSymm" (formula "14") (term "1,0"))
                     (rule "polySimp_elimSub" (formula "14") (term "1,1,0,1,1,0"))
                     (rule "times_zero_2" (formula "14") (term "1,1,1,0,1,1,0"))
                     (rule "add_zero_right" (formula "14") (term "1,1,0,1,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "14") (term "0,1,1,0,0"))
                     (rule "add_zero_right" (formula "14") (term "0,0,1,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1"))
                     (rule "add_zero_right" (formula "13") (term "0,0,1"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0"))
                     (rule "add_zero_right" (formula "13") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0"))
                     (rule "eqSymm" (formula "14") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,1,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0"))
                     (rule "eqSymm" (formula "14") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,1,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,1,1,0"))
                     (rule "applyEq" (formula "14") (term "0,1,0,0,1,0,0") (ifseqformula "13"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "0,0,1"))
                     (rule "polySimp_elimOne" (formula "13") (term "0,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0"))
                     (rule "polySimp_elimOne" (formula "13") (term "0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0"))
                     (rule "eqSymm" (formula "14") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,1,1,0"))
                     (rule "polySimp_rightDist" (formula "14") (term "1,1,0,1,1,0"))
                     (rule "mul_literals" (formula "14") (term "0,1,1,0,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,1,1,0"))
                     (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,1,1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0,1,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,1,0,0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "14") (term "0,0,0,1,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0"))
                     (rule "eqSymm" (formula "14") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,1,1,0"))
                     (rule "polySimp_rightDist" (formula "14") (term "1,1,0,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,1,1,0"))
                     (rule "mul_literals" (formula "14") (term "0,1,1,0,1,1,0"))
                     (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,1,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                     (rule "array2seqDef" (formula "10") (term "1,1,0") (inst "u=u"))
                     (rule "narrowSelectArrayType" (formula "10") (term "2,1,1,0") (ifseqformula "1") (ifseqformula "27"))
                     (rule "applyEq" (formula "10") (term "1,1,0") (ifseqformula "9"))
                     (rule "eqSeqDef2" (formula "9") (inst "iv=iv") (ifseqformula "9"))
                     (builtin "One Step Simplification" (formula "9"))
                     (rule "true_left" (formula "9"))
                     (rule "pullOutSelect" (formula "22") (term "0,1,1,1,1,0,0,1") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_9"))
                     (rule "applyEq" (formula "28") (term "0,0,0,1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "28") (term "1,1,1,1,0,1") (ifseqformula "1"))
                     (rule "applyEq" (formula "23") (term "0,1,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "28") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "1"))
                     (rule "applyEq" (formula "23") (term "0,0,0,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "28") (term "0,1,1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "23") (term "0,0,0,1,1,1,0,0,1") (ifseqformula "1"))
                     (rule "applyEq" (formula "28") (term "0,1,1,1,1,0,0,1") (ifseqformula "1"))
                     (rule "applyEq" (formula "23") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                     (rule "applyEq" (formula "28") (term "0,0,0,1,1,1,0,0,1") (ifseqformula "1"))
                     (rule "applyEq" (formula "23") (term "1,1,0,1,0,1") (ifseqformula "1"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")) (ifInst ""  (formula "3")))
                     (rule "applyEqReverse" (formula "23") (term "0,1,1,1,1,0,0,1") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "28") (term "0,0,0,1,0") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "28") (term "1,1,1,1,0,1") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "23") (term "0,1,0,0") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "28") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "23") (term "0,0,0,0,0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "23"))
                     (rule "allRight" (formula "23") (inst "sk=iv_7"))
                     (rule "impRight" (formula "23"))
                     (rule "andLeft" (formula "1"))
                     (rule "applyEqReverse" (formula "30") (term "0,1,1,0") (ifseqformula "3"))
                     (rule "applyEqReverse" (formula "30") (term "0,1,1,1,1,0,0,1") (ifseqformula "3"))
                     (rule "applyEqReverse" (formula "30") (term "0,0,0,1,1,1,0,0,1") (ifseqformula "3"))
                     (rule "applyEqReverse" (formula "25") (term "1,1,0") (ifseqformula "3"))
                     (rule "applyEqReverse" (formula "25") (term "0,1,1,1,0,0") (ifseqformula "3"))
                     (rule "applyEqReverse" (formula "2") (term "0,0,0,1,1") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "replace_known_left" (formula "24") (term "0,0,1") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "1")))
                     (rule "inEqSimp_homoInEq0" (formula "2"))
                     (rule "polySimp_addComm1" (formula "2") (term "0"))
                     (rule "inEqSimp_homoInEq0" (formula "24") (term "0,1"))
                     (rule "polySimp_addComm1" (formula "24") (term "0,0,1"))
                     (rule "inEqSimp_homoInEq0" (formula "24") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "24") (term "0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1"))
                     (rule "mul_literals" (formula "2") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,1"))
                     (rule "polySimp_rightDist" (formula "24") (term "1,0,1"))
                     (rule "mul_literals" (formula "24") (term "0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,1"))
                     (rule "polySimp_elimOne" (formula "24") (term "1,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "24") (term "1,0,0"))
                     (rule "mul_literals" (formula "24") (term "0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                     (rule "pullOutSelect" (formula "29") (term "0,1,1,1,0,0,1,0,1") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_9"))
                     (rule "applyEq" (formula "30") (term "1,2,1,1,0,0,1,0,1") (ifseqformula "1"))
                     (rule "applyEq" (formula "30") (term "1,2,1,1,0,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "30") (term "0,1,1,1,0,0,0") (ifseqformula "1"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "28")) (ifInst ""  (formula "5")))
                     (rule "applyEqReverse" (formula "30") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "30") (term "1,2,1,1,0,0,1,0,1") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "30") (term "1,2,1,1,0,0,0") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "30") (term "0,1,1,1,0,0,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "pullOutSelect" (formula "29") (term "0,1,0,1,0,0,1,0,1") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_9"))
                     (rule "applyEq" (formula "30") (term "0,1,0,1,0,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "30") (term "1,2,0,1,0,0,1,0,1") (ifseqformula "1"))
                     (rule "applyEq" (formula "30") (term "1,2,0,1,0,0,0") (ifseqformula "1"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "28")) (ifInst ""  (formula "5")))
                     (rule "applyEqReverse" (formula "30") (term "0,1,0,1,0,0,1,0,1") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "30") (term "0,1,0,1,0,0,0") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "30") (term "1,2,0,1,0,0,1,0,1") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "30") (term "1,2,0,1,0,0,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "pullOutSelect" (formula "29") (term "0,1,0,0,0,1,0,1") (inst "selectSK=verif_selectvoting_system_core_Tag_BALLOTS_1"))
                     (rule "applyEq" (formula "30") (term "1,2,0,0,0,1,0,1") (ifseqformula "1"))
                     (rule "applyEq" (formula "30") (term "1,2,0,0,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "30") (term "0,1,0,0,0,0") (ifseqformula "1"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "applyEqReverse" (formula "30") (term "0,1,0,0,0,1,0,1") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "30") (term "1,2,0,0,0,1,0,1") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "30") (term "1,2,0,0,0,0") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "30") (term "0,1,0,0,0,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "eqSeqDef" (formula "11") (inst "iv=iv"))
                     (rule "andLeft" (formula "11"))
                     (rule "getOfSeqDef" (formula "12") (term "1,1,0"))
                     (rule "castDel" (formula "12") (term "2,1,1,0"))
                     (rule "castDel" (formula "12") (term "1,1,1,0"))
                     (rule "add_zero_right" (formula "12") (term "0,2,1,1,1,0"))
                     (rule "polySimp_elimSub" (formula "12") (term "1,1,0,1,1,0"))
                     (rule "times_zero_2" (formula "12") (term "1,1,1,0,1,1,0"))
                     (rule "add_zero_right" (formula "12") (term "1,1,0,1,1,0"))
                     (rule "lenOfSeqDef" (formula "11") (term "1"))
                     (rule "polySimp_elimSub" (formula "11") (term "1,1"))
                     (rule "times_zero_2" (formula "11") (term "1,1,1"))
                     (rule "add_zero_right" (formula "11") (term "1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                     (rule "polySimp_addComm1" (formula "12") (term "0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,1,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1"))
                     (rule "add_zero_right" (formula "11") (term "0,0,1"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,1,1,0"))
                     (rule "applyEq" (formula "12") (term "0,1,0,1,0,0") (ifseqformula "11"))
                     (rule "polySimp_addComm1" (formula "12") (term "0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,1,1,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,1,0,1,1,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,1,0,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,1,1,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,1,1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "0,0,1"))
                     (rule "polySimp_elimOne" (formula "11") (term "0,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0,1,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,1,0,0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "0,0,0,1,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                     (rule "pullOutSelect" (formula "25") (term "1,0") (inst "selectSK=arr_121"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "eqSymm" (formula "26"))
                     (rule "nnf_imp2or" (formula "25") (term "0"))
                     (rule "nnf_imp2or" (formula "10") (term "0"))
                     (rule "Contract_axiom_for_ghostFieldsNonNull_in_MixServer" (formula "9") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
                     (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "30")) (ifInst ""  (formula "4")))
                     (rule "eqSymm" (formula "9"))
                     (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1,0,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1,0,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1,0,0"))
                     (rule "applyEq" (formula "9") (term "1") (ifseqformula "10"))
                     (builtin "One Step Simplification" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "notLeft" (formula "10"))
                     (rule "andLeft" (formula "9"))
                     (rule "notLeft" (formula "10"))
                     (rule "andLeft" (formula "9"))
                     (rule "notLeft" (formula "10"))
                     (rule "andLeft" (formula "9"))
                     (rule "notLeft" (formula "9"))
                     (rule "notLeft" (formula "9"))
                     (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "33"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "ifthenelse_negated" (formula "1") (term "0"))
                     (rule "narrowSelectArrayType" (formula "20") (term "1,0,1,0") (ifseqformula "4") (ifseqformula "32"))
                     (rule "narrowSelectArrayType" (formula "16") (term "1,1,1,0") (ifseqformula "4") (ifseqformula "33"))
                     (rule "narrowSelectArrayType" (formula "34") (term "1,0") (ifseqformula "4") (ifseqformula "33"))
                     (rule "eqSymm" (formula "34"))
                     (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "22") (ifseqformula "33"))
                     (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "4") (ifseqformula "33"))
                     (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "18"))
                     (rule "applyEq" (formula "10") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                     (rule "Definition_axiom_for_ghostFieldsNonNull_in_verif_selectvoting_system_core_MixServer" (formula "12") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
                     (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "30")) (ifInst ""  (formula "29")) (ifInst ""  (formula "31")) (ifInst ""  (formula "32")) (ifInst ""  (formula "33")))
                     (rule "andLeft" (formula "12"))
                     (rule "andLeft" (formula "12"))
                     (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                     (rule "applyEq" (formula "14") (term "0,1,0,0,1,0,0") (ifseqformula "20"))
                     (rule "applyEq" (formula "13") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                     (rule "nnf_imp2or" (formula "38") (term "0,1"))
                     (rule "nnf_notAnd" (formula "27") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                     (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "27") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                     (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "12") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                     (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                     (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                     (rule "nnf_imp2or" (formula "19") (term "0"))
                     (rule "nnf_imp2or" (formula "15") (term "0"))
                     (rule "nnf_imp2or" (formula "9") (term "0"))
                     (rule "nnf_imp2or" (formula "11") (term "0"))
                     (rule "nnf_imp2or" (formula "10") (term "0"))
                     (rule "nnf_notAnd" (formula "38") (term "0,0,1"))
                     (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,1"))
                     (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,1"))
                     (rule "add_literals" (formula "38") (term "0,0,0,1,0,0,1"))
                     (rule "add_zero_left" (formula "38") (term "0,0,1,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0,1"))
                     (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0,1"))
                     (rule "times_zero_1" (formula "38") (term "1,0,0,0,0,0,1"))
                     (rule "add_literals" (formula "38") (term "0,0,0,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0,1"))
                     (rule "mul_literals" (formula "38") (term "1,0,0,0,1"))
                     (rule "nnf_notAnd" (formula "19") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
                     (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                     (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "15") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                     (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                     (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "9") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
                     (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                     (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "11") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                     (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "10") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
                     (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                     (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
                     (rule "arrayLengthNotNegative" (formula "16") (term "0"))
                     (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
                     (rule "arrayLengthIsAShort" (formula "17") (term "1"))
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "true_left" (formula "17"))
                     (rule "arrayLengthNotNegative" (formula "17") (term "1"))
                     (rule "arrayLengthIsAShort" (formula "17") (term "0"))
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "true_left" (formula "17"))
                     (rule "arrayLengthIsAShort" (formula "18") (term "0"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "true_left" (formula "18"))
                     (rule "arrayLengthNotNegative" (formula "18") (term "0"))
                     (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                     (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "21") (ifseqformula "6"))
                     (rule "andLeft" (formula "21"))
                     (rule "notLeft" (formula "22"))
                     (rule "andLeft" (formula "21"))
                     (rule "notLeft" (formula "22"))
                     (rule "andLeft" (formula "21"))
                     (rule "notLeft" (formula "22"))
                     (rule "andLeft" (formula "21"))
                     (rule "notLeft" (formula "22"))
                     (rule "andLeft" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "notLeft" (formula "21"))
                     (rule "notLeft" (formula "21"))
                     (rule "narrowSelectArrayType" (formula "14") (term "2,0,1,0,0") (ifseqformula "4") (ifseqformula "34"))
                     (rule "narrowSelectArrayType" (formula "15") (term "2,0,1,0,0,1,0") (ifseqformula "4") (ifseqformula "34"))
                     (rule "narrowSelectArrayType" (formula "12") (term "2,0,0,1,1,0") (ifseqformula "4") (ifseqformula "34"))
                     (rule "nonNull" (formula "23") (inst "i=i"))
                     (rule "greater_literals" (formula "23") (term "0,1"))
                     (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "36")))
                     (rule "sub_literals" (formula "23") (term "2,1,0"))
                     (builtin "One Step Simplification" (formula "23"))
                     (rule "narrowSelectArrayType" (formula "23") (term "0,0,1,0") (ifseqformula "4") (ifseqformula "36"))
                     (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                     (rule "nonNull" (formula "22") (inst "i=i"))
                     (rule "greater_literals" (formula "22") (term "0,1"))
                     (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "35")))
                     (rule "sub_literals" (formula "22") (term "2,1,0"))
                     (builtin "One Step Simplification" (formula "22"))
                     (rule "narrowSelectArrayType" (formula "22") (term "0,0,1,0") (ifseqformula "4") (ifseqformula "35"))
                     (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                     (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                     (rule "nonNull" (formula "21") (inst "i=i"))
                     (rule "sub_literals" (formula "21") (term "2,1,0,1,1"))
                     (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "37")))
                     (rule "greater_literals" (formula "21") (term "0"))
                     (builtin "One Step Simplification" (formula "21"))
                     (rule "narrowSelectArrayType" (formula "21") (term "0,0,1,0") (ifseqformula "4") (ifseqformula "37"))
                     (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                     (rule "applyEq" (formula "21") (term "0,1,0,0,1,0,0") (ifseqformula "18"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                     (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "29") (ifseqformula "6"))
                     (rule "replaceKnownSelect_taclet1100020_6" (formula "29") (term "0,0,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet1100020_7" (formula "29") (term "0,0,1"))
                     (rule "replaceKnownSelect_taclet1100020_0" (formula "29") (term "1,1,0,0,0,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet1100020_1" (formula "29") (term "1,1,0,0,0,0,0,0"))
                     (rule "replaceKnownSelect_taclet1100020_4" (formula "29") (term "0,0,1,0,0,0,0,0,0,0"))
                     (rule "replaceKnownSelect_taclet1100020_2" (formula "29") (term "0,0,0,0,0,0,0,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet1100020_5" (formula "29") (term "0,0,1,0,0,0,0,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet1100020_3" (formula "29") (term "0,0,0,0,0,0,0,0,0,0"))
                     (rule "andLeft" (formula "29"))
                     (rule "notLeft" (formula "30"))
                     (rule "andLeft" (formula "29"))
                     (rule "notLeft" (formula "30"))
                     (rule "andLeft" (formula "29"))
                     (rule "notLeft" (formula "30"))
                     (rule "andLeft" (formula "29"))
                     (rule "andLeft" (formula "29"))
                     (rule "notLeft" (formula "31"))
                     (rule "andLeft" (formula "29"))
                     (rule "andLeft" (formula "29"))
                     (rule "andLeft" (formula "29"))
                     (rule "notLeft" (formula "29"))
                     (rule "notLeft" (formula "29"))
                     (rule "nonNull" (formula "31") (inst "i=i"))
                     (rule "greater_literals" (formula "31") (term "0,1"))
                     (builtin "One Step Simplification" (formula "31"))
                     (rule "sub_literals" (formula "31") (term "2,1,0,1"))
                     (builtin "One Step Simplification" (formula "31"))
                     (rule "andLeft" (formula "31"))
                     (rule "notLeft" (formula "31"))
                     (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "31") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0"))
                     (rule "nonNull" (formula "30") (inst "i=i"))
                     (rule "sub_literals" (formula "30") (term "2,1,0,1,1"))
                     (builtin "One Step Simplification" (formula "30"))
                     (rule "greater_literals" (formula "30") (term "0,1"))
                     (builtin "One Step Simplification" (formula "30"))
                     (rule "andLeft" (formula "30"))
                     (rule "notLeft" (formula "30"))
                     (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "30") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0"))
                     (rule "nonNull" (formula "29") (inst "i=i"))
                     (rule "sub_literals" (formula "29") (term "2,1,0,1,1"))
                     (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "44")))
                     (rule "greater_literals" (formula "29") (term "0"))
                     (builtin "One Step Simplification" (formula "29"))
                     (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
                     (rule "applyEq" (formula "29") (term "0,1,0,0,1,0,0") (ifseqformula "18"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "29") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
                     (rule "pullOutSelect" (formula "37") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_9"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "51")) (ifInst ""  (formula "6")))
                     (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "pullOutSelect" (formula "36") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_9"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "50")) (ifInst ""  (formula "6")))
                     (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_9"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")) (ifInst ""  (formula "6")))
                     (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "pullOutSelect" (formula "31") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_10"))
                     (rule "applyEq" (formula "32") (term "0,1,1,1,0,0") (ifseqformula "31"))
                     (rule "applyEq" (formula "35") (term "0") (ifseqformula "31"))
                     (rule "simplifySelectOfAnonEQ" (formula "31") (ifseqformula "25"))
                     (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "48")) (ifInst ""  (formula "5")))
                     (rule "applyEqReverse" (formula "32") (term "0,1,1,1,0,0") (ifseqformula "31"))
                     (rule "applyEqReverse" (formula "32") (term "1,0,0,1,0") (ifseqformula "31"))
                     (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "31"))
                     (rule "hideAuxiliaryEq" (formula "31"))
                     (rule "pullOutSelect" (formula "30") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_11"))
                     (rule "applyEq" (formula "31") (term "0,1,1,1,0,0") (ifseqformula "30"))
                     (rule "applyEq" (formula "34") (term "0") (ifseqformula "30"))
                     (rule "simplifySelectOfAnonEQ" (formula "30") (ifseqformula "25"))
                     (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "47")) (ifInst ""  (formula "5")))
                     (rule "applyEqReverse" (formula "31") (term "0,1,1,1,0,0") (ifseqformula "30"))
                     (rule "applyEqReverse" (formula "31") (term "1,0,0,1,0") (ifseqformula "30"))
                     (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "30"))
                     (rule "hideAuxiliaryEq" (formula "30"))
                     (rule "applyEq" (formula "30") (term "1,1,1,0,0") (ifseqformula "17"))
                     (rule "nnf_imp2or" (formula "23") (term "0"))
                     (rule "nnf_imp2or" (formula "22") (term "0"))
                     (rule "nnf_imp2or" (formula "21") (term "0"))
                     (rule "ifthenelse_split" (formula "19") (term "1"))
                     (branch "msg.length ≥ 1 TRUE"
                        (rule "replace_known_left" (formula "21") (term "0,1,1,0,0") (ifseqformula "19"))
                        (builtin "One Step Simplification" (formula "21"))
                        (rule "ifthenelse_split" (formula "20") (term "0"))
                        (branch "self.concatenated.length ≥ 1 TRUE"
                           (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                           (rule "applyEq" (formula "21") (term "1,1,1,0,0,1,0") (ifseqformula "20"))
                           (rule "applyEq" (formula "48") (term "1,1,1,0,0,0") (ifseqformula "20"))
                           (rule "applyEq" (formula "48") (term "1,1,1,0,0,1,0,1") (ifseqformula "20"))
                           (rule "equalityToSeqGetAndSeqLenLeft" (formula "29") (inst "iv=iv"))
                           (rule "andLeft" (formula "29"))
                           (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0"))
                           (rule "applyEq" (formula "30") (term "0,0,1,0") (ifseqformula "31"))
                           (builtin "One Step Simplification" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "applyEq" (formula "29") (term "0,0") (ifseqformula "30"))
                           (builtin "One Step Simplification" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "nnf_imp2or" (formula "30") (term "0"))
                           (rule "commute_or_2" (formula "33") (term "0"))
                           (rule "nnf_imp2or" (formula "32") (term "0"))
                           (rule "nnf_imp2or" (formula "31") (term "0"))
                           (rule "ifthenelse_split" (formula "3") (term "0"))
                           (branch "self.unsigned.length ≥ 1 TRUE"
                              (rule "replace_known_left" (formula "15") (term "0,1") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "15"))
                              (rule "replace_known_left" (formula "44") (term "0,0") (ifseqformula "4"))
                              (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "4")))
                              (rule "replace_known_left" (formula "16") (term "0,1,1,0,0") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "replace_known_left" (formula "49") (term "0,1,0") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "3")))
                              (rule "nnf_notAnd" (formula "25") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "25") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                              (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "24") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                              (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "24") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                              (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "23") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                              (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "23") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                              (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "28") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
                              (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "28") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                              (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "30") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "30") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0"))
                              (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "30") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
                              (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "29") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "29") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0"))
                              (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "29") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0"))
                              (rule "mul_literals" (formula "29") (term "1,0,0,0"))
                              (rule "commute_or_2" (formula "10") (term "0"))
                              (rule "commute_or_2" (formula "12") (term "0"))
                              (rule "commute_or_2" (formula "11") (term "0"))
                              (rule "commute_or_2" (formula "13") (term "0"))
                              (rule "ifthenelse_split" (formula "1") (term "0"))
                              (branch "self.unsigned.<created> = TRUE TRUE"
                                 (rule "applyEqReverse" (formula "42") (term "0") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "42"))
                                 (rule "closeTrue" (formula "42"))
                              )
                              (branch "self.unsigned.<created> = TRUE FALSE"
                                 (rule "referencedObjectIsCreatedRight" (formula "32") (ifseqformula "41"))
                                 (rule "close" (formula "32") (ifseqformula "5"))
                              )
                           )
                           (branch "self.unsigned.length ≥ 1 FALSE"
                              (rule "replace_known_right" (formula "15") (term "0,1,1,0,0") (ifseqformula "34"))
                              (builtin "One Step Simplification" (formula "15"))
                              (rule "replace_known_right" (formula "14") (term "0,1") (ifseqformula "34"))
                              (builtin "One Step Simplification" (formula "14"))
                              (rule "replace_known_right" (formula "49") (term "0,1,1,0,0,1") (ifseqformula "34"))
                              (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "34")))
                              (rule "inEqSimp_geqRight" (formula "34"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "4"))
                              (rule "mul_literals" (formula "4") (term "1,0"))
                              (rule "add_zero_right" (formula "4") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                              (rule "mul_literals" (formula "4") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "3"))
                              (rule "qeq_literals" (formula "4") (term "0"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "closeFalse" (formula "4"))
                           )
                        )
                        (branch "self.concatenated.length ≥ 1 FALSE"
                           (rule "eqSymm" (formula "20"))
                           (rule "inEqSimp_geqRight" (formula "34"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                           (rule "qeq_literals" (formula "20"))
                           (rule "closeFalse" (formula "20"))
                        )
                     )
                     (branch "msg.length ≥ 1 FALSE"
                        (builtin "One Step Simplification" (formula "19"))
                        (rule "replace_known_right" (formula "20") (term "0,1,1,0,0") (ifseqformula "33"))
                        (builtin "One Step Simplification" (formula "20"))
                        (rule "inEqSimp_geqRight" (formula "33"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_notGeq" (formula "20") (term "0"))
                        (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                        (rule "add_literals" (formula "20") (term "0,0,0"))
                        (rule "add_zero_left" (formula "20") (term "0,0"))
                        (rule "inEqSimp_or_tautInEq0" (formula "21") (term "0,0"))
                        (rule "add_zero_right" (formula "21") (term "1,1,0,0"))
                        (rule "qeq_literals" (formula "21") (term "1,0,0"))
                        (builtin "One Step Simplification" (formula "21"))
                        (rule "true_left" (formula "21"))
                        (rule "equalityToSeqGetAndSeqLenLeft" (formula "28") (inst "iv=iv"))
                        (rule "andLeft" (formula "28"))
                        (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
                        (rule "applyEq" (formula "29") (term "0,0,1,0,0,1,0,0") (ifseqformula "30"))
                        (rule "applyEq" (formula "29") (term "0,0,1,0") (ifseqformula "30"))
                        (builtin "One Step Simplification" (formula "29"))
                        (rule "true_left" (formula "29"))
                        (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "29"))
                        (builtin "One Step Simplification" (formula "28"))
                        (rule "true_left" (formula "28"))
                        (rule "nnf_imp2or" (formula "29") (term "0"))
                        (rule "commute_or_2" (formula "32") (term "0"))
                        (rule "nnf_imp2or" (formula "31") (term "0"))
                        (rule "nnf_imp2or" (formula "30") (term "0"))
                        (rule "ifthenelse_split" (formula "4") (term "0"))
                        (branch "self.unsigned.length ≥ 1 TRUE"
                           (rule "replace_known_left" (formula "43") (term "0,0") (ifseqformula "5"))
                           (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "5")))
                           (rule "replace_known_left" (formula "17") (term "0,1,1,0,0") (ifseqformula "4"))
                           (builtin "One Step Simplification" (formula "17"))
                           (rule "replace_known_left" (formula "16") (term "0,1") (ifseqformula "4"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "replace_known_left" (formula "48") (term "0,1,1,0,0,1") (ifseqformula "4"))
                           (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "4")))
                           (rule "nnf_notAnd" (formula "24") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                           (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "24") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                           (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "23") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                           (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "23") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                           (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "22") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
                           (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "22") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                           (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "27") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                           (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "27") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                           (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "29") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "29") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0"))
                           (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "29") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0"))
                           (rule "mul_literals" (formula "29") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "28") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
                           (rule "mul_literals" (formula "28") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "28") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                           (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                           (rule "commute_or_2" (formula "11") (term "0"))
                           (rule "commute_or_2" (formula "13") (term "0"))
                           (rule "commute_or_2" (formula "12") (term "0"))
                           (rule "commute_or_2" (formula "14") (term "0"))
                           (rule "ifthenelse_split" (formula "2") (term "0"))
                           (branch "self.unsigned.<created> = TRUE TRUE"
                              (rule "applyEqReverse" (formula "41") (term "0") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "41"))
                              (rule "closeTrue" (formula "41"))
                           )
                           (branch "self.unsigned.<created> = TRUE FALSE"
                              (rule "referencedObjectIsCreatedRight" (formula "31") (ifseqformula "40"))
                              (rule "close" (formula "31") (ifseqformula "6"))
                           )
                        )
                        (branch "self.unsigned.length ≥ 1 FALSE"
                           (rule "replace_known_right" (formula "15") (term "0,1") (ifseqformula "33"))
                           (builtin "One Step Simplification" (formula "15"))
                           (rule "replace_known_right" (formula "16") (term "0,1,1,0,0") (ifseqformula "33"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "replace_known_right" (formula "48") (term "0,1,1,0,0,1") (ifseqformula "33"))
                           (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "33")))
                           (rule "inEqSimp_geqRight" (formula "33"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "5"))
                           (rule "times_zero_2" (formula "5") (term "1,0"))
                           (rule "add_zero_right" (formula "5") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                           (rule "mul_literals" (formula "5") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "4"))
                           (rule "qeq_literals" (formula "5") (term "0"))
                           (builtin "One Step Simplification" (formula "5"))
                           (rule "closeFalse" (formula "5"))
                        )
                     )
                  )
               )
            )
            (branch "Case 2"
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "1") (ifseqformula "16"))
               (rule "eqSymm" (formula "19"))
               (rule "eqSymm" (formula "12"))
               (rule "eqSymm" (formula "11"))
               (rule "eqSymm" (formula "26"))
               (rule "eqSymm" (formula "10"))
               (rule "eqSymm" (formula "13"))
               (rule "eqSymm" (formula "9"))
               (rule "eqSymm" (formula "7") (term "1,0"))
               (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "25"))
               (builtin "One Step Simplification" (formula "4"))
               (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "23"))
               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "22")))
               (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
               (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "12"))
               (rule "applyEq" (formula "9") (term "1") (ifseqformula "13"))
               (rule "applyEq" (formula "10") (term "1,1,0") (ifseqformula "13"))
               (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "11"))
               (rule "applyEq" (formula "12") (term "1") (ifseqformula "11"))
               (rule "applyEq" (formula "7") (term "0,1,0,0,1,0,0") (ifseqformula "11"))
               (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
               (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
               (rule "nonNull" (formula "21") (inst "i=i"))
               (rule "greater_literals" (formula "21") (term "0,1"))
               (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "23")))
               (rule "sub_literals" (formula "21") (term "2,1,0"))
               (builtin "One Step Simplification" (formula "21"))
               (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
               (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
               (rule "array2seqDef" (formula "10") (term "0,1,0") (inst "u=u"))
               (rule "array2seqDef" (formula "10") (term "1") (inst "u=u"))
               (rule "eqSymm" (formula "10"))
               (rule "array2seqDef" (formula "13") (term "0") (inst "u=u"))
               (rule "array2seqDef" (formula "13") (term "1") (inst "u=u"))
               (rule "narrowSelectArrayType" (formula "13") (term "2,1") (ifseqformula "1") (ifseqformula "25"))
               (rule "array2seqDef" (formula "7") (term "0,0,0,1,0") (inst "u=u"))
               (rule "array2seqDef" (formula "7") (term "1,1,0") (inst "u=u"))
               (rule "eqSymm" (formula "7") (term "1,0"))
               (rule "array2seqDef" (formula "9") (term "1") (inst "u=u"))
               (rule "eqSymm" (formula "9"))
               (rule "narrowSelectArrayType" (formula "9") (term "2,0") (ifseqformula "1") (ifseqformula "25"))
               (rule "applyEq" (formula "13") (term "1") (ifseqformula "9"))
               (rule "array2seqDef" (formula "10") (term "1,1,1") (inst "u=u"))
               (rule "narrowSelectArrayType" (formula "10") (term "2,1,1,1") (ifseqformula "1") (ifseqformula "25"))
               (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "9"))
               (rule "array2seqDef" (formula "10") (term "0,1") (inst "u=u"))
               (rule "eqSymm" (formula "10"))
               (rule "array2seqDef" (formula "7") (term "1,0,1,1,0") (inst "u=u"))
               (rule "eqSeqDef" (formula "10") (inst "iv=iv"))
               (rule "andLeft" (formula "10"))
               (rule "lenOfSeqDef" (formula "10") (term "1"))
               (rule "polySimp_elimSub" (formula "10") (term "1,1"))
               (rule "times_zero_2" (formula "10") (term "1,1,1"))
               (rule "add_zero_right" (formula "10") (term "1,1"))
               (rule "getOfSeqDef" (formula "11") (term "1,1,0"))
               (rule "castDel" (formula "11") (term "1,1,1,0"))
               (rule "castDel" (formula "11") (term "2,1,1,0"))
               (rule "add_zero_right" (formula "11") (term "0,2,1,1,1,0"))
               (rule "polySimp_elimSub" (formula "11") (term "1,1,0,1,1,0"))
               (rule "mul_literals" (formula "11") (term "1,1,1,0,1,1,0"))
               (rule "add_zero_right" (formula "11") (term "1,1,0,1,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "11") (term "0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1"))
               (rule "add_zero_right" (formula "10") (term "0,0,1"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,1,1,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,1,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,1,1,0"))
               (rule "applyEq" (formula "11") (term "0,1,0,1,0,0") (ifseqformula "10"))
               (rule "polySimp_addComm1" (formula "11") (term "0,1,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "10") (term "0,0,1"))
               (rule "polySimp_elimOne" (formula "10") (term "0,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,1,1,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,1,1,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,1,0,1,1,0"))
               (rule "mul_literals" (formula "11") (term "0,1,1,0,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,1,1,0"))
               (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,1,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,0,1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,1,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "11") (term "0,0,0,1,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
               (rule "eqSeqDef2" (formula "14") (inst "iv=iv") (ifseqformula "14"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "true_left" (formula "14"))
               (rule "eqSeqDef2" (formula "9") (inst "iv=iv") (ifseqformula "9"))
               (builtin "One Step Simplification" (formula "9"))
               (rule "true_left" (formula "9"))
               (rule "pullOutSelect" (formula "18") (term "1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_10"))
               (rule "simplifySelectOfAnonEQ" (formula "18") (ifseqformula "15"))
               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "24")) (ifInst ""  (formula "2")))
               (rule "applyEqReverse" (formula "19") (term "1,0") (ifseqformula "18"))
               (rule "hideAuxiliaryEq" (formula "18"))
               (rule "pullOutSelect" (formula "25") (term "0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_9"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")) (ifInst ""  (formula "3")))
               (rule "applyEqReverse" (formula "26") (term "0,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "eqSymm" (formula "25"))
               (rule "applyEq" (formula "25") (term "1") (ifseqformula "11"))
               (rule "pullOutSelect" (formula "25") (term "0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_9"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")) (ifInst ""  (formula "3")))
               (rule "applyEqReverse" (formula "26") (term "0,0") (ifseqformula "1"))
               (builtin "One Step Simplification" (formula "26"))
               (rule "closeTrue" (formula "26"))
            )
         )
         (branch "Case 2"
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "1") (ifseqformula "16"))
            (rule "eqSymm" (formula "19"))
            (rule "eqSymm" (formula "12"))
            (rule "eqSymm" (formula "11"))
            (rule "eqSymm" (formula "26"))
            (rule "eqSymm" (formula "10"))
            (rule "eqSymm" (formula "13"))
            (rule "eqSymm" (formula "9"))
            (rule "eqSymm" (formula "7") (term "1,0"))
            (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "25"))
            (builtin "One Step Simplification" (formula "4"))
            (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "23"))
            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "22")))
            (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
            (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "12"))
            (rule "applyEq" (formula "9") (term "1") (ifseqformula "13"))
            (rule "applyEq" (formula "10") (term "1,1,0") (ifseqformula "13"))
            (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "11"))
            (rule "applyEq" (formula "12") (term "1") (ifseqformula "11"))
            (rule "applyEq" (formula "7") (term "0,1,0,0,1,0,0") (ifseqformula "11"))
            (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
            (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
            (rule "nonNull" (formula "21") (inst "i=i"))
            (rule "greater_literals" (formula "21") (term "0,1"))
            (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "23")))
            (rule "sub_literals" (formula "21") (term "2,1,0"))
            (builtin "One Step Simplification" (formula "21"))
            (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
            (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
            (rule "array2seqDef" (formula "10") (term "0,1,0") (inst "u=u"))
            (rule "array2seqDef" (formula "10") (term "1") (inst "u=u"))
            (rule "eqSymm" (formula "10"))
            (rule "array2seqDef" (formula "13") (term "0") (inst "u=u"))
            (rule "array2seqDef" (formula "13") (term "1") (inst "u=u"))
            (rule "narrowSelectArrayType" (formula "13") (term "2,1") (ifseqformula "1") (ifseqformula "25"))
            (rule "array2seqDef" (formula "7") (term "0,0,0,1,0") (inst "u=u"))
            (rule "array2seqDef" (formula "7") (term "1,1,0") (inst "u=u"))
            (rule "eqSymm" (formula "7") (term "1,0"))
            (rule "array2seqDef" (formula "9") (term "1") (inst "u=u"))
            (rule "eqSymm" (formula "9"))
            (rule "narrowSelectArrayType" (formula "9") (term "2,0") (ifseqformula "1") (ifseqformula "25"))
            (rule "applyEq" (formula "13") (term "1") (ifseqformula "9"))
            (rule "array2seqDef" (formula "10") (term "1,1,1") (inst "u=u"))
            (rule "narrowSelectArrayType" (formula "10") (term "2,1,1,1") (ifseqformula "1") (ifseqformula "25"))
            (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "9"))
            (rule "array2seqDef" (formula "10") (term "0,1") (inst "u=u"))
            (rule "eqSymm" (formula "10"))
            (rule "array2seqDef" (formula "7") (term "1,0,1,1,0") (inst "u=u"))
            (rule "eqSeqDef" (formula "10") (inst "iv=iv"))
            (rule "andLeft" (formula "10"))
            (rule "lenOfSeqDef" (formula "10") (term "1"))
            (rule "polySimp_elimSub" (formula "10") (term "1,1"))
            (rule "times_zero_2" (formula "10") (term "1,1,1"))
            (rule "add_zero_right" (formula "10") (term "1,1"))
            (rule "getOfSeqDef" (formula "11") (term "1,1,0"))
            (rule "castDel" (formula "11") (term "1,1,1,0"))
            (rule "castDel" (formula "11") (term "2,1,1,0"))
            (rule "add_zero_right" (formula "11") (term "0,2,1,1,1,0"))
            (rule "polySimp_elimSub" (formula "11") (term "1,1,0,1,1,0"))
            (rule "mul_literals" (formula "11") (term "1,1,1,0,1,1,0"))
            (rule "add_zero_right" (formula "11") (term "1,1,0,1,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
            (rule "polySimp_addComm1" (formula "11") (term "0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1"))
            (rule "add_zero_right" (formula "10") (term "0,0,1"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,1,1,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,1,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,1,1,0"))
            (rule "applyEq" (formula "11") (term "0,1,0,1,0,0") (ifseqformula "10"))
            (rule "polySimp_addComm1" (formula "11") (term "0,1,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "10") (term "0,0,1"))
            (rule "polySimp_elimOne" (formula "10") (term "0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,1,1,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,1,1,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,1,0,1,1,0"))
            (rule "mul_literals" (formula "11") (term "0,1,1,0,1,1,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,1,1,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,1,1,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "0,0,0,1,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
            (rule "eqSeqDef2" (formula "14") (inst "iv=iv") (ifseqformula "14"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "eqSeqDef2" (formula "9") (inst "iv=iv") (ifseqformula "9"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "true_left" (formula "9"))
            (rule "pullOutSelect" (formula "18") (term "1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_11"))
            (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "18"))
            (rule "simplifySelectOfAnonEQ" (formula "18") (ifseqformula "15"))
            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "24")) (ifInst ""  (formula "2")))
            (rule "applyEqReverse" (formula "19") (term "1,0") (ifseqformula "18"))
            (rule "applyEqReverse" (formula "26") (term "0,0") (ifseqformula "18"))
            (rule "hideAuxiliaryEq" (formula "18"))
            (rule "eqSymm" (formula "25"))
            (rule "applyEq" (formula "25") (term "1") (ifseqformula "12"))
            (rule "pullOutSelect" (formula "25") (term "0,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_10"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")) (ifInst ""  (formula "3")))
            (rule "applyEqReverse" (formula "26") (term "0,0") (ifseqformula "1"))
            (rule "close" (formula "26") (ifseqformula "12"))
         )
      )
      (branch "Case 2"
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "12") (term "1") (ifseqformula "10"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1") (ifseqformula "10"))
         (rule "wellFormedAnonEQ" (formula "20") (term "0") (ifseqformula "10"))
         (rule "eqSymm" (formula "13"))
         (rule "eqSymm" (formula "7"))
         (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "19"))
         (builtin "One Step Simplification" (formula "4"))
         (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "17"))
         (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "16")))
         (rule "replace_known_right" (formula "20") (term "0,1") (ifseqformula "16"))
         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "1")) (ifInst ""  (formula "9")) (ifInst ""  (formula "12")))
         (rule "closeTrue" (formula "20"))
      )
   )
)
(branch "Exceptional Post (splidAndCheck)"
   (builtin "One Step Simplification" (formula "10"))
   (builtin "One Step Simplification" (formula "13"))
   (rule "andLeft" (formula "10"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "11") (term "1,0") (ifseqformula "10"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "13"))
   (rule "notLeft" (formula "11"))
   (rule "eqSymm" (formula "7"))
   (rule "eqSymm" (formula "17") (term "1,0,0,1,0,1"))
   (rule "eqSymm" (formula "12") (term "0,1"))
   (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "16"))
   (builtin "One Step Simplification" (formula "4"))
   (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "14"))
   (builtin "One Step Simplification" (formula "12"))
   (rule "true_left" (formula "12"))
   (rule "replace_known_right" (formula "12") (term "0,0") (ifseqformula "13"))
   (builtin "One Step Simplification" (formula "12"))
   (rule "andLeft" (formula "12"))
   (rule "nonNull" (formula "17") (term "1,1,1,1,0,0,0,1") (inst "i=i"))
   (rule "greater_literals" (formula "17") (term "0,1,1,1,1,1,0,0,0,1"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "sub_literals" (formula "17") (term "2,1,0,1,1,1,1,1,0,0,0,1"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "mul_literals" (formula "17") (term "0,1,1,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "array2seqDef" (formula "7") (term "0") (inst "u=u"))
   (rule "array2seqDef" (formula "7") (term "1") (inst "u=u"))
   (rule "narrowSelectArrayType" (formula "7") (term "2,1") (ifseqformula "1") (ifseqformula "16"))
   (rule "eqSeqDef" (formula "7") (inst "iv=iv"))
   (rule "andLeft" (formula "7"))
   (rule "getOfSeqDef" (formula "8") (term "1,1,0"))
   (rule "castDel" (formula "8") (term "2,1,1,0"))
   (rule "castDel" (formula "8") (term "1,1,1,0"))
   (rule "add_zero_right" (formula "8") (term "0,2,1,1,1,0"))
   (rule "polySimp_elimSub" (formula "8") (term "1,1,0,1,1,0"))
   (rule "times_zero_2" (formula "8") (term "1,1,1,0,1,1,0"))
   (rule "add_zero_right" (formula "8") (term "1,1,0,1,1,0"))
   (rule "lenOfSeqDef" (formula "7") (term "1"))
   (rule "polySimp_elimSub" (formula "7") (term "1,1"))
   (rule "times_zero_2" (formula "7") (term "1,1,1"))
   (rule "add_zero_right" (formula "7") (term "1,1"))
   (rule "lenOfSeqDef" (formula "7") (term "0"))
   (rule "polySimp_elimSub" (formula "7") (term "1,0"))
   (rule "times_zero_2" (formula "7") (term "1,1,0"))
   (rule "add_zero_right" (formula "7") (term "1,0"))
   (rule "lenOfSeqDef" (formula "8") (term "1,1,0,0"))
   (rule "polySimp_elimSub" (formula "8") (term "1,1,1,0,0"))
   (rule "times_zero_2" (formula "8") (term "1,1,1,1,0,0"))
   (rule "add_zero_right" (formula "8") (term "1,1,1,0,0"))
   (rule "getOfSeqDef" (formula "8") (term "0,1,0"))
   (rule "castDel" (formula "8") (term "1,0,1,0"))
   (rule "castDel" (formula "8") (term "2,0,1,0"))
   (rule "add_zero_right" (formula "8") (term "0,2,1,0,1,0"))
   (rule "polySimp_elimSub" (formula "8") (term "1,1,0,0,1,0"))
   (rule "times_zero_2" (formula "8") (term "1,1,1,0,0,1,0"))
   (rule "add_zero_right" (formula "8") (term "1,1,0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,1,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "7") (term "0,1"))
   (rule "add_zero_right" (formula "7") (term "0,0,1"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0"))
   (rule "add_zero_right" (formula "7") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "8") (term "0,1,1,0,0"))
   (rule "add_zero_right" (formula "8") (term "0,0,1,1,0,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,1,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,1,0"))
   (rule "applyEq" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "7"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,1,1,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,1,0,1,1,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,1,1,0"))
   (rule "mul_literals" (formula "8") (term "0,1,1,0,1,1,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,1,1,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,1"))
   (rule "polySimp_mulLiterals" (formula "7") (term "0,0,1"))
   (rule "polySimp_elimOne" (formula "7") (term "0,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,0"))
   (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0"))
   (rule "polySimp_elimOne" (formula "7") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,1,0"))
   (rule "mul_literals" (formula "8") (term "0,1,1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,1,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "0,0,1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "8") (term "0,0,1,1,1,0,0"))
   (rule "nnf_imp2or" (formula "8") (term "0"))
   (rule "nnf_notAnd" (formula "8") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
   (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
   (rule "mul_literals" (formula "8") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
   (rule "nnf_imp2or" (formula "18") (term "0,1,1,1,1,1,0,0,0,1"))
   (rule "nnf_notAnd" (formula "18") (term "0,0,1,1,1,1,1,0,0,0,1"))
   (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "add_zero_left" (formula "18") (term "0,0,1,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "add_literals" (formula "18") (term "0,0,0,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "mul_literals" (formula "18") (term "1,0,0,0,1,1,1,1,1,0,0,0,1"))
   (rule "Definition_axiom_for_ghostFieldsPre_in_verif_selectvoting_system_core_MixServer" (formula "6") (term "0") (inst "i=i"))
   (builtin "One Step Simplification" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "eqSymm" (formula "12"))
   (rule "eqSymm" (formula "11"))
   (rule "eqSymm" (formula "10"))
   (rule "eqSymm" (formula "9"))
   (rule "eqSymm" (formula "7") (term "1,0"))
   (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
   (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "12"))
   (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "11"))
   (rule "applyEq" (formula "12") (term "1") (ifseqformula "11"))
   (rule "applyEq" (formula "7") (term "0,1,0,0,1,0,0") (ifseqformula "11"))
   (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
   (rule "array2seqDef" (formula "10") (term "1,1,0") (inst "u=u"))
   (rule "array2seqDef" (formula "10") (term "0,1,0") (inst "u=u"))
   (rule "array2seqDef" (formula "10") (term "0,0") (inst "u=u"))
   (rule "array2seqDef" (formula "10") (term "1") (inst "u=u"))
   (rule "array2seqDef" (formula "9") (term "1") (inst "u=u"))
   (rule "eqSymm" (formula "9"))
   (rule "applyEq" (formula "10") (term "1,1,0") (ifseqformula "9"))
   (rule "array2seqDef" (formula "7") (term "0,0,0,1,0") (inst "u=u"))
   (rule "array2seqDef" (formula "7") (term "1,1,0") (inst "u=u"))
   (rule "eqSymm" (formula "7") (term "1,0"))
   (rule "eqSeqDef" (formula "10") (inst "iv=iv"))
   (rule "andLeft" (formula "10"))
   (rule "getOfSeqDef" (formula "11") (term "1,1,0"))
   (rule "castDel" (formula "11") (term "2,1,1,0"))
   (rule "castDel" (formula "11") (term "1,1,1,0"))
   (rule "add_zero_right" (formula "11") (term "0,2,1,1,1,0"))
   (rule "polySimp_elimSub" (formula "11") (term "1,1,0,1,1,0"))
   (rule "times_zero_2" (formula "11") (term "1,1,1,0,1,1,0"))
   (rule "add_zero_right" (formula "11") (term "1,1,0,1,1,0"))
   (rule "lenOfSeqDef" (formula "10") (term "1"))
   (rule "polySimp_elimSub" (formula "10") (term "1,1"))
   (rule "times_zero_2" (formula "10") (term "1,1,1"))
   (rule "add_zero_right" (formula "10") (term "1,1"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
   (rule "polySimp_addComm1" (formula "11") (term "0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,1,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1"))
   (rule "add_zero_right" (formula "10") (term "0,0,1"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,1,1,0"))
   (rule "applyEq" (formula "11") (term "0,1,0,1,0,0") (ifseqformula "10"))
   (rule "polySimp_addComm1" (formula "11") (term "0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,1,1,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,1,0,1,1,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,1,1,0"))
   (rule "mul_literals" (formula "11") (term "0,1,1,0,1,1,0"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,1,1,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,1"))
   (rule "polySimp_mulLiterals" (formula "10") (term "0,0,1"))
   (rule "polySimp_elimOne" (formula "10") (term "0,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,0,1,0,0,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,1,0,0,1,0,0"))
   (rule "polySimp_elimOne" (formula "11") (term "0,0,0,1,0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
   (rule "array2seqDef" (formula "7") (term "1,0,1,1,0") (inst "u=u"))
   (rule "eqSeqDef2" (formula "9") (inst "iv=iv") (ifseqformula "9"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "true_left" (formula "9"))
   (rule "nnf_imp2or" (formula "10") (term "0"))
   (rule "nnf_imp2or" (formula "7") (term "0"))
   (rule "nnf_notAnd" (formula "10") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
   (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
   (rule "mul_literals" (formula "10") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "7") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
   (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
   (rule "mul_literals" (formula "7") (term "1,0,0,0"))
   (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "15") (ifseqformula "3"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "15"))
   (rule "notLeft" (formula "17"))
   (rule "andLeft" (formula "15"))
   (rule "notLeft" (formula "17"))
   (rule "andLeft" (formula "15"))
   (rule "notLeft" (formula "17"))
   (rule "notLeft" (formula "16"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "15"))
   (rule "notLeft" (formula "16"))
   (rule "notLeft" (formula "15"))
   (rule "narrowSelectArrayType" (formula "10") (term "1,1,1,0") (ifseqformula "1") (ifseqformula "23"))
   (rule "narrowSelectArrayType" (formula "7") (term "2,0,0,1,1,0") (ifseqformula "1") (ifseqformula "28"))
   (rule "narrowSelectArrayType" (formula "10") (term "2,0,1,0,0,1,0") (ifseqformula "1") (ifseqformula "28"))
   (rule "narrowSelectArrayType" (formula "14") (term "1,0,1,0") (ifseqformula "1") (ifseqformula "24"))
   (rule "narrowSelectArrayType" (formula "9") (term "2,0,1,0,0") (ifseqformula "1") (ifseqformula "28"))
   (rule "nonNull" (formula "17") (inst "i=i"))
   (rule "greater_literals" (formula "17") (term "0,1"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "sub_literals" (formula "17") (term "2,1,0,1"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "andLeft" (formula "17"))
   (rule "notLeft" (formula "17"))
   (rule "narrowSelectArrayType" (formula "17") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "23"))
   (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
   (rule "nonNull" (formula "16") (inst "i=i"))
   (rule "sub_literals" (formula "16") (term "2,1,0,1,1"))
   (builtin "One Step Simplification" (formula "16"))
   (rule "greater_literals" (formula "16") (term "0,1"))
   (builtin "One Step Simplification" (formula "16"))
   (rule "andLeft" (formula "16"))
   (rule "notLeft" (formula "16"))
   (rule "narrowSelectArrayType" (formula "16") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "23"))
   (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
   (rule "applyEq" (formula "16") (term "0,1,0,0,1,0,0") (ifseqformula "11"))
   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
   (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
   (rule "nonNull" (formula "15") (inst "i=i"))
   (rule "greater_literals" (formula "15") (term "0,1"))
   (builtin "One Step Simplification" (formula "15"))
   (rule "sub_literals" (formula "15") (term "2,1,0,1"))
   (builtin "One Step Simplification" (formula "15"))
   (rule "andLeft" (formula "15"))
   (rule "notLeft" (formula "15"))
   (rule "narrowSelectArrayType" (formula "15") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "23"))
   (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
   (rule "applyEq" (formula "15") (term "0,1,0,0,1,0,0") (ifseqformula "12"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
   (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
   (rule "nnf_imp2or" (formula "17") (term "0"))
   (rule "nnf_imp2or" (formula "16") (term "0"))
   (rule "nnf_imp2or" (formula "15") (term "0"))
   (rule "nnf_notAnd" (formula "17") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
   (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
   (rule "mul_literals" (formula "17") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "16") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
   (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
   (rule "mul_literals" (formula "16") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "15") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
   (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
   (rule "mul_literals" (formula "15") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
   (rule "Contract_axiom_for_ghostFieldsNonNull_in_MixServer" (formula "6") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
   (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "34")) (ifInst ""  (formula "1")) (ifInst ""  (formula "26")) (ifInst ""  (formula "25")) (ifInst ""  (formula "24")) (ifInst ""  (formula "28")) (ifInst ""  (formula "27")))
   (rule "eqSymm" (formula "6"))
   (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,0,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,1,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0,0,0"))
   (rule "applyEq" (formula "6") (term "1") (ifseqformula "7"))
   (builtin "One Step Simplification" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "applyEq" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
   (rule "applyEq" (formula "7") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
   (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
   (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
   (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
   (rule "Definition_axiom_for_ghostFieldsNonNull_in_verif_selectvoting_system_core_MixServer" (formula "9") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
   (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "28")) (ifInst ""  (formula "27")) (ifInst ""  (formula "26")) (ifInst ""  (formula "30")) (ifInst ""  (formula "29")))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
   (rule "applyEq" (formula "10") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
   (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
   (rule "nnf_imp2or" (formula "6") (term "0"))
   (rule "nnf_imp2or" (formula "8") (term "0"))
   (rule "nnf_imp2or" (formula "7") (term "0"))
   (rule "nnf_notAnd" (formula "6") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
   (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "6") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
   (rule "mul_literals" (formula "6") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "7") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
   (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
   (rule "mul_literals" (formula "7") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "6") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
   (rule "mul_literals" (formula "6") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "6") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
   (rule "mul_literals" (formula "6") (term "1,0,0,0"))
   (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "20") (ifseqformula "3"))
   (rule "andLeft" (formula "20"))
   (rule "notLeft" (formula "21"))
   (rule "andLeft" (formula "20"))
   (rule "andLeft" (formula "20"))
   (rule "notLeft" (formula "22"))
   (rule "notLeft" (formula "21"))
   (rule "andLeft" (formula "20"))
   (rule "notLeft" (formula "21"))
   (rule "andLeft" (formula "20"))
   (rule "andLeft" (formula "20"))
   (rule "andLeft" (formula "20"))
   (rule "andLeft" (formula "20"))
   (rule "notLeft" (formula "20"))
   (rule "notLeft" (formula "20"))
   (rule "nonNull" (formula "22") (inst "i=i"))
   (rule "sub_literals" (formula "22") (term "2,1,0,1,1"))
   (builtin "One Step Simplification" (formula "22"))
   (rule "greater_literals" (formula "22") (term "0,1"))
   (builtin "One Step Simplification" (formula "22"))
   (rule "andLeft" (formula "22"))
   (rule "notLeft" (formula "22"))
   (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
   (rule "nonNull" (formula "21") (inst "i=i"))
   (rule "sub_literals" (formula "21") (term "2,1,0,1,1"))
   (builtin "One Step Simplification" (formula "21"))
   (rule "greater_literals" (formula "21") (term "0,1"))
   (builtin "One Step Simplification" (formula "21"))
   (rule "andLeft" (formula "21"))
   (rule "notLeft" (formula "21"))
   (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
   (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
   (rule "nonNull" (formula "20") (inst "i=i"))
   (rule "greater_literals" (formula "20") (term "0,1"))
   (builtin "One Step Simplification" (formula "20"))
   (rule "sub_literals" (formula "20") (term "2,1,0,1"))
   (builtin "One Step Simplification" (formula "20"))
   (rule "andLeft" (formula "20"))
   (rule "notLeft" (formula "20"))
   (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
   (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_electionID_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")) (ifInst ""  (formula "3")))
   (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "pullOutSelect" (formula "31") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_precServVerif_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")) (ifInst ""  (formula "3")))
   (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "pullOutSelect" (formula "30") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_decryptor_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "42")) (ifInst ""  (formula "3")))
   (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "pullOutSelect" (formula "29") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_signer_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")) (ifInst ""  (formula "3")))
   (rule "applyEqReverse" (formula "30") (term "0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "pullOutSelect" (formula "28") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_unsigned_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")) (ifInst ""  (formula "3")))
   (rule "applyEqReverse" (formula "29") (term "0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "pullOutSelect" (formula "27") (term "0") (inst "selectSK=verif_selectvoting_system_core_MixServer_concatenated_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "39")) (ifInst ""  (formula "3")))
   (rule "applyEqReverse" (formula "28") (term "0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "pullOutSelect" (formula "22") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_chosen_0"))
   (rule "applyEq" (formula "27") (term "0") (ifseqformula "22"))
   (rule "applyEq" (formula "23") (term "0,1,1,1,0,0") (ifseqformula "22"))
   (rule "simplifySelectOfAnonEQ" (formula "22") (ifseqformula "18"))
   (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "38")) (ifInst ""  (formula "2")))
   (rule "applyEqReverse" (formula "23") (term "1,0,0,1,0") (ifseqformula "22"))
   (rule "applyEqReverse" (formula "27") (term "0") (ifseqformula "22"))
   (rule "applyEqReverse" (formula "23") (term "0,1,1,1,0,0") (ifseqformula "22"))
   (rule "hideAuxiliaryEq" (formula "22"))
   (rule "pullOutSelect" (formula "21") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_encrypted_0"))
   (rule "applyEq" (formula "22") (term "0,1,1,1,0,0") (ifseqformula "21"))
   (rule "applyEq" (formula "26") (term "0") (ifseqformula "21"))
   (rule "simplifySelectOfAnonEQ" (formula "21") (ifseqformula "18"))
   (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "37")) (ifInst ""  (formula "2")))
   (rule "applyEqReverse" (formula "22") (term "1,0,0,1,0") (ifseqformula "21"))
   (rule "applyEqReverse" (formula "22") (term "0,1,1,1,0,0") (ifseqformula "21"))
   (rule "applyEqReverse" (formula "26") (term "0") (ifseqformula "21"))
   (rule "hideAuxiliaryEq" (formula "21"))
   (rule "applyEq" (formula "21") (term "1,1,1,0,0") (ifseqformula "10"))
   (rule "pullOutSelect" (formula "20") (term "1,0,0,1,0") (inst "selectSK=verif_selectvoting_system_core_MixServer_sorted_0"))
   (rule "applyEq" (formula "25") (term "0") (ifseqformula "20"))
   (rule "applyEq" (formula "21") (term "0,1,1,1,0,0") (ifseqformula "20"))
   (rule "simplifySelectOfAnonEQ" (formula "20") (ifseqformula "18"))
   (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "36")) (ifInst ""  (formula "2")))
   (rule "applyEqReverse" (formula "21") (term "1,0,0,1,0") (ifseqformula "20"))
   (rule "applyEqReverse" (formula "25") (term "0") (ifseqformula "20"))
   (rule "applyEqReverse" (formula "21") (term "0,1,1,1,0,0") (ifseqformula "20"))
   (rule "hideAuxiliaryEq" (formula "20"))
   (rule "applyEq" (formula "20") (term "1,1,1,0,0") (ifseqformula "11"))
   (rule "methodCallParamThrow" (formula "36") (term "1"))
   (rule "commute_or_2" (formula "6") (term "0"))
   (rule "commute_or_2" (formula "9") (term "0"))
   (rule "commute_or_2" (formula "13") (term "0"))
   (rule "nnf_imp2or" (formula "22") (term "0"))
   (rule "nnf_imp2or" (formula "21") (term "0"))
   (rule "commute_or_2" (formula "16") (term "0"))
   (rule "nnf_imp2or" (formula "20") (term "0"))
   (rule "commute_or_2" (formula "15") (term "0"))
   (rule "nnf_notAnd" (formula "22") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
   (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "22") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
   (rule "mul_literals" (formula "22") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "21") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
   (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
   (rule "mul_literals" (formula "21") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "20") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
   (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
   (rule "mul_literals" (formula "20") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
   (rule "commute_or_2" (formula "14") (term "0"))
   (rule "arrayLengthIsAShort" (formula "12") (term "1,1"))
   (builtin "One Step Simplification" (formula "12"))
   (rule "true_left" (formula "12"))
   (rule "arrayLengthNotNegative" (formula "12") (term "1,1"))
   (rule "arrayLengthNotNegative" (formula "13") (term "1,0"))
   (rule "arrayLengthIsAShort" (formula "14") (term "1,0"))
   (builtin "One Step Simplification" (formula "14"))
   (rule "true_left" (formula "14"))
   (rule "arrayLengthNotNegative" (formula "11") (term "0"))
   (rule "applyEq" (formula "11") (term "0") (ifseqformula "12"))
   (rule "arrayLengthIsAShort" (formula "12") (term "0"))
   (builtin "One Step Simplification" (formula "12"))
   (rule "true_left" (formula "12"))
   (rule "arrayLengthNotNegative" (formula "10") (term "1"))
   (rule "arrayLengthIsAShort" (formula "10") (term "1"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "true_left" (formula "10"))
   (rule "arrayLengthNotNegative" (formula "10") (term "0"))
   (rule "applyEq" (formula "10") (term "0") (ifseqformula "11"))
   (rule "arrayLengthIsAShort" (formula "10") (term "0"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "true_left" (formula "10"))
   (rule "arrayLengthNotNegative" (formula "8") (term "1,0,1,0,0"))
   (rule "arrayLengthIsAShort" (formula "9") (term "1,0,0,0"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "true_left" (formula "9"))
   (rule "arrayLengthIsAShort" (formula "9") (term "1,0,1,0,0"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "true_left" (formula "9"))
   (rule "arrayLengthNotNegative" (formula "9") (term "1,0,0,0"))
   (rule "arrayLengthIsAShort" (formula "10") (term "1,1"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "true_left" (formula "10"))
   (rule "arrayLengthNotNegative" (formula "10") (term "1,1"))
   (rule "lenNonNegative" (formula "11") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "11"))
   (rule "applyEq" (formula "11") (term "0") (ifseqformula "12"))
   (rule "commute_or" (formula "6") (term "0,0"))
   (rule "commute_or" (formula "13") (term "0,0"))
   (rule "commute_or_2" (formula "29") (term "0"))
   (rule "commute_or" (formula "20") (term "0,0"))
   (rule "commute_or" (formula "23") (term "0,0"))
   (rule "commute_or" (formula "22") (term "0,0"))
   (rule "commute_or_2" (formula "28") (term "0"))
   (rule "commute_or_2" (formula "27") (term "0"))
   (rule "commute_or" (formula "21") (term "0,0"))
   (rule "commute_or" (formula "29") (term "0,0"))
   (rule "commute_or" (formula "28") (term "0,0"))
   (rule "commute_or" (formula "27") (term "0,0"))
   (rule "tryCatchThrow" (formula "43") (term "1"))
   (rule "ifthenelse_to_or_right" (formula "13") (term "0,0,0"))
   (rule "nnf_notAnd" (formula "13") (term "0,0,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0,0,0"))
   (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0,0,0"))
   (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0,0,0"))
   (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,0,0,0"))
   (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0,0"))
   (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,0"))
   (rule "commute_or" (formula "13") (term "0,0"))
   (rule "commute_or_2" (formula "13") (term "0"))
   (rule "commute_or" (formula "13") (term "1,1,0"))
   (rule "commute_or_2" (formula "13") (term "0,1,0"))
   (rule "commute_or" (formula "13") (term "0,0,1,0"))
   (rule "cnf_rightDist" (formula "13") (term "1,1,0"))
   (rule "cnf_rightDist" (formula "13") (term "0"))
   (rule "distr_forallAnd" (formula "13"))
   (rule "andLeft" (formula "13"))
   (rule "commute_or" (formula "14") (term "0"))
   (rule "commute_or_2" (formula "13") (term "0"))
   (rule "commute_or" (formula "14") (term "1,1,0"))
   (rule "shift_paren_or" (formula "13") (term "0,0"))
   (rule "cnf_rightDist" (formula "14") (term "0"))
   (rule "distr_forallAnd" (formula "14"))
   (rule "andLeft" (formula "14"))
   (rule "commute_or_2" (formula "14") (term "0"))
   (rule "shift_paren_or" (formula "15") (term "0"))
   (rule "commute_or_2" (formula "15") (term "0,0"))
   (rule "shift_paren_or" (formula "14") (term "0,0"))
   (rule "commute_or" (formula "14") (term "0,0,0"))
   (rule "inEqSimp_or_tautInEq1" (formula "14") (term "0,0"))
   (rule "add_literals" (formula "14") (term "1,1,0,0"))
   (rule "qeq_literals" (formula "14") (term "1,0,0"))
   (builtin "One Step Simplification" (formula "14"))
   (rule "true_left" (formula "14"))
   (rule "shift_paren_or" (formula "13") (term "0,0,0"))
   (rule "commute_or" (formula "13") (term "0,0,0,0"))
   (builtin "One Step Simplification" (formula "13"))
   (rule "ifthenelse_to_or_left" (formula "21") (term "0,0,0"))
   (rule "eqSymm" (formula "21") (term "1,0,0,0,0"))
   (rule "eqSymm" (formula "21") (term "1,1,0,0,0"))
   (builtin "One Step Simplification" (formula "21"))
   (rule "nnf_notAnd" (formula "21") (term "0,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,0,0,0"))
   (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "21") (term "0,0,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0,0,0"))
   (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,0,0,0"))
   (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,0,0,0"))
   (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,0,0,0"))
   (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,0,0"))
   (rule "nnf_notAnd" (formula "21") (term "0,1,1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "21") (term "1,0,1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,1,1,0,0,0"))
   (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,1,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,1,1,0,0,0"))
   (rule "add_literals" (formula "21") (term "0,0,0,1,0,1,1,0,0,0"))
   (rule "add_zero_left" (formula "21") (term "0,0,1,0,1,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "21") (term "1,1,0,1,1,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "21") (term "0,0,1,1,0,0,0"))
   (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,1,1,0,0,0"))
   (rule "add_zero_right" (formula "21") (term "0,0,0,0,1,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,1,1,0,0,0"))
   (rule "mul_literals" (formula "21") (term "1,0,0,1,1,0,0,0"))
   (rule "commute_or" (formula "21") (term "0,0"))
   (rule "commute_or_2" (formula "21") (term "0"))
   (rule "commute_or_2" (formula "21") (term "0,1,0"))
   (rule "commute_or" (formula "21") (term "1,1,0"))
   (rule "commute_or" (formula "21") (term "0,0,1,0"))
   (rule "commute_or_2" (formula "21") (term "0,1,1,0"))
   (rule "commute_or" (formula "21") (term "0,0,1,1,0"))
   (rule "cnf_rightDist" (formula "21") (term "1,1,0"))
   (rule "commute_or_2" (formula "21") (term "0,1,1,0"))
   (rule "inEqSimp_or_tautInEq1" (formula "21") (term "0,0,1,1,0"))
   (rule "add_zero_right" (formula "21") (term "1,1,0,0,1,1,0"))
   (rule "qeq_literals" (formula "21") (term "1,0,0,1,1,0"))
   (builtin "One Step Simplification" (formula "21"))
   (rule "commute_or" (formula "21") (term "1,1,0"))
   (rule "cnf_rightDist" (formula "21") (term "0"))
   (rule "distr_forallAnd" (formula "21"))
   (rule "andLeft" (formula "21"))
   (rule "commute_or_2" (formula "21") (term "0"))
   (rule "shift_paren_or" (formula "22") (term "0"))
   (rule "commute_or_2" (formula "22") (term "0,0"))
   (rule "shift_paren_or" (formula "21") (term "0,0"))
   (rule "commute_or_2" (formula "22") (term "0,0,0"))
   (builtin "One Step Simplification" (formula "22"))
   (rule "shift_paren_or" (formula "21") (term "0,0,0"))
   (rule "commute_or" (formula "21") (term "0,0,0,0"))
   (builtin "One Step Simplification" (formula "21"))
   (rule "ifElseUnfold" (formula "45") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "45") (term "1") (newnames "x"))
   (rule "equality_comparison_simple" (formula "45") (term "1"))
   (builtin "One Step Simplification" (formula "45"))
   (rule "replace_known_right" (formula "45") (term "0,0,1,0") (ifseqformula "42"))
   (builtin "One Step Simplification" (formula "45"))
   (rule "ifthenelse_to_or_left" (formula "21") (term "0,0,0,0"))
   (rule "eqSymm" (formula "21") (term "1,0,0,0,0,0"))
   (rule "eqSymm" (formula "21") (term "1,1,0,0,0,0"))
   (rule "nnf_notAnd" (formula "21") (term "0,0,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "21") (term "0,0,0,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,0,0,0,0"))
   (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,0,0,0,0"))
   (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,0,0,0"))
   (rule "commute_or" (formula "21") (term "0,0,0"))
   (rule "commute_or_2" (formula "21") (term "0,0"))
   (rule "commute_or_2" (formula "21") (term "0"))
   (rule "commute_or" (formula "21") (term "1,1,0"))
   (rule "cnf_rightDist" (formula "21") (term "1,1,0"))
   (rule "cnf_rightDist" (formula "21") (term "0"))
   (rule "distr_forallAnd" (formula "21"))
   (rule "andLeft" (formula "21"))
   (rule "commute_or" (formula "22") (term "0"))
   (rule "shift_paren_or" (formula "21") (term "0"))
   (rule "commute_or_2" (formula "21") (term "0,0"))
   (rule "commute_or" (formula "22") (term "1,1,0"))
   (rule "commute_or_2" (formula "21") (term "0,0,0"))
   (rule "cnf_rightDist" (formula "22") (term "0"))
   (rule "distr_forallAnd" (formula "22"))
   (rule "andLeft" (formula "22"))
   (rule "commute_or_2" (formula "22") (term "0"))
   (rule "shift_paren_or" (formula "23") (term "0"))
   (rule "commute_or_2" (formula "22") (term "0,0"))
   (rule "shift_paren_or" (formula "23") (term "0,0"))
   (rule "commute_or_2" (formula "23") (term "0,0,0"))
   (rule "shift_paren_or" (formula "22") (term "0,0,0"))
   (rule "commute_or" (formula "22") (term "0,0,0,0"))
   (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0,0,0"))
   (rule "add_literals" (formula "22") (term "1,1,0,0,0"))
   (rule "qeq_literals" (formula "22") (term "1,0,0,0"))
   (builtin "One Step Simplification" (formula "22"))
   (rule "true_left" (formula "22"))
   (rule "shift_paren_or" (formula "21") (term "0,0,0,0"))
   (builtin "One Step Simplification" (formula "21"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0,1,0") (ifseqformula "1"))
   (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "39"))
   (builtin "One Step Simplification" (formula "20"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "7") (term "1,1") (ifseqformula "1"))
   (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "37"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "0,0") (ifseqformula "1"))
   (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "37"))
   (builtin "One Step Simplification" (formula "18"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "16") (term "0,1") (ifseqformula "1"))
   (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "40"))
   (builtin "One Step Simplification" (formula "16"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "0,1,0,0,0") (ifseqformula "1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "0,1,0,1,0,0") (ifseqformula "1"))
   (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "48"))
   (builtin "One Step Simplification" (formula "14"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "15") (term "0,1,1") (ifseqformula "1"))
   (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "44"))
   (builtin "One Step Simplification" (formula "15"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "0") (ifseqformula "1"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "48"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "49") (term "0") (ifseqformula "2"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "50"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "0") (ifseqformula "3"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "49"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "ifElseSplit" (formula "56"))
   (branch "if x true"
      (builtin "One Step Simplification" (formula "57"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch "if x false"
      (builtin "One Step Simplification" (formula "57"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "ifElseSplit" (formula "56"))
      (branch "if exc_0 instanceof java.lang.Throwable true"
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")))
         (rule "true_left" (formula "1"))
         (rule "variableDeclaration" (formula "56") (term "1") (newnames "e"))
         (rule "reference_type_cast" (formula "56") (term "1"))
         (branch "Normal Execution (exc_0 instanceof java.lang.Throwable)"
            (builtin "One Step Simplification" (formula "57"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "assignment" (formula "56") (term "1"))
            (builtin "One Step Simplification" (formula "56"))
            (rule "emptyModality" (formula "56") (term "1"))
            (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "53")) (ifInst ""  (formula "53")) (ifInst ""  (formula "43")))
            (rule "eqSymm" (formula "56") (term "1,0,0,1"))
            (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "56") (term "0") (ifseqformula "6"))
            (rule "replaceKnownSelect_taclet1_0" (formula "56") (term "0,0,1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "56") (term "0,0,1,0"))
            (rule "replaceKnownSelect_taclet1_2" (formula "56") (term "0,0,1,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_3" (formula "56") (term "0,0,1,0,0"))
            (rule "replaceKnownSelect_taclet1_4" (formula "56") (term "0,0,1,0,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_5" (formula "56") (term "0,0,1,0,0,0"))
            (rule "replaceKnownSelect_taclet1_12" (formula "56") (term "1,1,0,0,0,0,0"))
            (rule "replaceKnownSelect_taclet1_6" (formula "56") (term "0,0,1,0,0,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_13" (formula "56") (term "1,1,0,0,0,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_7" (formula "56") (term "0,0,1,0,0,0,0"))
            (rule "replaceKnownSelect_taclet1_14" (formula "56") (term "1,1,0,0,0,0,0,0"))
            (rule "replaceKnownSelect_taclet1_16" (formula "56") (term "1,1,0,0,0,0,0,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_15" (formula "56") (term "1,1,0,0,0,0,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_17" (formula "56") (term "1,1,0,0,0,0,0,0,0"))
            (rule "replaceKnownSelect_taclet1_8" (formula "56") (term "0,0,0,0,0,0,0,0,0,0,0"))
            (rule "replaceKnownSelect_taclet1_10" (formula "56") (term "0,0,1,0,0,0,0,0,0,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_9" (formula "56") (term "0,0,0,0,0,0,0,0,0,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_11" (formula "56") (term "0,0,1,0,0,0,0,0,0,0,0"))
            (rule "replace_known_right" (formula "56") (term "0,1,0,0") (ifseqformula "51"))
            (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "47")) (ifInst ""  (formula "48")) (ifInst ""  (formula "49")) (ifInst ""  (formula "50")) (ifInst ""  (formula "52")))
            (rule "nonNull" (formula "56") (term "1,0") (inst "i=i"))
            (rule "sub_literals" (formula "56") (term "2,1,0,1,1,1,0"))
            (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "46")))
            (rule "greater_literals" (formula "56") (term "0,1,0"))
            (builtin "One Step Simplification" (formula "56"))
            (rule "inEqSimp_ltToLeq" (formula "56") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,1,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "56") (term "0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "56") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "56") (term "1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "56") (term "1,1,1,0,0,1,0"))
            (rule "mul_literals" (formula "56") (term "0,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "56") (term "1,1,1,0,0,1,0"))
            (rule "nonNull" (formula "56") (term "0,0,0") (inst "i=i"))
            (rule "sub_literals" (formula "56") (term "2,1,0,1,1,0,0,0"))
            (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "44")))
            (rule "greater_literals" (formula "56") (term "0,0,0,0"))
            (builtin "One Step Simplification" (formula "56"))
            (rule "inEqSimp_ltToLeq" (formula "56") (term "1,0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,1,0,0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "56") (term "0,0,0,0,0,0"))
            (rule "applyEq" (formula "56") (term "0,1,0,0,1,0,0,0,0,0") (ifseqformula "26"))
            (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "1,0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "56") (term "1,1,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "56") (term "1,1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "56") (term "1,1,1,0,0,0,0,0"))
            (rule "mul_literals" (formula "56") (term "0,1,1,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "56") (term "1,1,1,0,0,0,0,0"))
            (rule "nonNull" (formula "56") (term "1,0,0") (inst "i=i"))
            (rule "sub_literals" (formula "56") (term "2,1,0,1,1,1,0,0"))
            (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "45")))
            (rule "greater_literals" (formula "56") (term "0,1,0,0"))
            (builtin "One Step Simplification" (formula "56"))
            (rule "inEqSimp_ltToLeq" (formula "56") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "56") (term "0,0,0,1,0,0"))
            (rule "applyEq" (formula "56") (term "0,1,0,0,1,0,0,1,0,0") (ifseqformula "23"))
            (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "56") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "56") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "56") (term "1,1,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "56") (term "0,1,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "56") (term "1,1,1,0,0,1,0,0"))
            (rule "nnf_imp2or" (formula "56") (term "0,1,0"))
            (rule "nnf_imp2or" (formula "56") (term "0,0,0,0"))
            (rule "nnf_imp2or" (formula "56") (term "0,1,0,0"))
            (rule "nnf_notAnd" (formula "56") (term "0,0,1,0"))
            (rule "inEqSimp_notGeq" (formula "56") (term "0,0,0,1,0"))
            (rule "times_zero_1" (formula "56") (term "1,0,0,0,0,0,1,0"))
            (rule "add_literals" (formula "56") (term "0,0,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "0,0,0,1,0"))
            (rule "mul_literals" (formula "56") (term "1,0,0,0,1,0"))
            (rule "inEqSimp_notLeq" (formula "56") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "56") (term "1,0,0,1,0,0,1,0"))
            (rule "mul_literals" (formula "56") (term "0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "56") (term "0,0,1,0,0,1,0"))
            (rule "add_literals" (formula "56") (term "0,0,0,1,0,0,1,0"))
            (rule "add_zero_left" (formula "56") (term "0,0,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "56") (term "1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "56") (term "1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "56") (term "1,1,0,0,1,0"))
            (rule "nnf_notAnd" (formula "56") (term "0,0,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "56") (term "1,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "56") (term "1,0,0,1,0,0,0,0,0"))
            (rule "mul_literals" (formula "56") (term "0,1,0,0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "56") (term "0,0,1,0,0,0,0,0"))
            (rule "add_literals" (formula "56") (term "0,0,0,1,0,0,0,0,0"))
            (rule "add_zero_left" (formula "56") (term "0,0,1,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "56") (term "1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "56") (term "1,1,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "56") (term "1,1,0,0,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "56") (term "0,0,0,0,0,0"))
            (rule "mul_literals" (formula "56") (term "1,0,0,0,0,0,0,0,0"))
            (rule "add_literals" (formula "56") (term "0,0,0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "0,0,0,0,0,0"))
            (rule "mul_literals" (formula "56") (term "1,0,0,0,0,0,0"))
            (rule "nnf_notAnd" (formula "56") (term "0,0,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "56") (term "0,0,0,1,0,0"))
            (rule "times_zero_1" (formula "56") (term "1,0,0,0,0,0,1,0,0"))
            (rule "add_literals" (formula "56") (term "0,0,0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "0,0,0,1,0,0"))
            (rule "mul_literals" (formula "56") (term "1,0,0,0,1,0,0"))
            (rule "inEqSimp_notLeq" (formula "56") (term "1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "56") (term "1,0,0,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "56") (term "0,1,0,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "56") (term "0,0,1,0,0,1,0,0"))
            (rule "add_literals" (formula "56") (term "0,0,0,1,0,0,1,0,0"))
            (rule "add_zero_left" (formula "56") (term "0,0,1,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "56") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "56") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "56") (term "1,1,0,0,1,0,0"))
            (rule "andRight" (formula "56"))
            (branch "Case 1"
               (rule "andRight" (formula "56"))
               (branch "Case 1"
                  (rule "andRight" (formula "56"))
                  (branch "Case 1"
                     (rule "allRight" (formula "56") (inst "sk=i_2"))
                     (rule "orRight" (formula "56"))
                     (rule "notRight" (formula "57"))
                     (rule "orRight" (formula "57"))
                     (rule "inEqSimp_leqRight" (formula "57"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_geqRight" (formula "58"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_2"))
                     (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "42"))
                     (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "48")) (ifInst ""  (formula "29")))
                     (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "7") (ifseqformula "47"))
                     (rule "ifthenelse_split" (formula "18") (term "0"))
                     (branch "self.unsigned.length ≥ 1 TRUE"
                        (rule "replace_known_left" (formula "24") (term "0,1,1,0") (ifseqformula "18"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "replace_known_left" (formula "22") (term "0,1") (ifseqformula "18"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "replace_known_left" (formula "23") (term "0,1,1,0") (ifseqformula "18"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "18"))
                        (rule "leq_literals" (formula "17") (term "0"))
                        (builtin "One Step Simplification" (formula "17"))
                        (rule "true_left" (formula "17"))
                        (rule "inEqSimp_or_tautInEq1" (formula "23") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "23") (term "1,0"))
                        (rule "polySimp_pullOutFactor1" (formula "23") (term "0,1,0"))
                        (rule "add_literals" (formula "23") (term "1,0,1,0"))
                        (rule "times_zero_1" (formula "23") (term "0,1,0"))
                        (rule "leq_literals" (formula "23") (term "1,0"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "true_left" (formula "23"))
                        (rule "ifthenelse_split" (formula "31") (term "1"))
                        (branch "msg.length ≥ 1 TRUE"
                           (rule "replace_known_left" (formula "34") (term "0,1,1,0") (ifseqformula "31"))
                           (builtin "One Step Simplification" (formula "34"))
                           (rule "replace_known_left" (formula "33") (term "0,1,1,0,0") (ifseqformula "31"))
                           (builtin "One Step Simplification" (formula "33"))
                           (rule "replace_known_left" (formula "35") (term "0,1,1,0") (ifseqformula "31"))
                           (builtin "One Step Simplification" (formula "35"))
                           (rule "inEqSimp_subsumption1" (formula "28") (ifseqformula "31"))
                           (rule "leq_literals" (formula "28") (term "0"))
                           (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "commute_or_2" (formula "33") (term "0"))
                           (rule "inEqSimp_or_tautInEq1" (formula "33") (term "0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0,0"))
                           (rule "polySimp_pullOutFactor1" (formula "33") (term "0,1,0,0"))
                           (rule "add_literals" (formula "33") (term "1,0,1,0,0"))
                           (rule "times_zero_1" (formula "33") (term "0,1,0,0"))
                           (rule "leq_literals" (formula "33") (term "1,0,0"))
                           (builtin "One Step Simplification" (formula "33"))
                           (rule "true_left" (formula "33"))
                           (rule "commute_or_2" (formula "33") (term "0"))
                           (builtin "One Step Simplification" (formula "33"))
                           (rule "commute_or_2" (formula "32") (term "0,0"))
                           (builtin "One Step Simplification" (formula "32"))
                           (rule "ifthenelse_split" (formula "31") (term "0"))
                           (branch "self.concatenated.length ≥ 1 TRUE"
                              (rule "applyEq" (formula "31") (term "0") (ifseqformula "32"))
                              (rule "applyEq" (formula "33") (term "1,1,1,0") (ifseqformula "31"))
                              (rule "applyEq" (formula "28") (term "0") (ifseqformula "31"))
                              (rule "applyEq" (formula "32") (term "1,1,0,0") (ifseqformula "31"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "inEqSimp_subsumption1" (formula "28") (ifseqformula "30"))
                              (rule "leq_literals" (formula "28") (term "0"))
                              (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "inEqSimp_or_tautInEq3" (formula "32") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "32") (term "0,1,0"))
                              (rule "add_literals" (formula "32") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "32") (term "0,1,0"))
                              (rule "leq_literals" (formula "32") (term "1,0"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "true_left" (formula "32"))
                              (rule "allLeft" (formula "32") (inst "t=i_2"))
                              (rule "replace_known_left" (formula "32") (term "0,0,0") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "32") (term "1") (ifseqformula "1"))
                              (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1"))
                              (rule "add_literals" (formula "32") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "32") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "32") (term "0,0,1"))
                              (rule "leq_literals" (formula "32") (term "0,1"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "inEqSimp_contradInEq1" (formula "32") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "32") (term "0"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "closeFalse" (formula "32"))
                           )
                           (branch "self.concatenated.length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "31"))
                              (rule "inEqSimp_geqRight" (formula "44"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "31") (term "0") (ifseqformula "32"))
                              (rule "qeq_literals" (formula "31"))
                              (rule "closeFalse" (formula "31"))
                           )
                        )
                        (branch "msg.length ≥ 1 FALSE"
                           (builtin "One Step Simplification" (formula "31"))
                           (rule "replace_known_right" (formula "34") (term "0,1,1,0") (ifseqformula "45"))
                           (builtin "One Step Simplification" (formula "34"))
                           (rule "replace_known_right" (formula "33") (term "0,1,1,0") (ifseqformula "45"))
                           (builtin "One Step Simplification" (formula "33"))
                           (rule "replace_known_right" (formula "32") (term "0,1,1,0,0") (ifseqformula "45"))
                           (builtin "One Step Simplification" (formula "32"))
                           (rule "inEqSimp_geqRight" (formula "45"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_antiSymm" (formula "29") (ifseqformula "1"))
                           (rule "applyEq" (formula "35") (term "1,1,1,0,0,0") (ifseqformula "29"))
                           (rule "add_zero_right" (formula "35") (term "1,1,0,0,0"))
                           (builtin "One Step Simplification" (formula "35"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "29"))
                           (rule "leq_literals" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "applyEq" (formula "35") (term "1,1,0,0,0") (ifseqformula "28"))
                           (rule "applyEq" (formula "29") (term "0") (ifseqformula "28"))
                           (rule "qeq_literals" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "applyEq" (formula "32") (term "1,1,0,0,0,0") (ifseqformula "28"))
                           (rule "inEqSimp_notGeq" (formula "31") (term "0"))
                           (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                           (rule "add_literals" (formula "31") (term "0,0,0"))
                           (rule "add_zero_left" (formula "31") (term "0,0"))
                           (rule "inEqSimp_or_tautInEq1" (formula "34") (term "0,0,0"))
                           (rule "add_zero_right" (formula "34") (term "1,1,0,0,0"))
                           (rule "qeq_literals" (formula "34") (term "1,0,0,0"))
                           (builtin "One Step Simplification" (formula "34"))
                           (rule "true_left" (formula "34"))
                           (rule "inEqSimp_or_tautInEq0" (formula "32") (term "0,0,0,0"))
                           (rule "add_zero_right" (formula "32") (term "1,1,0,0,0,0"))
                           (rule "qeq_literals" (formula "32") (term "1,0,0,0,0"))
                           (builtin "One Step Simplification" (formula "32"))
                           (rule "true_left" (formula "32"))
                           (rule "commute_or_2" (formula "32") (term "0"))
                           (rule "inEqSimp_or_tautInEq1" (formula "32") (term "0,0"))
                           (rule "add_literals" (formula "32") (term "1,1,0,0"))
                           (rule "qeq_literals" (formula "32") (term "1,0,0"))
                           (builtin "One Step Simplification" (formula "32"))
                           (rule "true_left" (formula "32"))
                           (rule "allLeft" (formula "32") (inst "t=i_2"))
                           (rule "replace_known_left" (formula "32") (term "0,0,0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "32"))
                           (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "32") (term "1") (ifseqformula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1"))
                           (rule "add_literals" (formula "32") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "32") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "32") (term "0,0,1"))
                           (rule "leq_literals" (formula "32") (term "0,1"))
                           (builtin "One Step Simplification" (formula "32"))
                           (rule "inEqSimp_contradInEq1" (formula "32") (ifseqformula "2"))
                           (rule "qeq_literals" (formula "32") (term "0"))
                           (builtin "One Step Simplification" (formula "32"))
                           (rule "closeFalse" (formula "32"))
                        )
                     )
                     (branch "self.unsigned.length ≥ 1 FALSE"
                        (rule "qeq_literals" (formula "18"))
                        (rule "true_left" (formula "18"))
                        (rule "replace_known_right" (formula "22") (term "0,1,1,0") (ifseqformula "46"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "replace_known_right" (formula "23") (term "0,1,1,0") (ifseqformula "46"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "replace_known_right" (formula "21") (term "0,1") (ifseqformula "46"))
                        (builtin "One Step Simplification" (formula "21"))
                        (rule "inEqSimp_geqRight" (formula "46"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_antiSymm" (formula "18") (ifseqformula "1"))
                        (rule "applyEq" (formula "1") (term "0") (ifseqformula "18"))
                        (rule "leq_literals" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "applyEq" (formula "23") (term "1,1,0,0") (ifseqformula "17"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "applyEq" (formula "24") (term "1,1,1,0,0") (ifseqformula "17"))
                        (rule "add_zero_right" (formula "24") (term "1,1,0,0"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "applyEq" (formula "18") (term "0") (ifseqformula "17"))
                        (rule "qeq_literals" (formula "18"))
                        (rule "true_left" (formula "18"))
                        (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0"))
                        (rule "add_zero_right" (formula "22") (term "1,1,0"))
                        (rule "qeq_literals" (formula "22") (term "1,0"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "true_left" (formula "22"))
                        (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0"))
                        (rule "add_zero_right" (formula "22") (term "1,1,0"))
                        (rule "qeq_literals" (formula "22") (term "1,0"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "true_left" (formula "22"))
                        (rule "ifthenelse_split" (formula "30") (term "1"))
                        (branch "msg.length ≥ 1 TRUE"
                           (rule "replace_known_left" (formula "34") (term "0,1,1,0") (ifseqformula "30"))
                           (builtin "One Step Simplification" (formula "34"))
                           (rule "replace_known_left" (formula "33") (term "0,1,1,0") (ifseqformula "30"))
                           (builtin "One Step Simplification" (formula "33"))
                           (rule "replace_known_left" (formula "32") (term "0,1,1,0,0") (ifseqformula "30"))
                           (builtin "One Step Simplification" (formula "32"))
                           (rule "inEqSimp_subsumption1" (formula "27") (ifseqformula "30"))
                           (rule "leq_literals" (formula "27") (term "0"))
                           (builtin "One Step Simplification" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "commute_or_2" (formula "33") (term "0"))
                           (builtin "One Step Simplification" (formula "33"))
                           (rule "commute_or_2" (formula "32") (term "0"))
                           (rule "inEqSimp_or_tautInEq1" (formula "32") (term "0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0,0"))
                           (rule "polySimp_pullOutFactor1" (formula "32") (term "0,1,0,0"))
                           (rule "add_literals" (formula "32") (term "1,0,1,0,0"))
                           (rule "times_zero_1" (formula "32") (term "0,1,0,0"))
                           (rule "leq_literals" (formula "32") (term "1,0,0"))
                           (builtin "One Step Simplification" (formula "32"))
                           (rule "true_left" (formula "32"))
                           (rule "commute_or_2" (formula "31") (term "0,0"))
                           (builtin "One Step Simplification" (formula "31"))
                           (rule "ifthenelse_split" (formula "30") (term "0"))
                           (branch "self.concatenated.length ≥ 1 TRUE"
                              (rule "applyEq" (formula "33") (term "1,1,1,0") (ifseqformula "31"))
                              (rule "applyEq" (formula "27") (term "0") (ifseqformula "31"))
                              (rule "applyEq" (formula "32") (term "1,1,0,0") (ifseqformula "31"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "applyEq" (formula "30") (term "0") (ifseqformula "31"))
                              (rule "inEqSimp_subsumption1" (formula "27") (ifseqformula "29"))
                              (rule "leq_literals" (formula "27") (term "0"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "inEqSimp_or_tautInEq3" (formula "31") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "31") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "31") (term "0,1,0"))
                              (rule "add_literals" (formula "31") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "31") (term "0,1,0"))
                              (rule "leq_literals" (formula "31") (term "1,0"))
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "true_left" (formula "31"))
                              (rule "allLeft" (formula "31") (inst "t=i_2"))
                              (rule "replace_known_left" (formula "31") (term "0,0,0") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "31") (term "0") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "31") (term "0,0"))
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "31"))
                              (rule "andLeft" (formula "1"))
                              (rule "inEqSimp_homoInEq1" (formula "1"))
                              (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                              (rule "add_literals" (formula "1") (term "1,1,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0"))
                              (rule "add_literals" (formula "1") (term "0"))
                              (rule "leq_literals" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "self.concatenated.length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "30"))
                              (rule "inEqSimp_geqRight" (formula "43"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "32") (term "1,1,0,0,0") (ifseqformula "31"))
                              (rule "applyEq" (formula "30") (term "0") (ifseqformula "31"))
                              (rule "qeq_literals" (formula "30"))
                              (rule "closeFalse" (formula "30"))
                           )
                        )
                        (branch "msg.length ≥ 1 FALSE"
                           (builtin "One Step Simplification" (formula "30"))
                           (rule "replace_known_right" (formula "33") (term "0,1,1,0") (ifseqformula "44"))
                           (builtin "One Step Simplification" (formula "33"))
                           (rule "replace_known_right" (formula "31") (term "0,1,1,0,0") (ifseqformula "44"))
                           (builtin "One Step Simplification" (formula "31"))
                           (rule "replace_known_right" (formula "32") (term "0,1,1,0") (ifseqformula "44"))
                           (builtin "One Step Simplification" (formula "32"))
                           (rule "inEqSimp_geqRight" (formula "44"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_antiSymm" (formula "28") (ifseqformula "1"))
                           (rule "applyEq" (formula "33") (term "1,1,0,0,0,0") (ifseqformula "28"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "28"))
                           (rule "leq_literals" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "applyEq" (formula "28") (term "0") (ifseqformula "27"))
                           (rule "qeq_literals" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "applyEq" (formula "32") (term "1,1,1,0,0,0") (ifseqformula "27"))
                           (rule "add_literals" (formula "32") (term "1,1,0,0,0"))
                           (builtin "One Step Simplification" (formula "32"))
                           (rule "applyEq" (formula "33") (term "1,1,0,0,0") (ifseqformula "27"))
                           (rule "inEqSimp_notGeq" (formula "30") (term "0"))
                           (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                           (rule "add_literals" (formula "30") (term "0,0,0"))
                           (rule "add_zero_left" (formula "30") (term "0,0"))
                           (rule "inEqSimp_or_tautInEq0" (formula "31") (term "0,0,0,0"))
                           (rule "add_literals" (formula "31") (term "1,1,0,0,0,0"))
                           (rule "qeq_literals" (formula "31") (term "1,0,0,0,0"))
                           (builtin "One Step Simplification" (formula "31"))
                           (rule "true_left" (formula "31"))
                           (rule "inEqSimp_or_tautInEq1" (formula "32") (term "0,0,0"))
                           (rule "add_zero_right" (formula "32") (term "1,1,0,0,0"))
                           (rule "qeq_literals" (formula "32") (term "1,0,0,0"))
                           (builtin "One Step Simplification" (formula "32"))
                           (rule "true_left" (formula "32"))
                           (rule "commute_or_2" (formula "31") (term "0"))
                           (rule "inEqSimp_or_tautInEq1" (formula "31") (term "0,0"))
                           (rule "add_zero_right" (formula "31") (term "1,1,0,0"))
                           (rule "qeq_literals" (formula "31") (term "1,0,0"))
                           (builtin "One Step Simplification" (formula "31"))
                           (rule "true_left" (formula "31"))
                           (rule "allLeft" (formula "31") (inst "t=i_2"))
                           (rule "replace_known_left" (formula "31") (term "0,0,0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "31"))
                           (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "31") (term "0") (ifseqformula "2"))
                           (rule "qeq_literals" (formula "31") (term "0,0"))
                           (builtin "One Step Simplification" (formula "31"))
                           (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "31"))
                           (rule "andLeft" (formula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "1"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,1,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0"))
                           (rule "add_literals" (formula "1") (term "0"))
                           (rule "leq_literals" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                  )
                  (branch "Case 2"
                     (rule "allRight" (formula "56") (inst "sk=i_1"))
                     (rule "orRight" (formula "56"))
                     (rule "notRight" (formula "57"))
                     (rule "orRight" (formula "57"))
                     (rule "inEqSimp_leqRight" (formula "57"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_geqRight" (formula "58"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_1"))
                     (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "42"))
                     (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "49")) (ifInst ""  (formula "14")))
                     (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "7") (ifseqformula "48"))
                     (rule "ifthenelse_split" (formula "18") (term "0"))
                     (branch "self.unsigned.length ≥ 1 TRUE"
                        (rule "replace_known_left" (formula "24") (term "0,1,1,0") (ifseqformula "18"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "replace_known_left" (formula "22") (term "0,1") (ifseqformula "18"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "replace_known_left" (formula "23") (term "0,1,1,0") (ifseqformula "18"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "18"))
                        (rule "leq_literals" (formula "17") (term "0"))
                        (builtin "One Step Simplification" (formula "17"))
                        (rule "true_left" (formula "17"))
                        (rule "inEqSimp_or_tautInEq1" (formula "23") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "23") (term "1,0"))
                        (rule "polySimp_pullOutFactor1" (formula "23") (term "0,1,0"))
                        (rule "add_literals" (formula "23") (term "1,0,1,0"))
                        (rule "times_zero_1" (formula "23") (term "0,1,0"))
                        (rule "leq_literals" (formula "23") (term "1,0"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "true_left" (formula "23"))
                        (rule "ifthenelse_split" (formula "31") (term "1"))
                        (branch "msg.length ≥ 1 TRUE"
                           (rule "replace_known_left" (formula "34") (term "0,1,1,0") (ifseqformula "31"))
                           (builtin "One Step Simplification" (formula "34"))
                           (rule "replace_known_left" (formula "33") (term "0,1,1,0,0") (ifseqformula "31"))
                           (builtin "One Step Simplification" (formula "33"))
                           (rule "replace_known_left" (formula "35") (term "0,1,1,0") (ifseqformula "31"))
                           (builtin "One Step Simplification" (formula "35"))
                           (rule "inEqSimp_subsumption1" (formula "28") (ifseqformula "31"))
                           (rule "leq_literals" (formula "28") (term "0"))
                           (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "commute_or_2" (formula "33") (term "0"))
                           (rule "inEqSimp_or_tautInEq1" (formula "33") (term "0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0,0"))
                           (rule "polySimp_pullOutFactor1" (formula "33") (term "0,1,0,0"))
                           (rule "add_literals" (formula "33") (term "1,0,1,0,0"))
                           (rule "times_zero_1" (formula "33") (term "0,1,0,0"))
                           (rule "leq_literals" (formula "33") (term "1,0,0"))
                           (builtin "One Step Simplification" (formula "33"))
                           (rule "true_left" (formula "33"))
                           (rule "commute_or_2" (formula "33") (term "0"))
                           (builtin "One Step Simplification" (formula "33"))
                           (rule "commute_or_2" (formula "32") (term "0,0"))
                           (builtin "One Step Simplification" (formula "32"))
                           (rule "ifthenelse_split" (formula "31") (term "0"))
                           (branch "self.concatenated.length ≥ 1 TRUE"
                              (rule "applyEq" (formula "31") (term "0") (ifseqformula "32"))
                              (rule "applyEq" (formula "33") (term "1,1,1,0") (ifseqformula "31"))
                              (rule "applyEq" (formula "28") (term "0") (ifseqformula "31"))
                              (rule "applyEq" (formula "32") (term "1,1,0,0") (ifseqformula "31"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "inEqSimp_subsumption1" (formula "28") (ifseqformula "30"))
                              (rule "leq_literals" (formula "28") (term "0"))
                              (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "inEqSimp_or_tautInEq3" (formula "32") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "32") (term "0,1,0"))
                              (rule "add_literals" (formula "32") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "32") (term "0,1,0"))
                              (rule "leq_literals" (formula "32") (term "1,0"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "true_left" (formula "32"))
                              (rule "allLeft" (formula "33") (inst "t=i_1"))
                              (rule "replace_known_left" (formula "33") (term "0,0,0") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "33"))
                              (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "1"))
                              (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1"))
                              (rule "add_literals" (formula "33") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "33") (term "0,0,1"))
                              (rule "leq_literals" (formula "33") (term "0,1"))
                              (builtin "One Step Simplification" (formula "33"))
                              (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "33"))
                              (rule "qeq_literals" (formula "2") (term "0"))
                              (builtin "One Step Simplification" (formula "2"))
                              (rule "closeFalse" (formula "2"))
                           )
                           (branch "self.concatenated.length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "31"))
                              (rule "inEqSimp_geqRight" (formula "44"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "31") (term "0") (ifseqformula "32"))
                              (rule "qeq_literals" (formula "31"))
                              (rule "closeFalse" (formula "31"))
                           )
                        )
                        (branch "msg.length ≥ 1 FALSE"
                           (builtin "One Step Simplification" (formula "31"))
                           (rule "replace_known_right" (formula "34") (term "0,1,1,0") (ifseqformula "45"))
                           (builtin "One Step Simplification" (formula "34"))
                           (rule "replace_known_right" (formula "33") (term "0,1,1,0") (ifseqformula "45"))
                           (builtin "One Step Simplification" (formula "33"))
                           (rule "replace_known_right" (formula "32") (term "0,1,1,0,0") (ifseqformula "45"))
                           (builtin "One Step Simplification" (formula "32"))
                           (rule "inEqSimp_geqRight" (formula "45"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_antiSymm" (formula "29") (ifseqformula "1"))
                           (rule "applyEq" (formula "35") (term "1,1,1,0,0,0") (ifseqformula "29"))
                           (rule "add_zero_right" (formula "35") (term "1,1,0,0,0"))
                           (builtin "One Step Simplification" (formula "35"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "29"))
                           (rule "leq_literals" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "applyEq" (formula "35") (term "1,1,0,0,0") (ifseqformula "28"))
                           (rule "applyEq" (formula "29") (term "0") (ifseqformula "28"))
                           (rule "qeq_literals" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "applyEq" (formula "32") (term "1,1,0,0,0,0") (ifseqformula "28"))
                           (rule "inEqSimp_notGeq" (formula "31") (term "0"))
                           (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                           (rule "add_literals" (formula "31") (term "0,0,0"))
                           (rule "add_zero_left" (formula "31") (term "0,0"))
                           (rule "inEqSimp_or_tautInEq1" (formula "34") (term "0,0,0"))
                           (rule "add_zero_right" (formula "34") (term "1,1,0,0,0"))
                           (rule "qeq_literals" (formula "34") (term "1,0,0,0"))
                           (builtin "One Step Simplification" (formula "34"))
                           (rule "true_left" (formula "34"))
                           (rule "inEqSimp_or_tautInEq0" (formula "32") (term "0,0,0,0"))
                           (rule "add_zero_right" (formula "32") (term "1,1,0,0,0,0"))
                           (rule "qeq_literals" (formula "32") (term "1,0,0,0,0"))
                           (builtin "One Step Simplification" (formula "32"))
                           (rule "true_left" (formula "32"))
                           (rule "commute_or_2" (formula "32") (term "0"))
                           (rule "inEqSimp_or_tautInEq1" (formula "32") (term "0,0"))
                           (rule "add_literals" (formula "32") (term "1,1,0,0"))
                           (rule "qeq_literals" (formula "32") (term "1,0,0"))
                           (builtin "One Step Simplification" (formula "32"))
                           (rule "true_left" (formula "32"))
                           (rule "allLeft" (formula "33") (inst "t=i_1"))
                           (rule "replace_known_left" (formula "33") (term "0,0,0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "33"))
                           (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "33") (term "0") (ifseqformula "2"))
                           (rule "qeq_literals" (formula "33") (term "0,0"))
                           (builtin "One Step Simplification" (formula "33"))
                           (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "33"))
                           (rule "andLeft" (formula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "1"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,1,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0"))
                           (rule "add_literals" (formula "1") (term "0"))
                           (rule "leq_literals" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                     (branch "self.unsigned.length ≥ 1 FALSE"
                        (rule "qeq_literals" (formula "18"))
                        (rule "true_left" (formula "18"))
                        (rule "replace_known_right" (formula "22") (term "0,1,1,0") (ifseqformula "46"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "replace_known_right" (formula "23") (term "0,1,1,0") (ifseqformula "46"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "replace_known_right" (formula "21") (term "0,1") (ifseqformula "46"))
                        (builtin "One Step Simplification" (formula "21"))
                        (rule "inEqSimp_geqRight" (formula "46"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_antiSymm" (formula "18") (ifseqformula "1"))
                        (rule "applyEq" (formula "1") (term "0") (ifseqformula "18"))
                        (rule "leq_literals" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "applyEq" (formula "23") (term "1,1,0,0") (ifseqformula "17"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "applyEq" (formula "24") (term "1,1,1,0,0") (ifseqformula "17"))
                        (rule "add_zero_right" (formula "24") (term "1,1,0,0"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "applyEq" (formula "18") (term "0") (ifseqformula "17"))
                        (rule "qeq_literals" (formula "18"))
                        (rule "true_left" (formula "18"))
                        (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0"))
                        (rule "add_zero_right" (formula "22") (term "1,1,0"))
                        (rule "qeq_literals" (formula "22") (term "1,0"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "true_left" (formula "22"))
                        (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0"))
                        (rule "add_zero_right" (formula "22") (term "1,1,0"))
                        (rule "qeq_literals" (formula "22") (term "1,0"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "true_left" (formula "22"))
                        (rule "ifthenelse_split" (formula "30") (term "1"))
                        (branch "msg.length ≥ 1 TRUE"
                           (rule "replace_known_left" (formula "34") (term "0,1,1,0") (ifseqformula "30"))
                           (builtin "One Step Simplification" (formula "34"))
                           (rule "replace_known_left" (formula "33") (term "0,1,1,0") (ifseqformula "30"))
                           (builtin "One Step Simplification" (formula "33"))
                           (rule "replace_known_left" (formula "32") (term "0,1,1,0,0") (ifseqformula "30"))
                           (builtin "One Step Simplification" (formula "32"))
                           (rule "inEqSimp_subsumption1" (formula "27") (ifseqformula "30"))
                           (rule "leq_literals" (formula "27") (term "0"))
                           (builtin "One Step Simplification" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "commute_or_2" (formula "33") (term "0"))
                           (builtin "One Step Simplification" (formula "33"))
                           (rule "commute_or_2" (formula "32") (term "0"))
                           (rule "inEqSimp_or_tautInEq1" (formula "32") (term "0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0,0"))
                           (rule "polySimp_pullOutFactor1" (formula "32") (term "0,1,0,0"))
                           (rule "add_literals" (formula "32") (term "1,0,1,0,0"))
                           (rule "times_zero_1" (formula "32") (term "0,1,0,0"))
                           (rule "leq_literals" (formula "32") (term "1,0,0"))
                           (builtin "One Step Simplification" (formula "32"))
                           (rule "true_left" (formula "32"))
                           (rule "commute_or_2" (formula "31") (term "0,0"))
                           (builtin "One Step Simplification" (formula "31"))
                           (rule "ifthenelse_split" (formula "30") (term "0"))
                           (branch "self.concatenated.length ≥ 1 TRUE"
                              (rule "applyEq" (formula "33") (term "1,1,1,0") (ifseqformula "31"))
                              (rule "applyEq" (formula "27") (term "0") (ifseqformula "31"))
                              (rule "applyEq" (formula "32") (term "1,1,0,0") (ifseqformula "31"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "applyEq" (formula "30") (term "0") (ifseqformula "31"))
                              (rule "inEqSimp_subsumption1" (formula "27") (ifseqformula "29"))
                              (rule "leq_literals" (formula "27") (term "0"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "inEqSimp_or_tautInEq3" (formula "31") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "31") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "31") (term "0,1,0"))
                              (rule "add_literals" (formula "31") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "31") (term "0,1,0"))
                              (rule "leq_literals" (formula "31") (term "1,0"))
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "true_left" (formula "31"))
                              (rule "allLeft" (formula "32") (inst "t=i_1"))
                              (rule "replace_known_left" (formula "32") (term "0,0,0") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "32") (term "0") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "32") (term "0,0"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "inEqSimp_contradInEq1" (formula "32") (ifseqformula "1"))
                              (rule "andLeft" (formula "32"))
                              (rule "inEqSimp_homoInEq1" (formula "32"))
                              (rule "polySimp_pullOutFactor1b" (formula "32") (term "0"))
                              (rule "add_literals" (formula "32") (term "1,1,0"))
                              (rule "times_zero_1" (formula "32") (term "1,0"))
                              (rule "add_literals" (formula "32") (term "0"))
                              (rule "leq_literals" (formula "32"))
                              (rule "closeFalse" (formula "32"))
                           )
                           (branch "self.concatenated.length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "30"))
                              (rule "inEqSimp_geqRight" (formula "43"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "32") (term "1,1,0,0,0") (ifseqformula "31"))
                              (rule "applyEq" (formula "30") (term "0") (ifseqformula "31"))
                              (rule "qeq_literals" (formula "30"))
                              (rule "closeFalse" (formula "30"))
                           )
                        )
                        (branch "msg.length ≥ 1 FALSE"
                           (builtin "One Step Simplification" (formula "30"))
                           (rule "replace_known_right" (formula "33") (term "0,1,1,0") (ifseqformula "44"))
                           (builtin "One Step Simplification" (formula "33"))
                           (rule "replace_known_right" (formula "31") (term "0,1,1,0,0") (ifseqformula "44"))
                           (builtin "One Step Simplification" (formula "31"))
                           (rule "replace_known_right" (formula "32") (term "0,1,1,0") (ifseqformula "44"))
                           (builtin "One Step Simplification" (formula "32"))
                           (rule "inEqSimp_geqRight" (formula "44"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_antiSymm" (formula "28") (ifseqformula "1"))
                           (rule "applyEq" (formula "33") (term "1,1,0,0,0,0") (ifseqformula "28"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "28"))
                           (rule "leq_literals" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "applyEq" (formula "28") (term "0") (ifseqformula "27"))
                           (rule "qeq_literals" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "applyEq" (formula "32") (term "1,1,1,0,0,0") (ifseqformula "27"))
                           (rule "add_literals" (formula "32") (term "1,1,0,0,0"))
                           (builtin "One Step Simplification" (formula "32"))
                           (rule "applyEq" (formula "33") (term "1,1,0,0,0") (ifseqformula "27"))
                           (rule "inEqSimp_notGeq" (formula "30") (term "0"))
                           (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                           (rule "add_literals" (formula "30") (term "0,0,0"))
                           (rule "add_zero_left" (formula "30") (term "0,0"))
                           (rule "inEqSimp_or_tautInEq0" (formula "31") (term "0,0,0,0"))
                           (rule "add_literals" (formula "31") (term "1,1,0,0,0,0"))
                           (rule "qeq_literals" (formula "31") (term "1,0,0,0,0"))
                           (builtin "One Step Simplification" (formula "31"))
                           (rule "true_left" (formula "31"))
                           (rule "inEqSimp_or_tautInEq1" (formula "32") (term "0,0,0"))
                           (rule "add_zero_right" (formula "32") (term "1,1,0,0,0"))
                           (rule "qeq_literals" (formula "32") (term "1,0,0,0"))
                           (builtin "One Step Simplification" (formula "32"))
                           (rule "true_left" (formula "32"))
                           (rule "commute_or_2" (formula "31") (term "0"))
                           (rule "inEqSimp_or_tautInEq1" (formula "31") (term "0,0"))
                           (rule "add_zero_right" (formula "31") (term "1,1,0,0"))
                           (rule "qeq_literals" (formula "31") (term "1,0,0"))
                           (builtin "One Step Simplification" (formula "31"))
                           (rule "true_left" (formula "31"))
                           (rule "allLeft" (formula "32") (inst "t=i_1"))
                           (rule "replace_known_left" (formula "32") (term "0,0,0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "32"))
                           (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "32") (term "0") (ifseqformula "2"))
                           (rule "qeq_literals" (formula "32") (term "0,0"))
                           (builtin "One Step Simplification" (formula "32"))
                           (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "32"))
                           (rule "andLeft" (formula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "1"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,1,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0"))
                           (rule "add_literals" (formula "1") (term "0"))
                           (rule "leq_literals" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                  )
               )
               (branch "Case 2"
                  (rule "allRight" (formula "56") (inst "sk=i_0"))
                  (rule "orRight" (formula "56"))
                  (rule "orRight" (formula "56"))
                  (rule "notRight" (formula "58"))
                  (rule "inEqSimp_leqRight" (formula "57"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_geqRight" (formula "58"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_0"))
                  (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "42"))
                  (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "50")) (ifInst ""  (formula "26")))
                  (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "7") (ifseqformula "49"))
                  (rule "ifthenelse_split" (formula "18") (term "0"))
                  (branch "self.unsigned.length ≥ 1 TRUE"
                     (rule "replace_known_left" (formula "24") (term "0,1,1,0") (ifseqformula "18"))
                     (builtin "One Step Simplification" (formula "24"))
                     (rule "replace_known_left" (formula "23") (term "0,1,1,0") (ifseqformula "18"))
                     (builtin "One Step Simplification" (formula "23"))
                     (rule "replace_known_left" (formula "22") (term "0,1") (ifseqformula "18"))
                     (builtin "One Step Simplification" (formula "22"))
                     (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "18"))
                     (rule "leq_literals" (formula "17") (term "0"))
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "true_left" (formula "17"))
                     (rule "inEqSimp_or_tautInEq1" (formula "23") (term "0"))
                     (rule "inEqSimp_homoInEq1" (formula "23") (term "1,0"))
                     (rule "polySimp_pullOutFactor1" (formula "23") (term "0,1,0"))
                     (rule "add_literals" (formula "23") (term "1,0,1,0"))
                     (rule "times_zero_1" (formula "23") (term "0,1,0"))
                     (rule "leq_literals" (formula "23") (term "1,0"))
                     (builtin "One Step Simplification" (formula "23"))
                     (rule "true_left" (formula "23"))
                     (rule "ifthenelse_split" (formula "31") (term "1"))
                     (branch "msg.length ≥ 1 TRUE"
                        (rule "replace_known_left" (formula "35") (term "0,1,1,0") (ifseqformula "31"))
                        (builtin "One Step Simplification" (formula "35"))
                        (rule "replace_known_left" (formula "33") (term "0,1,1,0,0") (ifseqformula "31"))
                        (builtin "One Step Simplification" (formula "33"))
                        (rule "replace_known_left" (formula "34") (term "0,1,1,0") (ifseqformula "31"))
                        (builtin "One Step Simplification" (formula "34"))
                        (rule "inEqSimp_subsumption1" (formula "28") (ifseqformula "31"))
                        (rule "leq_literals" (formula "28") (term "0"))
                        (builtin "One Step Simplification" (formula "28"))
                        (rule "true_left" (formula "28"))
                        (rule "commute_or_2" (formula "34") (term "0"))
                        (builtin "One Step Simplification" (formula "34"))
                        (rule "commute_or_2" (formula "33") (term "0"))
                        (rule "inEqSimp_or_tautInEq1" (formula "33") (term "0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor1" (formula "33") (term "0,1,0,0"))
                        (rule "add_literals" (formula "33") (term "1,0,1,0,0"))
                        (rule "times_zero_1" (formula "33") (term "0,1,0,0"))
                        (rule "leq_literals" (formula "33") (term "1,0,0"))
                        (builtin "One Step Simplification" (formula "33"))
                        (rule "true_left" (formula "33"))
                        (rule "commute_or_2" (formula "32") (term "0,0"))
                        (builtin "One Step Simplification" (formula "32"))
                        (rule "ifthenelse_split" (formula "31") (term "0"))
                        (branch "self.concatenated.length ≥ 1 TRUE"
                           (rule "applyEq" (formula "31") (term "0") (ifseqformula "32"))
                           (rule "applyEq" (formula "28") (term "0") (ifseqformula "31"))
                           (rule "applyEq" (formula "32") (term "1,1,0,0") (ifseqformula "31"))
                           (builtin "One Step Simplification" (formula "32"))
                           (rule "applyEq" (formula "33") (term "1,1,1,0") (ifseqformula "31"))
                           (rule "inEqSimp_subsumption1" (formula "28") (ifseqformula "30"))
                           (rule "leq_literals" (formula "28") (term "0"))
                           (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "inEqSimp_or_tautInEq3" (formula "32") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0"))
                           (rule "polySimp_pullOutFactor1" (formula "32") (term "0,1,0"))
                           (rule "add_literals" (formula "32") (term "1,0,1,0"))
                           (rule "times_zero_1" (formula "32") (term "0,1,0"))
                           (rule "leq_literals" (formula "32") (term "1,0"))
                           (builtin "One Step Simplification" (formula "32"))
                           (rule "true_left" (formula "32"))
                           (rule "allLeft" (formula "34") (inst "t=i_0"))
                           (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "34"))
                           (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                           (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "34") (term "0,0,1"))
                           (rule "leq_literals" (formula "34") (term "0,1"))
                           (builtin "One Step Simplification" (formula "34"))
                           (rule "inEqSimp_contradInEq1" (formula "34") (ifseqformula "2"))
                           (rule "qeq_literals" (formula "34") (term "0"))
                           (builtin "One Step Simplification" (formula "34"))
                           (rule "closeFalse" (formula "34"))
                        )
                        (branch "self.concatenated.length ≥ 1 FALSE"
                           (rule "eqSymm" (formula "31"))
                           (rule "inEqSimp_geqRight" (formula "44"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "applyEq" (formula "31") (term "0") (ifseqformula "32"))
                           (rule "qeq_literals" (formula "31"))
                           (rule "closeFalse" (formula "31"))
                        )
                     )
                     (branch "msg.length ≥ 1 FALSE"
                        (builtin "One Step Simplification" (formula "31"))
                        (rule "replace_known_right" (formula "33") (term "0,1,1,0") (ifseqformula "45"))
                        (builtin "One Step Simplification" (formula "33"))
                        (rule "replace_known_right" (formula "34") (term "0,1,1,0") (ifseqformula "45"))
                        (builtin "One Step Simplification" (formula "34"))
                        (rule "replace_known_right" (formula "32") (term "0,1,1,0,0") (ifseqformula "45"))
                        (builtin "One Step Simplification" (formula "32"))
                        (rule "inEqSimp_geqRight" (formula "45"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_antiSymm" (formula "29") (ifseqformula "1"))
                        (rule "applyEq" (formula "36") (term "1,1,0,0,0") (ifseqformula "29"))
                        (rule "applyEq" (formula "34") (term "1,1,0,0,0,0") (ifseqformula "29"))
                        (rule "applyEq" (formula "35") (term "1,1,1,0,0,0") (ifseqformula "29"))
                        (rule "add_zero_right" (formula "35") (term "1,1,0,0,0"))
                        (builtin "One Step Simplification" (formula "35"))
                        (rule "applyEq" (formula "1") (term "0") (ifseqformula "29"))
                        (rule "leq_literals" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "applyEq" (formula "29") (term "0") (ifseqformula "28"))
                        (rule "qeq_literals" (formula "29"))
                        (rule "true_left" (formula "29"))
                        (rule "inEqSimp_notGeq" (formula "31") (term "0"))
                        (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                        (rule "add_literals" (formula "31") (term "0,0,0"))
                        (rule "add_zero_left" (formula "31") (term "0,0"))
                        (rule "inEqSimp_or_tautInEq1" (formula "34") (term "0,0,0"))
                        (rule "add_zero_right" (formula "34") (term "1,1,0,0,0"))
                        (rule "qeq_literals" (formula "34") (term "1,0,0,0"))
                        (builtin "One Step Simplification" (formula "34"))
                        (rule "true_left" (formula "34"))
                        (rule "inEqSimp_or_tautInEq0" (formula "32") (term "0,0,0,0"))
                        (rule "add_zero_right" (formula "32") (term "1,1,0,0,0,0"))
                        (rule "qeq_literals" (formula "32") (term "1,0,0,0,0"))
                        (builtin "One Step Simplification" (formula "32"))
                        (rule "true_left" (formula "32"))
                        (rule "commute_or_2" (formula "32") (term "0"))
                        (rule "inEqSimp_or_tautInEq1" (formula "32") (term "0,0"))
                        (rule "add_literals" (formula "32") (term "1,1,0,0"))
                        (rule "qeq_literals" (formula "32") (term "1,0,0"))
                        (builtin "One Step Simplification" (formula "32"))
                        (rule "true_left" (formula "32"))
                        (rule "allLeft" (formula "34") (inst "t=i_0"))
                        (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "34"))
                        (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "34") (term "0") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "34") (term "0,0"))
                        (builtin "One Step Simplification" (formula "34"))
                        (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "34"))
                        (rule "andLeft" (formula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "1"))
                        (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "1,1,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0"))
                        (rule "add_literals" (formula "1") (term "0"))
                        (rule "leq_literals" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch "self.unsigned.length ≥ 1 FALSE"
                     (rule "qeq_literals" (formula "18"))
                     (rule "true_left" (formula "18"))
                     (rule "replace_known_right" (formula "22") (term "0,1,1,0") (ifseqformula "46"))
                     (builtin "One Step Simplification" (formula "22"))
                     (rule "replace_known_right" (formula "21") (term "0,1") (ifseqformula "46"))
                     (builtin "One Step Simplification" (formula "21"))
                     (rule "replace_known_right" (formula "23") (term "0,1,1,0") (ifseqformula "46"))
                     (builtin "One Step Simplification" (formula "23"))
                     (rule "inEqSimp_geqRight" (formula "46"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_antiSymm" (formula "18") (ifseqformula "1"))
                     (rule "applyEq" (formula "24") (term "1,1,0,0") (ifseqformula "18"))
                     (builtin "One Step Simplification" (formula "24"))
                     (rule "applyEq" (formula "1") (term "0") (ifseqformula "18"))
                     (rule "leq_literals" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "applyEq" (formula "24") (term "1,1,1,0,0") (ifseqformula "17"))
                     (rule "add_zero_right" (formula "24") (term "1,1,0,0"))
                     (builtin "One Step Simplification" (formula "24"))
                     (rule "applyEq" (formula "18") (term "0") (ifseqformula "17"))
                     (rule "qeq_literals" (formula "18"))
                     (rule "true_left" (formula "18"))
                     (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0"))
                     (rule "add_zero_right" (formula "22") (term "1,1,0"))
                     (rule "qeq_literals" (formula "22") (term "1,0"))
                     (builtin "One Step Simplification" (formula "22"))
                     (rule "true_left" (formula "22"))
                     (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0"))
                     (rule "add_zero_right" (formula "22") (term "1,1,0"))
                     (rule "qeq_literals" (formula "22") (term "1,0"))
                     (builtin "One Step Simplification" (formula "22"))
                     (rule "true_left" (formula "22"))
                     (rule "ifthenelse_split" (formula "30") (term "1"))
                     (branch "msg.length ≥ 1 TRUE"
                        (rule "replace_known_left" (formula "32") (term "0,1,1,0,0") (ifseqformula "30"))
                        (builtin "One Step Simplification" (formula "32"))
                        (rule "replace_known_left" (formula "33") (term "0,1,1,0") (ifseqformula "30"))
                        (builtin "One Step Simplification" (formula "33"))
                        (rule "replace_known_left" (formula "34") (term "0,1,1,0") (ifseqformula "30"))
                        (builtin "One Step Simplification" (formula "34"))
                        (rule "inEqSimp_subsumption1" (formula "27") (ifseqformula "30"))
                        (rule "leq_literals" (formula "27") (term "0"))
                        (builtin "One Step Simplification" (formula "27"))
                        (rule "true_left" (formula "27"))
                        (rule "commute_or_2" (formula "32") (term "0"))
                        (rule "inEqSimp_or_tautInEq1" (formula "32") (term "0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor1" (formula "32") (term "0,1,0,0"))
                        (rule "add_literals" (formula "32") (term "1,0,1,0,0"))
                        (rule "times_zero_1" (formula "32") (term "0,1,0,0"))
                        (rule "leq_literals" (formula "32") (term "1,0,0"))
                        (builtin "One Step Simplification" (formula "32"))
                        (rule "true_left" (formula "32"))
                        (rule "commute_or_2" (formula "32") (term "0"))
                        (builtin "One Step Simplification" (formula "32"))
                        (rule "commute_or_2" (formula "31") (term "0,0"))
                        (builtin "One Step Simplification" (formula "31"))
                        (rule "ifthenelse_split" (formula "30") (term "0"))
                        (branch "self.concatenated.length ≥ 1 TRUE"
                           (rule "applyEq" (formula "27") (term "0") (ifseqformula "31"))
                           (rule "applyEq" (formula "30") (term "0") (ifseqformula "31"))
                           (rule "applyEq" (formula "32") (term "1,1,1,0") (ifseqformula "30"))
                           (rule "applyEq" (formula "31") (term "1,1,0,0") (ifseqformula "30"))
                           (builtin "One Step Simplification" (formula "31"))
                           (rule "inEqSimp_subsumption1" (formula "27") (ifseqformula "29"))
                           (rule "leq_literals" (formula "27") (term "0"))
                           (builtin "One Step Simplification" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "inEqSimp_or_tautInEq3" (formula "31") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "31") (term "1,0"))
                           (rule "polySimp_pullOutFactor1" (formula "31") (term "0,1,0"))
                           (rule "add_literals" (formula "31") (term "1,0,1,0"))
                           (rule "times_zero_1" (formula "31") (term "0,1,0"))
                           (rule "leq_literals" (formula "31") (term "1,0"))
                           (builtin "One Step Simplification" (formula "31"))
                           (rule "true_left" (formula "31"))
                           (rule "allLeft" (formula "33") (inst "t=i_0"))
                           (rule "replace_known_left" (formula "33") (term "0,0,0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "33"))
                           (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "33") (term "0") (ifseqformula "2"))
                           (rule "qeq_literals" (formula "33") (term "0,0"))
                           (builtin "One Step Simplification" (formula "33"))
                           (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "33"))
                           (rule "andLeft" (formula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "1"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,1,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0"))
                           (rule "add_literals" (formula "1") (term "0"))
                           (rule "leq_literals" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "self.concatenated.length ≥ 1 FALSE"
                           (rule "eqSymm" (formula "30"))
                           (rule "inEqSimp_geqRight" (formula "43"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "applyEq" (formula "33") (term "1,1,0,0") (ifseqformula "31"))
                           (rule "applyEq" (formula "30") (term "0") (ifseqformula "31"))
                           (rule "qeq_literals" (formula "30"))
                           (rule "closeFalse" (formula "30"))
                        )
                     )
                     (branch "msg.length ≥ 1 FALSE"
                        (builtin "One Step Simplification" (formula "30"))
                        (rule "replace_known_right" (formula "31") (term "0,1,1,0,0") (ifseqformula "44"))
                        (builtin "One Step Simplification" (formula "31"))
                        (rule "replace_known_right" (formula "32") (term "0,1,1,0") (ifseqformula "44"))
                        (builtin "One Step Simplification" (formula "32"))
                        (rule "replace_known_right" (formula "33") (term "0,1,1,0") (ifseqformula "44"))
                        (builtin "One Step Simplification" (formula "33"))
                        (rule "inEqSimp_geqRight" (formula "44"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_antiSymm" (formula "28") (ifseqformula "1"))
                        (rule "applyEq" (formula "1") (term "0") (ifseqformula "28"))
                        (rule "leq_literals" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "applyEq" (formula "32") (term "1,1,0,0,0,0") (ifseqformula "27"))
                        (rule "applyEq" (formula "34") (term "1,1,0,0,0") (ifseqformula "27"))
                        (rule "applyEq" (formula "33") (term "1,1,1,0,0,0") (ifseqformula "27"))
                        (rule "add_zero_right" (formula "33") (term "1,1,0,0,0"))
                        (builtin "One Step Simplification" (formula "33"))
                        (rule "applyEq" (formula "28") (term "0") (ifseqformula "27"))
                        (rule "qeq_literals" (formula "28"))
                        (rule "true_left" (formula "28"))
                        (rule "inEqSimp_notGeq" (formula "30") (term "0"))
                        (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                        (rule "add_literals" (formula "30") (term "0,0,0"))
                        (rule "add_zero_left" (formula "30") (term "0,0"))
                        (rule "inEqSimp_or_tautInEq0" (formula "31") (term "0,0,0,0"))
                        (rule "add_literals" (formula "31") (term "1,1,0,0,0,0"))
                        (rule "qeq_literals" (formula "31") (term "1,0,0,0,0"))
                        (builtin "One Step Simplification" (formula "31"))
                        (rule "true_left" (formula "31"))
                        (rule "inEqSimp_or_tautInEq1" (formula "32") (term "0,0,0"))
                        (rule "add_zero_right" (formula "32") (term "1,1,0,0,0"))
                        (rule "qeq_literals" (formula "32") (term "1,0,0,0"))
                        (builtin "One Step Simplification" (formula "32"))
                        (rule "true_left" (formula "32"))
                        (rule "commute_or_2" (formula "31") (term "0"))
                        (rule "inEqSimp_or_tautInEq1" (formula "31") (term "0,0"))
                        (rule "add_zero_right" (formula "31") (term "1,1,0,0"))
                        (rule "qeq_literals" (formula "31") (term "1,0,0"))
                        (builtin "One Step Simplification" (formula "31"))
                        (rule "true_left" (formula "31"))
                        (rule "allLeft" (formula "33") (inst "t=i_0"))
                        (rule "replace_known_left" (formula "33") (term "0,0,0") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "33"))
                        (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "33") (term "0") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "33") (term "0,0"))
                        (builtin "One Step Simplification" (formula "33"))
                        (rule "inEqSimp_contradInEq1" (formula "33") (ifseqformula "1"))
                        (rule "andLeft" (formula "33"))
                        (rule "inEqSimp_homoInEq1" (formula "33"))
                        (rule "polySimp_pullOutFactor1b" (formula "33") (term "0"))
                        (rule "add_literals" (formula "33") (term "1,1,0"))
                        (rule "times_zero_1" (formula "33") (term "1,0"))
                        (rule "add_literals" (formula "33") (term "0"))
                        (rule "leq_literals" (formula "33"))
                        (rule "closeFalse" (formula "33"))
                     )
                  )
               )
            )
            (branch "Case 2"
               (rule "allRight" (formula "56") (inst "sk=f_0"))
               (rule "allRight" (formula "56") (inst "sk=o_0"))
               (rule "orRight" (formula "56"))
               (rule "pullOutSelect" (formula "57") (term "0") (inst "selectSK=f_0_0"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "39"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")))
               (rule "applyEqReverse" (formula "58") (term "0") (ifseqformula "1"))
               (builtin "One Step Simplification" (formula "58"))
               (rule "closeTrue" (formula "58"))
            )
         )
         (branch "ClassCastException (!(exc_0 instanceof java.lang.Throwable))"
            (builtin "One Step Simplification" (formula "56"))
            (rule "closeTrue" (formula "56"))
         )
      )
      (branch "if exc_0 instanceof java.lang.Throwable false"
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")))
         (rule "closeFalse" (formula "1"))
      )
   )
)
(branch "Pre (splidAndCheck)"
   (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "8")) (ifInst ""  (formula "10")) (ifInst ""  (formula "1")) (ifInst ""  (formula "10")))
   (rule "eqSymm" (formula "7"))
   (rule "eqSymm" (formula "11") (term "0"))
   (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "10"))
   (builtin "One Step Simplification" (formula "4"))
   (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "4"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "array2seqDef" (formula "7") (term "0") (inst "u=u"))
   (rule "array2seqDef" (formula "7") (term "1") (inst "u=u"))
   (rule "narrowSelectArrayType" (formula "7") (term "2,1") (ifseqformula "1") (ifseqformula "10"))
   (rule "array2seqDef" (formula "11") (term "1") (inst "u=u"))
   (rule "eqSymm" (formula "11"))
   (rule "narrowSelectArrayType" (formula "11") (term "2,0") (ifseqformula "1") (ifseqformula "10"))
   (rule "eqSeqDef" (formula "7") (inst "iv=iv"))
   (rule "andLeft" (formula "7"))
   (rule "getOfSeqDef" (formula "8") (term "1,1,0"))
   (rule "castDel" (formula "8") (term "1,1,1,0"))
   (rule "castDel" (formula "8") (term "2,1,1,0"))
   (rule "add_zero_right" (formula "8") (term "0,2,1,1,1,0"))
   (rule "polySimp_elimSub" (formula "8") (term "1,1,0,1,1,0"))
   (rule "times_zero_2" (formula "8") (term "1,1,1,0,1,1,0"))
   (rule "add_zero_right" (formula "8") (term "1,1,0,1,1,0"))
   (rule "lenOfSeqDef" (formula "7") (term "0"))
   (rule "eqSymm" (formula "7"))
   (rule "polySimp_elimSub" (formula "7") (term "1,1"))
   (rule "times_zero_2" (formula "7") (term "1,1,1"))
   (rule "add_zero_right" (formula "7") (term "1,1"))
   (rule "lenOfSeqDef" (formula "8") (term "1,1,0,0"))
   (rule "polySimp_elimSub" (formula "8") (term "1,1,1,0,0"))
   (rule "times_zero_2" (formula "8") (term "1,1,1,1,0,0"))
   (rule "add_zero_right" (formula "8") (term "1,1,1,0,0"))
   (rule "getOfSeqDef" (formula "8") (term "0,1,0"))
   (rule "castDel" (formula "8") (term "1,0,1,0"))
   (rule "castDel" (formula "8") (term "2,0,1,0"))
   (rule "add_zero_right" (formula "8") (term "0,2,1,0,1,0"))
   (rule "polySimp_elimSub" (formula "8") (term "1,1,0,0,1,0"))
   (rule "times_zero_2" (formula "8") (term "1,1,1,0,0,1,0"))
   (rule "add_zero_right" (formula "8") (term "1,1,0,0,1,0"))
   (rule "lenOfSeqDef" (formula "7") (term "0"))
   (rule "eqSymm" (formula "7"))
   (rule "polySimp_elimSub" (formula "7") (term "1,1"))
   (rule "times_zero_2" (formula "7") (term "1,1,1"))
   (rule "add_zero_right" (formula "7") (term "1,1"))
   (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,1,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "8") (term "0,1,1,0,0"))
   (rule "add_zero_right" (formula "8") (term "0,0,1,1,0,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0"))
   (rule "add_zero_right" (formula "7") (term "0,0,0"))
   (rule "eqSymm" (formula "7"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0"))
   (rule "add_zero_right" (formula "7") (term "0,0,0"))
   (rule "eqSymm" (formula "7"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,1,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,1,0"))
   (rule "applyEq" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "7"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,1,1,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,1,0,1,1,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,1,1,0"))
   (rule "mul_literals" (formula "8") (term "0,1,1,0,1,1,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,1,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,1,0"))
   (rule "mul_literals" (formula "8") (term "0,1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,1,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,0"))
   (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0"))
   (rule "eqSymm" (formula "7"))
   (rule "polySimp_elimOne" (formula "7") (term "0,0,1"))
   (rule "applyEq" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "7"))
   (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,0"))
   (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0"))
   (rule "eqSymm" (formula "7"))
   (rule "polySimp_elimOne" (formula "7") (term "0,0,1"))
   (rule "applyEq" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "7"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
   (rule "equalityToSeqGetAndSeqLenRight" (formula "12") (inst "iv=iv"))
   (rule "getOfSeqDef" (formula "12") (term "0,1,0,1"))
   (rule "castDel" (formula "12") (term "1,0,1,0,1"))
   (rule "castDel" (formula "12") (term "2,0,1,0,1"))
   (rule "add_zero_right" (formula "12") (term "0,2,1,0,1,0,1"))
   (rule "polySimp_elimSub" (formula "12") (term "1,1,0,0,1,0,1"))
   (rule "mul_literals" (formula "12") (term "1,1,1,0,0,1,0,1"))
   (rule "add_zero_right" (formula "12") (term "1,1,0,0,1,0,1"))
   (rule "lenOfSeqDef" (formula "12") (term "1,1,0,0,1"))
   (rule "polySimp_elimSub" (formula "12") (term "1,1,1,0,0,1"))
   (rule "mul_literals" (formula "12") (term "1,1,1,1,0,0,1"))
   (rule "add_zero_right" (formula "12") (term "1,1,1,0,0,1"))
   (rule "lenOfSeqDef" (formula "12") (term "0,0"))
   (rule "polySimp_elimSub" (formula "12") (term "1,0,0"))
   (rule "times_zero_2" (formula "12") (term "1,1,0,0"))
   (rule "add_zero_right" (formula "12") (term "1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,0,1"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "12") (term "0,1,1,0,0,1"))
   (rule "add_zero_right" (formula "12") (term "0,0,1,1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,1,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
   (rule "add_zero_right" (formula "12") (term "0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,1,0,1"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,1,0,1"))
   (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,1,0,1"))
   (rule "mul_literals" (formula "12") (term "0,1,1,0,0,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,1,0,1"))
   (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,1,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,0"))
   (rule "polySimp_elimOne" (formula "12") (term "0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,1"))
   (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,1"))
   (rule "mul_literals" (formula "12") (term "0,1,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,1,1,1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "12") (term "0,0,1,1,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "12") (term "0,0,1,1,1,0,0,1"))
   (rule "nnf_imp2or" (formula "8") (term "0"))
   (rule "nnf_imp2or" (formula "12") (term "0,1"))
   (rule "nnf_notAnd" (formula "8") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
   (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
   (rule "mul_literals" (formula "8") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "12") (term "0,0,1"))
   (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,1"))
   (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,1"))
   (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,1"))
   (rule "mul_literals" (formula "12") (term "1,0,0,0,1"))
   (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,1"))
   (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,1"))
   (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,1"))
   (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,1"))
   (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,1"))
   (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,1"))
   (rule "Definition_axiom_for_ghostFieldsPre_in_verif_selectvoting_system_core_MixServer" (formula "6") (term "0") (inst "i=i"))
   (builtin "One Step Simplification" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "eqSymm" (formula "12"))
   (rule "eqSymm" (formula "11"))
   (rule "eqSymm" (formula "10"))
   (rule "eqSymm" (formula "9"))
   (rule "eqSymm" (formula "7") (term "1,0"))
   (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
   (rule "applyEq" (formula "18") (term "0,1,0") (ifseqformula "9"))
   (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "12"))
   (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "11"))
   (rule "applyEq" (formula "12") (term "1") (ifseqformula "11"))
   (rule "applyEq" (formula "7") (term "0,1,0,0,1,0,0") (ifseqformula "11"))
   (rule "applyEq" (formula "18") (term "0,0,0,1,1,0,1") (ifseqformula "12"))
   (rule "applyEq" (formula "18") (term "0,1,1,0,1") (ifseqformula "9"))
   (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
   (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
   (rule "array2seqDef" (formula "10") (term "1,1,0") (inst "u=u"))
   (rule "array2seqDef" (formula "10") (term "0,0") (inst "u=u"))
   (rule "array2seqDef" (formula "10") (term "1") (inst "u=u"))
   (rule "array2seqDef" (formula "10") (term "0,1,0") (inst "u=u"))
   (rule "array2seqDef" (formula "9") (term "1") (inst "u=u"))
   (rule "eqSymm" (formula "9"))
   (rule "applyEq" (formula "10") (term "1,1,0") (ifseqformula "9"))
   (rule "array2seqDef" (formula "7") (term "1,1,0") (inst "u=u"))
   (rule "eqSymm" (formula "7") (term "1,0"))
   (rule "array2seqDef" (formula "18") (term "0,1,0") (inst "u=u"))
   (rule "eqSymm" (formula "18") (term "0"))
   (rule "lenOfSeqDef" (formula "18") (term "0,0"))
   (rule "polySimp_elimSub" (formula "18") (term "1,0,0"))
   (rule "times_zero_2" (formula "18") (term "1,1,0,0"))
   (rule "add_zero_right" (formula "18") (term "1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0"))
   (rule "add_zero_right" (formula "18") (term "0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,0,0"))
   (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0,0"))
   (rule "polySimp_elimOne" (formula "18") (term "0,0,0,0"))
   (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "13"))
   (builtin "One Step Simplification" (formula "18"))
   (rule "allRight" (formula "18") (inst "sk=iv_0"))
   (rule "orRight" (formula "18"))
   (rule "orRight" (formula "18"))
   (rule "inEqSimp_leqRight" (formula "18"))
   (rule "mul_literals" (formula "1") (term "1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "add_zero_left" (formula "1") (term "0"))
   (rule "replace_known_left" (formula "20") (term "0,0,0") (ifseqformula "1"))
   (builtin "One Step Simplification" (formula "20"))
   (rule "inEqSimp_geqRight" (formula "19"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "1") (term "0"))
   (rule "inEqSimp_homoInEq0" (formula "20") (term "0,0"))
   (rule "polySimp_addComm1" (formula "20") (term "0,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
   (rule "polySimp_elimOne" (formula "1") (term "0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "0,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "20") (term "1,0,0"))
   (rule "mul_literals" (formula "20") (term "0,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
   (rule "eqSeqDef" (formula "12") (inst "iv=iv"))
   (rule "andLeft" (formula "12"))
   (rule "getOfSeqDef" (formula "13") (term "1,1,0"))
   (rule "castDel" (formula "13") (term "1,1,1,0"))
   (rule "castDel" (formula "13") (term "2,1,1,0"))
   (rule "add_zero_right" (formula "13") (term "0,2,1,1,1,0"))
   (rule "polySimp_elimSub" (formula "13") (term "1,1,0,1,1,0"))
   (rule "times_zero_2" (formula "13") (term "1,1,1,0,1,1,0"))
   (rule "add_zero_right" (formula "13") (term "1,1,0,1,1,0"))
   (rule "lenOfSeqDef" (formula "12") (term "1"))
   (rule "polySimp_elimSub" (formula "12") (term "1,1"))
   (rule "times_zero_2" (formula "12") (term "1,1,1"))
   (rule "add_zero_right" (formula "12") (term "1,1"))
   (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
   (rule "polySimp_addComm1" (formula "13") (term "0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,1,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "12") (term "0,1"))
   (rule "add_zero_right" (formula "12") (term "0,0,1"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,1,1,0"))
   (rule "applyEq" (formula "13") (term "0,1,0,1,0,0") (ifseqformula "12"))
   (rule "polySimp_addComm1" (formula "13") (term "0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,1,1,0"))
   (rule "polySimp_rightDist" (formula "13") (term "1,1,0,1,1,0"))
   (rule "mul_literals" (formula "13") (term "0,1,1,0,1,1,0"))
   (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,1,1,0"))
   (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,1,1,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,1"))
   (rule "polySimp_mulLiterals" (formula "12") (term "0,0,1"))
   (rule "polySimp_elimOne" (formula "12") (term "0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
   (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,1,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "13") (term "0,0,1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "13") (term "0,0,1,1,1,0,0"))
   (rule "array2seqDef" (formula "9") (term "0,0,1,1,0") (inst "u=u"))
   (rule "array2seqDef" (formula "9") (term "1,0,1,1,0") (inst "u=u"))
   (rule "array2seqDef" (formula "21") (term "0,1") (inst "u=u"))
   (rule "eqSymm" (formula "21"))
   (rule "getOfSeqDef" (formula "21") (term "0"))
   (rule "castDel" (formula "21") (term "2,0"))
   (rule "castDel" (formula "21") (term "1,0"))
   (rule "add_zero_right" (formula "21") (term "0,2,1,0"))
   (rule "polySimp_elimSub" (formula "21") (term "1,1,0,0"))
   (rule "times_zero_2" (formula "21") (term "1,1,1,0,0"))
   (rule "add_zero_right" (formula "21") (term "1,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
   (rule "polySimp_addComm1" (formula "21") (term "0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
   (rule "replace_known_left" (formula "21") (term "0,0,0") (ifseqformula "2"))
   (builtin "One Step Simplification" (formula "21"))
   (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,0"))
   (rule "polySimp_mulLiterals" (formula "21") (term "0,0,0"))
   (rule "polySimp_elimOne" (formula "21") (term "0,0,0"))
   (rule "eqSeqDef2" (formula "11") (inst "iv=iv") (ifseqformula "11"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "true_left" (formula "11"))
   (rule "nnf_imp2or" (formula "12") (term "0"))
   (rule "nnf_imp2or" (formula "9") (term "0"))
   (rule "nnf_notAnd" (formula "12") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
   (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
   (rule "mul_literals" (formula "12") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "9") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
   (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
   (rule "mul_literals" (formula "9") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
   (rule "Class_invariant_axiom_for_verif_selectvoting_system_core_MixServer" (formula "17") (ifseqformula "5"))
   (rule "andLeft" (formula "17"))
   (rule "notLeft" (formula "18"))
   (rule "andLeft" (formula "17"))
   (rule "notLeft" (formula "18"))
   (rule "andLeft" (formula "17"))
   (rule "notLeft" (formula "18"))
   (rule "andLeft" (formula "17"))
   (rule "andLeft" (formula "17"))
   (rule "notLeft" (formula "19"))
   (rule "andLeft" (formula "17"))
   (rule "andLeft" (formula "17"))
   (rule "andLeft" (formula "17"))
   (rule "notLeft" (formula "18"))
   (rule "notLeft" (formula "17"))
   (rule "narrowSelectArrayType" (formula "16") (term "1,0,1,0") (ifseqformula "3") (ifseqformula "21"))
   (rule "narrowSelectArrayType" (formula "9") (term "2,0,0,1,1,0") (ifseqformula "3") (ifseqformula "25"))
   (rule "narrowSelectArrayType" (formula "12") (term "1,1,1,0") (ifseqformula "3") (ifseqformula "20"))
   (rule "narrowSelectArrayType" (formula "12") (term "2,0,1,0,0,1,0") (ifseqformula "3") (ifseqformula "25"))
   (rule "narrowSelectArrayType" (formula "11") (term "2,0,1,0,0") (ifseqformula "3") (ifseqformula "25"))
   (rule "narrowSelectArrayType" (formula "28") (term "1,0") (ifseqformula "3") (ifseqformula "21"))
   (rule "nonNull" (formula "19") (inst "i=i"))
   (rule "sub_literals" (formula "19") (term "2,1,0,1,1"))
   (builtin "One Step Simplification" (formula "19"))
   (rule "greater_literals" (formula "19") (term "0,1"))
   (builtin "One Step Simplification" (formula "19"))
   (rule "andLeft" (formula "19"))
   (rule "notLeft" (formula "19"))
   (rule "narrowSelectArrayType" (formula "19") (term "0,0,1,0") (ifseqformula "3") (ifseqformula "20"))
   (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
   (rule "nonNull" (formula "18") (inst "i=i"))
   (rule "sub_literals" (formula "18") (term "2,1,0,1,1"))
   (builtin "One Step Simplification" (formula "18"))
   (rule "greater_literals" (formula "18") (term "0,1"))
   (builtin "One Step Simplification" (formula "18"))
   (rule "andLeft" (formula "18"))
   (rule "notLeft" (formula "18"))
   (rule "narrowSelectArrayType" (formula "18") (term "0,0,1,0") (ifseqformula "3") (ifseqformula "20"))
   (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
   (rule "applyEq" (formula "18") (term "0,1,0,0,1,0,0") (ifseqformula "13"))
   (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
   (rule "nonNull" (formula "17") (inst "i=i"))
   (rule "greater_literals" (formula "17") (term "0,1"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "sub_literals" (formula "17") (term "2,1,0,1"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "andLeft" (formula "17"))
   (rule "notLeft" (formula "17"))
   (rule "narrowSelectArrayType" (formula "17") (term "0,0,1,0") (ifseqformula "3") (ifseqformula "20"))
   (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
   (rule "applyEq" (formula "17") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
   (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
   (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
   (rule "nnf_imp2or" (formula "19") (term "0"))
   (rule "nnf_imp2or" (formula "18") (term "0"))
   (rule "nnf_imp2or" (formula "17") (term "0"))
   (rule "Definition_axiom_for_ghostFieldsNonNull_in_verif_selectvoting_system_core_MixServer" (formula "8") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1"))
   (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "22")) (ifInst ""  (formula "21")) (ifInst ""  (formula "20")) (ifInst ""  (formula "24")) (ifInst ""  (formula "23")))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
   (rule "applyEq" (formula "9") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
   (rule "applyEq" (formula "10") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
   (rule "nnf_notAnd" (formula "21") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
   (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "21") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
   (rule "mul_literals" (formula "21") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "20") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
   (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "20") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
   (rule "mul_literals" (formula "20") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "19") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
   (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "19") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
   (rule "mul_literals" (formula "19") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
   (rule "nnf_imp2or" (formula "8") (term "0"))
   (rule "nnf_imp2or" (formula "9") (term "0"))
   (rule "nnf_imp2or" (formula "10") (term "0"))
   (rule "nnf_notAnd" (formula "8") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
   (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "8") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
   (rule "mul_literals" (formula "8") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "8") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
   (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "8") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
   (rule "mul_literals" (formula "8") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "8") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
   (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "8") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
   (rule "mul_literals" (formula "8") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
   (rule "ifthenelse_split" (formula "14") (term "0"))
   (branch "self.concatenated.length ≥ 1 TRUE"
      (rule "eqSymm" (formula "15"))
      (rule "applyEq" (formula "1") (term "0") (ifseqformula "15"))
      (rule "replace_known_left" (formula "31") (term "0,0") (ifseqformula "1"))
      (builtin "One Step Simplification" (formula "31"))
      (rule "eqSymm" (formula "31"))
      (rule "applyEq" (formula "16") (term "1,1,0,0") (ifseqformula "15"))
      (rule "commute_or_2" (formula "8") (term "0"))
      (rule "commute_or_2" (formula "11") (term "0"))
      (rule "commute_or_2" (formula "19") (term "0"))
      (rule "arrayLengthIsAShort" (formula "16") (term "1,1,1,0,0,1,0"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "true_left" (formula "16"))
      (rule "arrayLengthIsAShort" (formula "16") (term "1,1,1,0,1,1,0"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "true_left" (formula "16"))
      (rule "arrayLengthNotNegative" (formula "16") (term "1,1,1,0,0,1,0"))
      (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "14"))
      (rule "leq_literals" (formula "16") (term "0"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "true_left" (formula "16"))
      (rule "arrayLengthNotNegative" (formula "16") (term "1,1,1,0,1,1,0"))
      (rule "ifthenelse_to_or_left" (formula "17") (term "1,0"))
      (rule "eqSymm" (formula "17") (term "1,0,1,0"))
      (rule "eqSymm" (formula "17") (term "1,1,1,0"))
      (builtin "One Step Simplification" (formula "17"))
      (rule "nnf_notAnd" (formula "17") (term "0,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0,1,0"))
      (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0,1,0"))
      (rule "add_literals" (formula "17") (term "0,0,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,1,0"))
      (rule "mul_literals" (formula "17") (term "1,0,0,0,1,0"))
      (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,1,0"))
      (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,1,0"))
      (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,1,0"))
      (rule "add_zero_left" (formula "17") (term "0,0,1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,1,0"))
      (rule "nnf_notAnd" (formula "17") (term "0,1,1,1,0"))
      (rule "inEqSimp_notGeq" (formula "17") (term "0,0,1,1,1,0"))
      (rule "mul_literals" (formula "17") (term "1,0,0,0,0,1,1,1,0"))
      (rule "add_zero_right" (formula "17") (term "0,0,0,0,1,1,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,1,1,1,0"))
      (rule "mul_literals" (formula "17") (term "1,0,0,1,1,1,0"))
      (rule "inEqSimp_notLeq" (formula "17") (term "1,0,1,1,1,0"))
      (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,1,1,1,0"))
      (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,1,1,1,0"))
      (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,1,1,1,0"))
      (rule "add_literals" (formula "17") (term "0,0,0,1,0,1,1,1,0"))
      (rule "add_zero_left" (formula "17") (term "0,0,1,0,1,1,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,1,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,1,1,1,0"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1,0,1,1,1,0"))
      (rule "commute_or_2" (formula "19") (term "0"))
      (rule "commute_or_2" (formula "18") (term "0"))
      (rule "arrayLengthNotNegative" (formula "13") (term "0"))
      (rule "applyEq" (formula "13") (term "0") (ifseqformula "14"))
      (rule "arrayLengthIsAShort" (formula "14") (term "0"))
      (builtin "One Step Simplification" (formula "14"))
      (rule "true_left" (formula "14"))
      (rule "arrayLengthIsAShort" (formula "12") (term "0"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "true_left" (formula "12"))
      (rule "arrayLengthNotNegative" (formula "12") (term "1"))
      (rule "arrayLengthIsAShort" (formula "12") (term "1"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "true_left" (formula "12"))
      (rule "arrayLengthNotNegative" (formula "12") (term "0"))
      (rule "applyEq" (formula "12") (term "0") (ifseqformula "13"))
      (rule "ifthenelse_split" (formula "10") (term "1"))
      (branch "self.unsigned.length ≥ 1 TRUE"
         (rule "replace_known_left" (formula "12") (term "0,1,1,0") (ifseqformula "10"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "commute_or" (formula "8") (term "0,0"))
         (rule "commute_or" (formula "22") (term "0,0"))
         (rule "arrayLengthNotNegative" (formula "11") (term "1,0,1,0,0"))
         (rule "arrayLengthIsAShort" (formula "12") (term "1,0,1,0,0"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "true_left" (formula "12"))
         (rule "arrayLengthIsAShort" (formula "12") (term "1,0,0,0"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "true_left" (formula "12"))
         (rule "arrayLengthNotNegative" (formula "12") (term "1,0,0,0"))
         (rule "commute_or" (formula "23") (term "0,0"))
         (rule "commute_or" (formula "22") (term "0,0"))
         (rule "commute_or_2" (formula "21") (term "0,1,0"))
         (rule "commute_or" (formula "14") (term "0,0"))
         (rule "commute_or" (formula "21") (term "1,1,0"))
         (rule "lenNonNegative" (formula "13") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "13"))
         (rule "applyEq" (formula "13") (term "0") (ifseqformula "14"))
         (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "10"))
         (rule "leq_literals" (formula "13") (term "0"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "true_left" (formula "13"))
         (rule "commute_or" (formula "21") (term "0,0,1,0"))
         (rule "commute_or_2" (formula "21") (term "0,1,1,0"))
         (rule "commute_or" (formula "21") (term "0,0,1,1,0"))
         (rule "cnf_rightDist" (formula "21") (term "1,1,0"))
         (rule "commute_or" (formula "21") (term "1,1,1,0"))
         (rule "cnf_rightDist" (formula "21") (term "0"))
         (rule "distr_forallAnd" (formula "21"))
         (rule "andLeft" (formula "21"))
         (rule "commute_or" (formula "22") (term "0"))
         (rule "shift_paren_or" (formula "21") (term "0"))
         (rule "commute_or_2" (formula "21") (term "0,0"))
         (builtin "One Step Simplification" (formula "21"))
         (rule "commute_or_2" (formula "22") (term "0,1,0"))
         (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0,0,1,0"))
         (rule "add_zero_right" (formula "22") (term "1,1,0,0,1,0"))
         (rule "qeq_literals" (formula "22") (term "1,0,0,1,0"))
         (builtin "One Step Simplification" (formula "22"))
         (rule "commute_or_2" (formula "22") (term "0"))
         (rule "shift_paren_or" (formula "21") (term "0,0"))
         (rule "shift_paren_or" (formula "22") (term "0,0"))
         (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0"))
         (rule "inEqSimp_homoInEq1" (formula "22") (term "1,0"))
         (rule "polySimp_pullOutFactor1" (formula "22") (term "0,1,0"))
         (rule "add_literals" (formula "22") (term "1,0,1,0"))
         (rule "times_zero_1" (formula "22") (term "0,1,0"))
         (rule "leq_literals" (formula "22") (term "1,0"))
         (builtin "One Step Simplification" (formula "22"))
         (rule "true_left" (formula "22"))
         (rule "commute_or" (formula "21") (term "0,0,0"))
         (builtin "One Step Simplification" (formula "21"))
         (rule "ifthenelse_to_or_right" (formula "14") (term "0,0,0"))
         (rule "nnf_notAnd" (formula "14") (term "0,0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,0,0,0"))
         (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,0,0,0"))
         (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,0,0,0"))
         (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,0,0,0"))
         (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "14") (term "0,0,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,0,0"))
         (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0,0"))
         (rule "commute_or" (formula "14") (term "0,0"))
         (rule "commute_or_2" (formula "14") (term "0"))
         (rule "commute_or" (formula "14") (term "1,1,0"))
         (rule "commute_or_2" (formula "14") (term "0,1,0"))
         (rule "commute_or" (formula "14") (term "0,0,1,0"))
         (rule "cnf_rightDist" (formula "14") (term "1,1,0"))
         (rule "cnf_rightDist" (formula "14") (term "0"))
         (rule "distr_forallAnd" (formula "14"))
         (rule "andLeft" (formula "14"))
         (rule "commute_or" (formula "15") (term "0"))
         (rule "shift_paren_or" (formula "14") (term "0"))
         (rule "commute_or_2" (formula "14") (term "0,0"))
         (builtin "One Step Simplification" (formula "14"))
         (rule "commute_or" (formula "15") (term "1,1,0"))
         (rule "shift_paren_or" (formula "14") (term "0,0"))
         (rule "commute_or" (formula "14") (term "0,0,0"))
         (builtin "One Step Simplification" (formula "14"))
         (rule "cnf_rightDist" (formula "15") (term "0"))
         (rule "distr_forallAnd" (formula "15"))
         (rule "andLeft" (formula "15"))
         (rule "commute_or_2" (formula "15") (term "0"))
         (rule "shift_paren_or" (formula "16") (term "0"))
         (rule "commute_or_2" (formula "16") (term "0,0"))
         (rule "inEqSimp_or_tautInEq1" (formula "16") (term "0"))
         (rule "inEqSimp_homoInEq1" (formula "16") (term "1,0"))
         (rule "polySimp_pullOutFactor1" (formula "16") (term "0,1,0"))
         (rule "add_literals" (formula "16") (term "1,0,1,0"))
         (rule "times_zero_1" (formula "16") (term "0,1,0"))
         (rule "leq_literals" (formula "16") (term "1,0"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "true_left" (formula "16"))
         (rule "shift_paren_or" (formula "15") (term "0,0"))
         (rule "commute_or" (formula "15") (term "0,0,0"))
         (rule "inEqSimp_or_tautInEq1" (formula "15") (term "0,0"))
         (rule "add_literals" (formula "15") (term "1,1,0,0"))
         (rule "qeq_literals" (formula "15") (term "1,0,0"))
         (builtin "One Step Simplification" (formula "15"))
         (rule "true_left" (formula "15"))
         (rule "ifthenelse_split" (formula "19") (term "0"))
         (branch "msg.length ≥ 1 TRUE"
            (rule "eqSymm" (formula "20"))
            (rule "applyEq" (formula "18") (term "0") (ifseqformula "20"))
            (rule "applyEq" (formula "21") (term "1,1,0") (ifseqformula "19"))
            (rule "applyEq" (formula "1") (term "0") (ifseqformula "19"))
            (rule "replace_known_left" (formula "36") (term "0,0") (ifseqformula "1"))
            (builtin "One Step Simplification" (formula "36"))
            (rule "eqSymm" (formula "36"))
            (rule "inEqSimp_subsumption1" (formula "20") (ifseqformula "18"))
            (rule "leq_literals" (formula "20") (term "0"))
            (builtin "One Step Simplification" (formula "20"))
            (rule "true_left" (formula "20"))
            (rule "ifthenelse_to_or_left" (formula "20") (term "0,0,0"))
            (rule "eqSymm" (formula "20") (term "1,0,0,0,0"))
            (rule "eqSymm" (formula "20") (term "1,1,0,0,0"))
            (rule "nnf_notAnd" (formula "20") (term "0,0,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,0,0,0"))
            (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0,0,0,0"))
            (rule "add_literals" (formula "20") (term "0,0,0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,0,0,0"))
            (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,0,0,0"))
            (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,0,0,0"))
            (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,0,0,0"))
            (rule "add_zero_left" (formula "20") (term "0,0,1,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,0,0"))
            (rule "commute_or" (formula "20") (term "0,0"))
            (rule "commute_or_2" (formula "20") (term "0"))
            (rule "commute_or" (formula "20") (term "1,1,0"))
            (rule "cnf_rightDist" (formula "20") (term "1,1,0"))
            (rule "cnf_rightDist" (formula "20") (term "0"))
            (rule "distr_forallAnd" (formula "20"))
            (rule "andLeft" (formula "20"))
            (rule "commute_or" (formula "21") (term "0"))
            (rule "shift_paren_or" (formula "20") (term "0"))
            (builtin "One Step Simplification" (formula "20"))
            (rule "commute_or" (formula "21") (term "1,1,0"))
            (rule "cnf_rightDist" (formula "21") (term "0"))
            (rule "distr_forallAnd" (formula "21"))
            (rule "andLeft" (formula "21"))
            (rule "commute_or_2" (formula "21") (term "0"))
            (rule "shift_paren_or" (formula "22") (term "0"))
            (rule "commute_or_2" (formula "22") (term "0,0"))
            (rule "inEqSimp_or_tautInEq1" (formula "22") (term "0"))
            (rule "inEqSimp_homoInEq1" (formula "22") (term "1,0"))
            (rule "polySimp_pullOutFactor1" (formula "22") (term "0,1,0"))
            (rule "add_literals" (formula "22") (term "1,0,1,0"))
            (rule "times_zero_1" (formula "22") (term "0,1,0"))
            (rule "leq_literals" (formula "22") (term "1,0"))
            (builtin "One Step Simplification" (formula "22"))
            (rule "true_left" (formula "22"))
            (rule "shift_paren_or" (formula "21") (term "0,0"))
            (rule "commute_or" (formula "21") (term "0,0,0"))
            (rule "inEqSimp_or_tautInEq1" (formula "21") (term "0,0"))
            (rule "add_literals" (formula "21") (term "1,1,0,0"))
            (rule "qeq_literals" (formula "21") (term "1,0,0"))
            (builtin "One Step Simplification" (formula "21"))
            (rule "true_left" (formula "21"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "17") (term "0,0") (ifseqformula "3"))
            (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "25"))
            (builtin "One Step Simplification" (formula "17"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "9") (term "1,1") (ifseqformula "3"))
            (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "27"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "16") (term "0,1") (ifseqformula "3"))
            (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "29"))
            (builtin "One Step Simplification" (formula "16"))
            (rule "arrayLengthIsAShort" (formula "14") (term "1"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "arrayLengthNotNegative" (formula "14") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "11"))
            (rule "leq_literals" (formula "14") (term "0"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "0,1,0,1,0,0") (ifseqformula "3"))
            (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "36"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "15") (term "0,1,0,0,0") (ifseqformula "3"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "32") (term "0") (ifseqformula "3"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "33"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "35") (term "0") (ifseqformula "4"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "36"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "37") (term "0") (ifseqformula "5"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "38"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "39") (term "0") (ifseqformula "6"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "40"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "37") (term "0") (ifseqformula "7"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "38"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "allLeft" (formula "30") (inst "t=iv_0"))
            (rule "replace_known_right" (formula "30") (term "1") (ifseqformula "46"))
            (builtin "One Step Simplification" (formula "30"))
            (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "30") (term "0") (ifseqformula "7"))
            (rule "qeq_literals" (formula "30") (term "0,0"))
            (builtin "One Step Simplification" (formula "30"))
            (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "30"))
            (rule "andLeft" (formula "6"))
            (rule "inEqSimp_homoInEq1" (formula "6"))
            (rule "polySimp_pullOutFactor1b" (formula "6") (term "0"))
            (rule "add_literals" (formula "6") (term "1,1,0"))
            (rule "times_zero_1" (formula "6") (term "1,0"))
            (rule "add_zero_right" (formula "6") (term "0"))
            (rule "leq_literals" (formula "6"))
            (rule "closeFalse" (formula "6"))
         )
         (branch "msg.length ≥ 1 FALSE"
            (rule "eqSymm" (formula "19"))
            (rule "inEqSimp_geqRight" (formula "25"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "applyEq" (formula "22") (term "1,1,0") (ifseqformula "20"))
            (rule "applyEq" (formula "2") (term "0") (ifseqformula "20"))
            (rule "inEqSimp_homoInEq1" (formula "2"))
            (rule "times_zero_2" (formula "2") (term "1,0"))
            (rule "add_zero_right" (formula "2") (term "0"))
            (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
            (rule "qeq_literals" (formula "19"))
            (rule "closeFalse" (formula "19"))
         )
      )
      (branch "self.unsigned.length ≥ 1 FALSE"
         (rule "replace_known_right" (formula "11") (term "0,1,1,0") (ifseqformula "22"))
         (builtin "One Step Simplification" (formula "11"))
         (rule "inEqSimp_geqRight" (formula "22"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "commute_or" (formula "9") (term "0,0"))
         (rule "commute_or" (formula "22") (term "0,0"))
         (rule "arrayLengthNotNegative" (formula "11") (term "1,0,0,0"))
         (rule "arrayLengthIsAShort" (formula "12") (term "1,0,1,0,0"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "true_left" (formula "12"))
         (rule "arrayLengthNotNegative" (formula "12") (term "1,0,1,0,0"))
         (rule "arrayLengthIsAShort" (formula "13") (term "1,0,0,0"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "true_left" (formula "13"))
         (rule "commute_or" (formula "23") (term "0,0"))
         (rule "commute_or" (formula "22") (term "0,0"))
         (rule "commute_or_2" (formula "21") (term "0,1,0"))
         (rule "commute_or" (formula "14") (term "0,0"))
         (rule "inEqSimp_or_tautInEq1" (formula "14") (term "0"))
         (rule "add_zero_right" (formula "14") (term "1,1,0"))
         (rule "qeq_literals" (formula "14") (term "1,0"))
         (builtin "One Step Simplification" (formula "14"))
         (rule "true_left" (formula "14"))
         (rule "commute_or" (formula "20") (term "1,1,0"))
         (rule "lenNonNegative" (formula "13") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "13"))
         (rule "applyEq" (formula "13") (term "0") (ifseqformula "14"))
         (rule "qeq_literals" (formula "13"))
         (rule "true_left" (formula "13"))
         (rule "commute_or" (formula "20") (term "0,0,1,0"))
         (rule "commute_or_2" (formula "20") (term "0,1,1,0"))
         (rule "commute_or" (formula "20") (term "0,0,1,1,0"))
         (rule "cnf_rightDist" (formula "20") (term "1,1,0"))
         (rule "commute_or" (formula "20") (term "1,1,1,0"))
         (rule "cnf_rightDist" (formula "20") (term "0"))
         (rule "distr_forallAnd" (formula "20"))
         (rule "andLeft" (formula "20"))
         (rule "commute_or" (formula "21") (term "0"))
         (rule "shift_paren_or" (formula "20") (term "0"))
         (rule "commute_or_2" (formula "20") (term "0,0"))
         (builtin "One Step Simplification" (formula "20"))
         (rule "commute_or_2" (formula "21") (term "0,1,0"))
         (rule "inEqSimp_or_tautInEq1" (formula "21") (term "0,0,1,0"))
         (rule "add_literals" (formula "21") (term "1,1,0,0,1,0"))
         (rule "qeq_literals" (formula "21") (term "1,0,0,1,0"))
         (builtin "One Step Simplification" (formula "21"))
         (rule "commute_or_2" (formula "21") (term "0"))
         (rule "shift_paren_or" (formula "20") (term "0,0"))
         (rule "shift_paren_or" (formula "21") (term "0,0"))
         (rule "inEqSimp_or_tautInEq1" (formula "21") (term "0"))
         (rule "inEqSimp_homoInEq1" (formula "21") (term "1,0"))
         (rule "polySimp_pullOutFactor1" (formula "21") (term "0,1,0"))
         (rule "add_literals" (formula "21") (term "1,0,1,0"))
         (rule "times_zero_1" (formula "21") (term "0,1,0"))
         (rule "leq_literals" (formula "21") (term "1,0"))
         (builtin "One Step Simplification" (formula "21"))
         (rule "true_left" (formula "21"))
         (rule "commute_or" (formula "20") (term "0,0,0"))
         (builtin "One Step Simplification" (formula "20"))
         (rule "ifthenelse_split" (formula "18") (term "0"))
         (branch "msg.length ≥ 1 TRUE"
            (rule "eqSymm" (formula "19"))
            (rule "applyEq" (formula "2") (term "0") (ifseqformula "19"))
            (rule "replace_known_left" (formula "36") (term "0,0") (ifseqformula "2"))
            (builtin "One Step Simplification" (formula "36"))
            (rule "eqSymm" (formula "36"))
            (rule "applyEq" (formula "21") (term "1,1,0") (ifseqformula "19"))
            (rule "applyEq" (formula "17") (term "0") (ifseqformula "19"))
            (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "17"))
            (rule "leq_literals" (formula "19") (term "0"))
            (builtin "One Step Simplification" (formula "19"))
            (rule "true_left" (formula "19"))
            (rule "ifthenelse_to_or_left" (formula "19") (term "0,0,0"))
            (rule "eqSymm" (formula "19") (term "1,1,0,0,0"))
            (rule "eqSymm" (formula "19") (term "1,0,0,0,0"))
            (rule "nnf_notAnd" (formula "19") (term "0,0,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,0,0,0"))
            (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,0,0,0"))
            (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,0,0,0"))
            (rule "add_zero_left" (formula "19") (term "0,0,1,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0,0,0,0"))
            (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0,0,0,0"))
            (rule "add_literals" (formula "19") (term "0,0,0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0,0,0,0"))
            (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0,0"))
            (rule "commute_or" (formula "19") (term "0,0"))
            (rule "commute_or_2" (formula "19") (term "0"))
            (rule "commute_or" (formula "19") (term "1,1,0"))
            (rule "cnf_rightDist" (formula "19") (term "1,1,0"))
            (rule "cnf_rightDist" (formula "19") (term "0"))
            (rule "distr_forallAnd" (formula "19"))
            (rule "andLeft" (formula "19"))
            (rule "commute_or" (formula "20") (term "0"))
            (rule "shift_paren_or" (formula "19") (term "0"))
            (builtin "One Step Simplification" (formula "19"))
            (rule "commute_or" (formula "20") (term "1,1,0"))
            (rule "cnf_rightDist" (formula "20") (term "0"))
            (rule "distr_forallAnd" (formula "20"))
            (rule "andLeft" (formula "20"))
            (rule "commute_or_2" (formula "20") (term "0"))
            (rule "shift_paren_or" (formula "21") (term "0"))
            (rule "commute_or_2" (formula "21") (term "0,0"))
            (rule "inEqSimp_or_tautInEq1" (formula "21") (term "0"))
            (rule "inEqSimp_homoInEq1" (formula "21") (term "1,0"))
            (rule "polySimp_pullOutFactor1" (formula "21") (term "0,1,0"))
            (rule "add_literals" (formula "21") (term "1,0,1,0"))
            (rule "times_zero_1" (formula "21") (term "0,1,0"))
            (rule "leq_literals" (formula "21") (term "1,0"))
            (builtin "One Step Simplification" (formula "21"))
            (rule "true_left" (formula "21"))
            (rule "shift_paren_or" (formula "20") (term "0,0"))
            (rule "commute_or" (formula "20") (term "0,0,0"))
            (rule "inEqSimp_or_tautInEq1" (formula "20") (term "0,0"))
            (rule "add_zero_right" (formula "20") (term "1,1,0,0"))
            (rule "qeq_literals" (formula "20") (term "1,0,0"))
            (builtin "One Step Simplification" (formula "20"))
            (rule "true_left" (formula "20"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "1,1") (ifseqformula "4"))
            (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "25"))
            (builtin "One Step Simplification" (formula "10"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "1,0") (ifseqformula "4"))
            (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "25"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "16") (term "0,1") (ifseqformula "4"))
            (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "28"))
            (builtin "One Step Simplification" (formula "16"))
            (rule "allLeft" (formula "22") (inst "t=iv_0"))
            (rule "replace_known_right" (formula "22") (term "1") (ifseqformula "38"))
            (builtin "One Step Simplification" (formula "22"))
            (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "22") (term "0") (ifseqformula "3"))
            (rule "qeq_literals" (formula "22") (term "0,0"))
            (builtin "One Step Simplification" (formula "22"))
            (rule "inEqSimp_contradInEq1" (formula "22") (ifseqformula "2"))
            (rule "andLeft" (formula "22"))
            (rule "inEqSimp_homoInEq1" (formula "22"))
            (rule "polySimp_pullOutFactor1b" (formula "22") (term "0"))
            (rule "add_literals" (formula "22") (term "1,1,0"))
            (rule "times_zero_1" (formula "22") (term "1,0"))
            (rule "add_zero_right" (formula "22") (term "0"))
            (rule "leq_literals" (formula "22"))
            (rule "closeFalse" (formula "22"))
         )
         (branch "msg.length ≥ 1 FALSE"
            (rule "eqSymm" (formula "18"))
            (rule "inEqSimp_geqRight" (formula "24"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "applyEq" (formula "21") (term "1,1,0") (ifseqformula "19"))
            (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
            (rule "qeq_literals" (formula "18"))
            (rule "closeFalse" (formula "18"))
         )
      )
   )
   (branch "self.concatenated.length ≥ 1 FALSE"
      (rule "eqSymm" (formula "14"))
      (builtin "One Step Simplification" (formula "14"))
      (rule "inEqSimp_geqRight" (formula "19"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "inEqSimp_notGeq" (formula "15") (term "0"))
      (rule "mul_literals" (formula "15") (term "1,0,0,0"))
      (rule "add_literals" (formula "15") (term "0,0,0"))
      (rule "add_zero_left" (formula "15") (term "0,0"))
      (rule "commute_or_2" (formula "16") (term "0"))
      (rule "commute_or_2" (formula "9") (term "0"))
      (rule "commute_or_2" (formula "12") (term "0"))
      (rule "commute_or_2" (formula "19") (term "0"))
      (rule "ifthenelse_split" (formula "2") (term "0"))
      (branch "msg.length ≥ 1 TRUE"
         (rule "replace_known_left" (formula "17") (term "0,1,1,0") (ifseqformula "2"))
         (builtin "One Step Simplification" (formula "17"))
         (rule "replace_known_left" (formula "32") (term "0,1") (ifseqformula "3"))
         (builtin "One Step Simplification" (formula "32"))
         (rule "inEqSimp_contradEq7" (formula "16") (term "1") (ifseqformula "2"))
         (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
         (rule "add_literals" (formula "16") (term "0,0,1"))
         (rule "leq_literals" (formula "16") (term "0,1"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "16"))
         (rule "qeq_literals" (formula "2") (term "0"))
         (builtin "One Step Simplification" (formula "2"))
         (rule "closeFalse" (formula "2"))
      )
      (branch "msg.length ≥ 1 FALSE"
         (rule "replace_known_right" (formula "16") (term "0,1,1,0") (ifseqformula "20"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "inEqSimp_geqRight" (formula "20"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "replace_known_left" (formula "16") (term "0") (ifseqformula "1"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "true_left" (formula "16"))
         (rule "inEqSimp_homoInEq1" (formula "3"))
         (rule "times_zero_2" (formula "3") (term "1,0"))
         (rule "add_zero_right" (formula "3") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "3"))
         (rule "mul_literals" (formula "3") (term "1"))
         (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "3"))
         (rule "qeq_literals" (formula "4") (term "0"))
         (builtin "One Step Simplification" (formula "4"))
         (rule "closeFalse" (formula "4"))
      )
   )
)
)

}
