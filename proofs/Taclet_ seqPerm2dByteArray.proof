\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Mar 17 17:18:10 CET 2016
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=5000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\proofObligation "#Proof Obligation Settings
#Thu Mar 17 17:18:10 CET 2016
name=seqPerm2dByteArray
class=de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput
";

\proof {
(keyLog "0" (keyUser "mihai" ) (keyVersion "99336ad04cdaa9fea6ec698b0fe69574b8516e91"))

(autoModeTime "10298")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "f_h1,f_b1,f_b2"))
(rule "orRight" (formula "2"))
(rule "notLeft" (formula "1"))
(rule "impRight" (formula "3"))
(rule "notRight" (formula "3"))
(rule "orRight" (formula "4"))
(rule "seqPermDef" (formula "1") (inst "s=s") (inst "iv=iv") (userinteraction))
(rule "andLeft" (formula "1") (userinteraction))
(rule "exLeft" (formula "2") (inst "sk=s_0") (userinteraction))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "2"))
(rule "lenOfArray2seq" (formula "1") (term "0") (userinteraction))
(rule "lenOfArray2seq" (formula "1") (term "1") (userinteraction))
(rule "lenOfArray2seq" (formula "2") (term "1") (userinteraction))
(rule "seqPermDef" (formula "6") (inst "s=s") (inst "iv=iv") (userinteraction))
(rule "andRight" (formula "6") (userinteraction))
(branch "Case 1"
   (rule "array2seq2dDef" (formula "6") (term "0,0") (inst "u=u") (userinteraction))
   (rule "array2seq2dDef" (formula "6") (term "0,1") (inst "u=u") (userinteraction))
   (rule "lenOfSeqDef" (formula "6") (term "0") (userinteraction))
   (rule "lenOfSeqDef" (formula "6") (term "1") (userinteraction))
   (rule "eqSymm" (formula "4") (term "1,0"))
   (rule "eqSymm" (formula "1"))
   (rule "eqSymm" (formula "6"))
   (rule "polySimp_elimSub" (formula "6") (term "1,0"))
   (rule "mul_literals" (formula "6") (term "1,1,0"))
   (rule "add_zero_right" (formula "6") (term "1,0"))
   (rule "polySimp_elimSub" (formula "6") (term "1,1"))
   (rule "mul_literals" (formula "6") (term "1,1,1"))
   (rule "add_zero_right" (formula "6") (term "1,1"))
   (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "6") (term "0,1"))
   (rule "add_zero_right" (formula "6") (term "0,0,1"))
   (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0"))
   (rule "add_zero_right" (formula "6") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
   (rule "applyEqRigid" (formula "6") (term "1,0") (ifseqformula "1"))
   (rule "applyEqRigid" (formula "6") (term "0,1,0,0,0") (ifseqformula "1"))
   (rule "eqClose" (formula "6"))
   (rule "closeTrue" (formula "6"))
)
(branch "Case 2"
   (rule "instEx" (formula "3") (term "0") (ifseqformula "6") (userinteraction))
   (rule "andRight" (formula "6") (userinteraction))
   (branch "Case 1"
      (rule "seqNPermRange" (formula "3") (inst "iv=iv") (userinteraction))
      (rule "array2seq2dDef" (formula "7") (term "0,1,0") (inst "u=u") (userinteraction))
      (rule "eqSymm" (formula "7") (term "0"))
      (rule "eqSymm" (formula "8") (term "1,0,1,0"))
      (rule "eqSymm" (formula "1"))
      (rule "eqSymm" (formula "5") (term "1,0"))
      (rule "replace_known_left" (formula "7") (term "1") (ifseqformula "4"))
      (rule "concrete_and_3" (formula "7"))
      (rule "lenOfSeqDef" (formula "7") (term "0"))
      (rule "polySimp_elimSub" (formula "7") (term "1,0"))
      (rule "times_zero_2" (formula "7") (term "1,1,0"))
      (rule "add_zero_right" (formula "7") (term "1,0"))
      (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "8") (term "0,1,0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "3") (term "1,1,0"))
      (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0"))
      (rule "add_zero_right" (formula "7") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "3") (term "0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0"))
      (rule "applyEq" (formula "3") (term "0,1,0,0,1,0,0") (ifseqformula "2"))
      (rule "applyEq" (formula "7") (term "1") (ifseqformula "2"))
      (rule "ifthenelse_concrete3" (formula "7"))
      (rule "orRight" (formula "7"))
      (rule "eqSymm" (formula "8"))
      (rule "inEqSimp_leqRight" (formula "7"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "applyEqRigid" (formula "6") (term "0,1,0,0,1,0,0") (ifseqformula "3"))
      (rule "applyEqRigid" (formula "4") (term "0,1,0,0,1,1,0") (ifseqformula "3"))
      (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "9") (term "0,1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0"))
      (rule "mul_literals" (formula "4") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0"))
      (rule "inEqSimp_invertInEq1" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
      (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,1,0"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,1,1,0"))
      (rule "polySimp_rightDist" (formula "4") (term "1,1,1,0"))
      (rule "mul_literals" (formula "4") (term "0,1,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,1,0"))
      (rule "polySimp_elimOne" (formula "4") (term "1,1,1,1,0"))
      (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "8"))
      (rule "add_literals" (formula "1") (term "1"))
      (rule "inEqSimp_contradEq3" (formula "8") (ifseqformula "1"))
      (rule "mul_literals" (formula "8") (term "1,0,0"))
      (rule "add_literals" (formula "8") (term "0,0"))
      (rule "qeq_literals" (formula "8") (term "0"))
      (rule "concrete_and_2" (formula "8"))
      (rule "false_right" (formula "8"))
      (rule "array2seqDef" (formula "6") (term "0,1,1,0") (inst "u=u"))
      (rule "eqSymm" (formula "6") (term "1,0"))
      (rule "getOfSeqDef" (formula "6") (term "0,1,0"))
      (rule "castDel" (formula "6") (term "1,0,1,0"))
      (rule "castDel" (formula "6") (term "2,0,1,0"))
      (rule "add_zero_right" (formula "6") (term "0,2,1,0,1,0"))
      (rule "polySimp_elimSub" (formula "6") (term "1,1,0,0,1,0"))
      (rule "mul_literals" (formula "6") (term "1,1,1,0,0,1,0"))
      (rule "add_zero_right" (formula "6") (term "1,1,0,0,1,0"))
      (rule "narrowSelectArrayType" (formula "6") (term "1,0,1,0") (ifseqformula "7") (ifseqformula "9"))
      (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,1,0"))
      (rule "mul_literals" (formula "6") (term "0,1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,1,0"))
      (rule "array2seqDef" (formula "6") (term "0,1,1,0") (inst "u=u"))
      (rule "eqSymm" (formula "6") (term "1,0"))
      (rule "getOfSeqDef" (formula "6") (term "0,1,0"))
      (rule "castDel" (formula "6") (term "1,0,1,0"))
      (rule "castDel" (formula "6") (term "2,0,1,0"))
      (rule "add_zero_right" (formula "6") (term "0,2,1,0,1,0"))
      (rule "polySimp_elimSub" (formula "6") (term "1,1,0,0,1,0"))
      (rule "mul_literals" (formula "6") (term "1,1,1,0,0,1,0"))
      (rule "add_zero_right" (formula "6") (term "1,1,0,0,1,0"))
      (rule "narrowSelectArrayType" (formula "6") (term "1,0,1,0") (ifseqformula "7") (ifseqformula "10"))
      (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0"))
      (rule "applyEqRigid" (formula "6") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "2"))
      (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,1,0"))
      (rule "mul_literals" (formula "6") (term "0,1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,1,0"))
      (rule "nnf_ex2all" (formula "8"))
      (rule "nnf_imp2or" (formula "5") (term "0"))
      (rule "nnf_imp2or" (formula "7") (term "0"))
      (rule "nnf_notAnd" (formula "1") (term "0"))
      (rule "nnf_notAnd" (formula "5") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0"))
      (rule "mul_literals" (formula "5") (term "1,0,0,0,0,0"))
      (rule "add_literals" (formula "5") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
      (rule "mul_literals" (formula "5") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "5") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0"))
      (rule "nnf_notAnd" (formula "7") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
      (rule "mul_literals" (formula "7") (term "1,0,0,0,0,0"))
      (rule "add_literals" (formula "7") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
      (rule "mul_literals" (formula "7") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
      (rule "nnf_notAll" (formula "1") (term "1,0"))
      (rule "nnf_notAnd" (formula "1") (term "0,0"))
      (rule "nnf_imp2or" (formula "1") (term "0,0,1,0"))
      (rule "nnf_notOr" (formula "1") (term "0,1,0"))
      (rule "double_not" (formula "1") (term "0,0,1,0"))
      (rule "commute_or_2" (formula "7") (term "0"))
      (rule "commute_or" (formula "1") (term "0,0"))
      (rule "commute_or" (formula "7") (term "0,0"))
      (rule "cnf_rightDist" (formula "5") (term "0"))
      (rule "distr_forallAnd" (formula "5"))
      (rule "andLeft" (formula "5"))
      (rule "commute_or" (formula "6") (term "0"))
      (rule "commute_and_2" (formula "1") (term "0,1,0"))
      (rule "commute_and" (formula "1") (term "0,0,1,0"))
      (rule "ifthenelse_to_or_right" (formula "8") (term "0,0,0"))
      (rule "ifthenelse_concrete4" (formula "8") (term "1,1,0,0,0"))
      (rule "nnf_notAnd" (formula "8") (term "0,0,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0,0,0,0"))
      (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0,0,0,0"))
      (rule "add_literals" (formula "8") (term "0,0,0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,0,0,0"))
      (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0,0,0,0"))
      (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0,0,0,0"))
      (rule "add_literals" (formula "8") (term "0,0,0,1,0,0,0,0,0"))
      (rule "add_zero_left" (formula "8") (term "0,0,1,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0,0,0"))
      (rule "nnf_notAnd" (formula "8") (term "0,1,1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "8") (term "1,0,1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,1,1,0,0,0"))
      (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,1,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,1,1,0,0,0"))
      (rule "add_literals" (formula "8") (term "0,0,0,1,0,1,1,0,0,0"))
      (rule "add_zero_left" (formula "8") (term "0,0,1,0,1,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "8") (term "1,1,0,1,1,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "8") (term "0,0,1,1,0,0,0"))
      (rule "mul_literals" (formula "8") (term "1,0,0,0,0,1,1,0,0,0"))
      (rule "add_literals" (formula "8") (term "0,0,0,0,1,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,1,1,0,0,0"))
      (rule "mul_literals" (formula "8") (term "1,0,0,1,1,0,0,0"))
      (rule "commute_or" (formula "8") (term "0,0"))
      (rule "commute_or_2" (formula "8") (term "0"))
      (rule "commute_or" (formula "8") (term "1,1,0"))
      (rule "commute_or_2" (formula "8") (term "0,1,0"))
      (rule "commute_or_2" (formula "8") (term "0,1,1,0"))
      (rule "commute_or" (formula "8") (term "0,0,1,0"))
      (rule "commute_or" (formula "8") (term "0,0,1,1,0"))
      (rule "cnf_rightDist" (formula "8") (term "1,1,0"))
      (rule "commute_or_2" (formula "8") (term "0,1,1,0"))
      (rule "shift_paren_or" (formula "8") (term "1,1,1,0"))
      (rule "commute_or_2" (formula "8") (term "0,0,1,1,0"))
      (rule "shift_paren_or" (formula "8") (term "0,1,1,1,0"))
      (rule "cnf_rightDist" (formula "8") (term "0"))
      (rule "distr_forallAnd" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "commute_or" (formula "9") (term "0"))
      (rule "shift_paren_or" (formula "8") (term "0"))
      (rule "commute_or_2" (formula "8") (term "0,0"))
      (rule "eq_or_2" (formula "8") (term "0"))
      (rule "shift_paren_or" (formula "8") (term "0,0"))
      (rule "commute_or" (formula "8") (term "0,0,0"))
      (rule "eq_or_2" (formula "8") (term "0,0"))
      (rule "cnf_rightDist" (formula "9") (term "0"))
      (rule "distr_forallAnd" (formula "9"))
      (rule "andLeft" (formula "9"))
      (rule "commute_or_2" (formula "10") (term "0"))
      (rule "shift_paren_or" (formula "9") (term "0"))
      (rule "commute_or_2" (formula "10") (term "0,0"))
      (rule "shift_paren_or" (formula "9") (term "0,0"))
      (rule "commute_or_2" (formula "9") (term "0,0,0"))
      (rule "commute_or" (formula "10") (term "0,0,0,0"))
      (rule "shift_paren_or" (formula "10") (term "0,0,0"))
      (rule "commute_or_2" (formula "10") (term "0,0,0,0"))
      (rule "inEqSimp_or_tautInEq1" (formula "10") (term "0,0,0"))
      (rule "inEqSimp_homoInEq1" (formula "10") (term "1,0,0,0"))
      (rule "polySimp_pullOutFactor1" (formula "10") (term "0,1,0,0,0"))
      (rule "add_literals" (formula "10") (term "1,0,1,0,0,0"))
      (rule "times_zero_1" (formula "10") (term "0,1,0,0,0"))
      (rule "leq_literals" (formula "10") (term "1,0,0,0"))
      (rule "concrete_or_3" (formula "10") (term "0,0,0"))
      (rule "concrete_or_1" (formula "10") (term "0,0"))
      (rule "concrete_or_1" (formula "10") (term "0"))
      (rule "all_unused" (formula "10"))
      (rule "true_left" (formula "10"))
      (rule "shift_paren_or" (formula "9") (term "0,0,0,0"))
      (rule "commute_or" (formula "9") (term "0,0,0,0,0"))
      (rule "inEqSimp_or_tautInEq1" (formula "9") (term "0,0,0,0"))
      (rule "add_literals" (formula "9") (term "1,1,0,0,0,0"))
      (rule "qeq_literals" (formula "9") (term "1,0,0,0,0"))
      (rule "concrete_or_3" (formula "9") (term "0,0,0,0"))
      (rule "concrete_or_1" (formula "9") (term "0,0,0"))
      (rule "concrete_or_1" (formula "9") (term "0,0"))
      (rule "concrete_or_1" (formula "9") (term "0"))
      (rule "all_unused" (formula "9"))
      (rule "true_left" (formula "9"))
      (rule "arrayLengthNotNegative" (formula "4") (term "1"))
      (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "2"))
      (rule "qeq_literals" (formula "4") (term "0"))
      (rule "concrete_and_2" (formula "4"))
      (rule "closeFalse" (formula "4"))
   )
   (branch "Case 2"
      (rule "allRight" (formula "6") (inst "sk=iv_2") (userinteraction))
      (rule "impRight" (formula "6") (userinteraction))
      (rule "instAll" (formula "1") (term "1,0") (ifseqformula "5") (userinteraction))
      (rule "seqNPermRange" (formula "5") (inst "iv=iv") (userinteraction))
      (rule "array2seq2dDef" (formula "9") (term "0,0") (inst "u=u") (userinteraction))
      (rule "array2seq2dDef" (formula "9") (term "0,1") (inst "u=u") (userinteraction))
      (rule "andLeft" (formula "2"))
      (rule "eqSymm" (formula "1") (term "1"))
      (rule "eqSymm" (formula "8") (term "1,0"))
      (rule "eqSymm" (formula "11") (term "1,0,1,0"))
      (rule "eqSymm" (formula "10"))
      (rule "eqSymm" (formula "4"))
      (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "2"))
      (rule "concrete_and_1" (formula "1") (term "0"))
      (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "3"))
      (rule "concrete_impl_1" (formula "1"))
      (rule "getOfSeqDef" (formula "10") (term "0"))
      (rule "castDel" (formula "10") (term "1,0"))
      (rule "castDel" (formula "10") (term "2,0"))
      (rule "add_zero_right" (formula "10") (term "0,2,1,1,0"))
      (rule "eqSymm" (formula "10"))
      (rule "polySimp_elimSub" (formula "10") (term "1,1,0,1"))
      (rule "mul_literals" (formula "10") (term "1,1,1,0,1"))
      (rule "add_zero_right" (formula "10") (term "1,1,0,1"))
      (rule "getOfSeqDef" (formula "10") (term "0"))
      (rule "castDel" (formula "10") (term "1,0"))
      (rule "castDel" (formula "10") (term "2,0"))
      (rule "add_zero_right" (formula "10") (term "0,2,1,1,0"))
      (rule "eqSymm" (formula "10"))
      (rule "replace_known_left" (formula "10") (term "0,0,1") (ifseqformula "2"))
      (rule "concrete_and_1" (formula "10") (term "0,1"))
      (rule "polySimp_elimSub" (formula "10") (term "1,0,1"))
      (rule "times_zero_2" (formula "10") (term "1,1,0,1"))
      (rule "add_zero_right" (formula "10") (term "1,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "6") (term "1,1,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "11") (term "0,1,0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "3"))
      (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "3") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
      (rule "eqSymm" (formula "10"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "6") (term "0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "2"))
      (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0"))
      (rule "eqSymm" (formula "10"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1"))
      (rule "polySimp_addComm1" (formula "10") (term "0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
      (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "5"))
      (rule "replace_known_left" (formula "10") (term "0,1") (ifseqformula "3"))
      (rule "ifthenelse_true" (formula "10") (term "1"))
      (rule "applyEq" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "5"))
      (rule "applyEq" (formula "6") (term "0,1,0,0,1,0,0") (ifseqformula "5"))
      (rule "applyEq" (formula "6") (term "0,1,0,0,1,1,0") (ifseqformula "5"))
      (rule "applyEqRigid" (formula "10") (term "0,1,0,0,1,0,0") (ifseqformula "4"))
      (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "11") (term "0,1,0,0,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "3"))
      (rule "polySimp_mulLiterals" (formula "3") (term "0"))
      (rule "polySimp_elimOne" (formula "3") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
      (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
      (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,1,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,1,1,0"))
      (rule "polySimp_rightDist" (formula "6") (term "1,1,1,0"))
      (rule "mul_literals" (formula "6") (term "0,1,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,1,0"))
      (rule "polySimp_elimOne" (formula "6") (term "1,1,1,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
      (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
      (rule "array2seqDef" (formula "8") (term "0,1,1,0") (inst "u=u"))
      (rule "eqSymm" (formula "8") (term "1,0"))
      (rule "getOfSeqDef" (formula "8") (term "0,1,0"))
      (rule "castDel" (formula "8") (term "1,0,1,0"))
      (rule "castDel" (formula "8") (term "2,0,1,0"))
      (rule "add_zero_right" (formula "8") (term "0,2,1,0,1,0"))
      (rule "polySimp_elimSub" (formula "8") (term "1,1,0,0,1,0"))
      (rule "mul_literals" (formula "8") (term "1,1,1,0,0,1,0"))
      (rule "add_zero_right" (formula "8") (term "1,1,0,0,1,0"))
      (rule "narrowSelectArrayType" (formula "8") (term "1,0,1,0") (ifseqformula "9") (ifseqformula "12"))
      (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,1,0"))
      (rule "mul_literals" (formula "8") (term "0,1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,1,0"))
      (rule "array2seqDef" (formula "1") (term "0,0") (inst "u=u"))
      (rule "getOfSeqDef" (formula "1") (term "0"))
      (rule "castDel" (formula "1") (term "1,0"))
      (rule "castDel" (formula "1") (term "2,0"))
      (rule "add_zero_right" (formula "1") (term "0,2,1,0"))
      (rule "polySimp_elimSub" (formula "1") (term "1,1,0,0"))
      (rule "times_zero_2" (formula "1") (term "1,1,1,0,0"))
      (rule "add_zero_right" (formula "1") (term "1,1,0,0"))
      (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "9") (ifseqformula "13"))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
      (rule "applyEq" (formula "1") (term "0,1,0,0,1,0,0") (ifseqformula "4"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
      (rule "array2seqDef" (formula "1") (term "0,1") (inst "u=u"))
      (rule "eqSymm" (formula "1"))
      (rule "getOfSeqDef" (formula "1") (term "0"))
      (rule "castDel" (formula "1") (term "2,0"))
      (rule "castDel" (formula "1") (term "1,0"))
      (rule "add_zero_right" (formula "1") (term "0,2,1,0"))
      (rule "polySimp_elimSub" (formula "1") (term "1,1,0,0"))
      (rule "times_zero_2" (formula "1") (term "1,1,1,0,0"))
      (rule "add_zero_right" (formula "1") (term "1,1,0,0"))
      (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "9") (ifseqformula "12"))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
      (rule "eqSymm" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,1"))
      (rule "polySimp_addComm1" (formula "1") (term "0,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,1"))
      (rule "replace_known_left" (formula "1") (term "0,0,1") (ifseqformula "2"))
      (rule "concrete_and_1" (formula "1") (term "0,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1"))
      (rule "polySimp_elimOne" (formula "1") (term "0,0,1"))
      (rule "replace_known_left" (formula "1") (term "0,1") (ifseqformula "3"))
      (rule "ifthenelse_true" (formula "1") (term "1"))
      (rule "array2seqDef" (formula "10") (term "1,0") (inst "u=u"))
      (rule "array2seqDef" (formula "10") (term "1") (inst "u=u"))
      (rule "array2seqDef" (formula "8") (term "0,1,1,0") (inst "u=u"))
      (rule "eqSymm" (formula "8") (term "1,0"))
      (rule "getOfSeqDef" (formula "8") (term "0,1,0"))
      (rule "castDel" (formula "8") (term "2,0,1,0"))
      (rule "castDel" (formula "8") (term "1,0,1,0"))
      (rule "add_zero_right" (formula "8") (term "0,2,1,0,1,0"))
      (rule "polySimp_elimSub" (formula "8") (term "1,1,0,0,1,0"))
      (rule "mul_literals" (formula "8") (term "1,1,1,0,0,1,0"))
      (rule "add_zero_right" (formula "8") (term "1,1,0,0,1,0"))
      (rule "narrowSelectArrayType" (formula "8") (term "1,0,1,0") (ifseqformula "9") (ifseqformula "13"))
      (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,1,0"))
      (rule "applyEqRigid" (formula "8") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "4"))
      (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,1,0"))
      (rule "mul_literals" (formula "8") (term "0,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,1,0"))
      (rule "pullOutSelect" (formula "1") (term "1,0") (inst "selectSK=arr_29"))
      (rule "applyEq" (formula "11") (term "1,2,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "11") (term "0,1,1,0") (ifseqformula "1"))
      (rule "pullOutSelect" (formula "2") (term "1") (inst "selectSK=arr_30"))
      (rule "applyEq" (formula "12") (term "1,2,1") (ifseqformula "2"))
      (rule "applyEq" (formula "12") (term "0,1,1") (ifseqformula "2"))
      (rule "nnf_ex2all" (formula "13"))
      (rule "nnf_imp2or" (formula "9") (term "0"))
      (rule "nnf_imp2or" (formula "11") (term "0"))
      (rule "nnf_notAnd" (formula "1") (term "0"))
      (rule "nnf_notAnd" (formula "9") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
      (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0"))
      (rule "add_literals" (formula "9") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
      (rule "mul_literals" (formula "9") (term "1,0,0,0"))
      (rule "nnf_notAnd" (formula "11") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
      (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
      (rule "add_literals" (formula "11") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
      (rule "mul_literals" (formula "11") (term "1,0,0,0"))
      (rule "nnf_notAnd" (formula "1") (term "0,0"))
      (rule "nnf_notAll" (formula "1") (term "1,0"))
      (rule "nnf_imp2or" (formula "1") (term "0,0,1,0"))
      (rule "nnf_notOr" (formula "1") (term "0,1,0"))
      (rule "double_not" (formula "1") (term "0,0,1,0"))
      (rule "commute_or_2" (formula "11") (term "0"))
      (rule "commute_or" (formula "1") (term "0,0"))
      (rule "commute_or" (formula "11") (term "0,0"))
      (rule "cnf_rightDist" (formula "9") (term "0"))
      (rule "distr_forallAnd" (formula "9"))
      (rule "andLeft" (formula "9"))
      (rule "commute_or" (formula "10") (term "0"))
      (rule "commute_and_2" (formula "1") (term "0,1,0"))
      (rule "commute_and" (formula "1") (term "0,0,1,0"))
      (rule "arrayLengthNotNegative" (formula "8") (term "1"))
      (rule "arrayLengthIsAShort" (formula "9") (term "1"))
      (rule "inShort" (formula "9"))
      (rule "true_left" (formula "9"))
      (rule "lenNonNegative" (formula "9") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "9"))
      (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
      (rule "arrayLengthNotNegative" (formula "7") (term "0"))
      (rule "applyEq" (formula "7") (term "0") (ifseqformula "8"))
      (rule "arrayLengthIsAShort" (formula "7") (term "0"))
      (rule "inShort" (formula "7"))
      (rule "true_left" (formula "7"))
      (rule "ifthenelse_to_or_left" (formula "13") (term "0,0,0"))
      (rule "eqSymm" (formula "13") (term "1,1,0,0,0"))
      (rule "ifthenelse_concrete4" (formula "13") (term "1,1,0,0,0"))
      (rule "eqSymm" (formula "13") (term "1,0,0,0,0"))
      (rule "nnf_notAnd" (formula "13") (term "0,0,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0,0,0"))
      (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0,0,0"))
      (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0,0,0"))
      (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,0,0,0"))
      (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,0,0,0"))
      (rule "add_literals" (formula "13") (term "0,0,0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0,0"))
      (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,0"))
      (rule "nnf_notAnd" (formula "13") (term "0,1,1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "13") (term "1,0,1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,1,1,0,0,0"))
      (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,1,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,1,1,0,0,0"))
      (rule "add_literals" (formula "13") (term "0,0,0,1,0,1,1,0,0,0"))
      (rule "add_zero_left" (formula "13") (term "0,0,1,0,1,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1,0,1,1,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "13") (term "0,0,1,1,0,0,0"))
      (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,1,1,0,0,0"))
      (rule "add_literals" (formula "13") (term "0,0,0,0,1,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,1,1,0,0,0"))
      (rule "mul_literals" (formula "13") (term "1,0,0,1,1,0,0,0"))
      (rule "commute_or" (formula "13") (term "0,0"))
      (rule "commute_or_2" (formula "13") (term "0"))
      (rule "commute_or_2" (formula "13") (term "0,1,0"))
      (rule "commute_or" (formula "13") (term "1,1,0"))
      (rule "commute_or" (formula "13") (term "0,0,1,0"))
      (rule "commute_or_2" (formula "13") (term "0,1,1,0"))
      (rule "commute_or" (formula "13") (term "0,0,1,1,0"))
      (rule "cnf_rightDist" (formula "13") (term "1,1,0"))
      (rule "commute_or" (formula "13") (term "1,1,1,0"))
      (rule "cnf_rightDist" (formula "13") (term "0"))
      (rule "distr_forallAnd" (formula "13"))
      (rule "andLeft" (formula "13"))
      (rule "commute_or" (formula "14") (term "0"))
      (rule "shift_paren_or" (formula "13") (term "0"))
      (rule "shift_paren_or" (formula "13") (term "0,0"))
      (rule "commute_or_2" (formula "13") (term "0,0,0"))
      (rule "cnf_rightDist" (formula "14") (term "0"))
      (rule "distr_forallAnd" (formula "14"))
      (rule "andLeft" (formula "14"))
      (rule "commute_or_2" (formula "15") (term "0"))
      (rule "shift_paren_or" (formula "14") (term "0"))
      (rule "shift_paren_or" (formula "15") (term "0,0"))
      (rule "shift_paren_or" (formula "14") (term "0,0"))
      (rule "commute_or_2" (formula "15") (term "0,0,0"))
      (rule "eq_or_2" (formula "15") (term "0,0"))
      (rule "eq_or_2" (formula "15") (term "0,0,0"))
      (rule "commute_or_2" (formula "14") (term "0,0,0"))
      (rule "eq_or_2" (formula "14") (term "0,0"))
      (rule "commute_or" (formula "13") (term "0,0,0,0"))
      (rule "shift_paren_or" (formula "14") (term "0,0,0"))
      (rule "commute_or" (formula "14") (term "0,0,0,0"))
      (rule "eq_or_2" (formula "14") (term "0,0,0"))
      (rule "seqGetAlphaCast" (formula "17") (term "0,0,0,0"))
      (rule "castedGetAny" (formula "1") (term "0"))
      (rule "eqClose" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "ex_pull_out3" (formula "1") (term "0"))
      (rule "cnf_rightDist" (formula "1") (term "0,0"))
      (rule "commute_or" (formula "1") (term "1,0,0"))
      (rule "applyEq_or_int5" (formula "1") (term "1,0,0"))
      (rule "inEqSimp_homoInEq1" (formula "1") (term "1,1,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,1,0,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,1,1,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1,1,1,0,0"))
      (rule "commute_or_2" (formula "1") (term "1,0,0"))
      (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
      (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
      (rule "shift_paren_or" (formula "1") (term "1,0,0,0"))
      (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
      (rule "ifthenelse_to_or_left" (formula "13") (term "0,0,0,0,0"))
      (rule "eqSymm" (formula "13") (term "1,1,0,0,0,0,0"))
      (rule "eqSymm" (formula "13") (term "1,0,0,0,0,0,0"))
      (rule "nnf_notAnd" (formula "13") (term "0,0,0,0,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0,0,0,0,0"))
      (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0,0,0,0,0"))
      (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,0,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,0,0,0,0,0"))
      (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,0,0,0"))
      (rule "commute_or" (formula "13") (term "0,0,0,0"))
      (rule "commute_or_2" (formula "13") (term "0,0,0"))
      (rule "commute_or_2" (formula "13") (term "0,0"))
      (rule "commute_or_2" (formula "13") (term "0"))
      (rule "commute_or" (formula "13") (term "1,1,0"))
      (rule "commute_or_2" (formula "13") (term "0,1,0"))
      (rule "commute_or" (formula "13") (term "0,0,1,0"))
      (rule "cnf_rightDist" (formula "13") (term "1,1,0"))
      (rule "cnf_rightDist" (formula "13") (term "0"))
      (rule "distr_forallAnd" (formula "13"))
      (rule "andLeft" (formula "13"))
      (rule "commute_or" (formula "14") (term "0"))
      (rule "commute_or_2" (formula "13") (term "0"))
      (rule "commute_or_2" (formula "13") (term "0,0"))
      (rule "commute_or" (formula "14") (term "1,1,0"))
      (rule "cnf_rightDist" (formula "14") (term "0"))
      (rule "distr_forallAnd" (formula "14"))
      (rule "andLeft" (formula "14"))
      (rule "commute_or_2" (formula "14") (term "0"))
      (rule "shift_paren_or" (formula "15") (term "0"))
      (rule "commute_or_2" (formula "14") (term "0,0"))
      (rule "shift_paren_or" (formula "15") (term "0,0"))
      (rule "commute_or_2" (formula "14") (term "0,0,0"))
      (rule "shift_paren_or" (formula "13") (term "0,0,0"))
      (rule "shift_paren_or" (formula "15") (term "0,0,0"))
      (rule "commute_or_2" (formula "13") (term "0,0,0,0"))
      (rule "eq_or_2" (formula "13") (term "0,0,0"))
      (rule "commute_or_2" (formula "15") (term "0,0,0,0"))
      (rule "inEqSimp_or_tautInEq1" (formula "15") (term "0,0,0"))
      (rule "inEqSimp_homoInEq1" (formula "15") (term "1,0,0,0"))
      (rule "polySimp_pullOutFactor1" (formula "15") (term "0,1,0,0,0"))
      (rule "add_literals" (formula "15") (term "1,0,1,0,0,0"))
      (rule "times_zero_1" (formula "15") (term "0,1,0,0,0"))
      (rule "leq_literals" (formula "15") (term "1,0,0,0"))
      (rule "concrete_or_3" (formula "15") (term "0,0,0"))
      (rule "concrete_or_1" (formula "15") (term "0,0"))
      (rule "concrete_or_1" (formula "15") (term "0"))
      (rule "all_unused" (formula "15"))
      (rule "true_left" (formula "15"))
      (rule "shift_paren_or" (formula "14") (term "0,0,0,0"))
      (rule "shift_paren_or" (formula "13") (term "0,0,0,0"))
      (rule "commute_or" (formula "14") (term "0,0,0,0,0"))
      (rule "inEqSimp_or_tautInEq1" (formula "14") (term "0,0,0,0"))
      (rule "add_literals" (formula "14") (term "1,1,0,0,0,0"))
      (rule "qeq_literals" (formula "14") (term "1,0,0,0,0"))
      (rule "concrete_or_3" (formula "14") (term "0,0,0,0"))
      (rule "concrete_or_1" (formula "14") (term "0,0,0"))
      (rule "concrete_or_1" (formula "14") (term "0,0"))
      (rule "concrete_or_1" (formula "14") (term "0"))
      (rule "all_unused" (formula "14"))
      (rule "true_left" (formula "14"))
      (rule "commute_or" (formula "13") (term "0,0,0,0,0"))
      (rule "eq_or_2" (formula "13") (term "0,0,0,0"))
      (rule "arrayLengthNotNegative" (formula "17") (term "1,1,0"))
      (rule "arrayLengthIsAShort" (formula "18") (term "1,1,0"))
      (rule "inShort" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "arrayLengthIsAShort" (formula "18") (term "1,1"))
      (rule "inShort" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "arrayLengthNotNegative" (formula "18") (term "1,1"))
      (rule "commute_and" (formula "3") (term "0,0,0"))
      (rule "allLeft" (formula "13") (inst "t=iv_2"))
      (rule "inEqSimp_commuteGeq" (formula "13") (term "1,0"))
      (rule "inEqSimp_contradInEq1" (formula "13") (term "1,0") (ifseqformula "8"))
      (rule "inEqSimp_homoInEq1" (formula "13") (term "0,1,0"))
      (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1,0"))
      (rule "add_literals" (formula "13") (term "1,1,0,0,1,0"))
      (rule "times_zero_1" (formula "13") (term "1,0,0,1,0"))
      (rule "add_literals" (formula "13") (term "0,0,1,0"))
      (rule "leq_literals" (formula "13") (term "0,1,0"))
      (rule "concrete_and_2" (formula "13") (term "1,0"))
      (rule "concrete_or_4" (formula "13") (term "0"))
      (rule "inEqSimp_contradInEq1" (formula "13") (term "0") (ifseqformula "7"))
      (rule "qeq_literals" (formula "13") (term "0,0"))
      (rule "concrete_and_2" (formula "13") (term "0"))
      (rule "concrete_or_2" (formula "13"))
      (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "13"))
      (rule "concrete_and_3" (formula "6") (term "0,0"))
      (rule "replace_known_left" (formula "20") (term "1,0,0") (ifseqformula "13"))
      (rule "concrete_and_3" (formula "20") (term "0,0"))
      (rule "allLeft" (formula "12") (inst "t=iv_2"))
      (rule "inEqSimp_commuteGeq" (formula "12") (term "1,0"))
      (rule "inEqSimp_contradInEq1" (formula "12") (term "1,0") (ifseqformula "8"))
      (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1,0"))
      (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1,0"))
      (rule "add_literals" (formula "12") (term "1,1,0,0,1,0"))
      (rule "times_zero_1" (formula "12") (term "1,0,0,1,0"))
      (rule "add_literals" (formula "12") (term "0,0,1,0"))
      (rule "leq_literals" (formula "12") (term "0,1,0"))
      (rule "concrete_and_2" (formula "12") (term "1,0"))
      (rule "concrete_or_4" (formula "12") (term "0"))
      (rule "inEqSimp_contradInEq1" (formula "12") (term "0") (ifseqformula "7"))
      (rule "qeq_literals" (formula "12") (term "0,0"))
      (rule "concrete_and_2" (formula "12") (term "0"))
      (rule "concrete_or_2" (formula "12"))
      (rule "replace_known_left" (formula "6") (term "0,0") (ifseqformula "12"))
      (rule "ifthenelse_true" (formula "6") (term "0"))
      (rule "applyEqReverse" (formula "21") (term "1,2,1") (ifseqformula "6"))
      (rule "applyEqReverse" (formula "21") (term "0,1,1") (ifseqformula "6"))
      (rule "ifthenelse_concrete3" (formula "21"))
      (rule "orRight" (formula "21"))
      (rule "close" (formula "21") (ifseqformula "12"))
   )
)
)

}
